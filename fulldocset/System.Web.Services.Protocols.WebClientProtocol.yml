### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.WebClientProtocol
  id: WebClientProtocol
  children:
  - System.Web.Services.Protocols.WebClientProtocol.#ctor
  - System.Web.Services.Protocols.WebClientProtocol.Abort
  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  - System.Web.Services.Protocols.WebClientProtocol.Credentials
  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  - System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)
  - System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)
  - System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  - System.Web.Services.Protocols.WebClientProtocol.Timeout
  - System.Web.Services.Protocols.WebClientProtocol.Url
  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  langs:
  - csharp
  name: WebClientProtocol
  nameWithType: WebClientProtocol
  fullName: System.Web.Services.Protocols.WebClientProtocol
  type: Class
  summary: "Specifies the base class for all XML Web service client proxies created using ASP.NET."
  remarks: "The properties of the WebClientProtocol class are used to control the behavior of the transport used to transmit the XML Web service request and response. The properties on this class map to properties found on <xref:System.Net.WebRequest>. Instances of classes deriving from <xref:System.Net.WebRequest>, such as <xref:System.Net.HttpWebRequest>, are used as the transport mechanism for XML Web services created using ASP.NET.       To communicate with an XML Web service, you must create a proxy class deriving indirectly or directly from WebClientProtocol for the XML Web service you want to call. Instead of creating the proxy class manually, you can use the Wsdl.exe tool to create a proxy class for a given XML Web service&quot;s service description. Since WebClientProtocol is the base class for your client proxy, you will find its properties on your proxy classes. These properties are useful for controlling the request behavior of the underlying transport. For instance, use the <xref:System.Web.Services.Protocols.WebClientProtocol.Credentials%2A> property for calling authenticated XML Web services. Many of the WebClientProtocol properties are used to initialize the <xref:System.Net.WebRequest> object that is used to make the Web request."
  example:
  - "The following example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form sets proxy information and client credentials on the proxy class prior to calling the remote XML Web service method.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[Classic WebClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_0_1.aspx)]\n [!code-vb[Classic WebClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_0_1.aspx)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class WebClientProtocol : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: WebClientProtocol()
  nameWithType: WebClientProtocol.WebClientProtocol()
  fullName: System.Web.Services.Protocols.WebClientProtocol.WebClientProtocol()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Services.Protocols.WebClientProtocol&quot;></xref> class."
  remarks: ''
  example:
  - >-
    [!code-cs[System.Web.Services.Protocols.WebClientProtocol constructor#1](~/add/codesnippet/csharp/m-system.web.services.pr_11_1.cs)]
     [!code-cpp[System.Web.Services.Protocols.WebClientProtocol constructor#1](~/add/codesnippet/cpp/m-system.web.services.pr_11_1.cpp)]
     [!code-vb[System.Web.Services.Protocols.WebClientProtocol constructor#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_11_1.vb)]
  syntax:
    content: protected WebClientProtocol ();
    parameters: []
  overload: System.Web.Services.Protocols.WebClientProtocol.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.Abort
  id: Abort
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: Abort()
  nameWithType: WebClientProtocol.Abort()
  fullName: System.Web.Services.Protocols.WebClientProtocol.Abort()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Cancels a request to an XML Web service method."
  syntax:
    content: public virtual void Abort ();
    parameters: []
  overload: System.Web.Services.Protocols.WebClientProtocol.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  id: AddToCache(System.Type,System.Object)
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: AddToCache(Type,Object)
  nameWithType: WebClientProtocol.AddToCache(Type,Object)
  fullName: System.Web.Services.Protocols.WebClientProtocol.AddToCache(Type,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Add an instance of the client protocol handler to the cache."
  syntax:
    content: protected static void AddToCache (Type type, object value);
    parameters:
    - id: type
      type: System.Type
      description: "The <xref:System.Type> of the client protocol handler.."
    - id: value
      type: System.Object
      description: "The client protocol handler to be added to the cache."
  overload: System.Web.Services.Protocols.WebClientProtocol.AddToCache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  id: ConnectionGroupName
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: ConnectionGroupName
  nameWithType: WebClientProtocol.ConnectionGroupName
  fullName: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets or sets the name of the connection group for the request."
  remarks: "The ConnectionGroupName property enables you to associate a request to a connection group. For more details, see <xref:System.Net.HttpWebRequest.ConnectionGroupName%2A>."
  syntax:
    content: public string ConnectionGroupName { get; set; }
    return:
      type: System.String
      description: "The name of the connection group. The default is <xref:System.String>."
  overload: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.Credentials
  id: Credentials
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: Credentials
  nameWithType: WebClientProtocol.Credentials
  fullName: System.Web.Services.Protocols.WebClientProtocol.Credentials
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets or sets security credentials for XML Web service client authentication."
  remarks: "When using the `Credentials` property, a XML Web service client must instantiate a class implementing <xref:System.Net.ICredentials>, such as <xref:System.Net.NetworkCredential>, and then set the client credentials specific to the authentication mechanism. The <xref:System.Net.NetworkCredential> class can be used to set authentication credentials using the basic, digest, NTLM and Kerberos authentication mechanisms.       When the Credentials property is set to <xref:System.Net.CredentialCache.DefaultCredentials%2A?displayProperty=fullName> then the client negotiates with the server to do Kerberos and/or NTLM authentication depending on how the server is configured."
  example:
  - "The following example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form explicitly sets authentication credentials using the `Credentials` property. The user name, password and domain are passed into the constructor for the <xref:System.Net.NetworkCredential> class.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see.  \n  \n [!code-vb[Classic WebClientProtocol.Credentials Example#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_41_1.aspx)]\n [!code-cs[Classic WebClientProtocol.Credentials Example#1](~/add/codesnippet/csharp/p-system.web.services.pr_41_1.aspx)]"
  syntax:
    content: public System.Net.ICredentials Credentials { get; set; }
    return:
      type: System.Net.ICredentials
      description: "The <xref:System.Net.ICredentials> for the XML Web service client."
  overload: System.Web.Services.Protocols.WebClientProtocol.Credentials*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  id: GetFromCache(System.Type)
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: GetFromCache(Type)
  nameWithType: WebClientProtocol.GetFromCache(Type)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetFromCache(Type)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets an instance of a client protocol handler from the cache."
  syntax:
    content: protected static object GetFromCache (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The <xref:System.Type> of the client protocol handler to be returned from the cache."
    return:
      type: System.Object
      description: "An instance of a client protocol handler from the cache."
  overload: System.Web.Services.Protocols.WebClientProtocol.GetFromCache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)
  id: GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: GetWebRequest(Uri)
  nameWithType: WebClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(Uri)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Creates a <xref:System.Net.WebRequest> instance for the specified <code>uri</code>. This protected method is called by the XML Web service client infrastructure to get a new <xref:System.Net.WebRequest> transport object to transmit the XML Web service request."
  remarks: "This method can be overridden to customize the <xref:System.Net.WebRequest> object before the XML Web service request is made. For example you could add a custom header to the request."
  syntax:
    content: protected virtual System.Net.WebRequest GetWebRequest (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "The <xref:System.Uri> to use when creating the <xref:System.Net.WebRequest>."
    return:
      type: System.Net.WebRequest
      description: "The <xref:System.Net.WebRequest> instance."
  overload: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <code>uri</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)
  id: GetWebResponse(System.Net.WebRequest)
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: GetWebResponse(WebRequest)
  nameWithType: WebClientProtocol.GetWebResponse(WebRequest)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Returns a response from a synchronous request to an XML Web service method."
  syntax:
    content: protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request);
    parameters:
    - id: request
      type: System.Net.WebRequest
      description: "The <xref:System.Net.WebRequest> to get the response from."
    return:
      type: System.Net.WebResponse
      description: "A response from a synchronous request to an XML Web service method."
  overload: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse*
  exceptions:
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "If <xref:System.Web.Services.Protocols.WebClientProtocol.Abort*> is invoked prior to calling GetWebResponse."
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  id: GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: GetWebResponse(WebRequest,IAsyncResult)
  nameWithType: WebClientProtocol.GetWebResponse(WebRequest,IAsyncResult)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest,IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Returns a response from an asynchronous request to an XML Web service method. This protected method is called by the XML Web service client infrastructure to get the response from an asynchronous XML Web service request."
  syntax:
    content: protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request, IAsyncResult result);
    parameters:
    - id: request
      type: System.Net.WebRequest
      description: "The <xref:System.Net.WebRequest> to get the response from."
    - id: result
      type: System.IAsyncResult
      description: "The <xref:System.IAsyncResult> to pass to <xref:System.Net.HttpWebRequest.EndGetResponse*> when the response has completed."
    return:
      type: System.Net.WebResponse
      description: "A response from an asynchronous request to an XML Web service method."
  overload: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse*
  exceptions:
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "If <xref:System.Web.Services.Protocols.WebClientProtocol.Abort*> is invoked prior to calling <xref:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse*>."
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  id: PreAuthenticate
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: PreAuthenticate
  nameWithType: WebClientProtocol.PreAuthenticate
  fullName: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets or sets whether pre-authentication is enabled."
  remarks: "When a client requests a resource without using credentials, the server challenges the request and indicates what authentication schemes it supports. The client chooses an authentication scheme and sends the appropriate `WWW-authenticate` header to the server. When PreAuthenticate is `true`, the `WWW-authenticate` header is sent with all subsequent requests.       When PreAuthenticate is `false`, a request is made to the XML Web service method without initially attempting to authenticate the user. If the XML Web service allows anonymous access, then the XML Web service method is executed. If anonymous access is disallowed, a 401 HTTP return code is sent back to the client. In response, the <xref:System.Web.Services.Protocols.WebClientProtocol> class returns authentication credentials to the Web server. If the client is authenticated and subsequently authorized to access the XML Web service, the XML Web service method is executed; otherwise the client is denied access."
  syntax:
    content: public bool PreAuthenticate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to pre-authenticate the request; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  id: RequestEncoding
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: RequestEncoding
  nameWithType: WebClientProtocol.RequestEncoding
  fullName: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "The <xref:System.Text.Encoding> used to make the client request to the XML Web service."
  remarks: "The RequestEncoding determines the encoding for the request message. The <xref:System.Net.WebRequest.ContentType%2A> of the request will be annotated with the encoding value.       Classes deriving from <xref:System.Web.Services.Protocols.WebClientProtocol> support a particular protocol, such as <xref:System.Web.Services.Protocols.SoapHttpClientProtocol> does for SOAP, set this property to conform to encoding requirements for the specific protocol. For example, the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol> sets the default encoding to UTF-8."
  example:
  - "The following example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form explicitly sets RequestEncoding to UTF-8.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[Classic WebClientProtocol.RequestEncoding Example#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_59_1.aspx)]\n [!code-cs[Classic WebClientProtocol.RequestEncoding Example#1](~/add/codesnippet/csharp/p-system.web.services.pr_59_1.aspx)]"
  syntax:
    content: public System.Text.Encoding RequestEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "The character encoding for the client request. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, which uses the default encoding for the underlying transport and protocol."
  overload: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.Timeout
  id: Timeout
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: Timeout
  nameWithType: WebClientProtocol.Timeout
  fullName: System.Web.Services.Protocols.WebClientProtocol.Timeout
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Indicates the time an XML Web service client waits for the reply to a synchronous XML Web service request to arrive (in milliseconds)."
  remarks: "Setting the Timeout property to <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> indicates that the request does not time out. Even though an XML Web service client can set the Timeout property to not time out, the Web server can still cause the request to time out on the server side."
  example:
  - "The following example sets the `Timeout` value to 15000 (15 seconds) for the synchronous call to the `Add` XML Web service method within the `Math` XML Web service.  \n  \n [!code-cs[Classic WebClientProtocol.Timeout Example#1](~/add/codesnippet/csharp/p-system.web.services.pr_35_1.cs)]\n [!code-cpp[Classic WebClientProtocol.Timeout Example#1](~/add/codesnippet/cpp/p-system.web.services.pr_35_1.cpp)]\n [!code-vb[Classic WebClientProtocol.Timeout Example#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_35_1.vb)]"
  syntax:
    content: public int Timeout { get; set; }
    return:
      type: System.Int32
      description: "The time out, in milliseconds, for synchronous calls to the XML Web service. The default is 100000 milliseconds."
  overload: System.Web.Services.Protocols.WebClientProtocol.Timeout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.Url
  id: Url
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: Url
  nameWithType: WebClientProtocol.Url
  fullName: System.Web.Services.Protocols.WebClientProtocol.Url
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets or sets the base URL of the XML Web service the client is requesting."
  remarks: "Proxy classes generated using Wsdl.exe will set a default Url property for the client to use. The default Url is determined by the location attribute found in the service description from which the proxy class was generated.       Derived classes supporting specific protocols, such as <xref:System.Web.Services.Protocols.HttpGetClientProtocol> and <xref:System.Web.Services.Protocols.HttpPostClientProtocol> might add extra information to Url to make the XML Web service request.       The Url property can be changed to refer to any XML Web service that implements the same service description that the proxy class was generated from."
  example:
  - "The following example changes the Url property for the `math` XML Web service to the Web server named `http:// www.contoso.com`.  \n  \n [!code-cs[Classic WebClientProtocol.Url Example#1](~/add/codesnippet/csharp/p-system.web.services.pr_49_1.cs)]\n [!code-vb[Classic WebClientProtocol.Url Example#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_49_1.vb)]\n [!code-cpp[Classic WebClientProtocol.Url Example#1](~/add/codesnippet/cpp/p-system.web.services.pr_49_1.cpp)]"
  syntax:
    content: public string Url { get; set; }
    return:
      type: System.String
      description: "The base URL of the XML Web service the client is requesting. The default is <xref:System.String>."
  overload: System.Web.Services.Protocols.WebClientProtocol.Url*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: UseDefaultCredentials
  nameWithType: WebClientProtocol.UseDefaultCredentials
  fullName: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets or sets a value that indicates whether to set the <xref:System.Web.Services.Protocols.WebClientProtocol.Credentials*> property to the value of the &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A?displayProperty=fullName&gt; property."
  syntax:
    content: public bool UseDefaultCredentials { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the Credentials property is set to the value of the &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A?displayProperty=fullName&gt; property; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.Web.Services.Protocols.WebClientProtocol.#ctor
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: WebClientProtocol()
  nameWithType: WebClientProtocol.WebClientProtocol()
  fullName: System.Web.Services.Protocols.WebClientProtocol.WebClientProtocol()
- uid: System.Web.Services.Protocols.WebClientProtocol.Abort
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Abort()
  nameWithType: WebClientProtocol.Abort()
  fullName: System.Web.Services.Protocols.WebClientProtocol.Abort()
- uid: System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: AddToCache(Type,Object)
  nameWithType: WebClientProtocol.AddToCache(Type,Object)
  fullName: System.Web.Services.Protocols.WebClientProtocol.AddToCache(Type,Object)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: ConnectionGroupName
  nameWithType: WebClientProtocol.ConnectionGroupName
  fullName: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Services.Protocols.WebClientProtocol.Credentials
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Credentials
  nameWithType: WebClientProtocol.Credentials
  fullName: System.Web.Services.Protocols.WebClientProtocol.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetFromCache(Type)
  nameWithType: WebClientProtocol.GetFromCache(Type)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetFromCache(Type)
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetWebRequest(Uri)
  nameWithType: WebClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(Uri)
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: true
  name: WebRequest
  nameWithType: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetWebResponse(WebRequest)
  nameWithType: WebClientProtocol.GetWebResponse(WebRequest)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest)
- uid: System.Net.WebResponse
  parent: System.Net
  isExternal: true
  name: WebResponse
  nameWithType: WebResponse
  fullName: System.Net.WebResponse
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetWebResponse(WebRequest,IAsyncResult)
  nameWithType: WebClientProtocol.GetWebResponse(WebRequest,IAsyncResult)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest,IAsyncResult)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: PreAuthenticate
  nameWithType: WebClientProtocol.PreAuthenticate
  fullName: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: RequestEncoding
  nameWithType: WebClientProtocol.RequestEncoding
  fullName: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Web.Services.Protocols.WebClientProtocol.Timeout
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Timeout
  nameWithType: WebClientProtocol.Timeout
  fullName: System.Web.Services.Protocols.WebClientProtocol.Timeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Services.Protocols.WebClientProtocol.Url
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Url
  nameWithType: WebClientProtocol.Url
  fullName: System.Web.Services.Protocols.WebClientProtocol.Url
- uid: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebClientProtocol.UseDefaultCredentials
  fullName: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
- uid: System.Web.Services.Protocols.WebClientProtocol.#ctor*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: WebClientProtocol
  nameWithType: WebClientProtocol.WebClientProtocol
- uid: System.Web.Services.Protocols.WebClientProtocol.Abort*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Abort
  nameWithType: WebClientProtocol.Abort
- uid: System.Web.Services.Protocols.WebClientProtocol.AddToCache*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: AddToCache
  nameWithType: WebClientProtocol.AddToCache
- uid: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: ConnectionGroupName
  nameWithType: WebClientProtocol.ConnectionGroupName
- uid: System.Web.Services.Protocols.WebClientProtocol.Credentials*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Credentials
  nameWithType: WebClientProtocol.Credentials
- uid: System.Web.Services.Protocols.WebClientProtocol.GetFromCache*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetFromCache
  nameWithType: WebClientProtocol.GetFromCache
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetWebRequest
  nameWithType: WebClientProtocol.GetWebRequest
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetWebResponse
  nameWithType: WebClientProtocol.GetWebResponse
- uid: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: PreAuthenticate
  nameWithType: WebClientProtocol.PreAuthenticate
- uid: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: RequestEncoding
  nameWithType: WebClientProtocol.RequestEncoding
- uid: System.Web.Services.Protocols.WebClientProtocol.Timeout*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Timeout
  nameWithType: WebClientProtocol.Timeout
- uid: System.Web.Services.Protocols.WebClientProtocol.Url*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Url
  nameWithType: WebClientProtocol.Url
- uid: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebClientProtocol.UseDefaultCredentials
