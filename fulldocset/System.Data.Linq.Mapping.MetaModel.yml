### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.Mapping.MetaModel
  id: MetaModel
  children:
  - System.Data.Linq.Mapping.MetaModel.#ctor
  - System.Data.Linq.Mapping.MetaModel.ContextType
  - System.Data.Linq.Mapping.MetaModel.DatabaseName
  - System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)
  - System.Data.Linq.Mapping.MetaModel.GetFunctions
  - System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)
  - System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)
  - System.Data.Linq.Mapping.MetaModel.GetTables
  - System.Data.Linq.Mapping.MetaModel.MappingSource
  - System.Data.Linq.Mapping.MetaModel.ProviderType
  langs:
  - csharp
  name: MetaModel
  nameWithType: MetaModel
  fullName: System.Data.Linq.Mapping.MetaModel
  type: Class
  summary: "An abstraction that represents the mapping between a database and domain objects."
  syntax:
    content: public abstract class MetaModel
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaModel.#ctor
  id: '#ctor'
  parent: System.Data.Linq.Mapping.MetaModel
  langs:
  - csharp
  name: MetaModel()
  nameWithType: MetaModel.MetaModel()
  fullName: System.Data.Linq.Mapping.MetaModel.MetaModel()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.Linq.Mapping.MetaModel&quot;></xref> class."
  syntax:
    content: protected MetaModel ();
    parameters: []
  overload: System.Data.Linq.Mapping.MetaModel.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaModel.ContextType
  id: ContextType
  parent: System.Data.Linq.Mapping.MetaModel
  langs:
  - csharp
  name: ContextType
  nameWithType: MetaModel.ContextType
  fullName: System.Data.Linq.Mapping.MetaModel.ContextType
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Gets the type of <xref href=&quot;System.Data.Linq.DataContext&quot;></xref> type that this model describes."
  syntax:
    content: public abstract Type ContextType { get; }
    return:
      type: System.Type
      description: "The data context type."
  overload: System.Data.Linq.Mapping.MetaModel.ContextType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaModel.DatabaseName
  id: DatabaseName
  parent: System.Data.Linq.Mapping.MetaModel
  langs:
  - csharp
  name: DatabaseName
  nameWithType: MetaModel.DatabaseName
  fullName: System.Data.Linq.Mapping.MetaModel.DatabaseName
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Gets the name of the database."
  syntax:
    content: public abstract string DatabaseName { get; }
    return:
      type: System.String
      description: "The database name as a string."
  overload: System.Data.Linq.Mapping.MetaModel.DatabaseName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)
  id: GetFunction(System.Reflection.MethodInfo)
  parent: System.Data.Linq.Mapping.MetaModel
  langs:
  - csharp
  name: GetFunction(MethodInfo)
  nameWithType: MetaModel.GetFunction(MethodInfo)
  fullName: System.Data.Linq.Mapping.MetaModel.GetFunction(MethodInfo)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Gets the <xref href=&quot;System.Data.Linq.Mapping.MetaFunction&quot;></xref> that corresponds to a database function."
  remarks: "Database functions are user-defined functions, table-valued functions, and stored procedures."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaFunction GetFunction (System.Reflection.MethodInfo method);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: "The method defined on the <xref href=&quot;System.Data.Linq.DataContext&quot;></xref> or subordinate class that represents the database function."
    return:
      type: System.Data.Linq.Mapping.MetaFunction
      description: "The meta-function that corresponds to a database function."
  overload: System.Data.Linq.Mapping.MetaModel.GetFunction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaModel.GetFunctions
  id: GetFunctions
  parent: System.Data.Linq.Mapping.MetaModel
  langs:
  - csharp
  name: GetFunctions()
  nameWithType: MetaModel.GetFunctions()
  fullName: System.Data.Linq.Mapping.MetaModel.GetFunctions()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Gets an enumeration of all functions."
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<System.Data.Linq.Mapping.MetaFunction> GetFunctions ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaFunction}
      description: "An enumeration that can be used to iterate through all functions."
  overload: System.Data.Linq.Mapping.MetaModel.GetFunctions*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)
  id: GetMetaType(System.Type)
  parent: System.Data.Linq.Mapping.MetaModel
  langs:
  - csharp
  name: GetMetaType(Type)
  nameWithType: MetaModel.GetMetaType(Type)
  fullName: System.Data.Linq.Mapping.MetaModel.GetMetaType(Type)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Discovers the <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;></xref> for the specified <xref:System.Type>."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaType GetMetaType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The type for which the <xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;></xref> is sought."
    return:
      type: System.Data.Linq.Mapping.MetaType
      description: "A meta-type that corresponds to the specified type."
  overload: System.Data.Linq.Mapping.MetaModel.GetMetaType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)
  id: GetTable(System.Type)
  parent: System.Data.Linq.Mapping.MetaModel
  langs:
  - csharp
  name: GetTable(Type)
  nameWithType: MetaModel.GetTable(Type)
  fullName: System.Data.Linq.Mapping.MetaModel.GetTable(Type)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Gets the <xref href=&quot;System.Data.Linq.Mapping.MetaTable&quot;></xref> associated with a specified <xref:System.Type>."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaTable GetTable (Type rowType);
    parameters:
    - id: rowType
      type: System.Type
      description: "The common language runtime (CLR) row type."
    return:
      type: System.Data.Linq.Mapping.MetaTable
      description: "A meta-table associated with the specified row type."
  overload: System.Data.Linq.Mapping.MetaModel.GetTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaModel.GetTables
  id: GetTables
  parent: System.Data.Linq.Mapping.MetaModel
  langs:
  - csharp
  name: GetTables()
  nameWithType: MetaModel.GetTables()
  fullName: System.Data.Linq.Mapping.MetaModel.GetTables()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Get an enumeration of all tables."
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<System.Data.Linq.Mapping.MetaTable> GetTables ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaTable}
      description: "An enumerator that can be used to iterate over the tables."
  overload: System.Data.Linq.Mapping.MetaModel.GetTables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaModel.MappingSource
  id: MappingSource
  parent: System.Data.Linq.Mapping.MetaModel
  langs:
  - csharp
  name: MappingSource
  nameWithType: MetaModel.MappingSource
  fullName: System.Data.Linq.Mapping.MetaModel.MappingSource
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Gets the mapping source that originated this model."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MappingSource MappingSource { get; }
    return:
      type: System.Data.Linq.Mapping.MappingSource
      description: "The originating mapping source."
  overload: System.Data.Linq.Mapping.MetaModel.MappingSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaModel.ProviderType
  id: ProviderType
  parent: System.Data.Linq.Mapping.MetaModel
  langs:
  - csharp
  name: ProviderType
  nameWithType: MetaModel.ProviderType
  fullName: System.Data.Linq.Mapping.MetaModel.ProviderType
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Gets or sets the provider type."
  remarks: "If this property is specified, an existing provider type can be used. This will eliminate a round trip to the server to obtain this information. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] has to know the provider type to establish appropriate query translation rules. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] supports <xref:System.Data.Linq.SqlClient.Sql2000Provider> and <xref:System.Data.Linq.SqlClient.Sql2005Provider> providers."
  syntax:
    content: public abstract Type ProviderType { get; }
    return:
      type: System.Type
      description: "The provider type."
  overload: System.Data.Linq.Mapping.MetaModel.ProviderType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.Mapping.MetaModel.#ctor
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: MetaModel()
  nameWithType: MetaModel.MetaModel()
  fullName: System.Data.Linq.Mapping.MetaModel.MetaModel()
- uid: System.Data.Linq.Mapping.MetaModel.ContextType
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: ContextType
  nameWithType: MetaModel.ContextType
  fullName: System.Data.Linq.Mapping.MetaModel.ContextType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Linq.Mapping.MetaModel.DatabaseName
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: DatabaseName
  nameWithType: MetaModel.DatabaseName
  fullName: System.Data.Linq.Mapping.MetaModel.DatabaseName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: GetFunction(MethodInfo)
  nameWithType: MetaModel.GetFunction(MethodInfo)
  fullName: System.Data.Linq.Mapping.MetaModel.GetFunction(MethodInfo)
- uid: System.Data.Linq.Mapping.MetaFunction
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaFunction
  nameWithType: MetaFunction
  fullName: System.Data.Linq.Mapping.MetaFunction
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Data.Linq.Mapping.MetaModel.GetFunctions
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: GetFunctions()
  nameWithType: MetaModel.GetFunctions()
  fullName: System.Data.Linq.Mapping.MetaModel.GetFunctions()
- uid: System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaFunction}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<MetaFunction>
  nameWithType: IEnumerable<MetaFunction>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Linq.Mapping.MetaFunction>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.Linq.Mapping.MetaFunction>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.Mapping.MetaFunction
    name: MetaFunction
    nameWithType: MetaFunction
    fullName: MetaFunction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: GetMetaType(Type)
  nameWithType: MetaModel.GetMetaType(Type)
  fullName: System.Data.Linq.Mapping.MetaModel.GetMetaType(Type)
- uid: System.Data.Linq.Mapping.MetaType
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaType
  nameWithType: MetaType
  fullName: System.Data.Linq.Mapping.MetaType
- uid: System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: GetTable(Type)
  nameWithType: MetaModel.GetTable(Type)
  fullName: System.Data.Linq.Mapping.MetaModel.GetTable(Type)
- uid: System.Data.Linq.Mapping.MetaTable
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaTable
  nameWithType: MetaTable
  fullName: System.Data.Linq.Mapping.MetaTable
- uid: System.Data.Linq.Mapping.MetaModel.GetTables
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: GetTables()
  nameWithType: MetaModel.GetTables()
  fullName: System.Data.Linq.Mapping.MetaModel.GetTables()
- uid: System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaTable}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<MetaTable>
  nameWithType: IEnumerable<MetaTable>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Linq.Mapping.MetaTable>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.Linq.Mapping.MetaTable>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.Mapping.MetaTable
    name: MetaTable
    nameWithType: MetaTable
    fullName: MetaTable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.Mapping.MetaModel.MappingSource
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: MappingSource
  nameWithType: MetaModel.MappingSource
  fullName: System.Data.Linq.Mapping.MetaModel.MappingSource
- uid: System.Data.Linq.Mapping.MappingSource
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MappingSource
  nameWithType: MappingSource
  fullName: System.Data.Linq.Mapping.MappingSource
- uid: System.Data.Linq.Mapping.MetaModel.ProviderType
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: ProviderType
  nameWithType: MetaModel.ProviderType
  fullName: System.Data.Linq.Mapping.MetaModel.ProviderType
- uid: System.Data.Linq.Mapping.MetaModel.#ctor*
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: MetaModel
  nameWithType: MetaModel.MetaModel
- uid: System.Data.Linq.Mapping.MetaModel.ContextType*
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: ContextType
  nameWithType: MetaModel.ContextType
- uid: System.Data.Linq.Mapping.MetaModel.DatabaseName*
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: DatabaseName
  nameWithType: MetaModel.DatabaseName
- uid: System.Data.Linq.Mapping.MetaModel.GetFunction*
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: GetFunction
  nameWithType: MetaModel.GetFunction
- uid: System.Data.Linq.Mapping.MetaModel.GetFunctions*
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: GetFunctions
  nameWithType: MetaModel.GetFunctions
- uid: System.Data.Linq.Mapping.MetaModel.GetMetaType*
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: GetMetaType
  nameWithType: MetaModel.GetMetaType
- uid: System.Data.Linq.Mapping.MetaModel.GetTable*
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: GetTable
  nameWithType: MetaModel.GetTable
- uid: System.Data.Linq.Mapping.MetaModel.GetTables*
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: GetTables
  nameWithType: MetaModel.GetTables
- uid: System.Data.Linq.Mapping.MetaModel.MappingSource*
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: MappingSource
  nameWithType: MetaModel.MappingSource
- uid: System.Data.Linq.Mapping.MetaModel.ProviderType*
  parent: System.Data.Linq.Mapping.MetaModel
  isExternal: false
  name: ProviderType
  nameWithType: MetaModel.ProviderType
