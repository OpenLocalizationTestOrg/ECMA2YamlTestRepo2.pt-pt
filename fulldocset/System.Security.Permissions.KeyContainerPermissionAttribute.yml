### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.KeyContainerPermissionAttribute
  id: KeyContainerPermissionAttribute
  children:
  - System.Security.Permissions.KeyContainerPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.KeyContainerPermissionAttribute.CreatePermission
  - System.Security.Permissions.KeyContainerPermissionAttribute.Flags
  - System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerName
  - System.Security.Permissions.KeyContainerPermissionAttribute.KeySpec
  - System.Security.Permissions.KeyContainerPermissionAttribute.KeyStore
  - System.Security.Permissions.KeyContainerPermissionAttribute.ProviderName
  - System.Security.Permissions.KeyContainerPermissionAttribute.ProviderType
  langs:
  - csharp
  name: KeyContainerPermissionAttribute
  nameWithType: KeyContainerPermissionAttribute
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute
  type: Class
  summary: "Allows security actions for <xref href=&quot;System.Security.Permissions.KeyContainerPermission&quot;></xref> to be applied to code using declarative security. This class cannot be inherited."
  remarks: "The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> value that is used.       The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. KeyContainerPermissionAttribute is used only for declarative security. For imperative security, use the <xref:System.Security.Permissions.KeyContainerPermission> class."
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class KeyContainerPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  langs:
  - csharp
  name: KeyContainerPermissionAttribute(SecurityAction)
  nameWithType: KeyContainerPermissionAttribute.KeyContainerPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.KeyContainerPermissionAttribute&quot;></xref> class with the specified security action."
  syntax:
    content: public KeyContainerPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "One of the <xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref> values."
  overload: System.Security.Permissions.KeyContainerPermissionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: KeyContainerPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns a new <xref href=&quot;System.Security.Permissions.KeyContainerPermission&quot;></xref>."
  remarks: "This method should only be called by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. The metadata is created from the permission object that this method returns."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Security.Permissions.KeyContainerPermission&quot;></xref> that corresponds to the attribute."
  overload: System.Security.Permissions.KeyContainerPermissionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.Flags
  id: Flags
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  langs:
  - csharp
  name: Flags
  nameWithType: KeyContainerPermissionAttribute.Flags
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the key container permissions."
  remarks: "> [!CAUTION] >  Many of these flags are powerful and permit access to key containers that should be granted only to highly trusted code.       The most powerful of the flags are <xref:System.Security.Permissions.KeyContainerPermissionFlags>, <xref:System.Security.Permissions.KeyContainerPermissionFlags>, <xref:System.Security.Permissions.KeyContainerPermissionFlags>, <xref:System.Security.Permissions.KeyContainerPermissionFlags>, <xref:System.Security.Permissions.KeyContainerPermissionFlags>, <xref:System.Security.Permissions.KeyContainerPermissionFlags>, and <xref:System.Security.Permissions.KeyContainerPermissionFlags>. For specific threats posed by the use of these flags, see individual flag descriptions."
  syntax:
    content: public System.Security.Permissions.KeyContainerPermissionFlags Flags { get; set; }
    return:
      type: System.Security.Permissions.KeyContainerPermissionFlags
      description: "A bitwise combination of the <xref href=&quot;System.Security.Permissions.KeyContainerPermissionFlags&quot;></xref> values. The default is <xref href=&quot;System.Security.Permissions.KeyContainerPermissionFlags&quot;></xref>."
  overload: System.Security.Permissions.KeyContainerPermissionAttribute.Flags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerName
  id: KeyContainerName
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  langs:
  - csharp
  name: KeyContainerName
  nameWithType: KeyContainerPermissionAttribute.KeyContainerName
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the name of the key container."
  remarks: "Use a value of &quot;*&quot; to apply the access entry to all key containers within the specified provider name and provider type."
  syntax:
    content: public string KeyContainerName { get; set; }
    return:
      type: System.String
      description: "The name of the key container."
  overload: System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.KeySpec
  id: KeySpec
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  langs:
  - csharp
  name: KeySpec
  nameWithType: KeyContainerPermissionAttribute.KeySpec
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.KeySpec
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the key specification."
  remarks: "If no value is specified, the AT_KEYEXCHANGE value (1) is used. Valid values for this property are AT_KEYEXCHANGE (1) and AT_SIGNATURE (2)."
  syntax:
    content: public int KeySpec { get; set; }
    return:
      type: System.Int32
      description: "One of the AT_ values defined in the Wincrypt.h header file."
  overload: System.Security.Permissions.KeyContainerPermissionAttribute.KeySpec*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.KeyStore
  id: KeyStore
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  langs:
  - csharp
  name: KeyStore
  nameWithType: KeyContainerPermissionAttribute.KeyStore
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.KeyStore
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the name of the key store."
  remarks: "Valid values are &quot;User&quot;, &quot;Machine&quot;, and &quot;*&quot;. If `null` is specified, the value is set to &quot;\\*&quot;."
  syntax:
    content: public string KeyStore { get; set; }
    return:
      type: System.String
      description: "The name of the key store. The default is &quot;*&quot;."
  overload: System.Security.Permissions.KeyContainerPermissionAttribute.KeyStore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderName
  id: ProviderName
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  langs:
  - csharp
  name: ProviderName
  nameWithType: KeyContainerPermissionAttribute.ProviderName
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the provider name."
  remarks: "An example of a provider name is &quot;Microsoft Enhanced Cryptographic Provider&quot;. If `null` is specified, the enhanced cryptographic provider name is used."
  syntax:
    content: public string ProviderName { get; set; }
    return:
      type: System.String
      description: "The name of the provider."
  overload: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderType
  id: ProviderType
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  langs:
  - csharp
  name: ProviderType
  nameWithType: KeyContainerPermissionAttribute.ProviderType
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the provider type."
  remarks: "If no value is specified, PROV_RSA_FULL (1) is used.  \n  \n The following values are defined in the Wincrypt.h header file:  \n  \n-   \\#define PROV_RSA_FULL 1  \n  \n-   \\#define PROV_RSA_SIG 2  \n  \n-   \\#define PROV_DSS 3  \n  \n-   \\#define PROV_FORTEZZA 4  \n  \n-   \\#define PROV_MS_EXCHANGE 5  \n  \n-   \\#define PROV_SSL 6  \n  \n-   \\#define PROV_RSA_SCHANNEL 12  \n  \n-   \\#define PROV_DSS_DH 13  \n  \n-   \\#define PROV_EC_ECDSA_SIG 14  \n  \n-   \\#define PROV_EC_ECNRA_SIG 15  \n  \n-   \\#define PROV_EC_ECDSA_FULL 16  \n  \n-   \\#define PROV_EC_ECNRA_FULL 17  \n  \n-   \\#define PROV_DH_SCHANNEL 18  \n  \n-   \\#define PROV_SPYRUS_LYNKS 20  \n  \n-   \\#define PROV_RNG 21  \n  \n-   \\#define PROV_INTEL_SEC 22  \n  \n-   \\#define PROV_REPLACE_OWF 23  \n  \n-   \\#define PROV_RSA_AES 24"
  syntax:
    content: public int ProviderType { get; set; }
    return:
      type: System.Int32
      description: "One of the PROV_ values defined in the Wincrypt.h header file."
  overload: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: KeyContainerPermissionAttribute(SecurityAction)
  nameWithType: KeyContainerPermissionAttribute.KeyContainerPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: KeyContainerPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.Flags
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: KeyContainerPermissionAttribute.Flags
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.Flags
- uid: System.Security.Permissions.KeyContainerPermissionFlags
  parent: System.Security.Permissions
  isExternal: false
  name: KeyContainerPermissionFlags
  nameWithType: KeyContainerPermissionFlags
  fullName: System.Security.Permissions.KeyContainerPermissionFlags
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerName
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: KeyContainerName
  nameWithType: KeyContainerPermissionAttribute.KeyContainerName
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.KeySpec
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: KeySpec
  nameWithType: KeyContainerPermissionAttribute.KeySpec
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.KeySpec
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.KeyStore
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: KeyStore
  nameWithType: KeyContainerPermissionAttribute.KeyStore
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.KeyStore
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderName
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: ProviderName
  nameWithType: KeyContainerPermissionAttribute.ProviderName
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderName
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderType
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: ProviderType
  nameWithType: KeyContainerPermissionAttribute.ProviderType
  fullName: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderType
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.#ctor*
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: KeyContainerPermissionAttribute
  nameWithType: KeyContainerPermissionAttribute.KeyContainerPermissionAttribute
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: KeyContainerPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.Flags*
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: KeyContainerPermissionAttribute.Flags
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerName*
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: KeyContainerName
  nameWithType: KeyContainerPermissionAttribute.KeyContainerName
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.KeySpec*
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: KeySpec
  nameWithType: KeyContainerPermissionAttribute.KeySpec
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.KeyStore*
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: KeyStore
  nameWithType: KeyContainerPermissionAttribute.KeyStore
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderName*
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: ProviderName
  nameWithType: KeyContainerPermissionAttribute.ProviderName
- uid: System.Security.Permissions.KeyContainerPermissionAttribute.ProviderType*
  parent: System.Security.Permissions.KeyContainerPermissionAttribute
  isExternal: false
  name: ProviderType
  nameWithType: KeyContainerPermissionAttribute.ProviderType
