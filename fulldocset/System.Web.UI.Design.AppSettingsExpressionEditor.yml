### YamlMime:ManagedReference
items:
- uid: System.Web.UI.Design.AppSettingsExpressionEditor
  id: AppSettingsExpressionEditor
  children:
  - System.Web.UI.Design.AppSettingsExpressionEditor.#ctor
  - System.Web.UI.Design.AppSettingsExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)
  - System.Web.UI.Design.AppSettingsExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)
  langs:
  - csharp
  name: AppSettingsExpressionEditor
  nameWithType: AppSettingsExpressionEditor
  fullName: System.Web.UI.Design.AppSettingsExpressionEditor
  type: Class
  summary: "Provides properties and methods for evaluating and editing an application setting expression in a configuration file at design time."
  remarks: "The AppSettingsExpressionEditor class is derived from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating an application setting reference with a control property at design time. For example, you can bind the value of a control property to the application setting expression `AppSettings:mySettingKeyName`, which indicates that the control property value is set using the `mySettingKeyName` value in the `appSettings` section of the Web configuration file.       A visual designer host, such as [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], uses the AppSettingsExpressionEditor class to select an application setting from the `appSettings` configuration section, and then evaluates the selected expression for design-time rendering.       When you browse to the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the run-time value for a control property. You can select the expression type based on a list of expression prefixes. When you select the **AppSettings** expression prefix from the list, the visual designer host uses the associated <xref:System.Web.UI.Design.ExpressionEditorSheet> object to provide design-time editing functionality of `appSettings` expressions and uses AppSettingsExpressionEditor methods to evaluate and convert the expression string based on the syntax for an application setting expression. The visual designer host uses the evaluated expression result to assign control property values that are rendered on the design surface.       The <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> property for an AppSettingsExpressionEditor object returns the string `AppSettings`. The <xref:System.Web.Compilation.AppSettingsExpressionBuilder> class is associated with the expression prefix `AppSettings` and the AppSettingsExpressionEditor implementation.       The <xref:System.Web.UI.Design.AppSettingsExpressionEditor.EvaluateExpression%2A> method evaluates an input application setting expression string. The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns the <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that is used to enter and edit application setting expressions."
  example:
  - "The following code example demonstrates how to bind the <xref:System.Web.UI.WebControls.HyperLink.NavigateUrl%2A> property of a <xref:System.Web.UI.WebControls.HyperLink> control to an application setting expression using the AppSettingsExpressionEditor object.  \n  \n1.  In a Web Forms project, add `MyHyperLinkSetting` to the `<appSettings>` section of the web.config file.  \n  \n     [!code-xml[ControlsUsingExpressions#5](~/add/codesnippet/xml/t-system.web.ui.design.a_1.xml)]  \n  \n2.  On a Web Forms page, add a <xref:System.Web.UI.WebControls.HyperLink> control.  \n  \n3.  For the `Hyperlink` control, in Properties, click **Expressions**, and then click the ellipsis button (**...**).  \n  \n     The `<Hyperlinkname>`**Expression** dialog box appears.  \n  \n4.  Under **Bindable properties**, click **NavigateUrl**, in the **Expression type** list, click **AppSettings**, and then under **Expression properties**, in the **AppSetting** box, type **MyHyperLinkSetting**.  \n  \n The visual designer uses the AppSettingsExpressionEditor to assign the expression for the `NavigateUrl` property.  \n  \n The following aspx source shows an example of a property value set using an application setting expression.  \n  \n [!code-vb[ControlsUsingExpressions#2](~/add/codesnippet/visualbasic/t-system.web.ui.design.a_2.aspx)]\n [!code-cs[ControlsUsingExpressions#2](~/add/codesnippet/csharp/t-system.web.ui.design.a_2.aspx)]\n [!code-xml[ControlsUsingExpressions#2](~/add/codesnippet/xml/t-system.web.ui.design.a_2.xml)]"
  syntax:
    content: 'public class AppSettingsExpressionEditor : System.Web.UI.Design.ExpressionEditor'
  inheritance:
  - System.Object
  - System.Web.UI.Design.ExpressionEditor
  implements: []
  inheritedMembers:
  - System.Web.UI.Design.ExpressionEditor.ExpressionPrefix
  - System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)
  - System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)
  platform:
  - net462
- uid: System.Web.UI.Design.AppSettingsExpressionEditor.#ctor
  id: '#ctor'
  parent: System.Web.UI.Design.AppSettingsExpressionEditor
  langs:
  - csharp
  name: AppSettingsExpressionEditor()
  nameWithType: AppSettingsExpressionEditor.AppSettingsExpressionEditor()
  fullName: System.Web.UI.Design.AppSettingsExpressionEditor.AppSettingsExpressionEditor()
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.Design.AppSettingsExpressionEditor&quot;></xref> class."
  remarks: "An instance of the <xref:System.Web.UI.Design.AppSettingsExpressionEditor> class is configured by the base class together with the <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> property set to `AppSettings`."
  syntax:
    content: public AppSettingsExpressionEditor ();
    parameters: []
  overload: System.Web.UI.Design.AppSettingsExpressionEditor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.Design.AppSettingsExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)
  id: EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)
  parent: System.Web.UI.Design.AppSettingsExpressionEditor
  langs:
  - csharp
  name: EvaluateExpression(String,Object,Type,IServiceProvider)
  nameWithType: AppSettingsExpressionEditor.EvaluateExpression(String,Object,Type,IServiceProvider)
  fullName: System.Web.UI.Design.AppSettingsExpressionEditor.EvaluateExpression(String,Object,Type,IServiceProvider)
  type: Method
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: "Evaluates an application setting expression string and provides the design-time value for a control property."
  remarks: "The EvaluateExpression method looks up the application setting that is specified by `expression`, and then returns the value of the application setting.       The visual designer uses the EvaluateExpression method to evaluate an application setting expression and provide the design-time value for an associated control property. The visual designer calls the EvaluateExpression method with the expression string, and uses the evaluated expression result to assign control property values that are rendered on the design surface.       At run time, the page parser uses the <xref:System.Web.Compilation.AppSettingsExpressionBuilder.EvaluateExpression%2A> and <xref:System.Web.Compilation.AppSettingsExpressionBuilder.GetCodeExpression%2A> methods of the corresponding <xref:System.Web.Compilation.AppSettingsExpressionBuilder> implementation to evaluate an expression and provide the run-time value for an associated control property."
  syntax:
    content: public override object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);
    parameters:
    - id: expression
      type: System.String
      description: "An application setting expression string to evaluate. `expression` does not include the <xref uid=&quot;langword_csharp_AppSettings&quot; name=&quot;AppSettings&quot; href=&quot;&quot;></xref> expression prefix."
    - id: parseTimeData
      type: System.Object
      description: "An object containing additional parsing information for evaluating `expression`."
    - id: propertyType
      type: System.Type
      description: "The control property type."
    - id: serviceProvider
      type: System.IServiceProvider
      description: "A service provider implementation supplied by the designer host, used to obtain additional design-time services."
    return:
      type: System.Object
      description: "The object referenced by <code>expression</code>, if the expression evaluation succeeded; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.Design.AppSettingsExpressionEditor.EvaluateExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.Design.AppSettingsExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)
  id: GetExpressionEditorSheet(System.String,System.IServiceProvider)
  parent: System.Web.UI.Design.AppSettingsExpressionEditor
  langs:
  - csharp
  name: GetExpressionEditorSheet(String,IServiceProvider)
  nameWithType: AppSettingsExpressionEditor.GetExpressionEditorSheet(String,IServiceProvider)
  fullName: System.Web.UI.Design.AppSettingsExpressionEditor.GetExpressionEditorSheet(String,IServiceProvider)
  type: Method
  assemblies:
  - System.Design
  namespace: System.Web.UI.Design
  summary: "Returns an expression editor sheet for an application setting expression."
  remarks: "The GetExpressionEditorSheet method returns a simple editor sheet implementation, which uses a single input string to form the expression."
  syntax:
    content: public override System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);
    parameters:
    - id: expression
      type: System.String
      description: "The expression string set for a control property, used to initialize the expression editor sheet. `expression` does not include the <xref uid=&quot;langword_csharp_AppSettings&quot; name=&quot;AppSettings&quot; href=&quot;&quot;></xref> expression prefix."
    - id: serviceProvider
      type: System.IServiceProvider
      description: "A service provider implementation supplied by the designer host, used to obtain additional design-time services."
    return:
      type: System.Web.UI.Design.ExpressionEditorSheet
      description: "An <xref href=&quot;System.Web.UI.Design.ExpressionEditorSheet&quot;></xref> implementation that defines the application setting expression properties."
  overload: System.Web.UI.Design.AppSettingsExpressionEditor.GetExpressionEditorSheet*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.Design.ExpressionEditor
  isExternal: false
  name: System.Web.UI.Design.ExpressionEditor
- uid: System.Web.UI.Design.AppSettingsExpressionEditor.#ctor
  parent: System.Web.UI.Design.AppSettingsExpressionEditor
  isExternal: false
  name: AppSettingsExpressionEditor()
  nameWithType: AppSettingsExpressionEditor.AppSettingsExpressionEditor()
  fullName: System.Web.UI.Design.AppSettingsExpressionEditor.AppSettingsExpressionEditor()
- uid: System.Web.UI.Design.AppSettingsExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)
  parent: System.Web.UI.Design.AppSettingsExpressionEditor
  isExternal: false
  name: EvaluateExpression(String,Object,Type,IServiceProvider)
  nameWithType: AppSettingsExpressionEditor.EvaluateExpression(String,Object,Type,IServiceProvider)
  fullName: System.Web.UI.Design.AppSettingsExpressionEditor.EvaluateExpression(String,Object,Type,IServiceProvider)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Web.UI.Design.AppSettingsExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)
  parent: System.Web.UI.Design.AppSettingsExpressionEditor
  isExternal: false
  name: GetExpressionEditorSheet(String,IServiceProvider)
  nameWithType: AppSettingsExpressionEditor.GetExpressionEditorSheet(String,IServiceProvider)
  fullName: System.Web.UI.Design.AppSettingsExpressionEditor.GetExpressionEditorSheet(String,IServiceProvider)
- uid: System.Web.UI.Design.ExpressionEditorSheet
  parent: System.Web.UI.Design
  isExternal: false
  name: ExpressionEditorSheet
  nameWithType: ExpressionEditorSheet
  fullName: System.Web.UI.Design.ExpressionEditorSheet
- uid: System.Web.UI.Design.AppSettingsExpressionEditor.#ctor*
  parent: System.Web.UI.Design.AppSettingsExpressionEditor
  isExternal: false
  name: AppSettingsExpressionEditor
  nameWithType: AppSettingsExpressionEditor.AppSettingsExpressionEditor
- uid: System.Web.UI.Design.AppSettingsExpressionEditor.EvaluateExpression*
  parent: System.Web.UI.Design.AppSettingsExpressionEditor
  isExternal: false
  name: EvaluateExpression
  nameWithType: AppSettingsExpressionEditor.EvaluateExpression
- uid: System.Web.UI.Design.AppSettingsExpressionEditor.GetExpressionEditorSheet*
  parent: System.Web.UI.Design.AppSettingsExpressionEditor
  isExternal: false
  name: GetExpressionEditorSheet
  nameWithType: AppSettingsExpressionEditor.GetExpressionEditorSheet
