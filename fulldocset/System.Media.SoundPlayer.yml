### YamlMime:ManagedReference
items:
- uid: System.Media.SoundPlayer
  id: SoundPlayer
  children:
  - System.Media.SoundPlayer.#ctor
  - System.Media.SoundPlayer.#ctor(System.IO.Stream)
  - System.Media.SoundPlayer.#ctor(System.String)
  - System.Media.SoundPlayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Media.SoundPlayer.IsLoadCompleted
  - System.Media.SoundPlayer.Load
  - System.Media.SoundPlayer.LoadAsync
  - System.Media.SoundPlayer.LoadCompleted
  - System.Media.SoundPlayer.LoadTimeout
  - System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)
  - System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)
  - System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)
  - System.Media.SoundPlayer.Play
  - System.Media.SoundPlayer.PlayLooping
  - System.Media.SoundPlayer.PlaySync
  - System.Media.SoundPlayer.SoundLocation
  - System.Media.SoundPlayer.SoundLocationChanged
  - System.Media.SoundPlayer.Stop
  - System.Media.SoundPlayer.Stream
  - System.Media.SoundPlayer.StreamChanged
  - System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Media.SoundPlayer.Tag
  langs:
  - csharp
  name: SoundPlayer
  nameWithType: SoundPlayer
  fullName: System.Media.SoundPlayer
  type: Class
  summary: "Controls playback of a sound from a .wav file."
  remarks: "The SoundPlayer class provides a simple interface for loading and playing a .wav file. The SoundPlayer class supports loading a .wav file from a file path, a URL, a <xref:System.IO.Stream> that contains a .wav file, or an embedded resource that contains a .wav file.       To play a sound using the SoundPlayer class, configure a SoundPlayer with a path to the .wav file and call one of the play methods. You can identify the .wav file to play by using one of the constructors or by setting either the <xref:System.Media.SoundPlayer.SoundLocation%2A> or <xref:System.Media.SoundPlayer.Stream%2A> property. The file can be loaded prior to playing by using one of the load methods, or loading can be deferred until one of the play methods is called. A SoundPlayer configured to load a .wav file from a <xref:System.IO.Stream> or URL must load the .wav file into memory before playback begins.       You can load or play a .wav file synchronously or asynchronously. If you call a synchronous load or play method, the calling thread will wait until the method returns, which may cause painting and other events to be interrupted. Calling an asynchronous load or play method will allow the calling thread to continue without interruption. For more information on asynchronous method calls, see [How to: Run an Operation in the Background](~/add/includes/ajax-current-ext-md.md).       When a SoundPlayer has finished loading a .wav file, it raises the <xref:System.Media.SoundPlayer.LoadCompleted> event. You can examine the <xref:System.ComponentModel.AsyncCompletedEventArgs> in your event handler to determine if the load succeeded or failed. The <xref:System.Media.SoundPlayer.SoundLocationChanged> event is raised when the audio source is set to a new file path or URL. The <xref:System.Media.SoundPlayer.StreamChanged> event is raised when the audio source is set to a new <xref:System.IO.Stream>. For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       For more information about SoundPlayer, see [SoundPlayer Class Overview](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  The SoundPlayer class cannot play other file types, such as .wma or .mp3. If you want to play other file types, you can use the Windows Media Player control. For more information, see [Using the Windows Media Player Control in a .NET Framework Solution](http://go.microsoft.com/fwlink/?LinkId=131267) and [Windows Media Player Object Model Reference for Visual Basic .NET and C#](http://go.microsoft.com/fwlink/?LinkId=131269) in the Windows Media Player SDK."
  example:
  - "The following code example demonstrates the use of the SoundPlayer class for playing .wav files from a local path or a Uniform Resource Identifier (URI).  \n  \n [!code-vb[System.Windows.Forms.Sound#1](~/add/codesnippet/visualbasic/t-system.media.soundplayer_1.vb)]\n [!code-cpp[System.Windows.Forms.Sound#1](~/add/codesnippet/cpp/t-system.media.soundplayer_1.cpp)]\n [!code-cs[System.Windows.Forms.Sound#1](~/add/codesnippet/csharp/t-system.media.soundplayer_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.ToolboxItem(false)]

      public class SoundPlayer : System.ComponentModel.Component, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Media.SoundPlayer.#ctor
  id: '#ctor'
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: SoundPlayer()
  nameWithType: SoundPlayer.SoundPlayer()
  fullName: System.Media.SoundPlayer.SoundPlayer()
  type: Constructor
  assemblies:
  - System
  namespace: System.Media
  summary: "Initializes a new instance of the <xref href=&quot;System.Media.SoundPlayer&quot;></xref> class."
  remarks: "This constructor initializes a <xref:System.Media.SoundPlayer> with no audio source. Until it is configured with an audio source path, the <xref:System.Media.SoundPlayer> will play a beep sound when one of its playback methods is called."
  syntax:
    content: public SoundPlayer ();
    parameters: []
  overload: System.Media.SoundPlayer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: SoundPlayer(Stream)
  nameWithType: SoundPlayer.SoundPlayer(Stream)
  fullName: System.Media.SoundPlayer.SoundPlayer(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Media
  summary: "Initializes a new instance of the <xref href=&quot;System.Media.SoundPlayer&quot;></xref> class, and attaches the .wav file within the specified <xref:System.IO.Stream>."
  remarks: "The <xref:System.IO.Stream> passed to the `stream` parameter should be a <xref:System.IO.Stream> containing a .wav file. The data returned by the <xref:System.IO.Stream.Read%2A> method of the <xref:System.IO.Stream> should be the data within a .wav file."
  syntax:
    content: public SoundPlayer (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream> to a .wav file."
  overload: System.Media.SoundPlayer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: SoundPlayer(String)
  nameWithType: SoundPlayer.SoundPlayer(String)
  fullName: System.Media.SoundPlayer.SoundPlayer(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Media
  summary: "Initializes a new instance of the <xref href=&quot;System.Media.SoundPlayer&quot;></xref> class, and attaches the specified .wav file."
  remarks: "The string passed to the `soundLocation` parameter can be either a file path or a URL to a .wav file. If the path or URL is not valid, the <xref:System.Media.SoundPlayer> will still be constructed, but subsequent calls to a load or play method will fail."
  syntax:
    content: public SoundPlayer (string soundLocation);
    parameters:
    - id: soundLocation
      type: System.String
      description: "The location of a .wav file to load."
  overload: System.Media.SoundPlayer.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "The URL value specified by <code>soundLocation</code> cannot be resolved."
  platform:
  - net462
- uid: System.Media.SoundPlayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: SoundPlayer(SerializationInfo,StreamingContext)
  nameWithType: SoundPlayer.SoundPlayer(SerializationInfo,StreamingContext)
  fullName: System.Media.SoundPlayer.SoundPlayer(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Media
  summary: "Initializes a new instance of the <xref href=&quot;System.Media.SoundPlayer&quot;></xref> class."
  syntax:
    content: protected SoundPlayer (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "The <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref> to be used for deserialization."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "The destination to be used for deserialization."
  overload: System.Media.SoundPlayer.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "The <xref:System.Media.SoundPlayer.SoundLocation*> specified in <code>serializationInfo</code> cannot be resolved."
  platform:
  - net462
- uid: System.Media.SoundPlayer.IsLoadCompleted
  id: IsLoadCompleted
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: IsLoadCompleted
  nameWithType: SoundPlayer.IsLoadCompleted
  fullName: System.Media.SoundPlayer.IsLoadCompleted
  type: Property
  assemblies:
  - System
  namespace: System.Media
  summary: "Gets a value indicating whether loading of a .wav file has successfully completed."
  syntax:
    content: public bool IsLoadCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a .wav file is loaded; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if a .wav file has not yet been loaded."
  overload: System.Media.SoundPlayer.IsLoadCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.Load
  id: Load
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: Load()
  nameWithType: SoundPlayer.Load()
  fullName: System.Media.SoundPlayer.Load()
  type: Method
  assemblies:
  - System
  namespace: System.Media
  summary: "Loads a sound synchronously."
  remarks: "The Load method uses the current thread to load a .wav file, preventing the thread from handling other messages until the load is complete.      > [!CAUTION] >  The Load method may produce a delay while loading a large .wav file. In addition, painting and other events will be blocked until the load is completed. Use the <xref:System.Media.SoundPlayer.LoadAsync%2A> method to load a sound asynchronously, which allows the calling thread to continue without interruption.       This method raises the <xref:System.Media.SoundPlayer.LoadCompleted> event when loading completes, even if the load was not successful."
  example:
  - "The following code example demonstrates the use of the <xref:System.Media.SoundPlayer.LoadAsync%2A> method to attach a .wav file to an instance of the <xref:System.Media.SoundPlayer> class. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \n  \n [!code-vb[System.Windows.Forms.Sound#2](~/add/codesnippet/visualbasic/m-system.media.soundplay_2_1.vb)]\n [!code-cpp[System.Windows.Forms.Sound#2](~/add/codesnippet/cpp/m-system.media.soundplay_2_1.cpp)]\n [!code-cs[System.Windows.Forms.Sound#2](~/add/codesnippet/csharp/m-system.media.soundplay_2_1.cs)]"
  syntax:
    content: public void Load ();
    parameters: []
  overload: System.Media.SoundPlayer.Load*
  exceptions:
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found."
  platform:
  - net462
- uid: System.Media.SoundPlayer.LoadAsync
  id: LoadAsync
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: LoadAsync()
  nameWithType: SoundPlayer.LoadAsync()
  fullName: System.Media.SoundPlayer.LoadAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Media
  summary: "Loads a .wav file from a stream or a Web resource using a new thread."
  remarks: "If a <xref:System.Media.SoundPlayer> is configured to load a .wav file from a <xref:System.IO.Stream> or Web resource, this method begins loading a .wav file from the location using a new thread.       This method raises the <xref:System.Media.SoundPlayer.LoadCompleted> event when loading completes, even if the load was not successful.       If a <xref:System.Media.SoundPlayer> is configured to load a .wav file from a local file path, this method does nothing, because loading is deferred until playing begins.       For more information about asynchronous loading, see [How to: Load a Sound Asynchronously within a Windows Form](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the LoadAsync method to asynchronously load a .wav file for use by an instance of the <xref:System.Media.SoundPlayer> class. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \n  \n [!code-vb[System.Windows.Forms.Sound#3](~/add/codesnippet/visualbasic/m-system.media.soundplay_3_1.vb)]\n [!code-cpp[System.Windows.Forms.Sound#3](~/add/codesnippet/cpp/m-system.media.soundplay_3_1.cpp)]\n [!code-cs[System.Windows.Forms.Sound#3](~/add/codesnippet/csharp/m-system.media.soundplay_3_1.cs)]"
  syntax:
    content: public void LoadAsync ();
    parameters: []
  overload: System.Media.SoundPlayer.LoadAsync*
  exceptions:
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found."
  platform:
  - net462
- uid: System.Media.SoundPlayer.LoadCompleted
  id: LoadCompleted
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: LoadCompleted
  nameWithType: SoundPlayer.LoadCompleted
  fullName: System.Media.SoundPlayer.LoadCompleted
  type: Event
  assemblies:
  - System
  namespace: System.Media
  summary: "Occurs when a .wav file has been successfully or unsuccessfully loaded."
  remarks: "This event is raised when loading of a .wav file is complete. The event arguments indicate whether the load of the sound was completed successfully or failed.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates the use of the <xref:System.Media.SoundPlayer.OnLoadCompleted%2A> event handler to receive a notification indicating that the contents of a .wav file have been loaded. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \n  \n [!code-vb[System.Windows.Forms.Sound#8](~/add/codesnippet/visualbasic/e-system.media.soundplay_1_1.vb)]\n [!code-cpp[System.Windows.Forms.Sound#8](~/add/codesnippet/cpp/e-system.media.soundplay_1_1.cpp)]\n [!code-cs[System.Windows.Forms.Sound#8](~/add/codesnippet/csharp/e-system.media.soundplay_1_1.cs)]"
  syntax:
    content: public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;
    return:
      type: System.ComponentModel.AsyncCompletedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.LoadTimeout
  id: LoadTimeout
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: LoadTimeout
  nameWithType: SoundPlayer.LoadTimeout
  fullName: System.Media.SoundPlayer.LoadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Media
  summary: "Gets or sets the time, in milliseconds, in which the .wav file must load."
  remarks: "After this time has expired, the loading is canceled and a <xref:System.ServiceProcess.TimeoutException> exception is thrown."
  syntax:
    content: public int LoadTimeout { get; set; }
    return:
      type: System.Int32
      description: "The number of milliseconds to wait. The default is 10000 (10 seconds)."
  overload: System.Media.SoundPlayer.LoadTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)
  id: OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: OnLoadCompleted(AsyncCompletedEventArgs)
  nameWithType: SoundPlayer.OnLoadCompleted(AsyncCompletedEventArgs)
  fullName: System.Media.SoundPlayer.OnLoadCompleted(AsyncCompletedEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Media
  summary: "Raises the <xref href=&quot;System.Media.SoundPlayer.LoadCompleted&quot;></xref> event."
  remarks: "This method is called when loading of a .wav file is complete.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnLoadCompleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnLoadCompleted (System.ComponentModel.AsyncCompletedEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.AsyncCompletedEventArgs
      description: "An <xref:System.ComponentModel.AsyncCompletedEventArgs> that contains the event data."
  overload: System.Media.SoundPlayer.OnLoadCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)
  id: OnSoundLocationChanged(System.EventArgs)
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: OnSoundLocationChanged(EventArgs)
  nameWithType: SoundPlayer.OnSoundLocationChanged(EventArgs)
  fullName: System.Media.SoundPlayer.OnSoundLocationChanged(EventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Media
  summary: "Raises the <xref href=&quot;System.Media.SoundPlayer.SoundLocationChanged&quot;></xref> event."
  remarks: "This method is called when a new audio source path for this <xref:System.Media.SoundPlayer> has been set.       Raising an event invokes the event handler through a delegate. For more information, see How to: Provide Event functionality and [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnSoundLocationChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnSoundLocationChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Media.SoundPlayer.OnSoundLocationChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)
  id: OnStreamChanged(System.EventArgs)
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: OnStreamChanged(EventArgs)
  nameWithType: SoundPlayer.OnStreamChanged(EventArgs)
  fullName: System.Media.SoundPlayer.OnStreamChanged(EventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Media
  summary: "Raises the <xref href=&quot;System.Media.SoundPlayer.StreamChanged&quot;></xref> event."
  remarks: "This method is called when a new <xref:System.IO.Stream> audio source for this <xref:System.Media.SoundPlayer> has been set.       Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnStreamChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnStreamChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Media.SoundPlayer.OnStreamChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.Play
  id: Play
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: Play()
  nameWithType: SoundPlayer.Play()
  fullName: System.Media.SoundPlayer.Play()
  type: Method
  assemblies:
  - System
  namespace: System.Media
  summary: "Plays the .wav file using a new thread, and loads the .wav file first if it has not been loaded."
  remarks: "The Play method plays the sound using a new thread. If you call Play before the .wav file has been loaded into memory, the .wav file will be loaded before playback starts. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.       If the .wav file has not been specified or it fails to load, the Play method will play the default beep sound."
  example:
  - "The following code example demonstrates the use of the Play method to asynchronously play a .wav file. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \n  \n [!code-vb[System.Windows.Forms.Sound#5](~/add/codesnippet/visualbasic/m-system.media.soundplay_0_1.vb)]\n [!code-cpp[System.Windows.Forms.Sound#5](~/add/codesnippet/cpp/m-system.media.soundplay_0_1.cpp)]\n [!code-cs[System.Windows.Forms.Sound#5](~/add/codesnippet/csharp/m-system.media.soundplay_0_1.cs)]"
  syntax:
    content: public void Play ();
    parameters: []
  overload: System.Media.SoundPlayer.Play*
  exceptions:
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file."
  platform:
  - net462
- uid: System.Media.SoundPlayer.PlayLooping
  id: PlayLooping
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: PlayLooping()
  nameWithType: SoundPlayer.PlayLooping()
  fullName: System.Media.SoundPlayer.PlayLooping()
  type: Method
  assemblies:
  - System
  namespace: System.Media
  summary: "Plays and loops the .wav file using a new thread, and loads the .wav file first if it has not been loaded."
  remarks: "The PlayLooping method plays and loops the sound using a new thread. If you call PlayLooping before the .wav file has been loaded into memory, the .wav file will be loaded before playback starts. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.       If the .wav file has not been specified or it fails to load, the PlayLooping method will play the default beep sound.       For more information about PlayLooping, see [How to: Loop a Sound Playing on a Windows Form](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the PlayLooping method to repeatedly play a .wav file. The .wav will be played until the <xref:System.Media.SoundPlayer.Stop%2A> method is called. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \n  \n [!code-vb[System.Windows.Forms.Sound#6](~/add/codesnippet/visualbasic/m-system.media.soundplay_1_1.vb)]\n [!code-cpp[System.Windows.Forms.Sound#6](~/add/codesnippet/cpp/m-system.media.soundplay_1_1.cpp)]\n [!code-cs[System.Windows.Forms.Sound#6](~/add/codesnippet/csharp/m-system.media.soundplay_1_1.cs)]"
  syntax:
    content: public void PlayLooping ();
    parameters: []
  overload: System.Media.SoundPlayer.PlayLooping*
  exceptions:
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file."
  platform:
  - net462
- uid: System.Media.SoundPlayer.PlaySync
  id: PlaySync
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: PlaySync()
  nameWithType: SoundPlayer.PlaySync()
  fullName: System.Media.SoundPlayer.PlaySync()
  type: Method
  assemblies:
  - System
  namespace: System.Media
  summary: "Plays the .wav file and loads the .wav file first if it has not been loaded."
  remarks: "The PlaySync method uses the current thread to play a .wav file, preventing the thread from handling other messages until the load is complete. You can use the <xref:System.Media.SoundPlayer.LoadAsync%2A> or <xref:System.Media.SoundPlayer.Load%2A> method to load the .wav file to memory in advance. After a .wav file is successfully loaded from a <xref:System.IO.Stream> or URL, future calls to playback methods for the <xref:System.Media.SoundPlayer> will not need to reload the .wav file until the path for the sound changes.       If the .wav file has not been specified or it fails to load, the PlaySync method will play the default beep sound."
  example:
  - "The following code example demonstrates the use of the PlaySync method to synchronously play a .wav file.  \n  \n [!code-cs[System.Windows.Forms.PlaySync#1](~/add/codesnippet/csharp/m-system.media.soundplay_4_1.cs)]\n [!code-cpp[System.Windows.Forms.PlaySync#1](~/add/codesnippet/cpp/m-system.media.soundplay_4_1.cpp)]\n [!code-vb[System.Windows.Forms.PlaySync#1](~/add/codesnippet/visualbasic/m-system.media.soundplay_4_1.vb)]"
  syntax:
    content: public void PlaySync ();
    parameters: []
  overload: System.Media.SoundPlayer.PlaySync*
  exceptions:
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "The elapsed time during loading exceeds the time, in milliseconds, specified by <xref:System.Media.SoundPlayer.LoadTimeout*>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file specified by <xref:System.Media.SoundPlayer.SoundLocation*> cannot be found."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The .wav header is corrupted; the file specified by <xref:System.Media.SoundPlayer.SoundLocation*> is not a PCM .wav file."
  platform:
  - net462
- uid: System.Media.SoundPlayer.SoundLocation
  id: SoundLocation
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: SoundLocation
  nameWithType: SoundPlayer.SoundLocation
  fullName: System.Media.SoundPlayer.SoundLocation
  type: Property
  assemblies:
  - System
  namespace: System.Media
  summary: "Gets or sets the file path or URL of the .wav file to load."
  remarks: "This property is set to <xref:System.String?displayProperty=fullName> when the <xref:System.Media.SoundPlayer.Stream%2A> property is set to a <xref:System.IO.Stream>."
  example:
  - "The following code example demonstrates the use of the SoundLocation property to assign the .wav file source to an instance of the <xref:System.Media.SoundPlayer> class. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \n  \n [!code-vb[System.Windows.Forms.Sound#2](~/add/codesnippet/visualbasic/p-system.media.soundplay_1.vb)]\n [!code-cpp[System.Windows.Forms.Sound#2](~/add/codesnippet/cpp/p-system.media.soundplay_1.cpp)]\n [!code-cs[System.Windows.Forms.Sound#2](~/add/codesnippet/csharp/p-system.media.soundplay_1.cs)]"
  syntax:
    content: public string SoundLocation { get; set; }
    return:
      type: System.String
      description: "The file path or URL from which to load a .wav file, or &lt;xref:System.String?displayProperty=fullName&gt; if no file path is present. The default is &lt;xref:System.String?displayProperty=fullName&gt;."
  overload: System.Media.SoundPlayer.SoundLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.SoundLocationChanged
  id: SoundLocationChanged
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: SoundLocationChanged
  nameWithType: SoundPlayer.SoundLocationChanged
  fullName: System.Media.SoundPlayer.SoundLocationChanged
  type: Event
  assemblies:
  - System
  namespace: System.Media
  summary: "Occurs when a new audio source path for this <xref href=&quot;System.Media.SoundPlayer&quot;></xref> has been set."
  remarks: "This event is raised when a new audio source path for this <xref:System.Media.SoundPlayer> has been set.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates the use of the <xref:System.Media.SoundPlayer.OnSoundLocationChanged%2A> event handler to receive a notification when the <xref:System.Media.SoundPlayer> has been attached to a different .wav file. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \n  \n [!code-vb[System.Windows.Forms.Sound#9](~/add/codesnippet/visualbasic/e-system.media.soundplay_0_1.vb)]\n [!code-cpp[System.Windows.Forms.Sound#9](~/add/codesnippet/cpp/e-system.media.soundplay_0_1.cpp)]\n [!code-cs[System.Windows.Forms.Sound#9](~/add/codesnippet/csharp/e-system.media.soundplay_0_1.cs)]"
  syntax:
    content: public event EventHandler SoundLocationChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.Stop
  id: Stop
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: Stop()
  nameWithType: SoundPlayer.Stop()
  fullName: System.Media.SoundPlayer.Stop()
  type: Method
  assemblies:
  - System
  namespace: System.Media
  summary: "Stops playback of the sound if playback is occurring."
  remarks: ''
  example:
  - "The following code example demonstrates the use of the Stop method to halt a .wav file that is currently playing. This code example is part of a larger example provided for the <xref:System.Media.SoundPlayer> class.  \n  \n [!code-vb[System.Windows.Forms.Sound#7](~/add/codesnippet/visualbasic/m-system.media.soundplay_5_1.vb)]\n [!code-cpp[System.Windows.Forms.Sound#7](~/add/codesnippet/cpp/m-system.media.soundplay_5_1.cpp)]\n [!code-cs[System.Windows.Forms.Sound#7](~/add/codesnippet/csharp/m-system.media.soundplay_5_1.cs)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Media.SoundPlayer.Stop*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.Stream
  id: Stream
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: Stream
  nameWithType: SoundPlayer.Stream
  fullName: System.Media.SoundPlayer.Stream
  type: Property
  assemblies:
  - System
  namespace: System.Media
  summary: "Gets or sets the <xref:System.IO.Stream> from which to load the .wav file."
  remarks: "This property is set to `null` when the <xref:System.Media.SoundPlayer.SoundLocation%2A> property is set to a new and valid sound location."
  syntax:
    content: public System.IO.Stream Stream { get; set; }
    return:
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream> from which to load the .wav file, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no stream is available. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Media.SoundPlayer.Stream*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.StreamChanged
  id: StreamChanged
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: StreamChanged
  nameWithType: SoundPlayer.StreamChanged
  fullName: System.Media.SoundPlayer.StreamChanged
  type: Event
  assemblies:
  - System
  namespace: System.Media
  summary: "Occurs when a new <xref:System.IO.Stream> audio source for this <xref href=&quot;System.Media.SoundPlayer&quot;></xref> has been set."
  remarks: "This event is raised when a new <xref:System.IO.Stream> audio source for this <xref:System.Media.SoundPlayer> has been set.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler StreamChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SoundPlayer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Media.SoundPlayer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Media
  summary: "For a description of this member, see the &lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A?displayProperty=fullName&gt; method."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Media.SoundPlayer> instance is cast to an <xref:System.Runtime.Serialization.ISerializable> interface."
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "The <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref> to populate with data."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "The destination (see <xref:System.Runtime.Serialization.StreamingContext>) for this serialization."
  overload: System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Media.SoundPlayer.Tag
  id: Tag
  parent: System.Media.SoundPlayer
  langs:
  - csharp
  name: Tag
  nameWithType: SoundPlayer.Tag
  fullName: System.Media.SoundPlayer.Tag
  type: Property
  assemblies:
  - System
  namespace: System.Media
  summary: "Gets or sets the <xref:System.Object> that contains data about the <xref href=&quot;System.Media.SoundPlayer&quot;></xref>."
  syntax:
    content: public object Tag { get; set; }
    return:
      type: System.Object
      description: "An <xref:System.Object> that contains data about the <xref href=&quot;System.Media.SoundPlayer&quot;></xref>."
  overload: System.Media.SoundPlayer.Tag*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.ServiceProcess.TimeoutException
  parent: System.ServiceProcess
  isExternal: false
  name: TimeoutException
  nameWithType: TimeoutException
  fullName: System.ServiceProcess.TimeoutException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Media.SoundPlayer.#ctor
  parent: System.Media.SoundPlayer
  isExternal: false
  name: SoundPlayer()
  nameWithType: SoundPlayer.SoundPlayer()
  fullName: System.Media.SoundPlayer.SoundPlayer()
- uid: System.Media.SoundPlayer.#ctor(System.IO.Stream)
  parent: System.Media.SoundPlayer
  isExternal: false
  name: SoundPlayer(Stream)
  nameWithType: SoundPlayer.SoundPlayer(Stream)
  fullName: System.Media.SoundPlayer.SoundPlayer(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Media.SoundPlayer.#ctor(System.String)
  parent: System.Media.SoundPlayer
  isExternal: false
  name: SoundPlayer(String)
  nameWithType: SoundPlayer.SoundPlayer(String)
  fullName: System.Media.SoundPlayer.SoundPlayer(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Media.SoundPlayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Media.SoundPlayer
  isExternal: false
  name: SoundPlayer(SerializationInfo,StreamingContext)
  nameWithType: SoundPlayer.SoundPlayer(SerializationInfo,StreamingContext)
  fullName: System.Media.SoundPlayer.SoundPlayer(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Media.SoundPlayer.IsLoadCompleted
  parent: System.Media.SoundPlayer
  isExternal: false
  name: IsLoadCompleted
  nameWithType: SoundPlayer.IsLoadCompleted
  fullName: System.Media.SoundPlayer.IsLoadCompleted
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Media.SoundPlayer.Load
  parent: System.Media.SoundPlayer
  isExternal: false
  name: Load()
  nameWithType: SoundPlayer.Load()
  fullName: System.Media.SoundPlayer.Load()
- uid: System.Media.SoundPlayer.LoadAsync
  parent: System.Media.SoundPlayer
  isExternal: false
  name: LoadAsync()
  nameWithType: SoundPlayer.LoadAsync()
  fullName: System.Media.SoundPlayer.LoadAsync()
- uid: System.Media.SoundPlayer.LoadCompleted
  parent: System.Media.SoundPlayer
  isExternal: false
  name: LoadCompleted
  nameWithType: SoundPlayer.LoadCompleted
  fullName: System.Media.SoundPlayer.LoadCompleted
- uid: System.ComponentModel.AsyncCompletedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: AsyncCompletedEventHandler
  nameWithType: AsyncCompletedEventHandler
  fullName: System.ComponentModel.AsyncCompletedEventHandler
- uid: System.Media.SoundPlayer.LoadTimeout
  parent: System.Media.SoundPlayer
  isExternal: false
  name: LoadTimeout
  nameWithType: SoundPlayer.LoadTimeout
  fullName: System.Media.SoundPlayer.LoadTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)
  parent: System.Media.SoundPlayer
  isExternal: false
  name: OnLoadCompleted(AsyncCompletedEventArgs)
  nameWithType: SoundPlayer.OnLoadCompleted(AsyncCompletedEventArgs)
  fullName: System.Media.SoundPlayer.OnLoadCompleted(AsyncCompletedEventArgs)
- uid: System.ComponentModel.AsyncCompletedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: AsyncCompletedEventArgs
  nameWithType: AsyncCompletedEventArgs
  fullName: System.ComponentModel.AsyncCompletedEventArgs
- uid: System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)
  parent: System.Media.SoundPlayer
  isExternal: false
  name: OnSoundLocationChanged(EventArgs)
  nameWithType: SoundPlayer.OnSoundLocationChanged(EventArgs)
  fullName: System.Media.SoundPlayer.OnSoundLocationChanged(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)
  parent: System.Media.SoundPlayer
  isExternal: false
  name: OnStreamChanged(EventArgs)
  nameWithType: SoundPlayer.OnStreamChanged(EventArgs)
  fullName: System.Media.SoundPlayer.OnStreamChanged(EventArgs)
- uid: System.Media.SoundPlayer.Play
  parent: System.Media.SoundPlayer
  isExternal: false
  name: Play()
  nameWithType: SoundPlayer.Play()
  fullName: System.Media.SoundPlayer.Play()
- uid: System.Media.SoundPlayer.PlayLooping
  parent: System.Media.SoundPlayer
  isExternal: false
  name: PlayLooping()
  nameWithType: SoundPlayer.PlayLooping()
  fullName: System.Media.SoundPlayer.PlayLooping()
- uid: System.Media.SoundPlayer.PlaySync
  parent: System.Media.SoundPlayer
  isExternal: false
  name: PlaySync()
  nameWithType: SoundPlayer.PlaySync()
  fullName: System.Media.SoundPlayer.PlaySync()
- uid: System.Media.SoundPlayer.SoundLocation
  parent: System.Media.SoundPlayer
  isExternal: false
  name: SoundLocation
  nameWithType: SoundPlayer.SoundLocation
  fullName: System.Media.SoundPlayer.SoundLocation
- uid: System.Media.SoundPlayer.SoundLocationChanged
  parent: System.Media.SoundPlayer
  isExternal: false
  name: SoundLocationChanged
  nameWithType: SoundPlayer.SoundLocationChanged
  fullName: System.Media.SoundPlayer.SoundLocationChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Media.SoundPlayer.Stop
  parent: System.Media.SoundPlayer
  isExternal: false
  name: Stop()
  nameWithType: SoundPlayer.Stop()
  fullName: System.Media.SoundPlayer.Stop()
- uid: System.Media.SoundPlayer.Stream
  parent: System.Media.SoundPlayer
  isExternal: false
  name: Stream
  nameWithType: SoundPlayer.Stream
  fullName: System.Media.SoundPlayer.Stream
- uid: System.Media.SoundPlayer.StreamChanged
  parent: System.Media.SoundPlayer
  isExternal: false
  name: StreamChanged
  nameWithType: SoundPlayer.StreamChanged
  fullName: System.Media.SoundPlayer.StreamChanged
- uid: System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Media.SoundPlayer
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SoundPlayer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Media.SoundPlayer.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Media.SoundPlayer.Tag
  parent: System.Media.SoundPlayer
  isExternal: false
  name: Tag
  nameWithType: SoundPlayer.Tag
  fullName: System.Media.SoundPlayer.Tag
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Media.SoundPlayer.#ctor*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: SoundPlayer
  nameWithType: SoundPlayer.SoundPlayer
- uid: System.Media.SoundPlayer.IsLoadCompleted*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: IsLoadCompleted
  nameWithType: SoundPlayer.IsLoadCompleted
- uid: System.Media.SoundPlayer.Load*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: Load
  nameWithType: SoundPlayer.Load
- uid: System.Media.SoundPlayer.LoadAsync*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: LoadAsync
  nameWithType: SoundPlayer.LoadAsync
- uid: System.Media.SoundPlayer.LoadTimeout*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: LoadTimeout
  nameWithType: SoundPlayer.LoadTimeout
- uid: System.Media.SoundPlayer.OnLoadCompleted*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: OnLoadCompleted
  nameWithType: SoundPlayer.OnLoadCompleted
- uid: System.Media.SoundPlayer.OnSoundLocationChanged*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: OnSoundLocationChanged
  nameWithType: SoundPlayer.OnSoundLocationChanged
- uid: System.Media.SoundPlayer.OnStreamChanged*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: OnStreamChanged
  nameWithType: SoundPlayer.OnStreamChanged
- uid: System.Media.SoundPlayer.Play*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: Play
  nameWithType: SoundPlayer.Play
- uid: System.Media.SoundPlayer.PlayLooping*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: PlayLooping
  nameWithType: SoundPlayer.PlayLooping
- uid: System.Media.SoundPlayer.PlaySync*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: PlaySync
  nameWithType: SoundPlayer.PlaySync
- uid: System.Media.SoundPlayer.SoundLocation*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: SoundLocation
  nameWithType: SoundPlayer.SoundLocation
- uid: System.Media.SoundPlayer.Stop*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: Stop
  nameWithType: SoundPlayer.Stop
- uid: System.Media.SoundPlayer.Stream*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: Stream
  nameWithType: SoundPlayer.Stream
- uid: System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: SoundPlayer.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Media.SoundPlayer.Tag*
  parent: System.Media.SoundPlayer
  isExternal: false
  name: Tag
  nameWithType: SoundPlayer.Tag
