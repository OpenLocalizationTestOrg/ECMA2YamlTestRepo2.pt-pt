### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACMD5
  id: HMACMD5
  children:
  - System.Security.Cryptography.HMACMD5.#ctor
  - System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])
  langs:
  - csharp
  name: HMACMD5
  nameWithType: HMACMD5
  fullName: System.Security.Cryptography.HMACMD5
  type: Class
  summary: "Calcula uma base em Hash Message Authentication Code (HMAC) utilizando o <xref href=&quot;System.Security.Cryptography.MD5&quot;> </xref> função de hash."
  remarks: "HMACMD5 é um tipo do algoritmo de hash que é construído a partir da função de hash de Message Digest algoritmo 5 (MD5) e a ser utilizado como uma base em Hash Message Authentication Code (HMAC). O processo HMAC mistura uma chave secreta com os dados da mensagem, mistura o resultado com a função de hash, mistura esse valor hash com a chave secreta novamente e, em seguida, aplica-se a função de hash uma segunda vez. O hash de saída é de 128 bits de comprimento.       Um HMAC pode ser utilizado para determinar se uma mensagem enviada através de um canal inseguras tenha sido adulterada, desde que o remetente e o recetor partilham uma chave secreta. O remetente calcula o valor de hash de dados originais e envia os dados originais e o valor de hash, como uma única mensagem. O recetor recalcula o valor de hash à mensagem recebida e verifica que o HMAC calculada corresponde a HMAC transmitido.       Qualquer alteração aos dados ou o valor de hash resulta num erro de correspondência, porque os dados de conhecimento da chave secreta é necessário para alterar a mensagem e reproduzir o valor de hash correto. Por conseguinte, se os valores de hash original e calculada corresponderem, a mensagem é autenticada.       MD5 é um algoritmo de hash criptográfico desenvolvido junto da RSA Laboratories. HMACMD5 aceita as chaves de qualquer tamanho e produz uma sequência de hash que é de 128 bits de comprimento."
  example:
  - "The following example shows how to sign a file by using the HMACMD5 object and then how to verify the file.  \n  \n [!code-cs[HMACMD5#1](~/add/codesnippet/csharp/t-system.security.crypto_58_1.cs)]\n [!code-cpp[HMACMD5#1](~/add/codesnippet/cpp/t-system.security.crypto_58_1.cpp)]\n [!code-vb[HMACMD5#1](~/add/codesnippet/visualbasic/t-system.security.crypto_58_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACMD5 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACMD5.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACMD5
  langs:
  - csharp
  name: HMACMD5()
  nameWithType: HMACMD5.HMACMD5()
  fullName: System.Security.Cryptography.HMACMD5.HMACMD5()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.HMACMD5&quot;> </xref> classe utilizando uma chave gerada aleatoriamente."
  remarks: "<xref:System.Security.Cryptography.HMACMD5>é um tipo do algoritmo de hash que é construído a partir da função de hash MD5 e utilizado como uma base em Hash Message Authentication Code (HMAC).</xref:System.Security.Cryptography.HMACMD5> O processo HMAC mistura uma chave secreta com os dados da mensagem, mistura o resultado com a função de hash, mistura esse valor hash com a chave secreta novamente e, em seguida, aplica-se a função de hash uma segunda vez. O hash de saída é de 128 bits de comprimento.       Este construtor utiliza uma chave de 64 bytes, gerada aleatoriamente."
  syntax:
    content: public HMACMD5 ();
    parameters: []
  overload: System.Security.Cryptography.HMACMD5.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACMD5
  langs:
  - csharp
  name: HMACMD5(Byte[])
  nameWithType: HMACMD5.HMACMD5(Byte[])
  fullName: System.Security.Cryptography.HMACMD5.HMACMD5(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.HMACMD5&quot;> </xref> classe utilizando a chave especificada."
  remarks: "<xref:System.Security.Cryptography.HMACMD5>é um tipo do algoritmo de hash que é construído a partir da função de hash MD5 e utilizado como uma base em Hash Message Authentication Code (HMAC).</xref:System.Security.Cryptography.HMACMD5> O processo HMAC mistura uma chave secreta com os dados da mensagem, mistura o resultado com a função de hash, mistura esse valor hash com a chave secreta novamente e, em seguida, aplica-se a função de hash uma segunda vez. O hash de saída é de 128 bits de comprimento.       Este construtor utiliza uma chave de fornecer para criar o <xref:System.Security.Cryptography.HMACMD5>objeto.</xref:System.Security.Cryptography.HMACMD5>"
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACMD5> class.
  syntax:
    content: public HMACMD5 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "A chave secreta para <xref href=&quot;System.Security.Cryptography.HMACMD5&quot;> </xref> encriptação. A chave pode ser qualquer comprimento, mas se for mais de 64 bytes de comprimento irá ser protegido por hash (utilizando SHA-1) para derivar uma chave de 64 bytes. Por conseguinte, o tamanho recomendado da chave secreta é 64 bytes."
  overload: System.Security.Cryptography.HMACMD5.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACMD5.#ctor
  parent: System.Security.Cryptography.HMACMD5
  isExternal: false
  name: HMACMD5()
  nameWithType: HMACMD5.HMACMD5()
  fullName: System.Security.Cryptography.HMACMD5.HMACMD5()
- uid: System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACMD5
  isExternal: false
  name: HMACMD5(Byte[])
  nameWithType: HMACMD5.HMACMD5(Byte[])
  fullName: System.Security.Cryptography.HMACMD5.HMACMD5(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACMD5.#ctor*
  parent: System.Security.Cryptography.HMACMD5
  isExternal: false
  name: HMACMD5
  nameWithType: HMACMD5.HMACMD5
