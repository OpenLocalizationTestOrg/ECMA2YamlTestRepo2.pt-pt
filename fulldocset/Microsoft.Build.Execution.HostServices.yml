### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Execution.HostServices
  id: HostServices
  children:
  - Microsoft.Build.Execution.HostServices.#ctor
  - Microsoft.Build.Execution.HostServices.GetHostObject(System.String,System.String,System.String)
  - Microsoft.Build.Execution.HostServices.GetNodeAffinity(System.String)
  - Microsoft.Build.Execution.HostServices.OnRenameProject(System.String,System.String)
  - Microsoft.Build.Execution.HostServices.RegisterHostObject(System.String,System.String,System.String,Microsoft.Build.Framework.ITaskHost)
  - Microsoft.Build.Execution.HostServices.SetNodeAffinity(System.String,Microsoft.Build.Execution.NodeAffinity)
  - Microsoft.Build.Execution.HostServices.UnregisterProject(System.String)
  langs:
  - csharp
  name: HostServices
  nameWithType: HostServices
  fullName: Microsoft.Build.Execution.HostServices
  type: Class
  summary: "Implementation of a host service that mediates access from the build to the host."
  remarks: "See also <xref:Microsoft.Build.Utilities.Task.HostObject%2A>."
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("#Entries={hostObjectMap.Count}")]

      public class HostServices
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.HostServices.#ctor
  id: '#ctor'
  parent: Microsoft.Build.Execution.HostServices
  langs:
  - csharp
  name: HostServices()
  nameWithType: HostServices.HostServices()
  fullName: Microsoft.Build.Execution.HostServices.HostServices()
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Creates a host service."
  syntax:
    content: public HostServices ();
    parameters: []
  overload: Microsoft.Build.Execution.HostServices.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.HostServices.GetHostObject(System.String,System.String,System.String)
  id: GetHostObject(System.String,System.String,System.String)
  parent: Microsoft.Build.Execution.HostServices
  langs:
  - csharp
  name: GetHostObject(String,String,String)
  nameWithType: HostServices.GetHostObject(String,String,String)
  fullName: Microsoft.Build.Execution.HostServices.GetHostObject(String,String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Gets the host service for the given task where the task appears within a target and project with the given names."
  syntax:
    content: public Microsoft.Build.Framework.ITaskHost GetHostObject (string projectFile, string targetName, string taskName);
    parameters:
    - id: projectFile
      type: System.String
      description: "The name of the project file."
    - id: targetName
      type: System.String
      description: "The name of the target."
    - id: taskName
      type: System.String
      description: "The task name associated with the host service."
    return:
      type: Microsoft.Build.Framework.ITaskHost
      description: "Returns the host service for the given task where the task appears within a target and project with the given names. If no host service exists, returns null."
  overload: Microsoft.Build.Execution.HostServices.GetHostObject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.HostServices.GetNodeAffinity(System.String)
  id: GetNodeAffinity(System.String)
  parent: Microsoft.Build.Execution.HostServices
  langs:
  - csharp
  name: GetNodeAffinity(String)
  nameWithType: HostServices.GetNodeAffinity(String)
  fullName: Microsoft.Build.Execution.HostServices.GetNodeAffinity(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Gets the node affinity for the given project file."
  syntax:
    content: public Microsoft.Build.Execution.NodeAffinity GetNodeAffinity (string projectFile);
    parameters:
    - id: projectFile
      type: System.String
      description: "The project file associated with the node."
    return:
      type: Microsoft.Build.Execution.NodeAffinity
      description: "Returns the node affinity for the given project file."
  overload: Microsoft.Build.Execution.HostServices.GetNodeAffinity*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.HostServices.OnRenameProject(System.String,System.String)
  id: OnRenameProject(System.String,System.String)
  parent: Microsoft.Build.Execution.HostServices
  langs:
  - csharp
  name: OnRenameProject(String,String)
  nameWithType: HostServices.OnRenameProject(String,String)
  fullName: Microsoft.Build.Execution.HostServices.OnRenameProject(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Updates the host services table when a project is named or renamed."
  remarks: "A project is named when it is given a new full path and the old path is null."
  syntax:
    content: public void OnRenameProject (string oldFullPath, string newFullPath);
    parameters:
    - id: oldFullPath
      type: System.String
      description: "The current path to the project file."
    - id: newFullPath
      type: System.String
      description: "The new path to the project file."
  overload: Microsoft.Build.Execution.HostServices.OnRenameProject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.HostServices.RegisterHostObject(System.String,System.String,System.String,Microsoft.Build.Framework.ITaskHost)
  id: RegisterHostObject(System.String,System.String,System.String,Microsoft.Build.Framework.ITaskHost)
  parent: Microsoft.Build.Execution.HostServices
  langs:
  - csharp
  name: RegisterHostObject(String,String,String,ITaskHost)
  nameWithType: HostServices.RegisterHostObject(String,String,String,ITaskHost)
  fullName: Microsoft.Build.Execution.HostServices.RegisterHostObject(String,String,String,ITaskHost)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Register a host service for the given task/target pair."
  remarks: "Overwrites any existing host service."
  syntax:
    content: public void RegisterHostObject (string projectFile, string targetName, string taskName, Microsoft.Build.Framework.ITaskHost hostObject);
    parameters:
    - id: projectFile
      type: System.String
      description: "The project file containing the task/target pair."
    - id: targetName
      type: System.String
      description: "The name of the target."
    - id: taskName
      type: System.String
      description: "The name of the task."
    - id: hostObject
      type: Microsoft.Build.Framework.ITaskHost
      description: "The host service."
  overload: Microsoft.Build.Execution.HostServices.RegisterHostObject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.HostServices.SetNodeAffinity(System.String,Microsoft.Build.Execution.NodeAffinity)
  id: SetNodeAffinity(System.String,Microsoft.Build.Execution.NodeAffinity)
  parent: Microsoft.Build.Execution.HostServices
  langs:
  - csharp
  name: SetNodeAffinity(String,NodeAffinity)
  nameWithType: HostServices.SetNodeAffinity(String,NodeAffinity)
  fullName: Microsoft.Build.Execution.HostServices.SetNodeAffinity(String,NodeAffinity)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Sets the node affinity for the given project file."
  syntax:
    content: public void SetNodeAffinity (string projectFile, Microsoft.Build.Execution.NodeAffinity nodeAffinity);
    parameters:
    - id: projectFile
      type: System.String
      description: "The project file. If set to String.Empty, all projects will use the given node affinity. If set to null, all node affinities will be cleared."
    - id: nodeAffinity
      type: Microsoft.Build.Execution.NodeAffinity
      description: "The node affinity."
  overload: Microsoft.Build.Execution.HostServices.SetNodeAffinity*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.HostServices.UnregisterProject(System.String)
  id: UnregisterProject(System.String)
  parent: Microsoft.Build.Execution.HostServices
  langs:
  - csharp
  name: UnregisterProject(String)
  nameWithType: HostServices.UnregisterProject(String)
  fullName: Microsoft.Build.Execution.HostServices.UnregisterProject(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Unregister the project&quot;s host objects, if any and remove any node affinities associated with it."
  syntax:
    content: public void UnregisterProject (string projectFullPath);
    parameters:
    - id: projectFullPath
      type: System.String
      description: "The path to the project to unregister."
  overload: Microsoft.Build.Execution.HostServices.UnregisterProject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.Build.Execution.HostServices.#ctor
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: HostServices()
  nameWithType: HostServices.HostServices()
  fullName: Microsoft.Build.Execution.HostServices.HostServices()
- uid: Microsoft.Build.Execution.HostServices.GetHostObject(System.String,System.String,System.String)
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: GetHostObject(String,String,String)
  nameWithType: HostServices.GetHostObject(String,String,String)
  fullName: Microsoft.Build.Execution.HostServices.GetHostObject(String,String,String)
- uid: Microsoft.Build.Framework.ITaskHost
  parent: Microsoft.Build.Framework
  isExternal: false
  name: ITaskHost
  nameWithType: ITaskHost
  fullName: Microsoft.Build.Framework.ITaskHost
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Build.Execution.HostServices.GetNodeAffinity(System.String)
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: GetNodeAffinity(String)
  nameWithType: HostServices.GetNodeAffinity(String)
  fullName: Microsoft.Build.Execution.HostServices.GetNodeAffinity(String)
- uid: Microsoft.Build.Execution.NodeAffinity
  parent: Microsoft.Build.Execution
  isExternal: false
  name: NodeAffinity
  nameWithType: NodeAffinity
  fullName: Microsoft.Build.Execution.NodeAffinity
- uid: Microsoft.Build.Execution.HostServices.OnRenameProject(System.String,System.String)
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: OnRenameProject(String,String)
  nameWithType: HostServices.OnRenameProject(String,String)
  fullName: Microsoft.Build.Execution.HostServices.OnRenameProject(String,String)
- uid: Microsoft.Build.Execution.HostServices.RegisterHostObject(System.String,System.String,System.String,Microsoft.Build.Framework.ITaskHost)
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: RegisterHostObject(String,String,String,ITaskHost)
  nameWithType: HostServices.RegisterHostObject(String,String,String,ITaskHost)
  fullName: Microsoft.Build.Execution.HostServices.RegisterHostObject(String,String,String,ITaskHost)
- uid: Microsoft.Build.Execution.HostServices.SetNodeAffinity(System.String,Microsoft.Build.Execution.NodeAffinity)
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: SetNodeAffinity(String,NodeAffinity)
  nameWithType: HostServices.SetNodeAffinity(String,NodeAffinity)
  fullName: Microsoft.Build.Execution.HostServices.SetNodeAffinity(String,NodeAffinity)
- uid: Microsoft.Build.Execution.HostServices.UnregisterProject(System.String)
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: UnregisterProject(String)
  nameWithType: HostServices.UnregisterProject(String)
  fullName: Microsoft.Build.Execution.HostServices.UnregisterProject(String)
- uid: Microsoft.Build.Execution.HostServices.#ctor*
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: HostServices
  nameWithType: HostServices.HostServices
- uid: Microsoft.Build.Execution.HostServices.GetHostObject*
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: GetHostObject
  nameWithType: HostServices.GetHostObject
- uid: Microsoft.Build.Execution.HostServices.GetNodeAffinity*
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: GetNodeAffinity
  nameWithType: HostServices.GetNodeAffinity
- uid: Microsoft.Build.Execution.HostServices.OnRenameProject*
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: OnRenameProject
  nameWithType: HostServices.OnRenameProject
- uid: Microsoft.Build.Execution.HostServices.RegisterHostObject*
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: RegisterHostObject
  nameWithType: HostServices.RegisterHostObject
- uid: Microsoft.Build.Execution.HostServices.SetNodeAffinity*
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: SetNodeAffinity
  nameWithType: HostServices.SetNodeAffinity
- uid: Microsoft.Build.Execution.HostServices.UnregisterProject*
  parent: Microsoft.Build.Execution.HostServices
  isExternal: false
  name: UnregisterProject
  nameWithType: HostServices.UnregisterProject
