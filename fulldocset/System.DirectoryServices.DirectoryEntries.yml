### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.DirectoryEntries
  id: DirectoryEntries
  children:
  - System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)
  - System.DirectoryServices.DirectoryEntries.Find(System.String)
  - System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)
  - System.DirectoryServices.DirectoryEntries.GetEnumerator
  - System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectoryEntries.SchemaFilter
  langs:
  - csharp
  name: DirectoryEntries
  nameWithType: DirectoryEntries
  fullName: System.DirectoryServices.DirectoryEntries
  type: Class
  summary: "Contains a collection of <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref> objects."
  syntax:
    content: 'public class DirectoryEntries : System.Collections.IEnumerable'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: Add(String,String)
  nameWithType: DirectoryEntries.Add(String,String)
  fullName: System.DirectoryServices.DirectoryEntries.Add(String,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Creates a new entry in the container."
  remarks: "You must call the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method on the new entry to make the creation permanent. When you call this method, you can then set mandatory property values on the new entry. The providers each have different requirements for properties that need to be set before a call to the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method is made. If those requirements are not met, the provider might throw an exception. Check with your provider to determine which properties must be set before committing changes."
  example:
  - "The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.  \n  \n```vb  \nDim strPath As String = \"IIS://localhost/W3SVC/1/Root\"  \n' Create a new 'DirectoryEntry' object with the given path.  \nDim myDE As New DirectoryEntry(strPath)  \nDim myEntries As DirectoryEntries = myDE.Children  \n' Create a new entry 'Sample' in the container.  \nDim myDirectoryEntry As DirectoryEntry = myEntries.Add(\"CN=Sample\", myDE.SchemaClassName)  \n' Save changes of entry in the 'Active Directory Domain Services'.  \nmyDirectoryEntry.CommitChanges()  \nConsole.WriteLine(myDirectoryEntry.Name + \" entry is created in container.\")  \n```  \n  \n The following C# example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.  \n  \n [C#]  \n  \n```  \nString strPath = \"IIS://localhost/W3SVC/1/Root\";  \n  \n// Create a new 'DirectoryEntry' object with the given path.  \nDirectoryEntry myDE = new DirectoryEntry(strPath);  \nDirectoryEntries myEntries = myDE.Children;  \n  \n// Create a new entry 'Sample' in the container.  \nDirectoryEntry myDirectoryEntry =   \n   myEntries.Add(\"CN=Sample\", myDE.SchemaClassName);  \n// Save changes of entry in the 'Active Directory Domain Services'.  \nmyDirectoryEntry.CommitChanges();  \nConsole.WriteLine (myDirectoryEntry.Name + \" entry is created in container.\");  \n```  \n  \n The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.  \n  \n```  \nString* strPath = S\"IIS://localhost/W3SVC/1/Root\";  \n  \n// Create a new 'DirectoryEntry' object with the given path.  \nDirectoryEntry* myDE = new DirectoryEntry(strPath);  \nDirectoryEntries* myEntries = myDE->Children;  \n  \n// Create a new entry 'Sample' in the container.  \nDirectoryEntry* myDirectoryEntry = myEntries->Add(S\"CN=Sample\", myDE->SchemaClassName);  \n// Save changes of entry in the 'Active Directory Domain Services'.  \nmyDirectoryEntry->CommitChanges();  \nConsole::WriteLine(\"{0} entry is created in container.\", myDirectoryEntry->Name);  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry Add (string name, string schemaClassName);
    parameters:
    - id: name
      type: System.String
      description: "The name of the new entry."
    - id: schemaClassName
      type: System.String
      description: "The name of the schema that is used for the new entry."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref> object that represents the new entry."
  overload: System.DirectoryServices.DirectoryEntries.Add*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "An error occurred during the call to the underlying interface."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.Find(System.String)
  id: Find(System.String)
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: Find(String)
  nameWithType: DirectoryEntries.Find(String)
  fullName: System.DirectoryServices.DirectoryEntries.Find(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Returns the member of this collection with the specified name."
  remarks: "If child objects of different types have the same name, the first matching child object is returned.      > [!NOTE] >  The Internet Information Services (IIS) provider does not support this method. Use the overloaded <xref:System.DirectoryServices.DirectoryEntries.Find%2A> method and specify an empty string (&quot;&quot;) for the `schemaClassName` parameter.   >    >  If no matching result is found, a <xref:System.DirectoryServices.DirectoryServicesCOMException> with error code 0x2030 is thrown."
  syntax:
    content: public System.DirectoryServices.DirectoryEntry Find (string name);
    parameters:
    - id: name
      type: System.String
      description: "Contains the name of the child object for which to search."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref> that represents the child object that was found."
  overload: System.DirectoryServices.DirectoryEntries.Find*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The Active Directory Domain Services object is not a container."
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "An error occurred during the call to the underlying interface."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)
  id: Find(System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: Find(String,String)
  nameWithType: DirectoryEntries.Find(String,String)
  fullName: System.DirectoryServices.DirectoryEntries.Find(String,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Returns the member of this collection with the specified name and of the specified type."
  remarks: "If no matching result is found, a <xref:System.DirectoryServices.DirectoryServicesCOMException> with error code 0x2030 is thrown."
  example:
  - "The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. It attempts to retrieve the newly created entry.  \n  \n```vb  \nTry  \n     Dim myEntry1 As DirectoryEntry  \n     Dim myEntry2 As DirectoryEntry  \n     Dim strPath As String = \"LDAP://DC=fabrikam,DC=com\"  \n  \n     ' Create a 'DirectoryEntry' object with the given path.  \n     Dim myDE As New DirectoryEntry(strPath)  \n     Dim myEntries As DirectoryEntries = myDE.Children  \n  \n     ' Create a new entry in the container.  \n     myEntry1 = myEntries.Add(\"CN=Sample Entry\", myDE.SchemaClassName)  \n     ' Save changes in the 'Active Directory Domain Services' store.  \n     myEntry1.CommitChanges()  \n  \n     ' Find a child in the 'DirectoryEntries' collection which has the   \n     ' specified name and type.  \n     myEntry2 = myEntries.Find(\"CN=Sample Entry\", myDE.SchemaClassName)  \n     Console.WriteLine(myEntry2.Name + \" is found in container.\")  \n  \n     Catch e As Exception  \n          Console.WriteLine(\"The following exception was raised : {0}\", e.Message.ToString())  \n     End Try  \n```  \n  \n The following C# example shows how to create a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. It attempts to retrieve the newly- created entry.  \n  \n```c#  \nusing System;  \nusing System.DirectoryServices;   \n  \nclass MyClass1  \n{  \n   static void Main()  \n   {  \n      try  \n      {          \n         DirectoryEntry myEntry1;  \n         DirectoryEntry myEntry2;  \n         String strPath = \"LDAP://DC=fabrikam,DC=com\";  \n  \n         // Create a 'DirectoryEntry' object with the given path.  \n         DirectoryEntry myDE = new DirectoryEntry(strPath);  \n         DirectoryEntries myEntries = myDE.Children;  \n  \n         // Create a new entry in the container.  \n         myEntry1 = myEntries.Add(\"CN=Sample Entry\",myDE.SchemaClassName);  \n         // Save changes in the 'Active Directory Domain Services' store.  \n         myEntry1.CommitChanges();  \n  \n         // Find a child in the 'DirectoryEntries' collection which has the   \n         // specified name and type.  \n         myEntry2 = myEntries.Find(\"CN=Sample Entry\",myDE.SchemaClassName);  \n         Console.WriteLine (myEntry2.Name + \" is found in container.\");  \n  \n      }  \n      catch(Exception e)  \n      {  \n         Console.WriteLine(\"The following exception was raised : {0}\",e.Message);  \n      }  \n   }  \n}  \n  \n```  \n  \n The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. It attempts to retrieve the new entry.  \n  \n```cpp#  \n#using <mscorlib.dll>  \n#using <System.dll>  \n#using <System.Directoryservices.dll>  \n  \nusing namespace System;  \nusing namespace System::DirectoryServices;   \n  \nint main() {  \n    try {          \n        DirectoryEntry* myEntry1;  \n        DirectoryEntry* myEntry2;  \n        String* strPath = S\"LDAP://DC=fabrikam,DC=com\";  \n  \n        // Create a 'DirectoryEntry' object with the given path.  \n        DirectoryEntry* myDE = new DirectoryEntry(strPath);  \n        DirectoryEntries* myEntries = myDE->Children;  \n  \n        // Create a new entry in the container.  \n        myEntry1 = myEntries->Add(S\"CN=Sample Entry\", myDE->SchemaClassName);  \n        // Save changes in the 'Active Directory Domain Services' store.  \n        myEntry1->CommitChanges();  \n  \n        // Find a child in the 'DirectoryEntries' collection which has the   \n        // specified name and type.  \n        myEntry2 = myEntries->Find(S\"CN=Sample Entry\", myDE->SchemaClassName);  \n        Console::WriteLine (\"{0} is found in container.\", myEntry2->Name);  \n    } catch(Exception* e) {  \n        Console::WriteLine(\"The following exception was raised : {0}\", e->Message);  \n    }  \n}  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry Find (string name, string schemaClassName);
    parameters:
    - id: name
      type: System.String
      description: "The name of the child directory object for which to search."
    - id: schemaClassName
      type: System.String
      description: "The class name of the child directory object for which to search."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref> object that represents the child object that was found."
  overload: System.DirectoryServices.DirectoryEntries.Find*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The Active Directory Domain Services object is not a container."
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "An error occurred during the call to the underlying interface."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: DirectoryEntries.GetEnumerator()
  fullName: System.DirectoryServices.DirectoryEntries.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Returns an enumerator that iterates through the collection."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> object that can be used to iterate through the collection."
  overload: System.DirectoryServices.DirectoryEntries.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)
  id: Remove(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: Remove(DirectoryEntry)
  nameWithType: DirectoryEntries.Remove(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntries.Remove(DirectoryEntry)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Deletes a member of this collection."
  remarks: "If the entry to be removed is a container, the container must be empty. To delete a container and all its children, use the <xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A> method."
  example:
  - "The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. Finally, it retrieves the new entry and deletes it.  \n  \n```vb  \nImports System  \nImports System.DirectoryServices  \n  \nClass MyClass1  \n   Shared Sub Main()  \n      Try  \n         Dim strPath As String = \"IIS://localhost/W3SVC/1/Root\"  \n         Dim strName As String = \"\"  \n  \n         ' Create a new 'DirectoryEntry' object with the given path.  \n         Dim myDE As New DirectoryEntry(strPath)  \n         Dim myEntries As DirectoryEntries = myDE.Children  \n  \n         ' Create a new entry 'Sample' in the container.  \n         Dim myDirectoryEntry As DirectoryEntry = myEntries.Add(\"Sample\", myDE.SchemaClassName)  \n         ' Save changes of entry in the 'Active Directory Domain Services'.  \n         myDirectoryEntry.CommitChanges()  \n         Console.WriteLine(myDirectoryEntry.Name + \" entry is created in container.\")  \n  \n         ' Find 'Sample' entry in container.  \n         myDirectoryEntry = myEntries.Find(\"Sample\", myDE.SchemaClassName)  \n         Console.WriteLine(myDirectoryEntry.Name + \" found in container.\")  \n         ' Remove 'Sample' entry from container.  \n         strName = myDirectoryEntry.Name  \n         myEntries.Remove(myDirectoryEntry)  \n         Console.WriteLine(strName + \" entry is removed from container.\")  \n  \n      Catch e As Exception  \n         Console.WriteLine(\"The following exception was raised : {0}\", e.Message.ToString())  \n      End Try  \n   End Sub 'Main  \nEnd Class 'MyClass1  \n  \n```  \n  \n The following C# example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. Finally, it retrieves the new entry and deletes it.  \n  \n```c#  \nusing System;  \nusing System.DirectoryServices;   \n  \nclass MyClass1  \n{  \n   static void Main()  \n   {  \n      try  \n      {  \n         String strPath = \"IIS://localhost/W3SVC/1/Root\";  \n         String strName = \"\";  \n  \n         // Create a new 'DirectoryEntry' object with the given path.  \n         DirectoryEntry myDE = new DirectoryEntry(strPath);  \n         DirectoryEntries myEntries = myDE.Children;  \n  \n         // Create a new entry 'Sample' in the container.  \n         DirectoryEntry myDirectoryEntry =   \n            myEntries.Add(\"Sample\", myDE.SchemaClassName);  \n         // Save changes of entry in the 'Active Directory Domain Services'.  \n         myDirectoryEntry.CommitChanges();  \n         Console.WriteLine (myDirectoryEntry.Name +   \n            \" entry is created in container.\");  \n  \n         // Find 'Sample' entry in container.  \n         myDirectoryEntry = myEntries.Find(\"Sample\", myDE.SchemaClassName);  \n         Console.WriteLine(myDirectoryEntry.Name + \" found in container.\");  \n         // Remove 'Sample' entry from container.  \n         strName = myDirectoryEntry.Name;  \n         myEntries.Remove(myDirectoryEntry);  \n         Console.WriteLine(strName+ \" entry is removed from container.\");  \n  \n      }  \n      catch(Exception e)  \n      {  \n         Console.WriteLine(\"The following exception was raised : {0}\",  \n            e.Message);  \n      }  \n   }  \n}  \n  \n```  \n  \n The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. Finally, it retrieves the new entry and deletes it.  \n  \n```cpp#  \n#using <mscorlib.dll>  \n#using <System.dll>  \n#using <System.Directoryservices.dll>  \n  \nusing namespace System;  \nusing namespace System::DirectoryServices;   \n  \nint main() {  \n    try {  \n        String* strPath = S\"IIS://localhost/W3SVC/1/Root\";  \n        String* strName = S\"\";  \n  \n        // Create a new 'DirectoryEntry' object with the given path.  \n        DirectoryEntry* myDE = new DirectoryEntry(strPath);  \n        DirectoryEntries* myEntries = myDE->Children;  \n  \n        // Create a new entry 'Sample' in the container.  \n        DirectoryEntry* myDirectoryEntry =  myEntries->Add(S\"Sample\", myDE->SchemaClassName);  \n        // Save changes of entry in the 'Active Directory Domain Services'.  \n        myDirectoryEntry->CommitChanges();  \n        Console::WriteLine(S\"{0} entry is created in container.\", myDirectoryEntry->Name);  \n  \n        // Find 'Sample' entry in container.  \n        myDirectoryEntry = myEntries->Find(S\"Sample\", myDE->SchemaClassName);  \n        Console::WriteLine(S\"{0} found in container.\", myDirectoryEntry->Name);  \n        // Remove 'Sample' entry from container.  \n        strName = myDirectoryEntry->Name;  \n        myEntries->Remove(myDirectoryEntry);  \n        Console::WriteLine(S\"{0} entry is removed from container.\", strName);  \n    } catch(Exception* e) {  \n        Console::WriteLine(S\"The following exception was raised : {0}\", e->Message);  \n    }  \n}  \n  \n```"
  syntax:
    content: public void Remove (System.DirectoryServices.DirectoryEntry entry);
    parameters:
    - id: entry
      type: System.DirectoryServices.DirectoryEntry
      description: "The name of the <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref> object to delete."
  overload: System.DirectoryServices.DirectoryEntries.Remove*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "An error occurred during the call to the underlying interface."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.SchemaFilter
  id: SchemaFilter
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: SchemaFilter
  nameWithType: DirectoryEntries.SchemaFilter
  fullName: System.DirectoryServices.DirectoryEntries.SchemaFilter
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets the schemas that specify which child objects are contained in the collection."
  remarks: "If the SchemaFilter property is empty, child objects of all types are visible in the collection; otherwise, only those of the specified types are visible."
  syntax:
    content: public System.DirectoryServices.SchemaNameCollection SchemaFilter { get; }
    return:
      type: System.DirectoryServices.SchemaNameCollection
      description: "A <xref href=&quot;System.DirectoryServices.SchemaNameCollection&quot;></xref> that specifies which child objects are contained in the <xref href=&quot;System.DirectoryServices.DirectoryEntries&quot;></xref> instance."
  overload: System.DirectoryServices.DirectoryEntries.SchemaFilter*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.InteropServices.COMException
  isExternal: true
  name: System.Runtime.InteropServices.COMException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Add(String,String)
  nameWithType: DirectoryEntries.Add(String,String)
  fullName: System.DirectoryServices.DirectoryEntries.Add(String,String)
- uid: System.DirectoryServices.DirectoryEntry
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.DirectoryEntries.Find(System.String)
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Find(String)
  nameWithType: DirectoryEntries.Find(String)
  fullName: System.DirectoryServices.DirectoryEntries.Find(String)
- uid: System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Find(String,String)
  nameWithType: DirectoryEntries.Find(String,String)
  fullName: System.DirectoryServices.DirectoryEntries.Find(String,String)
- uid: System.DirectoryServices.DirectoryEntries.GetEnumerator
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: GetEnumerator()
  nameWithType: DirectoryEntries.GetEnumerator()
  fullName: System.DirectoryServices.DirectoryEntries.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Remove(DirectoryEntry)
  nameWithType: DirectoryEntries.Remove(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntries.Remove(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntries.SchemaFilter
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: SchemaFilter
  nameWithType: DirectoryEntries.SchemaFilter
  fullName: System.DirectoryServices.DirectoryEntries.SchemaFilter
- uid: System.DirectoryServices.SchemaNameCollection
  parent: System.DirectoryServices
  isExternal: false
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
- uid: System.DirectoryServices.DirectoryEntries.Add*
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Add
  nameWithType: DirectoryEntries.Add
- uid: System.DirectoryServices.DirectoryEntries.Find*
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Find
  nameWithType: DirectoryEntries.Find
- uid: System.DirectoryServices.DirectoryEntries.GetEnumerator*
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: GetEnumerator
  nameWithType: DirectoryEntries.GetEnumerator
- uid: System.DirectoryServices.DirectoryEntries.Remove*
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Remove
  nameWithType: DirectoryEntries.Remove
- uid: System.DirectoryServices.DirectoryEntries.SchemaFilter*
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: SchemaFilter
  nameWithType: DirectoryEntries.SchemaFilter
