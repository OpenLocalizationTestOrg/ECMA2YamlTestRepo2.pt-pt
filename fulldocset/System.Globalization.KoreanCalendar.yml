### YamlMime:ManagedReference
items:
- uid: System.Globalization.KoreanCalendar
  id: KoreanCalendar
  children:
  - System.Globalization.KoreanCalendar.#ctor
  - System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.KoreanCalendar.AlgorithmType
  - System.Globalization.KoreanCalendar.Eras
  - System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.KoreanCalendar.GetEra(System.DateTime)
  - System.Globalization.KoreanCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.KoreanCalendar.GetMonth(System.DateTime)
  - System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.KoreanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - System.Globalization.KoreanCalendar.GetYear(System.DateTime)
  - System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.KoreanCalendar.KoreanEra
  - System.Globalization.KoreanCalendar.MaxSupportedDateTime
  - System.Globalization.KoreanCalendar.MinSupportedDateTime
  - System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.KoreanCalendar.TwoDigitYearMax
  langs:
  - csharp
  name: KoreanCalendar
  nameWithType: KoreanCalendar
  fullName: System.Globalization.KoreanCalendar
  type: Class
  summary: "Represents the Korean calendar."
  remarks: "The Korean calendar is exactly like the Gregorian calendar, except that the year and era are different.      > [!NOTE] >  For information about using the KoreanCalendar class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).       The KoreanCalendar class recognizes only the current era.       Leap years in the Korean calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.       The Korean calendar has 12 months with 28 to 31 days each:      |GetMonth value|Month|Days in common years|Days in leap years|   |--------------------|-----------|--------------------------|------------------------|   |1|1월 (January)|31|31|   |2|2월 (February)|28|29|   |3|3월 (March)|31|31|   |4|4월 (April)|30|30|   |5|5월 (May)|31|31|   |6|6월 (June)|30|30|   |7|7월 (July)|31|31|   |8|8월 (August)|31|31|   |9|9월 (September)|30|30|   |10|10월 (October)|31|31|   |11|11월 (November)|30|30|   |12|12월 (December)|31|31|       February has 29 days during leap years and 28 days during common years.       The date January 1, 2001 A.D. in the Gregorian calendar is equivalent to the first day of January in the year 4334 of the current era in the Korean calendar.       Each <xref:System.Globalization.CultureInfo> object supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application should set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> to a new <xref:System.Globalization.Calendar>."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class KoreanCalendar : System.Globalization.Calendar
  inheritance:
  - System.Globalization.Calendar
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: KoreanCalendar()
  nameWithType: KoreanCalendar.KoreanCalendar()
  fullName: System.Globalization.KoreanCalendar.KoreanCalendar()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Initializes a new instance of the <xref href=&quot;System.Globalization.KoreanCalendar&quot;></xref> class."
  syntax:
    content: public KoreanCalendar ();
    parameters: []
  overload: System.Globalization.KoreanCalendar.#ctor*
  exceptions:
  - type: System.TypeInitializationException
    commentId: T:System.TypeInitializationException
    description: "Unable to initialize a <xref href=&quot;System.Globalization.KoreanCalendar&quot;></xref> object because of missing culture information."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: AddMonths(DateTime,Int32)
  nameWithType: KoreanCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.KoreanCalendar.AddMonths(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>."
  remarks: "The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.       If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.k_3_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.k_3_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Korean calendar.  \n  \n [!code-cpp[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.k_3_2.cpp)]\n [!code-cs[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.k_3_2.cs)]\n [!code-vb[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.k_3_2.vb)]"
  syntax:
    content: public override DateTime AddMonths (DateTime time, int months);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to which to add months."
    - id: months
      type: System.Int32
      description: "The number of months to add."
    return:
      type: System.DateTime
      description: "The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>."
  overload: System.Globalization.KoreanCalendar.AddMonths*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>months</code> is less than -120000.       -or-       <code>months</code> is greater than 120000."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: AddYears(DateTime,Int32)
  nameWithType: KoreanCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.KoreanCalendar.AddYears(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>."
  remarks: "The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date is the 28th day of February in the following year.       If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.k_2_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.k_2_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Korean calendar.  \n  \n [!code-cpp[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.k_2_2.cpp)]\n [!code-cs[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.k_2_2.cs)]\n [!code-vb[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.k_2_2.vb)]"
  syntax:
    content: public override DateTime AddYears (DateTime time, int years);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to which to add years."
    - id: years
      type: System.Int32
      description: "The number of years to add."
    return:
      type: System.DateTime
      description: "The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>."
  overload: System.Globalization.KoreanCalendar.AddYears*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>years</code> or <code>time</code> is out of range."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.AlgorithmType
  id: AlgorithmType
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: AlgorithmType
  nameWithType: KoreanCalendar.AlgorithmType
  fullName: System.Globalization.KoreanCalendar.AlgorithmType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets a value indicating whether the current calendar is solar-based, lunar-based, or a combination of both."
  remarks: ''
  example:
  - "The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \n  \n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.k_1_1.cs)]\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.k_1_1.vb)]"
  syntax:
    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }
    return:
      type: System.Globalization.CalendarAlgorithmType
      description: "Always returns <xref href=&quot;System.Globalization.CalendarAlgorithmType&quot;></xref>."
  overload: System.Globalization.KoreanCalendar.AlgorithmType*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.Eras
  id: Eras
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: Eras
  nameWithType: KoreanCalendar.Eras
  fullName: System.Globalization.KoreanCalendar.Eras
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets the list of eras in the <xref href=&quot;System.Globalization.KoreanCalendar&quot;></xref>."
  remarks: "The <xref:System.Globalization.KoreanCalendar> class recognizes only the current era. This property always returns an array with only one element."
  syntax:
    content: public override int[] Eras { get; }
    return:
      type: System.Int32[]
      description: "An array of integers that represents the eras in the <xref href=&quot;System.Globalization.KoreanCalendar&quot;></xref>."
  overload: System.Globalization.KoreanCalendar.Eras*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetDayOfMonth(DateTime)
  nameWithType: KoreanCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetDayOfMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the day of the month in the specified <xref:System.DateTime>."
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Korean calendar.  \n  \n [!code-cpp[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.k_9_1.cpp)]\n [!code-cs[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.k_9_1.cs)]\n [!code-vb[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.k_9_1.vb)]"
  syntax:
    content: public override int GetDayOfMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.Int32
      description: "An integer from 1 to 31 that represents the day of the month in the specified <xref:System.DateTime>."
  overload: System.Globalization.KoreanCalendar.GetDayOfMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetDayOfWeek(DateTime)
  nameWithType: KoreanCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetDayOfWeek(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the day of the week in the specified <xref:System.DateTime>."
  remarks: "The <xref:System.DayOfWeek> values are as follows:      |DayOfWeek value|Which indicates|   |---------------------|---------------------|   |Sunday|일요일|   |Monday|월요일|   |Tuesday|화요일|   |Wednesday|수요일|   |Thursday|목요일|   |Friday|금요일|   |Saturday|토요일|"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Korean calendar.  \n  \n [!code-cpp[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.k_10_1.cpp)]\n [!code-cs[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.k_10_1.cs)]\n [!code-vb[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.k_10_1.vb)]"
  syntax:
    content: public override DayOfWeek GetDayOfWeek (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.DayOfWeek
      description: "A <xref:System.DayOfWeek> value that represents the day of the week in the specified <xref:System.DateTime>."
  overload: System.Globalization.KoreanCalendar.GetDayOfWeek*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetDayOfYear(DateTime)
  nameWithType: KoreanCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetDayOfYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the day of the year in the specified <xref:System.DateTime>."
  remarks: "The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year. The total is the same value as that returned by <xref:System.Globalization.KoreanCalendar.GetDaysInYear%2A>."
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Korean calendar.  \n  \n [!code-cpp[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.k_5_1.cpp)]\n [!code-cs[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.k_5_1.cs)]\n [!code-vb[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.k_5_1.vb)]"
  syntax:
    content: public override int GetDayOfYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.Int32
      description: "An integer from 1 to 366 that represents the day of the year in the specified <xref:System.DateTime>."
  overload: System.Globalization.KoreanCalendar.GetDayOfYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: KoreanCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.GetDaysInMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the number of days in the specified month in the specified year in the specified era."
  remarks: "For example, this method returns 28 or 29 for February (`month` = 2), depending on whether `year` is a leap year."
  example:
  - "The following code example calls GetDaysInMonth for the second month in each of five years in each era.  \n  \n [!code-cs[System.Globalization.KoreanCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/393cfbdd-c5b5-4e14-9cac-_1.cs)]\n [!code-cpp[System.Globalization.KoreanCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/393cfbdd-c5b5-4e14-9cac-_1.cpp)]\n [!code-vb[System.Globalization.KoreanCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/393cfbdd-c5b5-4e14-9cac-_1.vb)]"
  syntax:
    content: public override int GetDaysInMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: month
      type: System.Int32
      description: "An integer from 1 to 12 that represents the month."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Int32
      description: "The number of days in the specified month in the specified year in the specified era."
  overload: System.Globalization.KoreanCalendar.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>era</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetDaysInYear(Int32,Int32)
  nameWithType: KoreanCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.GetDaysInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the number of days in the specified year in the specified era."
  remarks: "For example, this method returns 365 or 366, depending on whether `year` is a leap year."
  example:
  - "The following example calls GetDaysInYear for five years in each era.  \n  \n [!code-vb[System.Globalization.KoreanCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.k_7_1.vb)]\n [!code-cs[System.Globalization.KoreanCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.k_7_1.cs)]\n [!code-cpp[System.Globalization.KoreanCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.k_7_1.cpp)]"
  syntax:
    content: public override int GetDaysInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Int32
      description: "The number of days in the specified year in the specified era."
  overload: System.Globalization.KoreanCalendar.GetDaysInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is outside the range supported by the calendar.       -or-       <code>era</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetEra(DateTime)
  nameWithType: KoreanCalendar.GetEra(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetEra(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the era in the specified <xref:System.DateTime>."
  remarks: "The <xref:System.Globalization.KoreanCalendar> class recognizes only the current era."
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Korean calendar.  \n  \n [!code-cpp[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.k_1_1.cpp)]\n [!code-cs[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.k_1_1.cs)]\n [!code-vb[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.k_1_1.vb)]"
  syntax:
    content: public override int GetEra (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.Int32
      description: "An integer that represents the era in the specified <xref:System.DateTime>."
  overload: System.Globalization.KoreanCalendar.GetEra*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetLeapMonth(Int32,Int32)
  nameWithType: KoreanCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.GetLeapMonth(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Calculates the leap month for a specified year and era."
  remarks: "In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%28System.DateTime%29?displayProperty=fullName> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month."
  syntax:
    content: public override int GetLeapMonth (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "A year."
    - id: era
      type: System.Int32
      description: "An era."
    return:
      type: System.Int32
      description: "The return value is always 0 because the <xref href=&quot;System.Globalization.KoreanCalendar&quot;></xref> class does not support the notion of a leap month."
  overload: System.Globalization.KoreanCalendar.GetLeapMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetMonth(DateTime)
  nameWithType: KoreanCalendar.GetMonth(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the month in the specified <xref:System.DateTime>."
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Korean calendar.  \n  \n [!code-cpp[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.k_0_1.cpp)]\n [!code-cs[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.k_0_1.cs)]\n [!code-vb[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.k_0_1.vb)]"
  syntax:
    content: public override int GetMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.Int32
      description: "An integer from 1 to 12 that represents the month in the specified <xref:System.DateTime>."
  overload: System.Globalization.KoreanCalendar.GetMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: KoreanCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.GetMonthsInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the number of months in the specified year in the specified era."
  remarks: ''
  example:
  - "The following example calls GetMonthsInYear for five years in each era.  \n  \n [!code-cs[System.Globalization.KoreanCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/m-system.globalization.k_8_1.cs)]\n [!code-cpp[System.Globalization.KoreanCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/m-system.globalization.k_8_1.cpp)]\n [!code-vb[System.Globalization.KoreanCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.k_8_1.vb)]"
  syntax:
    content: public override int GetMonthsInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Int32
      description: "The number of months in the specified year in the specified era."
  overload: System.Globalization.KoreanCalendar.GetMonthsInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is outside the range supported by the calendar.       -or-       <code>era</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  id: GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  nameWithType: KoreanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  fullName: System.Globalization.KoreanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the week of the year that includes the date in the specified <xref:System.DateTime>."
  remarks: "This method can be used to determine the number of weeks in the year by setting the `time` parameter to the last day of the year.       <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains culture-specific values that can be used for the `rule` and `firstDayOfWeek` parameters.       The <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.DayOfWeek> value that represents the first day of the week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.       The <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> contains the default <xref:System.Globalization.CalendarWeekRule> value that defines a calendar week for a specific culture, using the calendar specified in the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.       For example, in <xref:System.Globalization.GregorianCalendar>, <xref:System.Globalization.Calendar.GetWeekOfYear%2A> for January 1 returns 1."
  example:
  - "The following code example shows how the result of <xref:System.Globalization.Calendar.GetWeekOfYear%2A> varies depending on the <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> and <xref:System.Globalization.CalendarWeekRule> values used. If the specified date is the last day of the year, <xref:System.Globalization.Calendar.GetWeekOfYear%2A> returns the total number of weeks in that year.  \n  \n [!code-cs[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/csharp/96e14512-2c21-42ee-8498-_1.cs)]\n [!code-vb[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/visualbasic/96e14512-2c21-42ee-8498-_1.vb)]\n [!code-cpp[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/cpp/96e14512-2c21-42ee-8498-_1.cpp)]"
  syntax:
    content: public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    - id: rule
      type: System.Globalization.CalendarWeekRule
      description: "One of the <xref:System.Globalization.CalendarWeekRule> values that defines a calendar week."
    - id: firstDayOfWeek
      type: System.DayOfWeek
      description: "One of the <xref:System.DayOfWeek> values that represents the first day of the week."
    return:
      type: System.Int32
      description: "A 1-based integer that represents the week of the year that includes the date in the <code>time</code> parameter."
  overload: System.Globalization.KoreanCalendar.GetWeekOfYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>time</code> or <code>firstDayOfWeek</code> is outside the range supported by the calendar.       -or-       <code>rule</code> is not a valid <xref:System.Globalization.CalendarWeekRule> value."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: GetYear(DateTime)
  nameWithType: KoreanCalendar.GetYear(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the year in the specified <xref:System.DateTime>."
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Korean calendar.  \n  \n [!code-cpp[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.k_6_1.cpp)]\n [!code-cs[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.k_6_1.cs)]\n [!code-vb[System.Globalization.KoreanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.k_6_1.vb)]"
  syntax:
    content: public override int GetYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.Int32
      description: "An integer that represents the year in the specified <xref:System.DateTime>."
  overload: System.Globalization.KoreanCalendar.GetYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: KoreanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determines whether the specified date in the specified era is a leap day."
  remarks: "Leap years in the Korean calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.       A leap day is a day that occurs only in a leap year. For example, the 29th day of February is the only leap day."
  example:
  - "The following example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  \n  \n [!code-cs[System.Globalization.KoreanCalendar.IsLeapDay#1](~/add/codesnippet/csharp/d8cc07a6-1692-41ee-9974-_1.cs)]\n [!code-vb[System.Globalization.KoreanCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/d8cc07a6-1692-41ee-9974-_1.vb)]\n [!code-cpp[System.Globalization.KoreanCalendar.IsLeapDay#1](~/add/codesnippet/cpp/d8cc07a6-1692-41ee-9974-_1.cpp)]"
  syntax:
    content: public override bool IsLeapDay (int year, int month, int day, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: month
      type: System.Int32
      description: "An integer from 1 to 12 that represents the month."
    - id: day
      type: System.Int32
      description: "An integer from 1 to 31 that represents the day."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified day is a leap day; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Globalization.KoreanCalendar.IsLeapDay*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>day</code> is outside the range supported by the calendar.       -or-       <code>era</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: KoreanCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.IsLeapMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determines whether the specified month in the specified year in the specified era is a leap month."
  remarks: "Leap years in the Korean calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days.       A leap month is an entire month that occurs only in a leap year. The Korean calendar does not have any leap months."
  example:
  - "The following example calls IsLeapMonth for all the months in five years in the current era.  \n  \n [!code-cs[System.Globalization.KoreanCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/fbe2462c-8d1d-4e5a-bf95-_1.cs)]\n [!code-cpp[System.Globalization.KoreanCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/fbe2462c-8d1d-4e5a-bf95-_1.cpp)]\n [!code-vb[System.Globalization.KoreanCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/fbe2462c-8d1d-4e5a-bf95-_1.vb)]"
  syntax:
    content: public override bool IsLeapMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: month
      type: System.Int32
      description: "An integer from 1 to 12 that represents the month."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Boolean
      description: "This method always returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>, unless overridden by a derived class."
  overload: System.Globalization.KoreanCalendar.IsLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>era</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: IsLeapYear(Int32,Int32)
  nameWithType: KoreanCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.IsLeapYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determines whether the specified year in the specified era is a leap year."
  remarks: "Leap years in the Korean calendar correspond to the same leap years in the Gregorian calendar. A leap year in the Gregorian calendar is defined as a Gregorian year that is evenly divisible by four, except if it is divisible by 100. However, Gregorian years that are divisible by 400 are leap years. A common year has 365 days and a leap year has 366 days."
  example:
  - "The following example calls IsLeapYear for five years in each of the eras.  \n  \n [!code-cpp[System.Globalization.KoreanCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.k_4_1.cpp)]\n [!code-cs[System.Globalization.KoreanCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.k_4_1.cs)]\n [!code-vb[System.Globalization.KoreanCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.k_4_1.vb)]"
  syntax:
    content: public override bool IsLeapYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified year is a leap year; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Globalization.KoreanCalendar.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is outside the range supported by the calendar.       -or-       <code>era</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.KoreanEra
  id: KoreanEra
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: KoreanEra
  nameWithType: KoreanCalendar.KoreanEra
  fullName: System.Globalization.KoreanCalendar.KoreanEra
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Represents the current era. This field is constant."
  remarks: "The <xref:System.Globalization.KoreanCalendar> class recognizes only the current era. This field always returns 1."
  syntax:
    content: public const int KoreanEra = 1;
    return:
      type: System.Int32
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: MaxSupportedDateTime
  nameWithType: KoreanCalendar.MaxSupportedDateTime
  fullName: System.Globalization.KoreanCalendar.MaxSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets the latest date and time supported by the <xref href=&quot;System.Globalization.KoreanCalendar&quot;></xref> class."
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.KoreanCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.k_0_1.cs)]\n [!code-cpp[System.Globalization.KoreanCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.k_0_1.cpp)]\n [!code-vb[System.Globalization.KoreanCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.k_0_1.vb)]"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "The latest date and time supported by the <xref href=&quot;System.Globalization.KoreanCalendar&quot;></xref> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar."
  overload: System.Globalization.KoreanCalendar.MaxSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: MinSupportedDateTime
  nameWithType: KoreanCalendar.MinSupportedDateTime
  fullName: System.Globalization.KoreanCalendar.MinSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets the earliest date and time supported by the <xref href=&quot;System.Globalization.KoreanCalendar&quot;></xref> class."
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.KoreanCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.k_2_1.cs)]\n [!code-cpp[System.Globalization.KoreanCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.k_2_1.cpp)]\n [!code-vb[System.Globalization.KoreanCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.k_2_1.vb)]"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "The earliest date and time supported by the <xref href=&quot;System.Globalization.KoreanCalendar&quot;></xref> class, which is equivalent to the first moment of January 1, 0001 C.E. in the Gregorian calendar."
  overload: System.Globalization.KoreanCalendar.MinSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: KoreanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns a <xref:System.DateTime> that is set to the specified date and time in the specified era."
  syntax:
    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: month
      type: System.Int32
      description: "An integer from 1 to 12 that represents the month."
    - id: day
      type: System.Int32
      description: "An integer from 1 to 31 that represents the day."
    - id: hour
      type: System.Int32
      description: "An integer from 0 to 23 that represents the hour."
    - id: minute
      type: System.Int32
      description: "An integer from 0 to 59 that represents the minute."
    - id: second
      type: System.Int32
      description: "An integer from 0 to 59 that represents the second."
    - id: millisecond
      type: System.Int32
      description: "An integer from 0 to 999 that represents the millisecond."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.DateTime
      description: "The <xref:System.DateTime> that is set to the specified date and time in the current era."
  overload: System.Globalization.KoreanCalendar.ToDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>day</code> is outside the range supported by the calendar.       -or-       <code>hour</code> is less than zero or greater than 23.       -or-       <code>minute</code> is less than zero or greater than 59.       -or-       <code>second</code> is less than zero or greater than 59.       -or-       <code>millisecond</code> is less than zero or greater than 999.       -or-       <code>era</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: ToFourDigitYear(Int32)
  nameWithType: KoreanCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.KoreanCalendar.ToFourDigitYear(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Converts the specified year to a four-digit year by using the <xref:System.Globalization.KoreanCalendar.TwoDigitYearMax*> property to determine the appropriate century."
  remarks: "<xref:System.Globalization.KoreanCalendar.TwoDigitYearMax%2A> defines the last year in the 100-year range that can be represented by ToFourDigitYear. The century is determined by finding the sole occurrence of the two-digit year within that 100-year range. For example, if <xref:System.Globalization.KoreanCalendar.TwoDigitYearMax%2A> is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a two-digit value of 30 is interpreted as 1930, while a two-digit value of 29 is interpreted as 2029.       ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.KoreanCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception."
  syntax:
    content: public override int ToFourDigitYear (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "A two-digit or four-digit integer that represents the year to convert."
    return:
      type: System.Int32
      description: "An integer that contains the four-digit representation of <code>year</code>."
  overload: System.Globalization.KoreanCalendar.ToFourDigitYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.KoreanCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.KoreanCalendar
  langs:
  - csharp
  name: TwoDigitYearMax
  nameWithType: KoreanCalendar.TwoDigitYearMax
  fullName: System.Globalization.KoreanCalendar.TwoDigitYearMax
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets or sets the last year of a 100-year range that can be represented by a 2-digit year."
  remarks: "This property allows a 2-digit year to be properly translated to a 4-digit year. For example, in the Gregorian calendar, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.KoreanCalendar> class does not detect changes in the system settings automatically.       The application should set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30."
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    return:
      type: System.Int32
      description: "The last year of a 100-year range that can be represented by a 2-digit year."
  overload: System.Globalization.KoreanCalendar.TwoDigitYearMax*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value specified in a set operation is less than 99.       -or-       The value specified in a set operation is greater than <xref uid=&quot;langword_csharp_MaxSupportedDateTime.Year&quot; name=&quot;MaxSupportedDateTime.Year&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "In a set operation, the current instance is read-only."
  platform:
  - net462
references:
- uid: System.Globalization.Calendar
  isExternal: false
  name: System.Globalization.Calendar
- uid: System.TypeInitializationException
  isExternal: true
  name: System.TypeInitializationException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Globalization.KoreanCalendar.#ctor
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: KoreanCalendar()
  nameWithType: KoreanCalendar.KoreanCalendar()
  fullName: System.Globalization.KoreanCalendar.KoreanCalendar()
- uid: System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: AddMonths(DateTime,Int32)
  nameWithType: KoreanCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.KoreanCalendar.AddMonths(DateTime,Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: AddYears(DateTime,Int32)
  nameWithType: KoreanCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.KoreanCalendar.AddYears(DateTime,Int32)
- uid: System.Globalization.KoreanCalendar.AlgorithmType
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: KoreanCalendar.AlgorithmType
  fullName: System.Globalization.KoreanCalendar.AlgorithmType
- uid: System.Globalization.CalendarAlgorithmType
  parent: System.Globalization
  isExternal: false
  name: CalendarAlgorithmType
  nameWithType: CalendarAlgorithmType
  fullName: System.Globalization.CalendarAlgorithmType
- uid: System.Globalization.KoreanCalendar.Eras
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: Eras
  nameWithType: KoreanCalendar.Eras
  fullName: System.Globalization.KoreanCalendar.Eras
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetDayOfMonth(DateTime)
  nameWithType: KoreanCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetDayOfMonth(DateTime)
- uid: System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetDayOfWeek(DateTime)
  nameWithType: KoreanCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetDayOfWeek(DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetDayOfYear(DateTime)
  nameWithType: KoreanCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetDayOfYear(DateTime)
- uid: System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: KoreanCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.GetDaysInMonth(Int32,Int32,Int32)
- uid: System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetDaysInYear(Int32,Int32)
  nameWithType: KoreanCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.GetDaysInYear(Int32,Int32)
- uid: System.Globalization.KoreanCalendar.GetEra(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetEra(DateTime)
  nameWithType: KoreanCalendar.GetEra(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetEra(DateTime)
- uid: System.Globalization.KoreanCalendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetLeapMonth(Int32,Int32)
  nameWithType: KoreanCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.GetLeapMonth(Int32,Int32)
- uid: System.Globalization.KoreanCalendar.GetMonth(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetMonth(DateTime)
  nameWithType: KoreanCalendar.GetMonth(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetMonth(DateTime)
- uid: System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: KoreanCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.GetMonthsInYear(Int32,Int32)
- uid: System.Globalization.KoreanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  nameWithType: KoreanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  fullName: System.Globalization.KoreanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
- uid: System.Globalization.CalendarWeekRule
  parent: System.Globalization
  isExternal: true
  name: CalendarWeekRule
  nameWithType: CalendarWeekRule
  fullName: System.Globalization.CalendarWeekRule
- uid: System.Globalization.KoreanCalendar.GetYear(System.DateTime)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetYear(DateTime)
  nameWithType: KoreanCalendar.GetYear(DateTime)
  fullName: System.Globalization.KoreanCalendar.GetYear(DateTime)
- uid: System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: KoreanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: KoreanCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.IsLeapMonth(Int32,Int32,Int32)
- uid: System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: IsLeapYear(Int32,Int32)
  nameWithType: KoreanCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.IsLeapYear(Int32,Int32)
- uid: System.Globalization.KoreanCalendar.KoreanEra
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: KoreanEra
  nameWithType: KoreanCalendar.KoreanEra
  fullName: System.Globalization.KoreanCalendar.KoreanEra
- uid: System.Globalization.KoreanCalendar.MaxSupportedDateTime
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: KoreanCalendar.MaxSupportedDateTime
  fullName: System.Globalization.KoreanCalendar.MaxSupportedDateTime
- uid: System.Globalization.KoreanCalendar.MinSupportedDateTime
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: KoreanCalendar.MinSupportedDateTime
  fullName: System.Globalization.KoreanCalendar.MinSupportedDateTime
- uid: System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: KoreanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.KoreanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: ToFourDigitYear(Int32)
  nameWithType: KoreanCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.KoreanCalendar.ToFourDigitYear(Int32)
- uid: System.Globalization.KoreanCalendar.TwoDigitYearMax
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: KoreanCalendar.TwoDigitYearMax
  fullName: System.Globalization.KoreanCalendar.TwoDigitYearMax
- uid: System.Globalization.KoreanCalendar.#ctor*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: KoreanCalendar
  nameWithType: KoreanCalendar.KoreanCalendar
- uid: System.Globalization.KoreanCalendar.AddMonths*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: AddMonths
  nameWithType: KoreanCalendar.AddMonths
- uid: System.Globalization.KoreanCalendar.AddYears*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: AddYears
  nameWithType: KoreanCalendar.AddYears
- uid: System.Globalization.KoreanCalendar.AlgorithmType*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: KoreanCalendar.AlgorithmType
- uid: System.Globalization.KoreanCalendar.Eras*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: Eras
  nameWithType: KoreanCalendar.Eras
- uid: System.Globalization.KoreanCalendar.GetDayOfMonth*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetDayOfMonth
  nameWithType: KoreanCalendar.GetDayOfMonth
- uid: System.Globalization.KoreanCalendar.GetDayOfWeek*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetDayOfWeek
  nameWithType: KoreanCalendar.GetDayOfWeek
- uid: System.Globalization.KoreanCalendar.GetDayOfYear*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetDayOfYear
  nameWithType: KoreanCalendar.GetDayOfYear
- uid: System.Globalization.KoreanCalendar.GetDaysInMonth*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetDaysInMonth
  nameWithType: KoreanCalendar.GetDaysInMonth
- uid: System.Globalization.KoreanCalendar.GetDaysInYear*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetDaysInYear
  nameWithType: KoreanCalendar.GetDaysInYear
- uid: System.Globalization.KoreanCalendar.GetEra*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetEra
  nameWithType: KoreanCalendar.GetEra
- uid: System.Globalization.KoreanCalendar.GetLeapMonth*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetLeapMonth
  nameWithType: KoreanCalendar.GetLeapMonth
- uid: System.Globalization.KoreanCalendar.GetMonth*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetMonth
  nameWithType: KoreanCalendar.GetMonth
- uid: System.Globalization.KoreanCalendar.GetMonthsInYear*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetMonthsInYear
  nameWithType: KoreanCalendar.GetMonthsInYear
- uid: System.Globalization.KoreanCalendar.GetWeekOfYear*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetWeekOfYear
  nameWithType: KoreanCalendar.GetWeekOfYear
- uid: System.Globalization.KoreanCalendar.GetYear*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: GetYear
  nameWithType: KoreanCalendar.GetYear
- uid: System.Globalization.KoreanCalendar.IsLeapDay*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: IsLeapDay
  nameWithType: KoreanCalendar.IsLeapDay
- uid: System.Globalization.KoreanCalendar.IsLeapMonth*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: IsLeapMonth
  nameWithType: KoreanCalendar.IsLeapMonth
- uid: System.Globalization.KoreanCalendar.IsLeapYear*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: IsLeapYear
  nameWithType: KoreanCalendar.IsLeapYear
- uid: System.Globalization.KoreanCalendar.MaxSupportedDateTime*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: KoreanCalendar.MaxSupportedDateTime
- uid: System.Globalization.KoreanCalendar.MinSupportedDateTime*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: KoreanCalendar.MinSupportedDateTime
- uid: System.Globalization.KoreanCalendar.ToDateTime*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: ToDateTime
  nameWithType: KoreanCalendar.ToDateTime
- uid: System.Globalization.KoreanCalendar.ToFourDigitYear*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: ToFourDigitYear
  nameWithType: KoreanCalendar.ToFourDigitYear
- uid: System.Globalization.KoreanCalendar.TwoDigitYearMax*
  parent: System.Globalization.KoreanCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: KoreanCalendar.TwoDigitYearMax
