### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDiffieHellman
  id: ECDiffieHellman
  children:
  - System.Security.Cryptography.ECDiffieHellman.#ctor
  - System.Security.Cryptography.ECDiffieHellman.Create
  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDiffieHellman.PublicKey
  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  langs:
  - csharp
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
  type: Class
  summary: "Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support."
  remarks: "This class serves as the abstract base class for ECDH implementations."
  syntax:
    content: 'public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ECDiffieHellman()
  nameWithType: ECDiffieHellman.ECDiffieHellman()
  fullName: System.Security.Cryptography.ECDiffieHellman.ECDiffieHellman()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;></xref> class."
  remarks: "This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class. The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]. For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method."
  syntax:
    content: protected ECDiffieHellman ();
    parameters: []
  overload: System.Security.Cryptography.ECDiffieHellman.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  id: Create
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: System.Security.Cryptography.ECDiffieHellman.Create()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm."
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: "A new instance of the default implementation of this class."
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm."
  remarks: "If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the Create method overload to create a custom `algorithm` string that specifies your implementation.       The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]:      -   &quot;ECDH&quot;      -   &quot;ECDiffieHellman&quot;      -   &quot;ECDiffieHellmanCng&quot;      -   &quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;       You can also provide the name of a custom ECDH implementation for the `algorithm` parameter. If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created."
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "The name of an implementation of the ECDH algorithm."
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: "A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>algorithm</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Derives bytes that can be used as a key using a hash function, given another party&quot;s public key and hash algorithm&quot;s name."
  remarks: "This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> method passing `null` as the prepend and append values."
  syntax:
    content: public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The other party&quot;s public key."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm  to use to derive the key material."
    return:
      type: System.Byte[]
      description: "The key material from the key exchange with the other partyâ€™s public key."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party&quot;s public key, hash algorithm&quot;s name, a prepend value and an append value."
  syntax:
    content: public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The other party&quot;s public key."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm  to use to derive the key material."
    - id: secretPrepend
      type: System.Byte[]
      description: "A value to prepend to the derived secret before hashing."
    - id: secretAppend
      type: System.Byte[]
      description: "A value to append to the derived secret before hashing."
    return:
      type: System.Byte[]
      description: "The key material from the key exchange with the other partyâ€™s public key."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "A derived class must override this method."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC)."
  remarks: "This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> method passing `null` as the prepend and append values."
  syntax:
    content: public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The other party&quot;s public key."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm to use to derive the key material."
    - id: hmacKey
      type: System.Byte[]
      description: "The key for the HMAC."
    return:
      type: System.Byte[]
      description: "The key material from the key exchange with the other partyâ€™s public key."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC)."
  syntax:
    content: public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The other party&quot;s public key."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "The hash algorithm to use to derive the key material."
    - id: hmacKey
      type: System.Byte[]
      description: "The key for the HMAC."
    - id: secretPrepend
      type: System.Byte[]
      description: "A value to prepend to the derived secret before hashing."
    - id: secretAppend
      type: System.Byte[]
      description: "A value to append to the derived secret before hashing."
    return:
      type: System.Byte[]
      description: "The key material from the key exchange with the other partyâ€™s public key."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "A derived class must override this method."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Derives bytes that can be used as a key, given another party&quot;s public key."
  remarks: "For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class."
  syntax:
    content: public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The other party&quot;s public key."
    return:
      type: System.Byte[]
      description: "The key material from the key exchange with the other partyâ€™s public key."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm."
  syntax:
    content: public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The other party&quot;s public key."
    - id: prfLabel
      type: System.Byte[]
      description: "The ASCII-encoded PRF label."
    - id: prfSeed
      type: System.Byte[]
      description: "The 64-byte PRF seed."
    return:
      type: System.Byte[]
      description: "The key material from the key exchange with the other partyâ€™s public key."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "A derived class must override this method."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets the name of the key exchange algorithm."
  remarks: "The default (non-overridden) implementation of this property returns the string &quot;ECDiffieHellman&quot;.       This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class."
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "The name of the key exchange algorithm."
  overload: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellman.PublicKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance."
  syntax:
    content: public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "The public part of the ECDH key pair that is being used by this <xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;></xref> instance."
  overload: System.Security.Cryptography.ECDiffieHellman.PublicKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Gets the name of the signature algorithm."
  remarks: "This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.       The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation. Therefore, this property returns `null`."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ECDiffieHellman()
  nameWithType: ECDiffieHellman.ECDiffieHellman()
  fullName: System.Security.Cryptography.ECDiffieHellman.ECDiffieHellman()
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: System.Security.Cryptography.ECDiffieHellman.Create()
- uid: System.Security.Cryptography.ECDiffieHellman
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellman.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman.ECDiffieHellman
- uid: System.Security.Cryptography.ECDiffieHellman.Create*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create
  nameWithType: ECDiffieHellman.Create
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash
  nameWithType: ECDiffieHellman.DeriveKeyFromHash
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyMaterial
  nameWithType: ECDiffieHellman.DeriveKeyMaterial
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyTls
  nameWithType: ECDiffieHellman.DeriveKeyTls
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
