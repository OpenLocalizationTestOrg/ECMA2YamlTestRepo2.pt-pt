### YamlMime:ManagedReference
items:
- uid: System.Reflection.ObfuscateAssemblyAttribute
  id: ObfuscateAssemblyAttribute
  children:
  - System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  - System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  - System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  langs:
  - csharp
  name: ObfuscateAssemblyAttribute
  nameWithType: ObfuscateAssemblyAttribute
  fullName: System.Reflection.ObfuscateAssemblyAttribute
  type: Class
  summary: "Instructs obfuscation tools to use their standard obfuscation rules for the appropriate assembly type."
  remarks: "The <xref:System.Reflection.ObfuscationAttribute> and ObfuscateAssemblyAttribute attributes provide a way for assembly authors to annotate their binaries so that obfuscation tools can process them correctly with minimal external configuration.       Applying this attribute to an assembly tells the obfuscation tool to use its default rules for the assembly type.      > [!IMPORTANT] >  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations.       You can apply <xref:System.Reflection.ObfuscationAttribute> to types within an assembly, and to members on those types. The innermost attribute controls the way an obfuscation tool treats any particular code entity."
  example:
  - "The following code example shows a private assembly that has been marked with the ObfuscateAssemblyAttribute. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n For a code example that shows the use of ObfuscateAssemblyAttribute with <xref:System.Reflection.ObfuscationAttribute>, see the <xref:System.Reflection.ObfuscationAttribute> class.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/t-system.reflection.obfu_0_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/t-system.reflection.obfu_0_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ObfuscateAssemblyAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: ObfuscateAssemblyAttribute(Boolean)
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  fullName: System.Reflection.ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Initializes a new instance of the <xref href=&quot;System.Reflection.ObfuscateAssemblyAttribute&quot;></xref> class, specifying whether the assembly to be obfuscated is public or private."
  remarks: "Mark assemblies as private if they are used only by your application, and are not libraries to be used by other software. Generally, marking an assembly as private tells an obfuscator that it can obfuscate the names of all methods, including public methods, as part of obfuscating an application. If an assembly is public, an obfuscator should not obfuscate the names of public members.      > [!IMPORTANT] >  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations."
  example:
  - "The following code example shows how the attribute constructor specifies that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/m-system.reflection.obfu_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/m-system.reflection.obfu_1.cs)]"
  syntax:
    content: public ObfuscateAssemblyAttribute (bool assemblyIsPrivate);
    parameters:
    - id: assemblyIsPrivate
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the assembly is used within the scope of one application; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Reflection.ObfuscateAssemblyAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  id: AssemblyIsPrivate
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
  fullName: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Gets a <xref:System.Boolean> value indicating whether the assembly was marked private."
  remarks: "A private assembly is used only by the application of which it is a part, and not by other software.      > [!IMPORTANT] >  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations."
  example:
  - "The following code example shows how the attribute constructor sets the AssemblyIsPrivate property to `true`, to specify that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/p-system.reflection.obfu_2_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/p-system.reflection.obfu_2_1.cs)]"
  syntax:
    content: public bool AssemblyIsPrivate { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the assembly was marked private; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  id: StripAfterObfuscation
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
  fullName: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Gets or sets a <xref:System.Boolean> value indicating whether the obfuscation tool should remove the attribute after processing."
  remarks: "Attributes should not be stripped if your library will be included as part of another application, and obfuscated as part of that application.       Specifying that obfuscation tools should strip the <xref:System.Reflection.ObfuscateAssemblyAttribute> does not affect instances of <xref:System.Reflection.ObfuscationAttribute> that have been applied to types and members within the assembly.      > [!IMPORTANT] >  Applying this attribute does not automatically obfuscate the assembly. Applying the attribute is an alternative to creating a configuration file for the obfuscation tool. That is, it merely provides instructions for an obfuscation tool. Microsoft recommends that vendors of obfuscation tools follow the semantics described here. However, there is no guarantee that a particular tool follows Microsoft recommendations."
  example:
  - "The following code example shows the <xref:System.Reflection.ObfuscateAssemblyAttribute> attribute with the StripAfterObfuscation property set to `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/p-system.reflection.obfu_3_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/p-system.reflection.obfu_3_1.cs)]"
  syntax:
    content: public bool StripAfterObfuscation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the obfuscation tool should remove the attribute after processing; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value for this property is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: ObfuscateAssemblyAttribute(Boolean)
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  fullName: System.Reflection.ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
  fullName: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
  fullName: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: ObfuscateAssemblyAttribute
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
