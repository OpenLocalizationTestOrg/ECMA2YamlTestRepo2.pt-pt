### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticValue
  id: SemanticValue
  children:
  - System.Speech.Recognition.SemanticValue.#ctor(System.Object)
  - System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)
  - System.Speech.Recognition.SemanticValue.Confidence
  - System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  - System.Speech.Recognition.SemanticValue.ContainsKey(System.String)
  - System.Speech.Recognition.SemanticValue.Count
  - System.Speech.Recognition.SemanticValue.Equals(System.Object)
  - System.Speech.Recognition.SemanticValue.GetHashCode
  - System.Speech.Recognition.SemanticValue.Item(System.String)
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator
  - System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator
  - System.Speech.Recognition.SemanticValue.Value
  langs:
  - csharp
  name: SemanticValue
  nameWithType: SemanticValue
  fullName: System.Speech.Recognition.SemanticValue
  type: Class
  summary: "Represents the semantic organization of a recognized phrase."
  remarks: "SemanticValue is the primary object that implements the semantic technology in System.Speech. Semantic interpretation allows grammars to define rules for use by a recognition engine to correctly interpret audio input. Semantic interpretation also enables recognition engines to organize their results so that they can be more easily processed, rather than returning only recognized words and sequences of words.       For example, the recognition engine output &quot;Change background to red&quot; would have to be parsed and interpreted by an application before it could be acted upon. A <xref:System.Speech.Recognition.Grammar> object can specify a semantic interpretation to make processing clearer by specifying that the phrase has two semantic substructures, one for selecting background or foreground (represented by the text &quot;background&quot;), and the other for selecting color (represented by the text &quot;red&quot;).       System.Speech represents the semantics of a recognition operation in a tree of SemanticValue objects.       Each SemanticValue instance includes the following:      -   An <xref:System.Object>, accessed by means of the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property, used to key the instance of the SemanticValue.      -   A measure of the accuracy of semantic parsing, returned by the <xref:System.Speech.Recognition.SemanticValue.Confidence%2A> property.      -   A collection of name/value pairs (<xref:System.Collections.Generic.KeyValuePair%602>) of child objects, which are also SemanticValue instances. Child nodes are accessible through the SemanticValue implementation of <xref:System.Collections.Generic.IDictionary%602> using a string lookup key and a SemanticValue instance, as in the following example.          ```c#       foreach (KeyValuePair<String, SemanticValue> child in semantics)        {         Utils.CreateSemanticsTreeNodes(semanticsNode.Nodes, child.Value, child.Key);       }       ```       Recognition engines based on System.Speech provide valid instances of SemanticValue for all output from recognition, even for phrases with no explicit semantic structure.       The SemanticValue instance for a phrase is obtained using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object (or objects that inherit from it, such as <xref:System.Speech.Recognition.RecognitionResult>).       SemanticValue objects obtained for recognized phrases without semantic structure are characterized by:      -   The lack of children (<xref:System.Speech.Recognition.SemanticValue.Count%2A> is 0).      -   The <xref:System.Speech.Recognition.SemanticValue.Value%2A> property is `null`.      -   An artificial semantic confidence level of 1.0 (returned by <xref:System.Speech.Recognition.SemanticValue.Confidence%2A>).       Typically, applications create SemanticValue instances indirectly, adding them to <xref:System.Speech.Recognition.Grammar> objects by using <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances,  in conjunction with  <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects.       Direct construction of a SemanticValue instance is useful during the creation of strongly-typed grammars.       SemanticValue implements the <xref:System.Collections.Generic.IDictionary%602>, <xref:System.Collections.Generic.ICollection%601>, and <xref:System.Collections.Generic.IEnumerable%601> interfaces."
  example:
  - "The following example shows a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event designed to handle commands to change foreground and background color.  \n  \n The handler identifies recognized phrases that have no underlying semantic structure by detecting a <xref:System.Speech.Recognition.SemanticValue.Count%2A> of zero and a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of `null`. This recognition output is then processed directly by parsing the raw text.  \n  \n In other cases, the handler uses keys to obtain the RGB components of a color name, to determine whether the command will change the foreground or background, or to indicate that no valid key was found.  \n  \n```c#  \n  \nnewGrammar.SpeechRecognized +=  \n  delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n  \n    // Retrieve the value of the semantic property.  \n    bool changeBackGround = true;  \n    string errorString = \"\";  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n  \n    Color newColor = Color.Empty;  \n  \n    try   \n    {  \n      if (semantics.Count == 0 && semantics.Value==null)  \n      {  \n        // Signifies recognition by a grammar with no semantics.  \n        // Parse the string, assuming that the last word is color,  \n        // and search for “background” or “foreground” in the input.  \n        if (eventArgs.Result.Text.Contains(\"foreground\"))   \n        {  \n          changeBackGround = false;  \n        }  \n        string cName = eventArgs.Result.Words[eventArgs.Result.Words.Count - 1].Text;  \n        newColor = Color.FromName(cName);  \n  \n      }  \n      else if (semantics.ContainsKey(\"colorStringList\") ^ semantics.ContainsKey(\"colorRGBValueList\"))   \n      {  \n  \n        // Determine whether to change background or foreground.  \n        if (semantics.ContainsKey(\"applyChgToBackground\"))   \n        {  \n          changeBackGround = semantics[\"applyChgToBackground\"].Value is bool;  \n        }  \n  \n        // Get the RGB color value.  \n        if (semantics.ContainsKey(\"colorStringList\"))   \n        {  \n          newColor = Color.FromName((string)semantics[\"colorStringList\"].Value);  \n        }  \n        if (semantics.ContainsKey(\"colorRGBValueList\"))   \n        {  \n          newColor = System.Drawing.Color.FromArgb((int)semantics[\"colorRGBValueList\"].Value);  \n        }  \n      }  \n      else   \n      {  \n  \n        // Throw an exception if the semantics do not contain the keys we  \n        // support.  \n        throw(new Exception(\"Unsupported semantics keys found.\"));  \n      }  \n    }  \n  \n    catch (Exception exp)   \n    {  \n      MessageBox.Show(String.Format(\"Unable to process color semantics.:\\n{0}\\n\", exp.Message));  \n      return;  \n    }  \n  \n    // Change colors, either foreground or background.  \n    if (changeBackGround)   \n    {  \n      BackColor = newColor;  \n      float Bright = BackColor.GetBrightness();  \n      float Hue = BackColor.GetHue();  \n      float Sat = BackColor.GetSaturation();  \n  \n      // Make sure that text is readable regardless of the background.  \n      if (BackColor.GetBrightness() <= .50)   \n      {  \n        ForeColor = Color.White;  \n      }  \n      else   \n      {  \n        ForeColor = Color.Black;  \n      }  \n    }  \n    else   \n    {  \n      ForeColor = newColor;  \n      float Bright = ForeColor.GetBrightness();  \n      float Hue = ForeColor.GetHue();  \n      float Sat = ForeColor.GetSaturation();  \n  \n      // Make sure that text is readable regardless of Foreground.  \n      if (ForeColor.GetBrightness() <= .50)   \n      {  \n        BackColor = Color.White;  \n      }  \n      else   \n      {  \n        BackColor = Color.Black;  \n      }  \n    }  \n    return;  \n  };  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("'{_keyName}'= {Value}  -  Children = {_dictionary.Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Speech.Recognition.SemanticValue/SemanticValueDebugDisplay))]

      public sealed class SemanticValue : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>>, System.Collections.Generic.IDictionary<string,System.Speech.Recognition.SemanticValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>
  - System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>
  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: SemanticValue(Object)
  nameWithType: SemanticValue.SemanticValue(Object)
  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> class and specifies a semantic value."
  remarks: "There are no restrictions on the type of `value` to be stored.       An application can retrieve `value` by using the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property on a <xref:System.Speech.Recognition.SemanticValue> instance.       The value of the <xref:System.Speech.Recognition.SemanticValue.Confidence%2A> property for the <xref:System.Speech.Recognition.SemanticValue> instance will be set to -1.       A <xref:System.Speech.Recognition.SemanticValue> constructed with this method cannot be referenced by key name."
  syntax:
    content: public SemanticValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "The information to be stored in the  object."
  overload: System.Speech.Recognition.SemanticValue.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)
  id: '#ctor(System.String,System.Object,System.Single)'
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: SemanticValue(String,Object,Single)
  nameWithType: SemanticValue.SemanticValue(String,Object,Single)
  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(String,Object,Single)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> class and specifies a semantic value, a key name, and a confidence level."
  remarks: "There are no restrictions on the type of `value` to be stored.       An application can retrieve `value` by using the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property on a <xref:System.Speech.Recognition.SemanticValue> instance.       The `confidence` parameter (returned by the <xref:System.Speech.Recognition.SemanticValue.Confidence%2A> property on a <xref:System.Speech.Recognition.SemanticValue> instance), should be between 0.0 and 1.0."
  syntax:
    content: public SemanticValue (string keyName, object value, float confidence);
    parameters:
    - id: keyName
      type: System.String
      description: "A key that can be used to reference this  instance."
    - id: value
      type: System.Object
      description: "An object containing information to be stored in the  object."
    - id: confidence
      type: System.Single
      description: "A  containing an estimate of the certainty of semantic analysis."
  overload: System.Speech.Recognition.SemanticValue.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.Confidence
  id: Confidence
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Confidence
  nameWithType: SemanticValue.Confidence
  fullName: System.Speech.Recognition.SemanticValue.Confidence
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Returns a relative measure of the certainty as to the correctness of the semantic parsing that returned the current instance of <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see>."
  remarks: "The Confidence property, which returns a measure of the correctness of semantic parsing, should not be confused with the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A?displayProperty=fullName> property, which returns a measure of the accuracy of speech recognition."
  example:
  - "The following example is used to recursively traverse and then display information (including confidence) as a <xref:System.Windows.Forms.TreeNodeCollection>, or as the nodes making up the tree structure of the semantics used to recognize a phrase.  \n  \n```c#  \ninternal static void CreateSemanticsTreeNodes(  \n        TreeNodeCollection nodes,  \n        SemanticValue semantics,  \n        String name)   \n{  \n  string semanticsText =   \n      String.Format(\"  {0}  (Confidence {1})\", name,semantics.Confidence);  \n  \n  // Format integers as hexadecimal.  \n  if (semantics.Value == null )  \n  {  \n    semanticsText = semanticsText + \" = null\";  \n  }  \n  else if (semantics.Value.GetType() == typeof(int))   \n  {  \n    semanticsText = String.Format(\"{0} = {1:X} \", semanticsText, semantics.Value);  \n  }   \n  else   \n  {  \n    semanticsText = semanticsText + \" = \" + semantics.Value.ToString();  \n  }  \n  \n  TreeNode semanticsNode = new TreeNode(semanticsText);  \n  foreach (KeyValuePair<String, SemanticValue> child in semantics)   \n  {  \n    CreateSemanticsTreeNodes(semanticsNode.Nodes, child.Value, child.Key);  \n  }  \n  nodes.Add(semanticsNode);  \n}  \n```"
  syntax:
    content: public float Confidence { get; }
    return:
      type: System.Single
      description: "Returns a <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref> that is a relative measure of the certainty of semantic parsing that returned the current instance of <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see>."
  overload: System.Speech.Recognition.SemanticValue.Confidence*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  id: Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Contains(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.Contains(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.Contains(KeyValuePair<String,SemanticValue>)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Indicates whether the current <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> instance collection contains a specific key and a specific instance of <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> expressed as a key/value pair."
  syntax:
    content: public bool Contains (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue> item);
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}
      description: "An instance of <xref:System.Collections.Generic.KeyValuePair%602> instantiated for a given value of a key string and a  instance."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.Contains*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: ContainsKey(String)
  nameWithType: SemanticValue.ContainsKey(String)
  fullName: System.Speech.Recognition.SemanticValue.ContainsKey(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Indicates whether the current <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> instance collection contains a child <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> instance with a given key string."
  remarks: "You can only access data by key value at runtime, for example to check *semantic[&quot;myKey&quot;].Value*, and this generates an exception. We recommend that you query the object with ContainsKey before using <xref:System.Speech.Recognition.SemanticValue.Item%2A> with a given instance of <xref:System.Speech.Recognition.SemanticValue>."
  example:
  - "The following example shows a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event designed to handle commands to change foreground and background color.  \n  \n After handling phrases that are recognized but have no semantic structure, the handler checks for the presence of appropriate keys using ContainsKey (`applyChgToBackground`, `colorRGBValueList`, or `colorStringList)`,  and then processes the semantically organized data.  \n  \n```c#  \n  \nnewGrammar.SpeechRecognized +=  \n  delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n  \n    // Retrieve the value of the semantic property.  \n    bool changeBackGround = true;  \n    string errorString = \"\";  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n  \n    Color newColor = Color.Empty;  \n  \n    try   \n    {  \n      if (semantics.Count == 0 && semantics.Value==null)  \n      {  \n  \n        // Signifies recognition by a grammar with no semantics.  \n        // Parse the string, assuming that the last word is color,  \n        // searching for background or foreground in input.  \n        if (eventArgs.Result.Text.Contains(\"foreground\"))   \n        {  \n          changeBackGround = false;  \n        }  \n        string cName = eventArgs.Result.Words[eventArgs.Result.Words.Count - 1].Text;  \n        newColor = Color.FromName(cName);  \n  \n      }  \n      else if (semantics.ContainsKey(\"colorStringList\") ^ semantics.ContainsKey(\"colorRGBValueList\"))   \n      {  \n  \n        // Determine whether to change background or foreground.  \n        if (semantics.ContainsKey(\"applyChgToBackground\"))   \n        {  \n          changeBackGround = semantics[\"applyChgToBackground\"].Value is bool;  \n        }  \n  \n        // Get the RGB color value.  \n        if (semantics.ContainsKey(\"colorStringList\"))   \n        {  \n          newColor = Color.FromName((string)semantics[\"colorStringList\"].Value);  \n        }  \n        if (semantics.ContainsKey(\"colorRGBValueList\"))   \n        {  \n          newColor = System.Drawing.Color.FromArgb((int)semantics[\"colorRGBValueList\"].Value);  \n        }  \n      }  \n      else   \n      {  \n  \n        // Throw an exception if the semantics do not contain the keys we  \n        // support.  \n        throw(new Exception(\"Unsupported semantics keys found.\"));  \n      }  \n    }  \n  \n    catch (Exception exp)   \n    {  \n      MessageBox.Show(String.Format(\"Unable to process color semantics.:\\n{0}\\n\", exp.Message));  \n      return;  \n    }  \n  \n    // Change colors, either foreground or background.  \n    if (changeBackGround)   \n    {  \n      BackColor = newColor;  \n      float Bright = BackColor.GetBrightness();  \n      float Hue = BackColor.GetHue();  \n      float Sat = BackColor.GetSaturation();  \n      // Make sure that text is readable regardless of background.  \n      if (BackColor.GetBrightness() <= .50)   \n      {  \n        ForeColor = Color.White;  \n      }  \n      else   \n      {  \n        ForeColor = Color.Black;  \n      }  \n    }  \n    else   \n    {  \n      ForeColor = newColor;  \n      float Bright = ForeColor.GetBrightness();  \n      float Hue = ForeColor.GetHue();  \n      float Sat = ForeColor.GetSaturation();  \n      // Make sure that text is readable regardless of Foreground.  \n      if (ForeColor.GetBrightness() <= .50)   \n      {  \n        BackColor = Color.White;  \n      }  \n      else   \n      {  \n        BackColor = Color.Black;  \n      }  \n    }  \n    return;  \n  };  \n```"
  syntax:
    content: public bool ContainsKey (string key);
    parameters:
    - id: key
      type: System.String
      description: "<xref:System.String> containing the key string used to identify a child instance of  under the current ."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.ContainsKey*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.Count
  id: Count
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Count
  nameWithType: SemanticValue.Count
  fullName: System.Speech.Recognition.SemanticValue.Count
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Returns the number of child <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> objects under the current <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> instance."
  remarks: "Recognition results that do not make use of semantic parsing always have a Count value of zero, as well as a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of `null`."
  example:
  - "The following example shows a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event designed to handle commands to change foreground and background color.  \n  \n The handler identifies recognized phrases that have no underlying semantic structure by detecting a Count of zero and a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of `null`. This recognition output is then processed directly by parsing the raw text.  \n  \n In other cases, the handler uses keys to obtain the RGB components of a color name, to determine whether the command will change the foreground or background, or to indicate that no valid key was found.  \n  \n```c#  \n  \nnewGrammar.SpeechRecognized +=  \n  delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n  \n    // Retrieve the value of the semantic property.  \n    bool changeBackGround = true;  \n    string errorString = \"\";  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n  \n    Color newColor = Color.Empty;  \n  \n    try   \n    {  \n      if (semantics.Count == 0 && semantics.Value==null)  \n      {  \n        // Signifies recognition by a grammar with no semantics.  \n        // Parse the string, assuming that the last word is color,  \n        //  searching for background or foreground in input.  \n        if (eventArgs.Result.Text.Contains(\"foreground\"))   \n        {  \n          changeBackGround = false;  \n        }  \n        string cName = eventArgs.Result.Words[eventArgs.Result.Words.Count - 1].Text;  \n        newColor = Color.FromName(cName);  \n  \n      }  \n      else if (semantics.ContainsKey(\"colorStringList\") ^ semantics.ContainsKey(\"colorRGBValueList\"))   \n      {  \n  \n        // Determine whether to change background or foreground.  \n        if (semantics.ContainsKey(\"applyChgToBackground\"))   \n        {  \n          changeBackGround = semantics[\"applyChgToBackground\"].Value is bool;  \n        }  \n  \n        // Get the RGB color value.  \n        if (semantics.ContainsKey(\"colorStringList\"))   \n        {  \n          newColor = Color.FromName((string)semantics[\"colorStringList\"].Value);  \n        }  \n        if (semantics.ContainsKey(\"colorRGBValueList\"))   \n        {  \n          newColor = System.Drawing.Color.FromArgb((int)semantics[\"colorRGBValueList\"].Value);  \n        }  \n      }  \n      else   \n      {  \n  \n        // Throw an exception if the semantics do not contain the keys we  \n        // support.  \n        throw(new Exception(\"Unsupported semantics keys found.\"));  \n      }  \n    }  \n  \n    catch (Exception exp)   \n    {  \n      MessageBox.Show(String.Format(\"Unable to process color semantics.:\\n{0}\\n\", exp.Message));  \n      return;  \n    }  \n  \n    // Change colors, either foreground or background.  \n    if (changeBackGround)   \n    {  \n      BackColor = newColor;  \n      float Bright = BackColor.GetBrightness();  \n      float Hue = BackColor.GetHue();  \n      float Sat = BackColor.GetSaturation();  \n      // Make sure that text is readable regardless of background.  \n      if (BackColor.GetBrightness() <= .50)   \n      {  \n        ForeColor = Color.White;  \n      }  \n      else   \n      {  \n        ForeColor = Color.Black;  \n      }  \n    }  \n    else   \n    {  \n      ForeColor = newColor;  \n      float Bright = ForeColor.GetBrightness();  \n      float Hue = ForeColor.GetHue();  \n      float Sat = ForeColor.GetSaturation();  \n  \n      // Make sure that text is readable regardless of Foreground.  \n      if (ForeColor.GetBrightness() <= .50)   \n      {  \n        BackColor = Color.White;  \n      }  \n      else   \n      {  \n        BackColor = Color.Black;  \n      }  \n    }  \n    return;  \n  };  \n```"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "The number of child <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> objects under the current <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see>."
  overload: System.Speech.Recognition.SemanticValue.Count*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SemanticValue.Equals(Object)
  fullName: System.Speech.Recognition.SemanticValue.Equals(Object)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Determines whether a specified object is an instance of `SemanticValue` and equal to the current instance of `SemanticValue`."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to evaluate."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.Equals*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.GetHashCode
  id: GetHashCode
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SemanticValue.GetHashCode()
  fullName: System.Speech.Recognition.SemanticValue.GetHashCode()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Provides a hash code for a `SemanticValue` object."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.GetHashCode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.Item(System.String)
  id: Item(System.String)
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Item(String)
  nameWithType: SemanticValue.Item(String)
  fullName: System.Speech.Recognition.SemanticValue.Item(String)
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Returns child <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> instances that  belong to the current <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see>."
  remarks: "The Item is read-only and generates exceptions if members are modified.       You can only access data by key value at run-time, not at compile-time, for example to check `semantic[&quot;myKey&quot;].Value`. Specifying a key that is not present generates an exception.       To detect the presence of a given key, use the <xref:System.Speech.Recognition.SemanticValue.ContainsKey%2A> property on an <xref:System.Speech.Recognition.SemanticValue> instance."
  example:
  - "The following example shows a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event designed to handle commands to change foreground and background color.  \n  \n After handling recognized phrases that have no semantic structure, the handler checks for the presence of appropriate keys using <xref:System.Speech.Recognition.SemanticValue.ContainsKey%2A> (`applyChgToBackground`, `colorRGBValueList`, or `colorStringList)`, and then uses the Item property to obtain the nodes with needed information.  \n  \n The use of Item is highlighted below.  \n  \n```c#  \n  \nnewGrammar.SpeechRecognized +=  \n  delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n  \n    // Retrieve the value of the semantic property.  \n    bool changeBackGround = true;  \n    string errorString = \"\";  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n  \n    Color newColor = Color.Empty;  \n  \n    try   \n    {  \n      if (semantics.Count == 0 && semantics.Value==null)  \n      {  \n        // Signifies recognition by a grammar with no semantics.  \n        // Parse the string, assuming that the last word is color,  \n        //  searching for background or foreground in input.  \n        if (eventArgs.Result.Text.Contains(\"foreground\"))   \n        {  \n          changeBackGround = false;  \n        }  \n        string cName = eventArgs.Result.Words[eventArgs.Result.Words.Count - 1].Text;  \n        newColor = Color.FromName(cName);  \n  \n      }  \n      else if (semantics.ContainsKey(\"colorStringList\") ^ semantics.ContainsKey(\"colorRGBValueList\"))   \n      {  \n  \n        // Determine whether to change background or foreground.  \n        if (semantics.ContainsKey(\"applyChgToBackground\"))   \n        {  \n          changeBackGround = semantics[\"applyChgToBackground\"].Value is bool;  \n        }  \n  \n        // Get the RGB color value.  \n        if (semantics.ContainsKey(\"colorStringList\"))   \n        {  \n          newColor = Color.FromName((string)semantics[\"colorStringList\"].Value);  \n        }  \n        if (semantics.ContainsKey(\"colorRGBValueList\"))   \n        {  \n          newColor = System.Drawing.Color.FromArgb((int)semantics[\"colorRGBValueList\"].Value);  \n        }  \n      }  \n      else   \n      {  \n  \n        // Throw an exception if the semantics do not contain the keys we  \n        // support.  \n        throw(new Exception(\"Unsupported semantic keys found.\"));  \n      }  \n    }  \n  \n    catch (Exception exp)   \n    {  \n      MessageBox.Show(String.Format(\"Unable to process color semantics.:\\n{0}\\n\", exp.Message));  \n      return;  \n    }  \n  \n    // Change colors, either foreground or background.  \n    if (changeBackGround)   \n    {  \n      BackColor = newColor;  \n      float Bright = BackColor.GetBrightness();  \n      float Hue = BackColor.GetHue();  \n      float Sat = BackColor.GetSaturation();  \n      // Make sure that text is readable regardless of background.  \n      if (BackColor.GetBrightness() <= .50)   \n      {  \n        ForeColor = Color.White;  \n      }  \n      else   \n      {  \n        ForeColor = Color.Black;  \n      }  \n    }  \n    else   \n    {  \n      ForeColor = newColor;  \n      float Bright = ForeColor.GetBrightness();  \n      float Hue = ForeColor.GetHue();  \n      float Sat = ForeColor.GetSaturation();  \n  \n      // Make sure that text is readable regardless of the foreground.  \n      if (ForeColor.GetBrightness() <= .50)   \n      {  \n        BackColor = Color.White;  \n      }  \n      else   \n      {  \n        BackColor = Color.Black;  \n      }  \n    }  \n    return;  \n  };  \n```"
  syntax:
    content: public System.Speech.Recognition.SemanticValue this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: "A key for a  contained in the current instance of ."
    return:
      type: System.Speech.Recognition.SemanticValue
      description: 'Returns a child of the current <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> that can be indexed as part of a key value pair: `KeyValuePair'
  overload: System.Speech.Recognition.SemanticValue.Item*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "Thrown if no child member of the current instance of  has the key matching the key parameter."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Thrown if code attempts to change the  at a given index."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: void ICollection<KeyValuePair<string,SemanticValue>>.Add (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue> key);
    parameters:
    - id: key
      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Add*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.ICollection()
  nameWithType: SemanticValue.System.Collections.Generic.ICollection()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: void ICollection<KeyValuePair<string,SemanticValue>>.Clear ();
    parameters: []
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Clear*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: void ICollection<KeyValuePair<string,SemanticValue>>.CopyTo (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>[] array, int index);
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[]
      description: "To be added."
    - id: index
      type: System.Int32
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#CopyTo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.ICollection
  nameWithType: SemanticValue.System.Collections.Generic.ICollection
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#IsReadOnly*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: bool ICollection<KeyValuePair<string,SemanticValue>>.Remove (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue> key);
    parameters:
    - id: key
      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Remove*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)
  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IDictionary(String,SemanticValue)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: void IDictionary<string,SemanticValue>.Add (string key, System.Speech.Recognition.SemanticValue value);
    parameters:
    - id: key
      type: System.String
      description: "To be added."
    - id: value
      type: System.Speech.Recognition.SemanticValue
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Add*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys
  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IDictionary
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: System.Collections.Generic.ICollection<string> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys { get; }
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Keys*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)
  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IDictionary(String)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: bool IDictionary<string,SemanticValue>.Remove (string key);
    parameters:
    - id: key
      type: System.String
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Remove*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)
  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IDictionary(String,SemanticValue)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: bool IDictionary<string,SemanticValue>.TryGetValue (string key, out System.Speech.Recognition.SemanticValue value);
    parameters:
    - id: key
      type: System.String
      description: "To be added."
    - id: value
      type: System.Speech.Recognition.SemanticValue
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#TryGetValue*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values
  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IDictionary
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: System.Collections.Generic.ICollection<System.Speech.Recognition.SemanticValue> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values { get; }
    return:
      type: System.Collections.Generic.ICollection{System.Speech.Recognition.SemanticValue}
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Values*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IEnumerable()
  nameWithType: SemanticValue.System.Collections.Generic.IEnumerable()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IEnumerable()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>> IEnumerable<KeyValuePair<string,SemanticValue>>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}}
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SemanticValue.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Returns an enumerator that iterates through a collection."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Speech.Recognition.SemanticValue.Value
  id: Value
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Value
  nameWithType: SemanticValue.Value
  fullName: System.Speech.Recognition.SemanticValue.Value
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "A read-only property that returns the information contained in the current <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see>."
  remarks: "Recognition results which do not make use of semantic parsing always have a Value of `null` and a <xref:System.Speech.Recognition.SemanticValue.Count%2A> property of zero."
  example:
  - "The following example is used to recursively traverse and then display information (including confidence) as a <xref:System.Windows.Forms.TreeNodeCollection>, or as the nodes making up the tree structure of the semantics used to recognize a phrase.  \n  \n```c#  \ninternal static void CreateSemanticsTreeNodes(  \n          TreeNodeCollection nodes,  \n          SemanticValue semantics,  \n          String name)   \n{  \n  string semanticsText =   \n      String.Format(\"  {0} ( Confidence {1})\", name,semantics.Confidence);  \n  \n  // Format integers as hexadecimal.  \n  if (semantics.Value == null )  \n  {  \n    semanticsText = semanticsText + \" = null\";  \n  }  \n  else if (semantics.Value.GetType() == typeof(int))   \n  {  \n    semanticsText = String.Format(\"{0} = {1:X} \", semanticsText, semantics.Value);  \n  }  \n  else   \n  {  \n    semanticsText = semanticsText + \" = \" + semantics.Value.ToString();  \n  }  \n  \n  TreeNode semanticsNode = new TreeNode(semanticsText);  \n  foreach (KeyValuePair<String, SemanticValue> child in semantics)   \n  {  \n    CreateSemanticsTreeNodes(semanticsNode.Nodes, child.Value, child.Key);  \n  }  \n  nodes.Add(semanticsNode);  \n}  \n```"
  syntax:
    content: public object Value { get; }
    return:
      type: System.Object
      description: "Returns an &lt;xref:System.Object&gt; instance containing the information stored in the current <see cref=&quot;T:System.Speech.Recognition.SemanticValue&quot;></see> instance."
  overload: System.Speech.Recognition.SemanticValue.Value*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticValue.#ctor(System.Object)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: SemanticValue(Object)
  nameWithType: SemanticValue.SemanticValue(Object)
  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(Object)
- uid: System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: SemanticValue(String,Object,Single)
  nameWithType: SemanticValue.SemanticValue(String,Object,Single)
  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(String,Object,Single)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.SemanticValue.Confidence
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Confidence
  nameWithType: SemanticValue.Confidence
  fullName: System.Speech.Recognition.SemanticValue.Confidence
- uid: System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Contains(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.Contains(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.Contains(KeyValuePair<String,SemanticValue>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<String,SemanticValue>
  nameWithType: KeyValuePair<String,SemanticValue>
  fullName: System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Speech.Recognition.SemanticValue
    name: SemanticValue
    nameWithType: SemanticValue
    fullName: SemanticValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SemanticValue.ContainsKey(System.String)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: ContainsKey(String)
  nameWithType: SemanticValue.ContainsKey(String)
  fullName: System.Speech.Recognition.SemanticValue.ContainsKey(String)
- uid: System.Speech.Recognition.SemanticValue.Count
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Count
  nameWithType: SemanticValue.Count
  fullName: System.Speech.Recognition.SemanticValue.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.SemanticValue.Equals(System.Object)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Equals(Object)
  nameWithType: SemanticValue.Equals(Object)
  fullName: System.Speech.Recognition.SemanticValue.Equals(Object)
- uid: System.Speech.Recognition.SemanticValue.GetHashCode
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: GetHashCode()
  nameWithType: SemanticValue.GetHashCode()
  fullName: System.Speech.Recognition.SemanticValue.GetHashCode()
- uid: System.Speech.Recognition.SemanticValue.Item(System.String)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Item(String)
  nameWithType: SemanticValue.Item(String)
  fullName: System.Speech.Recognition.SemanticValue.Item(String)
- uid: System.Speech.Recognition.SemanticValue
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticValue
  nameWithType: SemanticValue
  fullName: System.Speech.Recognition.SemanticValue
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection()
  nameWithType: SemanticValue.System.Collections.Generic.ICollection()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection()
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[]
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<String,SemanticValue>
  nameWithType: KeyValuePair<String,SemanticValue>
  fullName: System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>[]
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>[]
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Speech.Recognition.SemanticValue
    name: SemanticValue
    nameWithType: SemanticValue
    fullName: SemanticValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection
  nameWithType: SemanticValue.System.Collections.Generic.ICollection
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary(String,SemanticValue)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary
- uid: System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary(String)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String)
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary(String,SemanticValue)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary
- uid: System.Collections.Generic.ICollection{System.Speech.Recognition.SemanticValue}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<SemanticValue>
  nameWithType: ICollection<SemanticValue>
  fullName: System.Collections.Generic.ICollection<System.Speech.Recognition.SemanticValue>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Speech.Recognition.SemanticValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.SemanticValue
    name: SemanticValue
    nameWithType: SemanticValue
    fullName: SemanticValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IEnumerable()
  nameWithType: SemanticValue.System.Collections.Generic.IEnumerable()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IEnumerable()
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<KeyValuePair<String,SemanticValue>>
  nameWithType: IEnumerator<KeyValuePair<String,SemanticValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Speech.Recognition.SemanticValue
    name: SemanticValue
    nameWithType: SemanticValue
    fullName: SemanticValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SemanticValue.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Speech.Recognition.SemanticValue.Value
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Value
  nameWithType: SemanticValue.Value
  fullName: System.Speech.Recognition.SemanticValue.Value
- uid: System.Speech.Recognition.SemanticValue.#ctor*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: SemanticValue
  nameWithType: SemanticValue.SemanticValue
- uid: System.Speech.Recognition.SemanticValue.Confidence*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Confidence
  nameWithType: SemanticValue.Confidence
- uid: System.Speech.Recognition.SemanticValue.Contains*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Contains
  nameWithType: SemanticValue.Contains
- uid: System.Speech.Recognition.SemanticValue.ContainsKey*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: ContainsKey
  nameWithType: SemanticValue.ContainsKey
- uid: System.Speech.Recognition.SemanticValue.Count*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Count
  nameWithType: SemanticValue.Count
- uid: System.Speech.Recognition.SemanticValue.Equals*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Equals
  nameWithType: SemanticValue.Equals
- uid: System.Speech.Recognition.SemanticValue.GetHashCode*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: GetHashCode
  nameWithType: SemanticValue.GetHashCode
- uid: System.Speech.Recognition.SemanticValue.Item*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Item
  nameWithType: SemanticValue.Item
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Add*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Add
  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Add
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Clear*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Clear
  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Clear
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#CopyTo*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.CopyTo
  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.CopyTo
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#IsReadOnly*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly
  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Remove*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Remove
  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Remove
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Add*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Add
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Add
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Keys*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Remove*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Remove
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Remove
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#TryGetValue*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.TryGetValue
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.TryGetValue
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Values*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#GetEnumerator*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.GetEnumerator
  nameWithType: SemanticValue.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.GetEnumerator
- uid: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SemanticValue.System.Collections.IEnumerable.GetEnumerator
- uid: System.Speech.Recognition.SemanticValue.Value*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Value
  nameWithType: SemanticValue.Value
