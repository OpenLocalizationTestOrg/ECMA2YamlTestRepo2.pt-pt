### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticValue
  id: SemanticValue
  children:
  - System.Speech.Recognition.SemanticValue.#ctor(System.Object)
  - System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)
  - System.Speech.Recognition.SemanticValue.Confidence
  - System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  - System.Speech.Recognition.SemanticValue.ContainsKey(System.String)
  - System.Speech.Recognition.SemanticValue.Count
  - System.Speech.Recognition.SemanticValue.Equals(System.Object)
  - System.Speech.Recognition.SemanticValue.GetHashCode
  - System.Speech.Recognition.SemanticValue.Item(System.String)
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values
  - System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator
  - System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator
  - System.Speech.Recognition.SemanticValue.Value
  langs:
  - csharp
  name: SemanticValue
  nameWithType: SemanticValue
  fullName: System.Speech.Recognition.SemanticValue
  type: Class
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("'{_keyName}'= {Value}  -  Children = {_dictionary.Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Speech.Recognition.SemanticValue/SemanticValueDebugDisplay))]

      public sealed class SemanticValue : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>>, System.Collections.Generic.IDictionary<string,System.Speech.Recognition.SemanticValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>
  - System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>
  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: SemanticValue(Object)
  nameWithType: SemanticValue.SemanticValue(Object)
  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public SemanticValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)
  id: '#ctor(System.String,System.Object,System.Single)'
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: SemanticValue(String,Object,Single)
  nameWithType: SemanticValue.SemanticValue(String,Object,Single)
  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(String,Object,Single)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public SemanticValue (string keyName, object value, float confidence);
    parameters:
    - id: keyName
      type: System.String
      description: "To be added."
    - id: value
      type: System.Object
      description: "To be added."
    - id: confidence
      type: System.Single
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.Confidence
  id: Confidence
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Confidence
  nameWithType: SemanticValue.Confidence
  fullName: System.Speech.Recognition.SemanticValue.Confidence
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public float Confidence { get; }
    return:
      type: System.Single
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.Confidence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  id: Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Contains(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.Contains(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.Contains(KeyValuePair<String,SemanticValue>)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public bool Contains (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue> item);
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: ContainsKey(String)
  nameWithType: SemanticValue.ContainsKey(String)
  fullName: System.Speech.Recognition.SemanticValue.ContainsKey(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public bool ContainsKey (string key);
    parameters:
    - id: key
      type: System.String
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.ContainsKey*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.Count
  id: Count
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Count
  nameWithType: SemanticValue.Count
  fullName: System.Speech.Recognition.SemanticValue.Count
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SemanticValue.Equals(Object)
  fullName: System.Speech.Recognition.SemanticValue.Equals(Object)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.GetHashCode
  id: GetHashCode
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SemanticValue.GetHashCode()
  fullName: System.Speech.Recognition.SemanticValue.GetHashCode()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.Item(System.String)
  id: Item(System.String)
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Item(String)
  nameWithType: SemanticValue.Item(String)
  fullName: System.Speech.Recognition.SemanticValue.Item(String)
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public System.Speech.Recognition.SemanticValue this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: "To be added."
    return:
      type: System.Speech.Recognition.SemanticValue
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: void ICollection<KeyValuePair<string,SemanticValue>>.Add (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue> key);
    parameters:
    - id: key
      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.ICollection()
  nameWithType: SemanticValue.System.Collections.Generic.ICollection()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: void ICollection<KeyValuePair<string,SemanticValue>>.Clear ();
    parameters: []
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: void ICollection<KeyValuePair<string,SemanticValue>>.CopyTo (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>[] array, int index);
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[]
      description: "To be added."
    - id: index
      type: System.Int32
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.ICollection
  nameWithType: SemanticValue.System.Collections.Generic.ICollection
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: bool ICollection<KeyValuePair<string,SemanticValue>>.Remove (System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue> key);
    parameters:
    - id: key
      type: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)
  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IDictionary(String,SemanticValue)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: void IDictionary<string,SemanticValue>.Add (string key, System.Speech.Recognition.SemanticValue value);
    parameters:
    - id: key
      type: System.String
      description: "To be added."
    - id: value
      type: System.Speech.Recognition.SemanticValue
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys
  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IDictionary
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: System.Collections.Generic.ICollection<string> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys { get; }
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)
  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IDictionary(String)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: bool IDictionary<string,SemanticValue>.Remove (string key);
    parameters:
    - id: key
      type: System.String
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)
  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IDictionary(String,SemanticValue)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: bool IDictionary<string,SemanticValue>.TryGetValue (string key, out System.Speech.Recognition.SemanticValue value);
    parameters:
    - id: key
      type: System.String
      description: "To be added."
    - id: value
      type: System.Speech.Recognition.SemanticValue
      description: "To be added."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#TryGetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values
  id: System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IDictionary
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: System.Collections.Generic.ICollection<System.Speech.Recognition.SemanticValue> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values { get; }
    return:
      type: System.Collections.Generic.ICollection{System.Speech.Recognition.SemanticValue}
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Values*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.Generic.IEnumerable()
  nameWithType: SemanticValue.System.Collections.Generic.IEnumerable()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IEnumerable()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,System.Speech.Recognition.SemanticValue>> IEnumerable<KeyValuePair<string,SemanticValue>>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}}
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SemanticValue.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticValue.Value
  id: Value
  parent: System.Speech.Recognition.SemanticValue
  langs:
  - csharp
  name: Value
  nameWithType: SemanticValue.Value
  fullName: System.Speech.Recognition.SemanticValue.Value
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public object Value { get; }
    return:
      type: System.Object
      description: "To be added."
  overload: System.Speech.Recognition.SemanticValue.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticValue.#ctor(System.Object)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: SemanticValue(Object)
  nameWithType: SemanticValue.SemanticValue(Object)
  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(Object)
- uid: System.Speech.Recognition.SemanticValue.#ctor(System.String,System.Object,System.Single)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: SemanticValue(String,Object,Single)
  nameWithType: SemanticValue.SemanticValue(String,Object,Single)
  fullName: System.Speech.Recognition.SemanticValue.SemanticValue(String,Object,Single)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.SemanticValue.Confidence
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Confidence
  nameWithType: SemanticValue.Confidence
  fullName: System.Speech.Recognition.SemanticValue.Confidence
- uid: System.Speech.Recognition.SemanticValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Contains(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.Contains(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.Contains(KeyValuePair<String,SemanticValue>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<String,SemanticValue>
  nameWithType: KeyValuePair<String,SemanticValue>
  fullName: System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Speech.Recognition.SemanticValue
    name: SemanticValue
    nameWithType: SemanticValue
    fullName: SemanticValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SemanticValue.ContainsKey(System.String)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: ContainsKey(String)
  nameWithType: SemanticValue.ContainsKey(String)
  fullName: System.Speech.Recognition.SemanticValue.ContainsKey(String)
- uid: System.Speech.Recognition.SemanticValue.Count
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Count
  nameWithType: SemanticValue.Count
  fullName: System.Speech.Recognition.SemanticValue.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.SemanticValue.Equals(System.Object)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Equals(Object)
  nameWithType: SemanticValue.Equals(Object)
  fullName: System.Speech.Recognition.SemanticValue.Equals(Object)
- uid: System.Speech.Recognition.SemanticValue.GetHashCode
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: GetHashCode()
  nameWithType: SemanticValue.GetHashCode()
  fullName: System.Speech.Recognition.SemanticValue.GetHashCode()
- uid: System.Speech.Recognition.SemanticValue.Item(System.String)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Item(String)
  nameWithType: SemanticValue.Item(String)
  fullName: System.Speech.Recognition.SemanticValue.Item(String)
- uid: System.Speech.Recognition.SemanticValue
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticValue
  nameWithType: SemanticValue
  fullName: System.Speech.Recognition.SemanticValue
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Clear
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection()
  nameWithType: SemanticValue.System.Collections.Generic.ICollection()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection()
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[],System.Int32)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>,Int32)
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}[]
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<String,SemanticValue>
  nameWithType: KeyValuePair<String,SemanticValue>
  fullName: System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>[]
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>[]
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Speech.Recognition.SemanticValue
    name: SemanticValue
    nameWithType: SemanticValue
    fullName: SemanticValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#IsReadOnly
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection
  nameWithType: SemanticValue.System.Collections.Generic.ICollection
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue})
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  nameWithType: SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.ICollection(KeyValuePair<String,SemanticValue>)
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Add(System.String,System.Speech.Recognition.SemanticValue)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary(String,SemanticValue)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Keys
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary
- uid: System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Remove(System.String)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary(String)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String)
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#TryGetValue(System.String,System.Speech.Recognition.SemanticValue@)
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary(String,SemanticValue)
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary(String,SemanticValue)
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary{System#String,System#Speech#Recognition#SemanticValue}#Values
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IDictionary
- uid: System.Collections.Generic.ICollection{System.Speech.Recognition.SemanticValue}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<SemanticValue>
  nameWithType: ICollection<SemanticValue>
  fullName: System.Collections.Generic.ICollection<System.Speech.Recognition.SemanticValue>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Speech.Recognition.SemanticValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.SemanticValue
    name: SemanticValue
    nameWithType: SemanticValue
    fullName: SemanticValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Speech#Recognition#SemanticValue}}#GetEnumerator
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IEnumerable()
  nameWithType: SemanticValue.System.Collections.Generic.IEnumerable()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.Generic.IEnumerable()
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Speech.Recognition.SemanticValue}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<KeyValuePair<String,SemanticValue>>
  nameWithType: IEnumerator<KeyValuePair<String,SemanticValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Speech.Recognition.SemanticValue
    name: SemanticValue
    nameWithType: SemanticValue
    fullName: SemanticValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SemanticValue.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Speech.Recognition.SemanticValue.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Speech.Recognition.SemanticValue.Value
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Value
  nameWithType: SemanticValue.Value
  fullName: System.Speech.Recognition.SemanticValue.Value
- uid: System.Speech.Recognition.SemanticValue.#ctor*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: SemanticValue
  nameWithType: SemanticValue.SemanticValue
- uid: System.Speech.Recognition.SemanticValue.Confidence*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Confidence
  nameWithType: SemanticValue.Confidence
- uid: System.Speech.Recognition.SemanticValue.Contains*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Contains
  nameWithType: SemanticValue.Contains
- uid: System.Speech.Recognition.SemanticValue.ContainsKey*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: ContainsKey
  nameWithType: SemanticValue.ContainsKey
- uid: System.Speech.Recognition.SemanticValue.Count*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Count
  nameWithType: SemanticValue.Count
- uid: System.Speech.Recognition.SemanticValue.Equals*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Equals
  nameWithType: SemanticValue.Equals
- uid: System.Speech.Recognition.SemanticValue.GetHashCode*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: GetHashCode
  nameWithType: SemanticValue.GetHashCode
- uid: System.Speech.Recognition.SemanticValue.Item*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Item
  nameWithType: SemanticValue.Item
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Add*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Add
  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Add
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Clear*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Clear
  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Clear
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#CopyTo*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.CopyTo
  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.CopyTo
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#IsReadOnly*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly
  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#Remove*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Remove
  nameWithType: SemanticValue.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Remove
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Add*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Add
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Add
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Keys*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Remove*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Remove
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Remove
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#TryGetValue*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.TryGetValue
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.TryGetValue
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IDictionary<System#String,System#Speech#Recognition#SemanticValue>#Values*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values
  nameWithType: SemanticValue.System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values
- uid: System.Speech.Recognition.SemanticValue.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<System#String,System#Speech#Recognition#SemanticValue>>#GetEnumerator*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.GetEnumerator
  nameWithType: SemanticValue.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.GetEnumerator
- uid: System.Speech.Recognition.SemanticValue.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SemanticValue.System.Collections.IEnumerable.GetEnumerator
- uid: System.Speech.Recognition.SemanticValue.Value*
  parent: System.Speech.Recognition.SemanticValue
  isExternal: false
  name: Value
  nameWithType: SemanticValue.Value
