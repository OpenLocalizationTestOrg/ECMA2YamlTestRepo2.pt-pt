### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.ServiceSecurityContext
  id: ServiceSecurityContext
  children:
  - System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  - System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)
  - System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  - System.ServiceModel.ServiceSecurityContext.Anonymous
  - System.ServiceModel.ServiceSecurityContext.AuthorizationContext
  - System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies
  - System.ServiceModel.ServiceSecurityContext.Current
  - System.ServiceModel.ServiceSecurityContext.IsAnonymous
  - System.ServiceModel.ServiceSecurityContext.PrimaryIdentity
  - System.ServiceModel.ServiceSecurityContext.WindowsIdentity
  langs:
  - csharp
  name: ServiceSecurityContext
  nameWithType: ServiceSecurityContext
  fullName: System.ServiceModel.ServiceSecurityContext
  type: Class
  summary: "Representa o contexto de segurança de uma parte remota. No cliente, representa a identidade de serviço e, em serviço, representa a identidade do cliente."
  remarks: "The data is part of the <xref:System.ServiceModel.Security.SecurityMessageProperty> for a message.  \n  \n Use this class to obtain information about a remote *security context* at runtime. A security context is created when a client is successfully authenticated and authorized to access a method. When a message is successfully authenticated and authorized, the security information from the client and for the current service instance can be obtained from an instance of this class.  \n  \n You can retrieve an instance of the ServiceSecurityContext from the <xref:System.ServiceModel.OperationContext.Current%2A> property of the <xref:System.ServiceModel.OperationContext> class, or use it from within a service operation method, as shown in the following example.  \n  \n## Parsing a ClaimSet  \n A common use of the class is to retrieve the current set of claims for the purpose of identifying or authorizing a client when accessing a method. The <xref:System.IdentityModel.Claims.ClaimSet> class contains a collection of <xref:System.IdentityModel.Claims.Claim> objects, and each can be parsed to determine whether a specific claim is present. If the specified claim is provided, authorization can be granted. This functionality is provided by overriding the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method of the <xref:System.ServiceModel.ServiceAuthorizationManager> class.  For a complete example, see the [Authorization Policy](~/add/includes/ajax-current-ext-md.md).  \n  \n## Cookie Mode and IsAuthenticated  \n Note that under some circumstances, the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A> property of the <xref:System.Security.Principal.IIdentity> interface returns `true` even if the remote client is authenticated as an anonymous user. (The <xref:System.ServiceModel.ServiceSecurityContext.PrimaryIdentity%2A> property returns an implementation of the <xref:System.Security.Principal.IIdentity> interface.) The following circumstances must be true for this to occur:  \n  \n-   The service uses Windows authentication.  \n  \n-   The service allows anonymous logons.  \n  \n-   The binding is a [\\&lt;customBinding\\&gt;](../Topic/%3CcustomBinding%3E.md).  \n  \n-   The custom binding includes a `<security>` element.  \n  \n-   The `<security>` element includes a [\\&lt;secureConversationBootstrap\\&gt;](../Topic/%3CsecureConversationBootstrap%3E.md) with the `requireSecurityContextCancellation` attribute set to `false`."
  example:
  - "The following example uses the ServiceSecurityContext class to provide information about the current security context. The code creates an instance of the <xref:System.IO.StreamWriter> class to write the information to a file.  \n  \n [!code-vb[ServiceSecurityContext#1](~/add/codesnippet/visualbasic/t-system.servicemodel.se_2_1.vb)]\n [!code-cs[ServiceSecurityContext#1](~/add/codesnippet/csharp/t-system.servicemodel.se_2_1.cs)]  \n  \n The following example shows an implementation of the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method that uses the ServiceSecurityContext to parse a set of claims.  \n  \n [!code-vb[ServiceSecurityContext#2](~/add/codesnippet/visualbasic/t-system.servicemodel.se_2_2.vb)]\n [!code-cs[ServiceSecurityContext#2](~/add/codesnippet/csharp/t-system.servicemodel.se_2_2.cs)]"
  syntax:
    content: public class ServiceSecurityContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})'
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;> </xref> classe com a coleção de objetos de políticas."
  remarks: "Este construtor utiliza o motor de encadeamento de política predefinido."
  syntax:
    content: public ServiceSecurityContext (System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authorizationPolicies);
    parameters:
    - id: authorizationPolicies
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; do tipo <xref href=&quot;System.IdentityModel.Policy.IAuthorizationPolicy&quot;> </xref> que contém as políticas de autorização."
  overload: System.ServiceModel.ServiceSecurityContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)
  id: '#ctor(System.IdentityModel.Policy.AuthorizationContext)'
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: ServiceSecurityContext(AuthorizationContext)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;> </xref> classe com os parâmetros de autorização especificada."
  remarks: "Este construtor é normalmente utilizado em cenários em que uma aplicação é executada a sua própria motor encadeamento de política, o que resulta em <xref:System.IdentityModel.Policy.AuthorizationContext>.</xref:System.IdentityModel.Policy.AuthorizationContext> Para o motor de política predefinido, utilize os construtores que recolhem uma coleção de <xref:System.IdentityModel.Policy.IAuthorizationPolicy>como parâmetro.</xref:System.IdentityModel.Policy.IAuthorizationPolicy>"
  syntax:
    content: public ServiceSecurityContext (System.IdentityModel.Policy.AuthorizationContext authorizationContext);
    parameters:
    - id: authorizationContext
      type: System.IdentityModel.Policy.AuthorizationContext
      description: "Um <xref href=&quot;System.IdentityModel.Policy.AuthorizationContext&quot;> </xref> que contém informações de autorização."
  overload: System.ServiceModel.ServiceSecurityContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  id: '#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})'
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;> </xref> classe com os parâmetros de autorização especificada e a coleção de políticas."
  syntax:
    content: public ServiceSecurityContext (System.IdentityModel.Policy.AuthorizationContext authorizationContext, System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authorizationPolicies);
    parameters:
    - id: authorizationContext
      type: System.IdentityModel.Policy.AuthorizationContext
      description: "Um <xref href=&quot;System.IdentityModel.Policy.AuthorizationContext&quot;> </xref> que contém as definições de autorização."
    - id: authorizationPolicies
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; do tipo <xref href=&quot;System.IdentityModel.Policy.IAuthorizationPolicy&quot;> </xref> que contém as políticas de autorização."
  overload: System.ServiceModel.ServiceSecurityContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.Anonymous
  id: Anonymous
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: Anonymous
  nameWithType: ServiceSecurityContext.Anonymous
  fullName: System.ServiceModel.ServiceSecurityContext.Anonymous
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Devolve uma instância do <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;> </xref> classe que contém uma coleção vazia de afirmações, identidades e outros dados de contexto que, normalmente, são utilizados para representar uma entidade anónima."
  syntax:
    content: public static System.ServiceModel.ServiceSecurityContext Anonymous { get; }
    return:
      type: System.ServiceModel.ServiceSecurityContext
      description: "Uma instância vazia do <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;> </xref>."
  overload: System.ServiceModel.ServiceSecurityContext.Anonymous*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationContext
  id: AuthorizationContext
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: AuthorizationContext
  nameWithType: ServiceSecurityContext.AuthorizationContext
  fullName: System.ServiceModel.ServiceSecurityContext.AuthorizationContext
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém as informações de autorização para uma instância desta classe.  O <xref href=&quot;System.IdentityModel.Policy.AuthorizationContext&quot;> </xref> contém uma coleção de <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref> que a aplicação pode interrogate e obter as informações de terceiros."
  syntax:
    content: public System.IdentityModel.Policy.AuthorizationContext AuthorizationContext { get; }
    return:
      type: System.IdentityModel.Policy.AuthorizationContext
      description: "Um <xref href=&quot;System.IdentityModel.Policy.AuthorizationContext&quot;> </xref> que contém as definições de autorização."
  overload: System.ServiceModel.ServiceSecurityContext.AuthorizationContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies
  id: AuthorizationPolicies
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: AuthorizationPolicies
  nameWithType: ServiceSecurityContext.AuthorizationPolicies
  fullName: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém a coleção de políticas associado uma instância desta classe."
  remarks: ''
  example:
  - '[Managing Claims and Authorization with the Identity Model](~/add/includes/ajax-current-ext-md.md)'
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> AuthorizationPolicies { get; set; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; do tipo <xref href=&quot;System.IdentityModel.Policy.IAuthorizationPolicy&quot;> </xref> que contém as políticas."
  overload: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.Current
  id: Current
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: Current
  nameWithType: ServiceSecurityContext.Current
  fullName: System.ServiceModel.ServiceSecurityContext.Current
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém atual <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;> </xref>."
  syntax:
    content: public static System.ServiceModel.ServiceSecurityContext Current { get; }
    return:
      type: System.ServiceModel.ServiceSecurityContext
      description: "Atual <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;> </xref>."
  overload: System.ServiceModel.ServiceSecurityContext.Current*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.IsAnonymous
  id: IsAnonymous
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: IsAnonymous
  nameWithType: ServiceSecurityContext.IsAnonymous
  fullName: System.ServiceModel.ServiceSecurityContext.IsAnonymous
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém um valor que indica se o cliente atual forneceu as credenciais para o serviço."
  syntax:
    content: public bool IsAnonymous { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o cliente forneceu as credenciais; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.ServiceSecurityContext.IsAnonymous*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity
  id: PrimaryIdentity
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: PrimaryIdentity
  nameWithType: ServiceSecurityContext.PrimaryIdentity
  fullName: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém a identidade primária associada à definição atual."
  remarks: "A identidade principal é obtida a partir das credenciais utilizadas para autenticar o utilizador atual. Se a credencial é um certificado x.&509;, a identidade é uma concatenação de nome do requerente e thumbprint (por essa ordem). O nome do requerente é independente do thumbprint com um ponto e vírgula e um espaço. Se o campo de requerente do certificado é `null`, a identidade primária inclui apenas um ponto e vírgula, um espaço e o thumbprint.       Quando é utilizado um padrão de exchange duplex mensagem com a autenticação Kerberos direta, esta propriedade torna-se vazio na chamada de retorno e o claimset também está vazio. Tal não acontecer quando *SspiNegotiated* é utilizado em vez de Kerberos.       O Token de autor do pedido do Kerberos é utilizado apenas no cliente para representar o serviço. A política de autorização que gera contém uma afirmação, um SPN; Por conseguinte, não identidade na afirmação. Na maioria dos casos, não é nenhum problema porque <xref:System.ServiceModel.ServiceSecurityContext>não é utilizado no cliente.</xref:System.ServiceModel.ServiceSecurityContext> Num cenário durante a chamada de retorno duplex, se a chamada de retorno inspeciona esta propriedade, obtém uma identidade anónima."
  example:
  - 'For an example of using the `PrimaryIdentity` property to authorize a client using a certificate, see [How to: Examine the Security Context](~/add/includes/ajax-current-ext-md.md).'
  syntax:
    content: public System.Security.Principal.IIdentity PrimaryIdentity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "Um <xref:System.Security.Principal.IIdentity>associada com a definição atual.</xref:System.Security.Principal.IIdentity>"
  overload: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.WindowsIdentity
  id: WindowsIdentity
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: WindowsIdentity
  nameWithType: ServiceSecurityContext.WindowsIdentity
  fullName: System.ServiceModel.ServiceSecurityContext.WindowsIdentity
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém a identidade do Windows a definição atual."
  remarks: "Se o interveniente remoto não pode ser associado uma conta do Windows, o <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>propriedade está definida como `true`.</xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>"
  example:
  - "<xref:System.Security.Permissions.PrincipalPermissionAttribute>  \n  \n <xref:System.Security.Principal.IPrincipal>"
  syntax:
    content: public System.Security.Principal.WindowsIdentity WindowsIdentity { get; }
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "A <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> que representa o utilizador de domínio do Windows."
  overload: System.ServiceModel.ServiceSecurityContext.WindowsIdentity*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<IAuthorizationPolicy>
  nameWithType: ReadOnlyCollection<IAuthorizationPolicy>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: IAuthorizationPolicy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: ServiceSecurityContext(AuthorizationContext)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext)
- uid: System.IdentityModel.Policy.AuthorizationContext
  parent: System.IdentityModel.Policy
  isExternal: false
  name: AuthorizationContext
  nameWithType: AuthorizationContext
  fullName: System.IdentityModel.Policy.AuthorizationContext
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
- uid: System.ServiceModel.ServiceSecurityContext.Anonymous
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: Anonymous
  nameWithType: ServiceSecurityContext.Anonymous
  fullName: System.ServiceModel.ServiceSecurityContext.Anonymous
- uid: System.ServiceModel.ServiceSecurityContext
  parent: System.ServiceModel
  isExternal: false
  name: ServiceSecurityContext
  nameWithType: ServiceSecurityContext
  fullName: System.ServiceModel.ServiceSecurityContext
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationContext
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: AuthorizationContext
  nameWithType: ServiceSecurityContext.AuthorizationContext
  fullName: System.ServiceModel.ServiceSecurityContext.AuthorizationContext
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: AuthorizationPolicies
  nameWithType: ServiceSecurityContext.AuthorizationPolicies
  fullName: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies
- uid: System.ServiceModel.ServiceSecurityContext.Current
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: Current
  nameWithType: ServiceSecurityContext.Current
  fullName: System.ServiceModel.ServiceSecurityContext.Current
- uid: System.ServiceModel.ServiceSecurityContext.IsAnonymous
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: IsAnonymous
  nameWithType: ServiceSecurityContext.IsAnonymous
  fullName: System.ServiceModel.ServiceSecurityContext.IsAnonymous
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: PrimaryIdentity
  nameWithType: ServiceSecurityContext.PrimaryIdentity
  fullName: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.ServiceModel.ServiceSecurityContext.WindowsIdentity
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: WindowsIdentity
  nameWithType: ServiceSecurityContext.WindowsIdentity
  fullName: System.ServiceModel.ServiceSecurityContext.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: System.ServiceModel.ServiceSecurityContext.#ctor*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: ServiceSecurityContext
  nameWithType: ServiceSecurityContext.ServiceSecurityContext
- uid: System.ServiceModel.ServiceSecurityContext.Anonymous*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: Anonymous
  nameWithType: ServiceSecurityContext.Anonymous
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationContext*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: AuthorizationContext
  nameWithType: ServiceSecurityContext.AuthorizationContext
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: AuthorizationPolicies
  nameWithType: ServiceSecurityContext.AuthorizationPolicies
- uid: System.ServiceModel.ServiceSecurityContext.Current*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: Current
  nameWithType: ServiceSecurityContext.Current
- uid: System.ServiceModel.ServiceSecurityContext.IsAnonymous*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: IsAnonymous
  nameWithType: ServiceSecurityContext.IsAnonymous
- uid: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: PrimaryIdentity
  nameWithType: ServiceSecurityContext.PrimaryIdentity
- uid: System.ServiceModel.ServiceSecurityContext.WindowsIdentity*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: WindowsIdentity
  nameWithType: ServiceSecurityContext.WindowsIdentity
