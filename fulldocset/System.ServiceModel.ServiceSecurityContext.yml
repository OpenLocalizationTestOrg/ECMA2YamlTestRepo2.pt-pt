### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.ServiceSecurityContext
  id: ServiceSecurityContext
  children:
  - System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  - System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)
  - System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  - System.ServiceModel.ServiceSecurityContext.Anonymous
  - System.ServiceModel.ServiceSecurityContext.AuthorizationContext
  - System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies
  - System.ServiceModel.ServiceSecurityContext.Current
  - System.ServiceModel.ServiceSecurityContext.IsAnonymous
  - System.ServiceModel.ServiceSecurityContext.PrimaryIdentity
  - System.ServiceModel.ServiceSecurityContext.WindowsIdentity
  langs:
  - csharp
  name: ServiceSecurityContext
  nameWithType: ServiceSecurityContext
  fullName: System.ServiceModel.ServiceSecurityContext
  type: Class
  summary: "Represents the security context of a remote party. On the client, represents the service identity and, on the service, represents the client identity."
  remarks: "The data is part of the <xref:System.ServiceModel.Security.SecurityMessageProperty> for a message.  \n  \n Use this class to obtain information about a remote *security context* at runtime. A security context is created when a client is successfully authenticated and authorized to access a method. When a message is successfully authenticated and authorized, the security information from the client and for the current service instance can be obtained from an instance of this class.  \n  \n You can retrieve an instance of the ServiceSecurityContext from the <xref:System.ServiceModel.OperationContext.Current%2A> property of the <xref:System.ServiceModel.OperationContext> class, or use it from within a service operation method, as shown in the following example.  \n  \n## Parsing a ClaimSet  \n A common use of the class is to retrieve the current set of claims for the purpose of identifying or authorizing a client when accessing a method. The <xref:System.IdentityModel.Claims.ClaimSet> class contains a collection of <xref:System.IdentityModel.Claims.Claim> objects, and each can be parsed to determine whether a specific claim is present. If the specified claim is provided, authorization can be granted. This functionality is provided by overriding the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method of the <xref:System.ServiceModel.ServiceAuthorizationManager> class.  For a complete example, see the [Authorization Policy](~/add/includes/ajax-current-ext-md.md).  \n  \n## Cookie Mode and IsAuthenticated  \n Note that under some circumstances, the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A> property of the <xref:System.Security.Principal.IIdentity> interface returns `true` even if the remote client is authenticated as an anonymous user. (The <xref:System.ServiceModel.ServiceSecurityContext.PrimaryIdentity%2A> property returns an implementation of the <xref:System.Security.Principal.IIdentity> interface.) The following circumstances must be true for this to occur:  \n  \n-   The service uses Windows authentication.  \n  \n-   The service allows anonymous logons.  \n  \n-   The binding is a [\\&lt;customBinding\\&gt;](../Topic/%3CcustomBinding%3E.md).  \n  \n-   The custom binding includes a `<security>` element.  \n  \n-   The `<security>` element includes a [\\&lt;secureConversationBootstrap\\&gt;](../Topic/%3CsecureConversationBootstrap%3E.md) with the `requireSecurityContextCancellation` attribute set to `false`."
  example:
  - "The following example uses the ServiceSecurityContext class to provide information about the current security context. The code creates an instance of the <xref:System.IO.StreamWriter> class to write the information to a file.  \n  \n [!code-vb[ServiceSecurityContext#1](~/add/codesnippet/visualbasic/t-system.servicemodel.se_2_1.vb)]\n [!code-cs[ServiceSecurityContext#1](~/add/codesnippet/csharp/t-system.servicemodel.se_2_1.cs)]  \n  \n The following example shows an implementation of the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method that uses the ServiceSecurityContext to parse a set of claims.  \n  \n [!code-vb[ServiceSecurityContext#2](~/add/codesnippet/visualbasic/t-system.servicemodel.se_2_2.vb)]\n [!code-cs[ServiceSecurityContext#2](~/add/codesnippet/csharp/t-system.servicemodel.se_2_2.cs)]"
  syntax:
    content: public class ServiceSecurityContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})'
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;></xref> class with the collection of policies object."
  remarks: "This constructor uses the default policy-chaining engine."
  syntax:
    content: public ServiceSecurityContext (System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authorizationPolicies);
    parameters:
    - id: authorizationPolicies
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of type <xref href=&quot;System.IdentityModel.Policy.IAuthorizationPolicy&quot;></xref> that contains the authorization policies."
  overload: System.ServiceModel.ServiceSecurityContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)
  id: '#ctor(System.IdentityModel.Policy.AuthorizationContext)'
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: ServiceSecurityContext(AuthorizationContext)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;></xref> class with the specified authorization parameters."
  remarks: "This constructor is typically used in scenarios where an application runs its own policy-chaining engine, which results in an <xref:System.IdentityModel.Policy.AuthorizationContext>. For the default policy engine, use the constructors that take a collection of <xref:System.IdentityModel.Policy.IAuthorizationPolicy> as parameter."
  syntax:
    content: public ServiceSecurityContext (System.IdentityModel.Policy.AuthorizationContext authorizationContext);
    parameters:
    - id: authorizationContext
      type: System.IdentityModel.Policy.AuthorizationContext
      description: "An <xref href=&quot;System.IdentityModel.Policy.AuthorizationContext&quot;></xref> that contains authorization information."
  overload: System.ServiceModel.ServiceSecurityContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  id: '#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})'
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;></xref> class with the specified authorization parameters and collection of policies."
  syntax:
    content: public ServiceSecurityContext (System.IdentityModel.Policy.AuthorizationContext authorizationContext, System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> authorizationPolicies);
    parameters:
    - id: authorizationContext
      type: System.IdentityModel.Policy.AuthorizationContext
      description: "An <xref href=&quot;System.IdentityModel.Policy.AuthorizationContext&quot;></xref> that contains authorization settings."
    - id: authorizationPolicies
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of type <xref href=&quot;System.IdentityModel.Policy.IAuthorizationPolicy&quot;></xref> that contains the authorization policies."
  overload: System.ServiceModel.ServiceSecurityContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.Anonymous
  id: Anonymous
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: Anonymous
  nameWithType: ServiceSecurityContext.Anonymous
  fullName: System.ServiceModel.ServiceSecurityContext.Anonymous
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Returns an instance of the <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;></xref> class that contains an empty collection of claims, identities, and other context data that is usually used to represent an anonymous party."
  syntax:
    content: public static System.ServiceModel.ServiceSecurityContext Anonymous { get; }
    return:
      type: System.ServiceModel.ServiceSecurityContext
      description: "An empty instance of the <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;></xref>."
  overload: System.ServiceModel.ServiceSecurityContext.Anonymous*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationContext
  id: AuthorizationContext
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: AuthorizationContext
  nameWithType: ServiceSecurityContext.AuthorizationContext
  fullName: System.ServiceModel.ServiceSecurityContext.AuthorizationContext
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Gets the authorization information for an instance of this class.  The <xref href=&quot;System.IdentityModel.Policy.AuthorizationContext&quot;></xref> contains a collection of <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref> that the application can interrogate and retrieve the information of the party."
  syntax:
    content: public System.IdentityModel.Policy.AuthorizationContext AuthorizationContext { get; }
    return:
      type: System.IdentityModel.Policy.AuthorizationContext
      description: "An <xref href=&quot;System.IdentityModel.Policy.AuthorizationContext&quot;></xref> that contains the authorization settings."
  overload: System.ServiceModel.ServiceSecurityContext.AuthorizationContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies
  id: AuthorizationPolicies
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: AuthorizationPolicies
  nameWithType: ServiceSecurityContext.AuthorizationPolicies
  fullName: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Gets the collection of policies associated with an instance of this class."
  remarks: ''
  example:
  - '[Managing Claims and Authorization with the Identity Model](~/add/includes/ajax-current-ext-md.md)'
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> AuthorizationPolicies { get; set; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of type <xref href=&quot;System.IdentityModel.Policy.IAuthorizationPolicy&quot;></xref> that contains the policies."
  overload: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.Current
  id: Current
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: Current
  nameWithType: ServiceSecurityContext.Current
  fullName: System.ServiceModel.ServiceSecurityContext.Current
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Gets the current <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;></xref>."
  syntax:
    content: public static System.ServiceModel.ServiceSecurityContext Current { get; }
    return:
      type: System.ServiceModel.ServiceSecurityContext
      description: "The current <xref href=&quot;System.ServiceModel.ServiceSecurityContext&quot;></xref>."
  overload: System.ServiceModel.ServiceSecurityContext.Current*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.IsAnonymous
  id: IsAnonymous
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: IsAnonymous
  nameWithType: ServiceSecurityContext.IsAnonymous
  fullName: System.ServiceModel.ServiceSecurityContext.IsAnonymous
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Gets a value that indicates whether the current client has provided credentials to the service."
  syntax:
    content: public bool IsAnonymous { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the client has provided credentials; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ServiceModel.ServiceSecurityContext.IsAnonymous*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity
  id: PrimaryIdentity
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: PrimaryIdentity
  nameWithType: ServiceSecurityContext.PrimaryIdentity
  fullName: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Gets the primary identity associated with the current setting."
  remarks: "The primary identity is obtained from the credentials used to authenticate the current user. If the credential is an X.509 certificate, the identity is a concatenation of the subject name and the thumbprint (in that order). The subject name is separated from the thumbprint with a semicolon and a space. If the subject field of the certificate is `null`, the primary identity includes just a semicolon, a space, and the thumbprint.       When a duplex message exchange pattern is used with Kerberos direct authentication, this property becomes empty on the callback and the claimset is also empty. This does not happen when *SspiNegotiated* is used instead of Kerberos.       The Kerberos Requester Token is used only on the client to represent the service. The authorization policy that it generates contains one claim, an SPN; hence, no identity in the claim. In most cases there is no problem, because <xref:System.ServiceModel.ServiceSecurityContext> is not used on the client. In a duplex scenario during callback, if the callback inspects this property, it gets an anonymous identity."
  example:
  - 'For an example of using the `PrimaryIdentity` property to authorize a client using a certificate, see [How to: Examine the Security Context](~/add/includes/ajax-current-ext-md.md).'
  syntax:
    content: public System.Security.Principal.IIdentity PrimaryIdentity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "An <xref:System.Security.Principal.IIdentity> associated with the current setting."
  overload: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceSecurityContext.WindowsIdentity
  id: WindowsIdentity
  parent: System.ServiceModel.ServiceSecurityContext
  langs:
  - csharp
  name: WindowsIdentity
  nameWithType: ServiceSecurityContext.WindowsIdentity
  fullName: System.ServiceModel.ServiceSecurityContext.WindowsIdentity
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Gets the Windows identity of the current setting."
  remarks: "If the remote party cannot be associated with a Windows account, the <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> property is set to `true`."
  example:
  - "<xref:System.Security.Permissions.PrincipalPermissionAttribute>  \n  \n <xref:System.Security.Principal.IPrincipal>"
  syntax:
    content: public System.Security.Principal.WindowsIdentity WindowsIdentity { get; }
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "A <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref> that represents the Windows domain user."
  overload: System.ServiceModel.ServiceSecurityContext.WindowsIdentity*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<IAuthorizationPolicy>
  nameWithType: ReadOnlyCollection<IAuthorizationPolicy>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: IAuthorizationPolicy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: ServiceSecurityContext(AuthorizationContext)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext)
- uid: System.IdentityModel.Policy.AuthorizationContext
  parent: System.IdentityModel.Policy
  isExternal: false
  name: AuthorizationContext
  nameWithType: AuthorizationContext
  fullName: System.IdentityModel.Policy.AuthorizationContext
- uid: System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
  fullName: System.ServiceModel.ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext,ReadOnlyCollection<IAuthorizationPolicy>)
- uid: System.ServiceModel.ServiceSecurityContext.Anonymous
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: Anonymous
  nameWithType: ServiceSecurityContext.Anonymous
  fullName: System.ServiceModel.ServiceSecurityContext.Anonymous
- uid: System.ServiceModel.ServiceSecurityContext
  parent: System.ServiceModel
  isExternal: false
  name: ServiceSecurityContext
  nameWithType: ServiceSecurityContext
  fullName: System.ServiceModel.ServiceSecurityContext
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationContext
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: AuthorizationContext
  nameWithType: ServiceSecurityContext.AuthorizationContext
  fullName: System.ServiceModel.ServiceSecurityContext.AuthorizationContext
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: AuthorizationPolicies
  nameWithType: ServiceSecurityContext.AuthorizationPolicies
  fullName: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies
- uid: System.ServiceModel.ServiceSecurityContext.Current
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: Current
  nameWithType: ServiceSecurityContext.Current
  fullName: System.ServiceModel.ServiceSecurityContext.Current
- uid: System.ServiceModel.ServiceSecurityContext.IsAnonymous
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: IsAnonymous
  nameWithType: ServiceSecurityContext.IsAnonymous
  fullName: System.ServiceModel.ServiceSecurityContext.IsAnonymous
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: PrimaryIdentity
  nameWithType: ServiceSecurityContext.PrimaryIdentity
  fullName: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.ServiceModel.ServiceSecurityContext.WindowsIdentity
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: WindowsIdentity
  nameWithType: ServiceSecurityContext.WindowsIdentity
  fullName: System.ServiceModel.ServiceSecurityContext.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: System.ServiceModel.ServiceSecurityContext.#ctor*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: ServiceSecurityContext
  nameWithType: ServiceSecurityContext.ServiceSecurityContext
- uid: System.ServiceModel.ServiceSecurityContext.Anonymous*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: Anonymous
  nameWithType: ServiceSecurityContext.Anonymous
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationContext*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: AuthorizationContext
  nameWithType: ServiceSecurityContext.AuthorizationContext
- uid: System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: AuthorizationPolicies
  nameWithType: ServiceSecurityContext.AuthorizationPolicies
- uid: System.ServiceModel.ServiceSecurityContext.Current*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: Current
  nameWithType: ServiceSecurityContext.Current
- uid: System.ServiceModel.ServiceSecurityContext.IsAnonymous*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: IsAnonymous
  nameWithType: ServiceSecurityContext.IsAnonymous
- uid: System.ServiceModel.ServiceSecurityContext.PrimaryIdentity*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: PrimaryIdentity
  nameWithType: ServiceSecurityContext.PrimaryIdentity
- uid: System.ServiceModel.ServiceSecurityContext.WindowsIdentity*
  parent: System.ServiceModel.ServiceSecurityContext
  isExternal: false
  name: WindowsIdentity
  nameWithType: ServiceSecurityContext.WindowsIdentity
