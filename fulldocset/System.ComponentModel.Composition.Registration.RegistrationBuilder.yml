### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder
  id: RegistrationBuilder
  children:
  - System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor
  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(System.Type)
  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType``1
  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(System.Type)
  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom``1
  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(System.Predicate{System.Type})
  - System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching``1(System.Predicate{System.``0ype})
  - System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  - System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  langs:
  - csharp
  name: RegistrationBuilder
  nameWithType: RegistrationBuilder
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder
  type: Class
  summary: "Representa um contexto de reflexão que associou convenções que descrevem as regras para entidades decorating com atributos de estrutura de extensibilidade geridos (MEF)."
  syntax:
    content: 'public class RegistrationBuilder : System.Reflection.Context.CustomReflectionContext'
  inheritance:
  - System.Reflection.ReflectionContext
  - System.Reflection.Context.CustomReflectionContext
  implements: []
  inheritedMembers:
  - System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  - System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  - System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor
  id: '#ctor'
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  langs:
  - csharp
  name: RegistrationBuilder()
  nameWithType: RegistrationBuilder.RegistrationBuilder()
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.RegistrationBuilder()
  type: Constructor
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.Composition.Registration.RegistrationBuilder&quot;> </xref> classe."
  syntax:
    content: public RegistrationBuilder ();
    parameters: []
  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(System.Type)
  id: ForType(System.Type)
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  langs:
  - csharp
  name: ForType(Type)
  nameWithType: RegistrationBuilder.ForType(Type)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(Type)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: "Obtém um objecto que representa uma regra aplicável ao tipo especificado."
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ForType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: "Um objeto que representa a regra."
  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType``1
  id: ForType``1
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  langs:
  - csharp
  name: ForType()
  nameWithType: RegistrationBuilder.ForType()
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType()
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ForType<T> ();
    parameters: []
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "A adicionar."
  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType<T>*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(System.Type)
  id: ForTypesDerivedFrom(System.Type)
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  langs:
  - csharp
  name: ForTypesDerivedFrom(Type)
  nameWithType: RegistrationBuilder.ForTypesDerivedFrom(Type)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(Type)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: "Obtém um objecto que representa uma regra aplica-se a todos os tipos que implementam o tipo especificado, mas não é aplicável ao tipo especificado."
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ForTypesDerivedFrom (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: "Um objeto que representa a regra."
  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom``1
  id: ForTypesDerivedFrom``1
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  langs:
  - csharp
  name: ForTypesDerivedFrom()
  nameWithType: RegistrationBuilder.ForTypesDerivedFrom()
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom()
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ForTypesDerivedFrom<T> ();
    parameters: []
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "A adicionar."
  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom<T>*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(System.Predicate{System.Type})
  id: ForTypesMatching(System.Predicate{System.Type})
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  langs:
  - csharp
  name: ForTypesMatching(Predicate<Type>)
  nameWithType: RegistrationBuilder.ForTypesMatching(Predicate<Type>)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(Predicate<Type>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: "Obtém um objecto que representa uma regra aplica-se a todos os tipos que correspondem o predicado especificado."
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ForTypesMatching (Predicate<Type> typeFilter);
    parameters:
    - id: typeFilter
      type: System.Predicate{System.Type}
      description: "O predicado para corresponder."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: "Um objeto que representa a regra."
  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching``1(System.Predicate{System.``0ype})
  id: ForTypesMatching``1(System.Predicate{System.``0ype})
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  langs:
  - csharp
  name: ForTypesMatching(Predicate<Type>)
  nameWithType: RegistrationBuilder.ForTypesMatching(Predicate<Type>)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(Predicate<Type>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder<T> ForTypesMatching<T> (Predicate<Type> typeFilter);
    parameters:
    - id: typeFilter
      type: System.Predicate{System.Type}
      description: "A adicionar."
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder`1
      description: "A adicionar."
  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching<T>*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  langs:
  - csharp
  name: GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  nameWithType: RegistrationBuilder.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: "Fornece uma lista de atributos personalizados para o membro especificado, conforme representado neste contexto de reflexão."
  syntax:
    content: protected override System.Collections.Generic.IEnumerable<object> GetCustomAttributes (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<object> declaredAttributes);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "O membro cujos atributos personalizados que vai ser devolvidos."
    - id: declaredAttributes
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "Uma coleção de atributos do membro no respetivo contexto atual."
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "Uma coleção que representa os atributos personalizados do membro especificado neste contexto de reflexão."
  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  langs:
  - csharp
  name: GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  nameWithType: RegistrationBuilder.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: "Fornece uma lista de atributos personalizados para o parâmetro especificado, conforme representado neste contexto de reflexão."
  syntax:
    content: protected override System.Collections.Generic.IEnumerable<object> GetCustomAttributes (System.Reflection.ParameterInfo parameter, System.Collections.Generic.IEnumerable<object> declaredAttributes);
    parameters:
    - id: parameter
      type: System.Reflection.ParameterInfo
      description: "O parâmetro cujos atributos personalizados que vai ser devolvidos."
    - id: declaredAttributes
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "Uma coleção de atributos de parâmetro no respetivo contexto atual."
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "Uma coleção que representa os atributos personalizados do parâmetro especificado neste contexto de reflexão."
  overload: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: System.Reflection.Context.CustomReflectionContext
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: RegistrationBuilder()
  nameWithType: RegistrationBuilder.RegistrationBuilder()
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.RegistrationBuilder()
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(System.Type)
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForType(Type)
  nameWithType: RegistrationBuilder.ForType(Type)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(Type)
- uid: System.ComponentModel.Composition.Registration.PartBuilder
  parent: System.ComponentModel.Composition.Registration
  isExternal: false
  name: PartBuilder
  nameWithType: PartBuilder
  fullName: System.ComponentModel.Composition.Registration.PartBuilder
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType``1
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForType()
  nameWithType: RegistrationBuilder.ForType()
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType()
- uid: System.ComponentModel.Composition.Registration.PartBuilder`1
  parent: System.ComponentModel.Composition.Registration
  isExternal: false
  name: PartBuilder<T>
  nameWithType: PartBuilder<T>
  fullName: System.ComponentModel.Composition.Registration.PartBuilder<T>
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(System.Type)
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForTypesDerivedFrom(Type)
  nameWithType: RegistrationBuilder.ForTypesDerivedFrom(Type)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(Type)
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom``1
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForTypesDerivedFrom()
  nameWithType: RegistrationBuilder.ForTypesDerivedFrom()
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom()
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(System.Predicate{System.Type})
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForTypesMatching(Predicate<Type>)
  nameWithType: RegistrationBuilder.ForTypesMatching(Predicate<Type>)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(Predicate<Type>)
- uid: System.Predicate{System.Type}
  parent: System
  isExternal: true
  name: Predicate<Type>
  nameWithType: Predicate<Type>
  fullName: System.Predicate<System.Type>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching``1(System.Predicate{System.``0ype})
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForTypesMatching(Predicate<Type>)
  nameWithType: RegistrationBuilder.ForTypesMatching(Predicate<Type>)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(Predicate<Type>)
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  nameWithType: RegistrationBuilder.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
- uid: System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  nameWithType: RegistrationBuilder.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  fullName: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: true
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor*
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: RegistrationBuilder
  nameWithType: RegistrationBuilder.RegistrationBuilder
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType*
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForType
  nameWithType: RegistrationBuilder.ForType
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType<T>*
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForType<T>
  nameWithType: RegistrationBuilder.ForType<T>
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom*
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForTypesDerivedFrom
  nameWithType: RegistrationBuilder.ForTypesDerivedFrom
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom<T>*
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForTypesDerivedFrom<T>
  nameWithType: RegistrationBuilder.ForTypesDerivedFrom<T>
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching*
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForTypesMatching
  nameWithType: RegistrationBuilder.ForTypesMatching
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching<T>*
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: ForTypesMatching<T>
  nameWithType: RegistrationBuilder.ForTypesMatching<T>
- uid: System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes*
  parent: System.ComponentModel.Composition.Registration.RegistrationBuilder
  isExternal: false
  name: GetCustomAttributes
  nameWithType: RegistrationBuilder.GetCustomAttributes
