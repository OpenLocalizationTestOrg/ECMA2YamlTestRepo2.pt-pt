### YamlMime:ManagedReference
items:
- uid: System.Web.UI.ICallbackEventHandler
  id: ICallbackEventHandler
  children:
  - System.Web.UI.ICallbackEventHandler.GetCallbackResult
  - System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)
  langs:
  - csharp
  name: ICallbackEventHandler
  nameWithType: ICallbackEventHandler
  fullName: System.Web.UI.ICallbackEventHandler
  type: Interface
  summary: "Utilizado para indicar que um controlo pode ser o destino de um evento de chamada de retorno no servidor."
  remarks: "Implemente a interface ICallbackEventHandler para qualquer controlo personalizado que tem de receber eventos de chamada de retorno. Para obter mais informações, consulte [implementar cliente chamadas de retorno sem novas colocações](~/add/includes/ajax-current-ext-md.md).       Exemplos de controlos que implementem a interface ICallbackEventHandler o <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, e <xref:System.Web.UI.WebControls.TreeView>controlos.</xref:System.Web.UI.WebControls.TreeView> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> Quando um evento de chamada de retorno está direcionada para um controlo que implementa a interface de ICallbackEventHandler o <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>método denomina-se ao processar o evento, transmitir o argumento do evento como um parâmetro e o <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>método devolve o resultado da chamada de retorno.</xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> </xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>       Controlos que obtêm dados a partir de um controlo de origem de dados durante a chamada de retorno podem fazê-forma síncrona ou assíncrona. Controlos do ASP.NET, como <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, e <xref:System.Web.UI.WebControls.TreeView>são implementados de forma síncrona.</xref:System.Web.UI.WebControls.TreeView> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> As chamadas de retorno síncronas não impedem que o utilizador trabalhar no browser. No modo síncrono, pode executar apenas uma chamada de retorno de cada vez, com a última chamada de retorno demorar precedência. Quando um controlo Web é implementado para suportar o comportamento assíncrono, várias chamadas de retorno podem ser geradas em simultâneo. Para obter detalhes sobre programação assíncrona, consulte [baseada em eventos assíncrona padrão (EAP)](~/add/includes/ajax-current-ext-md.md).       Pode especificar se os eventos de chamada de retorno provenientes da interface de utilizador composta por um controlo de implementar a interface ICallbackEventHandler são validados. Validação de eventos é uma boa prática de segurança. No entanto, por motivos de desempenho pode desativá-lo. Para controlar se evento a validação é efetuada em eventos de chamada de retorno, defina o `enableEventValidation` atributo do [@ página](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) diretiva ou o `enableEventValidation` atributo do [páginas elemento (esquema de definições do ASP.NET)](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458) do ficheiro Web. config. Se definir o <xref:System.Web.UI.Page.EnableEventValidation%2A>propriedade no código, defini-lo no `Page_Init` fase do processamento de páginas.</xref:System.Web.UI.Page.EnableEventValidation%2A> Para obter mais informações sobre balanceamento as vantagens de segurança de validação de eventos com o custo de desempenho, consulte [descrição geral do desempenho de ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public interface ICallbackEventHandler
  implements: []
  platform:
  - net462
- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult
  id: GetCallbackResult
  parent: System.Web.UI.ICallbackEventHandler
  langs:
  - csharp
  name: GetCallbackResult()
  nameWithType: ICallbackEventHandler.GetCallbackResult()
  fullName: System.Web.UI.ICallbackEventHandler.GetCallbackResult()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Devolve os resultados de um evento de chamada de retorno que tenha como destino um controlo."
  remarks: "Exceções emitidas numa <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>não impede que GetCallbackResult chamados e devolver um resultado.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> Para impedir que GetCallbackResult devolver um resultado, a definir um sinalizador, quando é emitida uma exceção <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>e devolver uma cadeia vazia de GetCallbackResult.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>"
  syntax:
    content: public string GetCallbackResult ();
    parameters: []
    return:
      type: System.String
      description: "O resultado da chamada de retorno."
  overload: System.Web.UI.ICallbackEventHandler.GetCallbackResult*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)
  id: RaiseCallbackEvent(System.String)
  parent: System.Web.UI.ICallbackEventHandler
  langs:
  - csharp
  name: RaiseCallbackEvent(String)
  nameWithType: ICallbackEventHandler.RaiseCallbackEvent(String)
  fullName: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Processa um evento de chamada de retorno que tenha como destino um controlo."
  remarks: "Quando `null` é utilizado como o parâmetro de argumento do evento, a cadeia é serializada retorno &quot;null&quot; e enviado para o servidor. Porque não existe nenhuma forma para distinguir entre `null` e &quot;null&quot;, deve evitar utilizar `null` argumento os parâmetros com chamadas de retorno.       Exceções emitidas numa RaiseCallbackEvent não impedirá <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>chamados e devolver um resultado.</xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> Para impedir <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>de devolver um resultado, defina um sinalizador quando é emitida uma exceção no RaiseCallbackEvent e devolver uma cadeia vazia de <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.</xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> </xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>"
  syntax:
    content: public void RaiseCallbackEvent (string eventArgument);
    parameters:
    - id: eventArgument
      type: System.String
      description: "Uma cadeia que representa um argumento de evento para passar para o processador de eventos."
  overload: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult
  parent: System.Web.UI.ICallbackEventHandler
  isExternal: false
  name: GetCallbackResult()
  nameWithType: ICallbackEventHandler.GetCallbackResult()
  fullName: System.Web.UI.ICallbackEventHandler.GetCallbackResult()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)
  parent: System.Web.UI.ICallbackEventHandler
  isExternal: false
  name: RaiseCallbackEvent(String)
  nameWithType: ICallbackEventHandler.RaiseCallbackEvent(String)
  fullName: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(String)
- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult*
  parent: System.Web.UI.ICallbackEventHandler
  isExternal: false
  name: GetCallbackResult
  nameWithType: ICallbackEventHandler.GetCallbackResult
- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*
  parent: System.Web.UI.ICallbackEventHandler
  isExternal: false
  name: RaiseCallbackEvent
  nameWithType: ICallbackEventHandler.RaiseCallbackEvent
