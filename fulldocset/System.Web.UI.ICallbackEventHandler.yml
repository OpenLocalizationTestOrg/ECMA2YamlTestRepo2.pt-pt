### YamlMime:ManagedReference
items:
- uid: System.Web.UI.ICallbackEventHandler
  id: ICallbackEventHandler
  children:
  - System.Web.UI.ICallbackEventHandler.GetCallbackResult
  - System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)
  langs:
  - csharp
  name: ICallbackEventHandler
  nameWithType: ICallbackEventHandler
  fullName: System.Web.UI.ICallbackEventHandler
  type: Interface
  summary: "Used to indicate that a control can be the target of a callback event on the server."
  remarks: "Implement the ICallbackEventHandler interface for any custom control that needs to receive callback events. For more information, see [Implementing Client Callbacks Without Postbacks](~/add/includes/ajax-current-ext-md.md).       Examples of controls that implement the ICallbackEventHandler interface include the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> controls. When a callback event targets a control that implements the ICallbackEventHandler interface, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is called to handle the event, passing the event argument as a parameter and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the result of the callback.       Controls that retrieve data from a data source control during callback can do so synchronously or asynchronously. ASP.NET controls like <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.TreeView> are implemented synchronously. Synchronous callbacks do not prevent the user from working in the browser. In synchronous mode, only one callback at a time can execute, with the last callback taking precedence. When a Web control is implemented to support asynchronous behavior, multiple callbacks can be raised simultaneously. For details on asynchronous programming, see [Event-based Asynchronous Pattern (EAP)](~/add/includes/ajax-current-ext-md.md).       You can specify whether callback events originating from the user interface rendered by a control implementing the ICallbackEventHandler interface are validated. Validation of events is a good security practice. However, for performance reasons you can disable it. To control whether event validation is performed on callback events, set the `enableEventValidation` attribute of the [@ Page](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directive or the `enableEventValidation` attribute of the [pages Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/4123bb66-3fe4-4d62-b70e-33758656b458) of the Web.config file. If you set the <xref:System.Web.UI.Page.EnableEventValidation%2A> property in code, set it in the `Page_Init` phase of page processing. For more information on balancing the security benefit of event validation with its performance cost, see [ASP.NET Performance Overview](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public interface ICallbackEventHandler
  implements: []
  platform:
  - net462
- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult
  id: GetCallbackResult
  parent: System.Web.UI.ICallbackEventHandler
  langs:
  - csharp
  name: GetCallbackResult()
  nameWithType: ICallbackEventHandler.GetCallbackResult()
  fullName: System.Web.UI.ICallbackEventHandler.GetCallbackResult()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Returns the results of a callback event that targets a control."
  remarks: "Exceptions thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> will not prevent GetCallbackResult from being called and returning a result. To prevent GetCallbackResult from returning a result, set a flag when an exception is thrown in <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> and return an empty string from GetCallbackResult."
  syntax:
    content: public string GetCallbackResult ();
    parameters: []
    return:
      type: System.String
      description: "The result of the callback."
  overload: System.Web.UI.ICallbackEventHandler.GetCallbackResult*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)
  id: RaiseCallbackEvent(System.String)
  parent: System.Web.UI.ICallbackEventHandler
  langs:
  - csharp
  name: RaiseCallbackEvent(String)
  nameWithType: ICallbackEventHandler.RaiseCallbackEvent(String)
  fullName: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Processes a callback event that targets a control."
  remarks: "When `null` is used as the event argument parameter, the string is serialized to &quot;null&quot; and sent back to the server. Because there is no way to distinguish between `null` and &quot;null&quot;, you should avoid using `null` argument parameters with callbacks.       Exceptions thrown in RaiseCallbackEvent will not prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from being called and returning a result. To prevent <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> from returning a result, set a flag when an exception is thrown in RaiseCallbackEvent and return an empty string from <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>."
  syntax:
    content: public void RaiseCallbackEvent (string eventArgument);
    parameters:
    - id: eventArgument
      type: System.String
      description: "A string that represents an event argument to pass to the event handler."
  overload: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult
  parent: System.Web.UI.ICallbackEventHandler
  isExternal: false
  name: GetCallbackResult()
  nameWithType: ICallbackEventHandler.GetCallbackResult()
  fullName: System.Web.UI.ICallbackEventHandler.GetCallbackResult()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)
  parent: System.Web.UI.ICallbackEventHandler
  isExternal: false
  name: RaiseCallbackEvent(String)
  nameWithType: ICallbackEventHandler.RaiseCallbackEvent(String)
  fullName: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(String)
- uid: System.Web.UI.ICallbackEventHandler.GetCallbackResult*
  parent: System.Web.UI.ICallbackEventHandler
  isExternal: false
  name: GetCallbackResult
  nameWithType: ICallbackEventHandler.GetCallbackResult
- uid: System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*
  parent: System.Web.UI.ICallbackEventHandler
  isExternal: false
  name: RaiseCallbackEvent
  nameWithType: ICallbackEventHandler.RaiseCallbackEvent
