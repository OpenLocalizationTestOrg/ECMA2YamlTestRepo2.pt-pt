### YamlMime:ManagedReference
items:
- uid: System.Net.DnsPermission
  id: DnsPermission
  children:
  - System.Net.DnsPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Net.DnsPermission.Copy
  - System.Net.DnsPermission.FromXml(System.Security.SecurityElement)
  - System.Net.DnsPermission.Intersect(System.Security.IPermission)
  - System.Net.DnsPermission.IsSubsetOf(System.Security.IPermission)
  - System.Net.DnsPermission.IsUnrestricted
  - System.Net.DnsPermission.ToXml
  - System.Net.DnsPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: DnsPermission
  nameWithType: DnsPermission
  fullName: System.Net.DnsPermission
  type: Class
  summary: "Controls rights to access Domain Name System (DNS) servers on the network."
  remarks: "The default permissions allow all local and Intranet zone applications to access DNS services, and no DNS permission for Internet zone applications."
  syntax:
    content: 'public sealed class DnsPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.DnsPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Net.DnsPermission
  langs:
  - csharp
  name: DnsPermission(PermissionState)
  nameWithType: DnsPermission.DnsPermission(PermissionState)
  fullName: System.Net.DnsPermission.DnsPermission(PermissionState)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Creates a new instance of the <see cref=&quot;T:System.Net.DnsPermission&quot;></see> class that either allows unrestricted DNS access or disallows DNS access."
  remarks: "If `state` is <xref:System.Security.Permissions.PermissionState>, the <xref:System.Net.DnsPermission> instance passes all demands. If `state` contains any other value, the <xref:System.Net.DnsPermission> instance fails all demands."
  example:
  - "The following example creates an instance of the <xref:System.Net.DnsPermission> class.  \n  \n [!code-cpp[DnsPermission_Constructor#1](~/add/codesnippet/CPP/3a7d5b50-fdd8-4887-a768-_1.cpp)]\n [!code-cs[DnsPermission_Constructor#1](~/add/codesnippet/CSharp/3a7d5b50-fdd8-4887-a768-_1.cs)]\n [!code-vb[DnsPermission_Constructor#1](~/add/codesnippet/VisualBasic/3a7d5b50-fdd8-4887-a768-_1.vb)]"
  syntax:
    content: public DnsPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "One of the  values."
  overload: System.Net.DnsPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    state is not a valid  value."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.DnsPermission.Copy
  id: Copy
  parent: System.Net.DnsPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: DnsPermission.Copy()
  fullName: System.Net.DnsPermission.Copy()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Creates an identical copy of the current permission instance."
  remarks: "A copy of a <xref:System.Net.DnsPermission> instance provides the same access to DNS servers as the original permission instance."
  example:
  - "The following example creates an identical copy of an existing <xref:System.Net.DnsPermission> instance.  \n  \n [!code-cs[DnsPermission_Copy#1](~/add/codesnippet/CSharp/m-system.net.dnspermissi_3_1.cs)]\n [!code-vb[DnsPermission_Copy#1](~/add/codesnippet/VisualBasic/m-system.net.dnspermissi_3_1.vb)]\n [!code-cpp[DnsPermission_Copy#1](~/add/codesnippet/CPP/m-system.net.dnspermissi_3_1.cpp)]"
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "To be added."
  overload: System.Net.DnsPermission.Copy*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.DnsPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Net.DnsPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: DnsPermission.FromXml(SecurityElement)
  fullName: System.Net.DnsPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Reconstructs a <see cref=&quot;T:System.Net.DnsPermission&quot;></see> instance from an XML encoding."
  remarks: "The FromXml method reconstructs a <xref:System.Net.DnsPermission> instance from an XML encoding defined by the <xref:System.Security.SecurityElement> class.       Use the <xref:System.Net.DnsPermission.ToXml%2A> method to XML-encode the <xref:System.Net.DnsPermission> instance, including state information."
  example:
  - "The following example reconstructs a <xref:System.Net.DnsPermission> instance from an XML encoding.  \n  \n [!code-cs[DnsPermission_FromXml#1](~/add/codesnippet/CSharp/m-system.net.dnspermissi_0_1.cs)]\n [!code-cpp[DnsPermission_FromXml#1](~/add/codesnippet/CPP/m-system.net.dnspermissi_0_1.cpp)]\n [!code-vb[DnsPermission_FromXml#1](~/add/codesnippet/VisualBasic/m-system.net.dnspermissi_0_1.vb)]"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement securityElement);
    parameters:
    - id: securityElement
      type: System.Security.SecurityElement
      description: "The XML encoding to use to reconstruct the  instance."
  overload: System.Net.DnsPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    securityElement is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    securityElement is not a  element."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.DnsPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Net.DnsPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: DnsPermission.Intersect(IPermission)
  fullName: System.Net.DnsPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Creates a permission instance that is the intersection of the current permission instance and the specified permission instance."
  remarks: "The Intersect method returns a <xref:System.Net.DnsPermission> instance that allows the access defined by both the current <xref:System.Net.DnsPermission> instance and the specified <xref:System.Net.DnsPermission> instance. Any demand must pass both permissions to pass their intersection."
  example:
  - "The following example creates a permission instance that is the intersection of the current permission instance and the specified permission instance.  \n  \n [!code-cs[dnspermission_union_intersect#2](~/add/codesnippet/CSharp/m-system.net.dnspermissi_2_1.cs)]\n [!code-vb[dnspermission_union_intersect#2](~/add/codesnippet/VisualBasic/m-system.net.dnspermissi_2_1.vb)]\n [!code-cpp[dnspermission_union_intersect#2](~/add/codesnippet/CPP/m-system.net.dnspermissi_2_1.cpp)]"
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "The  instance to intersect with the current instance."
    return:
      type: System.Security.IPermission
      description: "To be added."
  overload: System.Net.DnsPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    target is neither a  nor ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.DnsPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Net.DnsPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: DnsPermission.IsSubsetOf(IPermission)
  fullName: System.Net.DnsPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Determines whether the current permission instance is a subset of the specified permission instance."
  remarks: "The current <xref:System.Net.DnsPermission> instance is a subset of the specified <xref:System.Net.DnsPermission> instance if the current <xref:System.Net.DnsPermission> instance specifies a set of operations that is wholly contained by the specified <xref:System.Net.DnsPermission> instance.       If the IsSubsetOf method returns `true`, the current <xref:System.Net.DnsPermission> instance allows no more access to DNS servers than does the specified <xref:System.Net.DnsPermission> instance."
  example:
  - "The following example uses the IsSubsetOf method to determine whether the current permission instance is a subset of the specified permission instance.  \n  \n [!code-cs[DnsPermission_IsSubsetOf#1](~/add/codesnippet/CSharp/m-system.net.dnspermissi_6_1.cs)]\n [!code-cpp[DnsPermission_IsSubsetOf#1](~/add/codesnippet/CPP/m-system.net.dnspermissi_6_1.cpp)]\n [!code-vb[DnsPermission_IsSubsetOf#1](~/add/codesnippet/VisualBasic/m-system.net.dnspermissi_6_1.vb)]"
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "The second  instance to be tested for the subset relationship."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Net.DnsPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    target is neither a  nor ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.DnsPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Net.DnsPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: DnsPermission.IsUnrestricted()
  fullName: System.Net.DnsPermission.IsUnrestricted()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Checks the overall permission state of the object."
  remarks: ''
  example:
  - "The following example uses the IsUnrestricted method to check the overall permission state of the object.  \n  \n [!code-cpp[DnsPermission_IsUnrestricted#1](~/add/codesnippet/CPP/m-system.net.dnspermissi_4_1.cpp)]\n [!code-vb[DnsPermission_IsUnrestricted#1](~/add/codesnippet/VisualBasic/m-system.net.dnspermissi_4_1.vb)]\n [!code-cs[DnsPermission_IsUnrestricted#1](~/add/codesnippet/CSharp/m-system.net.dnspermissi_4_1.cs)]"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Net.DnsPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.DnsPermission.ToXml
  id: ToXml
  parent: System.Net.DnsPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: DnsPermission.ToXml()
  fullName: System.Net.DnsPermission.ToXml()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Creates an XML encoding of a <see cref=&quot;T:System.Net.DnsPermission&quot;></see> instance and its current state."
  remarks: "The ToXml method creates a <xref:System.Security.SecurityElement> instance to XML-encode a representation of the <xref:System.Net.DnsPermission> instance, including state information.       Use the <xref:System.Net.DnsPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement> instance."
  example:
  - "The following example creates an XML encoding of a <xref:System.Net.DnsPermission> instance.  \n  \n [!code-cpp[DnsPermission_Constructor#1](~/add/codesnippet/CPP/m-system.net.dnspermissi_1_1.cpp)]\n [!code-cs[DnsPermission_Constructor#1](~/add/codesnippet/CSharp/m-system.net.dnspermissi_1_1.cs)]\n [!code-vb[DnsPermission_Constructor#1](~/add/codesnippet/VisualBasic/m-system.net.dnspermissi_1_1.vb)]"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "To be added."
  overload: System.Net.DnsPermission.ToXml*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Net.DnsPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Net.DnsPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: DnsPermission.Union(IPermission)
  fullName: System.Net.DnsPermission.Union(IPermission)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Creates a permission instance that is the union of the current permission instance and the specified permission instance."
  remarks: "The Union method returns a <xref:System.Net.DnsPermission> instance that allows the access defined by either the current <xref:System.Net.DnsPermission> instance or the specified <xref:System.Net.DnsPermission> instance. Any demand that passes either permission passes their union."
  example:
  - "The following example creates a permission instance that is the union of the current permission instance and the specified permission instance.  \n  \n [!code-cs[dnspermission_union_intersect#1](~/add/codesnippet/CSharp/m-system.net.dnspermissi_5_1.cs)]\n [!code-vb[dnspermission_union_intersect#1](~/add/codesnippet/VisualBasic/m-system.net.dnspermissi_5_1.vb)]\n [!code-cpp[dnspermission_union_intersect#1](~/add/codesnippet/CPP/m-system.net.dnspermissi_5_1.cpp)]"
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "The  instance to combine with the current instance."
    return:
      type: System.Security.IPermission
      description: "To be added."
  overload: System.Net.DnsPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    target is neither a  nor ."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.Net.DnsPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Net.DnsPermission
  isExternal: false
  name: DnsPermission(PermissionState)
  nameWithType: DnsPermission.DnsPermission(PermissionState)
  fullName: System.Net.DnsPermission.DnsPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Net.DnsPermission.Copy
  parent: System.Net.DnsPermission
  isExternal: false
  name: Copy()
  nameWithType: DnsPermission.Copy()
  fullName: System.Net.DnsPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Net.DnsPermission.FromXml(System.Security.SecurityElement)
  parent: System.Net.DnsPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: DnsPermission.FromXml(SecurityElement)
  fullName: System.Net.DnsPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Net.DnsPermission.Intersect(System.Security.IPermission)
  parent: System.Net.DnsPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: DnsPermission.Intersect(IPermission)
  fullName: System.Net.DnsPermission.Intersect(IPermission)
- uid: System.Net.DnsPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Net.DnsPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: DnsPermission.IsSubsetOf(IPermission)
  fullName: System.Net.DnsPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.DnsPermission.IsUnrestricted
  parent: System.Net.DnsPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: DnsPermission.IsUnrestricted()
  fullName: System.Net.DnsPermission.IsUnrestricted()
- uid: System.Net.DnsPermission.ToXml
  parent: System.Net.DnsPermission
  isExternal: false
  name: ToXml()
  nameWithType: DnsPermission.ToXml()
  fullName: System.Net.DnsPermission.ToXml()
- uid: System.Net.DnsPermission.Union(System.Security.IPermission)
  parent: System.Net.DnsPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: DnsPermission.Union(IPermission)
  fullName: System.Net.DnsPermission.Union(IPermission)
- uid: System.Net.DnsPermission.#ctor*
  parent: System.Net.DnsPermission
  isExternal: false
  name: DnsPermission
  nameWithType: DnsPermission.DnsPermission
- uid: System.Net.DnsPermission.Copy*
  parent: System.Net.DnsPermission
  isExternal: false
  name: Copy
  nameWithType: DnsPermission.Copy
- uid: System.Net.DnsPermission.FromXml*
  parent: System.Net.DnsPermission
  isExternal: false
  name: FromXml
  nameWithType: DnsPermission.FromXml
- uid: System.Net.DnsPermission.Intersect*
  parent: System.Net.DnsPermission
  isExternal: false
  name: Intersect
  nameWithType: DnsPermission.Intersect
- uid: System.Net.DnsPermission.IsSubsetOf*
  parent: System.Net.DnsPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: DnsPermission.IsSubsetOf
- uid: System.Net.DnsPermission.IsUnrestricted*
  parent: System.Net.DnsPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: DnsPermission.IsUnrestricted
- uid: System.Net.DnsPermission.ToXml*
  parent: System.Net.DnsPermission
  isExternal: false
  name: ToXml
  nameWithType: DnsPermission.ToXml
- uid: System.Net.DnsPermission.Union*
  parent: System.Net.DnsPermission
  isExternal: false
  name: Union
  nameWithType: DnsPermission.Union
