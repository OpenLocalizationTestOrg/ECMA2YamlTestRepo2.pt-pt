### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException
  id: LinqDataSourceValidationException
  children:
  - System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor
  - System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String)
  - System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})
  - System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Exception)
  - System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions
  langs:
  - csharp
  name: LinqDataSourceValidationException
  nameWithType: LinqDataSourceValidationException
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException
  type: Class
  summary: "Describes an exception that occurred during validation of new or modified values before values are inserted, updated, or deleted by a <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref> control."
  remarks: "The LinqDataSourceValidationException class contains type conversion and property setter exceptions. All of the exceptions that are thrown during validation are contained in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection. You can retrieve each validation exception by iterating through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> collection.       You typically handle exceptions in the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, and <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> events. If a validation exception is thrown, the `Exception` property of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>, or <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> object contains a LinqDataSourceValidationException object. If no exception is thrown, the `Exception` property contains `null`.       To handle validation exceptions, create a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, or <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. In the event handler, check whether the `Exception` property of the event argument class contains a value other than `null`. If the `Exception` property is not null, one or more validation exceptions were thrown and you can retrieve each validation exception in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.       A validation exception can occur if a value does not match the type of the property. For example, trying to update an integer property by using non-numeric characters causes a validation exception. A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern."
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: 'public class LinqDataSourceValidationException : Exception, System.Web.DynamicData.IDynamicValidatorException'
  inheritance:
  - System.Exception
  implements:
  - System.Web.DynamicData.IDynamicValidatorException
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  langs:
  - csharp
  name: LinqDataSourceValidationException()
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException()
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceValidationException&quot;></xref> class with a system-supplied message that describes the error."
  remarks: "The system-supplied message that describes the error takes into account the current system culture.       The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.      |Property|Value|   |--------------|-----------|   |<xref:System.Exception.InnerException%2A>|`null`.|   |<xref:System.Exception.Message%2A>|A system-supplied localized description.|"
  syntax:
    content: public LinqDataSourceValidationException ();
    parameters: []
  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  langs:
  - csharp
  name: LinqDataSourceValidationException(String)
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String)
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceValidationException&quot;></xref> class with a specified message that describes the error."
  remarks: "The following table shows the initial property values for an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.      |Property|Value|   |--------------|-----------|   |<xref:System.Exception.InnerException%2A>|`null`.|   |<xref:System.Exception.Message%2A>|The error message string specified in `message`.|"
  syntax:
    content: public LinqDataSourceValidationException (string message);
    parameters:
    - id: message
      type: System.String
      description: "The message that describes the error."
  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  langs:
  - csharp
  name: LinqDataSourceValidationException(SerializationInfo,StreamingContext)
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(SerializationInfo,StreamingContext)
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceValidationException&quot;></xref> class with serialized data."
  remarks: "This constructor is called during deserialization to reconstitute the exception object that is transmitted over a stream."
  syntax:
    content: protected LinqDataSourceValidationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "The object that holds the serialized object data."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Context information about the source or destination."
  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})'
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  langs:
  - csharp
  name: LinqDataSourceValidationException(String,IDictionary<String,Exception>)
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String,IDictionary<String,Exception>)
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String,IDictionary<String,Exception>)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceValidationException&quot;></xref> class with a specified message that describes the error, and a collection of references to inner exceptions."
  syntax:
    content: public LinqDataSourceValidationException (string message, System.Collections.Generic.IDictionary<string,Exception> innerExceptions);
    parameters:
    - id: message
      type: System.String
      description: "The message that describes the error."
    - id: innerExceptions
      type: System.Collections.Generic.IDictionary{System.String,System.Exception}
      description: "The collection of validation exceptions."
  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  langs:
  - csharp
  name: LinqDataSourceValidationException(String,Exception)
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String,Exception)
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String,Exception)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceValidationException&quot;></xref> class with a specified error message and a reference to the inner exception."
  remarks: "You typically will not use this constructor because validation exceptions are stored in the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property, not the <xref:System.Exception.InnerException%2A> property."
  syntax:
    content: public LinqDataSourceValidationException (string message, Exception innerException);
    parameters:
    - id: message
      type: System.String
      description: "The message that describes the error."
    - id: innerException
      type: System.Exception
      description: "The exception that is the cause of the current exception."
  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: LinqDataSourceValidationException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Gets information about the exception and adds it to the <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref> object."
  remarks: "The GetObjectData method adds information about the exception to the <xref:System.Runtime.Serialization.SerializationInfo> object that is targeted for serialization. During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> that is transmitted over the stream."
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "The object that holds the serialized object data for the exception that is being thrown."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Context information about the source or destination."
  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions
  id: InnerExceptions
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  langs:
  - csharp
  name: InnerExceptions
  nameWithType: LinqDataSourceValidationException.InnerExceptions
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Gets one or more exceptions that occurred when new or modified data was being validated."
  remarks: "The InnerExceptions collection contains all the validation exceptions that were thrown during data validation before an update, insert, or delete operation. A validation exception can occur if a value does not match the type of the property. For example, if you try to update an integer property by using non-numeric characters, a validation exception is thrown. A LINQ to SQL class can also contain customized validation criteria that make sure that the property contains a value that is within an expected range or pattern."
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n                In e.Exception.InnerExceptions  \n          Label1.Text &= innerException.Key & \": \" & _   \n                  innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)   \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n            e.Exception.InnerExceptions)  \n        {  \n            Label1.Text += innerException.Key + \": \" +   \n                innerException.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,Exception> InnerExceptions { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Exception}
      description: "A collection that contains the exceptions."
  overload: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Exception
  isExternal: false
  name: System.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  isExternal: false
  name: LinqDataSourceValidationException()
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException()
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException()
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String)
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  isExternal: false
  name: LinqDataSourceValidationException(String)
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String)
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  isExternal: false
  name: LinqDataSourceValidationException(SerializationInfo,StreamingContext)
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(SerializationInfo,StreamingContext)
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  isExternal: false
  name: LinqDataSourceValidationException(String,IDictionary<String,Exception>)
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String,IDictionary<String,Exception>)
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String,IDictionary<String,Exception>)
- uid: System.Collections.Generic.IDictionary{System.String,System.Exception}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Exception>
  nameWithType: IDictionary<String,Exception>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Exception>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Exception>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Exception)
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  isExternal: false
  name: LinqDataSourceValidationException(String,Exception)
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException(String,Exception)
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.LinqDataSourceValidationException(String,Exception)
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: LinqDataSourceValidationException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  isExternal: false
  name: InnerExceptions
  nameWithType: LinqDataSourceValidationException.InnerExceptions
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  isExternal: false
  name: LinqDataSourceValidationException
  nameWithType: LinqDataSourceValidationException.LinqDataSourceValidationException
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData*
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  isExternal: false
  name: GetObjectData
  nameWithType: LinqDataSourceValidationException.GetObjectData
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions*
  parent: System.Web.UI.WebControls.LinqDataSourceValidationException
  isExternal: false
  name: InnerExceptions
  nameWithType: LinqDataSourceValidationException.InnerExceptions
