### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbDataAdapter
  id: DbDataAdapter
  children:
  - System.Data.Common.DbDataAdapter.#ctor
  - System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.DeleteCommand
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.InsertCommand
  - System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbDataAdapter.SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.Data.Common.DbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
  type: Class
  summary: "Utilitários de implementação do <xref href=&quot;System.Data.IDbDataAdapter&quot;> </xref> interface. Os herdeiros de DbDataAdapter implementa um conjunto de funções para fornecer a escrever segura, mas herdar a maioria das funcionalidades necessárias para implementar completamente um **DataAdapter**."
  remarks: "A classe de DbDataAdapter Herdar do <xref:System.Data.Common.DataAdapter>classe e ajuda a uma classe implementa um **DataAdapter** concebida para utilização com a base de dados relacional.</xref:System.Data.Common.DataAdapter>       Uma aplicação não cria uma instância da DbDataAdapter interface diretamente, mas cria uma instância de uma classe que herda <xref:System.Data.IDbDataAdapter>e DbDataAdapter.</xref:System.Data.IDbDataAdapter>       As classes que herdam DbDataAdapter tem de implementar os membros herdados e definir normalmente membros adicionais para adicionar a funcionalidade específica do fornecedor. Por exemplo, a classe de DbDataAdapter define o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade e a interface de DbDataAdapter define oito sobrecargas do <xref:System.Data.IDataAdapter.Fill%2A>método.</xref:System.Data.IDataAdapter.Fill%2A> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> Por sua vez, o <xref:System.Data.OleDb.OleDbDataAdapter>classe herda o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método e também define duas sobrecargas adicionais de <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>que assumem um objeto de ADO Recordset como parâmetro.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: 'public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  implements:
  - System.Data.IDbDataAdapter
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inicializa uma nova instância de um **DataAdapter** classe."
  remarks: "Quando cria uma instância de <xref:System.Data.Common.DbDataAdapter>, as seguintes propriedades de leitura/escrita estão definidas para os seguintes valores iniciais.</xref:System.Data.Common.DbDataAdapter>      | Propriedades | Valor inicial |   |----------------|-------------------|   | <xref:System.Data.IDbDataAdapter.SelectCommand%2A>| Um novo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.InsertCommand%2A>| Um novo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>| Um novo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>| Um novo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       Pode alterar o valor de qualquer uma destas propriedades através de uma chamada para a propriedade separada.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: protected DbDataAdapter ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  id: '#ctor(System.Data.Common.DbDataAdapter)'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inicializa uma nova instância de um <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> classe a partir de um objeto existente do mesmo tipo."
  remarks: "Esta sobrecarga do <xref:System.Data.Common.DbDataAdapter>construtor foi concebido para utilização por um fornecedor de dados .NET Framework quando implementa um construtor semelhante para utilização numa implementação de clone.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "A <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> objecto utilizado para criar a nova <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  id: AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> o lote atual."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método emite <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes de herdar <xref:System.Data.Common.DbDataAdapter>substituir este método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int AddToBatch (System.Data.IDbCommand command);
    parameters:
    - id: command
      type: System.Data.IDbCommand
      description: "O <xref href=&quot;System.Data.IDbCommand&quot;> </xref> para adicionar o batch."
    return:
      type: System.Int32
      description: "O número de comandos no lote antes de adicionar o <xref href=&quot;System.Data.IDbCommand&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.AddToBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O adaptador não suporta lotes."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  id: ClearBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Remove todos os <xref href=&quot;System.Data.IDbCommand&quot;> </xref> objetos do batch."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método emite <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes de herdar <xref:System.Data.Common.DbDataAdapter>substituir este método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void ClearBatch ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.ClearBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O adaptador não suporta lotes."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> classe."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "O <xref href=&quot;System.Data.DataRow&quot;> </xref> utilizado para atualizar a origem de dados."
    - id: command
      type: System.Data.IDbCommand
      description: "O <xref href=&quot;System.Data.IDbCommand&quot;> </xref> executada durante <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Se o comando é uma ATUALIZAÇÃO, inserir, eliminar ou SELECIONE a instrução."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "Uma nova instância do <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> classe."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> classe."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "O <xref href=&quot;System.Data.DataRow&quot;> </xref> que atualiza a origem de dados."
    - id: command
      type: System.Data.IDbCommand
      description: "O <xref href=&quot;System.Data.IDbCommand&quot;> </xref> executar durante <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Se o comando é uma ATUALIZAÇÃO, inserir, eliminar ou SELECIONE a instrução."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "Uma nova instância do <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> classe."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  id: DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "O nome predefinido utilizado pelo <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> objeto para mapeamentos de tabela."
  remarks: "&quot;Tabela&quot; é o nome predefinido utilizado pelo <xref:System.Data.Common.DataAdapter>objeto para mapeamentos de tabela.</xref:System.Data.Common.DataAdapter>       DefaultSourceTableName é quando uma aplicação adiciona um mapeamento de tabela a ser utilizada com <xref:System.Data.Common.DbDataAdapter.Fill%2A>, mas não especifica um <xref:System.Data.DataTable>nome.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public const string DefaultSourceTableName;
    return:
      type: System.String
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define um comando para eliminar registos de conjunto de dados."
  remarks: "Durante a <xref:System.Data.Common.DbDataAdapter.Update%2A>, se esta propriedade não está definida e informações da chave primária não estão presentes no <xref:System.Data.DataSet>, a <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>é gerado automaticamente.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_3_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizada durante <xref:System.Data.IDataAdapter.Update*>para eliminar registos na origem de dados para linhas eliminadas no conjunto de dados.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> e opcionalmente liberta os recursos geridos."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.Data.Common.DbDataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  id: ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Executa o lote atual."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método emite <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes de herdar <xref:System.Data.Common.DbDataAdapter>substituir este método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int ExecuteBatch ();
    parameters: []
    return:
      type: System.Int32
      description: "O valor devolvido do último comando no batch."
  overload: System.Data.Common.DbDataAdapter.ExecuteBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza as linhas a <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "O método de preenchimento obtém os dados da origem de dados utilizando uma instrução SELECT. O <xref:System.Data.IDbConnection>objeto associado ao comando selecionado tem de ser válido, mas não precisa de estar aberta.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>é fechada antes de é chamado preenchimento, é aberto para obter dados e, em seguida, fechado.</xref:System.Data.IDbConnection> Se a ligação está aberta antes de é chamado preenchimento, este irá permanecer aberta.       Se for encontrada um erro ou uma excepção ao popular as tabelas de dados, linhas adicionadas antes da ocorrência de erro permanecem nas tabelas de dados. O resto da operação foi abortado.       Se um comando não devolver quaisquer linhas, não existem tabelas são adicionadas para o <xref:System.Data.DataSet>, e não a exceção é acionada.</xref:System.Data.DataSet>       Se o <xref:System.Data.Common.DbDataAdapter>objeto encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, gera os nomes das colunas subsequentes utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet>       Quando a consulta especificada devolve resultados vários, o conjunto de resultados para cada linha a devolver a consulta é colocado numa tabela separada. Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim sucessivamente). Porque nenhuma tabela é criada para uma consulta que não devolve linhas, se a processar uma consulta de inserção seguida por uma consulta select, a tabela criada para a consulta select com o nome &quot;Tabela&quot; porque é a primeira tabela criada. As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       Quando a instrução SELECT utilizada para preencher o <xref:System.Data.DataSet>devolve vários resulta, tais como de instruções de SQL do batch, se um dos resultados contém um erro, todos os resultados subsequentes são ignorados e não foram adicionados a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando utilizar subsequentes preencher chamadas para atualizar o conteúdo a <xref:System.Data.DataSet>, duas condições devem ser cumpridas: 1.</xref:System.Data.DataSet>  A instrução SQL deve corresponder à que inicialmente utilizada para preencher <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  O **chave** informações de coluna tem de estar presentes.       Se as informações da chave primária estiver presentes, as linhas duplicadas são reconciliadas e só aparecem uma vez em <xref:System.Data.DataTable>que corresponde a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Informações da chave primária podem ser definidas através de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade o <xref:System.Data.DataTable>, ou definindo o <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>propriedade para `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Se o `SelectCommand` devolve os resultados de uma associação externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Tem de definir explicitamente a chave primária para se certificar que linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definir chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o .NET Framework Data Provider para OLE DB obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para obter informações de esquema para vários resultados, utilize o preenchimento com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction>"
  syntax:
    content: public override int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> para preencher com os registos e, se necessário, esquema."
    return:
      type: System.Int32
      description: "O número de linhas sejam adicionados ou atualizados com êxito o <xref href=&quot;System.Data.DataSet&quot;> </xref>. Não inclui as linhas afetadas pelas declarações não devolveu linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  id: Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza as linhas do intervalo especificado no <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponderem na origem de dados utilizando o <xref href=&quot;System.Data.DataTable&quot;> </xref> nome."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método obtém linhas da origem de dados utilizando a instrução SELECT especificada por uma associado <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> O objeto de ligação associado a instrução SELECT tem de ser válido, mas não precisa de estar aberta. Se a ligação está fechada antes <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, é aberto para obter dados, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se a ligação está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, permanece aberta.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação, em seguida, adiciona as linhas para o destino <xref:System.Data.DataTable>objetos no <xref:System.Data.DataSet>, criar o <xref:System.Data.DataTable>objetos se estes ainda não existir.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Ao criar <xref:System.Data.DataTable>objetos, o <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação cria normalmente apenas metadados de nome de coluna.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> No entanto, se o <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>propriedade está definida como `AddWithKey`, as chaves primárias adequadas e restrições também são criadas.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se o <xref:System.Data.Common.DbDataAdapter>encontros duplicado colunas ao preencher um <xref:System.Data.DataTable>, gera os nomes das colunas subsequentes, utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado numa tabela separada.</xref:System.Data.DataSet>       A sobrecarga do <xref:System.Data.Common.DbDataAdapter.Fill%2A>que assuma `DataTable` como um parâmetro apenas obtém o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Utilize uma sobrecarga do <xref:System.Data.Common.DbDataAdapter.Fill%2A>que assuma `DataSet` como parâmetro para obter resultados vários.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método suporta cenários em que o <xref:System.Data.DataSet>contém vários <xref:System.Data.DataTable>cujos nomes diferem apenas no caso de objetos.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Estas situações, <xref:System.Data.Common.DbDataAdapter.Fill%2A>efetua uma comparação de maiúsculas e minúsculas para localizar a tabela correspondente e cria uma nova tabela de não existir nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);    dataset.Tables.Add(&quot;AAA&quot;);    adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.       adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>denomina-se e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome é diferente apenas por caso, que <xref:System.Data.DataTable>é atualizado.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Neste cenário, a comparação é sensível a maiúsculas e minúsculas. O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Pode utilizar o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método várias vezes no mesmo <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Se existir uma chave primária, linhas de entrada são intercaladas com linhas correspondentes que já existem. Não se existir nenhuma chave primária, linhas de entrada são acrescentadas <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Se o `SelectCommand` devolve os resultados de uma associação externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Tem de definir explicitamente a chave primária para se certificar que linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definir chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.Fill%2A>e <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para dados de .NET Framework fornecedor obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "O nome do <xref href=&quot;System.Data.DataTable&quot;> </xref> a utilizar para mapeamento de tabela."
    return:
      type: System.Int32
      description: "O número de linhas sejam adicionados ou atualizados com êxito o <xref href=&quot;System.Data.DataSet&quot;> </xref>. Não inclui as linhas afetadas pelas declarações não devolveu linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  id: Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza as linhas a <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponderem na origem de dados utilizando o <xref href=&quot;System.Data.DataSet&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref> nomes."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método obtém os dados da origem de dados utilizando uma instrução SELECT.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O <xref:System.Data.IDbConnection>objeto associado ao comando selecionado tem de ser válido, mas não precisa de estar aberta.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, é aberto para obter dados, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Se a ligação está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, permanece aberta.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se um comando não devolver quaisquer linhas, não existem tabelas são adicionadas para o <xref:System.Data.DataSet>, e não a exceção é acionada.</xref:System.Data.DataSet>       Se o <xref:System.Data.Common.DbDataAdapter>objeto encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, irá gerar os nomes das colunas subsequentes, utilizando o padrão &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; e assim sucessivamente.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet>       Quando a consulta especificada devolve resultados vários, cada conjunto de resultados é colocado numa tabela separada. Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim sucessivamente). Dado que nenhuma tabela é criada para uma consulta que não devolve linhas, se atualizasse processar uma consulta de inserção seguida por uma consulta select, a tabela criada para a consulta select seria ter o nome &quot;Tabela&quot;, porque é a primeira tabela criada. As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método suporta cenários em que o <xref:System.Data.DataSet>contém vários <xref:System.Data.DataTable>cujos nomes diferem apenas no caso de objetos.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Estas situações, <xref:System.Data.Common.DbDataAdapter.Fill%2A>efetua uma comparação de maiúsculas e minúsculas para localizar a tabela correspondente e cria uma nova tabela de não existir nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>denomina-se e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome é diferente apenas por caso, que <xref:System.Data.DataTable>é atualizado.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Neste cenário, a comparação é sensível a maiúsculas e minúsculas. O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Se for encontrada um erro ou uma excepção ao popular as tabelas de dados, linhas adicionadas antes da ocorrência de erro permanecem nas tabelas de dados. O resto da operação foi abortado.       Quando a instrução SELECT utilizada para preencher o <xref:System.Data.DataSet>devolve resultados vários, tal como um batch de instrução de SQL, tenha em atenção o seguinte:-se um dos resultados contém um erro, todos os resultados subsequentes são ignorados e não adicionados à <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando utilizar subsequentes <xref:System.Data.Common.DbDataAdapter.Fill%2A>chamadas para atualizar o conteúdo a <xref:System.Data.DataSet>, duas condições devem ser cumpridas: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  A instrução SQL deve corresponder à que inicialmente utilizada para preencher <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  O **chave** informações de coluna tem de estar presentes. Se as informações da chave primária estiver presentes, as linhas duplicadas são reconciliadas e só aparecem uma vez em <xref:System.Data.DataTable>que corresponde a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Informações da chave primária podem ser definidas através de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade o <xref:System.Data.DataTable>, ou definindo o <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>propriedade para `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Se o `SelectCommand` devolve os resultados de uma associação externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Tem de definir explicitamente a chave primária para se certificar que linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte[definir chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o .NET Framework Data Provider para OLE DB obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para obter informações de esquema para vários resultados, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with rows from the categories table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_3_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_3_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> para preencher com os registos e, se necessário, esquema."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a utilizar para mapeamento de tabela."
    return:
      type: System.Int32
      description: "O número de linhas sejam adicionados ou atualizados com êxito o <xref href=&quot;System.Data.DataSet&quot;> </xref>. Não inclui as linhas afetadas pelas declarações não devolveu linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "A tabela de origem é inválida."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza as linhas num <xref href=&quot;System.Data.DataTable&quot;> </xref> para corresponderem na origem de dados utilizando especificado <xref href=&quot;System.Data.DataTable&quot;> </xref>, <xref href=&quot;System.Data.IDbCommand&quot;> </xref> e <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método obtém linhas da origem de dados utilizando a instrução SELECT especificada por uma associado <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> O objeto de ligação associado a instrução SELECT tem de ser válido, mas não precisa de estar aberta. Se a ligação está fechada antes <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, é aberto para obter dados e, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se a ligação está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, permanece aberta.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação, em seguida, adiciona as linhas para o destino especificado <xref:System.Data.DataTable>objeto o <xref:System.Data.DataSet>, criar o <xref:System.Data.DataTable>objeto se esta ainda não existir.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Ao criar um <xref:System.Data.DataTable>objeto, o <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação cria normalmente apenas metadados de nome de coluna.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> No entanto, se o <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>propriedade está definida como `AddWithKey`, as chaves primárias adequadas e restrições também são criadas.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se o <xref:System.Data.Common.DbDataAdapter>objeto encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, irá gerar os nomes das colunas subsequentes, utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet>       A sobrecarga do <xref:System.Data.Common.DbDataAdapter.Fill%2A>que assuma `DataTable` como um parâmetro apenas obtém o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Utilize uma sobrecarga do <xref:System.Data.Common.DbDataAdapter.Fill%2A>que assuma `DataSet` como parâmetro para obter resultados vários.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Pode utilizar o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método várias vezes no mesmo <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Se existir uma chave primária, linhas de entrada são intercaladas com linhas correspondentes que já existem. Não se existir nenhuma chave primária, linhas de entrada são acrescentadas <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Se o `SelectCommand` devolve os resultados de uma associação externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Tem de definir explicitamente a chave primária para se certificar que linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definir chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o .NET Framework Data Provider para OLE DB obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para obter informações de esquema para vários resultados, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> para preencher com os registos e, se necessário, esquema."
    - id: command
      type: System.Data.IDbCommand
      description: "A instrução SQL SELECT utilizada para obter linhas da origem de dados."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Um do <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
    return:
      type: System.Int32
      description: "O número de linhas sejam adicionados ou atualizados com êxito o <xref href=&quot;System.Data.DataTable&quot;> </xref>. Não inclui as linhas afetadas pelas declarações não devolveu linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  id: Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza as linhas num <xref href=&quot;System.Data.DataTable&quot;> </xref> para corresponderem na origem de dados que começa com o registo especificado e obter até o número máximo de registos especificado."
  remarks: "O <xref:System.Data.Common.DataAdapter.Fill%2A>método obtém linhas da origem de dados utilizando a instrução SELECT especificada por uma associado <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DataAdapter.Fill%2A> O objeto de ligação associado a instrução SELECT tem de ser válido, mas não precisa de estar aberta. Se a ligação está fechada antes <xref:System.Data.Common.DataAdapter.Fill%2A>é chamado, está aberto para obter dados e, em seguida, está fechado.</xref:System.Data.Common.DataAdapter.Fill%2A> Se a ligação está aberta antes de <xref:System.Data.Common.DataAdapter.Fill%2A>é chamado, permanece aberta.</xref:System.Data.Common.DataAdapter.Fill%2A>       O <xref:System.Data.Common.DataAdapter.Fill%2A>operação, em seguida, adiciona as linhas para o destino <xref:System.Data.DataTable>objetos no <xref:System.Data.DataSet>, criar o <xref:System.Data.DataTable>objetos se estes ainda não existir.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> Ao criar <xref:System.Data.DataTable>objetos, o <xref:System.Data.Common.DataAdapter.Fill%2A>operação cria normalmente apenas metadados de nome de coluna.</xref:System.Data.Common.DataAdapter.Fill%2A> </xref:System.Data.DataTable> No entanto, se o <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>propriedade está definida como `AddWithKey`, as chaves primárias adequadas e restrições também são criadas.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se o `SelectCommand` devolve os resultados de uma associação externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Tem de definir explicitamente a chave primária para se certificar que linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definir chaves primárias](~/add/includes/ajax-current-ext-md.md).       Se o adaptador de dados encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, gera os nomes das colunas subsequentes, utilizando o padrão &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; e assim sucessivamente.</xref:System.Data.DataTable> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>, cada conjunto de resultados é colocado numa tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim sucessivamente). As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       Quando a instrução SELECT utilizada para preencher o <xref:System.Data.DataSet>devolve resultados vários, tais como um instruções de SQL do batch, se um dos resultados contém um erro, todos os resultados subsequentes são ignorados e não adicionados à <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Pode utilizar o <xref:System.Data.Common.DataAdapter.Fill%2A>método várias vezes no mesmo <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> Se existir uma chave primária, linhas de entrada são intercaladas com linhas correspondentes que já existem. Não se existir nenhuma chave primária, linhas de entrada são acrescentadas <xref:System.Data.DataTable>.</xref:System.Data.DataTable>      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o .NET Framework Data Provider para OLE DB obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para obter informações de esquema para vários resultados, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (int startRecord, int maxRecords, System.Data.DataTable[] dataTables);
    parameters:
    - id: startRecord
      type: System.Int32
      description: "O número de registo baseado em zero para começar a utilizar."
    - id: maxRecords
      type: System.Int32
      description: "O número máximo de registos a obter."
    - id: dataTables
      type: System.Data.DataTable[]
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos para preencher da origem de dados."
    return:
      type: System.Int32
      description: "O número de linhas sejam adicionados ou atualizados com êxito o <xref href=&quot;System.Data.DataTable&quot;> </xref>. Este valor não incluir as linhas afetadas pelas declarações não devolveu linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza as linhas do intervalo especificado no <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponderem na origem de dados utilizando o <xref href=&quot;System.Data.DataSet&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref> nomes."
  remarks: "A `maxRecords` valor de 0 obtém todos os registos encontrados após o registo de início. Se `maxRecords` é superior ao número de linhas restantes, apenas as linhas restantes são devolvidas e não emitido nenhum erro.       Se o comando de selecção correspondente é uma instrução devolver vários resultados, <xref:System.Data.Common.DbDataAdapter.Fill%2A>só se aplica `maxRecords` ao resultado primeiro.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método obtém os dados da origem de dados utilizando uma instrução SELECT.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O <xref:System.Data.IDbConnection>objeto associado a instrução SELECT tem de ser válido, mas não precisa de estar aberta.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, é aberto para obter dados e, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Se a ligação está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, permanece aberta.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se um comando não devolver quaisquer linhas, não existem tabelas são adicionadas para o <xref:System.Data.DataSet>, mas não a exceção é acionada.</xref:System.Data.DataSet>       Se o <xref:System.Data.Common.DbDataAdapter>objeto encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, irá gerar os nomes das colunas subsequentes, utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet>       Quando a consulta especificada devolve resultados vários, cada conjunto de resultados é colocado numa tabela separada. Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim sucessivamente). Porque nenhuma tabela é criada para uma consulta que não devolve linhas, se a processar uma consulta de inserção seguida por uma consulta select, a tabela criada para a consulta select com o nome &quot;Tabela&quot;, porque é a primeira tabela criada. As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método suporta cenários em que o <xref:System.Data.DataSet>contém vários <xref:System.Data.DataTable>cujos nomes diferem apenas no caso de objetos.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Estas situações, <xref:System.Data.Common.DbDataAdapter.Fill%2A>efetua uma comparação de maiúsculas e minúsculas para localizar a tabela correspondente e cria uma nova tabela de não existir nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>denomina-se e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome é diferente apenas por caso, que <xref:System.Data.DataTable>é atualizado.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Neste cenário, a comparação é sensível a maiúsculas e minúsculas. O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Se for encontrada um erro ou uma excepção ao popular as tabelas de dados, linhas adicionadas antes da ocorrência de erro permanecem nas tabelas de dados. O resto da operação foi abortado.       Quando a instrução SELECT utilizada para preencher o <xref:System.Data.DataSet>devolve vários resulta, tais como as instruções SQL do batch, tenha em atenção o seguinte: - ao processar vários resultados de um batch de instrução de SQL, `maxRecords` aplica-se apenas ao resultado primeiro.</xref:System.Data.DataSet> O mesmo se aplica-se as linhas que contêm resultados chaptered (.NET Framework Data Provider para OLE DB apenas). O resultado de nível superior é limitado pela `maxRecords`, mas todas as linhas subordinadas são adicionadas.      -Se um dos resultados contém um erro, todos os resultados subsequentes são ignorados e não adicionados à <xref:System.Data.DataSet>.</xref:System.Data.DataSet>       Quando utilizar subsequentes <xref:System.Data.Common.DbDataAdapter.Fill%2A>chamadas para atualizar o conteúdo a <xref:System.Data.DataSet>, duas condições devem ser cumpridas: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  A instrução SQL deve corresponder à que inicialmente utilizada para preencher <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  O **chave** informações de coluna tem de estar presentes.       Se as informações da chave primária estiver presentes, as linhas duplicadas serão reconciliado e só aparecer uma vez em <xref:System.Data.DataTable>que corresponde a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Informações da chave primária podem ser definidas através de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade o <xref:System.Data.DataTable>, ou definindo o <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>propriedade para `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Se o `SelectCommand` devolve os resultados de uma associação externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Tem de definir explicitamente a chave primária para se certificar que linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte [definir chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o .NET Framework Data Provider para OLE DB obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para obter informações de esquema para vários resultados, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > O `DataSet` não irá conter mais do que o número de registos indicado pelo `maxRecords`. No entanto, o conjunto de resultados todo gerado pela consulta ainda é devolvido do servidor."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with 15 rows, beginning at row 10, from the **Categories** table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/visualbasic/db016a7d-8591-46f9-abcc-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/csharp/db016a7d-8591-46f9-abcc-_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> para preencher com os registos e, se necessário, esquema."
    - id: startRecord
      type: System.Int32
      description: "O número de registo baseado em zero para começar a utilizar."
    - id: maxRecords
      type: System.Int32
      description: "O número máximo de registos a obter."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a utilizar para mapeamento de tabela."
    return:
      type: System.Int32
      description: "O número de linhas sejam adicionados ou atualizados com êxito o <xref href=&quot;System.Data.DataSet&quot;> </xref>. Não inclui as linhas afetadas pelas declarações não devolveu linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida.       - ou - a ligação é inválida."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Não foi possível encontrar a ligação."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> startRecord </code> parâmetro é inferior a 0.       - ou - <code> maxRecords </code> parâmetro é inferior a 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza as linhas do intervalo especificado no <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponderem na origem de dados utilizando o <xref href=&quot;System.Data.DataSet&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref> nomes."
  remarks: "A `maxRecords` valor de 0 obtém todos os registos encontrados após o registo de início. Se `maxRecords` é superior ao número de linhas restantes, apenas as linhas restantes são devolvidas e não emitido nenhum erro.       O método de preenchimento obtém os dados da origem de dados utilizando uma instrução SELECT. O <xref:System.Data.IDbConnection>objeto associado a instrução SELECT tem de ser válido, mas não precisa de estar aberta.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, é aberto para obter dados, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Se a ligação está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, permanece aberta.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se um comando não devolver quaisquer linhas, não existem tabelas são adicionadas para o <xref:System.Data.DataSet>, mas não a exceção é acionada.</xref:System.Data.DataSet>       Se o <xref:System.Data.Common.DbDataAdapter>objeto encontra colunas duplicadas ao preencher um <xref:System.Data.DataTable>, irá gerar os nomes das colunas subsequentes, utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet>       Quando a consulta especificada devolve resultados vários, cada conjunto de resultados é colocado numa tabela separada. Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim sucessivamente). Dado que nenhuma tabela é criada para uma consulta que não devolve linhas, se atualizasse processar uma consulta de inserção seguida por uma consulta select, a tabela criada para a consulta select seria ter o nome &quot;Tabela&quot;, porque é a primeira tabela criada. As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       O método de preenchimento suporta cenários em que o <xref:System.Data.DataSet>contém vários <xref:System.Data.DataTable>cujos nomes diferem apenas no caso de objetos.</xref:System.Data.DataTable> </xref:System.Data.DataSet> Estas situações, <xref:System.Data.Common.DbDataAdapter.Fill%2A>efetua uma comparação de maiúsculas e minúsculas para localizar a tabela correspondente e cria uma nova tabela de não existir nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>denomina-se e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome é diferente apenas por caso, que <xref:System.Data.DataTable>é atualizado.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Neste cenário, a comparação é sensível a maiúsculas e minúsculas. O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Se for encontrada um erro ou uma excepção ao popular as tabelas de dados, linhas adicionadas antes da ocorrência de erro permanecem nas tabelas de dados. O resto da operação foi abortado.       Quando a instrução SELECT utilizada para preencher o <xref:System.Data.DataTable>objetos devolve resultados vários, tal como um batch de instrução de SQL, tenha em atenção o seguinte: - ao processar vários resultados de um batch de instrução de SQL, `maxRecords` aplica-se apenas ao resultado primeiro.</xref:System.Data.DataTable> O mesmo se aplica-se as linhas que contêm resultados chaptered (.NET Framework Data Provider para OLE DB apenas). O resultado de nível superior é limitado pela `maxRecords`, mas todas as linhas subordinadas são adicionadas.      -Se um dos resultados contém um erro, todos os resultados subsequentes são ignorados.      > [!NOTE] > O `DataSet` não irá conter mais do que o número de registos indicado pelo `maxRecords`. No entanto, o conjunto de resultados todo gerado pela consulta ainda é devolvido do servidor."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos para preencher da origem de dados."
    - id: startRecord
      type: System.Int32
      description: "O número de registo baseado em zero para começar a utilizar."
    - id: maxRecords
      type: System.Int32
      description: "O número máximo de registos a obter."
    - id: command
      type: System.Data.IDbCommand
      description: "O <xref href=&quot;System.Data.IDbCommand&quot;> </xref> executados para preencher o <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Um do <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
    return:
      type: System.Int32
      description: "O número de linhas adicionados ou atualizados nas tabelas de dados."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida.       - ou - a ligação é inválida."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Não foi possível encontrar a ligação."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> startRecord </code> parâmetro é inferior a 0.       - ou - <code> maxRecords </code> parâmetro é inferior a 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona ou atualiza as linhas do intervalo especificado no <xref href=&quot;System.Data.DataSet&quot;> </xref> para corresponderem na origem de dados utilizando o <xref href=&quot;System.Data.DataSet&quot;> </xref> e nomes de tabela, a cadeia de comando e o comportamento do comando de origem."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método obtém linhas da origem de dados utilizando a instrução SELECT especificada por uma associado <xref:System.Data.IDbDataAdapter.SelectCommand%2A>propriedade.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> O objeto de ligação associado a instrução SELECT tem de ser válido, mas não precisa de estar aberta. Se a ligação está fechada antes <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, é aberto para obter dados, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se a ligação está aberta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A>é chamado, permanece aberta.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação, em seguida, adiciona as linhas para o destino <xref:System.Data.DataTable>objetos no <xref:System.Data.DataSet>, criar o <xref:System.Data.DataTable>objetos se estes ainda não existir.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Ao criar <xref:System.Data.DataTable>objetos, o <xref:System.Data.Common.DbDataAdapter.Fill%2A>operação cria normalmente apenas metadados de nome de coluna.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> No entanto, se o <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>propriedade está definida como `AddWithKey`, as chaves primárias adequadas e restrições também são criadas.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se o <xref:System.Data.Common.DbDataAdapter>encontros duplicado colunas ao preencher um <xref:System.Data.DataTable>, gera os nomes das colunas subsequentes, utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado numa tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e assim sucessivamente). As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       O <xref:System.Data.Common.DbDataAdapter.Fill%2A>método suporta cenários em que o <xref:System.Data.DataSet>contém vários <xref:System.Data.DataTable>cujos nomes diferem apenas no caso de objetos.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Estas situações, <xref:System.Data.Common.DbDataAdapter.Fill%2A>efetua uma comparação de maiúsculas e minúsculas para localizar a tabela correspondente e cria uma nova tabela de não existir nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Fill%2A> O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>denomina-se e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome é diferente apenas por caso, que <xref:System.Data.DataTable>é atualizado.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Neste cenário, a comparação é sensível a maiúsculas e minúsculas. O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Pode utilizar o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método várias vezes no mesmo <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Se existir uma chave primária, linhas de entrada são intercaladas com linhas correspondentes que já existem. Não se existir nenhuma chave primária, linhas de entrada são acrescentadas <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Se o `SelectCommand` devolve os resultados de uma associação externa, o `DataAdapter` não define um <xref:System.Data.DataTable.PrimaryKey%2A>valor para o <xref:System.Data.DataTable>.</xref:System.Data.DataTable> resultante</xref:System.Data.DataTable.PrimaryKey%2A> Tem de definir explicitamente a chave primária para se certificar que linhas duplicadas são resolvidas corretamente. Para obter mais informações, consulte[definir chaves primárias](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.Fill%2A>e <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para dados de .NET Framework fornecedor obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> para preencher com os registos e, se necessário, esquema."
    - id: startRecord
      type: System.Int32
      description: "O número de registo baseado em zero para começar a utilizar."
    - id: maxRecords
      type: System.Int32
      description: "O número máximo de registos a obter."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a utilizar para mapeamento de tabela."
    - id: command
      type: System.Data.IDbCommand
      description: "A instrução SQL SELECT utilizada para obter linhas da origem de dados."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Um do <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
    return:
      type: System.Int32
      description: "O número de linhas sejam adicionados ou atualizados com êxito o <xref href=&quot;System.Data.DataSet&quot;> </xref>. Não inclui as linhas afetadas pelas declarações não devolveu linhas."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> startRecord </code> parâmetro é inferior a 0.       - ou - <code> maxRecords </code> parâmetro é inferior a 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  id: FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define o comportamento do comando utilizado para preencher o adaptador de dados."
  syntax:
    content: protected System.Data.CommandBehavior FillCommandBehavior { get; set; }
    return:
      type: System.Data.CommandBehavior
      description: "O <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> do comando utilizado para preencher o adaptador de dados."
  overload: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona um <xref href=&quot;System.Data.DataTable&quot;> </xref> com o nome &quot;Tabela&quot; especificado para <xref href=&quot;System.Data.DataSet&quot;> </xref> e configura o esquema para que corresponda ao que, na origem de dados, com base no especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Este método obtém as informações de esquema da origem de dados utilizando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       Uma <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operação adiciona uma <xref:System.Data.DataTable>para o destino <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Em seguida, adiciona as colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>Propriedades caso existam na origem de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Tem de definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>também configura a <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades, de acordo com as seguintes regras: - se uma ou mais colunas de chaves primárias são devolvidas pela <xref:System.Data.IDbDataAdapter.SelectCommand%2A>são utilizados como as colunas de chave primárias para <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se nenhuma coluna chave primária é devolvida, mas são exclusivas colunas, as colunas exclusivas são utilizadas como a chave primária se, e apenas se, todas as colunas exclusivas nonnullable. Se qualquer uma das colunas são nula, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade não está definida.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se as colunas de chave primárias e colunas exclusivas são devolvidas, as colunas de chave primárias são utilizadas como as colunas de chave primárias <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Tenha em atenção que as chaves primárias e restrições exclusivas são adicionadas para o <xref:System.Data.ConstraintCollection>, de acordo com as regras anteriores, mas outra restrição de tipos não foram adicionados.</xref:System.Data.ConstraintCollection>       Se um único cluster índice é definido uma coluna ou colunas existentes numa tabela de SQL Server e a restrição de chave primária está definida num conjunto separado de colunas, em seguida, os nomes das colunas no índice em cluster vai ser devolvidos. Para devolver o nome ou nomes das colunas de chaves primárias, utilize uma sugestão de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar sugestões de consulta, consulte [sugestão de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Informações da chave primária utilizadas durante <xref:System.Data.Common.DbDataAdapter.Fill%2A>para localizar e substituir quaisquer linhas cujas colunas chaves correspondem.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se não for este o comportamento pretendido, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>sem pedir informações de esquema.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se o <xref:System.Data.IDataAdapter>encontros duplicado colunas ao preencher um <xref:System.Data.DataTable>, gera os nomes das colunas subsequentes, utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado numa tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e etc.). As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       O <xref:System.Data.IDbConnection>objeto associado ao comando selecionado tem de ser válido, mas não é necessário abrir.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, é aberto para obter dados, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Se a ligação está aberta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, é deixado abertas.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o .NET Framework Data Provider para OLE DB obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para obter informações de esquema para vários resultados, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Quando utilizar <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, o .NET Framework Data Provider para o SQL Server acrescenta uma cláusula para navegar para a instrução a ser executada.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O utilizador deve estar ciente das potenciais efeitos secundários, tais como interferências com a utilização de declarações de FMTONLY definido no. Consulte o SQL Server Books Online para obter mais informações."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/visualbasic/5283d285-2680-48b0-856a-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/csharp/5283d285-2680-48b0-856a-_1.cs)]"
  syntax:
    content: public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> para inserir o esquema no."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Um do <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores que especificar como o esquema de inserção."
    return:
      type: System.Data.DataTable[]
      description: "Uma referência a uma coleção de <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos que foram adicionados para o <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Configura o esquema de especificado <xref href=&quot;System.Data.DataTable&quot;> </xref> com base no especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "O método FillSchema obtém o esquema da origem de dados utilizando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> O objeto de ligação associado a <xref:System.Data.IDbDataAdapter.SelectCommand%2A>tem de ser válido, mas não têm de estar aberta.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Se a ligação está fechada antes de é chamado FillSchema, é aberto para obter dados, em seguida, fechado. Se a ligação está aberta antes de é chamado FillSchema, este irá permanecer aberta.       Uma operação FillSchema devolve <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Em seguida, adiciona as colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>Propriedades caso existam na origem de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Tem de definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema também configura a <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades, de acordo com as seguintes regras: - se um <xref:System.Data.DataTable.PrimaryKey%2A>já foi definido para o `DataTable`, ou o `DataTable` contém dados, o `PrimaryKey` não será possível definir a propriedade.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se uma ou mais colunas de chaves primárias são devolvidas pelo <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, são utilizados como as colunas de chave primárias para a `DataTable`.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>      -Se nenhuma coluna chave primária é devolvida, mas são exclusivas colunas, as colunas exclusivas são utilizadas como a chave primária se, e apenas se, todas as colunas exclusivas nonnullable. Se qualquer uma das colunas são nula, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o `PrimaryKey` propriedade não está definida.</xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se as colunas de chave primárias e colunas exclusivas são devolvidas, as colunas de chave primárias são utilizadas como as colunas de chave primárias para a `DataTable`.       Tenha em atenção que as chaves primárias e restrições exclusivas são adicionadas para o <xref:System.Data.ConstraintCollection>, de acordo com as regras anteriores, mas outra restrição de tipos não foram adicionados.</xref:System.Data.ConstraintCollection> Este processo pode necessitar de vários ida e volta ao servidor.       Se um único cluster índice é definido uma coluna ou colunas existentes numa tabela de SQL Server e a restrição de chave primária está definida num conjunto separado de colunas, em seguida, os nomes das colunas no índice em cluster vai ser devolvidos. Para devolver o nome ou nomes das colunas de chaves primárias, utilize uma sugestão de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar sugestões de consulta, consulte [sugestão de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Se o <xref:System.Data.Common.DbDataAdapter>encontros duplicado colunas ao preencher um <xref:System.Data.DataTable>, gera os nomes das colunas subsequentes, utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado numa tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e etc.). As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       FillSchema não devolver quaisquer linhas. Utilize o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método para adicionar as linhas a <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de FillSchema para o .NET Framework Data Provider para OLE DB obtém as informações de esquema para apenas o primeiro resultado. Para obter informações de esquema para vários resultados, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Quando utilizar FillSchema, o .NET Framework Data Provider para o SQL Server acrescenta uma cláusula para navegar para a instrução a ser executada. O utilizador deve estar ciente das potenciais efeitos secundários, tais como interferências com a utilização de declarações de FMTONLY definido no. Consulte o SQL Server Books Online para obter mais informações."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/visualbasic/658ac10a-3a87-4693-8b37-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/csharp/658ac10a-3a87-4693-8b37-_1.cs)]"
  syntax:
    content: public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> para ser preenchidos com o esquema da origem de dados."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Um do <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> que contém informações de esquema devolvidas da origem de dados."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona um <xref href=&quot;System.Data.DataTable&quot;> </xref> para especificado <xref href=&quot;System.Data.DataSet&quot;> </xref> e configura o esquema para que corresponda ao que, na origem de dados, com base no especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Este método obtém as informações de esquema da origem de dados utilizando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       Uma <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operação adiciona uma <xref:System.Data.DataTable>para o destino <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Em seguida, adiciona as colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>Propriedades caso existam na origem de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Tem de definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>também configura a <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades, de acordo com as seguintes regras: - se uma ou mais colunas de chaves primárias são devolvidas pela <xref:System.Data.IDbDataAdapter.SelectCommand%2A>são utilizados como as colunas de chave primárias para <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se nenhuma coluna chave primária é devolvida, mas são exclusivas colunas, as colunas exclusivas são utilizadas como a chave primária se, e apenas se, todas as colunas exclusivas nonnullable. Se qualquer uma das colunas são nula, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade não está definida.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se as colunas de chave primárias e colunas exclusivas são devolvidas, as colunas de chave primárias são utilizadas como as colunas de chave primárias <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Tenha em atenção que as chaves primárias e restrições exclusivas são adicionadas para o <xref:System.Data.ConstraintCollection>, de acordo com as regras anteriores, mas outra restrição de tipos não foram adicionados.</xref:System.Data.ConstraintCollection>       Se um único cluster índice é definido uma coluna ou colunas existentes numa tabela de SQL Server e a restrição de chave primária está definida num conjunto separado de colunas, em seguida, os nomes das colunas no índice em cluster vai ser devolvidos. Para devolver o nome ou nomes das colunas de chaves primárias, utilize uma sugestão de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar sugestões de consulta, consulte [sugestão de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Informações da chave primária utilizadas durante <xref:System.Data.Common.DbDataAdapter.Fill%2A>para localizar e substituir quaisquer linhas cujas colunas chaves correspondem.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se não for este o comportamento pretendido, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>sem pedir informações de esquema.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se o <xref:System.Data.Common.DbDataAdapter>encontros duplicado colunas ao preencher um <xref:System.Data.DataTable>, gera os nomes das colunas subsequentes, utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado numa tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e etc.). As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       O <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>método suporta cenários em que o <xref:System.Data.DataSet>contém vários <xref:System.Data.DataTable>cujos nomes diferem apenas no caso de objetos.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Estas situações, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>efetua uma comparação de maiúsculas e minúsculas para localizar a tabela correspondente e cria uma nova tabela de não existir nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>denomina-se e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome é diferente apenas por caso, que <xref:System.Data.DataTable>é atualizado.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Neste cenário, a comparação é sensível a maiúsculas e minúsculas. O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```O <xref:System.Data.IDbConnection>objeto associado ao comando selecionado tem de ser válido, mas não é necessário abrir.</xref:System.Data.IDbConnection> Se o <xref:System.Data.IDbConnection>está fechado antes <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, é aberto para obter dados, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Se a ligação está aberta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, é deixado abertas.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o .NET Framework Data Provider para OLE DB obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para obter informações de esquema para vários resultados, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Quando utilizar <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, o .NET Framework Data Provider para o SQL Server acrescenta uma cláusula para navegar para a instrução a ser executada.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O utilizador deve estar ciente das potenciais efeitos secundários, tais como interferências com a utilização de declarações de FMTONLY definido no. Consulte o SQL Server Books Online para obter mais informações."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/visualbasic/c7e2b899-0a44-4d9d-9e8d-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/csharp/c7e2b899-0a44-4d9d-9e8d-_1.cs)]"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref> para inserir o esquema no."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Um do <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores que especificar como o esquema de inserção."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a utilizar para mapeamento de tabela."
    return:
      type: System.Data.DataTable[]
      description: "Uma referência a uma coleção de <xref href=&quot;System.Data.DataTable&quot;> </xref> objetos que foram adicionados para o <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Não foi possível localizar uma tabela de origem a partir da qual efetuar get ao esquema."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Configura o esquema de especificado <xref href=&quot;System.Data.DataTable&quot;> </xref> com base no especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref>, cadeia, de comandos e <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>método obtém o esquema a partir da origem de dados utilizando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O objeto de ligação associado a <xref:System.Data.IDbDataAdapter.SelectCommand%2A>tem de ser válido, mas não têm de estar aberta.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Se a ligação está fechada antes <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, é aberto para obter dados, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Se a ligação está aberta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, permanece aberta.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Uma <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operação adiciona uma <xref:System.Data.DataTable>para o destino <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Em seguida, adiciona as colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>Propriedades caso existam na origem de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Tem de definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>também configura a <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades, de acordo com as seguintes regras: - se uma ou mais colunas de chaves primárias são devolvidas pela <xref:System.Data.IDbDataAdapter.SelectCommand%2A>são utilizados como as colunas de chave primárias para <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se nenhuma coluna chave primária é devolvida, mas são exclusivas colunas, as colunas exclusivas são utilizadas como a chave primária se, e apenas se, todas as colunas exclusivas nonnullable. Se qualquer uma das colunas são nula, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade não está definida.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se as colunas de chave primárias e colunas exclusivas são devolvidas, as colunas de chave primárias são utilizadas como as colunas de chave primárias <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Tenha em atenção que as chaves primárias e restrições exclusivas são adicionadas para o <xref:System.Data.ConstraintCollection>, de acordo com as regras anteriores, mas outra restrição de tipos não foram adicionados.</xref:System.Data.ConstraintCollection>       Se um único cluster índice é definido uma coluna ou colunas existentes numa tabela de SQL Server e a restrição de chave primária está definida num conjunto separado de colunas, em seguida, os nomes das colunas no índice em cluster vai ser devolvidos. Para devolver o nome ou nomes das colunas de chaves primárias, utilize uma sugestão de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar sugestões de consulta, consulte [sugestão de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Se o <xref:System.Data.IDataAdapter>encontros duplicado colunas ao preencher um <xref:System.Data.DataTable>, gera os nomes das colunas subsequentes, utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado numa tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e etc.). As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>não devolver quaisquer linhas.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Utilize o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método para adicionar as linhas a <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o .NET Framework Data Provider para OLE DB obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para obter informações de esquema para vários resultados, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Quando utilizar <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, o .NET Framework Data Provider para o SQL Server acrescenta uma cláusula para navegar para a instrução a ser executada.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O utilizador deve estar ciente das potenciais efeitos secundários, tais como interferências com a utilização de declarações de FMTONLY definido no. Consulte o SQL Server Books Online para obter mais informações."
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> para ser preenchidos com o esquema da origem de dados."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Um do <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores."
    - id: command
      type: System.Data.IDbCommand
      description: "A instrução SQL SELECT utilizada para obter linhas da origem de dados."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Um do <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
    return:
      type: System.Data.DataTable
      description: "Um dos <xref href=&quot;System.Data.DataTable&quot;> </xref> devolveu o objeto que contém as informações de esquema da origem de dados."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adiciona um <xref href=&quot;System.Data.DataTable&quot;> </xref> para especificado <xref href=&quot;System.Data.DataSet&quot;> </xref> e configura o esquema para que corresponda ao que, na origem de dados, com base no especificado <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "O <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>método obtém o esquema a partir da origem de dados utilizando o <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O objeto de ligação associado a <xref:System.Data.IDbDataAdapter.SelectCommand%2A>tem de ser válido, mas não têm de estar aberta.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Se a ligação está fechada antes <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, é aberto para obter dados, em seguida, fechado.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Se a ligação está aberta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>é chamado, permanece aberta.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Uma <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operação adiciona uma <xref:System.Data.DataTable>para o destino <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Em seguida, adiciona as colunas para o <xref:System.Data.DataColumnCollection>do <xref:System.Data.DataTable>e configura o seguinte <xref:System.Data.DataColumn>Propriedades caso existam na origem de dados:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Tem de definir <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separadamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>também configura a <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>Propriedades, de acordo com as seguintes regras: - se uma ou mais colunas de chaves primárias são devolvidas pela <xref:System.Data.IDbDataAdapter.SelectCommand%2A>são utilizados como as colunas de chave primárias para <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se nenhuma coluna chave primária é devolvida, mas são exclusivas colunas, as colunas exclusivas são utilizadas como a chave primária se, e apenas se, todas as colunas exclusivas nonnullable. Se qualquer uma das colunas são nula, um <xref:System.Data.UniqueConstraint>é adicionado ao <xref:System.Data.ConstraintCollection>, mas o <xref:System.Data.DataTable.PrimaryKey%2A>propriedade não está definida.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se as colunas de chave primárias e colunas exclusivas são devolvidas, as colunas de chave primárias são utilizadas como as colunas de chave primárias <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Tenha em atenção que as chaves primárias e restrições exclusivas são adicionadas para o <xref:System.Data.ConstraintCollection>, de acordo com as regras anteriores, mas outra restrição de tipos não foram adicionados.</xref:System.Data.ConstraintCollection>       Se um único cluster índice é definido uma coluna ou colunas existentes numa tabela de SQL Server e a restrição de chave primária está definida num conjunto separado de colunas, em seguida, os nomes das colunas no índice em cluster vai ser devolvidos. Para devolver o nome ou nomes das colunas de chaves primárias, utilize uma sugestão de consulta com a instrução SELECT que especifica o nome do índice de chave primária. Para obter mais informações sobre como especificar sugestões de consulta, consulte [sugestão de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Se o <xref:System.Data.IDataAdapter>encontros duplicado colunas ao preencher um <xref:System.Data.DataTable>, gera os nomes das colunas subsequentes, utilizando o padrão &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot;, etc.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se os dados de entrada contém colunas sem nome, estes são colocados no <xref:System.Data.DataSet>, de acordo com o padrão &quot;Coluna1&quot;, &quot;Coluna2&quot; e assim sucessivamente.</xref:System.Data.DataSet> Quando vários conjuntos de resultados são adicionados para o <xref:System.Data.DataSet>cada conjunto de resultados é colocado numa tabela separada.</xref:System.Data.DataSet> Conjuntos de resultados adicionais são denominados acrescentando valores integrais para o nome da tabela especificado (por exemplo, &quot;Tabela&quot;, &quot;Table1&quot;, &quot;Tabela2&quot; e etc.). As aplicações utilizando nomes de coluna e a tabela devem certificar-se de que não ocorrem conflitos com estes padrões de nomenclatura.       O <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>método suporta cenários em que o <xref:System.Data.DataSet>contém vários <xref:System.Data.DataTable>cujos nomes diferem apenas no caso de objetos.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Estas situações, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>efetua uma comparação de maiúsculas e minúsculas para localizar a tabela correspondente e cria uma nova tabela de não existir nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>denomina-se e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome é diferente apenas por caso, que <xref:System.Data.DataTable>é atualizado.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Neste cenário, a comparação é sensível a maiúsculas e minúsculas. O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>não devolver quaisquer linhas.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Utilize o <xref:System.Data.Common.DbDataAdapter.Fill%2A>método para adicionar as linhas a <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Quando o processamento de instruções de SQL de batch que devolvem resultados vários, a implementação de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>para o .NET Framework Data Provider para OLE DB obtém as informações de esquema para apenas o resultado primeiro.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Para obter informações de esquema para vários resultados, utilize <xref:System.Data.Common.DbDataAdapter.Fill%2A>com o <xref:System.Data.MissingSchemaAction>definido como `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Quando utilizar <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, o .NET Framework Data Provider para o SQL Server acrescenta uma cláusula para navegar para a instrução a ser executada.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> O utilizador deve estar ciente das potenciais efeitos secundários, tais como interferências com a utilização de declarações de FMTONLY definido no. Consulte o SQL Server Books Online para obter mais informações."
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> para ser preenchidos com o esquema da origem de dados."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Um do <xref href=&quot;System.Data.SchemaType&quot;> </xref> valores."
    - id: command
      type: System.Data.IDbCommand
      description: "A instrução SQL SELECT utilizada para obter linhas da origem de dados."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a utilizar para mapeamento de tabela."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Um do <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valores."
    return:
      type: System.Data.DataTable[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataTable&quot;> </xref> devolvido de objetos que contêm informações de esquema da origem de dados."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  id: GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Devolve um <xref href=&quot;System.Data.IDataParameter&quot;> </xref> a partir de um dos comandos no lote atual."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método emite <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes de herdar <xref:System.Data.Common.DbDataAdapter>substituir este método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "O índice do comando para obter o parâmetro do."
    - id: parameterIndex
      type: System.Int32
      description: "O índice do parâmetro dentro do comando."
    return:
      type: System.Data.IDataParameter
      description: "O <xref href=&quot;System.Data.IDataParameter&quot;> </xref> especificado."
  overload: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O adaptador não suporta lotes."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Devolve informações sobre uma tentativa de atualização individual dentro de uma atualização em lote maior."
  remarks: "Fornecedores de dados que suportam a lógica de atualização em lote tem de substituir uma série de métodos virtuais em que a <xref:System.Data.Common.DbDataAdapter>classe.</xref:System.Data.Common.DbDataAdapter> `GetBatchedRecordsAffected`representa uma dos métodos virtuais. O `DbDataAdapter` depende da classe `GetBatchedRecordsAffected` para determinar o êxito ou falha de tentativas de atualização individual dentro de um lote de, pelo que pode marcar a cada correspondente <xref:System.Data.DataRow>em conformidade.</xref:System.Data.DataRow>"
  syntax:
    content: protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "O ordinal de coluna baseado em zero do comando individuais dentro do batch."
    - id: recordsAffected
      type: System.Int32
      description: "O número de linhas no arquivo de dados afetados por problema o comando especificado no batch."
    - id: error
      type: System.Exception
      description: "Um <xref:System.Exception>emitida durante a execução do comando especificado.</xref:System.Exception> Devolve <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic) se não exceção é emitida."
    return:
      type: System.Boolean
      description: "Informações sobre uma tentativa de atualização individual dentro de uma atualização em lote maior."
  overload: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém os parâmetros definidos pelo utilizador ao executar uma instrução SQL SELECT."
  syntax:
    content: public override System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "Uma matriz de <xref href=&quot;System.Data.IDataParameter&quot;> </xref> objetos que contém os parâmetros definido pelo utilizador."
  overload: System.Data.Common.DbDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  id: InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inicializa a criação de batches para o <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método emite <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes de herdar <xref:System.Data.Common.DbDataAdapter>substituir este método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void InitializeBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.InitializeBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O adaptador não suporta lotes."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define um comando utilizado para inserir novos registos na origem de dados."
  remarks: "Durante a <xref:System.Data.Common.DbDataAdapter.Update%2A>, se esta propriedade não está definida e informações da chave primária não estão presentes no <xref:System.Data.DataSet>, a <xref:System.Data.IDbDataAdapter.InsertCommand%2A>será gerado automaticamente.</xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand InsertCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizada durante <xref:System.Data.IDataAdapter.Update*>ao inserir registos na origem de dados para novas linhas no conjunto de dados.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gera o <xref uid=&quot;langword_csharp_RowUpdated&quot; name=&quot;RowUpdated&quot; href=&quot;&quot;> </xref> eventos de um fornecedor de dados .NET Framework."
  remarks: 'Gerar um evento invoca o processador de eventos através de um delegado. Para obter uma descrição geral, consulte [NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "A <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gera o <xref uid=&quot;langword_csharp_RowUpdating&quot; name=&quot;RowUpdating&quot; href=&quot;&quot;> </xref> eventos de um fornecedor de dados .NET Framework."
  remarks: 'Gerar um evento invoca o processador de eventos através de um delegado. Para obter uma descrição geral, consulte [NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "Um <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define um comando utilizado para selecionar registos na origem de dados."
  remarks: ''
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_1_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_1_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand SelectCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.IDbCommand&quot;> </xref> que é utilizada durante <xref:System.Data.IDataAdapter.Update*>para selecionar registos a partir da origem de dados para o posicionamento no conjunto de dados.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define uma instrução SQL para eliminar registos de conjunto de dados."
  remarks: "Este membro é uma implementação de membro de interface explícita. Pode ser utilizado apenas quando o <xref:System.Data.Common.DbDataAdapter>instância é convertida para um <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Para obter mais informações, consulte <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizada durante <xref:System.Data.Common.DbDataAdapter.Update*>para eliminar registos na origem de dados para linhas eliminadas no conjunto de dados.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define uma instrução de SQL utilizada para introduzir novos registos para a origem de dados."
  remarks: "Este membro é uma implementação de membro de interface explícita. Pode ser utilizado apenas quando o <xref:System.Data.Common.DbDataAdapter>instância é convertida para um <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Para obter mais informações, consulte <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.</xref:System.Data.IDbDataAdapter.InsertCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizada durante <xref:System.Data.Common.DbDataAdapter.Update*>ao inserir registos na origem de dados para novas linhas no conjunto de dados.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define uma instrução de SQL utilizada para selecionar registos na origem de dados."
  remarks: "Este membro é uma implementação de membro de interface explícita. Pode ser utilizado apenas quando o <xref:System.Data.Common.DbDataAdapter>instância é convertida para um <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Para obter mais informações, consulte <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> que é utilizada durante <xref:System.Data.Common.DbDataAdapter.Update*>para selecionar registos a partir da origem de dados para o posicionamento no conjunto de dados.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define uma instrução de SQL utilizada para atualizar os registos da origem de dados."
  remarks: "Este membro é uma implementação de membro de interface explícita. Pode ser utilizado apenas quando o <xref:System.Data.Common.DbDataAdapter>instância é convertida para um <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Para obter mais informações, consulte <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Um <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizada durante <xref:System.Data.Common.DbDataAdapter.Update*>para atualizar os registos da origem de dados para linhas modificadas no conjunto de dados.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Cria um novo objeto que é uma cópia da instância atual."
  remarks: "Este membro é uma implementação de membro de interface explícita. Pode ser utilizado apenas quando o <xref:System.Data.Common.DbDataAdapter>instância é convertida para um <xref:System.ICloneable>interface.</xref:System.ICloneable> </xref:System.Data.Common.DbDataAdapter>       Para obter mais informações, consulte <xref:System.ICloneable.Clone%2A?displayProperty=fullName>.</xref:System.ICloneable.Clone%2A?displayProperty=fullName>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Um novo objeto que é uma cópia desta instância."
  overload: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  id: TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Termina a criação de batches para o <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "No <xref:System.Data.Common.DbDataAdapter>, este método emite <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Classes de herdar <xref:System.Data.Common.DbDataAdapter>substituir este método para fornecer suporte para lotes.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void TerminateBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.TerminateBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O adaptador não suporta lotes."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  id: Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Atualiza os valores na base de dados, executando as respetivas declarações de inserção, ATUALIZAÇÃO ou eliminação para cada inserir, atualizar ou eliminar linha na matriz especificada no <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Quando uma aplicação chama o <xref:System.Data.Common.DbDataAdapter.Update%2A>método, o <xref:System.Data.Common.DbDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iteratively para cada linha, com base na ordem dos índices configurados no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Por exemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A>poderá executar uma instrução DELETE, seguida de uma instrução INSERT e, em seguida, outra instrução DELETE, devido a ordenação de linhas na <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Deve ser salientado que estas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Uma aplicação pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método em situações em que tem de controlar a sequência de tipos de instrução (por exemplo, inserções antes das atualizações).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [atualizar as origens de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não foram especificadas, o <xref:System.Data.Common.DbDataAdapter.Update%2A>método gera uma exceção.</xref:System.Data.Common.DbDataAdapter.Update%2A> No entanto, pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente as instruções SQL para atualizações de tabela única se definir o `SelectCommand` propriedade de um fornecedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, quaisquer instruções SQL adicionais que não definidas foram geradas pelo **CommandBuilder**. Esta lógica geração necessita de informações de coluna chave estar presente no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O <xref:System.Data.Common.DbDataAdapter.Update%2A>método obtém linhas da tabela listada no mapeamento primeiro antes de efetuar uma atualização.</xref:System.Data.Common.DbDataAdapter.Update%2A> O <xref:System.Data.Common.DbDataAdapter.Update%2A>, em seguida, atualiza a linha com o valor da <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> As linhas adicionais devolvidas são ignoradas.       Após o carregamento de dados novamente para o <xref:System.Data.DataSet>, a <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>o evento é gerado, permitindo que o utilizador inspecionar os reconciliado <xref:System.Data.DataSet>linha e quaisquer parâmetros devolvidos pelo comando de saída.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois de uma linha de atualizações com êxito, as alterações para essa linha são aceites.       Quando utilizar <xref:System.Data.Common.DbDataAdapter.Update%2A>, a ordem de execução é o seguinte: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Os valores existentes no <xref:System.Data.DataRow>são movidas para os valores de parâmetros.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>o evento é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Executa o comando.      4.  Se o comando está definido como `FirstReturnedRecord`, o primeiro devolveu o resultado é colocado na <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se existirem parâmetros de saída, estes são colocados em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>o evento é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado <xref:System.Data.Common.DbDataAdapter>normalmente tem uma coleção de parâmetros associada.</xref:System.Data.Common.DbDataAdapter> Os parâmetros são mapeados para a linha atual através de `SourceColumn` e `SourceVersion` propriedades de um fornecedor de dados de .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.Common.DbDataAdapter>referências para obter os valores de parâmetros para a linha atual.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se o nome da coluna não mapeados antes de quaisquer mapeamentos de tabela tem sido aplicados. Se `SourceColumn` refere-se a uma coluna não existente, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação tomada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Utilize os nomes de coluna de origem e os nomes das tabelas de <xref:System.Data.DataSet>esteja presente nenhum mapeamento. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definido, um mapeamento em falta para um parâmetro de entrada é normalmente o resultado de um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é utilizada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se refere a uma coluna não existente.       O `SourceVersion` propriedade de um fornecedor de dados de .NET Framework `Parameter` classe determina se deve utilizar a versão Original, Current ou Proposed do valor de coluna. Esta capacidade é frequentemente utilizada para incluir valores originais na cláusula WHERE de uma instrução UPDATE para procurar as violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, é emitida uma exceção e a execução da atualização foi descontinuada. Para continuar a operação de atualização sem gerar exceções quando é encontrado um erro, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` antes de chamar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Também pode responder erros numa base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção no `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs>para <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataRow[] dataRows);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataRow&quot;> </xref> objetos utilizados para atualizar a origem de dados."
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Não <xref href=&quot;System.Data.DataRow&quot;> </xref> não existe para atualização.       - ou - não <xref href=&quot;System.Data.DataTable&quot;> </xref> não existe para atualização.       - ou - não <xref href=&quot;System.Data.DataSet&quot;> </xref> existe a utilizar como uma origem."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou numa zero registos afetados."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Atualiza os valores na base de dados, executando as respetivas declarações de inserção, ATUALIZAÇÃO ou eliminação para cada inserir, atualizar ou eliminar linha especificado na <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Quando uma aplicação chama o método de atualização, o <xref:System.Data.Common.DbDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iteratively para cada linha, com base na ordem dos índices configurados no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> Por exemplo, a atualização poderá executar uma instrução DELETE, seguida de uma instrução INSERT e, em seguida, outra instrução DELETE, devido a ordenação de linhas na <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Deve ser salientado que estas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Uma aplicação pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método em situações em que tem de controlar a sequência de tipos de instrução (por exemplo, inserções antes das atualizações).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [atualizar as origens de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não foram especificadas, o método de atualização gera uma exceção. No entanto, pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente as instruções SQL para atualizações de tabela única se definir o `SelectCommand` propriedade de um fornecedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, quaisquer instruções SQL adicionais que não definidas foram geradas pelo **CommandBuilder**. Esta lógica geração necessita de informações de coluna chave estar presente no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O método de atualização obtém linhas da tabela listada no mapeamento primeiro antes de efetuar uma atualização. A atualização, em seguida, atualiza a linha com o valor da <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> As linhas adicionais devolvidas são ignoradas.       Após o carregamento de dados novamente para o <xref:System.Data.DataSet>, a <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>o evento é gerado, permitindo que o utilizador inspecionar os reconciliado <xref:System.Data.DataSet>linha e quaisquer parâmetros devolvidos pelo comando de saída.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois de uma linha de atualizações com êxito, as alterações para essa linha são aceites.       Quando utilizar a atualização, a ordem de execução é o seguinte: 1.  Os valores existentes no <xref:System.Data.DataRow>são movidas para os valores de parâmetros.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>o evento é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Executa o comando.      4.  Se o comando está definido como `FirstReturnedRecord`, em seguida, o primeiro devolveu o resultado é colocado na <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se existirem parâmetros de saída, estes são colocados em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>o evento é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado <xref:System.Data.Common.DbDataAdapter>normalmente tem uma coleção de parâmetros associada.</xref:System.Data.Common.DbDataAdapter> Os parâmetros são mapeados para a linha atual através de `SourceColumn` e `SourceVersion` propriedades de um fornecedor de dados de .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.Common.DbDataAdapter>referências para obter os valores de parâmetros para a linha atual.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se o nome da coluna não mapeados antes de quaisquer mapeamentos de tabela tem sido aplicados. Se `SourceColumn` refere-se a uma coluna não existente, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação tomada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Utilize os nomes de coluna de origem e os nomes das tabelas de <xref:System.Data.DataSet>esteja presente nenhum mapeamento. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definido, um mapeamento em falta para um parâmetro de entrada é normalmente o resultado de um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é utilizada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se refere a uma coluna não existente.       O `SourceVersion` propriedade de um fornecedor de dados de .NET Framework `Parameter` classe determina se deve utilizar a versão Original, Current ou Proposed do valor de coluna. Esta capacidade é frequentemente utilizada para incluir valores originais na cláusula WHERE de uma instrução UPDATE para procurar as violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, é emitida uma exceção e a execução da atualização foi descontinuada. Para continuar a operação de atualização sem gerar exceções quando é encontrado um erro, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` chamar antes de atualização.</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Também pode responder erros numa base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção no `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs>para <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_4_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_4_1.cs)]"
  syntax:
    content: public override int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizado para atualizar a origem de dados."
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou numa zero registos afetados."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  id: Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Atualiza os valores na base de dados, executando as respetivas declarações de inserção, ATUALIZAÇÃO ou eliminação para cada inserir, atualizar ou eliminar linha especificado na <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Quando uma aplicação chama o <xref:System.Data.Common.DbDataAdapter.Update%2A>método, o <xref:System.Data.Common.DbDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iteratively para cada linha, com base na ordem dos índices configurados no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Por exemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A>poderá executar uma instrução DELETE, seguida de uma instrução INSERT e, em seguida, outra instrução DELETE, devido a ordenação de linhas na <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Deve ser salientado que estas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Uma aplicação pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método em situações em que tem de controlar a sequência de tipos de instrução (por exemplo, inserções antes das atualizações).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [atualizar as origens de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não foram especificadas, o <xref:System.Data.Common.DbDataAdapter.Update%2A>método gera uma exceção.</xref:System.Data.Common.DbDataAdapter.Update%2A> No entanto, pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente as instruções SQL para atualizações de tabela única se definir o `SelectCommand` propriedade de um fornecedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, quaisquer instruções SQL adicionais que não definidas foram geradas pelo **CommandBuilder**. Esta lógica geração necessita de informações de coluna chave estar presente no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O <xref:System.Data.Common.DbDataAdapter.Update%2A>método obtém linhas da tabela listada no mapeamento primeiro antes de efetuar uma atualização.</xref:System.Data.Common.DbDataAdapter.Update%2A> O <xref:System.Data.Common.DbDataAdapter.Update%2A>, em seguida, atualiza a linha com o valor da <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> As linhas adicionais devolvidas são ignoradas.       Após o carregamento de dados novamente para o <xref:System.Data.DataSet>, a <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>o evento é gerado, permitindo que o utilizador inspecionar os reconciliado <xref:System.Data.DataSet>linha e quaisquer parâmetros devolvidos pelo comando de saída.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois de uma linha de atualizações com êxito, as alterações para essa linha são aceites.       Quando utilizar <xref:System.Data.Common.DbDataAdapter.Update%2A>, a ordem de execução é o seguinte: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Os valores existentes no <xref:System.Data.DataRow>são movidas para os valores de parâmetros.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>o evento é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Executa o comando.      4.  Se o comando está definido como `FirstReturnedRecord`, em seguida, o primeiro devolveu o resultado é colocado na <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se existirem parâmetros de saída, estes são colocados em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>o evento é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado <xref:System.Data.Common.DbDataAdapter>normalmente tem uma coleção de parâmetros associada.</xref:System.Data.Common.DbDataAdapter> Os parâmetros são mapeados para a linha atual através de `SourceColumn` e `SourceVersion` propriedades de um fornecedor de dados de .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.Common.DbDataAdapter>referências para obter os valores de parâmetros para a linha atual.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se o nome da coluna não mapeados antes de quaisquer mapeamentos de tabela tem sido aplicados. Se `SourceColumn` refere-se a uma coluna não existente, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação tomada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Utilize os nomes de coluna de origem e os nomes das tabelas de <xref:System.Data.DataSet>esteja presente nenhum mapeamento. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definido, um mapeamento em falta para um parâmetro de entrada é normalmente o resultado de um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é utilizada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se refere a uma coluna não existente.       O `SourceVersion` propriedade de um fornecedor de dados de .NET Framework `Parameter` classe determina se deve utilizar a versão Original, Current ou Proposed do valor de coluna. Esta capacidade é frequentemente utilizada para incluir valores originais na cláusula WHERE de uma instrução UPDATE para procurar as violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, é emitida uma exceção e a execução da atualização foi descontinuada. Para continuar a operação de atualização sem gerar exceções quando é encontrado um erro, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` antes de chamar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Também pode responder erros numa base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção no `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs>para <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_1_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_1_1.cs)]"
  syntax:
    content: public int Update (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "O <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizado para atualizar a origem de dados."
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Não <xref href=&quot;System.Data.DataRow&quot;> </xref> não existe para atualização.       - ou - não <xref href=&quot;System.Data.DataTable&quot;> </xref> não existe para atualização.       - ou - não <xref href=&quot;System.Data.DataSet&quot;> </xref> existe a utilizar como uma origem."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou numa zero registos afetados."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  id: Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Atualiza os valores na base de dados, executando as respetivas declarações de inserção, ATUALIZAÇÃO ou eliminação para cada inserir, atualizar ou eliminar linha na matriz especificada de <xref href=&quot;System.Data.DataSet&quot;> </xref> objetos."
  remarks: "Quando uma aplicação chama o <xref:System.Data.Common.DbDataAdapter.Update%2A>método, o <xref:System.Data.Common.DbDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iteratively para cada linha, com base na ordem dos índices configurados no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Por exemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A>poderá executar uma instrução DELETE, seguida de uma instrução INSERT e, em seguida, outra instrução DELETE, devido a ordenação de linhas na <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Deve ser salientado que estas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Uma aplicação pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método em situações em que tem de controlar a sequência de tipos de instrução (por exemplo, inserções antes das atualizações).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [atualizar as origens de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não foram especificadas, o <xref:System.Data.Common.DbDataAdapter.Update%2A>método gera uma exceção.</xref:System.Data.Common.DbDataAdapter.Update%2A> No entanto, pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente as instruções SQL para atualizações de tabela única se definir o `SelectCommand` propriedade de um fornecedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, quaisquer instruções SQL adicionais que não definidas foram geradas pelo **CommandBuilder**. Esta lógica geração necessita de informações de coluna chave estar presente no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O <xref:System.Data.Common.DbDataAdapter.Update%2A>método obtém linhas da tabela listada no mapeamento primeiro antes de efetuar uma atualização.</xref:System.Data.Common.DbDataAdapter.Update%2A> O <xref:System.Data.Common.DbDataAdapter.Update%2A>, em seguida, atualiza a linha com o valor da <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> As linhas adicionais devolvidas são ignoradas.       Após o carregamento de dados novamente para o <xref:System.Data.DataSet>, a <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>o evento é gerado, permitindo que o utilizador inspecionar os reconciliado <xref:System.Data.DataSet>linha e quaisquer parâmetros devolvidos pelo comando de saída.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois de uma linha de atualizações com êxito, as alterações para essa linha são aceites.       Quando utilizar <xref:System.Data.Common.DbDataAdapter.Update%2A>, a ordem de execução é o seguinte: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Os valores existentes no <xref:System.Data.DataRow>são movidas para os valores de parâmetros.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>o evento é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Executa o comando.      4.  Se o comando está definido como `FirstReturnedRecord`, em seguida, o primeiro devolveu o resultado é colocado na <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se existirem parâmetros de saída, estes são colocados em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>o evento é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado <xref:System.Data.Common.DbDataAdapter>normalmente tem uma coleção de parâmetros associada.</xref:System.Data.Common.DbDataAdapter> Os parâmetros são mapeados para a linha atual através de `SourceColumn` e `SourceVersion` propriedades de um fornecedor de dados de .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.Common.DbDataAdapter>referências para obter os valores de parâmetros para a linha atual.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se o nome da coluna não mapeados antes de quaisquer mapeamentos de tabela tem sido aplicados. Se `SourceColumn` refere-se a uma coluna não existente, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação tomada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Utilize os nomes de coluna de origem e os nomes das tabelas de <xref:System.Data.DataSet>esteja presente nenhum mapeamento. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definido, um mapeamento em falta para um parâmetro de entrada é normalmente o resultado de um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é utilizada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se refere a uma coluna não existente.       O `SourceVersion` propriedade de um fornecedor de dados de .NET Framework `Parameter` classe determina se deve utilizar a versão Original, Current ou Proposed do valor de coluna. Esta capacidade é frequentemente utilizada para incluir valores originais na cláusula WHERE de uma instrução UPDATE para procurar as violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, é emitida uma exceção e a execução da atualização foi descontinuada. Para continuar a operação de atualização sem gerar exceções quando é encontrado um erro, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` antes de chamar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Também pode responder erros numa base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção no `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs>para <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  syntax:
    content: protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Uma matriz de <xref href=&quot;System.Data.DataRow&quot;> </xref> objetos utilizados para atualizar a origem de dados."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "O <xref:System.Data.IDataAdapter.TableMappings*>coleção a utilizar.</xref:System.Data.IDataAdapter.TableMappings*>"
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Não <xref href=&quot;System.Data.DataRow&quot;> </xref> não existe para atualização.       - ou - não <xref href=&quot;System.Data.DataTable&quot;> </xref> não existe para atualização.       - ou - não <xref href=&quot;System.Data.DataSet&quot;> </xref> existe a utilizar como uma origem."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou numa zero registos afetados."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  id: Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Atualiza os valores na base de dados, executando as respetivas declarações de inserção, ATUALIZAÇÃO ou eliminação para cada inserir, atualizar ou eliminar linha no <xref href=&quot;System.Data.DataSet&quot;> </xref> com especificado <xref href=&quot;System.Data.DataTable&quot;> </xref> nome."
  remarks: "Quando uma aplicação chama o <xref:System.Data.Common.DbDataAdapter.Update%2A>método, o <xref:System.Data.Common.DbDataAdapter>examina o <xref:System.Data.DataRow.RowState%2A>propriedade e executa as instruções INSERT, UPDATE ou DELETE necessárias iteratively para cada linha, com base na ordem dos índices configurados no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Por exemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A>poderá executar uma instrução DELETE, seguida de uma instrução INSERT e, em seguida, outra instrução DELETE, devido a ordenação de linhas na <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Deve ser salientado que estas instruções não são executadas como um processo em lote; cada linha é atualizada individualmente. Uma aplicação pode chamar o <xref:System.Data.DataSet.GetChanges%2A>método em situações onde tem de controlar a sequência de tipos de instrução (por exemplo, INSIRA antes da ATUALIZAÇÃO).</xref:System.Data.DataSet.GetChanges%2A> Para obter mais informações, consulte [atualizar as origens de dados com DataAdapters](~/add/includes/ajax-current-ext-md.md).       Se as instruções INSERT, UPDATE ou DELETE não foram especificadas, o <xref:System.Data.Common.DbDataAdapter.Update%2A>método gera uma exceção.</xref:System.Data.Common.DbDataAdapter.Update%2A> No entanto, pode criar um <xref:System.Data.SqlClient.SqlCommandBuilder>ou <xref:System.Data.OleDb.OleDbCommandBuilder>objeto para gerar automaticamente as instruções SQL para atualizações de tabela única se definir o `SelectCommand` propriedade de um fornecedor de dados .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Em seguida, quaisquer instruções SQL adicionais que não definidas foram geradas pelo **CommandBuilder**. Esta lógica geração necessita de informações de coluna chave estar presente no <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Para obter mais informações consulte [gerar comandos com CommandBuilders](~/add/includes/ajax-current-ext-md.md).       O <xref:System.Data.Common.DbDataAdapter.Update%2A>método suporta cenários em que o <xref:System.Data.DataSet>contém vários <xref:System.Data.DataTable>cujos nomes diferem apenas no caso de objetos.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> Quando várias tabelas com o mesmo nome, mas com maiúsculas e minúsculas diferentes, existem num `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A>efetua uma comparação de maiúsculas e minúsculas para localizar a tabela correspondente e gera uma exceção não existir nenhuma correspondência exata.</xref:System.Data.Common.DbDataAdapter.Update%2A> O seguinte código c# ilustra este comportamento.      ```   DataSet ds = new DataSet();    ds.Tables.Add(&quot;aaa&quot;);    ds.Tables.Add(&quot;AAA&quot;);    adapter.Update(ds, &quot;aaa&quot;); // Updates &quot;aaa&quot;, which already exists in the DataSet.    adapter.Update(ds, &quot;AAA&quot;); // Updates &quot;AAA&quot;, which already exists in the DataSet.       adapter.Update(ds, &quot;Aaa&quot;); // Results in an exception.   ```Se <xref:System.Data.Common.DbDataAdapter.Update%2A>denomina-se e o <xref:System.Data.DataSet>contém apenas um <xref:System.Data.DataTable>cujo nome é diferente apenas por caso, que <xref:System.Data.DataTable>é atualizado.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> Neste cenário, a comparação é sensível a maiúsculas e minúsculas. O seguinte código c# ilustra este comportamento.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Update(dataset, &quot;AAA&quot;); // Updates table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```O <xref:System.Data.Common.DbDataAdapter.Update%2A>método obtém linhas da tabela listada no mapeamento primeiro antes de efetuar uma atualização.</xref:System.Data.Common.DbDataAdapter.Update%2A> O <xref:System.Data.Common.DbDataAdapter.Update%2A>, em seguida, atualiza a linha com o valor da <xref:System.Data.IDbCommand.UpdatedRowSource%2A>propriedade.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> As linhas adicionais devolvidas são ignoradas.       Após o carregamento de dados novamente para o <xref:System.Data.DataSet>, a <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>o evento é gerado, permitindo que o utilizador inspecionar os reconciliado <xref:System.Data.DataSet>linha e quaisquer parâmetros devolvidos pelo comando de saída.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Depois de uma linha de atualizações com êxito, as alterações para essa linha são aceites.       Quando utilizar <xref:System.Data.Common.DbDataAdapter.Update%2A>, a ordem de execução é o seguinte: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Os valores existentes no <xref:System.Data.DataRow>são movidas para os valores de parâmetros.</xref:System.Data.DataRow>      2.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>o evento é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Executa o comando.      4.  Se o comando está definido como `FirstReturnedRecord`, em seguida, o primeiro devolveu o resultado é colocado na <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se existirem parâmetros de saída, estes são colocados em <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  O <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>o evento é gerado.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>é chamado.</xref:System.Data.DataRow.AcceptChanges%2A>       Cada comando associado <xref:System.Data.Common.DbDataAdapter>normalmente tem uma coleção de parâmetros associada.</xref:System.Data.Common.DbDataAdapter> Os parâmetros são mapeados para a linha atual através de `SourceColumn` e `SourceVersion` propriedades de um fornecedor de dados de .NET Framework `Parameter` classe. `SourceColumn`refere-se a um <xref:System.Data.DataTable>coluna que o <xref:System.Data.Common.DbDataAdapter>referências para obter os valores de parâmetros para a linha atual.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`refere-se o nome da coluna não mapeados antes de quaisquer mapeamentos de tabela tem sido aplicados. Se `SourceColumn` refere-se a uma coluna não existente, a ação tomada depende de um dos seguintes <xref:System.Data.MissingMappingAction>valores.</xref:System.Data.MissingMappingAction>      | Valor de enumeração | Ação tomada |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Utilize os nomes de coluna de origem e os nomes das tabelas de <xref:System.Data.DataSet>esteja presente nenhum mapeamento. |   | `MissingMappingAction.Ignore`| A <xref:System.SystemException>é gerado.</xref:System.SystemException> </xref:System.Data.DataSet> Quando os mapeamentos são explicitamente definido, um mapeamento em falta para um parâmetro de entrada é normalmente o resultado de um erro. |   | `MissingMappingAction.Error`| É gerado um <xref:System.SystemException>. |       O `SourceColumn` propriedade também é utilizada para mapear o valor de saída ou parâmetros de entrada/saída de volta para o `DataSet`.</xref:System.SystemException> Uma exceção é gerada se refere a uma coluna não existente.       O `SourceVersion` propriedade de um fornecedor de dados de .NET Framework `Parameter` classe determina se deve utilizar a versão Original, Current ou Proposed do valor de coluna. Esta capacidade é frequentemente utilizada para incluir valores originais na cláusula WHERE de uma instrução UPDATE para procurar as violações de simultaneidade otimista.      > [!NOTE] > Se ocorrer um erro ao atualizar uma linha, é emitida uma exceção e a execução da atualização foi descontinuada. Para continuar a operação de atualização sem gerar exceções quando é encontrado um erro, defina o <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>propriedade `true` antes de chamar <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Também pode responder erros numa base por linha dentro de `RowUpdated` eventos de um DataAdapter. Para continuar a operação de atualização sem gerar uma exceção no `RowUpdated` evento, defina a <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>propriedade de <xref:System.Data.Common.RowUpdatedEventArgs>para <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/csharp/m-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> a utilizar para atualizar a origem de dados."
    - id: srcTable
      type: System.String
      description: "O nome da tabela de origem a utilizar para mapeamento de tabela."
    return:
      type: System.Int32
      description: "O número de linhas atualizadas com êxito a partir de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O <xref href=&quot;System.Data.DataSet&quot;> </xref> é inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A tabela de origem é inválida."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Uma tentativa de executar uma instrução INSERT, UPDATE ou DELETE resultou numa zero registos afetados."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  id: UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define um valor que ativa ou desativa o suporte de processamento em lote e especifica o número de comandos que podem ser executadas num batch."
  remarks: "Utilize a propriedade de UpdateBatchSize para atualizar uma origem de dados com alterações de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Se o fornecedor de dados suporta o processamento em lote, isto pode aumentar o desempenho da aplicação, reduzindo o número de ida e volta ao servidor. ADO.NET 2.0, esta propriedade é suportada para os fornecedores de dados .NET para SQL Server (SqlClient) e Oracle (OracleClient).       Executar um lote extremamente grande pode diminuir o desempenho. Por conseguinte, deverá testar para a definição de tamanho de lote ideal antes de implementar a aplicação.       Um <xref:System.ArgumentOutOfRangeException>será emitida se o valor estiver definido como um número inferior a zero.</xref:System.ArgumentOutOfRangeException>"
  syntax:
    content: public virtual int UpdateBatchSize { get; set; }
    return:
      type: System.Int32
      description: "O número de linhas a processar por lote.       <table><thead><tr><th> O valor é       </th><th> Efeito       </th></tr></thead><tbody><tr><td> 0       </td><td> Não há nenhum limite no tamanho de lote.       </td></tr><tr><td> 1       </td><td> Desativa a atualização do batch.       </td></tr><tr><td> &gt; 1       </td><td> As alterações são enviadas através de lotes de UpdateBatchSize operações de cada vez.       </td></tr></tbody></table>       Quando definir esta opção para um valor diferente de 1, todos os comandos associados a <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> tem de ter os respetivos <> </> *> propriedade definida como * *nenhum* * ou * *OutputParameters**. Caso contrário, será emitida uma exceção."
  overload: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Obtém ou define um comando utilizado para atualizar os registos da origem de dados."
  remarks: "Durante a <xref:System.Data.Common.DbDataAdapter.Update%2A>, se esta propriedade não está definida e informações da chave primária não estão presentes no <xref:System.Data.DataSet>, a <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>será gerado automaticamente.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizada durante <xref:System.Data.IDataAdapter.Update*>para atualizar os registos da origem de dados para linhas modificadas no conjunto de dados.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.Common.DataAdapter
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DbDataAdapter.#ctor
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
- uid: System.Data.IDataParameter
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.#ctor*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch
  nameWithType: DbDataAdapter.AddToBatch
- uid: System.Data.Common.DbDataAdapter.ClearBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch
  nameWithType: DbDataAdapter.ClearBatch
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.Common.DbDataAdapter.DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.Dispose*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DbDataAdapter.Dispose
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch
  nameWithType: DbDataAdapter.ExecuteBatch
- uid: System.Data.Common.DbDataAdapter.Fill*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: DbDataAdapter.Fill
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DbDataAdapter.FillSchema
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter
  nameWithType: DbDataAdapter.GetBatchedParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected
- uid: System.Data.Common.DbDataAdapter.GetFillParameters*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DbDataAdapter.GetFillParameters
- uid: System.Data.Common.DbDataAdapter.InitializeBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching
  nameWithType: DbDataAdapter.InitializeBatching
- uid: System.Data.Common.DbDataAdapter.InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: DbDataAdapter.OnRowUpdated
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: DbDataAdapter.OnRowUpdating
- uid: System.Data.Common.DbDataAdapter.SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: DbDataAdapter.System.ICloneable.Clone
- uid: System.Data.Common.DbDataAdapter.TerminateBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching
  nameWithType: DbDataAdapter.TerminateBatching
- uid: System.Data.Common.DbDataAdapter.Update*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update
  nameWithType: DbDataAdapter.Update
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
