### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbDataAdapter
  id: DbDataAdapter
  children:
  - System.Data.Common.DbDataAdapter.#ctor
  - System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.DeleteCommand
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.InsertCommand
  - System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbDataAdapter.SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.Data.Common.DbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
  type: Class
  summary: "Aids implementation of the <xref href=&quot;System.Data.IDbDataAdapter&quot;></xref> interface. Inheritors of DbDataAdapter implement a set of functions to provide strong typing, but inherit most of the functionality needed to fully implement a **DataAdapter**."
  remarks: "The DbDataAdapter class inherits from the <xref:System.Data.Common.DataAdapter> class and helps a class implement a **DataAdapter** designed for use with a relational database.       An application does not create an instance of the DbDataAdapter interface directly, but creates an instance of a class that inherits <xref:System.Data.IDbDataAdapter> and DbDataAdapter.       Classes that inherit DbDataAdapter must implement the inherited members, and typically define additional members to add provider-specific functionality. For example, the DbDataAdapter class defines the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property, and the DbDataAdapter interface defines eight overloads of the <xref:System.Data.IDataAdapter.Fill%2A> method. In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method, and also defines two additional overloads of <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> that take an ADO Recordset object as a parameter."
  syntax:
    content: 'public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  implements:
  - System.Data.IDbDataAdapter
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initializes a new instance of a **DataAdapter** class."
  remarks: "When you create an instance of <xref:System.Data.Common.DbDataAdapter>, the following read/write properties are set to the following initial values.      |Properties|Initial value|   |----------------|-------------------|   |<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|A new <xref:System.Data.IDbCommand>.|   |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|   |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|       You can change the value of any of these properties through a separate call to the property."
  syntax:
    content: protected DbDataAdapter ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  id: '#ctor(System.Data.Common.DbDataAdapter)'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initializes a new instance of a <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;></xref> class from an existing object of the same type."
  remarks: "This overload of the <xref:System.Data.Common.DbDataAdapter> constructor is designed for use by a .NET Framework data provider when implementing a similar constructor for use in a clone implementation."
  syntax:
    content: protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "A <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;></xref> object used to create the new <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  id: AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds a <xref href=&quot;System.Data.IDbCommand&quot;></xref> to the current batch."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."
  syntax:
    content: protected virtual int AddToBatch (System.Data.IDbCommand command);
    parameters:
    - id: command
      type: System.Data.IDbCommand
      description: "The <xref href=&quot;System.Data.IDbCommand&quot;></xref> to add to the batch."
    return:
      type: System.Int32
      description: "The number of commands in the batch before adding the <xref href=&quot;System.Data.IDbCommand&quot;></xref>."
  overload: System.Data.Common.DbDataAdapter.AddToBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The adapter does not support batches."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  id: ClearBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Removes all <xref href=&quot;System.Data.IDbCommand&quot;></xref> objects from the batch."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."
  syntax:
    content: protected virtual void ClearBatch ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.ClearBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The adapter does not support batches."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;></xref> class."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "The <xref href=&quot;System.Data.DataRow&quot;></xref> used to update the data source."
    - id: command
      type: System.Data.IDbCommand
      description: "The <xref href=&quot;System.Data.IDbCommand&quot;></xref> executed during the <xref:System.Data.IDataAdapter.Update*>."
    - id: statementType
      type: System.Data.StatementType
      description: "Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "A new instance of the <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;></xref> class."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;></xref> class."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "The <xref href=&quot;System.Data.DataRow&quot;></xref> that updates the data source."
    - id: command
      type: System.Data.IDbCommand
      description: "The <xref href=&quot;System.Data.IDbCommand&quot;></xref> to execute during the <xref:System.Data.IDataAdapter.Update*>."
    - id: statementType
      type: System.Data.StatementType
      description: "Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "A new instance of the <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;></xref> class."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  id: DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "The default name used by the <xref href=&quot;System.Data.Common.DataAdapter&quot;></xref> object for table mappings."
  remarks: "&quot;Table&quot; is the default name used by the <xref:System.Data.Common.DataAdapter> object for table mappings.       DefaultSourceTableName is when an application adds a table mapping to be used with <xref:System.Data.Common.DbDataAdapter.Fill%2A>, but does not specify a <xref:System.Data.DataTable> name."
  syntax:
    content: public const string DefaultSourceTableName;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets a command for deleting records from the data set."
  remarks: "During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> is automatically generated."
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_3_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "An <xref href=&quot;System.Data.IDbCommand&quot;></xref> used during <xref:System.Data.IDataAdapter.Update*> to delete records in the data source for deleted rows in the data set."
  overload: System.Data.Common.DbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Data.Common.DbDataAdapter&quot;></xref> and optionally releases the managed resources."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.Data.Common.DbDataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  id: ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Executes the current batch."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."
  syntax:
    content: protected virtual int ExecuteBatch ();
    parameters: []
    return:
      type: System.Int32
      description: "The return value from the last command in the batch."
  overload: System.Data.Common.DbDataAdapter.ExecuteBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  remarks: "The Fill method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before Fill is called, it is opened to retrieve data and then closed. If the connection is open before Fill is called, it remains open.       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on.       When the query specified returns multiple results, the result set for each row returning query is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on). Because no table is created for a query that does not return rows, if you process an insert query followed by a select query, the table created for the select query is named &quot;Table&quot; because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as batch SQL statements, if one of the results contains an error, all subsequent results are skipped and are not added to the <xref:System.Data.DataSet>.       When using subsequent Fill calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:      1.  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.      2.  The **Key** column information must be present.       If primary key information is present, any duplicate rows are reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use Fill with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."
  syntax:
    content: public override int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;></xref> to fill with records and, if necessary, schema."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataSet&quot;></xref>. This does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  id: Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in a specified range in the <xref href=&quot;System.Data.DataSet&quot;></xref> to match those in the data source using the <xref href=&quot;System.Data.DataTable&quot;></xref> name."
  remarks: "The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table.       The overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataTable` as a parameter only obtains the first result. Use an overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataSet` as a parameter to obtain multiple results.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);    dataset.Tables.Add(&quot;AAA&quot;);    adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.       adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.Fill%2A> and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result."
  syntax:
    content: public int Fill (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "The name of the <xref href=&quot;System.Data.DataTable&quot;></xref> to use for table mapping."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataSet&quot;></xref>. This does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source table is invalid."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  id: Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in the <xref href=&quot;System.Data.DataSet&quot;></xref> to match those in the data source using the <xref href=&quot;System.Data.DataSet&quot;></xref> and <xref href=&quot;System.Data.DataTable&quot;></xref> names."
  remarks: "The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on.       When the query specified returns multiple results, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on). Since no table is created for a query that does not return rows, if you were to process an insert query followed by a select query, the table created for the select query would be named &quot;Table&quot;, because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, be aware of the following:      -   If one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.       When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:      1.  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.      2.  The **Key** column information must be present. If primary key information is present, any duplicate rows are reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see[Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with rows from the categories table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_3_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_3_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;></xref> to fill with records and, if necessary, schema."
    - id: srcTable
      type: System.String
      description: "The name of the source table to use for table mapping."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataSet&quot;></xref>. This does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "The source table is invalid."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in a <xref href=&quot;System.Data.DataTable&quot;></xref> to match those in the data source using the specified <xref href=&quot;System.Data.DataTable&quot;></xref>, <xref href=&quot;System.Data.IDbCommand&quot;></xref> and <xref href=&quot;System.Data.CommandBehavior&quot;></xref>."
  remarks: "The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to the specified destination <xref:System.Data.DataTable> object in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> object if it does not already exist. When creating a <xref:System.Data.DataTable> object, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on.       The overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataTable` as a parameter only obtains the first result. Use an overload of <xref:System.Data.Common.DbDataAdapter.Fill%2A> that takes `DataSet` as a parameter to obtain multiple results.       You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;></xref> to fill with records and, if necessary, schema."
    - id: command
      type: System.Data.IDbCommand
      description: "The SQL SELECT statement used to retrieve rows from the data source."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "One of the <xref href=&quot;System.Data.CommandBehavior&quot;></xref> values."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataTable&quot;></xref>. This does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  id: Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in a <xref href=&quot;System.Data.DataTable&quot;></xref> to match those in the data source starting at the specified record and retrieving up to the specified maximum number of records."
  remarks: "The <xref:System.Data.Common.DataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DataAdapter.Fill%2A> is called, it is opened to retrieve data, and then it is closed. If the connection is open before <xref:System.Data.Common.DataAdapter.Fill%2A> is called, it remains open.       The <xref:System.Data.Common.DataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).       If the data adapter encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on. When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statements, if one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.       You can use the <xref:System.Data.Common.DataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`."
  syntax:
    content: public int Fill (int startRecord, int maxRecords, System.Data.DataTable[] dataTables);
    parameters:
    - id: startRecord
      type: System.Int32
      description: "The zero-based record number to start with."
    - id: maxRecords
      type: System.Int32
      description: "The maximum number of records to retrieve."
    - id: dataTables
      type: System.Data.DataTable[]
      description: "The <xref href=&quot;System.Data.DataTable&quot;></xref> objects to fill from the data source."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataTable&quot;></xref>. This value does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in a specified range in the <xref href=&quot;System.Data.DataSet&quot;></xref> to match those in the data source using the <xref href=&quot;System.Data.DataSet&quot;></xref> and <xref href=&quot;System.Data.DataTable&quot;></xref> names."
  remarks: "A `maxRecords` value of 0 gets all records found after the start record. If `maxRecords` is greater than the number of remaining rows, only the remaining rows are returned, and no error is issued.       If the corresponding select command is a statement returning multiple results, <xref:System.Data.Common.DbDataAdapter.Fill%2A> only applies `maxRecords` to the first result.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the SELECT statement must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data and then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, but no exception is raised.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on.       When the query specified returns multiple results, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on). Because no table is created for a query that does not return rows, if you process an insert query followed by a select query, the table created for the select query is named &quot;Table&quot;, because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.       When the SELECT statement used to populate the <xref:System.Data.DataSet> returns multiple results, such as batch SQL statements, be aware of the following:      -   When processing multiple results from a batch SQL statement, `maxRecords` only applies to the first result. The same is true for rows containing chaptered results (.NET Framework Data Provider for OLE DB only). The top level result is limited by `maxRecords`, but all child rows are added.      -   If one of the results contains an error, all subsequent results are skipped and not added to the <xref:System.Data.DataSet>.       When using subsequent <xref:System.Data.Common.DbDataAdapter.Fill%2A> calls to refresh the contents of the <xref:System.Data.DataSet>, two conditions must be met:      1.  The SQL statement should match the one initially used to populate the <xref:System.Data.DataSet>.      2.  The **Key** column information must be present.       If primary key information is present, any duplicate rows will be reconciled and only appear once in the <xref:System.Data.DataTable> that corresponds to the <xref:System.Data.DataSet>. Primary key information may be set either through <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, by specifying the <xref:System.Data.DataTable.PrimaryKey%2A> property of the <xref:System.Data.DataTable>, or by setting the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property to `AddWithKey`.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see [Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.      > [!NOTE] >  The `DataSet` will not contain more than the number of records indicated by `maxRecords`. However, the entire result set generated by the query is still returned from the server."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with 15 rows, beginning at row 10, from the **Categories** table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/visualbasic/db016a7d-8591-46f9-abcc-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/csharp/db016a7d-8591-46f9-abcc-_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;></xref> to fill with records and, if necessary, schema."
    - id: startRecord
      type: System.Int32
      description: "The zero-based record number to start with."
    - id: maxRecords
      type: System.Int32
      description: "The maximum number of records to retrieve."
    - id: srcTable
      type: System.String
      description: "The name of the source table to use for table mapping."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataSet&quot;></xref>. This does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> is invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source table is invalid.       -or-       The connection is invalid."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "The connection could not be found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>startRecord</code> parameter is less than 0.       -or-       The <code>maxRecords</code> parameter is less than 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in a specified range in the <xref href=&quot;System.Data.DataSet&quot;></xref> to match those in the data source using the <xref href=&quot;System.Data.DataSet&quot;></xref> and <xref href=&quot;System.Data.DataTable&quot;></xref> names."
  remarks: "A `maxRecords` value of 0 gets all records found after the start record. If `maxRecords` is greater than the number of remaining rows, only the remaining rows are returned and no error is issued.       The Fill method retrieves the data from the data source using a SELECT statement. The <xref:System.Data.IDbConnection> object associated with the SELECT statement must be valid, but it does not need to be open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       If a command does not return any rows, no tables are added to the <xref:System.Data.DataSet>, but no exception is raised.       If the <xref:System.Data.Common.DbDataAdapter> object encounters duplicate columns while populating a <xref:System.Data.DataTable>, it will generate names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on.       When the query specified returns multiple results, each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on). Since no table is created for a query that does not return rows, if you were to process an insert query followed by a select query, the table created for the select query would be named &quot;Table&quot;, because it is the first table created. Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The Fill method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       If an error or an exception is encountered while populating the data tables, rows added prior to the occurrence of the error remain in the data tables. The remainder of the operation is aborted.       When the SELECT statement used to populate the <xref:System.Data.DataTable> objects returns multiple results, such as a batch SQL statement, be aware of the following:      -   When processing multiple results from a batch SQL statement, `maxRecords` only applies to the first result. The same is true for rows containing chaptered results (.NET Framework Data Provider for OLE DB only). The top level result is limited by `maxRecords`, but all child rows are added.      -   If one of the results contains an error, all subsequent results are skipped.      > [!NOTE] >  The `DataSet` will not contain more than the number of records indicated by `maxRecords`. However, the entire resultset generated by the query is still returned from the server."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "The <xref href=&quot;System.Data.DataTable&quot;></xref> objects to fill from the data source."
    - id: startRecord
      type: System.Int32
      description: "The zero-based record number to start with."
    - id: maxRecords
      type: System.Int32
      description: "The maximum number of records to retrieve."
    - id: command
      type: System.Data.IDbCommand
      description: "The <xref href=&quot;System.Data.IDbCommand&quot;></xref> executed to fill the <xref href=&quot;System.Data.DataTable&quot;></xref> objects."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "One of the <xref href=&quot;System.Data.CommandBehavior&quot;></xref> values."
    return:
      type: System.Int32
      description: "The number of rows added to or refreshed in the data tables."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> is invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source table is invalid.       -or-       The connection is invalid."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "The connection could not be found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>startRecord</code> parameter is less than 0.       -or-       The <code>maxRecords</code> parameter is less than 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds or refreshes rows in a specified range in the <xref href=&quot;System.Data.DataSet&quot;></xref> to match those in the data source using the <xref href=&quot;System.Data.DataSet&quot;></xref> and source table names, command string, and command behavior."
  remarks: "The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property. The connection object associated with the SELECT statement must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called, it remains open.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist. When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.Common.DbDataAdapter.Fill%2A> operation normally creates only column name metadata. However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.Common.DbDataAdapter.Fill%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.Fill%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```       If <xref:System.Data.Common.DbDataAdapter.Fill%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       You can use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>. If a primary key exists, incoming rows are merged with matching rows that already exist. If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.       If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>. You must explicitly define the primary key to ensure that duplicate rows are resolved correctly. For more information, see[Defining Primary Keys](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.Fill%2A> and <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result."
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;></xref> to fill with records and, if necessary, schema."
    - id: startRecord
      type: System.Int32
      description: "The zero-based record number to start with."
    - id: maxRecords
      type: System.Int32
      description: "The maximum number of records to retrieve."
    - id: srcTable
      type: System.String
      description: "The name of the source table to use for table mapping."
    - id: command
      type: System.Data.IDbCommand
      description: "The SQL SELECT statement used to retrieve rows from the data source."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "One of the <xref href=&quot;System.Data.CommandBehavior&quot;></xref> values."
    return:
      type: System.Int32
      description: "The number of rows successfully added to or refreshed in the <xref href=&quot;System.Data.DataSet&quot;></xref>. This does not include rows affected by statements that do not return rows."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source table is invalid."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>startRecord</code> parameter is less than 0.       -or-       The <code>maxRecords</code> parameter is less than 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  id: FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets the behavior of the command used to fill the data adapter."
  syntax:
    content: protected System.Data.CommandBehavior FillCommandBehavior { get; set; }
    return:
      type: System.Data.CommandBehavior
      description: "The <xref href=&quot;System.Data.CommandBehavior&quot;></xref> of the command used to fill the data adapter."
  overload: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds a <xref href=&quot;System.Data.DataTable&quot;></xref> named &quot;Table&quot; to the specified <xref href=&quot;System.Data.DataSet&quot;></xref> and configures the schema to match that in the data source based on the specified <xref href=&quot;System.Data.SchemaType&quot;></xref>."
  remarks: "This method retrieves the schema information from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Primary key information is used during <xref:System.Data.Common.DbDataAdapter.Fill%2A> to find and replace any rows whose key columns match. If this is not the desired behavior, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> without requesting schema information.       If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is left open.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/visualbasic/5283d285-2680-48b0-856a-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/csharp/5283d285-2680-48b0-856a-_1.cs)]"
  syntax:
    content: public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;></xref> to insert the schema in."
    - id: schemaType
      type: System.Data.SchemaType
      description: "One of the <xref href=&quot;System.Data.SchemaType&quot;></xref> values that specify how to insert the schema."
    return:
      type: System.Data.DataTable[]
      description: "A reference to a collection of <xref href=&quot;System.Data.DataTable&quot;></xref> objects that were added to the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Configures the schema of the specified <xref href=&quot;System.Data.DataTable&quot;></xref> based on the specified <xref href=&quot;System.Data.SchemaType&quot;></xref>."
  remarks: "The FillSchema method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before FillSchema is called, it is opened to retrieve data, then closed. If the connection is open before FillSchema is called, it remains open.       A FillSchema operation returns a <xref:System.Data.DataTable>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       FillSchema also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If a <xref:System.Data.DataTable.PrimaryKey%2A> has already been defined for the `DataTable`, or the `DataTable` contains data, the `PrimaryKey` property will not be set.      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the `DataTable`.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the `PrimaryKey` property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the `DataTable`.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added. This process may require several round-trips to the server.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       FillSchema does not return any rows. Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of FillSchema for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.       When using FillSchema, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/visualbasic/658ac10a-3a87-4693-8b37-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/csharp/658ac10a-3a87-4693-8b37-_1.cs)]"
  syntax:
    content: public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "The <xref href=&quot;System.Data.DataTable&quot;></xref> to be filled with the schema from the data source."
    - id: schemaType
      type: System.Data.SchemaType
      description: "One of the <xref href=&quot;System.Data.SchemaType&quot;></xref> values."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;></xref> that contains schema information returned from the data source."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds a <xref href=&quot;System.Data.DataTable&quot;></xref> to the specified <xref href=&quot;System.Data.DataSet&quot;></xref> and configures the schema to match that in the data source based upon the specified <xref href=&quot;System.Data.SchemaType&quot;></xref> and <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: "This method retrieves the schema information from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Primary key information is used during <xref:System.Data.Common.DbDataAdapter.Fill%2A> to find and replace any rows whose key columns match. If this is not the desired behavior, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> without requesting schema information.       If the <xref:System.Data.Common.DbDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```       If <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       The <xref:System.Data.IDbConnection> object associated with the select command must be valid, but it does not need to open. If the <xref:System.Data.IDbConnection> is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is left open.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/visualbasic/c7e2b899-0a44-4d9d-9e8d-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/csharp/c7e2b899-0a44-4d9d-9e8d-_1.cs)]"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;></xref> to insert the schema in."
    - id: schemaType
      type: System.Data.SchemaType
      description: "One of the <xref href=&quot;System.Data.SchemaType&quot;></xref> values that specify how to insert the schema."
    - id: srcTable
      type: System.String
      description: "The name of the source table to use for table mapping."
    return:
      type: System.Data.DataTable[]
      description: "A reference to a collection of <xref href=&quot;System.Data.DataTable&quot;></xref> objects that were added to the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A source table from which to get the schema could not be found."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Configures the schema of the specified <xref href=&quot;System.Data.DataTable&quot;></xref> based on the specified <xref href=&quot;System.Data.SchemaType&quot;></xref>, command string, and <xref href=&quot;System.Data.CommandBehavior&quot;></xref> values."
  remarks: "The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open.       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows. Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information."
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "The <xref href=&quot;System.Data.DataTable&quot;></xref> to be filled with the schema from the data source."
    - id: schemaType
      type: System.Data.SchemaType
      description: "One of the <xref href=&quot;System.Data.SchemaType&quot;></xref> values."
    - id: command
      type: System.Data.IDbCommand
      description: "The SQL SELECT statement used to retrieve rows from the data source."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "One of the <xref href=&quot;System.Data.CommandBehavior&quot;></xref> values."
    return:
      type: System.Data.DataTable
      description: "A of <xref href=&quot;System.Data.DataTable&quot;></xref> object that contains schema information returned from the data source."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Adds a <xref href=&quot;System.Data.DataTable&quot;></xref> to the specified <xref href=&quot;System.Data.DataSet&quot;></xref> and configures the schema to match that in the data source based on the specified <xref href=&quot;System.Data.SchemaType&quot;></xref>."
  remarks: "The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open. If the connection is closed before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed. If the connection is open before <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called, it remains open.       A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>. It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable>, and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:      -   <xref:System.Data.DataColumn.AllowDBNull%2A>      -   <xref:System.Data.DataColumn.AutoIncrement%2A>. You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.      -   <xref:System.Data.DataColumn.MaxLength%2A>      -   <xref:System.Data.DataColumn.ReadOnly%2A>      -   <xref:System.Data.DataColumn.Unique%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:      -   If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.      -   If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if, and only if, all the unique columns are nonnullable. If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.      -   If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.       Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the preceding rules, but other constraint types are not added.       If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned. To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index. For more information about specifying query hints, see [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the subsequent columns, using the pattern &quot;*columnname*1&quot;, &quot;*columnname*2&quot;, &quot;*columnname*3&quot;, and so on. If the incoming data contains unnamed columns, they are placed in the <xref:System.Data.DataSet> according to the pattern &quot;Column1&quot;, &quot;Column2&quot;, and so on. When multiple result sets are added to the <xref:System.Data.DataSet> each result set is placed in a separate table. Additional result sets are named by appending integral values to the specified table name (for example, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot;, and so on.). Applications using column and table names should ensure that conflicts with these naming patterns does not occur.       The <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. In such situations, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> performs a case-sensitive comparison to find the corresponding table, and creates a new table if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```       If <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> does not return any rows. Use the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.      > [!NOTE] >  When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> for the .NET Framework Data Provider for OLE DB retrieves schema information for only the first result. To retrieve schema information for multiple results, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> with the <xref:System.Data.MissingSchemaAction> set to `AddWithKey`.       When using <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, the .NET Framework Data Provider for SQL Server appends a FOR BROWSE clause to the statement being executed. The user should be aware of potential side effects, such as interference with the use of SET FMTONLY ON statements. See SQL Server Books Online for more information."
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> to be filled with the schema from the data source."
    - id: schemaType
      type: System.Data.SchemaType
      description: "One of the <xref href=&quot;System.Data.SchemaType&quot;></xref> values."
    - id: command
      type: System.Data.IDbCommand
      description: "The SQL SELECT statement used to retrieve rows from the data source."
    - id: srcTable
      type: System.String
      description: "The name of the source table to use for table mapping."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "One of the <xref href=&quot;System.Data.CommandBehavior&quot;></xref> values."
    return:
      type: System.Data.DataTable[]
      description: "An array of <xref href=&quot;System.Data.DataTable&quot;></xref> objects that contain schema information returned from the data source."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  id: GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Returns a <xref href=&quot;System.Data.IDataParameter&quot;></xref> from one of the commands in the current batch."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."
  syntax:
    content: protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "The index of the command to retrieve the parameter from."
    - id: parameterIndex
      type: System.Int32
      description: "The index of the parameter within the command."
    return:
      type: System.Data.IDataParameter
      description: "The <xref href=&quot;System.Data.IDataParameter&quot;></xref> specified."
  overload: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The adapter does not support batches."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Returns information about an individual update attempt within a larger batched update."
  remarks: "Data providers that support batched updating logic must override a series of virtual methods on the <xref:System.Data.Common.DbDataAdapter> class. `GetBatchedRecordsAffected` represents one of those virtual methods. The `DbDataAdapter` class relies on `GetBatchedRecordsAffected` to determine the success or failure of individual update attempts within a batch so it can mark each corresponding <xref:System.Data.DataRow> accordingly."
  syntax:
    content: protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "The zero-based column ordinal of the individual command within the batch."
    - id: recordsAffected
      type: System.Int32
      description: "The number of rows affected in the data store by the specified command within the batch."
    - id: error
      type: System.Exception
      description: "An <xref:System.Exception> thrown during execution of the specified command. Returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic) if no exception is thrown."
    return:
      type: System.Boolean
      description: "Information about an individual update attempt within a larger batched update."
  overload: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets the parameters set by the user when executing an SQL SELECT statement."
  syntax:
    content: public override System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "An array of <xref href=&quot;System.Data.IDataParameter&quot;></xref> objects that contains the parameters set by the user."
  overload: System.Data.Common.DbDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  id: InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initializes batching for the <xref href=&quot;System.Data.Common.DbDataAdapter&quot;></xref>."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."
  syntax:
    content: protected virtual void InitializeBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.InitializeBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The adapter does not support batches."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets a command used to insert new records into the data source."
  remarks: "During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.InsertCommand%2A> will be automatically generated."
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand InsertCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.IDbCommand&quot;></xref> used during <xref:System.Data.IDataAdapter.Update*> to insert records in the data source for new rows in the data set."
  overload: System.Data.Common.DbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Raises the <xref uid=&quot;langword_csharp_RowUpdated&quot; name=&quot;RowUpdated&quot; href=&quot;&quot;></xref> event of a .NET Framework data provider."
  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "A <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Raises the <xref uid=&quot;langword_csharp_RowUpdating&quot; name=&quot;RowUpdating&quot; href=&quot;&quot;></xref> event of a .NET Framework data provider."
  remarks: 'Raising an event invokes the event handler through a delegate. For an overview, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "An <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;></xref> that contains the event data."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets a command used to select records in the data source."
  remarks: ''
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_1_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_1_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand SelectCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.IDbCommand&quot;></xref> that is used during <xref:System.Data.IDataAdapter.Update*> to select records from data source for placement in the data set."
  overload: System.Data.Common.DbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets an SQL statement for deleting records from the data set."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>."
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "An <xref href=&quot;System.Data.IDbCommand&quot;></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to delete records in the data source for deleted rows in the data set."
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets an SQL statement used to insert new records into the data source."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.InsertCommand%2A>."
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "An <xref href=&quot;System.Data.IDbCommand&quot;></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to insert records in the data source for new rows in the data set."
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets an SQL statement used to select records in the data source."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.SelectCommand%2A>."
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "An <xref href=&quot;System.Data.IDbCommand&quot;></xref> that is used during <xref:System.Data.Common.DbDataAdapter.Update*> to select records from data source for placement in the data set."
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets an SQL statement used to update records in the data source."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.       For more information, see <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>."
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "An <xref href=&quot;System.Data.IDbCommand&quot;></xref> used during <xref:System.Data.Common.DbDataAdapter.Update*> to update records in the data source for modified rows in the data set."
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Creates a new object that is a copy of the current instance."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Common.DbDataAdapter> instance is cast to an <xref:System.ICloneable> interface.       For more information, see <xref:System.ICloneable.Clone%2A?displayProperty=fullName>."
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "A new object that is a copy of this instance."
  overload: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  id: TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ends batching for the <xref href=&quot;System.Data.Common.DbDataAdapter&quot;></xref>."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, this method throws <xref:System.NotSupportedException>. Classes that inherit from <xref:System.Data.Common.DbDataAdapter> override this method to provide support for batches."
  syntax:
    content: protected virtual void TerminateBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.TerminateBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The adapter does not support batches."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  id: Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array in the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  remarks: "When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider&quot;s `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET Framework data provider&quot;s `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataRow[] dataRows);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "An array of <xref href=&quot;System.Data.DataRow&quot;></xref> objects used to update the data source."
    return:
      type: System.Int32
      description: "The number of rows successfully updated from the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> is invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source table is invalid."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "No <xref href=&quot;System.Data.DataRow&quot;></xref> exists to update.       -or-       No <xref href=&quot;System.Data.DataTable&quot;></xref> exists to update.       -or-       No <xref href=&quot;System.Data.DataSet&quot;></xref> exists to use as a source."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <xref href=&quot;System.Data.DataSet&quot;></xref>."
  remarks: "When an application calls the Update method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, Update might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the Update method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The Update method retrieves rows from the table listed in the first mapping before performing an update. The Update then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using Update, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider&quot;s `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET Framework data provider&quot;s `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling Update. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_4_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_4_1.cs)]"
  syntax:
    content: public override int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> used to update the data source."
    return:
      type: System.Int32
      description: "The number of rows successfully updated from the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source table is invalid."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  id: Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <xref href=&quot;System.Data.DataTable&quot;></xref>."
  remarks: "When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider&quot;s `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET Framework data provider&quot;s `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_1_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_1_1.cs)]"
  syntax:
    content: public int Update (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "The <xref href=&quot;System.Data.DataTable&quot;></xref> used to update the data source."
    return:
      type: System.Int32
      description: "The number of rows successfully updated from the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> is invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source table is invalid."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "No <xref href=&quot;System.Data.DataRow&quot;></xref> exists to update.       -or-       No <xref href=&quot;System.Data.DataTable&quot;></xref> exists to update.       -or-       No <xref href=&quot;System.Data.DataSet&quot;></xref> exists to use as a source."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  id: Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array of <xref href=&quot;System.Data.DataSet&quot;></xref> objects."
  remarks: "When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERTs before UPDATEs). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider&quot;s `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET Framework data provider&quot;s `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."
  syntax:
    content: protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "An array of <xref href=&quot;System.Data.DataRow&quot;></xref> objects used to update the data source."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "The <xref:System.Data.IDataAdapter.TableMappings*> collection to use."
    return:
      type: System.Int32
      description: "The number of rows successfully updated from the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> is invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source table is invalid."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "No <xref href=&quot;System.Data.DataRow&quot;></xref> exists to update.       -or-       No <xref href=&quot;System.Data.DataTable&quot;></xref> exists to update.       -or-       No <xref href=&quot;System.Data.DataSet&quot;></xref> exists to use as a source."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  id: Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <xref href=&quot;System.Data.DataSet&quot;></xref> with the specified <xref href=&quot;System.Data.DataTable&quot;></xref> name."
  remarks: "When an application calls the <xref:System.Data.Common.DbDataAdapter.Update%2A> method, the <xref:System.Data.Common.DbDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>. For example, <xref:System.Data.Common.DbDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, due to the ordering of the rows in the <xref:System.Data.DataTable>.       It should be noted that these statements are not performed as a batch process; each row is updated individually. An application can call the <xref:System.Data.DataSet.GetChanges%2A> method in situations where you must control the sequence of statement types (for example, INSERT before UPDATE). For more information, see [Updating Data Sources with DataAdapters](~/add/includes/ajax-current-ext-md.md).       If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method generates an exception. However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider. Then, any additional SQL statements that you do not set are generated by the **CommandBuilder**. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information see [Generating Commands with CommandBuilders](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method supports scenarios where the <xref:System.Data.DataSet> contains multiple <xref:System.Data.DataTable> objects whose names differ only by case. When multiple tables with the same name, but different case, exist in a `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> performs a case-sensitive comparison to find the corresponding table, and generates an exception if no exact match exists. The following C# code illustrates this behavior.      ```   DataSet ds = new DataSet();    ds.Tables.Add(&quot;aaa&quot;);    ds.Tables.Add(&quot;AAA&quot;);    adapter.Update(ds, &quot;aaa&quot;); // Updates &quot;aaa&quot;, which already exists in the DataSet.    adapter.Update(ds, &quot;AAA&quot;); // Updates &quot;AAA&quot;, which already exists in the DataSet.       adapter.Update(ds, &quot;Aaa&quot;); // Results in an exception.   ```       If <xref:System.Data.Common.DbDataAdapter.Update%2A> is called and the <xref:System.Data.DataSet> contains only one <xref:System.Data.DataTable> whose name differs only by case, that <xref:System.Data.DataTable> is updated. In this scenario, the comparison is case insensitive. The following C# code illustrates this behavior.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Update(dataset, &quot;AAA&quot;); // Updates table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       The <xref:System.Data.Common.DbDataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update. The <xref:System.Data.Common.DbDataAdapter.Update%2A> then refreshes the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property. Any additional rows returned are ignored.       After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command. After a row updates successfully, the changes to that row are accepted.       When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, the order of execution is as follows:      1.  The values in the <xref:System.Data.DataRow> are moved to the parameter values.      2.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.      3.  The command executes.      4.  If the command is set to `FirstReturnedRecord`, then the first returned result is placed in the <xref:System.Data.DataRow>.      5.  If there are output parameters, they are placed in the <xref:System.Data.DataRow>.      6.  The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.      7.  <xref:System.Data.DataRow.AcceptChanges%2A> is called.       Each command associated with the <xref:System.Data.Common.DbDataAdapter> usually has a parameters collection associated with it. Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider&quot;s `Parameter` class. `SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.Common.DbDataAdapter> references to obtain parameter values for the current row.       `SourceColumn` refers to the unmapped column name before any table mappings have been applied. If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.      |Enumeration value|Action taken|   |-----------------------|------------------|   |`MissingMappingAction.Passthrough`|Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.|   |`MissingMappingAction.Ignore`|A <xref:System.SystemException> is generated. When the mappings are explicitly set, a missing mapping for an input parameter is usually the result of an error.|   |`MissingMappingAction.Error`|A <xref:System.SystemException> is generated.|       The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`. An exception is generated if it refers to a nonexistent column.       The `SourceVersion` property of a .NET Framework data provider&quot;s `Parameter` class determines whether to use the Original, Current, or Proposed version of the column value. This capability is often used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.      > [!NOTE] >  If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued. To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>. You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter. To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus>."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/csharp/m-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> to use to update the data source."
    - id: srcTable
      type: System.String
      description: "The name of the source table to use for table mapping."
    return:
      type: System.Int32
      description: "The number of rows successfully updated from the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Data.DataSet&quot;></xref> is invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source table is invalid."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  id: UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch."
  remarks: "Use the UpdateBatchSize property to update a data source with changes from a <xref:System.Data.DataSet>. If the data provider supports batch processing, this can increase application performance by reducing the number of round-trips to the server. In ADO.NET 2.0, this property is supported for the .NET data providers for SQL Server (SqlClient) and Oracle (OracleClient).       Executing an extremely large batch could decrease performance. Therefore, you should test for the optimum batch size setting before implementing your application.       An <xref:System.ArgumentOutOfRangeException> will be thrown if the value is set to a number less than zero."
  syntax:
    content: public virtual int UpdateBatchSize { get; set; }
    return:
      type: System.Int32
      description: "The number of rows to process per batch.       <table><thead><tr><th> Value is       </th><th> Effect       </th></tr></thead><tbody><tr><td> 0       </td><td> There is no limit on the batch size.       </td></tr><tr><td> 1       </td><td> Disables batch updating.       </td></tr><tr><td> &gt; 1       </td><td> Changes are sent using batches of UpdateBatchSize operations at a time.       </td></tr></tbody></table>       When setting this to a value other than 1 ,all the commands associated with the <xref href=&quot;System.Data.Common.DbDataAdapter&quot;></xref> must have their <xref:System.Data.IDbCommand.UpdatedRowSource*> property set to **None** or **OutputParameters**. An exception will be thrown otherwise."
  overload: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets or sets a command used to update records in the data source."
  remarks: "During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> will be automatically generated."
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.IDbCommand&quot;></xref> used during <xref:System.Data.IDataAdapter.Update*> to update records in the data source for modified rows in the data set."
  overload: System.Data.Common.DbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.Common.DataAdapter
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DbDataAdapter.#ctor
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
- uid: System.Data.IDataParameter
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.#ctor*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch
  nameWithType: DbDataAdapter.AddToBatch
- uid: System.Data.Common.DbDataAdapter.ClearBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch
  nameWithType: DbDataAdapter.ClearBatch
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.Common.DbDataAdapter.DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.Dispose*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DbDataAdapter.Dispose
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch
  nameWithType: DbDataAdapter.ExecuteBatch
- uid: System.Data.Common.DbDataAdapter.Fill*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: DbDataAdapter.Fill
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DbDataAdapter.FillSchema
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter
  nameWithType: DbDataAdapter.GetBatchedParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected
- uid: System.Data.Common.DbDataAdapter.GetFillParameters*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DbDataAdapter.GetFillParameters
- uid: System.Data.Common.DbDataAdapter.InitializeBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching
  nameWithType: DbDataAdapter.InitializeBatching
- uid: System.Data.Common.DbDataAdapter.InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: DbDataAdapter.OnRowUpdated
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: DbDataAdapter.OnRowUpdating
- uid: System.Data.Common.DbDataAdapter.SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: DbDataAdapter.System.ICloneable.Clone
- uid: System.Data.Common.DbDataAdapter.TerminateBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching
  nameWithType: DbDataAdapter.TerminateBatching
- uid: System.Data.Common.DbDataAdapter.Update*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update
  nameWithType: DbDataAdapter.Update
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
