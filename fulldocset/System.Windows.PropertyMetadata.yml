### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "Define determinados aspetos do comportamento de uma propriedade de dependência como é aplicada a um tipo específico, incluindo condições que foi registado."
  remarks: "Os metadados da propriedade podem ser definidos e utilizados durante o registo de propriedade de dependência quando se chama o <xref:System.Windows.DependencyProperty.Register%2A>método (ou variações para propriedades anexadas ou propriedades de dependência só de leitura), ou após o registo de proprietário original ao chamar o <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>método.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> <xref:System.Windows.DependencyProperty.AddOwner%2A>Também aceita os metadados da propriedade.</xref:System.Windows.DependencyProperty.AddOwner%2A>       Esta classe é uma classe base concreta que pode ser utilizada em cada uma destas chamadas. No entanto, é muito comum para especificar os metadados utilizando uma das classes derivadas, tais como <xref:System.Windows.FrameworkPropertyMetadata>.</xref:System.Windows.FrameworkPropertyMetadata> Estas classes derivadas suportam mais detalhados metadados transportados como valores de propriedade booleana, que são úteis para detetar ou ativar alguns comportamentos de sistema e esquema de propriedade que apenas são implementados no [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] ao nível do framework.       Várias propriedades desta classe são leitura e escrita para o modelo de objeto, mas só pode ser escrita antes da instância que está a ser utilizada numa operação de sistema propriedade como <xref:System.Windows.DependencyProperty.Register%2A>ou <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> Cada uma destas propriedades foi também foram definidos pelo construtor, mas são expostos para que <xref:System.Windows.PropertyMetadata.Merge%2A>implementações de método podem colocá-los.</xref:System.Windows.PropertyMetadata.Merge%2A>      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a># # Utilização de texto de XAML deste tipo e os membros deste tipo, não são normalmente utilizados nas [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> classe."
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> classe com um valor predefinido especificado para a propriedade de dependência que estes metadados serão aplicados a."
  remarks: "O tipo do valor fornecido para `defaultValue` tem de ser correspondência ou estar relacionado com o tipo especificado no registo original da propriedade de dependência que estes metadados serão aplicados a. Correspondência entre o tipo de valor predefinido de metadados e o tipo da propriedade de dependência que está a ser aplicada para pode ser difícil de depuração, porque o erro de correspondência não é detetável durante a compilação (erro de correspondência irá emitir uma exceção de tempo de execução).       Embora seja a predefinição pelo construtor sem parâmetros, um `defaultValue` de <xref:System.Windows.DependencyProperty.UnsetValue>não pode ser especificado.</xref:System.Windows.DependencyProperty.UnsetValue> A tentar fazer irão gerar uma exceção."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "O valor predefinido para especificar para uma propriedade de dependência, geralmente, fornecida como um valor de um tipo específico."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>Não é possível definir o valor <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; Consulte observações."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> classe com especificado <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> referência de implementação."
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Referência a uma implementação de processador que está a ser chamado pelo sistema propriedade sempre que o valor efetivo da propriedade é alterado."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> classe com o valor predefinido especificado e <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> referência de implementação."
  remarks: "O tipo do valor fornecido `defaultValue` tem de ser correspondência ou estar relacionado com o tipo especificado no registo original da propriedade de dependência que estes metadados serão aplicados a. Correspondência entre o tipo de valor predefinido de metadados e o tipo da propriedade de dependência que está a ser aplicada para pode ser difícil de depuração, porque o erro de correspondência não é detetável durante a compilação (erro de correspondência irá emitir uma exceção de tempo de execução).       Embora seja a predefinição pelo construtor sem parâmetros, um `defaultValue` de <xref:System.Windows.DependencyProperty.UnsetValue>não pode ser especificado.</xref:System.Windows.DependencyProperty.UnsetValue> A tentar fazer irão gerar uma exceção."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "O valor predefinido da propriedade de dependência, geralmente, fornecido como um valor de um tipo específico."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Referência a uma implementação de processador que está a ser chamado pelo sistema propriedade sempre que o valor efetivo da propriedade é alterado."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>Não é possível definir o valor <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; Consulte observações."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> classe com o valor predefinido especificado e chamadas de retorno."
  remarks: "Se pretender especificar um <xref:System.Windows.CoerceValueCallback>, mas não um <xref:System.Windows.PropertyChangedCallback>, pode passar `null` para o `propertyChangedCallback` parâmetro.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       O tipo do valor fornecido para `defaultValue` tem de ser correspondência ou estar relacionado com o tipo especificado no registo original da propriedade de dependência que estes metadados serão aplicados a. Correspondência entre o tipo de valor predefinido de metadados e o tipo da propriedade de dependência que está a ser aplicada para pode ser difícil de depuração, porque o erro de correspondência não é detetável durante a compilação (erro de correspondência irá emitir uma exceção de tempo de execução).       Embora seja a predefinição pelo construtor sem parâmetros, um `defaultValue` de <xref:System.Windows.DependencyProperty.UnsetValue>não pode ser especificado.</xref:System.Windows.DependencyProperty.UnsetValue> A tentar fazer irão gerar uma exceção."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "O valor predefinido da propriedade de dependência, geralmente, fornecido como um valor de um tipo específico."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Referência a uma implementação de processador que está a ser chamado pelo sistema propriedade sempre que o valor efetivo da propriedade é alterado."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Referência para uma implementação de processador que está a ser chamado sempre que o sistema de propriedade chama <xref:System.Windows.DependencyObject.CoerceValue*>em relação a esta propriedade.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>Não é possível definir o valor <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; Consulte observações."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém ou define uma referência um <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> especificada nestes metadados de implementação."
  remarks: "As chamadas de retorno nos metadados da propriedade não são membros normalmente públicos no tipo que contém, pelo que o valor desta propriedade não é importante para a maioria dos cenários que consomem apenas de metadados de uma propriedade dependência existente. Uma razão que esta propriedade está exposta é para que as subclasses de metadados possam executar respetiva lógica de intercalação pretendido se os metadados base e substituir/adicionar metadados especificam <xref:System.Windows.CoerceValueCallback>.</xref:System.Windows.CoerceValueCallback> No entanto, a lógica de intercalação predefinida para uma CoerceValueCallback é para substituir a anterior.       CoerceValueCallback está definido no modelo de objeto, como leitura / escrita. Isto é, pelo que pode ser ajustado CoerceValueCallback após a inicialização do <xref:System.Windows.PropertyMetadata>objeto propriamente dito.</xref:System.Windows.PropertyMetadata> No entanto, depois dos metadados é consumido como parte de uma chamada para <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, o sistema de propriedade irá selar essa instância de metadados e as propriedades são agora consideradas imutáveis.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Tentativa de definir uma vez CoerceValueCallback <xref:System.Windows.PropertyMetadata.IsSealed%2A>é `true` nestes metadados instância irá gerar uma exceção.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "A <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> referência de implementação."
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Não é possível definir uma propriedade de metadados, uma vez que é aplicada a uma operação de propriedade de dependência."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém ou define o valor predefinido da propriedade de dependência."
  remarks: "DefaultValue é definido no modelo de objeto, como leitura / escrita. Isto é, pelo que pode ser ajustado DefaultValue após a inicialização do <xref:System.Windows.PropertyMetadata>objeto propriamente dito.</xref:System.Windows.PropertyMetadata> No entanto, depois dos metadados é consumido como parte de uma chamada para <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, o sistema de propriedade irá selar essa instância de metadados e as propriedades são agora consideradas imutáveis.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> A tentar definir DefaultValue uma vez <xref:System.Windows.PropertyMetadata.IsSealed%2A>é `true` nestes metadados instância irá gerar uma exceção.</xref:System.Windows.PropertyMetadata.IsSealed%2A>       Embora seja a predefinição pelo construtor sem parâmetros, um `defaultValue` de <xref:System.Windows.DependencyProperty.UnsetValue>não é possível definir DefaultValue ou o construtor.</xref:System.Windows.DependencyProperty.UnsetValue> A tentar fazer irão gerar uma exceção.      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a># # XAML texto utilização membros deste tipo não são normalmente utilizados nas [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "O valor predefinido da propriedade. O valor predefinido num <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> instância criada com o construtor sem parâmetros será <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; Consulte observações."
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Não é possível definir o valor <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref> depois de criado; Consulte observações."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Não é possível definir uma propriedade de metadados, uma vez que é aplicada a uma operação de propriedade de dependência."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém um valor que determina se os metadados tem sido aplicado a uma propriedade de alguma forma, resultando no Estado imutável essa instância de metadados."
  remarks: "Várias propriedades de <xref:System.Windows.PropertyMetadata>, tais como <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, são definidos no modelo de objeto, como leitura / escrita.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> Isto é, pelo que podem ser ajustadas essas propriedades após a inicialização do <xref:System.Windows.PropertyMetadata>objeto propriamente dito.</xref:System.Windows.PropertyMetadata> No entanto, depois dos metadados é aplicado a uma propriedade de dependência como parte de uma chamada para <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, o sistema de propriedade irá selar essa instância de metadados e as propriedades são agora consideradas imutáveis.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> No momento de uma destas chamadas <xref:System.Windows.PropertyMetadata.OnApply%2A>denomina-se, e o valor desta propriedade está definido como `true`.</xref:System.Windows.PropertyMetadata.OnApply%2A>"
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a instância de metadados é imutável; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Intercala estes metadados com os metadados base."
  remarks: "Este método é utilizado internamente quando está a ser substituído metadados (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> método).</xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "Os metadados base para intercalar com valores desta instância."
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade de dependência para o qual está a ser aplicado estes metadados."
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Chamado quando estes metadados tem sido aplicado a uma propriedade, o que indica que está a ser selado os metadados."
  remarks: "Subclasses devem garantir que quaisquer mutability da estrutura de dados de um <xref:System.Windows.PropertyMetadata>subclasse deverá ser marcada como imutável após OnApply é chamado.</xref:System.Windows.PropertyMetadata> Este será chamado depois dos metadados é aplicado a uma operação do sistema de propriedade (registar, adicione o proprietário, substituir metadados)."
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade de dependência para o qual os metadados foi aplicado."
    - id: targetType
      type: System.Type
      description: "O tipo associado estes metadados se se tratar de metadados específicos do tipo. Se se tratar de metadados da predefinição, este valor é uma referência nula."
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Obtém ou define uma referência um <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> especificada nestes metadados de implementação."
  remarks: "As chamadas de retorno nos metadados da propriedade não são membros normalmente públicos no tipo de definição, pelo que o valor desta propriedade não é importante para a maioria dos cenários que consomem apenas de metadados de uma propriedade dependência existente. Uma razão que esta propriedade está exposta é para que as classes de metadados possam executar a respetiva lógica de intercalação pretendido se os metadados base e substituir/adicionar metadados especificam <xref:System.Windows.PropertyChangedCallback>.</xref:System.Windows.PropertyChangedCallback> A lógica de intercalação predefinida para consiste em manter todas as implementações de PropertyChangedCallback numa tabela e chamar cada um deles, com as chamadas de retorno estabelecidas pela classe mais profundo existente numa hierarquia executar primeiro.       PropertyChangedCallback está definido no modelo de objeto, como leitura / escrita. Isto é, pelo que pode ser ajustado PropertyChangedCallback após a inicialização do <xref:System.Windows.PropertyMetadata>objeto propriamente dito.</xref:System.Windows.PropertyMetadata> No entanto, depois dos metadados é consumido como parte de uma chamada para <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, ou <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, o sistema de propriedade irá selar essa instância de metadados e as propriedades são agora consideradas imutáveis.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Tentativa de definir uma vez PropertyChangedCallback <xref:System.Windows.PropertyMetadata.IsSealed%2A>é `true` nestes metadados instância irá gerar uma exceção.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "A <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> referência de implementação."
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Não é possível definir uma propriedade de metadados, uma vez que é aplicada a uma operação de propriedade de dependência."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
