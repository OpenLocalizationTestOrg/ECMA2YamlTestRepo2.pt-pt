### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with."
  remarks: "Property metadata can be defined and used during dependency property registration when calling the <xref:System.Windows.DependencyProperty.Register%2A> method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> method. <xref:System.Windows.DependencyProperty.AddOwner%2A> also takes property metadata.       This class is a concrete base class that can be used in each of these calls. However, it is very common to specify metadata using one of the derived classes such as <xref:System.Windows.FrameworkPropertyMetadata>. These derived classes support more detailed metadata carried as Boolean property values, which are useful for either detecting or enabling some property system and layout behaviors that are only implemented at the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] framework level.       Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>. Each of these properties could also have been set by the constructor but are exposed so that <xref:System.Windows.PropertyMetadata.Merge%2A> method implementations can set them.      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a>    ## XAML Text Usage    This type, and members of this type, are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.PropertyMetadata&quot;></xref> class."
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.PropertyMetadata&quot;></xref> class with a specified default value for the dependency property that this metadata will be applied to."
  remarks: "The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).       Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "The default value to specify for a dependency property, usually provided as a value of some specific type."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code> cannot be set to the value <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>; see Remarks."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.PropertyMetadata&quot;></xref> class with the specified <xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref> implementation reference."
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.PropertyMetadata&quot;></xref> class with the specified default value and <xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref> implementation reference."
  remarks: "The type of the value provided `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).       Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "The default value of the dependency property, usually provided as a value of some specific type."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code> cannot be set to the value <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>; see Remarks."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.PropertyMetadata&quot;></xref> class with the specified default value and callbacks."
  remarks: "If you want to specify a <xref:System.Windows.CoerceValueCallback> but not a <xref:System.Windows.PropertyChangedCallback>, you can pass `null` for the `propertyChangedCallback` parameter.       The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).       Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "The default value of the dependency property, usually provided as a value of some specific type."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Reference to a handler implementation that is to be called whenever the property system calls <xref:System.Windows.DependencyObject.CoerceValue*> against this property."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code> cannot be set to the value <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>; see Remarks."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets a reference to a <xref href=&quot;System.Windows.CoerceValueCallback&quot;></xref> implementation specified in this metadata."
  remarks: "The callbacks in property metadata are not typically public members on the containing type, so the value of this property is not important for most scenarios that just consume an existing dependency property&quot;s metadata. One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.CoerceValueCallback>. However, the default merge logic for a CoerceValueCallback is to replace the previous one.       CoerceValueCallback is defined in the object model as read-write. This is so CoerceValueCallback can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set CoerceValueCallback once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "A <xref href=&quot;System.Windows.CoerceValueCallback&quot;></xref> implementation reference."
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Cannot set a metadata property once it is applied to a dependency property operation."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets the default value of the dependency property."
  remarks: "DefaultValue is defined in the object model as read-write. This is so DefaultValue can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set DefaultValue once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.       Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be set using either DefaultValue or the constructor. Attempting to do so will raise an exception.      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a>    ## XAML Text Usage    Members of this type are not typically used in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "The default value of the property. The default value on a <xref href=&quot;System.Windows.PropertyMetadata&quot;></xref> instance created with the parameterless constructor will be <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>; see Remarks."
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Cannot be set to the value <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref> once created; see Remarks."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Cannot set a metadata property once it is applied to a dependency property operation."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance."
  remarks: "Various properties of <xref:System.Windows.PropertyMetadata>, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are defined in the object model as read-write. This is so those properties can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is applied to a dependency property as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. At the time of one of these calls, <xref:System.Windows.PropertyMetadata.OnApply%2A> is called, and the value of this property is set to `true`."
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the metadata instance is immutable; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Merges this metadata with the base metadata."
  remarks: "This method is used internally when metadata is being overridden (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method)."
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "The base metadata to merge with this instance&quot;s values."
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The dependency property to which this metadata is being applied."
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Called when this metadata has been applied to a property, which indicates that the metadata is being sealed."
  remarks: "Subclasses should assure that any mutability of the data structure of a <xref:System.Windows.PropertyMetadata> subclass should be marked as immutable once OnApply is called. This will be called once the metadata is applied to a property system operation (register, add owner, override metadata)."
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "The dependency property to which the metadata has been applied."
    - id: targetType
      type: System.Type
      description: "The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference."
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Gets or sets a reference to a <xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref> implementation specified in this metadata."
  remarks: "The callbacks in property metadata are not typically public members on the defining type, so the value of this property is not important for most scenarios that just consume an existing dependency property&quot;s metadata. One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.PropertyChangedCallback>. The default merge logic for is to maintain all PropertyChangedCallback implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first.       PropertyChangedCallback is defined in the object model as read-write. This is so PropertyChangedCallback can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set PropertyChangedCallback once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "A <xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref> implementation reference."
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Cannot set a metadata property once it is applied to a dependency property operation."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
