### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.UnmanagedMarshal
  id: UnmanagedMarshal
  children:
  - System.Reflection.Emit.UnmanagedMarshal.BaseType
  - System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)
  - System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)
  - System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  - System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  - System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  - System.Reflection.Emit.UnmanagedMarshal.ElementCount
  - System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  - System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  langs:
  - csharp
  name: UnmanagedMarshal
  nameWithType: UnmanagedMarshal
  fullName: System.Reflection.Emit.UnmanagedMarshal
  type: Class
  summary: "Representa a classe que descreve a forma de empacotar referências de um campo de código gerido para. Esta classe não pode ser herdada."
  remarks: "O exemplo de código mostra a solução para este tipo de obsoleto.       Empacotamento de referências é o processo de parâmetros de empacotamento e unpackaging para que chamadas de procedimento remoto podem ocorrer. Durante o marshaling, um campo pode sofrer uma conversão de formato quando o formato do tipo gerido é diferente do formato de tipo não gerido correspondente. Por exemplo, pode querer empacotar referências de um `String` tipo como um BSTR não gerido. Alguns conversões de formato são processadas automaticamente pelo runtime. Para substituir o comportamento predefinido, tem de utilizar o `UnmanagedMarshal` classe para definir a conversão de formato."
  example:
  - "The following code example shows replacement code for the obsolete UnmanagedMarshal type. The example emits a single-module assembly named `EmitMarshalAs.dll`, containing a type named `Sample`. The type has a method named `Test`, with one parameter of type <xref:System.String>. The code example applies the <xref:System.Runtime.InteropServices.MarshalAsAttribute> with <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> to the parameter.  \n  \n You can use the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) to examine the emitted assembly and observe that the parameter is marked `marshal(bstr)`.  \n  \n [!code-cs[UnmanagedMarshalObsolete#1](~/add/codesnippet/csharp/t-system.reflection.emit_1.cs)]\n [!code-cpp[UnmanagedMarshalObsolete#1](~/add/codesnippet/cpp/t-system.reflection.emit_1.cpp)]\n [!code-vb[UnmanagedMarshalObsolete#1](~/add/codesnippet/visualbasic/t-system.reflection.emit_1.vb)]"
  syntax:
    content: >-
      [System.Obsolete("An alternate API is available: Emit the MarshalAs custom attribute instead. http://go.microsoft.com/fwlink/?linkid=14202")]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class UnmanagedMarshal
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType
  id: BaseType
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: BaseType
  nameWithType: UnmanagedMarshal.BaseType
  fullName: System.Reflection.Emit.UnmanagedMarshal.BaseType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Obtém um tipo base não gerido. Esta propriedade é só de leitura."
  syntax:
    content: public System.Runtime.InteropServices.UnmanagedType BaseType { get; }
    return:
      type: System.Runtime.InteropServices.UnmanagedType
      description: "Um <xref uid=&quot;langword_csharp_UnmanagedType&quot; name=&quot;UnmanagedType&quot; href=&quot;&quot;> </xref> objeto."
  overload: System.Reflection.Emit.UnmanagedMarshal.BaseType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O tipo não gerido não é um <xref uid=&quot;langword_csharp_LPArray&quot; name=&quot;LPArray&quot; href=&quot;&quot;> </xref> ou um <xref uid=&quot;langword_csharp_SafeArray&quot; name=&quot;SafeArray&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)
  id: DefineByValArray(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineByValArray(Int32)
  nameWithType: UnmanagedMarshal.DefineByValArray(Int32)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Especifica uma matriz de comprimento fixo (ByValArray) para empacotar referências de código não gerido."
  remarks: "O `DefineByValArray` método não é um empacotamento de referências nativo simple.       Construções de empacotamento de referências não gerido só podem ser efetuadas utilizando estes construtores estáticos.       Uma matriz de empacotamento de referências é um processo mais complexo que um parâmetro de número inteiro de empacotamento de referências. Os membros de matriz são copiados por uma ordem específica para que o outro lado pode reconstrua a matriz de exatamente."
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineByValArray (int elemCount);
    parameters:
    - id: elemCount
      type: System.Int32
      description: "O número de elementos na matriz de comprimento fixo."
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: "Um <xref href=&quot;System.Reflection.Emit.UnmanagedMarshal&quot;> </xref> objeto."
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O argumento não é um tipo nativo simples."
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)
  id: DefineByValTStr(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineByValTStr(Int32)
  nameWithType: UnmanagedMarshal.DefineByValTStr(Int32)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Especifica uma matriz fixa de memória intermédia (ByValTStr) para empacotar referências de código gerido para uma cadeia."
  remarks: "O `DefineByValStr` método não é um empacotamento de referências nativo simple.       Construções de empacotamento de referências não gerido só podem ser efetuadas utilizando estes construtores estáticos.       Uma matriz de empacotamento de referências é um processo mais complexo que um parâmetro de número inteiro de empacotamento de referências. Os membros de matriz são copiados por uma ordem específica para que o outro lado pode reconstrua a matriz de exatamente."
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineByValTStr (int elemCount);
    parameters:
    - id: elemCount
      type: System.Int32
      description: "O número de elementos na memória intermédia de matriz fixo."
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: "Um <xref href=&quot;System.Reflection.Emit.UnmanagedMarshal&quot;> </xref> objeto."
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O argumento não é um tipo nativo simples."
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  id: DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineLPArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineLPArray(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(UnmanagedType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Especifica um <xref uid=&quot;langword_csharp_LPArray&quot; name=&quot;LPArray&quot; href=&quot;&quot;> </xref> empacotar referências para código não gerido. O comprimento de um <xref uid=&quot;langword_csharp_LPArray&quot; name=&quot;LPArray&quot; href=&quot;&quot;> </xref> é determinado em runtime pelo tamanho da matriz com referências empacotadas real."
  remarks: "O `DefineLPArray` método não é um empacotamento de referências nativo simple.       Construções de empacotamento de referências não gerido só podem ser efetuadas utilizando estes construtores estáticos.       Uma matriz de empacotamento de referências é um processo mais complexo que um parâmetro de número inteiro de empacotamento de referências. Os membros de matriz são copiados por uma ordem específica para que o outro lado pode reconstrua a matriz de exatamente."
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineLPArray (System.Runtime.InteropServices.UnmanagedType elemType);
    parameters:
    - id: elemType
      type: System.Runtime.InteropServices.UnmanagedType
      description: "O tipo não gerido para o qual pretende empacotar referências de matriz."
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: "Um <xref href=&quot;System.Reflection.Emit.UnmanagedMarshal&quot;> </xref> objeto."
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O argumento não é um tipo nativo simples."
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  id: DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineSafeArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineSafeArray(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(UnmanagedType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Especifica um <xref uid=&quot;langword_csharp_SafeArray&quot; name=&quot;SafeArray&quot; href=&quot;&quot;> </xref> empacotar referências para código não gerido."
  remarks: "O `DefineSafeArray` método não é um empacotamento de referências nativo simple.       Construções de empacotamento de referências não gerido só podem ser efetuadas utilizando estes construtores estáticos.       Uma matriz de empacotamento de referências é um processo mais complexo que um parâmetro de número inteiro de empacotamento de referências. Os membros de matriz são copiados por uma ordem específica para que o outro lado pode reconstrua a matriz de exatamente."
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineSafeArray (System.Runtime.InteropServices.UnmanagedType elemType);
    parameters:
    - id: elemType
      type: System.Runtime.InteropServices.UnmanagedType
      description: "O tipo base ou a <xref uid=&quot;langword_csharp_UnmanagedType&quot; name=&quot;UnmanagedType&quot; href=&quot;&quot;> </xref> de cada elemento da matriz."
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: "Um <xref href=&quot;System.Reflection.Emit.UnmanagedMarshal&quot;> </xref> objeto."
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O argumento não é um tipo nativo simples."
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  id: DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineUnmanagedMarshal(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Especifica um determinado tipo, que é possível empacotar as referências ao código não gerido."
  remarks: "O <xref:System.Runtime.InteropServices.UnmanagedType>transmitido a este método tem de ser um tipo nativo simples.</xref:System.Runtime.InteropServices.UnmanagedType> Pode ser utilizado, nenhum dos seguintes valores: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, ou <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>.</xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>       Construções de empacotamento de referências não gerido só podem ser efetuadas através deste método."
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineUnmanagedMarshal (System.Runtime.InteropServices.UnmanagedType unmanagedType);
    parameters:
    - id: unmanagedType
      type: System.Runtime.InteropServices.UnmanagedType
      description: "O tipo não gerido para o qual o tipo é possível empacotar as referências."
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: "Um <xref href=&quot;System.Reflection.Emit.UnmanagedMarshal&quot;> </xref> objeto."
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O argumento não é um tipo nativo simples."
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount
  id: ElementCount
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: ElementCount
  nameWithType: UnmanagedMarshal.ElementCount
  fullName: System.Reflection.Emit.UnmanagedMarshal.ElementCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Obtém um elemento número. Esta propriedade é só de leitura."
  remarks: "Não existe um `ElementCount` apenas se existir um `NativeTypeFixedArray`."
  syntax:
    content: public int ElementCount { get; }
    return:
      type: System.Int32
      description: "Um número inteiro que indica que a contagem de elemento."
  overload: System.Reflection.Emit.UnmanagedMarshal.ElementCount*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O argumento não é uma contagem de elemento não gerido."
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  id: GetUnmanagedType
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: GetUnmanagedType
  nameWithType: UnmanagedMarshal.GetUnmanagedType
  fullName: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Indica um tipo não gerido. Esta propriedade é só de leitura."
  remarks: "O `GetUnmanagedType` propriedade é uma função de acessor para o tipo nativo."
  syntax:
    content: public System.Runtime.InteropServices.UnmanagedType GetUnmanagedType { get; }
    return:
      type: System.Runtime.InteropServices.UnmanagedType
      description: "Um <xref:System.Runtime.InteropServices.UnmanagedType>objeto.</xref:System.Runtime.InteropServices.UnmanagedType>"
  overload: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  id: IIDGuid
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: IIDGuid
  nameWithType: UnmanagedMarshal.IIDGuid
  fullName: System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Obtém um GUID. Esta propriedade é só de leitura."
  remarks: "Esta propriedade devolve sempre GUID. Empty. Esta propriedade pode ser removida numa versão futura."
  syntax:
    content: public Guid IIDGuid { get; }
    return:
      type: System.Guid
      description: "A <xref:System.Guid>objeto.</xref:System.Guid>"
  overload: System.Reflection.Emit.UnmanagedMarshal.IIDGuid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O argumento não é um empacotador de referências personalizado."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: BaseType
  nameWithType: UnmanagedMarshal.BaseType
  fullName: System.Reflection.Emit.UnmanagedMarshal.BaseType
- uid: System.Runtime.InteropServices.UnmanagedType
  parent: System.Runtime.InteropServices
  isExternal: true
  name: UnmanagedType
  nameWithType: UnmanagedType
  fullName: System.Runtime.InteropServices.UnmanagedType
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValArray(Int32)
  nameWithType: UnmanagedMarshal.DefineByValArray(Int32)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(Int32)
- uid: System.Reflection.Emit.UnmanagedMarshal
  parent: System.Reflection.Emit
  isExternal: false
  name: UnmanagedMarshal
  nameWithType: UnmanagedMarshal
  fullName: System.Reflection.Emit.UnmanagedMarshal
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValTStr(Int32)
  nameWithType: UnmanagedMarshal.DefineByValTStr(Int32)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(Int32)
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineLPArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineLPArray(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(UnmanagedType)
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineSafeArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineSafeArray(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(UnmanagedType)
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineUnmanagedMarshal(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: ElementCount
  nameWithType: UnmanagedMarshal.ElementCount
  fullName: System.Reflection.Emit.UnmanagedMarshal.ElementCount
- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: GetUnmanagedType
  nameWithType: UnmanagedMarshal.GetUnmanagedType
  fullName: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: IIDGuid
  nameWithType: UnmanagedMarshal.IIDGuid
  fullName: System.Reflection.Emit.UnmanagedMarshal.IIDGuid
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: BaseType
  nameWithType: UnmanagedMarshal.BaseType
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValArray
  nameWithType: UnmanagedMarshal.DefineByValArray
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValTStr
  nameWithType: UnmanagedMarshal.DefineByValTStr
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineLPArray
  nameWithType: UnmanagedMarshal.DefineLPArray
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineSafeArray
  nameWithType: UnmanagedMarshal.DefineSafeArray
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineUnmanagedMarshal
  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal
- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: ElementCount
  nameWithType: UnmanagedMarshal.ElementCount
- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: GetUnmanagedType
  nameWithType: UnmanagedMarshal.GetUnmanagedType
- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: IIDGuid
  nameWithType: UnmanagedMarshal.IIDGuid
