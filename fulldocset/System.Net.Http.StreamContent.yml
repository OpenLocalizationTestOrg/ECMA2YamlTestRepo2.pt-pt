### YamlMime:ManagedReference
items:
- uid: System.Net.Http.StreamContent
  id: StreamContent
  children:
  - System.Net.Http.StreamContent.#ctor(System.IO.Stream)
  - System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)
  - System.Net.Http.StreamContent.CreateContentReadStreamAsync
  - System.Net.Http.StreamContent.Dispose(System.Boolean)
  - System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.StreamContent.TryComputeLength(System.Int64@)
  langs:
  - csharp
  name: StreamContent
  nameWithType: StreamContent
  fullName: System.Net.Http.StreamContent
  type: Class
  summary: "Provides HTTP content based on a stream."
  syntax:
    content: 'public class StreamContent : System.Net.Http.HttpContent'
  inheritance:
  - System.Object
  - System.Net.Http.HttpContent
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.Dispose
  - System.Net.Http.HttpContent.Headers
  - System.Net.Http.HttpContent.LoadIntoBufferAsync
  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  - System.Net.Http.HttpContent.ReadAsByteArrayAsync
  - System.Net.Http.HttpContent.ReadAsStreamAsync
  - System.Net.Http.HttpContent.ReadAsStringAsync
  platform:
  - net462
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: StreamContent(Stream)
  nameWithType: StreamContent.StreamContent(Stream)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Creates a new instance of the <xref href=&quot;System.Net.Http.StreamContent&quot;></xref> class."
  syntax:
    content: public StreamContent (System.IO.Stream content);
    parameters:
    - id: content
      type: System.IO.Stream
      description: "The content used to initialize the <xref href=&quot;System.Net.Http.StreamContent&quot;></xref>."
  overload: System.Net.Http.StreamContent.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)
  id: '#ctor(System.IO.Stream,System.Int32)'
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: StreamContent(Stream,Int32)
  nameWithType: StreamContent.StreamContent(Stream,Int32)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream,Int32)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Creates a new instance of the <xref href=&quot;System.Net.Http.StreamContent&quot;></xref> class."
  syntax:
    content: public StreamContent (System.IO.Stream content, int bufferSize);
    parameters:
    - id: content
      type: System.IO.Stream
      description: "The content used to initialize the <xref href=&quot;System.Net.Http.StreamContent&quot;></xref>."
    - id: bufferSize
      type: System.Int32
      description: "The size, in bytes, of the buffer for the <xref href=&quot;System.Net.Http.StreamContent&quot;></xref>."
  overload: System.Net.Http.StreamContent.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>content</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>bufferSize</code> was less than or equal to zero."
  platform:
  - net462
- uid: System.Net.Http.StreamContent.CreateContentReadStreamAsync
  id: CreateContentReadStreamAsync
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: CreateContentReadStreamAsync()
  nameWithType: StreamContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.StreamContent.CreateContentReadStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Write the HTTP stream content to a memory stream as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after all of the content has been written to the memory stream.       The CreateContentReadStreamAsync method buffers the content to a memory stream. Derived classes can override this behavior if there is a better way to retrieve the content as stream. For example, a byte array or a string could use a more efficient method way such as wrapping a read-only <xref:System.IO.MemoryStream> around the bytes or string.)"
  syntax:
    content: protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.StreamContent.CreateContentReadStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: StreamContent.Dispose(Boolean)
  fullName: System.Net.Http.StreamContent.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Net.Http.StreamContent&quot;></xref> and optionally disposes of the managed resources."
  remarks: "This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.StreamContent> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to releases only unmanaged resources."
  overload: System.Net.Http.StreamContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: StreamContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.StreamContent.SerializeToStreamAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serialize the HTTP content to a stream as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task> object will complete after all of the content has been serialized to the target stream."
  syntax:
    content: protected override System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "The target stream."
    - id: context
      type: System.Net.TransportContext
      description: "Information about the transport (channel binding token, for example). This parameter may be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.StreamContent.SerializeToStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.TryComputeLength(System.Int64@)
  id: TryComputeLength(System.Int64@)
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: TryComputeLength(Int64)
  nameWithType: StreamContent.TryComputeLength(Int64)
  fullName: System.Net.Http.StreamContent.TryComputeLength(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Determines whether the stream content has a valid length in bytes."
  remarks: "The TryComputeLength method gives HTTP stream content the ability to calculate the content length. This is useful for content types which are able to easily calculate the content length. If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return `false`. If this method returns `false`, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server."
  syntax:
    content: protected override bool TryComputeLength (out long length);
    parameters:
    - id: length
      type: System.Int64
      description: "The length in bytes of the stream content."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>length</code> is a valid length; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.Http.StreamContent.TryComputeLength*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Http.HttpContent
  isExternal: false
  name: System.Net.Http.HttpContent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: StreamContent(Stream)
  nameWithType: StreamContent.StreamContent(Stream)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: StreamContent(Stream,Int32)
  nameWithType: StreamContent.StreamContent(Stream,Int32)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Http.StreamContent.CreateContentReadStreamAsync
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: CreateContentReadStreamAsync()
  nameWithType: StreamContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.StreamContent.CreateContentReadStreamAsync()
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.StreamContent.Dispose(System.Boolean)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: StreamContent.Dispose(Boolean)
  fullName: System.Net.Http.StreamContent.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: StreamContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.StreamContent.SerializeToStreamAsync(Stream,TransportContext)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Http.StreamContent.TryComputeLength(System.Int64@)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: TryComputeLength(Int64)
  nameWithType: StreamContent.TryComputeLength(Int64)
  fullName: System.Net.Http.StreamContent.TryComputeLength(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.StreamContent.#ctor*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: StreamContent
  nameWithType: StreamContent.StreamContent
- uid: System.Net.Http.StreamContent.CreateContentReadStreamAsync*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: CreateContentReadStreamAsync
  nameWithType: StreamContent.CreateContentReadStreamAsync
- uid: System.Net.Http.StreamContent.Dispose*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: Dispose
  nameWithType: StreamContent.Dispose
- uid: System.Net.Http.StreamContent.SerializeToStreamAsync*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: SerializeToStreamAsync
  nameWithType: StreamContent.SerializeToStreamAsync
- uid: System.Net.Http.StreamContent.TryComputeLength*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: TryComputeLength
  nameWithType: StreamContent.TryComputeLength
