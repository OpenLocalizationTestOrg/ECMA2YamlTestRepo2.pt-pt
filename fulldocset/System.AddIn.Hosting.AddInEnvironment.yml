### YamlMime:ManagedReference
items:
- uid: System.AddIn.Hosting.AddInEnvironment
  id: AddInEnvironment
  children:
  - System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)
  - System.AddIn.Hosting.AddInEnvironment.Process
  langs:
  - csharp
  name: AddInEnvironment
  nameWithType: AddInEnvironment
  fullName: System.AddIn.Hosting.AddInEnvironment
  type: Class
  summary: "Provides access to the application domain and process of an add-in."
  remarks: "Use this class to load add-ins into a desired environment, which can be one of the following:      -   An existing application domain for which you have the <xref:System.AppDomain> object.      -   An application domain that was automatically generated to activate an add-in.      -   An existing external process.       To obtain the AddInEnvironment object for an add-in, pass the add-in&quot;s application domain to the AddInEnvironment class constructor. Alternatively, you can use the <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> property of the <xref:System.AddIn.Hosting.AddInController> class to obtain the add-in&quot;s AddInEnvironment object.       After you obtain the AddInEnvironment object, you can do the following:      -   Pass that AddInEnvironment object to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%2A> method overload. The add-in will be activated in the application domain and process that is represented by the AddInEnvironment object.      -   Use the <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A> property to obtain an <xref:System.AddIn.Hosting.AddInProcess> object. Then pass that object to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%2A> method overload. The add-in will be activated in the process that is represented by the <xref:System.AddIn.Hosting.AddInProcess> object but in a new application domain."
  syntax:
    content: public sealed class AddInEnvironment
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)
  id: '#ctor(System.AppDomain)'
  parent: System.AddIn.Hosting.AddInEnvironment
  langs:
  - csharp
  name: AddInEnvironment(AppDomain)
  nameWithType: AddInEnvironment.AddInEnvironment(AppDomain)
  fullName: System.AddIn.Hosting.AddInEnvironment.AddInEnvironment(AppDomain)
  type: Constructor
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Hosting
  summary: "Initializes a new instance of the <xref href=&quot;System.AddIn.Hosting.AddInEnvironment&quot;></xref> class."
  remarks: "If you have access to the application domain that contains the add-in you need, you can use this constructor to obtain the add-in&quot;s <xref:System.AddIn.Hosting.AddInEnvironment> object. Otherwise, you can use the <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> property of the <xref:System.AddIn.Hosting.AddInController> class to obtain the <xref:System.AddIn.Hosting.AddInEnvironment> object."
  syntax:
    content: public AddInEnvironment (AppDomain appDomain);
    parameters:
    - id: appDomain
      type: System.AppDomain
      description: "The application domain that contains the add-in."
  overload: System.AddIn.Hosting.AddInEnvironment.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appDomain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Full-trust permission is demanded. A caller in the call chain does not have sufficient permission."
  platform:
  - net462
- uid: System.AddIn.Hosting.AddInEnvironment.Process
  id: Process
  parent: System.AddIn.Hosting.AddInEnvironment
  langs:
  - csharp
  name: Process
  nameWithType: AddInEnvironment.Process
  fullName: System.AddIn.Hosting.AddInEnvironment.Process
  type: Property
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Hosting
  summary: "Gets the <xref href=&quot;System.AddIn.Hosting.AddInProcess&quot;></xref> object that represents the process in which the add-in is running."
  remarks: "You can use this property to activate multiple add-ins in the same process but in different domains.       Pass the <xref:System.AddIn.Hosting.AddInProcess> object obtained with this property to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%2A> method overload.       If you want to activate them in the same domain in an external process you should pass the <xref:System.AddIn.Hosting.AddInEnvironment> object directly to the <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInEnvironment%29?displayProperty=fullName> method overload."
  syntax:
    content: public System.AddIn.Hosting.AddInProcess Process { get; }
    return:
      type: System.AddIn.Hosting.AddInProcess
      description: "The process in which the add-in is running."
  overload: System.AddIn.Hosting.AddInEnvironment.Process*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)
  parent: System.AddIn.Hosting.AddInEnvironment
  isExternal: false
  name: AddInEnvironment(AppDomain)
  nameWithType: AddInEnvironment.AddInEnvironment(AppDomain)
  fullName: System.AddIn.Hosting.AddInEnvironment.AddInEnvironment(AppDomain)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.AddIn.Hosting.AddInEnvironment.Process
  parent: System.AddIn.Hosting.AddInEnvironment
  isExternal: false
  name: Process
  nameWithType: AddInEnvironment.Process
  fullName: System.AddIn.Hosting.AddInEnvironment.Process
- uid: System.AddIn.Hosting.AddInProcess
  parent: System.AddIn.Hosting
  isExternal: false
  name: AddInProcess
  nameWithType: AddInProcess
  fullName: System.AddIn.Hosting.AddInProcess
- uid: System.AddIn.Hosting.AddInEnvironment.#ctor*
  parent: System.AddIn.Hosting.AddInEnvironment
  isExternal: false
  name: AddInEnvironment
  nameWithType: AddInEnvironment.AddInEnvironment
- uid: System.AddIn.Hosting.AddInEnvironment.Process*
  parent: System.AddIn.Hosting.AddInEnvironment
  isExternal: false
  name: Process
  nameWithType: AddInEnvironment.Process
