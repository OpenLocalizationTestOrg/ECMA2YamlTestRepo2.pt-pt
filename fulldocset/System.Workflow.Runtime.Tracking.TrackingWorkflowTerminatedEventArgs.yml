### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs
  id: TrackingWorkflowTerminatedEventArgs
  children:
  - System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception
  langs:
  - csharp
  name: TrackingWorkflowTerminatedEventArgs
  nameWithType: TrackingWorkflowTerminatedEventArgs
  fullName: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs
  type: Class
  summary: "Contains data associated with the termination of a workflow instance."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       A TrackingWorkflowTerminatedEventArgs is generated by the runtime tracking infrastructure when a workflow instance is terminated. If the <xref:System.Workflow.Runtime.Tracking.TrackingProfile> associated with a workflow instance includes a <xref:System.Workflow.Runtime.Tracking.WorkflowTrackPoint> configured for a <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent><xref:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent>, the workflow tracking infrastructure puts the TrackingWorkflowTerminatedEventArgs in <xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.EventArgs%2A> in the <xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord> that it sends to the tracking service.       A workflow instance may be terminated in one of three ways: the host may call <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A?displayProperty=fullName>; a <xref:System.Workflow.ComponentModel.TerminateActivity> activity may be invoked from inside the workflow instance; or an unhandled exception may occur. If the workflow is terminated by the host or a <xref:System.Workflow.ComponentModel.TerminateActivity> activity, the runtime tracking infrastructure sets <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception%2A> to a <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> that has its <xref:System.Exception.Message%2A> property set to a description of the reason for the termination. If the workflow is terminated because of an unhandled exception, the runtime tracking infrastructure passes the unhandled exception in <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception%2A>.      > [!NOTE] >  TrackingWorkflowTerminatedEventArgs is used only by the runtime tracking service to pass information in a <xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord>. The data for a <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated?displayProperty=fullName> event is passed in a <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>."
  example:
  - "The following code example demonstrates a method, named `WriteTerminatedEventArgs`, which captures a TrackingWorkflowTerminatedEventArgs. The code checks whether the <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception%2A> property is `null` (`Nothing` in Visual Basic). If it is not, the code writes the message associated with the <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception%2A> property to the console. If <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception%2A> is `null` (`Nothing`), the code does not write any exception information to the console.  \n  \n This code example is part of the EventArgs Tracking SDK Sample from the Program.cs file. For more information, see [EventArgs Tracking Sample](http://msdn.microsoft.com/en-us/94818da2-c3c4-4a13-b47a-a0fb30dbbf1c).  \n  \n [!code-cs[WF_Samples#288](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#288)]\n [!code-vb[WF_Samples#288](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#288)]"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public class TrackingWorkflowTerminatedEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception
  id: Exception
  parent: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: TrackingWorkflowTerminatedEventArgs.Exception
  fullName: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Tracking
  summary: "Gets the exception that caused the workflow instance to be terminated."
  remarks: "When the workflow instance is terminated because of an unhandled exception, Exception contains the unhandled exception.       When the workflow instance is terminated by either a host call to <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A?displayProperty=fullName> or by a <xref:System.Workflow.ComponentModel.TerminateActivity> activity,    Exception contains a <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> that has its <xref:System.Exception.Message%2A> property set to a description of the reason for the termination. If the host terminates the workflow instance, it supplies this description in the `string` parameter to <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A?displayProperty=fullName>; if the workflow instance is terminated by a <xref:System.Workflow.ComponentModel.TerminateActivity>, the description is supplied by <xref:System.Workflow.ComponentModel.TerminateActivity.Error%2A?displayProperty=fullName>."
  example:
  - "The following code example demonstrates a method, named `WriteTerminatedEventArgs`, which captures a <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs>. The code checks whether the Exception property is `null` (`Nothing` in Visual Basic). If it is not, the code writes the message associated with the Exception property to the console. If Exception is `null` (`Nothing`), the code does not write any exception information to the console.  \n  \n This code example is part of the EventArgs Tracking SDK Sample from the Program.cs file. For more information, see [EventArgs Tracking Sample](http://msdn.microsoft.com/en-us/94818da2-c3c4-4a13-b47a-a0fb30dbbf1c).  \n  \n [!code-cs[WF_Samples#288](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#288)]\n [!code-vb[WF_Samples#288](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#288)]"
  syntax:
    content: public Exception Exception { get; }
    return:
      type: System.Exception
      description: "The &lt;xref:System.Exception?displayProperty=fullName&gt; that caused the workflow instance to be terminated."
  overload: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception
  parent: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs
  isExternal: false
  name: Exception
  nameWithType: TrackingWorkflowTerminatedEventArgs.Exception
  fullName: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception*
  parent: System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs
  isExternal: false
  name: Exception
  nameWithType: TrackingWorkflowTerminatedEventArgs.Exception
