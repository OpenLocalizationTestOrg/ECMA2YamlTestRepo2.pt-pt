### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.PrincipalPermission
  id: PrincipalPermission
  children:
  - System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  - System.Security.Permissions.PrincipalPermission.Copy
  - System.Security.Permissions.PrincipalPermission.Demand
  - System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  - System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.PrincipalPermission.GetHashCode
  - System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.PrincipalPermission.IsUnrestricted
  - System.Security.Permissions.PrincipalPermission.ToString
  - System.Security.Permissions.PrincipalPermission.ToXml
  - System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: PrincipalPermission
  nameWithType: PrincipalPermission
  fullName: System.Security.Permissions.PrincipalPermission
  type: Class
  summary: "Allows checks against the active principal (see <xref:System.Security.Principal.IPrincipal>) using the language constructs defined for both declarative and imperative security actions. This class cannot be inherited."
  remarks: "By passing identity information (user name and role) to the constructor, PrincipalPermission can be used to demand that the identity of the active principal matches this information.       To match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>, both the specified identity and role must match. If `null` identity string is used, it is interpreted as a request to match any identity. Use of `null` role string will match any role. By implication, passing `null` parameter for `name` or `role` to PrincipalPermission will match the identity and roles in any <xref:System.Security.Principal.IPrincipal>. It is also possible to construct a PrincipalPermission that only determines whether the <xref:System.Security.Principal.IIdentity> represents an authenticated or unauthenticated entity. In this case, `name` and `role` are ignored.       Unlike most other permissions, PrincipalPermission does not extend <xref:System.Security.CodeAccessPermission>. It does, however, implement the <xref:System.Security.IPermission> interface. This is because PrincipalPermission is not a code access permission; that is, it is not granted based on the identity of the executing assembly. Instead, it allows code to perform actions (<xref:System.Security.Permissions.PrincipalPermission.Demand%2A>, <xref:System.Security.Permissions.PrincipalPermission.Union%2A>, <xref:System.Security.Permissions.PrincipalPermission.Intersect%2A>, and so on) against the current user identity in a manner consistent with the way those actions are performed for code access and code identity permissions.      > [!IMPORTANT] >  Prior to a demand for principal permission it is necessary to set the current application domain&quot;s principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy>. By default, the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy>, a demand for principal permission will fail. The following code should be executed before the principal permission is demanded:   >    >  `AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  example:
  - "The following example requires the active principal to be an administrator. The `name` parameter is `null`, which enables any user who is an administrator to pass the demand.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cs[Classic PrincipalPermission Example#1](~/add/codesnippet/csharp/t-system.security.permis_19_1.cs)]\n [!code-vb[Classic PrincipalPermission Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_19_1.vb)]\n [!code-cpp[Classic PrincipalPermission Example#1](~/add/codesnippet/cpp/t-system.security.permis_19_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(PermissionState)
  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref> class with the specified <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>."
  remarks: "`None` matches only the unauthenticated principal (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> is the empty string (&quot;&quot;), no <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> is `false`). `Unrestricted` matches all principals (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> is `null`, <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> is `null`).      > [!NOTE] >  This constructor is included for consistency with the design of other permissions, but is not useful in practice."
  syntax:
    content: public PrincipalPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "One of the <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref> values."
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>state</code> parameter is not a valid <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(String,String)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref> class for the specified <code>name</code> and <code>role</code>."
  remarks: "Both the `name` parameter and the `role` parameter must match for this permission to match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>. Set `name` to `null` to check for any user in a role."
  example:
  - "The following example requires the active principal to be an administrator. The `name` parameter is `null`, which enables any user who is an administrator to pass the demand.  \n  \n **Note** In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cs[Classic PrincipalPermission Example#1](~/add/codesnippet/csharp/b42fc3af-7a7c-4eef-9f54-_1.cs)]\n [!code-vb[Classic PrincipalPermission Example#1](~/add/codesnippet/visualbasic/b42fc3af-7a7c-4eef-9f54-_1.vb)]\n [!code-cpp[Classic PrincipalPermission Example#1](~/add/codesnippet/cpp/b42fc3af-7a7c-4eef-9f54-_1.cpp)]"
  syntax:
    content: public PrincipalPermission (string name, string role);
    parameters:
    - id: name
      type: System.String
      description: "The name of the <xref:System.Security.Principal.IPrincipal> object&quot;s user."
    - id: role
      type: System.String
      description: "The role of the <xref:System.Security.Principal.IPrincipal> object&quot;s user (for example, Administrator)."
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(String,String,Boolean)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String,Boolean)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref> class for the specified <code>name</code>, <code>role</code>, and authentication status."
  remarks: "Both the `name` parameter and the `role` parameter must match for this permission to match the active <xref:System.Security.Principal.IPrincipal> and associated <xref:System.Security.Principal.IIdentity>."
  syntax:
    content: public PrincipalPermission (string name, string role, bool isAuthenticated);
    parameters:
    - id: name
      type: System.String
      description: "The name of the <xref:System.Security.Principal.IPrincipal> object&quot;s user."
    - id: role
      type: System.String
      description: "The role of the <xref:System.Security.Principal.IPrincipal> object&quot;s user (for example, Administrator)."
    - id: isAuthenticated
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to signify that the user is authenticated; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Copy
  id: Copy
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: PrincipalPermission.Copy()
  fullName: System.Security.Permissions.PrincipalPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns an identical copy of the current permission."
  remarks: "A copy of the permission represents the same principal and identity as the original permission."
  syntax:
    content: public System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A copy of the current permission."
  overload: System.Security.Permissions.PrincipalPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Demand
  id: Demand
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: PrincipalPermission.Demand()
  fullName: System.Security.Permissions.PrincipalPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determines at run time whether the current principal matches the principal specified by the current permission."
  remarks: "If no <xref:System.Security.SecurityException> is raised, Demand succeeds.       This method acts against the principal attached to the calling thread.      > [!IMPORTANT] >  Prior to calling the Demand method, it is necessary to set the current application domain&quot;s principal policy to the enumeration value <xref:System.Security.Principal.PrincipalPolicy>. By default the principal policy is set to <xref:System.Security.Principal.PrincipalPolicy>. If you do not set the principal policy to <xref:System.Security.Principal.PrincipalPolicy>, a demand for principal permission will fail. The following code should be executed before the demand for principal permission occurs:   >    >  `AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.Permissions.PrincipalPermission.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The current principal does not pass the security check for the principal specified by the current permission.       -or-       The current <xref:System.Security.Principal.IPrincipal> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PrincipalPermission.Equals(Object)
  fullName: System.Security.Permissions.PrincipalPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determines whether the specified <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref> object is equal to the current <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>."
  remarks: "For more information, see <xref:System.Object.Equals%2A>."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref> object to compare with the current <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref> is equal to the current <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref> object; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.PrincipalPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PrincipalPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.PrincipalPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Reconstructs a permission with a specified state from an XML encoding."
  syntax:
    content: public void FromXml (System.Security.SecurityElement elem);
    parameters:
    - id: elem
      type: System.Security.SecurityElement
      description: "The XML encoding to use to reconstruct the permission."
  overload: System.Security.Permissions.PrincipalPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>elem</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>elem</code> parameter is not a valid permission element.       -or-       The <code>elem</code> parameter&quot;s version number is not valid."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PrincipalPermission.GetHashCode()
  fullName: System.Security.Permissions.PrincipalPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets a hash code for the <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table."
  remarks: "The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.Permissions.PrincipalPermission> objects."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "A hash code for the current <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref> object."
  overload: System.Security.Permissions.PrincipalPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: PrincipalPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns a permission that is the intersection of the current permission and the specified permission."
  remarks: "Because two users never intersect, this method is not useful for <xref:System.Security.Permissions.PrincipalPermission>. For example,       [!code-cpp[System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/cpp/7be5e612-f4dc-44d9-9530-_1.cpp)]  [!code-cs[System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/csharp/7be5e612-f4dc-44d9-9530-_1.cs)]  [!code-vb[System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/visualbasic/7be5e612-f4dc-44d9-9530-_1.vb)]       is equivalent to       [!code-cpp[System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/cpp/7be5e612-f4dc-44d9-9530-_2.cpp)]  [!code-cs[System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/csharp/7be5e612-f4dc-44d9-9530-_2.cs)]  [!code-vb[System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/visualbasic/7be5e612-f4dc-44d9-9530-_2.vb)]       because no identity can simultaneously represent both Bob and Louise. In effect, `pp1.Demand()` only succeeds if an unauthenticated principal (with name equal to the empty string (&quot;&quot;)) is allowed to act in the Administrator role."
  syntax:
    content: public System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to intersect with the current permission. It must be of the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "A new permission that represents the intersection of the current permission and the specified permission. This new permission will be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the intersection is empty."
  overload: System.Security.Permissions.PrincipalPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>target</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> and is not an instance of the same class as the current permission."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determines whether the current permission is a subset of the specified permission."
  remarks: "The current permission is a subset of the specified permission if all demands that succeed for the current permission also succeed for the specified permission."
  example:
  - "The following example defines instances of <xref:System.Security.Permissions.PrincipalPermission> corresponding to three distinct users. Two additional instances are then created as groups of users. `pp1` represents Bob and Louise, `pp2` represents Bob, Louise, and Greg.  \n  \n [!code-cpp[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/cpp/88c77b70-6ab7-4d6b-914d-_1.cpp)]\n [!code-vb[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/visualbasic/88c77b70-6ab7-4d6b-914d-_1.vb)]\n [!code-cs[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/csharp/88c77b70-6ab7-4d6b-914d-_1.cs)]  \n  \n With the preceding declarations, `pp1.IsSubsetOf(pp2)` returns `true`, and `pp2.IsSubsetOf(pp1)` returns `false`."
  syntax:
    content: public bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.PrincipalPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>target</code> parameter is an object that is not of the same type as the current permission."
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PrincipalPermission.IsUnrestricted()
  fullName: System.Security.Permissions.PrincipalPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Returns a value indicating whether the current permission is unrestricted."
  remarks: "An unrestricted <xref:System.Security.Permissions.PrincipalPermission> matches any principal."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current permission is unrestricted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.PrincipalPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.ToString
  id: ToString
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: ToString()
  nameWithType: PrincipalPermission.ToString()
  fullName: System.Security.Permissions.PrincipalPermission.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns a string representing the current permission."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A representation of the current permission."
  overload: System.Security.Permissions.PrincipalPermission.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: PrincipalPermission.ToXml()
  fullName: System.Security.Permissions.PrincipalPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates an XML encoding of the permission and its current state."
  syntax:
    content: public System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "An XML encoding of the permission, including any state information."
  overload: System.Security.Permissions.PrincipalPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: PrincipalPermission.Union(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates a permission that is the union of the current permission and the specified permission."
  remarks: "Union creates a permission representing the criteria of a given set of individual <xref:System.Security.Permissions.PrincipalPermission> objects. It is useful for compactly representing a set of conditions to test. For example, with the declarations       [!code-cpp[System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/cpp/dd443af0-98ea-4e3c-9761-_1.cpp)]  [!code-cs[System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/csharp/dd443af0-98ea-4e3c-9761-_1.cs)]  [!code-vb[System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/visualbasic/dd443af0-98ea-4e3c-9761-_1.vb)]       `(ppBob.Union(ppLouise)).Demand()` will succeed if the current principal represents Bob in the role of Administrator or Louise in the role of Administrator."
  syntax:
    content: public System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "A permission to combine with the current permission. It must be of the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "A new permission that represents the union of the current permission and the specified permission."
  overload: System.Security.Permissions.PrincipalPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>other</code> parameter is an object that is not of the same type as the current permission."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(PermissionState)
  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(String,String)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(String,String,Boolean)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String,Boolean)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.PrincipalPermission.Copy
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Copy()
  nameWithType: PrincipalPermission.Copy()
  fullName: System.Security.Permissions.PrincipalPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.PrincipalPermission.Demand
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Demand()
  nameWithType: PrincipalPermission.Demand()
  fullName: System.Security.Permissions.PrincipalPermission.Demand()
- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: PrincipalPermission.Equals(Object)
  fullName: System.Security.Permissions.PrincipalPermission.Equals(Object)
- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PrincipalPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.PrincipalPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: PrincipalPermission.GetHashCode()
  fullName: System.Security.Permissions.PrincipalPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: PrincipalPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Intersect(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.IsSubsetOf(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PrincipalPermission.IsUnrestricted()
  fullName: System.Security.Permissions.PrincipalPermission.IsUnrestricted()
- uid: System.Security.Permissions.PrincipalPermission.ToString
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToString()
  nameWithType: PrincipalPermission.ToString()
  fullName: System.Security.Permissions.PrincipalPermission.ToString()
- uid: System.Security.Permissions.PrincipalPermission.ToXml
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToXml()
  nameWithType: PrincipalPermission.ToXml()
  fullName: System.Security.Permissions.PrincipalPermission.ToXml()
- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: PrincipalPermission.Union(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Union(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.#ctor*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission
  nameWithType: PrincipalPermission.PrincipalPermission
- uid: System.Security.Permissions.PrincipalPermission.Copy*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Copy
  nameWithType: PrincipalPermission.Copy
- uid: System.Security.Permissions.PrincipalPermission.Demand*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Demand
  nameWithType: PrincipalPermission.Demand
- uid: System.Security.Permissions.PrincipalPermission.Equals*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Equals
  nameWithType: PrincipalPermission.Equals
- uid: System.Security.Permissions.PrincipalPermission.FromXml*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: FromXml
  nameWithType: PrincipalPermission.FromXml
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: GetHashCode
  nameWithType: PrincipalPermission.GetHashCode
- uid: System.Security.Permissions.PrincipalPermission.Intersect*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Intersect
  nameWithType: PrincipalPermission.Intersect
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: PrincipalPermission.IsSubsetOf
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: PrincipalPermission.IsUnrestricted
- uid: System.Security.Permissions.PrincipalPermission.ToString*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToString
  nameWithType: PrincipalPermission.ToString
- uid: System.Security.Permissions.PrincipalPermission.ToXml*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToXml
  nameWithType: PrincipalPermission.ToXml
- uid: System.Security.Permissions.PrincipalPermission.Union*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Union
  nameWithType: PrincipalPermission.Union
