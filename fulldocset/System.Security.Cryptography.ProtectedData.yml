### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ProtectedData
  id: ProtectedData
  children:
  - System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  - System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  langs:
  - csharp
  name: ProtectedData
  nameWithType: ProtectedData
  fullName: System.Security.Cryptography.ProtectedData
  type: Class
  summary: "Provides methods for encrypting and decrypting data. This class cannot be inherited."
  remarks: "This class provides access to the Data Protection API (DPAPI) available in Microsoft Windows 2000 and later operating systems. This is a service that is provided by the operating system and does not require additional libraries. It provides protection using the user or machine credentials to encrypt or decrypt data.  \n  \n The class consists of two wrappers for the unmanaged DPAPI, [Protect(Byte\\[\\], Byte\\[\\], DataProtectionScope)](assetId:///M:System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)?qualifyHint=False&autoUpgrade=True) and [Unprotect(Byte\\[\\], Byte\\[\\], DataProtectionScope)](assetId:///M:System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)?qualifyHint=False&autoUpgrade=True). These two methods can be used to encrypt and decrypt data such as passwords, keys, and connection strings.  \n  \n If you use these methods during impersonation, you may receive the following error: \"Key not valid for use in specified state.\" This occurs because the DPAPI stores the key data in user profiles. If the profile is not loaded, DPAPI won’t be able to perform the decryption. To prevent this error, load the profile of the user you want to impersonate before calling either method. Using DPAPI with impersonation can incur significant complication and requires careful design choices."
  example:
  - "The following example shows how to use data protection.  \n  \n [!code-cs[Cryptography.DataProtectionSample#1](~/add/codesnippet/csharp/t-system.security.crypto_126_1.cs)]\n [!code-cpp[Cryptography.DataProtectionSample#1](~/add/codesnippet/cpp/t-system.security.crypto_126_1.cpp)]\n [!code-vb[Cryptography.DataProtectionSample#1](~/add/codesnippet/visualbasic/t-system.security.crypto_126_1.vb)]"
  syntax:
    content: public static class ProtectedData
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  id: Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  parent: System.Security.Cryptography.ProtectedData
  langs:
  - csharp
  name: Protect(Byte[],Byte[],DataProtectionScope)
  nameWithType: ProtectedData.Protect(Byte[],Byte[],DataProtectionScope)
  fullName: System.Security.Cryptography.ProtectedData.Protect(Byte[],Byte[],DataProtectionScope)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Encrypts the data in a specified byte array and returns a byte array that contains the encrypted data."
  remarks: "This method can be used to encrypt data such as passwords, keys, or connection strings. The `optionalEntropy` parameter enables you to add data to increase the complexity of the encryption; specify `null` for no additional complexity. If provided, this information must also be used when decrypting the data using the <xref:System.Security.Cryptography.ProtectedData.Unprotect%2A> method.      > [!NOTE] >  If you use this method during impersonation, you may receive the following error: &quot;Key not valid for use in specified state.&quot; To prevent this error, load the profile of the user you want to impersonate before calling the method."
  example:
  - "The following example shows how to use data protection.  \n  \n [!code-cs[Cryptography.DataProtectionSample#1](~/add/codesnippet/csharp/95867340-d3f0-4c9c-82ca-_1.cs)]\n [!code-cpp[Cryptography.DataProtectionSample#1](~/add/codesnippet/cpp/95867340-d3f0-4c9c-82ca-_1.cpp)]\n [!code-vb[Cryptography.DataProtectionSample#1](~/add/codesnippet/visualbasic/95867340-d3f0-4c9c-82ca-_1.vb)]"
  syntax:
    content: public static byte[] Protect (byte[] userData, byte[] optionalEntropy, System.Security.Cryptography.DataProtectionScope scope);
    parameters:
    - id: userData
      type: System.Byte[]
      description: "A byte array that contains data to encrypt."
    - id: optionalEntropy
      type: System.Byte[]
      description: "An optional additional byte array used to increase the complexity of the encryption, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> for no additional complexity."
    - id: scope
      type: System.Security.Cryptography.DataProtectionScope
      description: "One of the enumeration values that specifies the scope of encryption."
    return:
      type: System.Byte[]
      description: "A byte array representing the encrypted data."
  overload: System.Security.Cryptography.ProtectedData.Protect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>userData</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The encryption failed."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The operating system does not support this method."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "The system ran out of memory while encrypting the data."
  platform:
  - net462
- uid: System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  id: Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  parent: System.Security.Cryptography.ProtectedData
  langs:
  - csharp
  name: Unprotect(Byte[],Byte[],DataProtectionScope)
  nameWithType: ProtectedData.Unprotect(Byte[],Byte[],DataProtectionScope)
  fullName: System.Security.Cryptography.ProtectedData.Unprotect(Byte[],Byte[],DataProtectionScope)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "Decrypts the data in a specified byte array and returns a byte array that contains the decrypted data."
  remarks: "This method can be used to unprotect data that was encrypted using the <xref:System.Security.Cryptography.ProtectedData.Protect%2A> method. If the `optionalEntropy` parameter was used during encryption, it must be supplied to unencrypt the data.      > [!NOTE] >  If you use this method during impersonation, you may receive the following error: &quot;Key not valid for use in specified state.&quot; To prevent this error, load the profile of the user you want to impersonate before calling the method."
  example:
  - "The following code example shows how to use data protection.  \n  \n [!code-cs[Cryptography.DataProtectionSample#1](~/add/codesnippet/csharp/52a5e76e-1631-47b1-9e44-_1.cs)]\n [!code-cpp[Cryptography.DataProtectionSample#1](~/add/codesnippet/cpp/52a5e76e-1631-47b1-9e44-_1.cpp)]\n [!code-vb[Cryptography.DataProtectionSample#1](~/add/codesnippet/visualbasic/52a5e76e-1631-47b1-9e44-_1.vb)]"
  syntax:
    content: public static byte[] Unprotect (byte[] encryptedData, byte[] optionalEntropy, System.Security.Cryptography.DataProtectionScope scope);
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "A byte array containing data encrypted using the <xref:System.Security.Cryptography.ProtectedData.Protect*> method."
    - id: optionalEntropy
      type: System.Byte[]
      description: "An optional additional byte array that was used to encrypt the data, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the additional byte array was not used."
    - id: scope
      type: System.Security.Cryptography.DataProtectionScope
      description: "One of the enumeration values that specifies the scope of data protection that was used to encrypt the data."
    return:
      type: System.Byte[]
      description: "A byte array representing the decrypted data."
  overload: System.Security.Cryptography.ProtectedData.Unprotect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>encryptedData</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The decryption failed."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The operating system does not support this method."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Out of memory."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  parent: System.Security.Cryptography.ProtectedData
  isExternal: false
  name: Protect(Byte[],Byte[],DataProtectionScope)
  nameWithType: ProtectedData.Protect(Byte[],Byte[],DataProtectionScope)
  fullName: System.Security.Cryptography.ProtectedData.Protect(Byte[],Byte[],DataProtectionScope)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DataProtectionScope
  parent: System.Security.Cryptography
  isExternal: false
  name: DataProtectionScope
  nameWithType: DataProtectionScope
  fullName: System.Security.Cryptography.DataProtectionScope
- uid: System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  parent: System.Security.Cryptography.ProtectedData
  isExternal: false
  name: Unprotect(Byte[],Byte[],DataProtectionScope)
  nameWithType: ProtectedData.Unprotect(Byte[],Byte[],DataProtectionScope)
  fullName: System.Security.Cryptography.ProtectedData.Unprotect(Byte[],Byte[],DataProtectionScope)
- uid: System.Security.Cryptography.ProtectedData.Protect*
  parent: System.Security.Cryptography.ProtectedData
  isExternal: false
  name: Protect
  nameWithType: ProtectedData.Protect
- uid: System.Security.Cryptography.ProtectedData.Unprotect*
  parent: System.Security.Cryptography.ProtectedData
  isExternal: false
  name: Unprotect
  nameWithType: ProtectedData.Unprotect
