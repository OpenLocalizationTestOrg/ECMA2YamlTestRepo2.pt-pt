### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.SendKeys
  id: SendKeys
  children:
  - System.Windows.Forms.SendKeys.Flush
  - System.Windows.Forms.SendKeys.Send(System.String)
  - System.Windows.Forms.SendKeys.SendWait(System.String)
  langs:
  - csharp
  name: SendKeys
  nameWithType: SendKeys
  fullName: System.Windows.Forms.SendKeys
  type: Class
  summary: "Fornece métodos para envio de batimentos de tecla para uma aplicação."
  remarks: "Utilize SendKeys para enviar batimentos de tecla e batimentos de tecla combinações para a aplicação Active Directory. Não é possível instanciar esta classe. Para enviar uma tecla para uma classe e imediatamente continuar o fluxo do programa, utilize <xref:System.Windows.Forms.SendKeys.Send%2A>.</xref:System.Windows.Forms.SendKeys.Send%2A> A aguardar para quaisquer processos iniciados pela tecla, utilize <xref:System.Windows.Forms.SendKeys.SendWait%2A>.</xref:System.Windows.Forms.SendKeys.SendWait%2A>       Cada chave é representada por um ou mais carateres. Para especificar um caráter único teclado, utilize o caráter de si próprio. Por exemplo, para representar a letra D, passa a cadeia &quot;A&quot; para o método. Para representar mais do que um caráter, acrescente cada caráter adicional para um anterior-lo. Para representar as letras A, B e C, especifique o parâmetro como &quot;ABC&quot;.       O sinal de adição (+), acento circunflexo (^), início de sessão (%) por cento, til (~) e parênteses (-) tem significados especiais para SendKeys. Para especificar um destes carateres, coloque-lo dentro de chavetas ({}). Por exemplo, para especificar o sinal de adição, utilize &quot;{+}&quot;. Para especificar a chaveta carateres, utilize &quot;{{}&quot; e &quot;{}}&quot;. Retos ([]) têm um significado especial para SendKeys, mas tem coloque-los chavetas. Em outras aplicações, parênteses Retos têm um significado especial que poderão ser significativo quando ocorre de intercâmbio de dados dinâmicos (DDE).      > [!CAUTION] > Se a sua aplicação destina-se internacional com uma variedade de teclados, a utilização de <xref:System.Windows.Forms.SendKeys.Send%2A>pode produzir resultados imprevisíveis e devem ser evitados.</xref:System.Windows.Forms.SendKeys.Send%2A>       Para especificar os carateres que não são apresentados quando prime uma chave, tais como ENTER ou SEPARADOR e as chaves que representam ações em vez de carateres, utilize os códigos na seguinte tabela.      | Chave | Código |   |---------|----------|   | RETROCESSO | {RETROCESSO}, {BS} ou {BKSP} |   | QUEBRAR | {QUEBRAR} |   | CAPS LOCK ATIVADO | {CAPSLOCK} |   | DEL ou eliminar | {ELIMINAR} ou {DEL} |   | SETA PARA BAIXO | {PENDENTE} |   | FIM | {END} |   | INTRODUZA | {INTRODUZA} ou ~ |   | ESC | {ESC} |   | AJUDAR | {AJUDAR} |   | HOME PAGE | {HOME PAGE} |   | INS ou inserir | {Inserir} ou {INS} |   | SETA PARA A ESQUERDA | {LEFT} |   | NÚM BLOQUEIO | {NUMLOCK} |   | PÁGINA PARA BAIXO | {PGDN} |   | PÁGINA CONFIGURAR | {PGUP} |   | ECRÃ DE IMPRESSÃO | {PRTSC} (reservado para utilização futura) |   | SETA PARA A DIREITA | {DIREITO} |   | BLOQUEIO DO DESLOCAMENTO | {SCROLLLOCK} |   | SEPARADOR | {SEPARADOR} |   | SETA PARA CIMA | {ATÉ} |   | F1 | {F1} |   | F2 | {F2} |   | F3 | {F3} |   | F4 | {F4} |   | F5 | {F5} |   | F6 | {F6} |   | F7 | {F7} |   | F8 | {F8} |   | F9 | {F9} |   | F10 | {F10} |   | F11 | {F11} |   | F12 | {F12} |   | F13 | {F13} |   | F14 | {F14} |   | F15 | {F15} |   | F16 | {F16} |   | Adicionar teclado | {ADICIONAR} |   | Teclado subtrair | {SUBTRAIR} |   | Teclado multiplicar | {MULTIPLICAR} |   | Divisão de teclado | {DIVIDIR} |       Para especificar chaves combinadas com qualquer combinação da SHIFT, teclas CTRL e ALT, preceder o código de chave com um ou mais dos seguintes códigos.      | Chave | Código |   |---------|----------|   | SHIFT | + |   | CTRL | ^ |   | ALT | % |       Para especificar que qualquer combinação de SHIFT, CTRL e ALT deve ser mantida durante vários outros ARROW são premidas, coloque o código para essas chaves parênteses. Por exemplo, para especificar a mantenha premida SHIFT enquanto i e C são premidos, utilize &quot;+ (EC)&quot;. Para especificar a mantenha premida SHIFT enquanto é premido I, seguido de C sem SHIFT, utilize &quot;+ EC&quot;.       Para especificar chaves repetidas, utilize o formato {chave number}. Tem de colocar um espaço entre chave e o número. Por exemplo, {esquerda 42} significa prima a tecla de seta para a esquerda vezes 42; {h 10} significa prima que h 10 vezes.      > [!NOTE] > Porque não existe nenhum método gerido para ativar a outra aplicação, pode utilizar esta classe na aplicação atual ou utilize métodos nativos do Windows, tais como `FindWindow` e `SetForegroundWindow`, para forçar o foco em outras aplicações.      > [!NOTE] > SendKeys a classe foi atualizada para o .NET Framework 3.0 ativar a sua utilização nas aplicações executadas no Windows Vista. A segurança avançada do Windows Vista (conhecido como o controlo de conta de utilizador ou UAC) impede que a implementação anterior de funcionar conforme esperado.   >> A classe de SendKeys é suscetível a problemas de temporização, alguns programadores tem tido para resolver o problema. A implementação atualizada ainda é suscetível a problemas de temporização, mas é ligeiramente mais rápida e poderá exigir alterações de soluções. A classe de SendKeys tenta utilizar primeiro a implementação anterior e, se não conseguir, utiliza a nova implementação. Como resultado, a classe de SendKeys pode comportar-se de forma diferente nos diferentes sistemas operativos. Além disso, quando a classe de SendKeys utiliza a nova implementação, o <xref:System.Windows.Forms.SendKeys.SendWait%2A>método não irá aguardar que as mensagens processadas quando são enviadas para outro processo.</xref:System.Windows.Forms.SendKeys.SendWait%2A>   >> Se a aplicação depende de um comportamento consistente, independentemente do sistema operativo, pode forçar a classe de SendKeys para utilizar a nova implementação, adicionando a seguinte definição de aplicação no ficheiro App. config.   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Para forçar a classe de SendKeys para utilizar a implementação anterior, utilize o valor `&quot;JournalHook&quot;` em vez disso."
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.SendKeys.Send%2A> method. To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/t-system.windows.forms.s_16_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/t-system.windows.forms.s_16_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/t-system.windows.forms.s_16_1.vb)]"
  syntax:
    content: public class SendKeys
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Flush
  id: Flush
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processa todas as mensagens de Windows atualmente na fila de mensagens."
  remarks: "Utilize o esvaziamento de espera para a aplicação para processar batimentos de tecla e outras mensagens de sistema operativo que estão na fila de mensagens. Isto é equivalente ao chamar <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>até que existem não existem chaves mais processar.</xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>      > [!NOTE] > Porque não existe nenhum método gerido para ativar a outra aplicação, pode utilizar esta classe na aplicação atual ou utilize métodos nativos do Windows, tais como `FindWindow` e `SetForegroundWindow`, para forçar o foco em outras aplicações."
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Windows.Forms.SendKeys.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  id: Send(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Envia batimentos de tecla para a aplicação Active Directory."
  remarks: "Cada chave é representada por um ou mais carateres. Para especificar um caráter único teclado, utilize o caráter de si próprio. Por exemplo, para representar a letra D, passa a cadeia &quot;A&quot; para o método. Para representar mais do que um caráter, acrescente cada caráter adicional para um anterior-lo. Para representar as letras A, B e C, especifique o parâmetro como &quot;ABC&quot;.       O sinal de adição (+), acento circunflexo (^), início de sessão (%) por cento, til (~) e parênteses (-) tem significados especiais para <xref:System.Windows.Forms.SendKeys>.</xref:System.Windows.Forms.SendKeys> Para especificar um destes carateres, coloque-lo dentro de chavetas ({}). Por exemplo, para especificar o sinal de adição, utilize &quot;{+}&quot;. Para especificar a chaveta carateres, utilize &quot;{{}&quot; e &quot;{}}&quot;. Retos ([]) têm um significado especial para <xref:System.Windows.Forms.SendKeys>, mas tem coloque-los chavetas.</xref:System.Windows.Forms.SendKeys> Em outras aplicações, parênteses Retos têm um significado especial que poderão ser significativo quando ocorre de intercâmbio de dados dinâmicos (DDE).      > [!CAUTION] > Se a aplicação destina-se internacional com uma variedade de teclados, a utilização de envio pode produzir resultados imprevisíveis e devem ser evitada.       Para especificar os carateres que não são apresentados quando prime uma chave, tais como ENTER ou SEPARADOR e as chaves que representam ações em vez de carateres, utilize os códigos na seguinte tabela.      | Chave | Código |   |---------|----------|   | RETROCESSO | {RETROCESSO}, {BS} ou {BKSP} |   | QUEBRAR | {QUEBRAR} |   | CAPS LOCK ATIVADO | {CAPSLOCK} |   | DEL ou eliminar | {ELIMINAR} ou {DEL} |   | SETA PARA BAIXO | {PENDENTE} |   | FIM | {END} |   | INTRODUZA | {INTRODUZA} ou ~ |   | ESC | {ESC} |   | AJUDAR | {AJUDAR} |   | HOME PAGE | {HOME PAGE} |   | INS ou inserir | {Inserir} ou {INS} |   | SETA PARA A ESQUERDA | {LEFT} |   | NÚM BLOQUEIO | {NUMLOCK} |   | PÁGINA PARA BAIXO | {PGDN} |   | PÁGINA CONFIGURAR | {PGUP} |   | ECRÃ DE IMPRESSÃO | {PRTSC} (reservado para utilização futura) |   | SETA PARA A DIREITA | {DIREITO} |   | BLOQUEIO DO DESLOCAMENTO | {SCROLLLOCK} |   | SEPARADOR | {SEPARADOR} |   | SETA PARA CIMA | {ATÉ} |   | F1 | {F1} |   | F2 | {F2} |   | F3 | {F3} |   | F4 | {F4} |   | F5 | {F5} |   | F6 | {F6} |   | F7 | {F7} |   | F8 | {F8} |   | F9 | {F9} |   | F10 | {F10} |   | F11 | {F11} |   | F12 | {F12} |   | F13 | {F13} |   | F14 | {F14} |   | F15 | {F15} |   | F16 | {F16} |   | Adicionar teclado | {ADICIONAR} |   | Teclado subtrair | {SUBTRAIR} |   | Teclado multiplicar | {MULTIPLICAR} |   | Divisão de teclado | {DIVIDIR} |       Para especificar chaves combinadas com qualquer combinação da SHIFT, teclas CTRL e ALT, preceder o código de chave com um ou mais dos seguintes códigos.      | Chave | Código |   |---------|----------|   | SHIFT | + |   | CTRL | ^ |   | ALT | % |       Para especificar que qualquer combinação de SHIFT, CTRL e ALT deve ser mantida durante vários outros ARROW são premidas, coloque o código para essas chaves parênteses. Por exemplo, para especificar a mantenha premida SHIFT enquanto i e C são premidos, utilize &quot;+ (EC)&quot;. Para especificar a mantenha premida SHIFT enquanto é premido I, seguido de C sem SHIFT, utilize &quot;+ EC&quot;.       Para especificar chaves repetidas, utilize o formato {chave number}. Tem de colocar um espaço entre chave e o número. Por exemplo, {esquerda 42} significa prima a tecla de seta para a esquerda vezes 42; {h 10} significa prima que h 10 vezes.      > [!NOTE] > Porque não existe nenhum método gerido para ativar a outra aplicação, pode utilizar esta classe na aplicação atual ou utilize métodos nativos do Windows, tais como `FindWindow` e `SetForegroundWindow`, para forçar o foco em outras aplicações.      > [!NOTE] > O <xref:System.Windows.Forms.SendKeys>classe foi atualizada para o .NET Framework 3.0 ativar a sua utilização nas aplicações executadas no Windows Vista.</xref:System.Windows.Forms.SendKeys> A segurança avançada do Windows Vista (conhecido como o controlo de conta de utilizador ou UAC) impede que a implementação anterior de funcionar conforme esperado.   >> O <xref:System.Windows.Forms.SendKeys>classe é suscetível a problemas de temporização, alguns programadores tem tido contornar.</xref:System.Windows.Forms.SendKeys> A implementação atualizada ainda é suscetível a problemas de temporização, mas é ligeiramente mais rápida e poderá exigir alterações de soluções. O <xref:System.Windows.Forms.SendKeys>classe tenta utilizar primeiro a implementação anterior e, se não conseguir, utiliza a nova implementação.</xref:System.Windows.Forms.SendKeys> Como resultado, o <xref:System.Windows.Forms.SendKeys>classe pode comportar-se de forma diferente nos diferentes sistemas operativos.</xref:System.Windows.Forms.SendKeys> Além disso, quando o <xref:System.Windows.Forms.SendKeys>classe utiliza a nova implementação, o <xref:System.Windows.Forms.SendKeys.SendWait%2A>método não irá aguardar que as mensagens processadas quando são enviadas para outro processo.</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys>   >> Se a aplicação depende de um comportamento consistente, independentemente do sistema operativo, pode forçar a <xref:System.Windows.Forms.SendKeys>classe para utilizar a nova implementação, adicionando a seguinte definição de aplicação no ficheiro App. config.</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Para forçar o <xref:System.Windows.Forms.SendKeys>classe para utilizar a implementação anterior, utilize o valor `&quot;JournalHook&quot;` em vez disso.</xref:System.Windows.Forms.SendKeys>"
  example:
  - "The following code example demonstrates how to use the Send method.To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/m-system.windows.forms.s_9_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/m-system.windows.forms.s_9_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/m-system.windows.forms.s_9_1.vb)]"
  syntax:
    content: public static void Send (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "A cadeia de batimentos de tecla para enviar."
  overload: System.Windows.Forms.SendKeys.Send*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Não é uma aplicação para enviar batimentos de tecla para Active Directory."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keys</code>não representar batimentos de tecla válidos"
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  id: SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Envia as chaves especificadas para a aplicação Active Directory e, em seguida, aguarda que as mensagens a ser processado."
  remarks: "Utilize SendWait para enviar batimentos de tecla ou combinações de batimentos de tecla para a aplicação Active Directory e aguarde que as mensagens de tecla ser processado. Pode utilizar este método para enviar batimentos de tecla para uma aplicação e aguardar quaisquer processos que são iniciados por batimentos de tecla seja concluída. Isto pode ser importante se a outra aplicação tem de concluir antes de continuar com a aplicação.      > [!NOTE] > Porque não existe nenhum método gerido para ativar a outra aplicação, pode utilizar esta classe na aplicação atual ou utilize métodos nativos do Windows, tais como `FindWindow` e `SetForegroundWindow`, para forçar o foco em outras aplicações.      > [!NOTE] > O <xref:System.Windows.Forms.SendKeys>classe foi atualizada para o .NET Framework 3.0 ativar a sua utilização nas aplicações executadas no Windows Vista.</xref:System.Windows.Forms.SendKeys> A segurança avançada do Windows Vista (conhecido como o controlo de conta de utilizador ou UAC) impede que a implementação anterior de funcionar conforme esperado.   >> O <xref:System.Windows.Forms.SendKeys>classe é suscetível a problemas de temporização, alguns programadores tem tido contornar.</xref:System.Windows.Forms.SendKeys> A implementação atualizada ainda é suscetível a problemas de temporização, mas é ligeiramente mais rápida e poderá exigir alterações de soluções. O <xref:System.Windows.Forms.SendKeys>classe tenta utilizar primeiro a implementação anterior e, se não conseguir, utiliza a nova implementação.</xref:System.Windows.Forms.SendKeys> Como resultado, o <xref:System.Windows.Forms.SendKeys>classe pode comportar-se de forma diferente nos diferentes sistemas operativos.</xref:System.Windows.Forms.SendKeys> Além disso, quando o <xref:System.Windows.Forms.SendKeys>classe utiliza a nova implementação, o método SendWait não irá aguardar que as mensagens processadas quando são enviadas para outro processo.</xref:System.Windows.Forms.SendKeys>   >> Se a aplicação depende de um comportamento consistente, independentemente do sistema operativo, pode forçar a <xref:System.Windows.Forms.SendKeys>classe para utilizar a nova implementação, adicionando a seguinte definição de aplicação no ficheiro App. config.</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Para forçar o <xref:System.Windows.Forms.SendKeys>classe para utilizar a implementação anterior, utilize o valor `&quot;JournalHook&quot;` em vez disso.</xref:System.Windows.Forms.SendKeys>"
  syntax:
    content: public static void SendWait (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "A cadeia de batimentos de tecla para enviar."
  overload: System.Windows.Forms.SendKeys.SendWait*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.SendKeys.Flush
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
- uid: System.Windows.Forms.SendKeys.Flush*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush
  nameWithType: SendKeys.Flush
- uid: System.Windows.Forms.SendKeys.Send*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send
  nameWithType: SendKeys.Send
- uid: System.Windows.Forms.SendKeys.SendWait*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait
  nameWithType: SendKeys.SendWait
