### YamlMime:ManagedReference
items:
- uid: System.Management.Instrumentation.ManagementEntityAttribute
  id: ManagementEntityAttribute
  children:
  - System.Management.Instrumentation.ManagementEntityAttribute.#ctor
  - System.Management.Instrumentation.ManagementEntityAttribute.External
  - System.Management.Instrumentation.ManagementEntityAttribute.Name
  - System.Management.Instrumentation.ManagementEntityAttribute.Singleton
  langs:
  - csharp
  name: ManagementEntityAttribute
  nameWithType: ManagementEntityAttribute
  fullName: System.Management.Instrumentation.ManagementEntityAttribute
  type: Class
  summary: "The ManagementEntity attribute indicates that a class provides management information exposed through a WMI provider.       Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development."
  remarks: "The class marked by this attribute must be public."
  example:
  - "The following example shows how to use the ManagementEntity attribute to mark a class.  \n  \n```  \n// Use the ManagementEntity attribute on the class to specify that this // class contains management information that is available from  \n// provider.  \n  \n    [ManagementEntity(Name = \"MortgageCalc\")]  \n    public class MortgageCalcWMIProvider  \n    {  \n    }  \n```"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)]

      public sealed class ManagementEntityAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Management.Instrumentation.ManagementEntityAttribute.#ctor
  id: '#ctor'
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  langs:
  - csharp
  name: ManagementEntityAttribute()
  nameWithType: ManagementEntityAttribute.ManagementEntityAttribute()
  fullName: System.Management.Instrumentation.ManagementEntityAttribute.ManagementEntityAttribute()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Management.Instrumentation
  summary: "Initializes a new instance of the <xref:System.Management.ManagementEntityAttribute> class. This is the default constructor."
  remarks: "This constructor does not take a name parameter. If you do not specify a name by using the [Name](~/add/includes/ajax-current-ext-md.md) parameter, the name of the associated WMI class will default to the name of the attributed class."
  syntax:
    content: public ManagementEntityAttribute ();
    parameters: []
  overload: System.Management.Instrumentation.ManagementEntityAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.ManagementEntityAttribute.External
  id: External
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  langs:
  - csharp
  name: External
  nameWithType: ManagementEntityAttribute.External
  fullName: System.Management.Instrumentation.ManagementEntityAttribute.External
  type: Property
  assemblies:
  - System.Core
  namespace: System.Management.Instrumentation
  summary: "Gets or sets a value that specifies whether the class represents a WMI class in a provider implemented external to the current assembly."
  remarks: "This is used when implementing providers that implement classes that extend existing abstract WMI classes."
  syntax:
    content: public bool External { get; set; }
    return:
      type: System.Boolean
      description: "A boolean value that is true if the class represents an external WMI class and false otherwise."
  overload: System.Management.Instrumentation.ManagementEntityAttribute.External*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.ManagementEntityAttribute.Name
  id: Name
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  langs:
  - csharp
  name: Name
  nameWithType: ManagementEntityAttribute.Name
  fullName: System.Management.Instrumentation.ManagementEntityAttribute.Name
  type: Property
  assemblies:
  - System.Core
  namespace: System.Management.Instrumentation
  summary: "Gets or sets the name of the WMI class."
  remarks: "If you do not specify the name of the WMI class by setting this property, the WMI class will default to the name of the attributed class."
  example:
  - "In the following example, the Name parameter is used to set the name of the WMI class represented by the MortgageCalcWMIProvider class. It sets the name to MortgageCalculator. If the Name parameter is not used, the corresponding C# class name, MortgageCalcWMIProvider in this case, is used as the WMI class name.  \n  \n```  \n[ManagementEntity(Name = \"MortgageCalculator\")]  \npublic class MortgageCalcWMIProvider  \n{  \n}  \n```"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "A string that contains the name of the WMI class."
  overload: System.Management.Instrumentation.ManagementEntityAttribute.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.ManagementEntityAttribute.Singleton
  id: Singleton
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  langs:
  - csharp
  name: Singleton
  nameWithType: ManagementEntityAttribute.Singleton
  fullName: System.Management.Instrumentation.ManagementEntityAttribute.Singleton
  type: Property
  assemblies:
  - System.Core
  namespace: System.Management.Instrumentation
  summary: "Specifies whether the associated class represents a singleton WMI class."
  remarks: "A singleton WMI class is one for which there can only ever be a single instance. Although you could code the logic to ensure that only a single instance of a WMI class is ever created, this parameter attribute is provided to make the task easy and consistent.       When working with singleton WMI classes, client applications must use special syntax. For more information, see the Describing an Instance Object Path topic in the MSDN online library at [http://www.msdn.com](http://www.msdn.com/)."
  example:
  - "The following code snippet demonstrates how to use the Singleton parameter to indicate that a C# class corresponds to a singleton WMI class.  \n  \n```  \n[ManagementEntity(Singleton=true)]  \npublic class SingletonSample  \n```  \n  \n For a complete, working example of a provider that implements a singleton class, see [How to: Create a Basic Decoupled Provider](http://msdn.microsoft.com/en-us/1dabd442-c1ff-40a1-bb0e-d7b3566c2300)."
  syntax:
    content: public bool Singleton { get; set; }
    return:
      type: System.Boolean
      description: "A boolean value that is true if the class represents a singleton WMI class and false otherwise."
  overload: System.Management.Instrumentation.ManagementEntityAttribute.Singleton*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Management.Instrumentation.ManagementEntityAttribute.#ctor
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  isExternal: false
  name: ManagementEntityAttribute()
  nameWithType: ManagementEntityAttribute.ManagementEntityAttribute()
  fullName: System.Management.Instrumentation.ManagementEntityAttribute.ManagementEntityAttribute()
- uid: System.Management.Instrumentation.ManagementEntityAttribute.External
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  isExternal: false
  name: External
  nameWithType: ManagementEntityAttribute.External
  fullName: System.Management.Instrumentation.ManagementEntityAttribute.External
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Management.Instrumentation.ManagementEntityAttribute.Name
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  isExternal: false
  name: Name
  nameWithType: ManagementEntityAttribute.Name
  fullName: System.Management.Instrumentation.ManagementEntityAttribute.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Management.Instrumentation.ManagementEntityAttribute.Singleton
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  isExternal: false
  name: Singleton
  nameWithType: ManagementEntityAttribute.Singleton
  fullName: System.Management.Instrumentation.ManagementEntityAttribute.Singleton
- uid: System.Management.Instrumentation.ManagementEntityAttribute.#ctor*
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  isExternal: false
  name: ManagementEntityAttribute
  nameWithType: ManagementEntityAttribute.ManagementEntityAttribute
- uid: System.Management.Instrumentation.ManagementEntityAttribute.External*
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  isExternal: false
  name: External
  nameWithType: ManagementEntityAttribute.External
- uid: System.Management.Instrumentation.ManagementEntityAttribute.Name*
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  isExternal: false
  name: Name
  nameWithType: ManagementEntityAttribute.Name
- uid: System.Management.Instrumentation.ManagementEntityAttribute.Singleton*
  parent: System.Management.Instrumentation.ManagementEntityAttribute
  isExternal: false
  name: Singleton
  nameWithType: ManagementEntityAttribute.Singleton
