### YamlMime:ManagedReference
items:
- uid: System.Device.Location.CivicAddress
  id: CivicAddress
  children:
  - System.Device.Location.CivicAddress.#ctor
  - System.Device.Location.CivicAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)
  - System.Device.Location.CivicAddress.AddressLine1
  - System.Device.Location.CivicAddress.AddressLine2
  - System.Device.Location.CivicAddress.Building
  - System.Device.Location.CivicAddress.City
  - System.Device.Location.CivicAddress.CountryRegion
  - System.Device.Location.CivicAddress.FloorLevel
  - System.Device.Location.CivicAddress.IsUnknown
  - System.Device.Location.CivicAddress.PostalCode
  - System.Device.Location.CivicAddress.StateProvince
  - System.Device.Location.CivicAddress.Unknown
  langs:
  - csharp
  name: CivicAddress
  nameWithType: CivicAddress
  fullName: System.Device.Location.CivicAddress
  type: Class
  summary: "Represents a civic address. A civic address can include fields such as street address, postal code, state/province, and country or region."
  remarks: "A civic address for a location can be obtained from a <xref:System.Device.Location.GeoCoordinate> by using a class that implements <xref:System.Device.Location.ICivicAddressResolver>.       The <xref:System.Device.Location.CivicAddressResolver> class provides a default implementation that returns the civic address that corresponds to a <xref:System.Device.Location.GeoCoordinate>, if the location source provides both coordinate data as well as civic address data.       <xref:System.Device.Location.CivicAddressResolver.ResolveAddress%2A> returns a CivicAddress for the current location.  If the location source is unable to resolve the coordinate position to a civic address, <xref:System.Device.Location.CivicAddress.Unknown> is returned."
  example:
  - "The following example shows how to resolve a CivicAddress from a <xref:System.Device.Location.GeoCoordinate> location synchronously.  \n  \n [!code-cs[System.Device.Location.ResolveCivicAddressSync#1](~/add/codesnippet/csharp/resolveaddresssync/resolvecivicaddresssync.cs#1)]\n [!code-vb[System.Device.Location.ResolveCivicAddressSync#1](~/add/codesnippet/visualbasic/resolvecivicaddresssync/resolvecivicaddresssync.vb#1)]  \n  \n The following example shows how to resolve a CivicAddress from a <xref:System.Device.Location.GeoCoordinate> location asynchronously.  \n  \n [!code-cs[System.Device.Location.ResolveCivicAddressAsync#1](~/add/codesnippet/csharp/resolveaddressasync/resolvecivicaddressasync.cs#1)]\n [!code-vb[System.Device.Location.ResolveCivicAddressAsync#1](~/add/codesnippet/visualbasic/resolvecivicaddressasync/resolvecivicaddressasync.vb#1)]"
  syntax:
    content: public class CivicAddress
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.#ctor
  id: '#ctor'
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: CivicAddress()
  nameWithType: CivicAddress.CivicAddress()
  fullName: System.Device.Location.CivicAddress.CivicAddress()
  type: Constructor
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Initializes a new instance of the <xref href=&quot;System.Device.Location.CivicAddress&quot;></xref> class."
  remarks: "All fields are initialized to <xref:System.String.Empty>."
  syntax:
    content: public CivicAddress ();
    parameters: []
  overload: System.Device.Location.CivicAddress.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)'
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: CivicAddress(String,String,String,String,String,String,String,String)
  nameWithType: CivicAddress.CivicAddress(String,String,String,String,String,String,String,String)
  fullName: System.Device.Location.CivicAddress.CivicAddress(String,String,String,String,String,String,String,String)
  type: Constructor
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Initializes a new instance of the <xref href=&quot;System.Device.Location.CivicAddress&quot;></xref> class using address information."
  syntax:
    content: public CivicAddress (string addressLine1, string addressLine2, string building, string city, string countryRegion, string floorLevel, string postalCode, string stateProvince);
    parameters:
    - id: addressLine1
      type: System.String
      description: "A string containing the first line of the street address."
    - id: addressLine2
      type: System.String
      description: "A string containing the second line of the street address."
    - id: building
      type: System.String
      description: "A string containing the building name or number."
    - id: city
      type: System.String
      description: "A string containing the city."
    - id: countryRegion
      type: System.String
      description: "A string containing the country or region."
    - id: floorLevel
      type: System.String
      description: "A string containing the floor number."
    - id: postalCode
      type: System.String
      description: "A string containing the postal code."
    - id: stateProvince
      type: System.String
      description: "A string containing the state or province."
  overload: System.Device.Location.CivicAddress.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "At least one parameter must be a non-empty string."
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.AddressLine1
  id: AddressLine1
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: AddressLine1
  nameWithType: CivicAddress.AddressLine1
  fullName: System.Device.Location.CivicAddress.AddressLine1
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the first line of the address."
  syntax:
    content: public string AddressLine1 { get; set; }
    return:
      type: System.String
      description: "Returns the first line of the address. If the data is not provided, returns <xref:System.String>."
  overload: System.Device.Location.CivicAddress.AddressLine1*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.AddressLine2
  id: AddressLine2
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: AddressLine2
  nameWithType: CivicAddress.AddressLine2
  fullName: System.Device.Location.CivicAddress.AddressLine2
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the second line of the address."
  syntax:
    content: public string AddressLine2 { get; set; }
    return:
      type: System.String
      description: "Returns the second line of the address. If the data is not provided, returns <xref:System.String.Empty.>"
  overload: System.Device.Location.CivicAddress.AddressLine2*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.Building
  id: Building
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: Building
  nameWithType: CivicAddress.Building
  fullName: System.Device.Location.CivicAddress.Building
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the building name or number."
  syntax:
    content: public string Building { get; set; }
    return:
      type: System.String
      description: "Returns the building name or number. If the data is not provided, returns <xref:System.String>."
  overload: System.Device.Location.CivicAddress.Building*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.City
  id: City
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: City
  nameWithType: CivicAddress.City
  fullName: System.Device.Location.CivicAddress.City
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the name of the city."
  syntax:
    content: public string City { get; set; }
    return:
      type: System.String
      description: "Returns the name of the city. If the data is not provided, returns <xref:System.String>."
  overload: System.Device.Location.CivicAddress.City*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.CountryRegion
  id: CountryRegion
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: CountryRegion
  nameWithType: CivicAddress.CountryRegion
  fullName: System.Device.Location.CivicAddress.CountryRegion
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the country or region of the location."
  remarks: "The country or region is typically represented by a two-letter ISO-3166 country code."
  syntax:
    content: public string CountryRegion { get; set; }
    return:
      type: System.String
      description: "Returns the country or region code. If the data is not provided, returns <xref:System.String>."
  overload: System.Device.Location.CivicAddress.CountryRegion*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.FloorLevel
  id: FloorLevel
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: FloorLevel
  nameWithType: CivicAddress.FloorLevel
  fullName: System.Device.Location.CivicAddress.FloorLevel
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the floor level of the location."
  syntax:
    content: public string FloorLevel { get; set; }
    return:
      type: System.String
      description: "Returns a string that contains the floor level. If the data is not provided, returns <xref:System.String>."
  overload: System.Device.Location.CivicAddress.FloorLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.IsUnknown
  id: IsUnknown
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: IsUnknown
  nameWithType: CivicAddress.IsUnknown
  fullName: System.Device.Location.CivicAddress.IsUnknown
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets a value that indicates whether the <xref href=&quot;System.Device.Location.CivicAddress&quot;></xref> contains data."
  remarks: ''
  example:
  - "The following example uses IsUnknown to check the <xref:System.Device.Location.CivicAddress> that is returned from <xref:System.Device.Location.CivicAddressResolver.ResolveAddress%2A> before the civic address is printed out.  \n  \n [!code-cs[System.Device.Location.ResolveCivicAddressSync#2](~/add/codesnippet/csharp/resolveaddresssync/resolvecivicaddresssync.cs#2)]\n [!code-vb[System.Device.Location.ResolveCivicAddressSync#2](~/add/codesnippet/visualbasic/resolvecivicaddresssync/resolvecivicaddresssync.vb#2)]"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Device.Location.CivicAddress&quot;></xref> is equal to <xref href=&quot;System.Device.Location.CivicAddress.Unknown&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Device.Location.CivicAddress.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.PostalCode
  id: PostalCode
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: PostalCode
  nameWithType: CivicAddress.PostalCode
  fullName: System.Device.Location.CivicAddress.PostalCode
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the postal code of the location."
  syntax:
    content: public string PostalCode { get; set; }
    return:
      type: System.String
      description: "Returns the postal code of the location. If the data is not provided, returns <xref:System.String>."
  overload: System.Device.Location.CivicAddress.PostalCode*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.StateProvince
  id: StateProvince
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: StateProvince
  nameWithType: CivicAddress.StateProvince
  fullName: System.Device.Location.CivicAddress.StateProvince
  type: Property
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Gets or sets the state or province of the location."
  syntax:
    content: public string StateProvince { get; set; }
    return:
      type: System.String
      description: "Returns the state or province of the location. If the data is not provided, returns <xref:System.String>."
  overload: System.Device.Location.CivicAddress.StateProvince*
  exceptions: []
  platform:
  - net462
- uid: System.Device.Location.CivicAddress.Unknown
  id: Unknown
  parent: System.Device.Location.CivicAddress
  langs:
  - csharp
  name: Unknown
  nameWithType: CivicAddress.Unknown
  fullName: System.Device.Location.CivicAddress.Unknown
  type: Field
  assemblies:
  - System.Device
  namespace: System.Device.Location
  summary: "Represents a <xref href=&quot;System.Device.Location.CivicAddress&quot;></xref> that contains no data."
  remarks: "Use <xref:System.Device.Location.CivicAddress.IsUnknown%2A> to verify whether a <xref:System.Device.Location.CivicAddress> contains data."
  example:
  - "The following example uses <xref:System.Device.Location.CivicAddress.IsUnknown%2A> to check the <xref:System.Device.Location.CivicAddress> that is returned from <xref:System.Device.Location.CivicAddressResolver.ResolveAddress%2A> before the civic address is printed out.  \n  \n [!code-cs[System.Device.Location.ResolveCivicAddressSync#2](~/add/codesnippet/csharp/resolveaddresssync/resolvecivicaddresssync.cs#2)]\n [!code-vb[System.Device.Location.ResolveCivicAddressSync#2](~/add/codesnippet/visualbasic/resolvecivicaddresssync/resolvecivicaddresssync.vb#2)]"
  syntax:
    content: public static readonly System.Device.Location.CivicAddress Unknown;
    return:
      type: System.Device.Location.CivicAddress
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Device.Location.CivicAddress.#ctor
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: CivicAddress()
  nameWithType: CivicAddress.CivicAddress()
  fullName: System.Device.Location.CivicAddress.CivicAddress()
- uid: System.Device.Location.CivicAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: CivicAddress(String,String,String,String,String,String,String,String)
  nameWithType: CivicAddress.CivicAddress(String,String,String,String,String,String,String,String)
  fullName: System.Device.Location.CivicAddress.CivicAddress(String,String,String,String,String,String,String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Device.Location.CivicAddress.AddressLine1
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: AddressLine1
  nameWithType: CivicAddress.AddressLine1
  fullName: System.Device.Location.CivicAddress.AddressLine1
- uid: System.Device.Location.CivicAddress.AddressLine2
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: AddressLine2
  nameWithType: CivicAddress.AddressLine2
  fullName: System.Device.Location.CivicAddress.AddressLine2
- uid: System.Device.Location.CivicAddress.Building
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: Building
  nameWithType: CivicAddress.Building
  fullName: System.Device.Location.CivicAddress.Building
- uid: System.Device.Location.CivicAddress.City
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: City
  nameWithType: CivicAddress.City
  fullName: System.Device.Location.CivicAddress.City
- uid: System.Device.Location.CivicAddress.CountryRegion
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: CountryRegion
  nameWithType: CivicAddress.CountryRegion
  fullName: System.Device.Location.CivicAddress.CountryRegion
- uid: System.Device.Location.CivicAddress.FloorLevel
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: FloorLevel
  nameWithType: CivicAddress.FloorLevel
  fullName: System.Device.Location.CivicAddress.FloorLevel
- uid: System.Device.Location.CivicAddress.IsUnknown
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: IsUnknown
  nameWithType: CivicAddress.IsUnknown
  fullName: System.Device.Location.CivicAddress.IsUnknown
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Device.Location.CivicAddress.PostalCode
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: PostalCode
  nameWithType: CivicAddress.PostalCode
  fullName: System.Device.Location.CivicAddress.PostalCode
- uid: System.Device.Location.CivicAddress.StateProvince
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: StateProvince
  nameWithType: CivicAddress.StateProvince
  fullName: System.Device.Location.CivicAddress.StateProvince
- uid: System.Device.Location.CivicAddress.Unknown
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: Unknown
  nameWithType: CivicAddress.Unknown
  fullName: System.Device.Location.CivicAddress.Unknown
- uid: System.Device.Location.CivicAddress
  parent: System.Device.Location
  isExternal: false
  name: CivicAddress
  nameWithType: CivicAddress
  fullName: System.Device.Location.CivicAddress
- uid: System.Device.Location.CivicAddress.#ctor*
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: CivicAddress
  nameWithType: CivicAddress.CivicAddress
- uid: System.Device.Location.CivicAddress.AddressLine1*
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: AddressLine1
  nameWithType: CivicAddress.AddressLine1
- uid: System.Device.Location.CivicAddress.AddressLine2*
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: AddressLine2
  nameWithType: CivicAddress.AddressLine2
- uid: System.Device.Location.CivicAddress.Building*
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: Building
  nameWithType: CivicAddress.Building
- uid: System.Device.Location.CivicAddress.City*
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: City
  nameWithType: CivicAddress.City
- uid: System.Device.Location.CivicAddress.CountryRegion*
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: CountryRegion
  nameWithType: CivicAddress.CountryRegion
- uid: System.Device.Location.CivicAddress.FloorLevel*
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: FloorLevel
  nameWithType: CivicAddress.FloorLevel
- uid: System.Device.Location.CivicAddress.IsUnknown*
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: IsUnknown
  nameWithType: CivicAddress.IsUnknown
- uid: System.Device.Location.CivicAddress.PostalCode*
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: PostalCode
  nameWithType: CivicAddress.PostalCode
- uid: System.Device.Location.CivicAddress.StateProvince*
  parent: System.Device.Location.CivicAddress
  isExternal: false
  name: StateProvince
  nameWithType: CivicAddress.StateProvince
