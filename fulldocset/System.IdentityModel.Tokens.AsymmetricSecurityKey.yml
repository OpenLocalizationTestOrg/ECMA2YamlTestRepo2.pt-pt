### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey
  id: AsymmetricSecurityKey
  children:
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)
  - System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey
  langs:
  - csharp
  name: AsymmetricSecurityKey
  nameWithType: AsymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey
  type: Class
  summary: "Classe base para chaves assimétricas."
  remarks: "Não é possível utilizar esta classe quando [!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)] está a executar em confiança parcial."
  syntax:
    content: 'public abstract class AsymmetricSecurityKey : System.IdentityModel.Tokens.SecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  implements: []
  inheritedMembers:
  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.KeySize
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: AsymmetricSecurityKey()
  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey()
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.AsymmetricSecurityKey()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Tokens.AsymmetricSecurityKey&quot;> </xref> classe."
  syntax:
    content: protected AsymmetricSecurityKey ();
    parameters: []
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  id: GetAsymmetricAlgorithm(System.String,System.Boolean)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: GetAsymmetricAlgorithm(String,Boolean)
  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém os algoritmos criptográficos assimétricos especificado."
  remarks: "Utilize os campos estáticos do <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.AsymmetricAlgorithm GetAsymmetricAlgorithm (string algorithm, bool privateKey);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo assimétrico a criar."
    - id: privateKey
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Quando uma chave privada é necessário para criar o algoritmo; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "Um <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> que representa os algoritmos criptográficos assimétricos especificado.       Normalmente, <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> é transmitido a <code> privateKey </code> parâmetro, como uma chave privada é normalmente necessário para a desencriptação."
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)
  id: GetHashAlgorithmForSignature(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: GetHashAlgorithmForSignature(String)
  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém um algoritmo criptográfico que gera um hash para uma assinatura digital."
  remarks: "Utilize os campos estáticos do <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.HashAlgorithm GetHashAlgorithmForSignature (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo de hash."
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> que gera hashes para assinaturas digitais."
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)
  id: GetSignatureDeformatter(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: GetSignatureDeformatter(String)
  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém o algoritmo de deformatter para a assinatura digital."
  remarks: "Um desformatador de assinatura assimétrico é normalmente utilizado para verificar uma assinatura digital.       Utilize os campos estáticos do <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.AsymmetricSignatureDeformatter GetSignatureDeformatter (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo de deformatter para a assinatura digital."
    return:
      type: System.Security.Cryptography.AsymmetricSignatureDeformatter
      description: "Um <xref href=&quot;System.Security.Cryptography.AsymmetricSignatureDeformatter&quot;> </xref> que representa o algoritmo de deformatter para a assinatura digital."
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)
  id: GetSignatureFormatter(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: GetSignatureFormatter(String)
  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém o algoritmo de formatador de assinatura digital."
  remarks: "Normalmente, um formatador de assinatura é utilizado para gerar uma assinatura digital.       Utilize os campos estáticos do <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o algoritmo.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.AsymmetricSignatureFormatter GetSignatureFormatter (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "O algoritmo de formatador para a assinatura digital."
    return:
      type: System.Security.Cryptography.AsymmetricSignatureFormatter
      description: "Um <xref href=&quot;System.Security.Cryptography.AsymmetricSignatureFormatter&quot;> </xref> que representa o algoritmo de formatador para a assinatura digital."
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey
  id: HasPrivateKey
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  langs:
  - csharp
  name: HasPrivateKey()
  nameWithType: AsymmetricSecurityKey.HasPrivateKey()
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Quando substituí-lo de uma classe derivada, obtém um valor que indica se a chave privada está disponível."
  syntax:
    content: public abstract bool HasPrivateKey ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Quando estiver disponível; a chave privada caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.SecurityKey
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: AsymmetricSecurityKey()
  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey()
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.AsymmetricSecurityKey()
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetAsymmetricAlgorithm(String,Boolean)
  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetHashAlgorithmForSignature(String)
  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureDeformatter(String)
  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(String)
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricSignatureDeformatter
  nameWithType: AsymmetricSignatureDeformatter
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureFormatter(String)
  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter(String)
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(String)
- uid: System.Security.Cryptography.AsymmetricSignatureFormatter
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricSignatureFormatter
  nameWithType: AsymmetricSignatureFormatter
  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: HasPrivateKey()
  nameWithType: AsymmetricSecurityKey.HasPrivateKey()
  fullName: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey()
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: AsymmetricSecurityKey
  nameWithType: AsymmetricSecurityKey.AsymmetricSecurityKey
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetAsymmetricAlgorithm
  nameWithType: AsymmetricSecurityKey.GetAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetHashAlgorithmForSignature
  nameWithType: AsymmetricSecurityKey.GetHashAlgorithmForSignature
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureDeformatter
  nameWithType: AsymmetricSecurityKey.GetSignatureDeformatter
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureFormatter
  nameWithType: AsymmetricSecurityKey.GetSignatureFormatter
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey*
  parent: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: HasPrivateKey
  nameWithType: AsymmetricSecurityKey.HasPrivateKey
