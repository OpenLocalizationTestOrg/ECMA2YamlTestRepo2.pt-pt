### YamlMime:ManagedReference
items:
- uid: System.Web.UI.DataVisualization.Charting.StripLine
  id: StripLine
  children:
  - System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  - System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  - System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  - System.Web.UI.DataVisualization.Charting.StripLine.Font
  - System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  - System.Web.UI.DataVisualization.Charting.StripLine.Interval
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  - System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  - System.Web.UI.DataVisualization.Charting.StripLine.Name
  - System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  - System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  - System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  - System.Web.UI.DataVisualization.Charting.StripLine.Text
  - System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  - System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  - System.Web.UI.DataVisualization.Charting.StripLine.Url
  langs:
  - csharp
  name: StripLine
  nameWithType: StripLine
  fullName: System.Web.UI.DataVisualization.Charting.StripLine
  type: Class
  summary: "Representa as linhas de faixa num gráfico."
  remarks: "Linhas de faixa ou faixas, são horizontais ou verticais intervalos que shade a imagem de fundo de um gráfico em intervalos regulares ou personalizados. Pode utilizar as linhas de faixa a:-melhorar a legibilidade para procurar valores individuais no gráfico.      -Ao ler o gráfico de pontos de dados separados.      -Realce datas que ocorrem em intervalos regulares, por exemplo identificar a data de fim de semana pontos.      -Realce um intervalo específico de chave de dados.      -Adicione uma linha de limiar com um valor constante específico.       Um único objeto StripLine pode optar por ser desenhado uma vez ou repetidamente, para um intervalo especificado. Esta ação é controlada pelo <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>propriedade.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Quando um valor de -1 é atribuído para o <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>propriedade, uma faixa irá ser desenhada uma linha.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Quando um valor diferente de zero é atribuído para o <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>propriedade, irá ser desenhada uma linha de faixa à repetidamente a cada intervalo especificado.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> A localização onde é desenhada uma linha de faixa também é afetada pelo <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A>e <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A>Propriedades da linha de faixa.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A>       Linhas de faixa sempre estão associadas a um <xref:System.Web.UI.DataVisualization.Charting.Axis>objeto.</xref:System.Web.UI.DataVisualization.Charting.Axis> Estes podem ser adicionados no momento da conceção e tempo de execução.       Para adicionar uma linha horizontal ou vertical para apresentar um limiar, defina o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade para um valor de 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Este procedimento resultará numa linha que está a ser desenhada. Pode utilizar o <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>e <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>Propriedades para a cor, a largura e o estilo da linha.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> Sem propriedades de fundo do gráfico (`Back*`) são utilizados quando o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade está definida como 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>       Utilize o <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A>propriedade da linha de faixa para associar o texto com uma linha de faixa.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> O posicionamento e a orientação deste texto podem ser controlados pelo <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A>propriedade.</xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A>       Quando várias linhas de faixa são definidas para o mesmo eixo, é possível que as linhas de faixa serão se podem sobrepor. A ordem Z da objetos StripLine é determinada pela sua ordem da ocorrência no <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection>objeto.</xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> Isto significa que a primeira ocorrência é desenhada primeiro; a segunda ocorrência é desenhada segundo, e assim sucessivamente.       Linhas de faixa não são suportadas para os seguintes tipos de gráfico: circular, anel, funil, pirâmide, Kagi, ThreeLineBreak, Pontosefiguras Polar e Radar."
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ' Adds a week of data with values between 20 and 35.   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ' Adds repeating horizontal strip lines at intervals of 5.   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()  \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ' Adds strip lines to highlight weekend values.   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ' Adds a horizontal threshold strip line at the mean value of the first series.  \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("IntervalOffset")]

      public class StripLine : System.Web.UI.DataVisualization.Charting.ChartElement, System.Web.UI.DataVisualization.Charting.IChartMapArea
  inheritance:
  - System.Object
  - System.Web.UI.DataVisualization.Charting.ChartElement
  implements:
  - System.Web.UI.DataVisualization.Charting.IChartMapArea
  inheritedMembers:
  - System.Web.UI.DataVisualization.Charting.ChartElement.Dispose
  - System.Web.UI.DataVisualization.Charting.ChartElement.Equals(System.Object)
  - System.Web.UI.DataVisualization.Charting.ChartElement.GetHashCode
  - System.Web.UI.DataVisualization.Charting.ChartElement.Tag
  - System.Web.UI.DataVisualization.Charting.ChartElement.ToString
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  id: '#ctor'
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripLine()
  nameWithType: StripLine.StripLine()
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripLine()
  type: Constructor
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> classe."
  syntax:
    content: public StripLine ();
    parameters: []
  overload: System.Web.UI.DataVisualization.Charting.StripLine.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  id: BackColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackColor
  nameWithType: StripLine.BackColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a cor de fundo da linha de faixa."
  remarks: "Pode definir esta propriedade para qualquer valor ARGB (alpha vermelho, verde, azul) válido.       Para configurar uma gradação para a linha de faixa, definir a BackColor e <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>Propriedades.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>       Se definir esta cor para &quot;transparente&quot; — por outras palavras, defina o valor alfa 0 — não cor será atribuído para a imagem de fundo do elemento. Como resultado, a imagem de fundo poderá ser transparente.       Se o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade está definida como 0,0, irá ser desenhada uma linha e a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>propriedade determina a cor da linha, não esta propriedade.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.Color BackColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;> </xref> estrutura. A cor predefinida é <xref:System.Drawing.Color.White*>.</xref:System.Drawing.Color.White*>"
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  id: BackGradientStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o estilo de gradação da linha de faixa."
  remarks: "A propriedade BackGradientStyle determina se um elemento do gráfico irá apresentar gradação, bem como a orientação do gradiente, se utilizados.       Para utilizar cores do gradiente:-Utilize o <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>propriedade definida a cor primária.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>      -Utilize o <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>propriedade definida a cor secundária.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>      -Defina esta propriedade de BackGradientStyle do elemento de gráfico para o estilo de gradação pretendido.       Esta propriedade não é aplicável se o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade está definida como um valor de 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.GradientStyle
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.GradientStyle&quot;> </xref> enumeração. O valor predefinido é <xref href=&quot;System.Web.UI.DataVisualization.Charting.GradientStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  id: BackHatchStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o estilo de Sombreado traçado da linha de faixa."
  remarks: "O padrão de Sombreado traçado é constituída por uma cor de fundo sólida e ser desenhadas sobre a imagem de fundo de linhas. As duas cores utilizadas o estilo de Sombreado traçado são definidas pelo <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>e <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>Propriedades.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> Esta propriedade não é aplicável se o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade está definida como um valor de 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartHatchStyle&quot;> </xref> enumeração. O valor predefinido é <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartHatchStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  id: BackImage
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImage
  nameWithType: StripLine.BackImage
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a imagem de fundo da linha de faixa."
  remarks: "A propriedade BackImage define um caminho para uma imagem de fundo para muitos elementos do gráfico e é um URL absoluto ou relativo.       Para esta imagem de posição, utilize o <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>e <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>Propriedades.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>       Também pode especificar que uma cor será apresentado pela imagem como &quot;transparente&quot;, definindo o <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A>propriedade.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A>       Uma imagem pode ser qualquer ficheiro de gráficos válido suportado pelo .NET Framework, incluindo os ícones.       Esta propriedade não é aplicável se o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade está definida como um valor de 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>       Imagens de fundo têm precedência sobre outras propriedades de em segundo plano, tais como cores do gradiente."
  syntax:
    content: public string BackImage { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> valor que representa um URL de ficheiro de imagem. A predefinição é uma cadeia vazia."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  id: BackImageAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o alinhamento da imagem de fundo."
  remarks: "Esta propriedade determina o alinhamento da imagem de fundo de linhas de faixa é apenas aplicado quando a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>propriedade está definida como <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>.</xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>       Para mais informações sobre os alinhamentos disponíveis, consulte o <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle>tópico de enumeração.</xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle&quot;> </xref> valor de enumeração. O valor predefinido é <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  id: BackImageTransparentColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a cor de uma imagem de fundo de linha de faixa que irá ser implementada como transparente."
  remarks: "Esta propriedade não é aplicável se o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade está definida como um valor de 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BackImageTransparentColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;> </xref> valor que será apresentada como transparente."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  id: BackImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o modo de desenho da imagem de fundo da linha de faixa."
  remarks: "Esta propriedade determina a forma como a imagem é apresentada; ou seja, tiled, expandido e, por isso, forth.       Se uma imagem é ampliada, irá ser esticada para caber na linha de faixa delimitador. Se a imagem é tiled, este é repetidamente desenhada, a partir do canto superior esquerdo.       Para obter mais informações que dizem respeito aos modos de encapsulamento de aplicações disponíveis, consulte o <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>tópico de enumeração.</xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>       Se a propriedade BackImageWrapMode estiver definida como <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>, a localização onde é desenhada a imagem será determinada pelo <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>definição de propriedade.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> </xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>       Esta propriedade não é aplicável se <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>está definido para um valor de 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&quot;> </xref> enumeração de número inteiro. A predefinição é <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  id: BackSecondaryColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a cor secundária de fundo da linha de faixa."
  remarks: "Esta propriedade determina a cor de fundo secundária de vários objetos do gráfico e é utilizada quando cores do gradiente estão a ser aplicadas.       Pode definir a cor secundária de fundo para qualquer valor ARGB (alpha vermelho, verde, azul) válido.       Se for utilizado o sombreado traçado, a propriedade a BackSecondaryColor determina a cor das linhas de Sombreado traçado.       Para utilizar cores do gradiente para a imagem de fundo de um elemento do gráfico:-Utilize o <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>propriedade definida a cor primária.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>      -Utilize esta propriedade a BackSecondaryColor para definir a cor secundária.      -Definir a <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>propriedade para o estilo de gradação pretendido.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>       Esta propriedade não é aplicável se o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade está definida como um valor de 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BackSecondaryColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;> </xref> valor utilizado para a cor secundária de um fundo sombreado traçado ou gradação de preenchimento. A cor predefinida é <xref href=&quot;System.Drawing.Color&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  id: BorderColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderColor
  nameWithType: StripLine.BorderColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a cor do limite de uma linha de faixa."
  remarks: "Pode definir esta propriedade para qualquer valor ARGB (alpha vermelho, verde, azul) válido.       Se o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade de um <xref:System.Web.UI.DataVisualization.Charting.StripLine>objeto está definido como 0,0, irá ser desenhada uma linha e é esta propriedade e não o <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>propriedade definição que determina a cor da linha.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine> </xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BorderColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> value. A cor predefinida é <xref href=&quot;System.Drawing.Color&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  id: BorderDashStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o estilo do limite da linha de faixa."
  remarks: "Esta propriedade especifica o estilo de linha utilizado para um limite. A linha pode ser sólida, delimitada por pontos ou algumas variação de sólida e delimitada por pontos."
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartDashStyle
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartDashStyle&quot;> </xref> valor de enumeração que determina o estilo do limite da linha de faixa."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  id: BorderWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a largura do limite da linha de faixa."
  remarks: "Esta propriedade é medida em pixéis."
  syntax:
    content: public int BorderWidth { get; set; }
    return:
      type: System.Int32
      description: "Um <xref uid=&quot;langword_csharp_integer&quot; name=&quot;integer&quot; href=&quot;&quot;> </xref> valor que determina a largura do limite da linha de faixa, em pixels."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: StripLine.Dispose(Boolean)
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> e opcionalmente liberta os recursos geridos."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font
  id: Font
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Font
  nameWithType: StripLine.Font
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Font
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o tipo de letra utilizado para o texto da linha de faixa."
  syntax:
    content: public System.Drawing.Font Font { get; set; }
    return:
      type: System.Drawing.Font
      description: "A <xref href=&quot;System.Drawing.Font&quot;> </xref> valor que representa o tipo de letra do texto da linha de faixa."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Font*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  id: ForeColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: ForeColor
  nameWithType: StripLine.ForeColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a cor do texto da linha de faixa."
  remarks: "Pode especificar qualquer cor ARGB válido para esta propriedade. Esta propriedade só é aplicável quando é especificado um valor de texto para a linha de faixa."
  syntax:
    content: public System.Drawing.Color ForeColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;> </xref> valor que representa a cor do texto de uma linha de faixa. O valor predefinido é <xref:System.Drawing.Color.Black*>.</xref:System.Drawing.Color.Black*>"
  overload: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  id: Interval
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Interval
  nameWithType: StripLine.Interval
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o intervalo para uma linha de faixa e determina se a linha de faixa é desenhada uma vez ou repetidamente."
  remarks: "Quando definir a propriedade de intervalo para um valor de zero (0.0), uma linha de faixa será apresentada, com uma largura especificada pelo <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Quando definir o intervalo para um valor diferente de zero, várias linhas de faixa serão apresentadas. A unidade que é utilizada para a propriedade de intervalo é definida pelo <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>propriedade.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public double Interval { get; set; }
    return:
      type: System.Double
      description: "A <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> valor que representa o intervalo entre as linhas de faixa. O valor predefinido é 0,0."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Interval*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  id: IntervalOffset
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o deslocamento de linhas de grelha, as marcas de escala, linhas de faixa e etiquetas do eixo."
  remarks: "O deslocamento do intervalo das marcas de escala secundárias e linhas de grelha nunca é afetado pelo valor o <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A>propriedade o <xref:System.Web.UI.DataVisualization.Charting.Axis>objeto.</xref:System.Web.UI.DataVisualization.Charting.Axis> </xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A>       A definição de propriedade de IntervalOffset define as unidades de medida da desvio.       O <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>pode ser um valor negativo.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>       O valor predefinido é `Auto` (`0`)."
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public double IntervalOffset { get; set; }
    return:
      type: System.Double
      description: "A <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> valor que representa o deslocamento do intervalo."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  id: IntervalOffsetType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o tipo de deslocamento do intervalo da linha de faixa."
  remarks: "Por predefinição, esta propriedade está definida como <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>; o valor desta propriedade real é determinado pelo <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>propriedade.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> valor de enumeração que indica o tipo de intervalo. O valor predefinido é <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  id: IntervalType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalType
  nameWithType: StripLine.IntervalType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o tipo de intervalo de um <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> objeto."
  remarks: "Tipos de intervalo podem ser definidos como <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>, caso em que depende do tipo: os tipos de valor X ou o valor Y, o valor de <xref:System.Web.UI.DataVisualization.Charting.DataPoint>objetos — consoante o eixo o <xref:System.Web.UI.DataVisualization.Charting.StripLine>objetos pertencem a — e a escala do eixo.</xref:System.Web.UI.DataVisualization.Charting.StripLine> </xref:System.Web.UI.DataVisualization.Charting.DataPoint> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>       O <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>propriedade determina a frequência é desenhada uma faixa ou linha.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> valor de enumeração que indica o tipo de intervalo. O valor predefinido é <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  id: MapAreaAttributes
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o mapa os atributos da área da linha de faixa."
  syntax:
    content: public string MapAreaAttributes { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> valor que representa os atributos do elemento de gráfico do correspondente a área do mapa."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name
  id: Name
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Name
  nameWithType: StripLine.Name
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Name
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém o nome da linha de faixa."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> valor que representa o nome da linha de faixa."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  id: PostBackValue
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o valor de nova colocação que é possível processar um <xref href=&quot;System.Web.UI.DataVisualization.Charting.Chart.Click&quot;> </xref> eventos."
  syntax:
    content: public string PostBackValue { get; set; }
    return:
      type: System.String
      description: "Um valor de cadeia que representa o valor de nova colocação que é transferido para um <xref href=&quot;System.Web.UI.DataVisualization.Charting.Chart.Click&quot;> </xref> eventos."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  id: StripWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripWidth
  nameWithType: StripLine.StripWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a largura de uma linha de faixa."
  remarks: "Esta propriedade não é possível definir um valor menor do que 0,0, caso contrário, será emitida uma exceção.       Uma definição de 0,0 resultará numa linha que está a ser desenhada; Esta linha vai utilizar o <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>e <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>definições de propriedade para a cor, a largura e o estilo.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> Nenhuma do `Back*` propriedades desta classe são utilizadas quando o valor de StripWidth é 0,0.       Se definir a propriedade StripWidth para um valor maior do que 0,0, será criada uma faixa. O <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>e <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>propriedades só se aplicam ao limite de faixa; todas as `Back*` propriedades, em seguida, são utilizadas para as propriedades de fundo da faixa.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>       Se o valor da propriedade StripWidth for maior do que 0,0, as unidades são determinadas pela escala de eixo relevantes."
  syntax:
    content: public double StripWidth { get; set; }
    return:
      type: System.Double
      description: "A <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> valor que determina se uma faixa ou uma linha é desenhada. O valor predefinido é 0,0."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  id: StripWidthType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a unidade de medida para o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*>propriedade.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*>"
  remarks: "Esta propriedade determina as unidades utilizadas para o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Por exemplo, para definir uma linha de faixa para representar &quot;uma semana&quot;, pode definir esta propriedade <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>e defina o <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>propriedade para um (1.0).</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>       Pode alterar o valor desta propriedade do <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>para um <xref:System.DateTime>valor quando utiliza a escala de eixo relevantes um <xref:System.DateTime>valor.</xref:System.DateTime> </xref:System.DateTime> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "A <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> valor de enumeração que indica o tipo de largura. O valor predefinido é <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text
  id: Text
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Text
  nameWithType: StripLine.Text
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Text
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o texto para a linha de faixa."
  remarks: "Utilize esta propriedade para adicionar o texto para uma linha de faixa."
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public string Text { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> valor que representa o texto de uma linha de faixa."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Text*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  id: TextAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o alinhamento do texto da linha de faixa."
  remarks: ''
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.StringAlignment TextAlignment { get; set; }
    return:
      type: System.Drawing.StringAlignment
      description: "A <xref href=&quot;System.Drawing.StringAlignment&quot;> </xref> valor que representa o alinhamento do texto da linha de faixa."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  id: TextLineAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o alinhamento do texto da linha de faixa linha de texto."
  remarks: ''
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.StringAlignment TextLineAlignment { get; set; }
    return:
      type: System.Drawing.StringAlignment
      description: "A <xref href=&quot;System.Drawing.StringAlignment&quot;> </xref> valor que representa o alinhamento da linha de texto."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  id: TextOrientation
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a orientação de texto."
  remarks: "Quando esta propriedade estiver definida para um valor de <xref:System.Web.UI.DataVisualization.Charting.TextOrientation>, o texto é orientado por consoante o tipo de gráfico.</xref:System.Web.UI.DataVisualization.Charting.TextOrientation> Para todos os tipos de gráfico X-Y outros a barra de linha de faixa do eixo x, o texto é orientado por horizontalmente da esquerda para a direita na parte inferior da linha de faixa. Gráficos de barras, texto de linha de faixa do eixo x é orientado por verticalmente a partir da parte superior para parte inferior para a direita da linha de faixa."
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.TextOrientation
      description: "Um valor de TextOrientation que representa o alinhamento da orientação de texto."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  id: ToolTip
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: ToolTip
  nameWithType: StripLine.ToolTip
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define a descrição de uma linha de faixa."
  remarks: "Se definir esta propriedade, um mapa de imagem do lado do cliente será automaticamente criado e será criada uma área do mapa com o atributo de título definido para a cadeia de descrição especificada. A área do mapa irá utilizar as dimensões que correspondem à linha de faixa.       Definir esta propriedade não tem qualquer efeito se a <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A>propriedade está definida como `false`.</xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> O valor predefinido é verdadeiro."
  syntax:
    content: public string ToolTip { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> valor que representa a descrição da linha de faixa."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url
  id: Url
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Url
  nameWithType: StripLine.Url
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Url
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Obtém ou define o ponto de URL ou âncora de destino da linha de faixa."
  remarks: "Para utilizar um URL absoluto, comece com &quot;http://&quot; ou &quot;www&quot;. a expressão de cadeia. Se a cadeia não iniciar com qualquer uma destes prefixos, esta será tratada como um URL relativo."
  syntax:
    content: public string Url { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> valor que representa o ponto de URL ou âncora de destino da linha de faixa."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Url*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataVisualization.Charting.ChartElement
  isExternal: false
  name: System.Web.UI.DataVisualization.Charting.ChartElement
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripLine()
  nameWithType: StripLine.StripLine()
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripLine()
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackColor
  nameWithType: StripLine.BackColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
- uid: System.Web.UI.DataVisualization.Charting.GradientStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: GradientStyle
  nameWithType: GradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.GradientStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartHatchStyle
  nameWithType: ChartHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImage
  nameWithType: StripLine.BackImage
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
- uid: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartImageAlignmentStyle
  nameWithType: ChartImageAlignmentStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartImageWrapMode
  nameWithType: ChartImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderColor
  nameWithType: StripLine.BorderColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
- uid: System.Web.UI.DataVisualization.Charting.ChartDashStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartDashStyle
  nameWithType: ChartDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartDashStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: StripLine.Dispose(Boolean)
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Font
  nameWithType: StripLine.Font
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Font
- uid: System.Drawing.Font
  parent: System.Drawing
  isExternal: false
  name: Font
  nameWithType: Font
  fullName: System.Drawing.Font
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ForeColor
  nameWithType: StripLine.ForeColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Interval
  nameWithType: StripLine.Interval
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Interval
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
- uid: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: DateTimeIntervalType
  nameWithType: DateTimeIntervalType
  fullName: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalType
  nameWithType: StripLine.IntervalType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Name
  nameWithType: StripLine.Name
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Name
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidth
  nameWithType: StripLine.StripWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Text
  nameWithType: StripLine.Text
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Text
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
- uid: System.Drawing.StringAlignment
  parent: System.Drawing
  isExternal: false
  name: StringAlignment
  nameWithType: StringAlignment
  fullName: System.Drawing.StringAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.TextOrientation
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: TextOrientation
  nameWithType: TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ToolTip
  nameWithType: StripLine.ToolTip
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Url
  nameWithType: StripLine.Url
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Url
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripLine
  nameWithType: StripLine.StripLine
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackColor
  nameWithType: StripLine.BackColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImage
  nameWithType: StripLine.BackImage
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderColor
  nameWithType: StripLine.BorderColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Dispose
  nameWithType: StripLine.Dispose
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Font
  nameWithType: StripLine.Font
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ForeColor
  nameWithType: StripLine.ForeColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Interval
  nameWithType: StripLine.Interval
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalType
  nameWithType: StripLine.IntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Name
  nameWithType: StripLine.Name
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidth
  nameWithType: StripLine.StripWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Text
  nameWithType: StripLine.Text
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ToolTip
  nameWithType: StripLine.ToolTip
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Url
  nameWithType: StripLine.Url
