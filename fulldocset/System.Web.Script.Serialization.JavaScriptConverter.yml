### YamlMime:ManagedReference
items:
- uid: System.Web.Script.Serialization.JavaScriptConverter
  id: JavaScriptConverter
  children:
  - System.Web.Script.Serialization.JavaScriptConverter.#ctor
  - System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  - System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  - System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  langs:
  - csharp
  name: JavaScriptConverter
  nameWithType: JavaScriptConverter
  fullName: System.Web.Script.Serialization.JavaScriptConverter
  type: Class
  summary: "Provides an abstract base class for a custom type converter."
  remarks: "The JavaScriptConverter class enables you to implement serialization and deserialization processes for managed types that are not natively supported by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class. You can also use JavaScriptConverter when you need more control over the serialization and deserialization process.       The <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A> property indicates the types for which a custom converter provides converter services.       To indicate that a custom converter must be used by the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance, you must register the converter with the instance. If you are using the <xref:System.Web.Script.Serialization.JavaScriptSerializer> class directly, you should use the <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> method to register the converter. Otherwise, if you are invoking Web methods from ECMAScript (JavaScript) and you want to use the custom converter, you can register it by adding a `converters` element in the configuration file. For more information, see [How to: Configure ASP.NET Services in Microsoft Ajax](~/add/includes/ajax-current-ext-md.md).       When the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is serializing a type for which it has a custom converter registered, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> method. Similarly, when the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance is deserializing a JavaScript Object Notation (JSON) string and recognizes that a type inside the JSON string has a custom converter associated with it, the serializer calls the <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> method."
  example:
  - "The following example shows how to create a custom converter for the <xref:System.Web.UI.WebControls.ListItemCollection> class.  \n  \n [!code-cs[System.Web.Script.Serialization#2](~/add/codesnippet/csharp/t-system.web.script.seri_2_1.cs)]\n [!code-vb[System.Web.Script.Serialization#2](~/add/codesnippet/visualbasic/t-system.web.script.seri_2_1.vb)]"
  syntax:
    content: public abstract class JavaScriptConverter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor
  id: '#ctor'
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: JavaScriptConverter()
  nameWithType: JavaScriptConverter.JavaScriptConverter()
  fullName: System.Web.Script.Serialization.JavaScriptConverter.JavaScriptConverter()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Script.Serialization.JavaScriptConverter&quot;></xref> class."
  syntax:
    content: protected JavaScriptConverter ();
    parameters: []
  overload: System.Web.Script.Serialization.JavaScriptConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  id: Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "When overridden in a derived class, converts the provided dictionary into an object of the specified type."
  syntax:
    content: public abstract object Deserialize (System.Collections.Generic.IDictionary<string,object> dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "An &lt;xref:System.Collections.Generic.IDictionary%602&gt; instance of property data stored as name/value pairs."
    - id: type
      type: System.Type
      description: "The type of the resulting object."
    - id: serializer
      type: System.Web.Script.Serialization.JavaScriptSerializer
      description: "The <xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;></xref> instance."
    return:
      type: System.Object
      description: "The deserialized object."
  overload: System.Web.Script.Serialization.JavaScriptConverter.Deserialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  id: Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: Serialize(Object,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "When overridden in a derived class, builds a dictionary of name/value pairs."
  remarks: "When you serialize a type for which a custom converter is registered, the <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance invokes the Serialize method."
  syntax:
    content: public abstract System.Collections.Generic.IDictionary<string,object> Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to serialize."
    - id: serializer
      type: System.Web.Script.Serialization.JavaScriptSerializer
      description: "The object that is responsible for the serialization."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "An object that contains key/value pairs that represent the objectâ€™s data."
  overload: System.Web.Script.Serialization.JavaScriptConverter.Serialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  id: SupportedTypes
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
  fullName: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "When overridden in a derived class, gets a collection of the supported types."
  remarks: "The SupportedTypes property lists the types that are supported by the converter. At run time, a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance uses this property to determine the mapping of managed types to their corresponding custom converters."
  example:
  - "The following example shows how to override the SupportedTypes property in a derived class. In this example, the converter supports only the <xref:System.Web.UI.WebControls.ListItemCollection> type. This code example is part of a larger example provided for the <xref:System.Web.Script.Serialization.JavaScriptConverter> class.  \n  \n [!code-cs[System.Web.Script.Serialization#3](~/add/codesnippet/csharp/p-system.web.script.seri_1.cs)]\n [!code-vb[System.Web.Script.Serialization#3](~/add/codesnippet/visualbasic/p-system.web.script.seri_1.vb)]"
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<Type> SupportedTypes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: "An object that implements &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that represents the types supported by the converter."
  overload: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: JavaScriptConverter()
  nameWithType: JavaScriptConverter.JavaScriptConverter()
  fullName: System.Web.Script.Serialization.JavaScriptConverter.JavaScriptConverter()
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Script.Serialization.JavaScriptSerializer
  parent: System.Web.Script.Serialization
  isExternal: false
  name: JavaScriptSerializer
  nameWithType: JavaScriptSerializer
  fullName: System.Web.Script.Serialization.JavaScriptSerializer
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Serialize(Object,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
  fullName: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: JavaScriptConverter
  nameWithType: JavaScriptConverter.JavaScriptConverter
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Deserialize
  nameWithType: JavaScriptConverter.Deserialize
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Serialize
  nameWithType: JavaScriptConverter.Serialize
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
