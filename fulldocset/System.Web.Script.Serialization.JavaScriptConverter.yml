### YamlMime:ManagedReference
items:
- uid: System.Web.Script.Serialization.JavaScriptConverter
  id: JavaScriptConverter
  children:
  - System.Web.Script.Serialization.JavaScriptConverter.#ctor
  - System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  - System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  - System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  langs:
  - csharp
  name: JavaScriptConverter
  nameWithType: JavaScriptConverter
  fullName: System.Web.Script.Serialization.JavaScriptConverter
  type: Class
  summary: "Fornece uma classe base abstracta para um conversor de tipos personalizados."
  remarks: "A classe de JavaScriptConverter permite-lhe implementar serialização e a anulação da serialização da processos de tipos geridos que não são suportados nativamente pela <xref:System.Web.Script.Serialization.JavaScriptSerializer>classe.</xref:System.Web.Script.Serialization.JavaScriptSerializer> Também pode utilizar JavaScriptConverter quando precisar de mais controlo sobre o processo de serialização e a anulação da serialização.       O <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>propriedade indica os tipos para o qual um conversor personalizado fornece serviços de conversor.</xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>       Para indicar que um conversor personalizado tem de ser utilizado pelo <xref:System.Web.Script.Serialization.JavaScriptSerializer>instância, tem de registar o conversor com a instância.</xref:System.Web.Script.Serialization.JavaScriptSerializer> Se estiver a utilizar o <xref:System.Web.Script.Serialization.JavaScriptSerializer>classe diretamente, deve utilizar o <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A>método para registar o conversor.</xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer> Caso contrário, se está a invocar métodos de Web de ECMAScript (JavaScript) e pretende utilizar o conversor personalizado, pode registá-lo a adicionando um `converters` elemento no ficheiro de configuração. Para obter mais informações, consulte [como: configurar os serviços do ASP.NET no Microsoft Ajax](~/add/includes/ajax-current-ext-md.md).       Quando o <xref:System.Web.Script.Serialization.JavaScriptSerializer>instância é ao serializar um tipo para o qual tem um conversor personalizado registado, as chamadas de serializador o <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>método.</xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer> Da mesma forma, quando o <xref:System.Web.Script.Serialization.JavaScriptSerializer>instância é uma cadeia de JavaScript Object Notation (JSON) ao anular a serialização e reconhece que um tipo dentro a cadeia JSON tem um conversor personalizado com as chamadas de serializador associado a <xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A>método.</xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer>"
  example:
  - "The following example shows how to create a custom converter for the <xref:System.Web.UI.WebControls.ListItemCollection> class.  \n  \n [!code-cs[System.Web.Script.Serialization#2](~/add/codesnippet/csharp/t-system.web.script.seri_2_1.cs)]\n [!code-vb[System.Web.Script.Serialization#2](~/add/codesnippet/visualbasic/t-system.web.script.seri_2_1.vb)]"
  syntax:
    content: public abstract class JavaScriptConverter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor
  id: '#ctor'
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: JavaScriptConverter()
  nameWithType: JavaScriptConverter.JavaScriptConverter()
  fullName: System.Web.Script.Serialization.JavaScriptConverter.JavaScriptConverter()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.Script.Serialization.JavaScriptConverter&quot;> </xref> classe."
  syntax:
    content: protected JavaScriptConverter ();
    parameters: []
  overload: System.Web.Script.Serialization.JavaScriptConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  id: Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "Quando substituí-lo de uma classe derivada, converte o dicionário fornecido um objeto do tipo especificado."
  syntax:
    content: public abstract object Deserialize (System.Collections.Generic.IDictionary<string,object> dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um &lt;xref:System.Collections.Generic.IDictionary%602&gt; instância dos dados da propriedade guardados como pares nome/valor."
    - id: type
      type: System.Type
      description: "O tipo do objeto resultante."
    - id: serializer
      type: System.Web.Script.Serialization.JavaScriptSerializer
      description: "O <xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref> instância."
    return:
      type: System.Object
      description: "O objeto de serialização anulado."
  overload: System.Web.Script.Serialization.JavaScriptConverter.Deserialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  id: Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: Serialize(Object,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "Quando substituí-lo de uma classe derivada, cria um dicionário de pares nome/valor."
  remarks: "Ao serializar um tipo para o qual está registado um conversor personalizado, o <xref:System.Web.Script.Serialization.JavaScriptSerializer>instância invoca o método de serializar.</xref:System.Web.Script.Serialization.JavaScriptSerializer>"
  syntax:
    content: public abstract System.Collections.Generic.IDictionary<string,object> Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);
    parameters:
    - id: obj
      type: System.Object
      description: "O objeto de serialização."
    - id: serializer
      type: System.Web.Script.Serialization.JavaScriptSerializer
      description: "O objeto que é responsável pela serialização."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Um objeto que contenha pares chave/valor que representam de dados o objeto."
  overload: System.Web.Script.Serialization.JavaScriptConverter.Serialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  id: SupportedTypes
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
  fullName: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "Quando substituí-lo de uma classe derivada, obtém uma coleção de tipos suportados."
  remarks: "A propriedade SupportedTypes apresenta os tipos que são suportados pelo conversor. Em tempo de execução, um <xref:System.Web.Script.Serialization.JavaScriptSerializer>instância utiliza esta propriedade para determinar o mapeamento de tipos geridos para os respetivos conversores personalizados correspondentes.</xref:System.Web.Script.Serialization.JavaScriptSerializer>"
  example:
  - "The following example shows how to override the SupportedTypes property in a derived class. In this example, the converter supports only the <xref:System.Web.UI.WebControls.ListItemCollection> type. This code example is part of a larger example provided for the <xref:System.Web.Script.Serialization.JavaScriptConverter> class.  \n  \n [!code-cs[System.Web.Script.Serialization#3](~/add/codesnippet/csharp/p-system.web.script.seri_1.cs)]\n [!code-vb[System.Web.Script.Serialization#3](~/add/codesnippet/visualbasic/p-system.web.script.seri_1.vb)]"
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<Type> SupportedTypes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: "Um objeto que implementa &lt;xref:System.Collections.Generic.IEnumerable%601&gt; que representa os tipos suportados pelo conversor."
  overload: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: JavaScriptConverter()
  nameWithType: JavaScriptConverter.JavaScriptConverter()
  fullName: System.Web.Script.Serialization.JavaScriptConverter.JavaScriptConverter()
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Script.Serialization.JavaScriptSerializer
  parent: System.Web.Script.Serialization
  isExternal: false
  name: JavaScriptSerializer
  nameWithType: JavaScriptSerializer
  fullName: System.Web.Script.Serialization.JavaScriptSerializer
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Serialize(Object,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
  fullName: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: JavaScriptConverter
  nameWithType: JavaScriptConverter.JavaScriptConverter
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Deserialize
  nameWithType: JavaScriptConverter.Deserialize
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Serialize
  nameWithType: JavaScriptConverter.Serialize
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
