### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.ButtonColumn
  id: ButtonColumn
  children:
  - System.Web.UI.WebControls.ButtonColumn.#ctor
  - System.Web.UI.WebControls.ButtonColumn.ButtonType
  - System.Web.UI.WebControls.ButtonColumn.CausesValidation
  - System.Web.UI.WebControls.ButtonColumn.CommandName
  - System.Web.UI.WebControls.ButtonColumn.DataTextField
  - System.Web.UI.WebControls.ButtonColumn.DataTextFormatString
  - System.Web.UI.WebControls.ButtonColumn.FormatDataTextValue(System.Object)
  - System.Web.UI.WebControls.ButtonColumn.Initialize
  - System.Web.UI.WebControls.ButtonColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)
  - System.Web.UI.WebControls.ButtonColumn.Text
  - System.Web.UI.WebControls.ButtonColumn.ValidationGroup
  langs:
  - csharp
  name: ButtonColumn
  nameWithType: ButtonColumn
  fullName: System.Web.UI.WebControls.ButtonColumn
  type: Class
  summary: "A column type for the <xref href=&quot;System.Web.UI.WebControls.DataGrid&quot;></xref> control that contains a user-defined button."
  remarks: "Use the ButtonColumn class in a <xref:System.Web.UI.WebControls.DataGrid> control to create a button that corresponds with each row in the <xref:System.Web.UI.WebControls.DataGrid> control. Specify the caption that is displayed in the buttons by setting the <xref:System.Web.UI.WebControls.ButtonColumn.Text%2A> property. If you set the <xref:System.Web.UI.WebControls.ButtonColumn.Text%2A> property, all buttons in the ButtonColumn object share the same caption. Alternatively, you can bind the ButtonColumn buttons to a field in a data source. This allows you to display different captions for each button. The values in the specified field are used for the text caption. Set the <xref:System.Web.UI.WebControls.ButtonColumn.DataTextField%2A> property to bind the ButtonColumn to a field in a data source.       You can format the captions that are displayed in the buttons by setting the <xref:System.Web.UI.WebControls.ButtonColumn.DataTextField%2A> property with a formatting string.       Clicking the buttons in the ButtonColumn raises the <xref:System.Web.UI.WebControls.DataGrid.ItemCommand> event. You can programmatically control the action that is performed when the button is clicked by providing an event handler for the <xref:System.Web.UI.WebControls.DataGrid.ItemCommand> event.       By default, page validation is not performed when a button in the ButtonColumn is clicked. Page validation determines whether the input controls that are associated with a validation control on the page all pass the validation rules that are specified by the validation control. To perform page validation when a button is clicked, set the <xref:System.Web.UI.WebControls.ButtonColumn.CausesValidation%2A> property to `true`."
  example:
  - "The following code example demonstrates how to use ButtonColumn class in a <xref:System.Web.UI.WebControls.DataGrid> control to create **Add** buttons.  \n  \n [!code-cs[ButtonColumnButtonType#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_178_1.cs)]\n [!code-vb[ButtonColumnButtonType#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_178_1.vb)]"
  syntax:
    content: 'public class ButtonColumn : System.Web.UI.WebControls.DataGridColumn'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.DataGridColumn
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.DataGridColumn.DesignMode
  - System.Web.UI.WebControls.DataGridColumn.FooterStyle
  - System.Web.UI.WebControls.DataGridColumn.FooterText
  - System.Web.UI.WebControls.DataGridColumn.HeaderImageUrl
  - System.Web.UI.WebControls.DataGridColumn.HeaderStyle
  - System.Web.UI.WebControls.DataGridColumn.HeaderText
  - System.Web.UI.WebControls.DataGridColumn.IsTrackingViewState
  - System.Web.UI.WebControls.DataGridColumn.ItemStyle
  - System.Web.UI.WebControls.DataGridColumn.LoadViewState(System.Object)
  - System.Web.UI.WebControls.DataGridColumn.OnColumnChanged
  - System.Web.UI.WebControls.DataGridColumn.Owner
  - System.Web.UI.WebControls.DataGridColumn.SaveViewState
  - System.Web.UI.WebControls.DataGridColumn.SortExpression
  - System.Web.UI.WebControls.DataGridColumn.System#Web#UI#IStateManager#IsTrackingViewState
  - System.Web.UI.WebControls.DataGridColumn.System#Web#UI#IStateManager#LoadViewState(System.Object)
  - System.Web.UI.WebControls.DataGridColumn.System#Web#UI#IStateManager#SaveViewState
  - System.Web.UI.WebControls.DataGridColumn.System#Web#UI#IStateManager#TrackViewState
  - System.Web.UI.WebControls.DataGridColumn.ToString
  - System.Web.UI.WebControls.DataGridColumn.TrackViewState
  - System.Web.UI.WebControls.DataGridColumn.ViewState
  - System.Web.UI.WebControls.DataGridColumn.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: ButtonColumn()
  nameWithType: ButtonColumn.ButtonColumn()
  fullName: System.Web.UI.WebControls.ButtonColumn.ButtonColumn()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> class."
  remarks: "Use the ButtonColumn constructor to create and initialize a new instance of the <xref:System.Web.UI.WebControls.ButtonColumn> class."
  example:
  - "The following code example demonstrates how to create and initialize a new instance of the <xref:System.Web.UI.WebControls.ButtonColumn> class and add it to the <xref:System.Web.UI.WebControls.DataGrid.Columns%2A> collection.  \n  \n [!code-cs[ButtonColumnButtonType#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_167_1.cs)]\n [!code-vb[ButtonColumnButtonType#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_167_1.vb)]"
  syntax:
    content: public ButtonColumn ();
    parameters: []
  overload: System.Web.UI.WebControls.ButtonColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.ButtonType
  id: ButtonType
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: ButtonType
  nameWithType: ButtonColumn.ButtonType
  fullName: System.Web.UI.WebControls.ButtonColumn.ButtonType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the type of button to display in the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> object."
  remarks: "Use the ButtonType property to specify whether the buttons in the <xref:System.Web.UI.WebControls.ButtonColumn> object are displayed as link or push buttons. The following table lists the possible settings.      |Button type|Display|   |-----------------|-------------|   |<xref:System.Web.UI.WebControls.ButtonColumnType>|A link.|   |<xref:System.Web.UI.WebControls.ButtonColumnType>|A button control.|       Clicking the buttons in the <xref:System.Web.UI.WebControls.ButtonColumn> raises the <xref:System.Web.UI.WebControls.DataGrid.ItemCommand> event. You can programmatically control the action that is performed when the button is clicked by providing an event handler for the <xref:System.Web.UI.WebControls.DataGrid.ItemCommand> event.       The value of this property is stored in view state."
  example:
  - "The following code example demonstrates how use the ButtonType property to specify that the buttons in the <xref:System.Web.UI.WebControls.ButtonColumn> object are displayed as push buttons.  \n  \n [!code-cs[ButtonColumnButtonType#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_119_1.cs)]\n [!code-vb[ButtonColumnButtonType#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_119_1.vb)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.ButtonColumnType ButtonType { get; set; }
    return:
      type: System.Web.UI.WebControls.ButtonColumnType
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.ButtonColumnType&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_LinkButton&quot; name=&quot;LinkButton&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.ButtonColumn.ButtonType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The specified column type is not one of the <xref href=&quot;System.Web.UI.WebControls.ButtonColumnType&quot;></xref> values."
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.CausesValidation
  id: CausesValidation
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: CausesValidation
  nameWithType: ButtonColumn.CausesValidation
  fullName: System.Web.UI.WebControls.ButtonColumn.CausesValidation
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether validation is performed when a button in the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> object is clicked."
  remarks: "By default, page validation is not performed when a button in the <xref:System.Web.UI.WebControls.ButtonColumn> object is clicked. Page validation determines whether the input controls that are associated with a validation control on the page all pass the validation rules that are specified by the validation control. To perform page validation when a button in the <xref:System.Web.UI.WebControls.ButtonColumn> is clicked, set the CausesValidation property to `true`.       When the value of the CausesValidation property is `true`, you can also use the <xref:System.Web.UI.WebControls.ButtonColumn.ValidationGroup%2A> property to specify the name of the validation group for which the <xref:System.Web.UI.WebControls.ButtonColumn> causes validation.       The value of this property is stored in view state."
  syntax:
    content: public virtual bool CausesValidation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if validation is performed when a button in the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> is clicked; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.ButtonColumn.CausesValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.CommandName
  id: CommandName
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: CommandName
  nameWithType: ButtonColumn.CommandName
  fullName: System.Web.UI.WebControls.ButtonColumn.CommandName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a string that represents the command to perform when a button in the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> object is clicked."
  remarks: "Use the CommandName property to associate a command name, such as `Add` or `Remove`, with a button. You can set the CommandName property to any string that identifies the action to perform when a button in the <xref:System.Web.UI.WebControls.ButtonColumn?displayProperty=fullName> object is clicked. Then, you can determine programmatically the command name in the event handler for the <xref:System.Web.UI.WebControls.DataGrid.ItemCommand> event and perform the appropriate actions.       The value of this property is stored in view state."
  example:
  - "The following code example demonstrates how to use the CommandName property to associate a command name with a button. Then, the command name of the clicked button is determined programmatically in the event handler for the <xref:System.Web.UI.WebControls.DataGrid.ItemCommand> event and the appropriate action is performed.  \n  \n [!code-cs[ButtonColumnCommandName#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_753_1.aspx)]\n [!code-vb[ButtonColumnCommandName#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_753_1.aspx)]"
  syntax:
    content: public virtual string CommandName { get; set; }
    return:
      type: System.String
      description: "A string that represents the command to perform when a button in the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> is clicked. The default is an empty string (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ButtonColumn.CommandName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.DataTextField
  id: DataTextField
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: DataTextField
  nameWithType: ButtonColumn.DataTextField
  fullName: System.Web.UI.WebControls.ButtonColumn.DataTextField
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the field name from a data source to bind to the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> object."
  remarks: "Use the DataTextField property to specify the field name from the data source to bind to the <xref:System.Web.UI.WebControls.ButtonColumn.Text%2A> property of the buttons in the <xref:System.Web.UI.WebControls.ButtonColumn> object.       Binding the column to a field instead of directly setting the <xref:System.Web.UI.WebControls.ButtonColumn.Text%2A> property allows you to display different captions for the buttons in the <xref:System.Web.UI.WebControls.ButtonColumn> by using the values in the specified field.       The value of this property is stored in view state."
  example:
  - "The following code example demonstrates how to use the DataTextField property to bind the <xref:System.Web.UI.WebControls.ButtonColumn> object to a field in a data source.  \n  \n [!code-vb[ButtonColumnDataTextField#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_814_1.aspx)]\n [!code-cs[ButtonColumnDataTextField#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_814_1.aspx)]"
  syntax:
    content: public virtual string DataTextField { get; set; }
    return:
      type: System.String
      description: "The field name to bind to the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref>. The default is an empty string (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ButtonColumn.DataTextField*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.DataTextFormatString
  id: DataTextFormatString
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: DataTextFormatString
  nameWithType: ButtonColumn.DataTextFormatString
  fullName: System.Web.UI.WebControls.ButtonColumn.DataTextFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the string that specifies the display format for the caption in each button."
  remarks: "Use the DataTextFormatString property to provide a custom display format for the caption of the buttons in the <xref:System.Web.UI.WebControls.ButtonColumn> object.       The data format string consists of two parts, separated by a colon, in the form `{A:Bxx}`. For example, the formatting string `{0:F2}` formats the cell to display a fixed point number with two decimal places.      > [!NOTE] >  The entire string must be enclosed in braces to indicate that it is a format string and not a literal string. Any text outside the braces is displayed as literal text.       The value before the colon (`A` in the general example) specifies the parameter index in a zero-based list of parameters.      > [!NOTE] >  This value can be set only to 0 because there is only one value in each cell.       The character after the colon (`B` in the general example) specifies the format to display the value in. The following table lists the common formats.      |Format character|Displays numeric values in|   |----------------------|--------------------------------|   |`C`|Currency format.|   |`D`|Decimal format.|   |`E`|Scientific (exponential) format.|   |`F`|Fixed format.|   |`G`|General format.|   |`N`|Number format.|   |`X`|Hexadecimal format.|      > [!NOTE] >  The format character is not case sensitive, except for `X`, which displays the hexadecimal characters in the case specified.       The value after the format character (`xx` in the general example) specifies the number of significant digits or decimal places to display.       The value of this property is stored in view state.       For more information on formatting strings, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the DataTextFormatString property to display the caption of each button in the <xref:System.Web.UI.WebControls.ButtonColumn> object in currency format.  \n  \n [!code-vb[ButtonColumnDataTextField#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1201_1.aspx)]\n [!code-cs[ButtonColumnDataTextField#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1201_1.aspx)]"
  syntax:
    content: public virtual string DataTextFormatString { get; set; }
    return:
      type: System.String
      description: "The string that specifies the display format for the caption in each button. The default is an empty string (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ButtonColumn.DataTextFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.FormatDataTextValue(System.Object)
  id: FormatDataTextValue(System.Object)
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: FormatDataTextValue(Object)
  nameWithType: ButtonColumn.FormatDataTextValue(Object)
  fullName: System.Web.UI.WebControls.ButtonColumn.FormatDataTextValue(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Converts the specified value to the format that is indicated by the <xref:System.Web.UI.WebControls.ButtonColumn.DataTextFormatString*> property."
  remarks: "Use the FormatDataTextValue method to convert the specified value to the format that is indicated by the <xref:System.Web.UI.WebControls.ButtonColumn.DataTextFormatString%2A> property.      > [!NOTE] >  The FormatDataTextValue method returns the string equivalent of the value, if the <xref:System.Web.UI.WebControls.ButtonColumn.DataTextFormatString%2A> property is not set."
  syntax:
    content: protected virtual string FormatDataTextValue (object dataTextValue);
    parameters:
    - id: dataTextValue
      type: System.Object
      description: "The value to format."
    return:
      type: System.String
      description: "The <code>dataTextValue</code> converted to the format indicated by the <xref:System.Web.UI.WebControls.ButtonColumn.DataTextFormatString*>."
  overload: System.Web.UI.WebControls.ButtonColumn.FormatDataTextValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.Initialize
  id: Initialize
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: Initialize()
  nameWithType: ButtonColumn.Initialize()
  fullName: System.Web.UI.WebControls.ButtonColumn.Initialize()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Resets the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> object to its initial state."
  remarks: "Use the Initialize method to reset the <xref:System.Web.UI.WebControls.ButtonColumn> object to its initial state."
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Web.UI.WebControls.ButtonColumn.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)
  id: InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: InitializeCell(TableCell,Int32,ListItemType)
  nameWithType: ButtonColumn.InitializeCell(TableCell,Int32,ListItemType)
  fullName: System.Web.UI.WebControls.ButtonColumn.InitializeCell(TableCell,Int32,ListItemType)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Resets a cell in the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> object to its initial state."
  remarks: "The InitializeCell method resets the specified cell in the <xref:System.Web.UI.WebControls.ButtonColumn> object to its initial state."
  syntax:
    content: public override void InitializeCell (System.Web.UI.WebControls.TableCell cell, int columnIndex, System.Web.UI.WebControls.ListItemType itemType);
    parameters:
    - id: cell
      type: System.Web.UI.WebControls.TableCell
      description: "A <xref href=&quot;System.Web.UI.WebControls.TableCell&quot;></xref> that represents the cell to reset."
    - id: columnIndex
      type: System.Int32
      description: "The column number where the cell is located."
    - id: itemType
      type: System.Web.UI.WebControls.ListItemType
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.ListItemType&quot;></xref> values."
  overload: System.Web.UI.WebControls.ButtonColumn.InitializeCell*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.Text
  id: Text
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: Text
  nameWithType: ButtonColumn.Text
  fullName: System.Web.UI.WebControls.ButtonColumn.Text
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the caption that is displayed in the buttons of the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> object."
  remarks: "Use the Text property to specify or determine the caption that is displayed in the buttons of the <xref:System.Web.UI.WebControls.ButtonColumn> object.      > [!NOTE] >  If you set the Text property, all buttons in the <xref:System.Web.UI.WebControls.ButtonColumn> share the same caption.       Alternatively, you can bind the <xref:System.Web.UI.WebControls.ButtonColumn> to a field in a data source. This allows you to display different captions for the buttons in the column using the values in the specified field. Set the <xref:System.Web.UI.WebControls.ButtonColumn.DataTextField%2A> property to bind the <xref:System.Web.UI.WebControls.ButtonColumn> to a field in a data source.       The value of this property is stored in view state.       The value of this property, when set, can be saved automatically to a resource file by using a designer tool. For more information, see <xref:System.ComponentModel.LocalizableAttribute> and [Globalization and Localization](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the Text property to specify the caption for the buttons in the <xref:System.Web.UI.WebControls.ButtonColumn> object.  \n  \n [!code-vb[Classic ButtonColumn.ButtonType Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_349_1.aspx)]\n [!code-cs[Classic ButtonColumn.ButtonType Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_349_1.aspx)]"
  syntax:
    content: public virtual string Text { get; set; }
    return:
      type: System.String
      description: "The caption displayed in the buttons of the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref>. The default is an empty string (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ButtonColumn.Text*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ButtonColumn.ValidationGroup
  id: ValidationGroup
  parent: System.Web.UI.WebControls.ButtonColumn
  langs:
  - csharp
  name: ValidationGroup
  nameWithType: ButtonColumn.ValidationGroup
  fullName: System.Web.UI.WebControls.ButtonColumn.ValidationGroup
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the group of validation controls for which the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> object causes validation when it posts back to the server."
  remarks: "Validation groups allow you to assign validation controls on a page to a specific category. Each validation group can be validated independently of other validation groups on the page. Use the ValidationGroup property to specify the name of the validation group for which the <xref:System.Web.UI.WebControls.ButtonColumn> object causes validation when it posts back to the server.       The ValidationGroup property has an effect only when the value of the <xref:System.Web.UI.WebControls.ButtonColumn.CausesValidation%2A> property is set to `true`. When you specify a value for the ValidationGroup property, only the validation controls that are part of the specified group are validated when the <xref:System.Web.UI.WebControls.ButtonColumn> posts back to the server. If you do not specify a value for the ValidationGroup property and the <xref:System.Web.UI.WebControls.ButtonColumn.CausesValidation%2A> property is set to `true`, all validation controls on the page that are not assigned to a validation group are validated when the <xref:System.Web.UI.WebControls.ButtonColumn> posts back to the server.       The value of this property is stored in view state."
  syntax:
    content: public virtual string ValidationGroup { get; set; }
    return:
      type: System.String
      description: "The group of validation controls for which the <xref href=&quot;System.Web.UI.WebControls.ButtonColumn&quot;></xref> object causes validation when it posts back to the server. The default is an empty string (&quot;&quot;)."
  overload: System.Web.UI.WebControls.ButtonColumn.ValidationGroup*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.DataGridColumn
  isExternal: false
  name: System.Web.UI.WebControls.DataGridColumn
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Web.UI.WebControls.ButtonColumn.#ctor
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: ButtonColumn()
  nameWithType: ButtonColumn.ButtonColumn()
  fullName: System.Web.UI.WebControls.ButtonColumn.ButtonColumn()
- uid: System.Web.UI.WebControls.ButtonColumn.ButtonType
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: ButtonType
  nameWithType: ButtonColumn.ButtonType
  fullName: System.Web.UI.WebControls.ButtonColumn.ButtonType
- uid: System.Web.UI.WebControls.ButtonColumnType
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ButtonColumnType
  nameWithType: ButtonColumnType
  fullName: System.Web.UI.WebControls.ButtonColumnType
- uid: System.Web.UI.WebControls.ButtonColumn.CausesValidation
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: CausesValidation
  nameWithType: ButtonColumn.CausesValidation
  fullName: System.Web.UI.WebControls.ButtonColumn.CausesValidation
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.ButtonColumn.CommandName
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: CommandName
  nameWithType: ButtonColumn.CommandName
  fullName: System.Web.UI.WebControls.ButtonColumn.CommandName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.ButtonColumn.DataTextField
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: DataTextField
  nameWithType: ButtonColumn.DataTextField
  fullName: System.Web.UI.WebControls.ButtonColumn.DataTextField
- uid: System.Web.UI.WebControls.ButtonColumn.DataTextFormatString
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: DataTextFormatString
  nameWithType: ButtonColumn.DataTextFormatString
  fullName: System.Web.UI.WebControls.ButtonColumn.DataTextFormatString
- uid: System.Web.UI.WebControls.ButtonColumn.FormatDataTextValue(System.Object)
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: FormatDataTextValue(Object)
  nameWithType: ButtonColumn.FormatDataTextValue(Object)
  fullName: System.Web.UI.WebControls.ButtonColumn.FormatDataTextValue(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.ButtonColumn.Initialize
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: Initialize()
  nameWithType: ButtonColumn.Initialize()
  fullName: System.Web.UI.WebControls.ButtonColumn.Initialize()
- uid: System.Web.UI.WebControls.ButtonColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: InitializeCell(TableCell,Int32,ListItemType)
  nameWithType: ButtonColumn.InitializeCell(TableCell,Int32,ListItemType)
  fullName: System.Web.UI.WebControls.ButtonColumn.InitializeCell(TableCell,Int32,ListItemType)
- uid: System.Web.UI.WebControls.TableCell
  parent: System.Web.UI.WebControls
  isExternal: false
  name: TableCell
  nameWithType: TableCell
  fullName: System.Web.UI.WebControls.TableCell
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.ListItemType
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ListItemType
  nameWithType: ListItemType
  fullName: System.Web.UI.WebControls.ListItemType
- uid: System.Web.UI.WebControls.ButtonColumn.Text
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: Text
  nameWithType: ButtonColumn.Text
  fullName: System.Web.UI.WebControls.ButtonColumn.Text
- uid: System.Web.UI.WebControls.ButtonColumn.ValidationGroup
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: ValidationGroup
  nameWithType: ButtonColumn.ValidationGroup
  fullName: System.Web.UI.WebControls.ButtonColumn.ValidationGroup
- uid: System.Web.UI.WebControls.ButtonColumn.#ctor*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: ButtonColumn
  nameWithType: ButtonColumn.ButtonColumn
- uid: System.Web.UI.WebControls.ButtonColumn.ButtonType*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: ButtonType
  nameWithType: ButtonColumn.ButtonType
- uid: System.Web.UI.WebControls.ButtonColumn.CausesValidation*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: CausesValidation
  nameWithType: ButtonColumn.CausesValidation
- uid: System.Web.UI.WebControls.ButtonColumn.CommandName*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: CommandName
  nameWithType: ButtonColumn.CommandName
- uid: System.Web.UI.WebControls.ButtonColumn.DataTextField*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: DataTextField
  nameWithType: ButtonColumn.DataTextField
- uid: System.Web.UI.WebControls.ButtonColumn.DataTextFormatString*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: DataTextFormatString
  nameWithType: ButtonColumn.DataTextFormatString
- uid: System.Web.UI.WebControls.ButtonColumn.FormatDataTextValue*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: FormatDataTextValue
  nameWithType: ButtonColumn.FormatDataTextValue
- uid: System.Web.UI.WebControls.ButtonColumn.Initialize*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: Initialize
  nameWithType: ButtonColumn.Initialize
- uid: System.Web.UI.WebControls.ButtonColumn.InitializeCell*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: InitializeCell
  nameWithType: ButtonColumn.InitializeCell
- uid: System.Web.UI.WebControls.ButtonColumn.Text*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: Text
  nameWithType: ButtonColumn.Text
- uid: System.Web.UI.WebControls.ButtonColumn.ValidationGroup*
  parent: System.Web.UI.WebControls.ButtonColumn
  isExternal: false
  name: ValidationGroup
  nameWithType: ButtonColumn.ValidationGroup
