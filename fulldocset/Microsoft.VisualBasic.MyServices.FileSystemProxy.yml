### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy
  id: FileSystemProxy
  children:
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath(System.String,System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.Int32[])
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.String[])
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String,System.Text.Encoding)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String,System.Text.Encoding)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory(System.String,System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile(System.String,System.String)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes(System.String,System.Byte[],System.Boolean)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)
  langs:
  - csharp
  name: FileSystemProxy
  nameWithType: FileSystemProxy
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy
  type: Class
  summary: "Provides properties and methods for working with drives, files, and directories."
  remarks: "The following table lists examples of tasks involving the `My.Computer.FileSystem` object.      |To|See|   |--------|---------|   |Read from a text file|[How to: Read from Text Files](~/add/includes/ajax-current-ext-md.md)|   |Read from a delimited text file|[How to: Read From Comma-Delimited Text Files](~/add/includes/ajax-current-ext-md.md)|   |Read from a fixed-width text file|[How to: Read From Fixed-width Text Files](~/add/includes/ajax-current-ext-md.md)|   |Read from a text file with multiple formats|[How to: Read From Text Files with Multiple Formats](~/add/includes/ajax-current-ext-md.md)|   |Read from a binary file|[How to: Read From Binary Files](~/add/includes/ajax-current-ext-md.md)|   |Read from a text file with a <xref:System.IO.StreamReader>|[How to: Read Text from Files with a StreamReader](~/add/includes/ajax-current-ext-md.md)|   |Write to a text file|[How to: Write Text to Files](~/add/includes/ajax-current-ext-md.md)|   |Append to a text file|[How to: Append to Text Files](~/add/includes/ajax-current-ext-md.md)|   |Write to a binary file|[How to: Write to Binary Files](~/add/includes/ajax-current-ext-md.md)|   |Write to text files in the **MyDocuments** directory|[How to: Write Text to Files in the My Documents Directory](~/add/includes/ajax-current-ext-md.md)|   |Write to a text file with a `StreamWriter`|[How to: Write Text to Files with a StreamWriter](~/add/includes/ajax-current-ext-md.md)|   |Copy files with a specific pattern|[How to: Copy Files with a Specific Pattern to a Directory](~/add/includes/ajax-current-ext-md.md)|   |Copy a file to the same directory|[How to: Create a Copy of a File in the Same Directory](~/add/includes/ajax-current-ext-md.md)|   |Copy a file to a different directory|[How to: Create a Copy of a File in a Different Directory](~/add/includes/ajax-current-ext-md.md)|   |Create a file|[How to: Create a File](~/add/includes/ajax-current-ext-md.md)|   |Delete a file|[How to: Delete a File](~/add/includes/ajax-current-ext-md.md)|   |Find files with a specific pattern|[How to: Find Files with a Specific Pattern](~/add/includes/ajax-current-ext-md.md)|   |Move a file|[How to: Move a File](~/add/includes/ajax-current-ext-md.md)|   |Rename a file|[How to: Rename a File](~/add/includes/ajax-current-ext-md.md)|   |Copy a directory to another directory|[How to: Copy a Directory to Another Directory](~/add/includes/ajax-current-ext-md.md)|   |Create a directory|[How to: Create a Directory](~/add/includes/ajax-current-ext-md.md)|   |Find subdirectories with a specific pattern|[How to: Find Subdirectories with a Specific Pattern](~/add/includes/ajax-current-ext-md.md)|   |Get the collection of files in a directory|[How to: Get the Collection of Files in a Directory](~/add/includes/ajax-current-ext-md.md)|   |Read from the **MyDocuments** directory|[How to: Retrieve the Contents of the My Documents Directory](~/add/includes/ajax-current-ext-md.md)|   |Parse a file path|[How to: Parse File Paths](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example checks to determine whether the folder `C:\\backup\\logs` exists and checks its properties.  \n  \n [!code-vb[VbVbcnMyFileSystem#23](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._13_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]

      public class FileSystemProxy
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath(System.String,System.String)
  id: CombinePath(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CombinePath(String,String)
  nameWithType: FileSystemProxy.CombinePath(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Combines two paths and returns a properly formatted path."
  remarks: "This method trims excess slash-mark characters to create a properly formatted path.       The following table lists examples of tasks involving the `My.Computer.FileSystem.CombinePath` method.      |To|See|   |--------|---------|   |Combine a directory path and file name|[How to: Parse File Paths](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example combines a directory path and file name to create a properly formatted path.  \n  \n [!code-vb[VbRefFile#3](~/add/codesnippet/visualbasic/8a958ad2-079d-43c8-9ab0-_1.vb)]  \n  \n This example combines two paths to create a properly formatted path.  \n  \n [!code-vb[VbRefFile#4](~/add/codesnippet/visualbasic/8a958ad2-079d-43c8-9ab0-_2.vb)]  \n  \n This example returns `C:\\Dir1\\Dir2\\Dir4\\Dir5\\File.txt`."
  syntax:
    content: public string CombinePath (string baseDirectory, string relativePath);
    parameters:
    - id: baseDirectory
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. First path to be combined."
    - id: relativePath
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Second path to be combined."
    return:
      type: System.String
      description: "The combination of the specified paths."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>baseDirectory</code> or <code>relativePath</code> are malformed paths."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)
  id: CopyDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CopyDirectory(String,String)
  nameWithType: FileSystemProxy.CopyDirectory(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Copies a directory to another directory."
  remarks: "This method copies the contents of the directory as well as the directory itself. If the target directory does not exist, it is created. If a directory with the same name exists in the target location, the contents of the two directories are merged. You can specify a new name for the directory during the operation.       When copying files within a directory, exceptions may be thrown that are caused by a specific file. When such exceptions are thrown, they are consolidated into a single exception whose `Data` property holds entries in the form of an <xref:System.Collections.IDictionary> in which the file or directory path is the key and the specific exception message is contained in the corresponding value. Use `For…Each` to enumerate through the entries.       The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyDirectory` method.      |To|See|   |--------|---------|   |Copy a directory|[How to: Copy a Directory to Another Directory](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example copies the directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  \n  \n [!code-vb[VbVbcnMyFileSystem#49](~/add/codesnippet/visualbasic/239273f2-9d6f-48a8-9a46-_1.vb)]  \n  \n Replace `C:\\TestDirectory1` and `C:\\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it."
  syntax:
    content: public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "The directory to be copied."
    - id: destinationDirectoryName
      type: System.String
      description: "The location to which the directory should be copied."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationDirectoryName</code> or <code>sourceDirectoryName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The source directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The source path and target path are the same."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The operation is cyclic."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A folder name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A destination file exists but cannot be accessed."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  id: CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CopyDirectory(String,String,UIOption)
  nameWithType: FileSystemProxy.CopyDirectory(String,String,UIOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(String,String,UIOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Copies a directory to another directory."
  remarks: "This method copies the contents of the directory as well as the directory itself. If the target directory does not exist, it is created. If a directory with the same name exists in the target location, the contents of the two directories are merged. You can specify a new name for the directory during the operation.       When copying files within a directory, exceptions may be thrown that are caused by a specific file. When such exceptions are thrown, they are consolidated into a single exception whose `Data` property holds entries in the form of an <xref:System.Collections.IDictionary> in which the file or directory path is the key and the specific exception message is contained in the corresponding value. Use `For…Each` to enumerate through the entries.       The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyDirectory` method.      |To|See|   |--------|---------|   |Copy a directory|[How to: Copy a Directory to Another Directory](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example copies the directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  \n  \n [!code-vb[VbVbcnMyFileSystem#49](~/add/codesnippet/visualbasic/88ad980f-7c55-41f5-ae9e-_1.vb)]  \n  \n Replace `C:\\TestDirectory1` and `C:\\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it."
  syntax:
    content: public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "The directory to be copied."
    - id: destinationDirectoryName
      type: System.String
      description: "The location to which the directory should be copied."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationDirectoryName</code> or <code>sourceDirectoryName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The source directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The source path and target path are the same."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The operation is cyclic."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A folder name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A destination file exists but cannot be accessed."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "<code>ShowUI</code> is set to <xref uid=&quot;langword_csharp_UIOption.AllDialogs&quot; name=&quot;UIOption.AllDialogs&quot; href=&quot;&quot;></xref> and the user cancels the operation, or one or more files in the directory cannot be copied."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,System.Boolean)
  id: CopyDirectory(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CopyDirectory(String,String,Boolean)
  nameWithType: FileSystemProxy.CopyDirectory(String,String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(String,String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Copies a directory to another directory."
  remarks: "This method copies the contents of the directory as well as the directory itself. If the target directory does not exist, it is created. If a directory with the same name exists in the target location, the contents of the two directories are merged. You can specify a new name for the directory during the operation.       When copying files within a directory, exceptions may be thrown that are caused by a specific file, such as a file existing during a merge while `overwrite` is set to `False`. When such exceptions are thrown, they are consolidated into a single exception whose `Data` property holds entries in the form of an <xref:System.Collections.IDictionary> in which the file or directory path is the key and the specific exception message is contained in the corresponding value. Use `For…Each` to enumerate through the entries.       The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyDirectory` method.      |To|See|   |--------|---------|   |Copy a directory|[How to: Copy a Directory to Another Directory](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example copies the directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  \n  \n [!code-vb[VbVbcnMyFileSystem#49](~/add/codesnippet/visualbasic/029fa5e0-f9d2-4d2b-ae58-_1.vb)]  \n  \n Replace `C:\\TestDirectory1` and `C:\\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it."
  syntax:
    content: public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "The directory to be copied."
    - id: destinationDirectoryName
      type: System.String
      description: "The location to which the directory should be copied."
    - id: overwrite
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> to overwrite existing files; otherwise <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>. Default is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationDirectoryName</code> or <code>sourceDirectoryName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The source directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The source path and target path are the same."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The operation is cyclic."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A folder name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A destination file exists but cannot be accessed."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CopyDirectory(String,String,UIOption,UICancelOption)
  nameWithType: FileSystemProxy.CopyDirectory(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(String,String,UIOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Copies a directory to another directory."
  remarks: "This method copies the contents of the directory as well as the directory itself. If the target directory does not exist, it is created. If a directory with the same name exists in the target location, the contents of the two directories are merged. You can specify a new name for the directory during the operation.       When copying files within a directory, exceptions may be thrown that are caused by a specific file. When such exceptions are thrown, they are consolidated into a single exception whose `Data` property holds entries in the form of an <xref:System.Collections.IDictionary> in which the file or directory path is the key and the specific exception message is contained in the corresponding value. Use `For…Each` to enumerate through the entries.       The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyDirectory` method.      |To|See|   |--------|---------|   |Copy a directory|[How to: Copy a Directory to Another Directory](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example copies the directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  \n  \n [!code-vb[VbVbcnMyFileSystem#49](~/add/codesnippet/visualbasic/045c3090-625f-4707-88c2-_1.vb)]  \n  \n Replace `C:\\TestDirectory1` and `C:\\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it."
  syntax:
    content: public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "The directory to be copied."
    - id: destinationDirectoryName
      type: System.String
      description: "The location to which the directory should be copied."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "Specifies what should be done if the user clicks **Cancel** during the operation. Default is <xref href=&quot;Microsoft.VisualBasic.FileIO.UICancelOption&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationDirectoryName</code> or <code>sourceDirectoryName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The source directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The source path and target path are the same."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The operation is cyclic."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A folder name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "A destination file exists but cannot be accessed."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "<code>ShowUI</code> is set to <xref uid=&quot;langword_csharp_UIOption.AllDialogs&quot; name=&quot;UIOption.AllDialogs&quot; href=&quot;&quot;></xref> and the user cancels the operation, or one or more files in the directory cannot be copied."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String)
  id: CopyFile(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CopyFile(String,String)
  nameWithType: FileSystemProxy.CopyFile(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Copies a file to a new location."
  remarks: "`CopyFile` does not preserve ACEs (Access Control Entries). The newly created file inherits default ACEs from the directory in which it is created.       The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyFile` method.      |To|See|   |--------|---------|   |Copy a file to the same directory.|[How to: Create a Copy of a File in the Same Directory](~/add/includes/ajax-current-ext-md.md)|   |Copy a file to a different directory.|[How to: Create a Copy of a File in a Different Directory](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  \n  \n [!code-vb[VbRefFile#15](~/add/codesnippet/visualbasic/35aff9d2-1370-4c0f-b055-_1.vb)]  \n  \n Replace the file paths with the paths you want to use in your code.  \n  \n This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  \n  \n [!code-vb[VbRefFile#16](~/add/codesnippet/visualbasic/35aff9d2-1370-4c0f-b055-_2.vb)]  \n  \n Replace the file paths with the paths you want to use in your code."
  syntax:
    content: public void CopyFile (string sourceFileName, string destinationFileName);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "The file to be copied."
    - id: destinationFileName
      type: System.String
      description: "The location to which the file should be copied."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destinationFileName </code>contains path information."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code> or <code>sourceFileName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The source file is not valid or does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A file in the target directory with the same name is in use."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have required permission."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  id: CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CopyFile(String,String,UIOption)
  nameWithType: FileSystemProxy.CopyFile(String,String,UIOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(String,String,UIOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Copies a file to a new location."
  remarks: "`CopyFile` does not preserve ACEs (Access Control Entries). The newly created file inherits default ACEs from the directory in which it is created.       The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyFile` method.      |To|See|   |--------|---------|   |Copy a file to the same directory.|[How to: Create a Copy of a File in the Same Directory](~/add/includes/ajax-current-ext-md.md)|   |Copy a file to a different directory.|[How to: Create a Copy of a File in a Different Directory](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  \n  \n [!code-vb[VbRefFile#15](~/add/codesnippet/visualbasic/1f217d7e-1014-49a6-bbf7-_1.vb)]  \n  \n Replace the file paths with the paths you want to use in your code.  \n  \n This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  \n  \n [!code-vb[VbRefFile#16](~/add/codesnippet/visualbasic/1f217d7e-1014-49a6-bbf7-_2.vb)]  \n  \n Replace the file paths with the paths you want to use in your code."
  syntax:
    content: public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "The file to be copied."
    - id: destinationFileName
      type: System.String
      description: "The location to which the file should be copied."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destinationFileName </code>contains path information."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code> or <code>sourceFileName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The source file is not valid or does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The destination file exists and <code>overwrite</code> is set to <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have required permission."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,System.Boolean)
  id: CopyFile(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CopyFile(String,String,Boolean)
  nameWithType: FileSystemProxy.CopyFile(String,String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(String,String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Copies a file to a new location."
  remarks: "`CopyFile` does not preserve ACEs (Access Control Entries). The newly created file inherits default ACEs from the directory in which it is created.       The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyFile` method.      |To|See|   |--------|---------|   |Copy a file to the same directory.|[How to: Create a Copy of a File in the Same Directory](~/add/includes/ajax-current-ext-md.md)|   |Copy a file to a different directory.|[How to: Create a Copy of a File in a Different Directory](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  \n  \n [!code-vb[VbRefFile#15](~/add/codesnippet/visualbasic/a6c1332c-05f4-42e3-a5eb-_1.vb)]  \n  \n Replace the file paths with the paths you want to use in your code.  \n  \n This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  \n  \n [!code-vb[VbRefFile#16](~/add/codesnippet/visualbasic/a6c1332c-05f4-42e3-a5eb-_2.vb)]  \n  \n Replace the file paths with the paths you want to use in your code."
  syntax:
    content: public void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "The file to be copied."
    - id: destinationFileName
      type: System.String
      description: "The location to which the file should be copied."
    - id: overwrite
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> if existing files should be overwritten; otherwise <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>. Default is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destinationFileName </code>contains path information."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code> or <code>sourceFileName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The source file is not valid or does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The destination file exists and <code>overwrite</code> is set to <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have required permission."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CopyFile(String,String,UIOption,UICancelOption)
  nameWithType: FileSystemProxy.CopyFile(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(String,String,UIOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Copies a file to a new location."
  remarks: "`CopyFile` does not preserve ACEs (Access Control Entries). The newly created file inherits default ACEs from the directory in which it is created.       The following table lists examples of tasks involving the `My.Computer.FileSystem.CopyFile` method.      |To|See|   |--------|---------|   |Copy a file to the same directory.|[How to: Create a Copy of a File in the Same Directory](~/add/includes/ajax-current-ext-md.md)|   |Copy a file to a different directory.|[How to: Create a Copy of a File in a Different Directory](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  \n  \n [!code-vb[VbRefFile#15](~/add/codesnippet/visualbasic/6e501658-de8a-48ca-8a55-_1.vb)]  \n  \n Replace the file paths with the paths you want to use in your code.  \n  \n This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  \n  \n [!code-vb[VbRefFile#16](~/add/codesnippet/visualbasic/6e501658-de8a-48ca-8a55-_2.vb)]  \n  \n Replace the file paths with the paths you want to use in your code."
  syntax:
    content: public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "The file to be copied."
    - id: destinationFileName
      type: System.String
      description: "The location to which the file should be copied."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "Specifies what should be done if the user clicks **Cancel** during the operation. Default is <xref href=&quot;Microsoft.VisualBasic.FileIO.UICancelOption&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destinationFileName </code>contains path information."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code> or <code>sourceFileName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The source file is not valid or does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The destination file exists and <code>overwrite</code> is set to <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have required permission."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "<code>UICancelOption</code> is set to <xref uid=&quot;langword_csharp_ThrowException&quot; name=&quot;ThrowException&quot; href=&quot;&quot;></xref>, and the user has canceled the operation or an unspecified I/O error occurs."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory(System.String)
  id: CreateDirectory(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CreateDirectory(String)
  nameWithType: FileSystemProxy.CreateDirectory(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Creates a directory."
  remarks: "If the directory already exists, no exception is thrown.       The following table lists examples of tasks involving the `My.Computer.FileSystem.CreateDirectory` method.      |To|See|   |--------|---------|   |Create a directory|[How to: Create a Directory](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example creates the directory, `NewDirectory`, in `C:\\Documents and Settings\\All Users\\Documents`.  \n  \n [!code-vb[VbVbcnMyFileSystem#17](~/add/codesnippet/visualbasic/23416b68-c5ce-4c96-b164-_1.vb)]"
  syntax:
    content: public void CreateDirectory (string directory);
    parameters:
    - id: directory
      type: System.String
      description: "Name and location of the directory."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The directory name is malformed. For example, it contains illegal characters or is only white space."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The directory name is too long."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The directory name is only a colon (:)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The parent directory of the directory to be created is read-only"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have permission to create the directory."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory
  id: CurrentDirectory
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: CurrentDirectory
  nameWithType: FileSystemProxy.CurrentDirectory
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Gets or sets the current directory."
  remarks: '`CurrentDirectory` is a system-wide environment variable.'
  example:
  - "This example returns the current directory and displays it in a message box.  \n  \n [!code-vb[VbVbcnMyFileSystem#18](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._77_1.vb)]  \n  \n This example sets the current directory to `C:\\TestDirectory`.  \n  \n [!code-vb[VbVbcnMyFileSystem#19](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._77_2.vb)]"
  syntax:
    content: public string CurrentDirectory { get; set; }
    return:
      type: System.String
      description: "The current directory for file I/O operations."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The path is not valid."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user lacks necessary permissions."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)
  id: DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: DeleteDirectory(String,DeleteDirectoryOption)
  nameWithType: FileSystemProxy.DeleteDirectory(String,DeleteDirectoryOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(String,DeleteDirectoryOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Deletes a directory."
  remarks: ''
  example:
  - "The example deletes the directory `OldDirectory` only if it is empty.  \n  \n [!code-vb[VbVbcnMyFileSystem#56](~/add/codesnippet/visualbasic/cedfdebf-99a8-4195-82ff-_1.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents.  \n  \n [!code-vb[VbVbcnMyFileSystem#57](~/add/codesnippet/visualbasic/cedfdebf-99a8-4195-82ff-_2.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, asking the user to confirm the deletion, but does not send the contents to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#58](~/add/codesnippet/visualbasic/cedfdebf-99a8-4195-82ff-_3.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, sending them to the **Recycle Bin**, but does not show the progress of the operation.  \n  \n [!code-vb[VbVbcnMyFileSystem#59](~/add/codesnippet/visualbasic/cedfdebf-99a8-4195-82ff-_4.vb)]"
  syntax:
    content: public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);
    parameters:
    - id: directory
      type: System.String
      description: "Directory to be deleted."
    - id: onDirectoryNotEmpty
      type: Microsoft.VisualBasic.FileIO.DeleteDirectoryOption
      description: "Specifies what should be done when a directory that is to be deleted contains files or directories. Default is <xref uid=&quot;langword_csharp_DeleteDirectoryOption.DeleteAllContents&quot; name=&quot;DeleteDirectoryOption.DeleteAllContents&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path is a zero-length string, is malformed, contains only white space, or contains invalid characters (including wildcard characters). The path is a device path (starts with \\\\\\\\.\\\\)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory does not exist or is a file."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A file in the directory or subdirectory is in use."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The directory name contains a colon (:)."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user does not have required permissions."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "The user cancels the operation or the directory cannot be deleted."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  id: DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: DeleteDirectory(String,UIOption,RecycleOption)
  nameWithType: FileSystemProxy.DeleteDirectory(String,UIOption,RecycleOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(String,UIOption,RecycleOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Deletes a directory."
  remarks: "The `showUI` and `recycle` parameters are not supported in applications that are not user interactive, such as Windows Services."
  example:
  - "The example deletes the directory `OldDirectory` only if it is empty.  \n  \n [!code-vb[VbVbcnMyFileSystem#56](~/add/codesnippet/visualbasic/e5335475-bf11-415f-92a3-_1.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents.  \n  \n [!code-vb[VbVbcnMyFileSystem#57](~/add/codesnippet/visualbasic/e5335475-bf11-415f-92a3-_2.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, asking the user to confirm the deletion, but does not send the contents to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#58](~/add/codesnippet/visualbasic/e5335475-bf11-415f-92a3-_3.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, sending them to the **Recycle Bin**, but does not show the progress of the operation.  \n  \n [!code-vb[VbVbcnMyFileSystem#59](~/add/codesnippet/visualbasic/e5335475-bf11-415f-92a3-_4.vb)]"
  syntax:
    content: public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);
    parameters:
    - id: directory
      type: System.String
      description: "Directory to be deleted."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Specifies whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
    - id: recycle
      type: Microsoft.VisualBasic.FileIO.RecycleOption
      description: "Specifies whether or not the deleted file should be sent to the **Recycle Bin**. Default is <xref uid=&quot;langword_csharp_RecycleOption.DeletePermanently&quot; name=&quot;RecycleOption.DeletePermanently&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path is a zero-length string, is malformed, contains only white space, or contains invalid characters (including wildcard characters). The path is a device path (starts with \\\\\\\\.\\\\)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory does not exist or is a file."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A file in the directory or subdirectory is in use."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The directory name contains a colon (:)."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user does not have required permissions."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "The user cancels the operation or the directory cannot be deleted."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
  nameWithType: FileSystemProxy.DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Deletes a directory."
  remarks: "The `showUI`, `recycle`, and `onUserCancel` parameters are not supported in applications that are not user interactive, such as Windows Services."
  example:
  - "The example deletes the directory `OldDirectory` only if it is empty.  \n  \n [!code-vb[VbVbcnMyFileSystem#56](~/add/codesnippet/visualbasic/7d4b2ab6-2898-4997-9c37-_1.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents.  \n  \n [!code-vb[VbVbcnMyFileSystem#57](~/add/codesnippet/visualbasic/7d4b2ab6-2898-4997-9c37-_2.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, asking the user to confirm the deletion, but does not send the contents to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#58](~/add/codesnippet/visualbasic/7d4b2ab6-2898-4997-9c37-_3.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, sending them to the **Recycle Bin**, but does not show the progress of the operation.  \n  \n [!code-vb[VbVbcnMyFileSystem#59](~/add/codesnippet/visualbasic/7d4b2ab6-2898-4997-9c37-_4.vb)]"
  syntax:
    content: public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: directory
      type: System.String
      description: "Directory to be deleted."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Specifies whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
    - id: recycle
      type: Microsoft.VisualBasic.FileIO.RecycleOption
      description: "Specifies whether or not the deleted file should be sent to the **Recycle Bin**. Default is <xref uid=&quot;langword_csharp_RecycleOption.DeletePermanently&quot; name=&quot;RecycleOption.DeletePermanently&quot; href=&quot;&quot;></xref>."
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "Specifies whether to throw an exception if the user clicks **Cancel**."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path is a zero-length string, is malformed, contains only white space, or contains invalid characters (including wildcard characters). The path is a device path (starts with \\\\\\\\.\\\\)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory does not exist or is a file."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A file in the directory or subdirectory is in use."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The directory name contains a colon (:)."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user does not have required permissions."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "The user cancels the operation or the directory cannot be deleted."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String)
  id: DeleteFile(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: DeleteFile(String)
  nameWithType: FileSystemProxy.DeleteFile(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Deletes a file."
  remarks: "The following table lists examples of tasks involving the `My.Computer.FileSystem.DeleteFile` method.      |To|See|   |--------|---------|   |To delete a file|[How to: Delete a File](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example deletes the file `Test.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#3](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._88_1.vb)]  \n  \n This example deletes the file `Test.txt` and allows the user to confirm that the file should be deleted.  \n  \n [!code-vb[VbVbcnMyFileSystem#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._88_2.vb)]  \n  \n This example deletes the file `Test.txt` and sends it to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._88_3.vb)]"
  syntax:
    content: public void DeleteFile (string file);
    parameters:
    - id: file
      type: System.String
      description: "Name and path of the file to be deleted."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; it has a trailing slash where a file must be specified; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have permission to delete the file or the file is read-only."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  id: DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: DeleteFile(String,UIOption,RecycleOption)
  nameWithType: FileSystemProxy.DeleteFile(String,UIOption,RecycleOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(String,UIOption,RecycleOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Deletes a file."
  remarks: "The `showUI` and `recycle` parameters are not supported in applications that are not user interactive, such as Windows Services.       The following table lists examples of tasks involving the `My.Computer.FileSystem.DeleteFile` method.      |To|See|   |--------|---------|   |To delete a file|[How to: Delete a File](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example deletes the file `Test.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#3](~/add/codesnippet/visualbasic/6a94786b-3ede-4f9d-bc5e-_1.vb)]  \n  \n This example deletes the file `Test.txt` and allows the user to confirm that the file should be deleted.  \n  \n [!code-vb[VbVbcnMyFileSystem#4](~/add/codesnippet/visualbasic/6a94786b-3ede-4f9d-bc5e-_2.vb)]  \n  \n This example deletes the file `Test.txt` and sends it to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#5](~/add/codesnippet/visualbasic/6a94786b-3ede-4f9d-bc5e-_3.vb)]"
  syntax:
    content: public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);
    parameters:
    - id: file
      type: System.String
      description: "Name and path of the file to be deleted."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
    - id: recycle
      type: Microsoft.VisualBasic.FileIO.RecycleOption
      description: "Whether or not the deleted file should be sent to the **Recycle Bin**. Default is <xref uid=&quot;langword_csharp_RecycleOption.DeletePermanently&quot; name=&quot;RecycleOption.DeletePermanently&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; it has a trailing slash where a file must be specified; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have permission to delete the file or the file is read-only."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: DeleteFile(String,UIOption,RecycleOption,UICancelOption)
  nameWithType: FileSystemProxy.DeleteFile(String,UIOption,RecycleOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(String,UIOption,RecycleOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Deletes a file."
  remarks: "The `showUI`, `recycle`, and `onUserCancel` parameters are not supported in applications that are not user interactive, such as Windows Services.       The following table lists examples of tasks involving the `My.Computer.FileSystem.DeleteFile` method.      |To|See|   |--------|---------|   |To delete a file|[How to: Delete a File](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example deletes the file `Test.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#3](~/add/codesnippet/visualbasic/6e096d80-c28e-4323-9238-_1.vb)]  \n  \n This example deletes the file `Test.txt` and allows the user to confirm that the file should be deleted.  \n  \n [!code-vb[VbVbcnMyFileSystem#4](~/add/codesnippet/visualbasic/6e096d80-c28e-4323-9238-_2.vb)]  \n  \n This example deletes the file `Test.txt` and sends it to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#5](~/add/codesnippet/visualbasic/6e096d80-c28e-4323-9238-_3.vb)]"
  syntax:
    content: public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: file
      type: System.String
      description: "Name and path of the file to be deleted."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
    - id: recycle
      type: Microsoft.VisualBasic.FileIO.RecycleOption
      description: "Whether or not the deleted file should be sent to the **Recycle Bin**. Default is <xref uid=&quot;langword_csharp_RecycleOption.DeletePermanently&quot; name=&quot;RecycleOption.DeletePermanently&quot; href=&quot;&quot;></xref>."
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "Specifies whether or not an exception is thrown when the user cancels the operation. Default is <xref uid=&quot;langword_csharp_UICancelOption.ThrowException&quot; name=&quot;UICancelOption.ThrowException&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; it has a trailing slash where a file must be specified; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have permission to delete the file or the file is read-only."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "The user cancelled the operation and <code>onUserCancel</code> is set to <xref href=&quot;Microsoft.VisualBasic.FileIO.UICancelOption&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists(System.String)
  id: DirectoryExists(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: DirectoryExists(String)
  nameWithType: FileSystemProxy.DirectoryExists(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> if the specified directory exists."
  remarks: ''
  example:
  - "This example determines whether the directory `C:\\backup\\logs` exists and checks its properties.  \n  \n [!code-vb[VbRefFile#13](~/add/codesnippet/visualbasic/7dd70ea7-fac8-4509-8a5b-_1.vb)]"
  syntax:
    content: public bool DirectoryExists (string directory);
    parameters:
    - id: directory
      type: System.String
      description: "Path of the directory."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> if the directory exists; otherwise <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives
  id: Drives
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: Drives
  nameWithType: FileSystemProxy.Drives
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a read-only collection of all available drive names."
  remarks: "This property returns all logical drives."
  example:
  - "This example displays the available drive names in a message box.  \n  \n [!code-vb[VbRefFile#19](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._61_1.vb)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.IO.DriveInfo> Drives { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.DriveInfo}
      description: "A read-only collection of all available drives as <xref href=&quot;System.IO.DriveInfo&quot;></xref> objects."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists(System.String)
  id: FileExists(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: FileExists(String)
  nameWithType: FileSystemProxy.FileExists(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> if the specified file exists."
  remarks: "If the application does not have sufficient permissions to read the specified file, the `FileExists` method returns `False`, regardless of the existence of the path; the method does not throw an exception."
  example:
  - "This example checks to see whether or not the file `Check.txt` exists and supplies the information in a message box.  \n  \n [!code-vb[VbRefFile#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._238_1.vb)]"
  syntax:
    content: public bool FileExists (string file);
    parameters:
    - id: file
      type: System.String
      description: "Name and path of the file."
    return:
      type: System.Boolean
      description: "Returns <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> if the file exists; otherwise this method returns <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The name of the file ends with a backslash (\\\\)."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)
  id: FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: FindInFiles(String,String,Boolean,SearchOption)
  nameWithType: FileSystemProxy.FindInFiles(String,String,Boolean,SearchOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(String,String,Boolean,SearchOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a read-only collection of strings representing the names of files containing the specified text."
  remarks: "An empty collection is returned if no files matching the specified pattern are found.       The following table lists examples of tasks involving the `My.Computer.FileSystem.FindInFiles` method.      |To|See|   |--------|---------|   |Search a directory for files containing a specific string|[Walkthrough: Manipulating Files and Directories in Visual Basic](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example searches the directory `C:\\TestDir` for any files containing the string `\"sample string\"` and displays the results in `ListBox1`.  \n  \n [!code-vb[VbRefFile#12](~/add/codesnippet/visualbasic/0411284c-97f6-421f-9cd5-_1.vb)]  \n  \n In order to work, the project must contain a `ListBox` named `ListBox1`."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<string> FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);
    parameters:
    - id: directory
      type: System.String
      description: "The directory to be searched."
    - id: containsText
      type: System.String
      description: "The search text."
    - id: ignoreCase
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> if the search should be case-sensitive; otherwise <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>. Default is <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>."
    - id: searchType
      type: Microsoft.VisualBasic.FileIO.SearchOption
      description: "Whether to include subfolders. Default is <xref uid=&quot;langword_csharp_SearchOption.SearchTopLevelOnly&quot; name=&quot;SearchOption.SearchTopLevelOnly&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "Read-only collection of the names of files containing the specified text.."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with `\\.\`).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The specified directory points to an existing file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The specified directory path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user lacks necessary permissions."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  id: FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: FindInFiles(String,String,Boolean,SearchOption,String[])
  nameWithType: FileSystemProxy.FindInFiles(String,String,Boolean,SearchOption,String[])
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(String,String,Boolean,SearchOption,String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a read-only collection of strings representing the names of files containing the specified text."
  remarks: "An empty collection is returned if no files matching the specified pattern are found.       The following table lists examples of tasks involving the `My.Computer.FileSystem.FindInFiles` method.      |To|See|   |--------|---------|   |Search a directory for files containing a specific string|[Walkthrough: Manipulating Files and Directories in Visual Basic](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example searches the directory `C:\\TestDir` for any files containing the string `\"sample string\"` and displays the results in `ListBox1`.  \n  \n [!code-vb[VbRefFile#12](~/add/codesnippet/visualbasic/cb69d87f-5cdb-4aa7-8869-_1.vb)]  \n  \n In order to work, the project must contain a `ListBox` named `ListBox1`."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<string> FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards);
    parameters:
    - id: directory
      type: System.String
      description: "The directory to be searched."
    - id: containsText
      type: System.String
      description: "The search text."
    - id: ignoreCase
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> if the search should be case-sensitive; otherwise <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>. Default is <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>."
    - id: searchType
      type: Microsoft.VisualBasic.FileIO.SearchOption
      description: "Whether to include subfolders. Default is <xref uid=&quot;langword_csharp_SearchOption.SearchTopLevelOnly&quot; name=&quot;SearchOption.SearchTopLevelOnly&quot; href=&quot;&quot;></xref>."
    - id: fileWildcards
      type: System.String[]
      description: "Pattern to be matched."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "Read-only collection of the names of files containing the specified text.."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with `\\.\`).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The specified directory points to an existing file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The specified directory path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user lacks necessary permissions."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: GetDirectories(String)
  nameWithType: FileSystemProxy.GetDirectories(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a collection of strings representing the path names of subdirectories within a directory."
  remarks: "The following table lists examples of tasks involving the `My.Computer.FileSystem.GetDirectories` method.      |To|See|   |--------|---------|   |List subdirectories with a specific pattern|[How to: Find Subdirectories with a Specific Pattern](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example returns all the directories in the directory structure that contain the word `Logs` in their names and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._12_1.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<string> GetDirectories (string directory);
    parameters:
    - id: directory
      type: System.String
      description: "Name and path of directory."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "Read-only collection of the path names of subdirectories within the specified directory.."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The specified directory points to an existing file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user lacks necessary permissions."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  id: GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: GetDirectories(String,SearchOption,String[])
  nameWithType: FileSystemProxy.GetDirectories(String,SearchOption,String[])
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(String,SearchOption,String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a collection of strings representing the path names of subdirectories within a directory."
  remarks: "You can use the `wildcards` parameter to specify a specific pattern. If you would like to include the contents of subdirectories in the search, set the `searchType` parameter to `SearchAllSubDirectories`.       An empty collection is returned if no directories matching the specified pattern are found.       The following table lists examples of tasks involving the `My.Computer.FileSystem.GetDirectories` method.      |To|See|   |--------|---------|   |List subdirectories with a specific pattern|[How to: Find Subdirectories with a Specific Pattern](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example returns all the directories in the directory structure that contain the word `Logs` in their names and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#10](~/add/codesnippet/visualbasic/ed44a5f7-321c-4c72-83a6-_1.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<string> GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards);
    parameters:
    - id: directory
      type: System.String
      description: "Name and path of directory."
    - id: searchType
      type: Microsoft.VisualBasic.FileIO.SearchOption
      description: "Whether to include subfolders. Default is <xref uid=&quot;langword_csharp_SearchOption.SearchTopLevelOnly&quot; name=&quot;SearchOption.SearchTopLevelOnly&quot; href=&quot;&quot;></xref>."
    - id: wildcards
      type: System.String[]
      description: "Pattern to match names."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "Read-only collection of the path names of subdirectories within the specified directory."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of the specified wildcard characters is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>, an empty string, or contains only spaces."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The specified directory points to an existing file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user lacks necessary permissions."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo(System.String)
  id: GetDirectoryInfo(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: GetDirectoryInfo(String)
  nameWithType: FileSystemProxy.GetDirectoryInfo(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a <xref href=&quot;System.IO.DirectoryInfo&quot;></xref> object for the specified path."
  remarks: "If the directory does not exist, an exception is not thrown until the first time a property on the <xref:System.IO.DirectoryInfo> object is accessed."
  example:
  - "This example gets a <xref:System.IO.DirectoryInfo> object for the directory `C:\\Documents and Settings` and displays the directory's creation time, last access time, and last write time.  \n  \n [!code-vb[VbRefFile#7](~/add/codesnippet/visualbasic/5efdf299-cb73-46cc-a9c9-_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo GetDirectoryInfo (string directory);
    parameters:
    - id: directory
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Path of directory."
    return:
      type: System.IO.DirectoryInfo
      description: "<xref href=&quot;System.IO.DirectoryInfo&quot;></xref> object for the specified path."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The directory path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path"
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo(System.String)
  id: GetDriveInfo(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: GetDriveInfo(String)
  nameWithType: FileSystemProxy.GetDriveInfo(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a <xref href=&quot;System.IO.DriveInfo&quot;></xref> object for the specified drive."
  remarks: "The <xref:System.IO.DriveInfo> class models a drive and provides methods and properties to query for drive information. Use <xref:System.IO.DriveInfo> to determine what drives are available, and what type of drives they are. You can also query the property to determine the capacity and available free space on the drive."
  example:
  - "This example obtains a <xref:System.IO.DriveInfo> object for the C drive and uses it to display information about the drive.  \n  \n [!code-vb[VbRefFile#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._61_1.vb)]  \n  \n For information on the different drive types, see <xref:System.IO.DriveType>."
  syntax:
    content: public System.IO.DriveInfo GetDriveInfo (string drive);
    parameters:
    - id: drive
      type: System.String
      description: "Drive to be examined."
    return:
      type: System.IO.DriveInfo
      description: "<xref href=&quot;System.IO.DriveInfo&quot;></xref> object for the specified drive."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>drive</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path"
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo(System.String)
  id: GetFileInfo(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: GetFileInfo(String)
  nameWithType: FileSystemProxy.GetFileInfo(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a <xref href=&quot;System.IO.FileInfo&quot;></xref> object for the specified file."
  remarks: "An exception is not thrown if the file does not exist; rather, it will be thrown the first time the object&quot;s properties are accessed.       The following table lists an example of a task involving the `My.Computer.FileSystem.GetFileInfo` method.      |To|See|   |--------|---------|   |Determine a file&quot;s name and path|[How to: Parse File Paths](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example retrieves a <xref:System.IO.FileInfo?displayProperty=fullName> object for the file `MyLogFile.log` and uses it to report the file's full name, last access time, and length.  \n  \n [!code-vb[VbRefFile#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._68_1.vb)]"
  syntax:
    content: public System.IO.FileInfo GetFileInfo (string file);
    parameters:
    - id: file
      type: System.String
      description: "Name and path of the file."
    return:
      type: System.IO.FileInfo
      description: "<xref href=&quot;System.IO.FileInfo&quot;></xref> object for the specified file"
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path name is malformed. For example, it contains invalid characters or is only white space. The file name has a trailing slash mark."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The path contains a colon in the middle of the string."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path is too long."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user lacks ACL (access control list) access to the file."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: GetFiles(String)
  nameWithType: FileSystemProxy.GetFiles(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a read-only collection of strings representing the names of files within a directory."
  remarks: "An empty collection is returned if no files matching the specified pattern are found.       The following table lists examples of tasks involving the `My.Computer.FileSystem.GetFiles` method.      |To|See|   |--------|---------|   |Get the collection of files in a directory|[How to: Get the Collection of Files in a Directory](~/add/includes/ajax-current-ext-md.md)|   |Find files with a specific pattern in a directory|[How to: Find Files with a Specific Pattern](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example returns all files in the directory and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._206_1.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form.  \n  \n This example returns all files in the directory with the extension `.txt` and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._206_2.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<string> GetFiles (string directory);
    parameters:
    - id: directory
      type: System.String
      description: "Directory to be searched."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "Read-only collection of file names from the specified directory."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory to search does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>directory</code> points to an existing file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user lacks necessary permissions."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  id: GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: GetFiles(String,SearchOption,String[])
  nameWithType: FileSystemProxy.GetFiles(String,SearchOption,String[])
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(String,SearchOption,String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns a read-only collection of strings representing the names of files within a directory."
  remarks: "An empty collection is returned if no files matching the specified pattern are found.       The following table lists examples of tasks involving the `My.Computer.FileSystem.GetFiles` method.      |To|See|   |--------|---------|   |Get the collection of files in a directory|[How to: Get the Collection of Files in a Directory](~/add/includes/ajax-current-ext-md.md)|   |Find files with a specific pattern in a directory|[How to: Find Files with a Specific Pattern](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example returns all files in the directory and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#5](~/add/codesnippet/visualbasic/fc9d3bc2-8735-4582-912b-_1.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form.  \n  \n This example returns all files in the directory with the extension `.txt` and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#6](~/add/codesnippet/visualbasic/fc9d3bc2-8735-4582-912b-_2.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<string> GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards);
    parameters:
    - id: directory
      type: System.String
      description: "Directory to be searched."
    - id: searchType
      type: Microsoft.VisualBasic.FileIO.SearchOption
      description: "Whether to include subfolders. Default is <xref uid=&quot;langword_csharp_SearchOption.SearchTopLevelOnly&quot; name=&quot;SearchOption.SearchTopLevelOnly&quot; href=&quot;&quot;></xref>."
    - id: wildcards
      type: System.String[]
      description: "Pattern to be matched."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "Read-only collection of file names from the specified directory."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory to search does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>directory</code> points to an existing file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user lacks necessary permissions."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName(System.String)
  id: GetName(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: GetName(String)
  nameWithType: FileSystemProxy.GetName(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Parses the file name out of the path provided."
  remarks: "This is a string operation; the `FileSystem` is not examined.       The `GetName` method ignores a slash mark occurring at the end of the path.       The following table lists examples of tasks involving the `My.Computer.FileSystem.GetFileName` method.      |To|See|   |--------|---------|   |Parse a file path|[How to: Parse File Paths](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example parses a file path and returns the name of the file.  \n  \n [!code-vb[VbVbcnMyFileSystem#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._127_1.vb)]  \n  \n Replace the path `C:\\Testdirectory\\Testfile` with the path you wish to parse."
  syntax:
    content: public string GetName (string path);
    parameters:
    - id: path
      type: System.String
      description: "Required. Path to be parsed. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>."
    return:
      type: System.String
      description: "The file name from the specified path."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath(System.String)
  id: GetParentPath(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: GetParentPath(String)
  nameWithType: FileSystemProxy.GetParentPath(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns the parent path of the provided path."
  remarks: "This is a string operation; the file system is not examined."
  example:
  - "This example gets the parent path for `C:\\Backups\\Tmp\\Test`.  \n  \n [!code-vb[VbRefFile#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._166_1.vb)]"
  syntax:
    content: public string GetParentPath (string path);
    parameters:
    - id: path
      type: System.String
      description: "Path to be examined."
    return:
      type: System.String
      description: "The parent path of the provided path."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Path does not have a parent path because it is a root path."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName
  id: GetTempFileName
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: GetTempFileName()
  nameWithType: FileSystemProxy.GetTempFileName()
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Creates a uniquely named zero-byte temporary file on disk and returns the full path of that file."
  remarks: "This method can be used to create a temporary file."
  example:
  - "This example creates a temp file and returns its path.  \n  \n [!code-vb[VbVbcnMyFileSystem#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._60_1.vb)]"
  syntax:
    content: public string GetTempFileName ();
    parameters: []
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> containing the full path of the temporary file."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String)
  id: MoveDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: MoveDirectory(String,String)
  nameWithType: FileSystemProxy.MoveDirectory(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Moves a directory from one location to another."
  remarks: "If an attempt is made to move a directory inside a directory that does not exist, the target structure will be created."
  example:
  - "This example moves `Directory1` inside `Directory2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#81](~/add/codesnippet/visualbasic/cefa3a89-088e-471a-a720-_1.vb)]  \n  \n This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  \n  \n [!code-vb[VbVbcnMyFileSystem#82](~/add/codesnippet/visualbasic/cefa3a89-088e-471a-a720-_2.vb)]"
  syntax:
    content: public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "Path of the directory to be moved."
    - id: destinationDirectoryName
      type: System.String
      description: "Path of the directory to which the source directory is being moved."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code> or <code>destinationDirectoryName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The source is a root directory or The source path and the target path are the same."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The operation is cyclic."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have required permission."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  id: MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: MoveDirectory(String,String,UIOption)
  nameWithType: FileSystemProxy.MoveDirectory(String,String,UIOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(String,String,UIOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Moves a directory from one location to another."
  remarks: "If an attempt is made to move a directory inside a directory that does not exist, the target structure will be created."
  example:
  - "This example moves `Directory1` inside `Directory2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#81](~/add/codesnippet/visualbasic/56777374-23c9-4305-8635-_1.vb)]  \n  \n This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  \n  \n [!code-vb[VbVbcnMyFileSystem#82](~/add/codesnippet/visualbasic/56777374-23c9-4305-8635-_2.vb)]"
  syntax:
    content: public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "Path of the directory to be moved."
    - id: destinationDirectoryName
      type: System.String
      description: "Path of the directory to which the source directory is being moved."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Specifies whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code> or <code>destinationDirectoryName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The target directory already exists and o<code>verwrite</code> is set to <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The operation is cyclic."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have required permission."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,System.Boolean)
  id: MoveDirectory(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: MoveDirectory(String,String,Boolean)
  nameWithType: FileSystemProxy.MoveDirectory(String,String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(String,String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Moves a directory from one location to another."
  remarks: "If an attempt is made to move a directory inside a directory that does not exist, the target structure will be created."
  example:
  - "This example moves `Directory1` inside `Directory2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#81](~/add/codesnippet/visualbasic/54561b61-1727-42cb-8ba4-_1.vb)]  \n  \n This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  \n  \n [!code-vb[VbVbcnMyFileSystem#82](~/add/codesnippet/visualbasic/54561b61-1727-42cb-8ba4-_2.vb)]"
  syntax:
    content: public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "Path of the directory to be moved."
    - id: destinationDirectoryName
      type: System.String
      description: "Path of the directory to which the source directory is being moved."
    - id: overwrite
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> if existing directories should be overwritten; otherwise <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>. Default is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code> or <code>destinationDirectoryName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The target directory already exists and o<code>verwrite</code> is set to <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The operation is cyclic."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have required permission."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: MoveDirectory(String,String,UIOption,UICancelOption)
  nameWithType: FileSystemProxy.MoveDirectory(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(String,String,UIOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Moves a directory from one location to another."
  remarks: "If an attempt is made to move a directory inside a directory that does not exist, the target structure will be created."
  example:
  - "This example moves `Directory1` inside `Directory2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#81](~/add/codesnippet/visualbasic/10c8e3c7-8937-43d2-b15d-_1.vb)]  \n  \n This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  \n  \n [!code-vb[VbVbcnMyFileSystem#82](~/add/codesnippet/visualbasic/10c8e3c7-8937-43d2-b15d-_2.vb)]"
  syntax:
    content: public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "Path of the directory to be moved."
    - id: destinationDirectoryName
      type: System.String
      description: "Path of the directory to which the source directory is being moved."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Specifies whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "Specifies whether or not an exception is thrown when the user cancels the operation. Default is <xref uid=&quot;langword_csharp_UICancelOption.ThrowException&quot; name=&quot;UICancelOption.ThrowException&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\).'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code> or <code>destinationDirectoryName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>onUserCancel</code> is set to <xref uid=&quot;langword_csharp_ThrowException&quot; name=&quot;ThrowException&quot; href=&quot;&quot;></xref> and a subdirectory of the file cannot be copied."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "<code>onUserCancel</code> is set to <xref uid=&quot;langword_csharp_ThrowException&quot; name=&quot;ThrowException&quot; href=&quot;&quot;></xref>, and the user cancels the operation, or the operation cannot be completed."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The operation is cyclic."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have required permission."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)
  id: MoveFile(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: MoveFile(String,String)
  nameWithType: FileSystemProxy.MoveFile(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Moves a file to a new location."
  remarks: "If the target structure does not exist, it is created.       The `MoveFile` method preserves ACEs (Access Control Entries) only when moving the file within the same volume. This includes inherited ACEs, which become direct ACEs when moved (direct ACEs take precedence over inherited ACEs). If a file is moved between volumes, ACEs will not be copied.       The following table lists an example of a task involving the `My.Computer.FileSystem.MoveFile` method.      |To|See|   |--------|---------|   |Move a file|[How to: Move a File](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#86](~/add/codesnippet/visualbasic/b4b2ccc0-2079-45b2-86a0-_1.vb)]  \n  \n This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#87](~/add/codesnippet/visualbasic/b4b2ccc0-2079-45b2-86a0-_2.vb)]"
  syntax:
    content: public void MoveFile (string sourceFileName, string destinationFileName);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "Path of the file to be moved."
    - id: destinationFileName
      type: System.String
      description: "Path of the directory into which the file should be moved."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The source file is not valid or does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  id: MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: MoveFile(String,String,UIOption)
  nameWithType: FileSystemProxy.MoveFile(String,String,UIOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(String,String,UIOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Moves a file to a new location."
  remarks: "If the target structure does not exist, it is created.       The `MoveFile` method preserves ACEs (Access Control Entries) only when moving the file within the same volume. This includes inherited ACEs, which become direct ACEs when moved (direct ACEs take precedence over inherited ACEs). If a file is moved between volumes, ACEs will not be copied.       The following table lists an example of a task involving the `My.Computer.FileSystem.MoveFile` method.      |To|See|   |--------|---------|   |Move a file|[How to: Move a File](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#86](~/add/codesnippet/visualbasic/5ae4490c-fc4f-4dd8-b094-_1.vb)]  \n  \n This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#87](~/add/codesnippet/visualbasic/5ae4490c-fc4f-4dd8-b094-_2.vb)]"
  syntax:
    content: public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "Path of the file to be moved."
    - id: destinationFileName
      type: System.String
      description: "Path of the directory into which the file should be moved."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Specifies whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The source file is not valid or does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,System.Boolean)
  id: MoveFile(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: MoveFile(String,String,Boolean)
  nameWithType: FileSystemProxy.MoveFile(String,String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(String,String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Moves a file to a new location."
  remarks: "If the target structure does not exist, it is created.       The `MoveFile` method preserves ACEs (Access Control Entries) only when moving the file within the same volume. This includes inherited ACEs, which become direct ACEs when moved (direct ACEs take precedence over inherited ACEs). If a file is moved between volumes, ACEs will not be copied.       The following table lists an examples of a task involving the `My.Computer.FileSystem.MoveFile` method.      |To|See|   |--------|---------|   |Move a file|[How to: Move a File](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#86](~/add/codesnippet/visualbasic/69eb25fa-6fa8-457b-b895-_1.vb)]  \n  \n This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#87](~/add/codesnippet/visualbasic/69eb25fa-6fa8-457b-b895-_2.vb)]"
  syntax:
    content: public void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "Path of the file to be moved."
    - id: destinationFileName
      type: System.String
      description: "Path of the directory into which the file should be moved."
    - id: overwrite
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> to overwrite existing files; otherwise <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>. Default is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The source file is not valid or does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: MoveFile(String,String,UIOption,UICancelOption)
  nameWithType: FileSystemProxy.MoveFile(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(String,String,UIOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Moves a file to a new location."
  remarks: "If the target structure does not exist, it is created.       The `MoveFile` method preserves ACEs (Access Control Entries) only when moving the file within the same volume. This includes inherited ACEs, which become direct ACEs when moved (direct ACEs take precedence over inherited ACEs). If a file is moved between volumes, ACEs will not be copied.       The following table lists an example of a task involving the `My.Computer.FileSystem.MoveFile` method.      |To|See|   |--------|---------|   |Move a file|[How to: Move a File](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#86](~/add/codesnippet/visualbasic/d3902ab8-d486-431e-8faf-_1.vb)]  \n  \n This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#87](~/add/codesnippet/visualbasic/d3902ab8-d486-431e-8faf-_2.vb)]"
  syntax:
    content: public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "Path of the file to be moved."
    - id: destinationFileName
      type: System.String
      description: "Path of the directory into which the file should be moved."
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "Specifies whether to visually track the operation&quot;s progress. Default is <xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>."
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "Specifies whether or not an exception is thrown when the user cancels the operation. Default is <xref uid=&quot;langword_csharp_UICancelOption.ThrowException&quot; name=&quot;UICancelOption.ThrowException&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The source file is not valid or does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "<code>onUserCancel</code> is set to <xref uid=&quot;langword_csharp_ThrowException&quot; name=&quot;ThrowException&quot; href=&quot;&quot;></xref>, and either the user has cancelled the operation or an unspecified I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String)
  id: OpenTextFieldParser(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: OpenTextFieldParser(String)
  nameWithType: FileSystemProxy.OpenTextFieldParser(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "The <xref uid=&quot;langword_csharp_OpenTextFieldParser&quot; name=&quot;OpenTextFieldParser&quot; href=&quot;&quot;></xref> method allows you to create a <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;></xref> object, which provides a way to easily and efficiently parse structured text files, such as logs. The <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> object can be used to read both delimited and fixed-width files."
  remarks: "The following table lists examples of tasks involving the `My.Computer.FileSystem.OpenTextFieldParser` method.      |To|See|   |--------|---------|   |Read from a delimited text file|[How to: Read From Comma-Delimited Text Files](~/add/includes/ajax-current-ext-md.md)|   |Read from a fixed-width text file|[How to: Read From Fixed-width Text Files](~/add/includes/ajax-current-ext-md.md)|   |Read from a text file with multiple formats|[How to: Read From Text Files with Multiple Formats](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens the `TextFieldParser``reader` and uses it to read from `C:\\TestFolder1\\Test1.txt`.  \n  \n [!code-vb[VbRefFile#18](~/add/codesnippet/visualbasic/5e21a8aa-3482-4e3a-9ad2-_1.vb)]"
  syntax:
    content: public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);
    parameters:
    - id: file
      type: System.String
      description: "The file to be opened with the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref>."
    return:
      type: Microsoft.VisualBasic.FileIO.TextFieldParser
      description: "<xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;></xref> to read the specified file."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: Microsoft.VisualBasic.FileIO.MalformedLineException
    commentId: T:Microsoft.VisualBasic.FileIO.MalformedLineException
    description: "A row cannot be parsed using the specified format. The exception message specifies the line causing the exception, while the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*> property is assigned the text contained in the line."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.Int32[])
  id: OpenTextFieldParser(System.String,System.Int32[])
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: OpenTextFieldParser(String,Int32[])
  nameWithType: FileSystemProxy.OpenTextFieldParser(String,Int32[])
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(String,Int32[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "The <xref uid=&quot;langword_csharp_OpenTextFieldParser&quot; name=&quot;OpenTextFieldParser&quot; href=&quot;&quot;></xref> method allows you to create a <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;></xref> object, which provides a way to easily and efficiently parse structured text files, such as logs. The <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> object can be used to read both delimited and fixed-width files."
  remarks: "The following table lists examples of tasks involving the `My.Computer.FileSystem.OpenTextFieldParser` method.      |To|See|   |--------|---------|   |Read from a delimited text file|[How to: Read From Comma-Delimited Text Files](~/add/includes/ajax-current-ext-md.md)|   |Read from a fixed-width text file|[How to: Read From Fixed-width Text Files](~/add/includes/ajax-current-ext-md.md)|   |Read from a text file with multiple formats|[How to: Read From Text Files with Multiple Formats](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens the `TextFieldParser``reader` and uses it to read from `C:\\TestFolder1\\Test1.txt`.  \n  \n [!code-vb[VbRefFile#18](~/add/codesnippet/visualbasic/3b0d773c-848f-4938-ac74-_1.vb)]"
  syntax:
    content: public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, int[] fieldWidths);
    parameters:
    - id: file
      type: System.String
      description: "The file to be opened with the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref>."
    - id: fieldWidths
      type: System.Int32[]
      description: "Widths of the fields."
    return:
      type: Microsoft.VisualBasic.FileIO.TextFieldParser
      description: "<xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;></xref> to read the specified file."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: Microsoft.VisualBasic.FileIO.MalformedLineException
    commentId: T:Microsoft.VisualBasic.FileIO.MalformedLineException
    description: "A row cannot be parsed using the specified format. The exception message specifies the line causing the exception, while the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*> property is assigned the text contained in the line."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.String[])
  id: OpenTextFieldParser(System.String,System.String[])
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: OpenTextFieldParser(String,String[])
  nameWithType: FileSystemProxy.OpenTextFieldParser(String,String[])
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(String,String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "The <xref uid=&quot;langword_csharp_OpenTextFieldParser&quot; name=&quot;OpenTextFieldParser&quot; href=&quot;&quot;></xref> method allows you to create a <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;></xref> object, which provides a way to easily and efficiently parse structured text files, such as logs. The <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> object can be used to read both delimited and fixed-width files."
  remarks: "The following table lists examples of tasks involving the `My.Computer.FileSystem.OpenTextFieldParser` method.      |To|See|   |--------|---------|   |Read from a delimited text file|[How to: Read From Comma-Delimited Text Files](~/add/includes/ajax-current-ext-md.md)|   |Read from a fixed-width text file|[How to: Read From Fixed-width Text Files](~/add/includes/ajax-current-ext-md.md)|   |Read from a text file with multiple formats|[How to: Read From Text Files with Multiple Formats](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens the `TextFieldParser``reader` and uses it to read from `C:\\TestFolder1\\Test1.txt`.  \n  \n [!code-vb[VbRefFile#18](~/add/codesnippet/visualbasic/e7a2cbe1-d56b-4ce5-b088-_1.vb)]"
  syntax:
    content: public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, string[] delimiters);
    parameters:
    - id: file
      type: System.String
      description: "The file to be opened with the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref>."
    - id: delimiters
      type: System.String[]
      description: "Delimiters for the fields."
    return:
      type: Microsoft.VisualBasic.FileIO.TextFieldParser
      description: "<xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;></xref> to read the specified file."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: Microsoft.VisualBasic.FileIO.MalformedLineException
    commentId: T:Microsoft.VisualBasic.FileIO.MalformedLineException
    description: "A row cannot be parsed using the specified format. The exception message specifies the line causing the exception, while the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*> property is assigned the text contained in the line."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String)
  id: OpenTextFileReader(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: OpenTextFileReader(String)
  nameWithType: FileSystemProxy.OpenTextFileReader(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Opens a <xref:System.IO.StreamReader> object to read from a file."
  remarks: "Only text files can be read with a <xref:System.IO.StreamReader>.       The following table lists examples of tasks involving the `My.Computer.FileSystem.OpenTextFileReader` method.      |To|See|   |--------|---------|   |Open a file with a <xref:System.IO.StreamReader>|[How to: Read Text from Files with a StreamReader](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens the file `Testfile.txt`, reads a line from it, and displays the line in a `MessageBox`.  \n  \n [!code-vb[VbRefFile#2](~/add/codesnippet/visualbasic/90cca2c4-4b9b-4b82-b049-_1.vb)]"
  syntax:
    content: public System.IO.StreamReader OpenTextFileReader (string file);
    parameters:
    - id: file
      type: System.String
      description: "File to be read."
    return:
      type: System.IO.StreamReader
      description: "<xref:System.IO.StreamReader> object to read from the file"
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The file name ends with a backslash (\\\\)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified file cannot be found."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to read from the file."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String,System.Text.Encoding)
  id: OpenTextFileReader(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: OpenTextFileReader(String,Encoding)
  nameWithType: FileSystemProxy.OpenTextFileReader(String,Encoding)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(String,Encoding)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Opens a <xref:System.IO.StreamReader> object to read from a file."
  remarks: "Only text files can be read with a <xref:System.IO.StreamReader>.       The following table lists examples of tasks involving the `My.Computer.FileSystem.OpenTextFileReader` method.      |To|See|   |--------|---------|   |Open a file with a <xref:System.IO.StreamReader>|[How to: Read Text from Files with a StreamReader](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens the file `Testfile.txt`, reads a line from it, and displays the line in a `MessageBox`.  \n  \n [!code-vb[VbRefFile#2](~/add/codesnippet/visualbasic/2b6a2b5b-b6e7-41de-a324-_1.vb)]"
  syntax:
    content: public System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);
    parameters:
    - id: file
      type: System.String
      description: "File to be read."
    - id: encoding
      type: System.Text.Encoding
      description: "The encoding to use for the file contents. Default is ASCII."
    return:
      type: System.IO.StreamReader
      description: "<xref:System.IO.StreamReader> object to read from the file"
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The file name ends with a backslash (\\\\)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified file cannot be found."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to read from the file."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean)
  id: OpenTextFileWriter(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: OpenTextFileWriter(String,Boolean)
  nameWithType: FileSystemProxy.OpenTextFileWriter(String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Opens a <xref:System.IO.StreamWriter> object to write to the specified file."
  remarks: "The `OpenTextFileWriter` method opens and initializes a stream for a file and then returns the <xref:System.IO.StreamWriter> object for that stream. You can write to the steam as many times as necessary and then close it when you are finished.      > [!NOTE] >  You must call the <xref:System.IO.StreamWriter.Close%2A> method on the <xref:System.IO.StreamWriter> object to make sure that all data is correctly written to the underlying stream.       If you are writing only a few strings to a file, it might be simpler to use the <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> method.       The following table lists an example of a task involving the `My.Computer.FileSystem.OpenTextFileWriter` method.      |To|See|   |--------|---------|   |Write text to a file with a `StreamWriter`|[How to: Write Text to Files with a StreamWriter](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens a <xref:System.IO.StreamWriter> with the `My.Computer.FileSystem.OpenTextFileWriter` method and uses it to write a string to a text file with the `WriteLine` method of the `StreamWriter` class.  \n  \n [!code-vb[VbRefFile#14](~/add/codesnippet/visualbasic/cbe9d22d-ebc5-4087-a635-_1.vb)]"
  syntax:
    content: public System.IO.StreamWriter OpenTextFileWriter (string file, bool append);
    parameters:
    - id: file
      type: System.String
      description: "File to be written to."
    - id: append
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> to append to the contents of the file; <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref> to overwrite the contents of the file. Default is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
    return:
      type: System.IO.StreamWriter
      description: "<xref:System.IO.StreamWriter> object to write to the specified file."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The file name ends with a trailing slash."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)
  id: OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: OpenTextFileWriter(String,Boolean,Encoding)
  nameWithType: FileSystemProxy.OpenTextFileWriter(String,Boolean,Encoding)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(String,Boolean,Encoding)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Opens a <xref:System.IO.StreamWriter> to write to the specified file."
  remarks: "The `OpenTextFileWriter` method opens and initializes a stream for a file and then returns the <xref:System.IO.StreamWriter> object for that stream. You can write to the steam as many times as necessary and then close it when you are finished.      > [!NOTE] >  You must call the <xref:System.IO.StreamWriter.Close%2A> method on the <xref:System.IO.StreamWriter> object to make sure that all data is correctly written to the underlying stream.       If you are writing only a few strings to a file, it might be simpler to use the <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> method.       The following table lists an example of a task involving the `My.Computer.FileSystem.OpenTextFileWriter` method.      |To|See|   |--------|---------|   |Write text to a file with a `StreamWriter`|[How to: Write Text to Files with a StreamWriter](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens a <xref:System.IO.StreamWriter> with the `My.Computer.FileSystem.OpenTextFileWriter` method and uses it to write a string to a text file with the `WriteLine` method of the `StreamWriter` class.  \n  \n [!code-vb[VbRefFile#14](~/add/codesnippet/visualbasic/829b6f81-31e4-45e8-93df-_1.vb)]"
  syntax:
    content: public System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);
    parameters:
    - id: file
      type: System.String
      description: "File to be written to."
    - id: append
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> to append to the contents in the file; <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref> to overwrite the contents of the file. Default is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
    - id: encoding
      type: System.Text.Encoding
      description: "Encoding to be used in writing to the file. Default is ASCII."
    return:
      type: System.IO.StreamWriter
      description: "<xref:System.IO.StreamWriter> object to write to the specified file."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The file name ends with a trailing slash."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes(System.String)
  id: ReadAllBytes(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: ReadAllBytes(String)
  nameWithType: FileSystemProxy.ReadAllBytes(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns the contents of a file as a byte array."
  remarks: "The `ReadAllBytes` method of the `My.Computer.FileSystem` object allows you to read from a binary file. The contents of the file are returned as a byte array.       Do not make decisions about the contents of the file based on the name of the file. For example, the file Form1.vb may not be a Visual Basic source file. Verify all inputs before using the data in your application.       The following table lists examples of tasks involving the `My.Computer.FileSystem.ReadAllBytes` method.      |To|See|   |--------|---------|   |Read from a binary file|[How to: Read From Binary Files](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads from the file `C:/Documents and Settings/selfportrait.jpg.`  \n  \n [!code-vb[VbVbcnMyFileSystem#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._93_1.vb)]"
  syntax:
    content: public byte[] ReadAllBytes (string file);
    parameters:
    - id: file
      type: System.String
      description: "File to be read."
    return:
      type: System.Byte[]
      description: "<xref uid=&quot;langword_csharp_Byte&quot; name=&quot;Byte&quot; href=&quot;&quot;></xref> array containing the contents of the file."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "There is not enough memory to write the string to buffer."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)
  id: ReadAllText(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: ReadAllText(String)
  nameWithType: FileSystemProxy.ReadAllText(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns the contents of a text file as a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>."
  remarks: "The `ReadAllText` method of the `My.Computer.FileSystem` object allows you to read from a text file. The contents of the file are returned as a string.       The file encoding can be specified if the contents of the file are in an encoding such as ASCII or UTF-8. If you are reading from a file with extended characters, you need to specify the file encoding using another overload of the ReadAllText method.       Do not make decisions about the contents of the file based on the name of the file. For example, the file Form1.vb may not be a Visual Basic source file. Verify all inputs before using the data in your application.       The following table lists examples of tasks involving the `My.Computer.FileSystem.ReadAllText` method.      |To|See|   |--------|---------|   |Read from a text file|[How to: Read from Text Files](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads the contents of `Test.txt` into a string and then displays it in a message box.  \n  \n [!code-vb[VbRefFile#8](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._42_1.vb)]  \n  \n This example reads the contents of the ASCII file `Test.txt` into a string and then displays it in a message box.  \n  \n [!code-vb[VbRefFile#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._42_2.vb)]"
  syntax:
    content: public string ReadAllText (string file);
    parameters:
    - id: file
      type: System.String
      description: "Name and path of the file to read."
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> containing the contents of the file."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "There is not enough memory to write the string to buffer."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String,System.Text.Encoding)
  id: ReadAllText(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: ReadAllText(String,Encoding)
  nameWithType: FileSystemProxy.ReadAllText(String,Encoding)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(String,Encoding)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Returns the contents of a text file as a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>."
  remarks: "The `ReadAllText` method of the `My.Computer.FileSystem` object allows you to read from a text file. The contents of the file are returned as a string.       The file encoding can be specified if the contents of the file are in an encoding such as ASCII or UTF-8. If you are reading from a file with extended characters, you need to specify the file encoding.       Do not make decisions about the contents of the file based on the name of the file. For example, the file Form1.vb may not be a Visual Basic source file. Verify all inputs before using the data in your application.       The following table lists examples of tasks involving the `My.Computer.FileSystem.ReadAllText` method.      |To|See|   |--------|---------|   |Read from a text file|[How to: Read from Text Files](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads the contents of `Test.txt` into a string and then displays it in a message box.  \n  \n [!code-vb[VbRefFile#8](~/add/codesnippet/visualbasic/0c9a40ea-b248-4e9c-850c-_1.vb)]  \n  \n This example reads the contents of the ASCII file `Test.txt` into a string and then displays it in a message box.  \n  \n [!code-vb[VbRefFile#9](~/add/codesnippet/visualbasic/0c9a40ea-b248-4e9c-850c-_2.vb)]"
  syntax:
    content: public string ReadAllText (string file, System.Text.Encoding encoding);
    parameters:
    - id: file
      type: System.String
      description: "Name and path of the file to read."
    - id: encoding
      type: System.Text.Encoding
      description: "Character encoding to use in reading the file. Default is UTF-8."
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> containing the contents of the file."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "There is not enough memory to write the string to buffer."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory(System.String,System.String)
  id: RenameDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: RenameDirectory(String,String)
  nameWithType: FileSystemProxy.RenameDirectory(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Renames a directory."
  remarks: "This method cannot be used to move a directory; use the `MoveDirectory` method to move and rename the directory."
  example:
  - "This example renames the `Test` directory to `SecondTest`.  \n  \n [!code-vb[VbVbcnMyFileSystem#13](~/add/codesnippet/visualbasic/2ed39ac4-a333-4d3c-94f5-_1.vb)]"
  syntax:
    content: public void RenameDirectory (string directory, string newName);
    parameters:
    - id: directory
      type: System.String
      description: "Path and name of directory to be renamed."
    - id: newName
      type: System.String
      description: "New name for directory."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>newName</code> contains path information."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>.       -or-       <code>newName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "There is an existing file or directory with the name specified in <code>newName</code>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds 248 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have required permission."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile(System.String,System.String)
  id: RenameFile(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: RenameFile(String,String)
  nameWithType: FileSystemProxy.RenameFile(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Renames a file."
  remarks: "This method cannot be used to move a file; use the <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile%2A> method to move and rename the file.       The following table lists an example of a task involving the `My.Computer.FileSystem.RenameFile` method.      |To|See|   |--------|---------|   |Rename a file|[How to: Rename a File](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example renames the file `Test.txt` to `SecondTest.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#1](~/add/codesnippet/visualbasic/b921ac51-10eb-406b-bf32-_1.vb)]  \n  \n Change \"`C:\\Test.txt`\" to the path and file name of the file that you want to rename."
  syntax:
    content: public void RenameFile (string file, string newName);
    parameters:
    - id: file
      type: System.String
      description: "File to be renamed."
    - id: newName
      type: System.String
      description: "New name of file."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>newName</code> contains path information or ends with a backslash (\\\\)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>.       -or-       <code>newName</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> or an empty string."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "There is an existing file or directory with the name specified in <code>newName</code>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The user does not have required permission."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories
  id: SpecialDirectories
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: SpecialDirectories
  nameWithType: FileSystemProxy.SpecialDirectories
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Gets an object that provides properties for accessing commonly referenced directories."
  remarks: ''
  example:
  - "This example returns the file path for the user's Desktop directory and displays it.  \n  \n [!code-vb[VbVbcnMyFileSystem#80](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._102_1.vb)]"
  syntax:
    content: public Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories { get; }
    return:
      type: Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy
      description: "This property returns the <xref href=&quot;Microsoft.VisualBasic.FileIO.SpecialDirectories&quot;></xref> object for the computer."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes(System.String,System.Byte[],System.Boolean)
  id: WriteAllBytes(System.String,System.Byte[],System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: WriteAllBytes(String,Byte[],Boolean)
  nameWithType: FileSystemProxy.WriteAllBytes(String,Byte[],Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes(String,Byte[],Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Writes data to a binary file."
  remarks: "If the specified path, excluding the file name, is not valid, a <xref:System.IO.DirectoryNotFoundException> exception will be thrown. If the path is valid but the file does not exist, the file is created.      > [!NOTE] >  The `WriteAllBytes` method opens a file, writes to it, and then closes it. Code that uses the `WriteAllBytes` method is simpler than code that uses a <xref:System.IO.BinaryWriter> object. However, if you are adding data to a file using a loop, a <xref:System.IO.BinaryWriter> object can provide better performance because you only have to open and close the file once.       The following table lists an example of a task involving the `My.Computer.FileSystem.WriteAllBytes` method.      |To|See|   |--------|---------|   |Write to a binary file|[How to: Write to Binary Files](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example appends the data array `CustomerData` to the file `CollectedData`.  \n  \n [!code-vb[VbVbcnMyFileSystem#50](~/add/codesnippet/visualbasic/b345f967-5fa3-438e-bb10-_1.vb)]"
  syntax:
    content: public void WriteAllBytes (string file, byte[] data, bool append);
    parameters:
    - id: file
      type: System.String
      description: "Path and name of the file to be written to."
    - id: data
      type: System.Byte[]
      description: "Data to be written to the file."
    - id: append
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> to append to the file contents; <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref> to overwrite the file contents. Default is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "There is not enough memory to write the string to buffer."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)
  id: WriteAllText(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: WriteAllText(String,String,Boolean)
  nameWithType: FileSystemProxy.WriteAllText(String,String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(String,String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Writes text to a file."
  remarks: "The UTF-8 encoding is used to write to the file. To specify a different encoding, use a different overload of the WriteAllText method.       If the specified file does not exist, it is created.       If the specified encoding does not match the existing encoding of the file, the specified coding is ignored.      > [!NOTE] >  The `WriteAllText` method opens a file, writes to it, and then closes it. Code that uses the `WriteAllText` method is simpler than code that uses a <xref:System.IO.StreamWriter> object. However, if you are adding strings to a file by using a loop, a <xref:System.IO.StreamWriter> object can provide better performance because you only have to open and close the file one time. For more information, see the <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> method.       The following table lists examples of tasks involving the `My.Computer.FileSystem.WriteAllText` method.      |To|See|   |--------|---------|   |Write text to a file|[How to: Write Text to Files](~/add/includes/ajax-current-ext-md.md)|   |Append text to a file|[How to: Append to Text Files](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example writes the line `\"This is new text to be added.\"` to the file `Test.txt`, overwriting any existing text in the file.  \n  \n [!code-vb[VbRefFile#21](~/add/codesnippet/visualbasic/b3bc6c73-a9f7-45d9-a0dd-_1.vb)]  \n  \n This example writes the names of the files in the `Documents and Settings` folder to `FileList.txt`, inserting a carriage return between each for better readability.  \n  \n [!code-vb[VbRefFile#22](~/add/codesnippet/visualbasic/b3bc6c73-a9f7-45d9-a0dd-_2.vb)]"
  syntax:
    content: public void WriteAllText (string file, string text, bool append);
    parameters:
    - id: file
      type: System.String
      description: "File to be written to."
    - id: text
      type: System.String
      description: "Text to be written to file."
    - id: append
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> to append to the contents of the file; <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref> to overwrite the contents of the file. Default is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "There is not enough memory to write the string to buffer."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)
  id: WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  langs:
  - csharp
  name: WriteAllText(String,String,Boolean,Encoding)
  nameWithType: FileSystemProxy.WriteAllText(String,String,Boolean,Encoding)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(String,String,Boolean,Encoding)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.MyServices
  summary: "Writes text to a file."
  remarks: "If the specified file does not exist, it is created.       If the specified encoding does not match the existing encoding of the file, the specified coding is ignored.      > [!NOTE] >  The `WriteAllText` method opens a file, writes to it, and then closes it. Code that uses the `WriteAllText` method is simpler than code that uses a <xref:System.IO.StreamWriter> object. However, if you are adding strings to a file by using a loop, a <xref:System.IO.StreamWriter> object can provide better performance because you only have to open and close the file one time. For more information, see the <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> method.       The following table lists examples of tasks involving the `My.Computer.FileSystem.WriteAllText` method.      |To|See|   |--------|---------|   |Write text to a file|[How to: Write Text to Files](~/add/includes/ajax-current-ext-md.md)|   |Append text to a file|[How to: Append to Text Files](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example writes the line `\"This is new text to be added.\"` to the file `Test.txt`, overwriting any existing text in the file.  \n  \n [!code-vb[VbRefFile#21](~/add/codesnippet/visualbasic/c3f4399d-52a7-439b-9ff1-_1.vb)]  \n  \n This example writes the names of the files in the `Documents and Settings` folder to `FileList.txt`, inserting a carriage return between each for better readability.  \n  \n [!code-vb[VbRefFile#22](~/add/codesnippet/visualbasic/c3f4399d-52a7-439b-9ff1-_2.vb)]"
  syntax:
    content: public void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);
    parameters:
    - id: file
      type: System.String
      description: "File to be written to."
    - id: text
      type: System.String
      description: "Text to be written to file."
    - id: append
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref> to append to the contents of the file; <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref> to overwrite the contents of the file. Default is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
    - id: encoding
      type: System.Text.Encoding
      description: "What encoding to use when writing to file. Default is UTF-8."
  overload: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The path is not valid for one of the following reasons: it is a zero-length string; it contains only white space; it contains invalid characters; or it is a device path (starts with \\\\.\\); it ends with a trailing slash.'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The file does not exist."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The file is in use by another process, or an I/O error occurs."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The path exceeds the system-defined maximum length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A file or directory name in the path contains a colon (:) or is in an invalid format."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "There is not enough memory to write the string to buffer."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The user lacks necessary permissions to view the path."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.OperationCanceledException
  isExternal: true
  name: System.OperationCanceledException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: Microsoft.VisualBasic.FileIO.MalformedLineException
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: MalformedLineException
  nameWithType: MalformedLineException
  fullName: Microsoft.VisualBasic.FileIO.MalformedLineException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CombinePath(String,String)
  nameWithType: FileSystemProxy.CombinePath(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CopyDirectory(String,String)
  nameWithType: FileSystemProxy.CopyDirectory(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(String,String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CopyDirectory(String,String,UIOption)
  nameWithType: FileSystemProxy.CopyDirectory(String,String,UIOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(String,String,UIOption)
- uid: Microsoft.VisualBasic.FileIO.UIOption
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: UIOption
  nameWithType: UIOption
  fullName: Microsoft.VisualBasic.FileIO.UIOption
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CopyDirectory(String,String,Boolean)
  nameWithType: FileSystemProxy.CopyDirectory(String,String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CopyDirectory(String,String,UIOption,UICancelOption)
  nameWithType: FileSystemProxy.CopyDirectory(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(String,String,UIOption,UICancelOption)
- uid: Microsoft.VisualBasic.FileIO.UICancelOption
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: UICancelOption
  nameWithType: UICancelOption
  fullName: Microsoft.VisualBasic.FileIO.UICancelOption
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CopyFile(String,String)
  nameWithType: FileSystemProxy.CopyFile(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(String,String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CopyFile(String,String,UIOption)
  nameWithType: FileSystemProxy.CopyFile(String,String,UIOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(String,String,UIOption)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CopyFile(String,String,Boolean)
  nameWithType: FileSystemProxy.CopyFile(String,String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(String,String,Boolean)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CopyFile(String,String,UIOption,UICancelOption)
  nameWithType: FileSystemProxy.CopyFile(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(String,String,UIOption,UICancelOption)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CreateDirectory(String)
  nameWithType: FileSystemProxy.CreateDirectory(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory(String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CurrentDirectory
  nameWithType: FileSystemProxy.CurrentDirectory
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: DeleteDirectory(String,DeleteDirectoryOption)
  nameWithType: FileSystemProxy.DeleteDirectory(String,DeleteDirectoryOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(String,DeleteDirectoryOption)
- uid: Microsoft.VisualBasic.FileIO.DeleteDirectoryOption
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: DeleteDirectoryOption
  nameWithType: DeleteDirectoryOption
  fullName: Microsoft.VisualBasic.FileIO.DeleteDirectoryOption
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: DeleteDirectory(String,UIOption,RecycleOption)
  nameWithType: FileSystemProxy.DeleteDirectory(String,UIOption,RecycleOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(String,UIOption,RecycleOption)
- uid: Microsoft.VisualBasic.FileIO.RecycleOption
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: RecycleOption
  nameWithType: RecycleOption
  fullName: Microsoft.VisualBasic.FileIO.RecycleOption
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
  nameWithType: FileSystemProxy.DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: DeleteFile(String)
  nameWithType: FileSystemProxy.DeleteFile(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: DeleteFile(String,UIOption,RecycleOption)
  nameWithType: FileSystemProxy.DeleteFile(String,UIOption,RecycleOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(String,UIOption,RecycleOption)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: DeleteFile(String,UIOption,RecycleOption,UICancelOption)
  nameWithType: FileSystemProxy.DeleteFile(String,UIOption,RecycleOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(String,UIOption,RecycleOption,UICancelOption)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: DirectoryExists(String)
  nameWithType: FileSystemProxy.DirectoryExists(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists(String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: Drives
  nameWithType: FileSystemProxy.Drives
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.DriveInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<DriveInfo>
  nameWithType: ReadOnlyCollection<DriveInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IO.DriveInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IO.DriveInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.DriveInfo
    name: DriveInfo
    nameWithType: DriveInfo
    fullName: DriveInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: FileExists(String)
  nameWithType: FileSystemProxy.FileExists(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists(String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: FindInFiles(String,String,Boolean,SearchOption)
  nameWithType: FileSystemProxy.FindInFiles(String,String,Boolean,SearchOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(String,String,Boolean,SearchOption)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<String>
  nameWithType: ReadOnlyCollection<String>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.VisualBasic.FileIO.SearchOption
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: SearchOption
  nameWithType: SearchOption
  fullName: Microsoft.VisualBasic.FileIO.SearchOption
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: FindInFiles(String,String,Boolean,SearchOption,String[])
  nameWithType: FileSystemProxy.FindInFiles(String,String,Boolean,SearchOption,String[])
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(String,String,Boolean,SearchOption,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetDirectories(String)
  nameWithType: FileSystemProxy.GetDirectories(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetDirectories(String,SearchOption,String[])
  nameWithType: FileSystemProxy.GetDirectories(String,SearchOption,String[])
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(String,SearchOption,String[])
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetDirectoryInfo(String)
  nameWithType: FileSystemProxy.GetDirectoryInfo(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo(String)
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetDriveInfo(String)
  nameWithType: FileSystemProxy.GetDriveInfo(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo(String)
- uid: System.IO.DriveInfo
  parent: System.IO
  isExternal: false
  name: DriveInfo
  nameWithType: DriveInfo
  fullName: System.IO.DriveInfo
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetFileInfo(String)
  nameWithType: FileSystemProxy.GetFileInfo(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo(String)
- uid: System.IO.FileInfo
  parent: System.IO
  isExternal: false
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetFiles(String)
  nameWithType: FileSystemProxy.GetFiles(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetFiles(String,SearchOption,String[])
  nameWithType: FileSystemProxy.GetFiles(String,SearchOption,String[])
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(String,SearchOption,String[])
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetName(String)
  nameWithType: FileSystemProxy.GetName(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName(String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetParentPath(String)
  nameWithType: FileSystemProxy.GetParentPath(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath(String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetTempFileName()
  nameWithType: FileSystemProxy.GetTempFileName()
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName()
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: MoveDirectory(String,String)
  nameWithType: FileSystemProxy.MoveDirectory(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(String,String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: MoveDirectory(String,String,UIOption)
  nameWithType: FileSystemProxy.MoveDirectory(String,String,UIOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(String,String,UIOption)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: MoveDirectory(String,String,Boolean)
  nameWithType: FileSystemProxy.MoveDirectory(String,String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(String,String,Boolean)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: MoveDirectory(String,String,UIOption,UICancelOption)
  nameWithType: FileSystemProxy.MoveDirectory(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(String,String,UIOption,UICancelOption)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: MoveFile(String,String)
  nameWithType: FileSystemProxy.MoveFile(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(String,String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: MoveFile(String,String,UIOption)
  nameWithType: FileSystemProxy.MoveFile(String,String,UIOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(String,String,UIOption)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: MoveFile(String,String,Boolean)
  nameWithType: FileSystemProxy.MoveFile(String,String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(String,String,Boolean)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: MoveFile(String,String,UIOption,UICancelOption)
  nameWithType: FileSystemProxy.MoveFile(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(String,String,UIOption,UICancelOption)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: OpenTextFieldParser(String)
  nameWithType: FileSystemProxy.OpenTextFieldParser(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(String)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: TextFieldParser
  nameWithType: TextFieldParser
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.Int32[])
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: OpenTextFieldParser(String,Int32[])
  nameWithType: FileSystemProxy.OpenTextFieldParser(String,Int32[])
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(String,Int32[])
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.String[])
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: OpenTextFieldParser(String,String[])
  nameWithType: FileSystemProxy.OpenTextFieldParser(String,String[])
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(String,String[])
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: OpenTextFileReader(String)
  nameWithType: FileSystemProxy.OpenTextFileReader(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(String)
- uid: System.IO.StreamReader
  parent: System.IO
  isExternal: true
  name: StreamReader
  nameWithType: StreamReader
  fullName: System.IO.StreamReader
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: OpenTextFileReader(String,Encoding)
  nameWithType: FileSystemProxy.OpenTextFileReader(String,Encoding)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(String,Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: OpenTextFileWriter(String,Boolean)
  nameWithType: FileSystemProxy.OpenTextFileWriter(String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(String,Boolean)
- uid: System.IO.StreamWriter
  parent: System.IO
  isExternal: true
  name: StreamWriter
  nameWithType: StreamWriter
  fullName: System.IO.StreamWriter
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: OpenTextFileWriter(String,Boolean,Encoding)
  nameWithType: FileSystemProxy.OpenTextFileWriter(String,Boolean,Encoding)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(String,Boolean,Encoding)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: ReadAllBytes(String)
  nameWithType: FileSystemProxy.ReadAllBytes(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes(String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: ReadAllText(String)
  nameWithType: FileSystemProxy.ReadAllText(String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: ReadAllText(String,Encoding)
  nameWithType: FileSystemProxy.ReadAllText(String,Encoding)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(String,Encoding)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: RenameDirectory(String,String)
  nameWithType: FileSystemProxy.RenameDirectory(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory(String,String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile(System.String,System.String)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: RenameFile(String,String)
  nameWithType: FileSystemProxy.RenameFile(String,String)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile(String,String)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: SpecialDirectories
  nameWithType: FileSystemProxy.SpecialDirectories
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories
- uid: Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy
  parent: Microsoft.VisualBasic.MyServices
  isExternal: false
  name: SpecialDirectoriesProxy
  nameWithType: SpecialDirectoriesProxy
  fullName: Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes(System.String,System.Byte[],System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: WriteAllBytes(String,Byte[],Boolean)
  nameWithType: FileSystemProxy.WriteAllBytes(String,Byte[],Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes(String,Byte[],Boolean)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: WriteAllText(String,String,Boolean)
  nameWithType: FileSystemProxy.WriteAllText(String,String,Boolean)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(String,String,Boolean)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: WriteAllText(String,String,Boolean,Encoding)
  nameWithType: FileSystemProxy.WriteAllText(String,String,Boolean,Encoding)
  fullName: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(String,String,Boolean,Encoding)
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CombinePath
  nameWithType: FileSystemProxy.CombinePath
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CopyDirectory
  nameWithType: FileSystemProxy.CopyDirectory
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CopyFile
  nameWithType: FileSystemProxy.CopyFile
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CreateDirectory
  nameWithType: FileSystemProxy.CreateDirectory
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: CurrentDirectory
  nameWithType: FileSystemProxy.CurrentDirectory
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: DeleteDirectory
  nameWithType: FileSystemProxy.DeleteDirectory
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: DeleteFile
  nameWithType: FileSystemProxy.DeleteFile
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: DirectoryExists
  nameWithType: FileSystemProxy.DirectoryExists
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: Drives
  nameWithType: FileSystemProxy.Drives
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: FileExists
  nameWithType: FileSystemProxy.FileExists
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: FindInFiles
  nameWithType: FileSystemProxy.FindInFiles
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetDirectories
  nameWithType: FileSystemProxy.GetDirectories
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetDirectoryInfo
  nameWithType: FileSystemProxy.GetDirectoryInfo
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetDriveInfo
  nameWithType: FileSystemProxy.GetDriveInfo
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetFileInfo
  nameWithType: FileSystemProxy.GetFileInfo
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetFiles
  nameWithType: FileSystemProxy.GetFiles
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetName
  nameWithType: FileSystemProxy.GetName
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetParentPath
  nameWithType: FileSystemProxy.GetParentPath
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: GetTempFileName
  nameWithType: FileSystemProxy.GetTempFileName
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: MoveDirectory
  nameWithType: FileSystemProxy.MoveDirectory
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: MoveFile
  nameWithType: FileSystemProxy.MoveFile
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: OpenTextFieldParser
  nameWithType: FileSystemProxy.OpenTextFieldParser
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: OpenTextFileReader
  nameWithType: FileSystemProxy.OpenTextFileReader
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: OpenTextFileWriter
  nameWithType: FileSystemProxy.OpenTextFileWriter
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: ReadAllBytes
  nameWithType: FileSystemProxy.ReadAllBytes
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: ReadAllText
  nameWithType: FileSystemProxy.ReadAllText
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: RenameDirectory
  nameWithType: FileSystemProxy.RenameDirectory
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: RenameFile
  nameWithType: FileSystemProxy.RenameFile
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: SpecialDirectories
  nameWithType: FileSystemProxy.SpecialDirectories
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: WriteAllBytes
  nameWithType: FileSystemProxy.WriteAllBytes
- uid: Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText*
  parent: Microsoft.VisualBasic.MyServices.FileSystemProxy
  isExternal: false
  name: WriteAllText
  nameWithType: FileSystemProxy.WriteAllText
