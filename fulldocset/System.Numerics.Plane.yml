### YamlMime:ManagedReference
items:
- uid: System.Numerics.Plane
  id: Plane
  children:
  - System.Numerics.Plane.#ctor(System.Numerics.Vector4)
  - System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)
  - System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  - System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Plane.D
  - System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)
  - System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  - System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  - System.Numerics.Plane.Equals(System.Numerics.Plane)
  - System.Numerics.Plane.Equals(System.Object)
  - System.Numerics.Plane.GetHashCode
  - System.Numerics.Plane.Normal
  - System.Numerics.Plane.Normalize(System.Numerics.Plane)
  - System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  - System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  - System.Numerics.Plane.ToString
  - System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  - System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  langs:
  - csharp
  name: Plane
  nameWithType: Plane
  fullName: System.Numerics.Plane
  type: Struct
  summary: "Representa um plane three-dimensional."
  syntax:
    content: 'public struct Plane : IEquatable<System.Numerics.Plane>'
  inheritance:
  - System.ValueType
  implements:
  - System.IEquatable<System.Numerics.Plane>
  platform:
  - net462
- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector4)
  id: '#ctor(System.Numerics.Vector4)'
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Plane(Vector4)
  nameWithType: Plane.Plane(Vector4)
  fullName: System.Numerics.Plane.Plane(Vector4)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Cria um <xref href=&quot;System.Numerics.Plane&quot;> </xref> objeto a partir de um vetor de four-dimensional especificado."
  syntax:
    content: public Plane (System.Numerics.Vector4 value);
    parameters:
    - id: value
      type: System.Numerics.Vector4
      description: "Um vetor de cujos três primeiros elementos descrevem o vetor de normal e cujos <xref href=&quot;System.Numerics.Vector4&quot;> </xref> define a distância ao longo dessa normal da origem."
  overload: System.Numerics.Plane.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)
  id: '#ctor(System.Numerics.Vector3,System.Single)'
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Plane(Vector3,Single)
  nameWithType: Plane.Plane(Vector3,Single)
  fullName: System.Numerics.Plane.Plane(Vector3,Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Cria um <xref href=&quot;System.Numerics.Plane&quot;> </xref> objeto um normal especificado e a distância juntamente normal da origem de."
  syntax:
    content: public Plane (System.Numerics.Vector3 normal, float d);
    parameters:
    - id: normal
      type: System.Numerics.Vector3
      description: "Vector do plane normal."
    - id: d
      type: System.Single
      description: "Distância do plane da origem ao longo do respetivo vetor normal."
  overload: System.Numerics.Plane.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Plane(Single,Single,Single,Single)
  nameWithType: Plane.Plane(Single,Single,Single,Single)
  fullName: System.Numerics.Plane.Plane(Single,Single,Single,Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Cria um <xref href=&quot;System.Numerics.Plane&quot;> </xref> objeto dos componentes X, Y e Z do respetivo normal e a distância da origem em que o normal."
  syntax:
    content: public Plane (float x, float y, float z, float d);
    parameters:
    - id: x
      type: System.Single
      description: "O componente de X do normal."
    - id: y
      type: System.Single
      description: "O componente de Y do normal."
    - id: z
      type: System.Single
      description: "O componente de Z do normal."
    - id: d
      type: System.Single
      description: "A distância do plane ao longo do respetivo normal da origem."
  overload: System.Numerics.Plane.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  id: CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: CreateFromVertices(Vector3,Vector3,Vector3)
  nameWithType: Plane.CreateFromVertices(Vector3,Vector3,Vector3)
  fullName: System.Numerics.Plane.CreateFromVertices(Vector3,Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Cria um <xref href=&quot;System.Numerics.Plane&quot;> </xref> objeto que contém três pontos especificados."
  syntax:
    content: public static System.Numerics.Plane CreateFromVertices (System.Numerics.Vector3 point1, System.Numerics.Vector3 point2, System.Numerics.Vector3 point3);
    parameters:
    - id: point1
      type: System.Numerics.Vector3
      description: "O primeiro ponto de definir o plane."
    - id: point2
      type: System.Numerics.Vector3
      description: "O segundo ponto de definir o plane."
    - id: point3
      type: System.Numerics.Vector3
      description: "O terceiro ponto definir o plane."
    return:
      type: System.Numerics.Plane
      description: "O plane que contém os três pontos."
  overload: System.Numerics.Plane.CreateFromVertices*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.D
  id: D
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: D
  nameWithType: Plane.D
  fullName: System.Numerics.Plane.D
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "A distância do plane ao longo do respetivo normal da origem."
  syntax:
    content: public float D;
    return:
      type: System.Single
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)
  id: Dot(System.Numerics.Plane,System.Numerics.Vector4)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Dot(Plane,Vector4)
  nameWithType: Plane.Dot(Plane,Vector4)
  fullName: System.Numerics.Plane.Dot(Plane,Vector4)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Calcula o produto de ponto de um plane e um vetor de 4 dimensional."
  syntax:
    content: public static float Dot (System.Numerics.Plane plane, System.Numerics.Vector4 value);
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "Plane."
    - id: value
      type: System.Numerics.Vector4
      description: "O vetor de four-dimensional."
    return:
      type: System.Single
      description: "O produto de ponto."
  overload: System.Numerics.Plane.Dot*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  id: DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: DotCoordinate(Plane,Vector3)
  nameWithType: Plane.DotCoordinate(Plane,Vector3)
  fullName: System.Numerics.Plane.DotCoordinate(Plane,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Devolve o produto de ponto de um vetor de three-dimensional especificado e o vetor de normal deste plane com a distância (<xref href=&quot;System.Numerics.Plane.D&quot;></xref>) valor da plane."
  syntax:
    content: public static float DotCoordinate (System.Numerics.Plane plane, System.Numerics.Vector3 value);
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "Plane."
    - id: value
      type: System.Numerics.Vector3
      description: "O vetor de 3-dimensional."
    return:
      type: System.Single
      description: "O produto de ponto."
  overload: System.Numerics.Plane.DotCoordinate*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  id: DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: DotNormal(Plane,Vector3)
  nameWithType: Plane.DotNormal(Plane,Vector3)
  fullName: System.Numerics.Plane.DotNormal(Plane,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Devolve o produto de ponto de um vetor de three-dimensional especificado e o <xref href=&quot;System.Numerics.Plane.Normal&quot;> </xref> vetor deste plane."
  syntax:
    content: public static float DotNormal (System.Numerics.Plane plane, System.Numerics.Vector3 value);
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "Plane."
    - id: value
      type: System.Numerics.Vector3
      description: "O vetor de three-dimensional."
    return:
      type: System.Single
      description: "O produto de ponto."
  overload: System.Numerics.Plane.DotNormal*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Equals(System.Numerics.Plane)
  id: Equals(System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Equals(Plane)
  nameWithType: Plane.Equals(Plane)
  fullName: System.Numerics.Plane.Equals(Plane)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Devolve um valor que indica se esta instância e o outro objeto plane são iguais."
  remarks: "Dois <xref:System.Numerics.Plane>objetos são iguais se os seus <xref:System.Numerics.Plane>e <xref:System.Numerics.Plane>campos são iguais.</xref:System.Numerics.Plane> </xref:System.Numerics.Plane> </xref:System.Numerics.Plane>"
  syntax:
    content: public bool Equals (System.Numerics.Plane other);
    parameters:
    - id: other
      type: System.Numerics.Plane
      description: "Outro plane."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os planos de planos de dois são iguais; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Numerics.Plane.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Plane.Equals(Object)
  fullName: System.Numerics.Plane.Equals(Object)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Devolve um valor que indica se esta instância e um objeto especificado são iguais."
  remarks: "A instância atual e `obj` são iguais se `obj` é um <xref:System.Numerics.Plane>objeto e os respetivos <xref:System.Numerics.Plane.Normal>e <xref:System.Numerics.Plane.D>campos são iguais.</xref:System.Numerics.Plane.D> </xref:System.Numerics.Plane.Normal> </xref:System.Numerics.Plane>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "O objeto comparar com a instância atual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a instância atual e <code> obj </code> são igual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> <xref uid=&quot;langword_csharp_&quot; name=&quot;&quot; href=&quot;&quot;> </xref>. If <code>obj</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the method returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Plane.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Plane.GetHashCode()
  fullName: System.Numerics.Plane.GetHashCode()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Devolve o código hash para esta instância."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "O código hash."
  overload: System.Numerics.Plane.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Normal
  id: Normal
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Normal
  nameWithType: Plane.Normal
  fullName: System.Numerics.Plane.Normal
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "O vetor normal do plane."
  syntax:
    content: public System.Numerics.Vector3 Normal;
    return:
      type: System.Numerics.Vector3
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Normalize(System.Numerics.Plane)
  id: Normalize(System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Normalize(Plane)
  nameWithType: Plane.Normalize(Plane)
  fullName: System.Numerics.Plane.Normalize(Plane)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Cria uma nova <xref href=&quot;System.Numerics.Plane&quot;> </xref> normalizado de objetos cuja vetor normal é vetor normal a plane de origem."
  syntax:
    content: public static System.Numerics.Plane Normalize (System.Numerics.Plane value);
    parameters:
    - id: value
      type: System.Numerics.Plane
      description: "Plane origem."
    return:
      type: System.Numerics.Plane
      description: "Plane normalizado."
  overload: System.Numerics.Plane.Normalize*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  id: op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: op_Equality(Plane,Plane)
  nameWithType: Plane.op_Equality(Plane,Plane)
  fullName: System.Numerics.Plane.op_Equality(Plane,Plane)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Devolve um valor que indica se duas planos são iguais."
  remarks: "Dois <xref:System.Numerics.Plane>objetos são iguais se os seus <xref:System.Numerics.Plane>e <xref:System.Numerics.Plane>campos são iguais.</xref:System.Numerics.Plane> </xref:System.Numerics.Plane> </xref:System.Numerics.Plane>       O método de igualdade define a operação do operador de igualdade para <xref:System.Numerics.Plane>objetos.</xref:System.Numerics.Plane>"
  syntax:
    content: public static bool op_Equality (System.Numerics.Plane value1, System.Numerics.Plane value2);
    parameters:
    - id: value1
      type: System.Numerics.Plane
      description: "O primeiro plane para comparar."
    - id: value2
      type: System.Numerics.Plane
      description: "O segundo plane para comparar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>value1</code> and <code>value2</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Plane.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  id: op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: op_Inequality(Plane,Plane)
  nameWithType: Plane.op_Inequality(Plane,Plane)
  fullName: System.Numerics.Plane.op_Inequality(Plane,Plane)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Devolve um valor que indica se duas planos não são iguais."
  remarks: "O método Inequality define a operação do operador inequality para <xref:System.Numerics.Plane>objetos.</xref:System.Numerics.Plane>"
  syntax:
    content: public static bool op_Inequality (System.Numerics.Plane value1, System.Numerics.Plane value2);
    parameters:
    - id: value1
      type: System.Numerics.Plane
      description: "O primeiro plane para comparar."
    - id: value2
      type: System.Numerics.Plane
      description: "O segundo plane para comparar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>value1</code> and <code>value2</code> are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Plane.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.ToString
  id: ToString
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: ToString()
  nameWithType: Plane.ToString()
  fullName: System.Numerics.Plane.ToString()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Devolve a representação de cadeia deste objeto plane."
  remarks: "A representação de cadeia de um <xref:System.Numerics.Plane>objeto utilizar as convenções de formatação da cultura atual para formatar os valores numéricos na cadeia devolvido.</xref:System.Numerics.Plane> Por exemplo, um <xref:System.Numerics.Plane>objeto cuja representação de cadeia formatada utilizando as convenções do idioma en-US pode aparecer como `{Normal:<1.1, 2.2, 3.3> D:4.4}`.</xref:System.Numerics.Plane>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Uma cadeia que representa esta <xref href=&quot;System.Numerics.Plane&quot;> </xref> objeto."
  overload: System.Numerics.Plane.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  id: Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Transform(Plane,Matrix4x4)
  nameWithType: Plane.Transform(Plane,Matrix4x4)
  fullName: System.Numerics.Plane.Transform(Plane,Matrix4x4)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Transforma um plane normalizado por uma matriz de 4 4."
  remarks: '`plane`já tem normalizado para que o respetivo <xref:System.Numerics.Plane>vetor é um comprimento de unidade antes deste método é denominado.</xref:System.Numerics.Plane>'
  syntax:
    content: public static System.Numerics.Plane Transform (System.Numerics.Plane plane, System.Numerics.Matrix4x4 matrix);
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "Plane normalizado para transformar."
    - id: matrix
      type: System.Numerics.Matrix4x4
      description: "A matriz de transformação a aplicar aos `plane`."
    return:
      type: System.Numerics.Plane
      description: "Plane transformado."
  overload: System.Numerics.Plane.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  id: Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Transform(Plane,Quaternion)
  nameWithType: Plane.Transform(Plane,Quaternion)
  fullName: System.Numerics.Plane.Transform(Plane,Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Transforma um plane normalizado por uma rotação Quaternion."
  remarks: '`plane`já tem normalizado para que o respetivo <xref:System.Numerics.Plane>vetor é um comprimento de unidade antes deste método é denominado.</xref:System.Numerics.Plane>'
  syntax:
    content: public static System.Numerics.Plane Transform (System.Numerics.Plane plane, System.Numerics.Quaternion rotation);
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "Plane normalizado para transformar."
    - id: rotation
      type: System.Numerics.Quaternion
      description: "A rotação de Quaternion para aplicar o plane."
    return:
      type: System.Numerics.Plane
      description: "Um novo plane que resulta da aplicação a rotação de Quaternion."
  overload: System.Numerics.Plane.Transform*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector4)
  parent: System.Numerics.Plane
  isExternal: false
  name: Plane(Vector4)
  nameWithType: Plane.Plane(Vector4)
  fullName: System.Numerics.Plane.Plane(Vector4)
- uid: System.Numerics.Vector4
  parent: System.Numerics
  isExternal: false
  name: Vector4
  nameWithType: Vector4
  fullName: System.Numerics.Vector4
- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Plane
  isExternal: false
  name: Plane(Vector3,Single)
  nameWithType: Plane.Plane(Vector3,Single)
  fullName: System.Numerics.Plane.Plane(Vector3,Single)
- uid: System.Numerics.Vector3
  parent: System.Numerics
  isExternal: false
  name: Vector3
  nameWithType: Vector3
  fullName: System.Numerics.Vector3
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  parent: System.Numerics.Plane
  isExternal: false
  name: Plane(Single,Single,Single,Single)
  nameWithType: Plane.Plane(Single,Single,Single,Single)
  fullName: System.Numerics.Plane.Plane(Single,Single,Single,Single)
- uid: System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  isExternal: false
  name: CreateFromVertices(Vector3,Vector3,Vector3)
  nameWithType: Plane.CreateFromVertices(Vector3,Vector3,Vector3)
  fullName: System.Numerics.Plane.CreateFromVertices(Vector3,Vector3,Vector3)
- uid: System.Numerics.Plane
  parent: System.Numerics
  isExternal: false
  name: Plane
  nameWithType: Plane
  fullName: System.Numerics.Plane
- uid: System.Numerics.Plane.D
  parent: System.Numerics.Plane
  isExternal: false
  name: D
  nameWithType: Plane.D
  fullName: System.Numerics.Plane.D
- uid: System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)
  parent: System.Numerics.Plane
  isExternal: false
  name: Dot(Plane,Vector4)
  nameWithType: Plane.Dot(Plane,Vector4)
  fullName: System.Numerics.Plane.Dot(Plane,Vector4)
- uid: System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  isExternal: false
  name: DotCoordinate(Plane,Vector3)
  nameWithType: Plane.DotCoordinate(Plane,Vector3)
  fullName: System.Numerics.Plane.DotCoordinate(Plane,Vector3)
- uid: System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  isExternal: false
  name: DotNormal(Plane,Vector3)
  nameWithType: Plane.DotNormal(Plane,Vector3)
  fullName: System.Numerics.Plane.DotNormal(Plane,Vector3)
- uid: System.Numerics.Plane.Equals(System.Numerics.Plane)
  parent: System.Numerics.Plane
  isExternal: false
  name: Equals(Plane)
  nameWithType: Plane.Equals(Plane)
  fullName: System.Numerics.Plane.Equals(Plane)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Numerics.Plane.Equals(System.Object)
  parent: System.Numerics.Plane
  isExternal: false
  name: Equals(Object)
  nameWithType: Plane.Equals(Object)
  fullName: System.Numerics.Plane.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Numerics.Plane.GetHashCode
  parent: System.Numerics.Plane
  isExternal: false
  name: GetHashCode()
  nameWithType: Plane.GetHashCode()
  fullName: System.Numerics.Plane.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Numerics.Plane.Normal
  parent: System.Numerics.Plane
  isExternal: false
  name: Normal
  nameWithType: Plane.Normal
  fullName: System.Numerics.Plane.Normal
- uid: System.Numerics.Plane.Normalize(System.Numerics.Plane)
  parent: System.Numerics.Plane
  isExternal: false
  name: Normalize(Plane)
  nameWithType: Plane.Normalize(Plane)
  fullName: System.Numerics.Plane.Normalize(Plane)
- uid: System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  parent: System.Numerics.Plane
  isExternal: false
  name: op_Equality(Plane,Plane)
  nameWithType: Plane.op_Equality(Plane,Plane)
  fullName: System.Numerics.Plane.op_Equality(Plane,Plane)
- uid: System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  parent: System.Numerics.Plane
  isExternal: false
  name: op_Inequality(Plane,Plane)
  nameWithType: Plane.op_Inequality(Plane,Plane)
  fullName: System.Numerics.Plane.op_Inequality(Plane,Plane)
- uid: System.Numerics.Plane.ToString
  parent: System.Numerics.Plane
  isExternal: false
  name: ToString()
  nameWithType: Plane.ToString()
  fullName: System.Numerics.Plane.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  parent: System.Numerics.Plane
  isExternal: false
  name: Transform(Plane,Matrix4x4)
  nameWithType: Plane.Transform(Plane,Matrix4x4)
  fullName: System.Numerics.Plane.Transform(Plane,Matrix4x4)
- uid: System.Numerics.Matrix4x4
  parent: System.Numerics
  isExternal: false
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: System.Numerics.Matrix4x4
- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  parent: System.Numerics.Plane
  isExternal: false
  name: Transform(Plane,Quaternion)
  nameWithType: Plane.Transform(Plane,Quaternion)
  fullName: System.Numerics.Plane.Transform(Plane,Quaternion)
- uid: System.Numerics.Quaternion
  parent: System.Numerics
  isExternal: false
  name: Quaternion
  nameWithType: Quaternion
  fullName: System.Numerics.Quaternion
- uid: System.Numerics.Plane.#ctor*
  parent: System.Numerics.Plane
  isExternal: false
  name: Plane
  nameWithType: Plane.Plane
- uid: System.Numerics.Plane.CreateFromVertices*
  parent: System.Numerics.Plane
  isExternal: false
  name: CreateFromVertices
  nameWithType: Plane.CreateFromVertices
- uid: System.Numerics.Plane.Dot*
  parent: System.Numerics.Plane
  isExternal: false
  name: Dot
  nameWithType: Plane.Dot
- uid: System.Numerics.Plane.DotCoordinate*
  parent: System.Numerics.Plane
  isExternal: false
  name: DotCoordinate
  nameWithType: Plane.DotCoordinate
- uid: System.Numerics.Plane.DotNormal*
  parent: System.Numerics.Plane
  isExternal: false
  name: DotNormal
  nameWithType: Plane.DotNormal
- uid: System.Numerics.Plane.Equals*
  parent: System.Numerics.Plane
  isExternal: false
  name: Equals
  nameWithType: Plane.Equals
- uid: System.Numerics.Plane.GetHashCode*
  parent: System.Numerics.Plane
  isExternal: false
  name: GetHashCode
  nameWithType: Plane.GetHashCode
- uid: System.Numerics.Plane.Normalize*
  parent: System.Numerics.Plane
  isExternal: false
  name: Normalize
  nameWithType: Plane.Normalize
- uid: System.Numerics.Plane.op_Equality*
  parent: System.Numerics.Plane
  isExternal: false
  name: op_Equality
  nameWithType: Plane.op_Equality
- uid: System.Numerics.Plane.op_Inequality*
  parent: System.Numerics.Plane
  isExternal: false
  name: op_Inequality
  nameWithType: Plane.op_Inequality
- uid: System.Numerics.Plane.ToString*
  parent: System.Numerics.Plane
  isExternal: false
  name: ToString
  nameWithType: Plane.ToString
- uid: System.Numerics.Plane.Transform*
  parent: System.Numerics.Plane
  isExternal: false
  name: Transform
  nameWithType: Plane.Transform
