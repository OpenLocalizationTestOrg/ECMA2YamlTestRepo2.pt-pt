### YamlMime:ManagedReference
items:
- uid: System.Numerics.Plane
  id: Plane
  children:
  - System.Numerics.Plane.#ctor(System.Numerics.Vector4)
  - System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)
  - System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  - System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Plane.D
  - System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)
  - System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  - System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  - System.Numerics.Plane.Equals(System.Numerics.Plane)
  - System.Numerics.Plane.Equals(System.Object)
  - System.Numerics.Plane.GetHashCode
  - System.Numerics.Plane.Normal
  - System.Numerics.Plane.Normalize(System.Numerics.Plane)
  - System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  - System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  - System.Numerics.Plane.ToString
  - System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  - System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  langs:
  - csharp
  name: Plane
  nameWithType: Plane
  fullName: System.Numerics.Plane
  type: Struct
  summary: "Represents a three-dimensional plane."
  syntax:
    content: 'public struct Plane : IEquatable<System.Numerics.Plane>'
  inheritance:
  - System.ValueType
  implements:
  - System.IEquatable<System.Numerics.Plane>
  platform:
  - net462
- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector4)
  id: '#ctor(System.Numerics.Vector4)'
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Plane(Vector4)
  nameWithType: Plane.Plane(Vector4)
  fullName: System.Numerics.Plane.Plane(Vector4)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Creates a <xref href=&quot;System.Numerics.Plane&quot;></xref> object from a specified four-dimensional vector."
  syntax:
    content: public Plane (System.Numerics.Vector4 value);
    parameters:
    - id: value
      type: System.Numerics.Vector4
      description: "A vector whose first three elements describe the normal vector, and whose <xref href=&quot;System.Numerics.Vector4&quot;></xref> defines the distance along that normal from the origin."
  overload: System.Numerics.Plane.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)
  id: '#ctor(System.Numerics.Vector3,System.Single)'
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Plane(Vector3,Single)
  nameWithType: Plane.Plane(Vector3,Single)
  fullName: System.Numerics.Plane.Plane(Vector3,Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Creates a <xref href=&quot;System.Numerics.Plane&quot;></xref> object from a specified normal and the distance along the normal from the origin."
  syntax:
    content: public Plane (System.Numerics.Vector3 normal, float d);
    parameters:
    - id: normal
      type: System.Numerics.Vector3
      description: "The plane&quot;s normal vector."
    - id: d
      type: System.Single
      description: "The plane&quot;s distance from the origin along its normal vector."
  overload: System.Numerics.Plane.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Plane(Single,Single,Single,Single)
  nameWithType: Plane.Plane(Single,Single,Single,Single)
  fullName: System.Numerics.Plane.Plane(Single,Single,Single,Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Creates a <xref href=&quot;System.Numerics.Plane&quot;></xref> object from the X, Y, and Z components of its normal, and its distance from the origin on that normal."
  syntax:
    content: public Plane (float x, float y, float z, float d);
    parameters:
    - id: x
      type: System.Single
      description: "The X component of the normal."
    - id: y
      type: System.Single
      description: "The Y component of the normal."
    - id: z
      type: System.Single
      description: "The Z component of the normal."
    - id: d
      type: System.Single
      description: "The distance of the plane along its normal from the origin."
  overload: System.Numerics.Plane.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  id: CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: CreateFromVertices(Vector3,Vector3,Vector3)
  nameWithType: Plane.CreateFromVertices(Vector3,Vector3,Vector3)
  fullName: System.Numerics.Plane.CreateFromVertices(Vector3,Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Creates a <xref href=&quot;System.Numerics.Plane&quot;></xref> object that contains three specified points."
  syntax:
    content: public static System.Numerics.Plane CreateFromVertices (System.Numerics.Vector3 point1, System.Numerics.Vector3 point2, System.Numerics.Vector3 point3);
    parameters:
    - id: point1
      type: System.Numerics.Vector3
      description: "The first point defining the plane."
    - id: point2
      type: System.Numerics.Vector3
      description: "The second point defining the plane."
    - id: point3
      type: System.Numerics.Vector3
      description: "The third point defining the plane."
    return:
      type: System.Numerics.Plane
      description: "The plane containing the three points."
  overload: System.Numerics.Plane.CreateFromVertices*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.D
  id: D
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: D
  nameWithType: Plane.D
  fullName: System.Numerics.Plane.D
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "The distance of the plane along its normal from the origin."
  syntax:
    content: public float D;
    return:
      type: System.Single
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)
  id: Dot(System.Numerics.Plane,System.Numerics.Vector4)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Dot(Plane,Vector4)
  nameWithType: Plane.Dot(Plane,Vector4)
  fullName: System.Numerics.Plane.Dot(Plane,Vector4)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Calculates the dot product of a plane and a 4-dimensional vector."
  syntax:
    content: public static float Dot (System.Numerics.Plane plane, System.Numerics.Vector4 value);
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "The plane."
    - id: value
      type: System.Numerics.Vector4
      description: "The four-dimensional vector."
    return:
      type: System.Single
      description: "The dot product."
  overload: System.Numerics.Plane.Dot*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  id: DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: DotCoordinate(Plane,Vector3)
  nameWithType: Plane.DotCoordinate(Plane,Vector3)
  fullName: System.Numerics.Plane.DotCoordinate(Plane,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the dot product of a specified three-dimensional vector and the normal vector of this plane plus the distance (<xref href=&quot;System.Numerics.Plane.D&quot;></xref>) value of the plane."
  syntax:
    content: public static float DotCoordinate (System.Numerics.Plane plane, System.Numerics.Vector3 value);
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "The plane."
    - id: value
      type: System.Numerics.Vector3
      description: "The 3-dimensional vector."
    return:
      type: System.Single
      description: "The dot product."
  overload: System.Numerics.Plane.DotCoordinate*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  id: DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: DotNormal(Plane,Vector3)
  nameWithType: Plane.DotNormal(Plane,Vector3)
  fullName: System.Numerics.Plane.DotNormal(Plane,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the dot product of a specified three-dimensional vector and the <xref href=&quot;System.Numerics.Plane.Normal&quot;></xref> vector of this plane."
  syntax:
    content: public static float DotNormal (System.Numerics.Plane plane, System.Numerics.Vector3 value);
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "The plane."
    - id: value
      type: System.Numerics.Vector3
      description: "The three-dimensional vector."
    return:
      type: System.Single
      description: "The dot product."
  overload: System.Numerics.Plane.DotNormal*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Equals(System.Numerics.Plane)
  id: Equals(System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Equals(Plane)
  nameWithType: Plane.Equals(Plane)
  fullName: System.Numerics.Plane.Equals(Plane)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns a value that indicates whether this instance and another plane object are equal."
  remarks: "Two <xref:System.Numerics.Plane> objects are equal if their <xref:System.Numerics.Plane> and <xref:System.Numerics.Plane> fields are equal."
  syntax:
    content: public bool Equals (System.Numerics.Plane other);
    parameters:
    - id: other
      type: System.Numerics.Plane
      description: "The other plane."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the two planes are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Plane.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Plane.Equals(Object)
  fullName: System.Numerics.Plane.Equals(Object)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns a value that indicates whether this instance and a specified object are equal."
  remarks: "The current instance and `obj` are equal if `obj` is a <xref:System.Numerics.Plane> object and their <xref:System.Numerics.Plane.Normal> and <xref:System.Numerics.Plane.D> fields are equal."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to compare with the current instance."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_&quot; name=&quot;&quot; href=&quot;&quot;></xref>. If <code>obj</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the method returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Plane.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Plane.GetHashCode()
  fullName: System.Numerics.Plane.GetHashCode()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the hash code for this instance."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "The hash code."
  overload: System.Numerics.Plane.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Normal
  id: Normal
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Normal
  nameWithType: Plane.Normal
  fullName: System.Numerics.Plane.Normal
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "The normal vector of the plane."
  syntax:
    content: public System.Numerics.Vector3 Normal;
    return:
      type: System.Numerics.Vector3
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Normalize(System.Numerics.Plane)
  id: Normalize(System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Normalize(Plane)
  nameWithType: Plane.Normalize(Plane)
  fullName: System.Numerics.Plane.Normalize(Plane)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Creates a new <xref href=&quot;System.Numerics.Plane&quot;></xref> object whose normal vector is the source plane&quot;s normal vector normalized."
  syntax:
    content: public static System.Numerics.Plane Normalize (System.Numerics.Plane value);
    parameters:
    - id: value
      type: System.Numerics.Plane
      description: "The source plane."
    return:
      type: System.Numerics.Plane
      description: "The normalized plane."
  overload: System.Numerics.Plane.Normalize*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  id: op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: op_Equality(Plane,Plane)
  nameWithType: Plane.op_Equality(Plane,Plane)
  fullName: System.Numerics.Plane.op_Equality(Plane,Plane)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns a value that indicates whether two planes are equal."
  remarks: "Two <xref:System.Numerics.Plane> objects are equal if their <xref:System.Numerics.Plane> and <xref:System.Numerics.Plane> fields are equal.       The Equality method defines the operation of the equality operator for <xref:System.Numerics.Plane> objects."
  syntax:
    content: public static bool op_Equality (System.Numerics.Plane value1, System.Numerics.Plane value2);
    parameters:
    - id: value1
      type: System.Numerics.Plane
      description: "The first plane to compare."
    - id: value2
      type: System.Numerics.Plane
      description: "The second plane to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>value1</code> and <code>value2</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Plane.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  id: op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: op_Inequality(Plane,Plane)
  nameWithType: Plane.op_Inequality(Plane,Plane)
  fullName: System.Numerics.Plane.op_Inequality(Plane,Plane)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns a value that indicates whether two planes are not equal."
  remarks: "The Inequality method defines the operation of the inequality operator for <xref:System.Numerics.Plane> objects."
  syntax:
    content: public static bool op_Inequality (System.Numerics.Plane value1, System.Numerics.Plane value2);
    parameters:
    - id: value1
      type: System.Numerics.Plane
      description: "The first plane to compare."
    - id: value2
      type: System.Numerics.Plane
      description: "The second plane to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>value1</code> and <code>value2</code> are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Plane.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.ToString
  id: ToString
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: ToString()
  nameWithType: Plane.ToString()
  fullName: System.Numerics.Plane.ToString()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the string representation of this plane object."
  remarks: "The string representation of a <xref:System.Numerics.Plane> object use the formatting conventions of the current culture to format the numeric values in the returned string. For example, a <xref:System.Numerics.Plane> object whose string representation is formatted by using the conventions of the en-US culture might appear as `{Normal:<1.1, 2.2, 3.3> D:4.4}`."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A string that represents this <xref href=&quot;System.Numerics.Plane&quot;></xref> object."
  overload: System.Numerics.Plane.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  id: Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Transform(Plane,Matrix4x4)
  nameWithType: Plane.Transform(Plane,Matrix4x4)
  fullName: System.Numerics.Plane.Transform(Plane,Matrix4x4)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Transforms a normalized plane by a 4x4 matrix."
  remarks: '`plane` must already be normalized so that its <xref:System.Numerics.Plane> vector is of unit length before this method is called.'
  syntax:
    content: public static System.Numerics.Plane Transform (System.Numerics.Plane plane, System.Numerics.Matrix4x4 matrix);
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "The normalized plane to transform."
    - id: matrix
      type: System.Numerics.Matrix4x4
      description: "The transformation matrix to apply to `plane`."
    return:
      type: System.Numerics.Plane
      description: "The transformed plane."
  overload: System.Numerics.Plane.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  id: Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  parent: System.Numerics.Plane
  langs:
  - csharp
  name: Transform(Plane,Quaternion)
  nameWithType: Plane.Transform(Plane,Quaternion)
  fullName: System.Numerics.Plane.Transform(Plane,Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Transforms a normalized plane by a Quaternion rotation."
  remarks: '`plane` must already be normalized so that its <xref:System.Numerics.Plane> vector is of unit length before this method is called.'
  syntax:
    content: public static System.Numerics.Plane Transform (System.Numerics.Plane plane, System.Numerics.Quaternion rotation);
    parameters:
    - id: plane
      type: System.Numerics.Plane
      description: "The normalized plane to transform."
    - id: rotation
      type: System.Numerics.Quaternion
      description: "The Quaternion rotation to apply to the plane."
    return:
      type: System.Numerics.Plane
      description: "A new plane that results from applying the Quaternion rotation."
  overload: System.Numerics.Plane.Transform*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector4)
  parent: System.Numerics.Plane
  isExternal: false
  name: Plane(Vector4)
  nameWithType: Plane.Plane(Vector4)
  fullName: System.Numerics.Plane.Plane(Vector4)
- uid: System.Numerics.Vector4
  parent: System.Numerics
  isExternal: false
  name: Vector4
  nameWithType: Vector4
  fullName: System.Numerics.Vector4
- uid: System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Plane
  isExternal: false
  name: Plane(Vector3,Single)
  nameWithType: Plane.Plane(Vector3,Single)
  fullName: System.Numerics.Plane.Plane(Vector3,Single)
- uid: System.Numerics.Vector3
  parent: System.Numerics
  isExternal: false
  name: Vector3
  nameWithType: Vector3
  fullName: System.Numerics.Vector3
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  parent: System.Numerics.Plane
  isExternal: false
  name: Plane(Single,Single,Single,Single)
  nameWithType: Plane.Plane(Single,Single,Single,Single)
  fullName: System.Numerics.Plane.Plane(Single,Single,Single,Single)
- uid: System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  isExternal: false
  name: CreateFromVertices(Vector3,Vector3,Vector3)
  nameWithType: Plane.CreateFromVertices(Vector3,Vector3,Vector3)
  fullName: System.Numerics.Plane.CreateFromVertices(Vector3,Vector3,Vector3)
- uid: System.Numerics.Plane
  parent: System.Numerics
  isExternal: false
  name: Plane
  nameWithType: Plane
  fullName: System.Numerics.Plane
- uid: System.Numerics.Plane.D
  parent: System.Numerics.Plane
  isExternal: false
  name: D
  nameWithType: Plane.D
  fullName: System.Numerics.Plane.D
- uid: System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)
  parent: System.Numerics.Plane
  isExternal: false
  name: Dot(Plane,Vector4)
  nameWithType: Plane.Dot(Plane,Vector4)
  fullName: System.Numerics.Plane.Dot(Plane,Vector4)
- uid: System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  isExternal: false
  name: DotCoordinate(Plane,Vector3)
  nameWithType: Plane.DotCoordinate(Plane,Vector3)
  fullName: System.Numerics.Plane.DotCoordinate(Plane,Vector3)
- uid: System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
  parent: System.Numerics.Plane
  isExternal: false
  name: DotNormal(Plane,Vector3)
  nameWithType: Plane.DotNormal(Plane,Vector3)
  fullName: System.Numerics.Plane.DotNormal(Plane,Vector3)
- uid: System.Numerics.Plane.Equals(System.Numerics.Plane)
  parent: System.Numerics.Plane
  isExternal: false
  name: Equals(Plane)
  nameWithType: Plane.Equals(Plane)
  fullName: System.Numerics.Plane.Equals(Plane)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Numerics.Plane.Equals(System.Object)
  parent: System.Numerics.Plane
  isExternal: false
  name: Equals(Object)
  nameWithType: Plane.Equals(Object)
  fullName: System.Numerics.Plane.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Numerics.Plane.GetHashCode
  parent: System.Numerics.Plane
  isExternal: false
  name: GetHashCode()
  nameWithType: Plane.GetHashCode()
  fullName: System.Numerics.Plane.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Numerics.Plane.Normal
  parent: System.Numerics.Plane
  isExternal: false
  name: Normal
  nameWithType: Plane.Normal
  fullName: System.Numerics.Plane.Normal
- uid: System.Numerics.Plane.Normalize(System.Numerics.Plane)
  parent: System.Numerics.Plane
  isExternal: false
  name: Normalize(Plane)
  nameWithType: Plane.Normalize(Plane)
  fullName: System.Numerics.Plane.Normalize(Plane)
- uid: System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)
  parent: System.Numerics.Plane
  isExternal: false
  name: op_Equality(Plane,Plane)
  nameWithType: Plane.op_Equality(Plane,Plane)
  fullName: System.Numerics.Plane.op_Equality(Plane,Plane)
- uid: System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
  parent: System.Numerics.Plane
  isExternal: false
  name: op_Inequality(Plane,Plane)
  nameWithType: Plane.op_Inequality(Plane,Plane)
  fullName: System.Numerics.Plane.op_Inequality(Plane,Plane)
- uid: System.Numerics.Plane.ToString
  parent: System.Numerics.Plane
  isExternal: false
  name: ToString()
  nameWithType: Plane.ToString()
  fullName: System.Numerics.Plane.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
  parent: System.Numerics.Plane
  isExternal: false
  name: Transform(Plane,Matrix4x4)
  nameWithType: Plane.Transform(Plane,Matrix4x4)
  fullName: System.Numerics.Plane.Transform(Plane,Matrix4x4)
- uid: System.Numerics.Matrix4x4
  parent: System.Numerics
  isExternal: false
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: System.Numerics.Matrix4x4
- uid: System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)
  parent: System.Numerics.Plane
  isExternal: false
  name: Transform(Plane,Quaternion)
  nameWithType: Plane.Transform(Plane,Quaternion)
  fullName: System.Numerics.Plane.Transform(Plane,Quaternion)
- uid: System.Numerics.Quaternion
  parent: System.Numerics
  isExternal: false
  name: Quaternion
  nameWithType: Quaternion
  fullName: System.Numerics.Quaternion
- uid: System.Numerics.Plane.#ctor*
  parent: System.Numerics.Plane
  isExternal: false
  name: Plane
  nameWithType: Plane.Plane
- uid: System.Numerics.Plane.CreateFromVertices*
  parent: System.Numerics.Plane
  isExternal: false
  name: CreateFromVertices
  nameWithType: Plane.CreateFromVertices
- uid: System.Numerics.Plane.Dot*
  parent: System.Numerics.Plane
  isExternal: false
  name: Dot
  nameWithType: Plane.Dot
- uid: System.Numerics.Plane.DotCoordinate*
  parent: System.Numerics.Plane
  isExternal: false
  name: DotCoordinate
  nameWithType: Plane.DotCoordinate
- uid: System.Numerics.Plane.DotNormal*
  parent: System.Numerics.Plane
  isExternal: false
  name: DotNormal
  nameWithType: Plane.DotNormal
- uid: System.Numerics.Plane.Equals*
  parent: System.Numerics.Plane
  isExternal: false
  name: Equals
  nameWithType: Plane.Equals
- uid: System.Numerics.Plane.GetHashCode*
  parent: System.Numerics.Plane
  isExternal: false
  name: GetHashCode
  nameWithType: Plane.GetHashCode
- uid: System.Numerics.Plane.Normalize*
  parent: System.Numerics.Plane
  isExternal: false
  name: Normalize
  nameWithType: Plane.Normalize
- uid: System.Numerics.Plane.op_Equality*
  parent: System.Numerics.Plane
  isExternal: false
  name: op_Equality
  nameWithType: Plane.op_Equality
- uid: System.Numerics.Plane.op_Inequality*
  parent: System.Numerics.Plane
  isExternal: false
  name: op_Inequality
  nameWithType: Plane.op_Inequality
- uid: System.Numerics.Plane.ToString*
  parent: System.Numerics.Plane
  isExternal: false
  name: ToString
  nameWithType: Plane.ToString
- uid: System.Numerics.Plane.Transform*
  parent: System.Numerics.Plane
  isExternal: false
  name: Transform
  nameWithType: Plane.Transform
