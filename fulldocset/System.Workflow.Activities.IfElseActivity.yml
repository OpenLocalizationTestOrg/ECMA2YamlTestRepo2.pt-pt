### YamlMime:ManagedReference
items:
- uid: System.Workflow.Activities.IfElseActivity
  id: IfElseActivity
  children:
  - System.Workflow.Activities.IfElseActivity.#ctor
  - System.Workflow.Activities.IfElseActivity.#ctor(System.String)
  - System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})
  - System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)
  - System.Workflow.Activities.IfElseActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.Activities.IfElseActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  langs:
  - csharp
  name: IfElseActivity
  nameWithType: IfElseActivity
  fullName: System.Workflow.Activities.IfElseActivity
  type: Class
  summary: "Conditionally runs one of two or more activities of type <xref href=&quot;System.Workflow.Activities.IfElseBranchActivity&quot;></xref>. This class cannot be inherited."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       This activity provides semantics similar to two `If-ElseIf` statements.       IfElseActivity contains an ordered set of <xref:System.Workflow.Activities.IfElseBranchActivity> classes and runs the first branch when the condition evaluates to `true`. The final branch is not required to have a condition, in which case it always evaluates to `true`.       A IfElseActivity can complete without having run any child activity, if no conditions are satisfied."
  example:
  - "The following code example shows how to create a new instance of the IfElseActivity class and add two <xref:System.Workflow.Activities.IfElseBranchActivity> classes to it. This code example is part of the SequentialWorkflowWithParameters SDK Sample from the SequentialWorkflow.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Sequential Workflow With Parameters](http://msdn.microsoft.com/en-us/17157f2d-8fed-4848-a386-e4efa381b66b).  \n  \n [!code-cs[wf_samples#194](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#194)]\n [!code-vb[wf_samples#194](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#194)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer(typeof(System.Workflow.Activities.IfElseDesigner), typeof(System.ComponentModel.Design.IDesigner))]

      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.Activities.IfElseToolboxItem))]

      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.IfElseActivity), "Resources.Decision.png")]

      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.IfElseValidator))]

      public sealed class IfElseActivity : System.Workflow.ComponentModel.CompositeActivity, System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>
  inheritance:
  - System.Object
  - System.Workflow.ComponentModel.DependencyObject
  - System.Workflow.ComponentModel.Activity
  - System.Workflow.ComponentModel.CompositeActivity
  implements:
  - System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>
  inheritedMembers:
  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty
  - System.Workflow.ComponentModel.Activity.Canceling
  - System.Workflow.ComponentModel.Activity.CancelingEvent
  - System.Workflow.ComponentModel.Activity.Clone
  - System.Workflow.ComponentModel.Activity.Closed
  - System.Workflow.ComponentModel.Activity.ClosedEvent
  - System.Workflow.ComponentModel.Activity.Compensating
  - System.Workflow.ComponentModel.Activity.CompensatingEvent
  - System.Workflow.ComponentModel.Activity.Description
  - System.Workflow.ComponentModel.Activity.Enabled
  - System.Workflow.ComponentModel.Activity.Executing
  - System.Workflow.ComponentModel.Activity.ExecutingEvent
  - System.Workflow.ComponentModel.Activity.ExecutionResult
  - System.Workflow.ComponentModel.Activity.ExecutionStatus
  - System.Workflow.ComponentModel.Activity.Faulting
  - System.Workflow.ComponentModel.Activity.FaultingEvent
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)
  - System.Workflow.ComponentModel.Activity.IsDynamicActivity
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.Name
  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Parent
  - System.Workflow.ComponentModel.Activity.QualifiedName
  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)
  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)
  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.StatusChanged
  - System.Workflow.ComponentModel.Activity.StatusChangedEvent
  - System.Workflow.ComponentModel.Activity.ToString
  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)
  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)
  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId
  - System.Workflow.ComponentModel.CompositeActivity.Activities
  - System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities
  - System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)
  - System.Workflow.ComponentModel.CompositeActivity.EnabledActivities
  - System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  - System.Workflow.ComponentModel.CompositeActivity.Initialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  - System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  - System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.DesignMode
  - System.Workflow.ComponentModel.DependencyObject.Dispose
  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)
  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties
  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)
  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject
  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)
  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.Site
  - System.Workflow.ComponentModel.DependencyObject.UserData
  platform:
  - net462
- uid: System.Workflow.Activities.IfElseActivity.#ctor
  id: '#ctor'
  parent: System.Workflow.Activities.IfElseActivity
  langs:
  - csharp
  name: IfElseActivity()
  nameWithType: IfElseActivity.IfElseActivity()
  fullName: System.Workflow.Activities.IfElseActivity.IfElseActivity()
  type: Constructor
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.Activities.IfElseActivity&quot;></xref> class."
  remarks: ''
  example:
  - "The following code example shows how to create a new instance of the <xref:System.Workflow.Activities.IfElseActivity> class and add two <xref:System.Workflow.Activities.IfElseBranchActivity> classes to it. This code example is part of the SequentialWorkflowWithParameters SDK sample from the SequentialWorkflow.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Sequential Workflow With Parameters](http://msdn.microsoft.com/en-us/17157f2d-8fed-4848-a386-e4efa381b66b).  \n  \n [!code-cs[wf_samples#296](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#296)]\n [!code-vb[wf_samples#296](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#296)]"
  syntax:
    content: public IfElseActivity ();
    parameters: []
  overload: System.Workflow.Activities.IfElseActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.IfElseActivity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.Activities.IfElseActivity
  langs:
  - csharp
  name: IfElseActivity(String)
  nameWithType: IfElseActivity.IfElseActivity(String)
  fullName: System.Workflow.Activities.IfElseActivity.IfElseActivity(String)
  type: Constructor
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.Activities.IfElseActivity&quot;></xref> class using the name of the activity."
  syntax:
    content: public IfElseActivity (string name);
    parameters:
    - id: name
      type: System.String
      description: "The user-defined name of the activity."
  overload: System.Workflow.Activities.IfElseActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})
  id: AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})
  parent: System.Workflow.Activities.IfElseActivity
  langs:
  - csharp
  name: AddBranch(ICollection<Activity>)
  nameWithType: IfElseActivity.AddBranch(ICollection<Activity>)
  fullName: System.Workflow.Activities.IfElseActivity.AddBranch(ICollection<Activity>)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "Adds a new branch to the <xref href=&quot;System.Workflow.Activities.IfElseActivity&quot;></xref> using a collection of new activities to add to the new branch."
  syntax:
    content: public System.Workflow.Activities.IfElseBranchActivity AddBranch (System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity> activities);
    parameters:
    - id: activities
      type: System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity}
      description: "A collection of activities to add to the new branch."
    return:
      type: System.Workflow.Activities.IfElseBranchActivity
      description: "The updated <xref href=&quot;System.Workflow.Activities.IfElseBranchActivity&quot;></xref> with the new branches."
  overload: System.Workflow.Activities.IfElseActivity.AddBranch*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)
  id: AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)
  parent: System.Workflow.Activities.IfElseActivity
  langs:
  - csharp
  name: AddBranch(ICollection<Activity>,ActivityCondition)
  nameWithType: IfElseActivity.AddBranch(ICollection<Activity>,ActivityCondition)
  fullName: System.Workflow.Activities.IfElseActivity.AddBranch(ICollection<Activity>,ActivityCondition)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "Adds a new branch to the <xref href=&quot;System.Workflow.Activities.IfElseActivity&quot;></xref> using a collection of new activities to add to the new branch."
  syntax:
    content: public System.Workflow.Activities.IfElseBranchActivity AddBranch (System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity> activities, System.Workflow.ComponentModel.ActivityCondition branchCondition);
    parameters:
    - id: activities
      type: System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity}
      description: "A collection of activities to add to the new branch."
    - id: branchCondition
      type: System.Workflow.ComponentModel.ActivityCondition
      description: "An <xref href=&quot;System.Workflow.ComponentModel.ActivityCondition&quot;></xref> that determines whether the branch should be run."
    return:
      type: System.Workflow.Activities.IfElseBranchActivity
      description: "The updated <xref href=&quot;System.Workflow.Activities.IfElseBranchActivity&quot;></xref> with the new branches."
  overload: System.Workflow.Activities.IfElseActivity.AddBranch*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.IfElseActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.IfElseActivity
  langs:
  - csharp
  name: Cancel(ActivityExecutionContext)
  nameWithType: IfElseActivity.Cancel(ActivityExecutionContext)
  fullName: System.Workflow.Activities.IfElseActivity.Cancel(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "To be added."
  overload: System.Workflow.Activities.IfElseActivity.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.IfElseActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.IfElseActivity
  langs:
  - csharp
  name: Execute(ActivityExecutionContext)
  nameWithType: IfElseActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.Activities.IfElseActivity.Execute(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "To be added."
  overload: System.Workflow.Activities.IfElseActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  id: System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  isEii: true
  parent: System.Workflow.Activities.IfElseActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  nameWithType: IfElseActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  fullName: System.Workflow.Activities.IfElseActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  syntax:
    content: void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent (object sender, System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "To be added."
    - id: e
      type: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs
      description: "To be added."
  overload: System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: System.Workflow.ComponentModel.CompositeActivity
- uid: System.Workflow.Activities.IfElseActivity.#ctor
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: IfElseActivity()
  nameWithType: IfElseActivity.IfElseActivity()
  fullName: System.Workflow.Activities.IfElseActivity.IfElseActivity()
- uid: System.Workflow.Activities.IfElseActivity.#ctor(System.String)
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: IfElseActivity(String)
  nameWithType: IfElseActivity.IfElseActivity(String)
  fullName: System.Workflow.Activities.IfElseActivity.IfElseActivity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: AddBranch(ICollection<Activity>)
  nameWithType: IfElseActivity.AddBranch(ICollection<Activity>)
  fullName: System.Workflow.Activities.IfElseActivity.AddBranch(ICollection<Activity>)
- uid: System.Workflow.Activities.IfElseBranchActivity
  parent: System.Workflow.Activities
  isExternal: false
  name: IfElseBranchActivity
  nameWithType: IfElseBranchActivity
  fullName: System.Workflow.Activities.IfElseBranchActivity
- uid: System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<Activity>
  nameWithType: ICollection<Activity>
  fullName: System.Collections.Generic.ICollection<System.Workflow.ComponentModel.Activity>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Workflow.ComponentModel.Activity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.ComponentModel.Activity
    name: Activity
    nameWithType: Activity
    fullName: Activity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: AddBranch(ICollection<Activity>,ActivityCondition)
  nameWithType: IfElseActivity.AddBranch(ICollection<Activity>,ActivityCondition)
  fullName: System.Workflow.Activities.IfElseActivity.AddBranch(ICollection<Activity>,ActivityCondition)
- uid: System.Workflow.ComponentModel.ActivityCondition
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityCondition
  nameWithType: ActivityCondition
  fullName: System.Workflow.ComponentModel.ActivityCondition
- uid: System.Workflow.Activities.IfElseActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: Cancel(ActivityExecutionContext)
  nameWithType: IfElseActivity.Cancel(ActivityExecutionContext)
  fullName: System.Workflow.Activities.IfElseActivity.Cancel(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.ActivityExecutionStatus
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatus
  nameWithType: ActivityExecutionStatus
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus
- uid: System.Workflow.ComponentModel.ActivityExecutionContext
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionContext
  nameWithType: ActivityExecutionContext
  fullName: System.Workflow.ComponentModel.ActivityExecutionContext
- uid: System.Workflow.Activities.IfElseActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: Execute(ActivityExecutionContext)
  nameWithType: IfElseActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.Activities.IfElseActivity.Execute(ActivityExecutionContext)
- uid: System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  nameWithType: IfElseActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  fullName: System.Workflow.Activities.IfElseActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatusChangedEventArgs
  nameWithType: ActivityExecutionStatusChangedEventArgs
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs
- uid: System.Workflow.Activities.IfElseActivity.#ctor*
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: IfElseActivity
  nameWithType: IfElseActivity.IfElseActivity
- uid: System.Workflow.Activities.IfElseActivity.AddBranch*
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: AddBranch
  nameWithType: IfElseActivity.AddBranch
- uid: System.Workflow.Activities.IfElseActivity.Cancel*
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: Cancel
  nameWithType: IfElseActivity.Cancel
- uid: System.Workflow.Activities.IfElseActivity.Execute*
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: Execute
  nameWithType: IfElseActivity.Execute
- uid: System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*
  parent: System.Workflow.Activities.IfElseActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent
  nameWithType: IfElseActivity.System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent
