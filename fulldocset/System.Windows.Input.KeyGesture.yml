### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyGesture
  id: KeyGesture
  children:
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  - System.Windows.Input.KeyGesture.DisplayString
  - System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  - System.Windows.Input.KeyGesture.Key
  - System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  - System.Windows.Input.KeyGesture.Modifiers
  langs:
  - csharp
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
  type: Class
  summary: "Defines a keyboard combination that can be used to invoke a command."
  remarks: "In most cases, a KeyGesture must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid KeyGesture by themselves. For example, you can create a KeyGesture by using only the F12 key, but to use the X key in a KeyGesture it must be paired with a modifier key.       In general, you can       You can use a <xref:System.Windows.Input.KeyBinding> to bind a KeyGesture to an <xref:System.Windows.Input.ICommand>, so that the command is invoked when the KeyGesture occurs.       For KeyGesture [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usages, the property that is generally set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in cases where the gesture represents both a standard key and a modifier key. You can also set the <xref:System.Windows.Input.KeyBinding.Gesture%2A> property to be just a function key, or just a modifier key combination. However, it is more common to set the <xref:System.Windows.Input.KeyBinding.Key%2A> property if the intended command binding is a function key with no modifiers, or <xref:System.Windows.Input.KeyBinding.Modifiers%2A> if the intended command binding is for modifier keys only.      <a name=&quot;xamlAttributeUsage_KeyGesture&quot;></a>    ## XAML Attribute Usage      ```   <object property=&quot;oneOrMoreModifierKeys+key&quot;/>   - or -   <object property=&quot;functionKey&quot;/>   ```      <a name=&quot;xamlValues_KeyGesture&quot;></a>    ## XAML Values    `functionKey`    <xref:System.Windows.Input.Key>       A single key value, which must be one of the function keys (F1-12) or numeric keypad keys.       `oneOrMoreModifierKeys`    One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a &quot;+&quot; character.       `key`    <xref:System.Windows.Input.Key>       A single key value."
  example:
  - "The following example shows how to bind the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command to a KeyGesture using a <xref:System.Windows.Input.KeyBinding>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]  \n  \n The following example shows how to use KeyGesture in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Note that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage does not directly declare a `<KeyGesture>` element. That object element usage is not possible because KeyGesture does not expose a public default constructor. Instead, the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage uses the typeconverter behavior to declare an entire KeyGesture inline as the `Gesture` attribute value.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))]

      public class KeyGesture : System.Windows.Input.InputGesture
  inheritance:
  - System.Object
  - System.Windows.Input.InputGesture
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref> class with the specified <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  remarks: "In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>.  The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithnomodifier)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithnomodifier)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "The key associated with this gesture."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code> is not a valid <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref> class with the specified <xref href=&quot;System.Windows.Input.Key&quot;></xref> and <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>."
  remarks: "In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>. The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "The key associated with the gesture."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "The modifier keys associated with the gesture."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code> is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code> and <code>modifiers</code> do not form a valid <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref> class with the specified <xref href=&quot;System.Windows.Input.Key&quot;></xref>, <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>, and display string."
  remarks: "The <xref:System.Windows.Input.KeyGesture.DisplayString%2A> property is set to the `displayString` parameter."
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "The key associated with the gesture."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "The modifier keys associated with the gesture."
    - id: displayString
      type: System.String
      description: "A string representation of the <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code> is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>displayString</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code> and <code>modifiers</code> do not form a valid <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.DisplayString
  id: DisplayString
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets a string representation of this <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  remarks: "If a display string was not set in the constructor, an empty string is returned.       If this property is empty, the <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> method returns a string created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A>."
  syntax:
    content: public string DisplayString { get; }
    return:
      type: System.String
      description: "The display string for this <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>. The default value is <xref:System.String.Empty>."
  overload: System.Windows.Input.KeyGesture.DisplayString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  id: GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Returns a string that can be used to display the <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  remarks: "If the display string was set by the constructor, that string is returned; otherwise, a string is created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A> with any necessary conversions being governed by the specified <xref:System.Globalization.CultureInfo> object."
  syntax:
    content: public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "The culture specific information."
    return:
      type: System.String
      description: "The string to display"
  overload: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Key
  id: Key
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets the key associated with this <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  remarks: "In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "The key associated with the gesture.  The default value is <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  overload: System.Windows.Input.KeyGesture.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  id: Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Determines whether this <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref> matches the input associated with the specified <xref href=&quot;System.Windows.Input.InputEventArgs&quot;></xref> object."
  remarks: '`targetElement` can be used to make a more specific decision on whether a command should be invoked on a specific element.'
  example:
  - "The following example shows how to test whether a <xref:System.Windows.Input.KeyGesture> matches the input associated with an instance of an <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> event handler is created that compares the event data with the <xref:System.Windows.Input.KeyGesture> by using the Matches method.  \n  \n [!code-cs[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keydownhandlerkeygesturematches)]\n [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keydownhandlerkeygesturematches)]"
  syntax:
    content: public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);
    parameters:
    - id: targetElement
      type: System.Object
      description: "The target."
    - id: inputEventArgs
      type: System.Windows.Input.InputEventArgs
      description: "The input event data to compare this gesture to."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the event data matches this <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Input.KeyGesture.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets the modifier keys associated with this <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  remarks: "In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key."
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "The modifier keys associated with the gesture. The default value is <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>."
  overload: System.Windows.Input.KeyGesture.Modifiers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputGesture
  isExternal: false
  name: System.Windows.Input.InputGesture
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Input.KeyGesture.DisplayString
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Input.KeyGesture.Key
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: InputEventArgs
  nameWithType: InputEventArgs
  fullName: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.KeyGesture.Modifiers
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
- uid: System.Windows.Input.KeyGesture.#ctor*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture.KeyGesture
- uid: System.Windows.Input.KeyGesture.DisplayString*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture
  nameWithType: KeyGesture.GetDisplayStringForCulture
- uid: System.Windows.Input.KeyGesture.Key*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches
  nameWithType: KeyGesture.Matches
- uid: System.Windows.Input.KeyGesture.Modifiers*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
