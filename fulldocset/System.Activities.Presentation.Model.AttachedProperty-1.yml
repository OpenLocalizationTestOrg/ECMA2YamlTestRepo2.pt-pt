### YamlMime:ManagedReference
items:
- uid: System.Activities.Presentation.Model.AttachedProperty`1
  id: AttachedProperty`1
  children:
  - System.Activities.Presentation.Model.AttachedProperty`1.#ctor
  - System.Activities.Presentation.Model.AttachedProperty`1.Getter
  - System.Activities.Presentation.Model.AttachedProperty`1.GetValue(System.Activities.Presentation.Model.ModelItem)
  - System.Activities.Presentation.Model.AttachedProperty`1.IsReadOnly
  - System.Activities.Presentation.Model.AttachedProperty`1.ResetValue(System.Activities.Presentation.Model.ModelItem)
  - System.Activities.Presentation.Model.AttachedProperty`1.Setter
  - System.Activities.Presentation.Model.AttachedProperty`1.SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)
  - System.Activities.Presentation.Model.AttachedProperty`1.Type
  langs:
  - csharp
  name: AttachedProperty<T>
  nameWithType: AttachedProperty<T>
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>
  type: Class
  syntax:
    content: 'public class AttachedProperty<T> : System.Activities.Presentation.Model.AttachedProperty'
    typeParameters:
    - id: T
      description: "To be added."
  inheritance:
  - System.Object
  - System.Activities.Presentation.Model.AttachedProperty
  implements: []
  inheritedMembers:
  - System.Activities.Presentation.Model.AttachedProperty.IsBrowsable
  - System.Activities.Presentation.Model.AttachedProperty.Name
  - System.Activities.Presentation.Model.AttachedProperty.NotifyPropertyChanged(System.Activities.Presentation.Model.ModelItem)
  - System.Activities.Presentation.Model.AttachedProperty.OwnerType
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty`1.#ctor
  id: '#ctor'
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  langs:
  - csharp
  name: AttachedProperty()
  nameWithType: AttachedProperty<T>.AttachedProperty()
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.AttachedProperty()
  type: Constructor
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  syntax:
    content: public AttachedProperty ();
    parameters: []
  overload: System.Activities.Presentation.Model.AttachedProperty`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty`1.Getter
  id: Getter
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  langs:
  - csharp
  name: Getter
  nameWithType: AttachedProperty<T>.Getter
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.Getter
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  syntax:
    content: public Func<System.Activities.Presentation.Model.ModelItem,T> Getter { get; set; }
    return:
      type: System.Func{System.Activities.Presentation.Model.ModelItem,T}
      description: "To be added."
  overload: System.Activities.Presentation.Model.AttachedProperty`1.Getter*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty`1.GetValue(System.Activities.Presentation.Model.ModelItem)
  id: GetValue(System.Activities.Presentation.Model.ModelItem)
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  langs:
  - csharp
  name: GetValue(ModelItem)
  nameWithType: AttachedProperty<T>.GetValue(ModelItem)
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.GetValue(ModelItem)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  syntax:
    content: public override object GetValue (System.Activities.Presentation.Model.ModelItem modelItem);
    parameters:
    - id: modelItem
      type: System.Activities.Presentation.Model.ModelItem
      description: "To be added."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Activities.Presentation.Model.AttachedProperty`1.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty`1.IsReadOnly
  id: IsReadOnly
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: AttachedProperty<T>.IsReadOnly
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.IsReadOnly
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  syntax:
    content: public override bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Activities.Presentation.Model.AttachedProperty`1.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty`1.ResetValue(System.Activities.Presentation.Model.ModelItem)
  id: ResetValue(System.Activities.Presentation.Model.ModelItem)
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  langs:
  - csharp
  name: ResetValue(ModelItem)
  nameWithType: AttachedProperty<T>.ResetValue(ModelItem)
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.ResetValue(ModelItem)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  syntax:
    content: public override void ResetValue (System.Activities.Presentation.Model.ModelItem modelItem);
    parameters:
    - id: modelItem
      type: System.Activities.Presentation.Model.ModelItem
      description: "To be added."
  overload: System.Activities.Presentation.Model.AttachedProperty`1.ResetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty`1.Setter
  id: Setter
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  langs:
  - csharp
  name: Setter
  nameWithType: AttachedProperty<T>.Setter
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.Setter
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  syntax:
    content: public Action<System.Activities.Presentation.Model.ModelItem,T> Setter { get; set; }
    return:
      type: System.Action{System.Activities.Presentation.Model.ModelItem,T}
      description: "To be added."
  overload: System.Activities.Presentation.Model.AttachedProperty`1.Setter*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty`1.SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)
  id: SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  langs:
  - csharp
  name: SetValue(ModelItem,Object)
  nameWithType: AttachedProperty<T>.SetValue(ModelItem,Object)
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.SetValue(ModelItem,Object)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  syntax:
    content: public override void SetValue (System.Activities.Presentation.Model.ModelItem modelItem, object Value);
    parameters:
    - id: modelItem
      type: System.Activities.Presentation.Model.ModelItem
      description: "To be added."
    - id: Value
      type: System.Object
      description: "To be added."
  overload: System.Activities.Presentation.Model.AttachedProperty`1.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.AttachedProperty`1.Type
  id: Type
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  langs:
  - csharp
  name: Type
  nameWithType: AttachedProperty<T>.Type
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.Type
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  syntax:
    content: public override Type Type { get; }
    return:
      type: System.Type
      description: "To be added."
  overload: System.Activities.Presentation.Model.AttachedProperty`1.Type*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.Presentation.Model.AttachedProperty
  isExternal: false
  name: System.Activities.Presentation.Model.AttachedProperty
- uid: System.Activities.Presentation.Model.AttachedProperty`1.#ctor
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: AttachedProperty()
  nameWithType: AttachedProperty<T>.AttachedProperty()
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.AttachedProperty()
- uid: System.Activities.Presentation.Model.AttachedProperty`1.Getter
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: Getter
  nameWithType: AttachedProperty<T>.Getter
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.Getter
- uid: System.Func{System.Activities.Presentation.Model.ModelItem,T}
  parent: System
  isExternal: true
  name: Func<ModelItem,T>
  nameWithType: Func<ModelItem,T>
  fullName: System.Func<System.Activities.Presentation.Model.ModelItem,T>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Activities.Presentation.Model.ModelItem,T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Presentation.Model.ModelItem
    name: ModelItem
    nameWithType: ModelItem
    fullName: ModelItem
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Presentation.Model.AttachedProperty`1.GetValue(System.Activities.Presentation.Model.ModelItem)
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: GetValue(ModelItem)
  nameWithType: AttachedProperty<T>.GetValue(ModelItem)
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.GetValue(ModelItem)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Activities.Presentation.Model.AttachedProperty`1.IsReadOnly
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: IsReadOnly
  nameWithType: AttachedProperty<T>.IsReadOnly
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.Presentation.Model.AttachedProperty`1.ResetValue(System.Activities.Presentation.Model.ModelItem)
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: ResetValue(ModelItem)
  nameWithType: AttachedProperty<T>.ResetValue(ModelItem)
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.ResetValue(ModelItem)
- uid: System.Activities.Presentation.Model.AttachedProperty`1.Setter
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: Setter
  nameWithType: AttachedProperty<T>.Setter
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.Setter
- uid: System.Action{System.Activities.Presentation.Model.ModelItem,T}
  parent: System
  isExternal: true
  name: Action<ModelItem,T>
  nameWithType: Action<ModelItem,T>
  fullName: System.Action<System.Activities.Presentation.Model.ModelItem,T>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: Action<System.Activities.Presentation.Model.ModelItem,T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Presentation.Model.ModelItem
    name: ModelItem
    nameWithType: ModelItem
    fullName: ModelItem
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Presentation.Model.AttachedProperty`1.SetValue(System.Activities.Presentation.Model.ModelItem,System.Object)
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: SetValue(ModelItem,Object)
  nameWithType: AttachedProperty<T>.SetValue(ModelItem,Object)
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.SetValue(ModelItem,Object)
- uid: System.Activities.Presentation.Model.AttachedProperty`1.Type
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: Type
  nameWithType: AttachedProperty<T>.Type
  fullName: System.Activities.Presentation.Model.AttachedProperty<T>.Type
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Activities.Presentation.Model.AttachedProperty`1.#ctor*
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: AttachedProperty<T>
  nameWithType: AttachedProperty<T>.AttachedProperty<T>
- uid: System.Activities.Presentation.Model.AttachedProperty`1.Getter*
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: Getter
  nameWithType: AttachedProperty<T>.Getter
- uid: System.Activities.Presentation.Model.AttachedProperty`1.GetValue*
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: GetValue
  nameWithType: AttachedProperty<T>.GetValue
- uid: System.Activities.Presentation.Model.AttachedProperty`1.IsReadOnly*
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: IsReadOnly
  nameWithType: AttachedProperty<T>.IsReadOnly
- uid: System.Activities.Presentation.Model.AttachedProperty`1.ResetValue*
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: ResetValue
  nameWithType: AttachedProperty<T>.ResetValue
- uid: System.Activities.Presentation.Model.AttachedProperty`1.Setter*
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: Setter
  nameWithType: AttachedProperty<T>.Setter
- uid: System.Activities.Presentation.Model.AttachedProperty`1.SetValue*
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: SetValue
  nameWithType: AttachedProperty<T>.SetValue
- uid: System.Activities.Presentation.Model.AttachedProperty`1.Type*
  parent: System.Activities.Presentation.Model.AttachedProperty`1
  isExternal: false
  name: Type
  nameWithType: AttachedProperty<T>.Type
