### YamlMime:ManagedReference
items:
- uid: System.Collections.Hashtable
  id: Hashtable
  children:
  - System.Collections.Hashtable.#ctor
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  - System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  - System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  - System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.Add(System.Object,System.Object)
  - System.Collections.Hashtable.Clear
  - System.Collections.Hashtable.Clone
  - System.Collections.Hashtable.comparer
  - System.Collections.Hashtable.Contains(System.Object)
  - System.Collections.Hashtable.ContainsKey(System.Object)
  - System.Collections.Hashtable.ContainsValue(System.Object)
  - System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  - System.Collections.Hashtable.Count
  - System.Collections.Hashtable.EqualityComparer
  - System.Collections.Hashtable.GetEnumerator
  - System.Collections.Hashtable.GetHash(System.Object)
  - System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Hashtable.hcp
  - System.Collections.Hashtable.IsFixedSize
  - System.Collections.Hashtable.IsReadOnly
  - System.Collections.Hashtable.IsSynchronized
  - System.Collections.Hashtable.Item(System.Object)
  - System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  - System.Collections.Hashtable.Keys
  - System.Collections.Hashtable.OnDeserialization(System.Object)
  - System.Collections.Hashtable.Remove(System.Object)
  - System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  - System.Collections.Hashtable.SyncRoot
  - System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Hashtable.Values
  langs:
  - csharp
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
  type: Class
  summary: "Representa uma coleção de pares chave/valor que se encontram organizados a com base no código hash da chave.       Para procurar o código de origem do .NET Framework para este tipo, consulte o [referência origem](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)."
  remarks: "> [!NOTE]> Para ver o código de origem do .NET Framework para este tipo, consulte o [referência origem](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd). Pode percorrer o código de origem online, transfira a referência para visualização offline e siga os passos as origens (incluindo correções de erros e atualizações) durante a depuração; consulte [instruções](http://referencesource.microsoft.com/).       Cada elemento é um par chave/valor armazenado num <xref:System.Collections.DictionaryEntry>objeto.</xref:System.Collections.DictionaryEntry> Não pode ser uma chave `null`, mas pode ser um valor.       Os objectos utilizados como chaves por uma tabela hash são necessários para substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>método (ou o <xref:System.Collections.IHashCodeProvider>interface) e o <xref:System.Object.Equals%2A?displayProperty=fullName>método (ou o <xref:System.Collections.IComparer>interface).</xref:System.Collections.IComparer> </xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Collections.IHashCodeProvider> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> A implementação de métodos e interfaces deve processar sensibilidade às maiúsculas e minúsculas da mesma forma; caso contrário, a tabela hash poderá comportam-se incorretamente. Por exemplo, quando criar uma tabela hash, tem de utilizar o <xref:System.Collections.CaseInsensitiveHashCodeProvider>classe (ou qualquer sensível <xref:System.Collections.IHashCodeProvider>implementação) com o <xref:System.Collections.CaseInsensitiveComparer>classe (ou qualquer sensível <xref:System.Collections.IComparer>implementação).</xref:System.Collections.IComparer> </xref:System.Collections.CaseInsensitiveComparer> </xref:System.Collections.IHashCodeProvider> </xref:System.Collections.CaseInsensitiveHashCodeProvider>       Além disso, estes métodos tem produzir os resultados da mesmos ao chamar com os mesmos parâmetros enquanto a chave existe na tabela hash de. Uma alternativa consiste em utilizar um construtor de tabela hash com uma <xref:System.Collections.IEqualityComparer>parâmetro.</xref:System.Collections.IEqualityComparer> Se a chave igualdade foram simplesmente igualdade de referências, a implementação herdada de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>seria suffice.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Objetos da chave tem de ser imutáveis, desde que são utilizados como chaves na tabela hash de.       Quando é adicionado um elemento na tabela hash, o elemento é colocado num registo com base no código hash da chave. Pesquisas subsequentes da chave de utilizam o código hash da chave para procurar apenas um registo específico, assim reduzir substancialmente o número de comparações de chaves necessários para localizar um elemento.       O factor de carregamento de uma tabela hash determina o rácio máximo de elementos registos. Fatores de carga menores causam vezes mais rápidas médio pesquisa, mas utiliza o consumo de memória de aumento. O factor de carregamento predefinido de 1.0 geralmente fornece o melhor equilíbrio entre velocidade e tamanho. Também pode ser especificado um fator de diferentes de carga, quando é criada a tabela hash.       Elementos são adicionadas a uma tabela hash, aumenta o factor de carregamento real da tabela hash. Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos na tabela hash de automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos de tabela hash.       Cada objeto de chave na tabela hash de tem de fornecer a sua própria função de hash, que pode ser acedida ao chamar <xref:System.Collections.Hashtable.GetHash%2A>.</xref:System.Collections.Hashtable.GetHash%2A> No entanto, de qualquer objeto implementar <xref:System.Collections.IHashCodeProvider>podem ser transmitidos para o construtor de tabela hash e essa função de hash é utilizada para todos os objetos na tabela.</xref:System.Collections.IHashCodeProvider>       A capacidade de uma tabela hash é o número de elementos que pode conter a tabela hash. Elementos são adicionadas a uma tabela hash, a capacidade é aumentada automaticamente conforme necessário, através da reatribuição.       Para objetos de tabela hash muito grandes, pode aumentar a capacidade máxima para 2 mil milhões de elementos num sistema de 64 bits, definindo o `enabled` atributo do elemento de configuração para `true` no ambiente de tempo de execução.       O `foreach` declaração do Estado de linguagem c# (`For Each` no Visual Basic) devolve um objeto do tipo de elementos na colecção. Uma vez que cada elemento da tabela hash de um par chave/valor, o tipo de elemento não é o tipo de chave ou o tipo do valor. Em vez disso, o tipo de elemento é <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Por exemplo: [!code-cpp [System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)][!code-cs[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/csharp/t-system.collections.has_1.cs)][!code-vb[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb) ] o `foreach` instrução é um wrapper em torno do enumerador, que apenas lhe permite ler, escrever não à coleção.           Uma vez ao serializar e anular a serialização de um enumerador para uma tabela hash pode fazer com que os elementos ficam reordenados, não é possível continuar a enumeração sem chamar o <xref:System.Collections.IEnumerator.Reset%2A>método.</xref:System.Collections.IEnumerator.Reset%2A>      > [!NOTE] > Porque podem ser herdadas as chaves e alterar o respetivo comportamento, os respetivos exclusividade absoluta não pode ser garantida pelo comparações utilizando o <xref:System.Type.Equals%2A>método.</xref:System.Type.Equals%2A>"
  example:
  - "The following example shows how to create, initialize and perform various functions to a Hashtable and how to print out its keys and values.  \n  \n [!code-cpp[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/cpp/t-system.collections.has_2.cpp)]\n [!code-cs[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/csharp/t-system.collections.has_2.cs)]\n [!code-vb[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/visualbasic/t-system.collections.has_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Hashtable/HashtableDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class Hashtable : ICloneable, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor
  id: '#ctor'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable()
  nameWithType: Hashtable.Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma instância nova, vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe com capacidade inicial predefinida, fator, o fornecedor de código hash e o comparador de carga."
  remarks: "Capacidade de uma tabela hash é utilizada para calcular o número ideal de registos de tabela hash com base no factor de carregamento. Capacidade é aumentada automaticamente conforme necessário.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Este construtor é uma operação de O(1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_4_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_4_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_4_1.vb)]"
  syntax:
    content: public Hashtable ();
    parameters: []
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary)
  nameWithType: Hashtable.Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe ao copiar os elementos de dicionário especificado para o novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. A nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e utiliza o factor de carregamento predefinido, o fornecedor de código hash e comparação."
  remarks: "A capacidade inicial está definida para o número de elementos no dicionário de origem. A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Os elementos da nova <xref:System.Collections.Hashtable>são ordenados pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é uma Nã (`n`) operação, onde `n` é o número de elementos a `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.has_1_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.has_1_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.has_1_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto para copiar para uma nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma instância nova, vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe utilizando a capacidade inicial predefinido e carregar factor e especificado <xref:System.Collections.IEqualityComparer>objeto.</xref:System.Collections.IEqualityComparer>"
  remarks: "Capacidade de uma tabela hash é utilizada para calcular o número ideal de registos de tabela hash com base no factor de carregamento. Capacidade é aumentada automaticamente conforme necessário.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O <xref:System.Collections.IEqualityComparer>objeto inclui o fornecedor de código hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é utilizada no <xref:System.Collections.Hashtable>construtor, os objectos utilizados como chaves no <xref:System.Collections.Hashtable>objeto não são necessários para substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O <xref:System.Collections.IEqualityComparer>permite cenários, como efetuar pesquisas com cadeias sensível.</xref:System.Collections.IEqualityComparer>       Este construtor é uma operação de O(1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_5_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_5_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_5_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>objeto que define o fornecedor de código hash e o comparador para utilizar com o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IEqualityComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o fornecedor predefinido de código hash e o comparador predefinido. O fornecedor de código de hash predefinido é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e o comparador predefinido é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32)
  nameWithType: Hashtable.Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma instância nova, vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe com capacidade inicial especificada e o factor de carregamento predefinido, o fornecedor de código hash e comparação."
  remarks: "Especificar a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Este construtor é uma Nã (`n`) operação, onde `n` é `capacity`."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.has_2_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.has_2_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.has_2_1.vb)]"
  syntax:
    content: public Hashtable (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto inicialmente pode conter."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe ao copiar os elementos de dicionário especificado para um novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. A nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e utiliza o factor de carregamento predefinido e especificado <xref:System.Collections.IEqualityComparer>objeto.</xref:System.Collections.IEqualityComparer>"
  remarks: "A capacidade inicial está definida para o número de elementos no dicionário de origem. A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O <xref:System.Collections.IEqualityComparer>objeto inclui o fornecedor de código hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é utilizada no <xref:System.Collections.Hashtable>construtor, os objectos utilizados como chaves no <xref:System.Collections.Hashtable>objeto não são necessários para substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O <xref:System.Collections.IEqualityComparer>permite cenários, como efetuar pesquisas com cadeias sensível.</xref:System.Collections.IEqualityComparer>       Os elementos da nova <xref:System.Collections.Hashtable>são ordenados pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é uma Nã (`n`) operação, onde `n` é o número de elementos a `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/81cd87de-02b7-42cc-8fdd-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/81cd87de-02b7-42cc-8fdd-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/81cd87de-02b7-42cc-8fdd-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto para copiar para uma nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>objeto que define o fornecedor de código hash e o comparador para utilizar com o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o fornecedor predefinido de código hash e o comparador predefinido. O fornecedor de código de hash predefinido é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e o comparador predefinido é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  id: '#ctor(System.Collections.IDictionary,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single)
  nameWithType: Hashtable.Hashtable(IDictionary,Single)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe ao copiar os elementos de dicionário especificado para o novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. A nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e utiliza o fator de carga especificado e o fornecedor de código de hash predefinido e comparação."
  remarks: "A capacidade inicial está definida para o número de elementos no dicionário de origem. A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento. Factor de carregamento de 1.0 é o melhor equilíbrio entre velocidade e tamanho.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Os elementos da nova <xref:System.Collections.Hashtable>são ordenados pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é uma Nã (`n`) operação, onde `n` é o número de elementos a `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/fb1cfbc8-7454-4619-a6e7-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/fb1cfbc8-7454-4619-a6e7-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/fb1cfbc8-7454-4619-a6e7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto para copiar para uma nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo de 0.1 através de 1.0 é multiplicado pelo valor predefinido que fornece o melhor desempenho. O resultado é o rácio máximo de elementos registos."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>é menor que 0.1.       - ou - <code>loadFactor</code> é superior a 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma instância nova, vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe utilizando a capacidade inicial predefinido e carregar factor e o fornecedor de código hash especificado e comparação."
  remarks: "Capacidade de uma tabela hash é utilizada para calcular o número ideal de registos de tabela hash com base no factor de carregamento. Capacidade é aumentada automaticamente conforme necessário.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O fornecedor de código personalizado hash e o comparador personalizado ativar cenários, como o fazer pesquisas com cadeias sensível.       Este construtor é uma operação de O(1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/1ff65986-0234-4702-94b7-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/1ff65986-0234-4702-94b7-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/1ff65986-0234-4702-94b7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "O <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> os códigos de objeto que fornece o hash para todas as chaves no <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o fornecedor de código de hash predefinido, que é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>objeto a utilizar para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o comparador predefinido, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma instância nova, vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe utilizando a capacidade inicial especificada e <xref:System.Collections.IEqualityComparer>e o factor de carregamento predefinido.</xref:System.Collections.IEqualityComparer>"
  remarks: "Especificar a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O <xref:System.Collections.IEqualityComparer>objeto inclui o fornecedor de código hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é utilizada no <xref:System.Collections.Hashtable>construtor, os objectos utilizados como chaves no <xref:System.Collections.Hashtable>não são necessários para substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O <xref:System.Collections.IEqualityComparer>permite cenários, como efetuar pesquisas com cadeias sensível.</xref:System.Collections.IEqualityComparer>       Este construtor é uma Nã (`n`) operação, onde `n` é o `capacity` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/5067e9ac-cd98-4da8-9418-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/5067e9ac-cd98-4da8-9418-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/5067e9ac-cd98-4da8-9418-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto inicialmente pode conter."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>objeto que define o fornecedor de código hash e o comparador para utilizar com o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o fornecedor predefinido de código hash e o comparador predefinido. O fornecedor de código de hash predefinido é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e o comparador predefinido é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  id: '#ctor(System.Int32,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single)
  nameWithType: Hashtable.Hashtable(Int32,Single)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma instância nova, vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe utilizando a capacidade inicial especificada e carregar factor e o fornecedor de código de hash predefinido e comparação."
  remarks: "Especificar a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento. Factor de carregamento de 1.0 é o melhor equilíbrio entre velocidade e tamanho.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Este construtor é uma Nã (`n`) operação, onde `n` é o `capacity` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/m-system.collections.has_8_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/m-system.collections.has_8_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/m-system.collections.has_8_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto inicialmente pode conter."
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo de 0.1 através de 1.0 é multiplicado pelo valor predefinido que fornece o melhor desempenho. O resultado é o rácio máximo de elementos registos."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero.       - ou - <code>loadFactor</code> é inferior ao 0.1.       - ou - <code>loadFactor</code> é superior a 1.0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>capacity</code>está a causar uma capacidade excedida."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma instância nova, vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> uma classe que seja serializável utilizando especificado <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> e <xref:System.Runtime.Serialization.StreamingContext>objetos.</xref:System.Runtime.Serialization.StreamingContext>"
  remarks: "Capacidade de uma tabela hash é utilizada para calcular o número ideal de registos de tabela hash com base no factor de carregamento. Capacidade é aumentada automaticamente conforme necessário.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Este construtor é uma Nã (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Uma vez que serializar e anular a serialização de um enumerador de um <xref:System.Collections.Hashtable>pode fazer com que os elementos ficam reordenados, não é possível continuar a enumeração sem chamar o <xref:System.Collections.IEnumerator.Reset%2A>método.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  syntax:
    content: protected Hashtable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objeto que contém as informações necessárias para serializar o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A <xref:System.Runtime.Serialization.StreamingContext>objeto que contém a origem e de destino de fluxo serializado associado a <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe ao copiar os elementos de dicionário especificado para o novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. A nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e utiliza o factor de carregamento predefinido e o fornecedor de código hash especificado e comparação. Esta API está obsoleta. Para uma alternativa, consulte &lt;xref:System.Collections.Hashtable.%23ctor%2A&gt;."
  remarks: "A capacidade inicial está definida para o número de elementos no dicionário de origem. A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O fornecedor de código personalizado hash e o comparador personalizado ativar cenários, como o fazer pesquisas com cadeias sensível.       Os elementos da nova <xref:System.Collections.Hashtable>são ordenados pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é uma Nã (`n`) operação, onde `n` é o número de elementos a `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/9a30e378-7c34-4854-b12f-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/9a30e378-7c34-4854-b12f-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/9a30e378-7c34-4854-b12f-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto para copiar para uma nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "O <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> os códigos de objeto que fornece o hash para todas as chaves no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o fornecedor de código de hash predefinido, que é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>objeto a utilizar para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o comparador predefinido, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe ao copiar os elementos de dicionário especificado para o novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. A nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e utiliza o fator de carga especificado e <xref:System.Collections.IEqualityComparer>objeto.</xref:System.Collections.IEqualityComparer>"
  remarks: "A capacidade inicial está definida para o número de elementos no dicionário de origem. A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento. Factor de carregamento de 1.0 é o melhor equilíbrio entre velocidade e tamanho.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O <xref:System.Collections.IEqualityComparer>objeto inclui o fornecedor de código hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é utilizada no <xref:System.Collections.Hashtable>construtor, os objectos utilizados como chaves no <xref:System.Collections.Hashtable>objeto não são necessários para substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O <xref:System.Collections.IEqualityComparer>permite cenários, como efetuar pesquisas com cadeias sensível.</xref:System.Collections.IEqualityComparer>       Os elementos da nova <xref:System.Collections.Hashtable>são ordenados pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é uma Nã (`n`) operação, onde `n` é o número de elementos a `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/a92f83be-9de4-470a-8cbb-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/a92f83be-9de4-470a-8cbb-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/a92f83be-9de4-470a-8cbb-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto para copiar para uma nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo de 0.1 através de 1.0 é multiplicado pelo valor predefinido que fornece o melhor desempenho. O resultado é o rácio máximo de elementos registos."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>objeto que define o fornecedor de código hash e o comparador para utilizar com o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o fornecedor predefinido de código hash e o comparador predefinido. O fornecedor de código de hash predefinido é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e o comparador predefinido é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>é menor que 0.1.       - ou - <code>loadFactor</code> é superior a 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma instância nova, vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> utilizando a capacidade inicial especificada, o fornecedor de código hash, comparador e o factor de carregamento predefinido de classe."
  remarks: "Especificar a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O fornecedor de código personalizado hash e o comparador personalizado ativar cenários, como o fazer pesquisas com cadeias sensível.       Este construtor é uma Nã (`n`) operação, onde `n` é o `capacity` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/2154dba0-3cc6-41f7-aa9b-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/2154dba0-3cc6-41f7-aa9b-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/2154dba0-3cc6-41f7-aa9b-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto inicialmente pode conter."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "O <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> os códigos de objeto que fornece o hash para todas as chaves no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o fornecedor de código de hash predefinido, que é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>objeto a utilizar para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o comparador predefinido, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma instância nova, vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> utilizando a capacidade inicial especificada, o factor de carregamento de classe e <xref:System.Collections.IEqualityComparer>objeto.</xref:System.Collections.IEqualityComparer>"
  remarks: "Especificar a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento. Factor de carregamento de 1.0 é o melhor equilíbrio entre velocidade e tamanho.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O <xref:System.Collections.IEqualityComparer>objeto inclui o fornecedor de código hash e o comparador.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é utilizada no <xref:System.Collections.Hashtable>construtor, os objectos utilizados como chaves no <xref:System.Collections.Hashtable>não são necessários para substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O <xref:System.Collections.IEqualityComparer>permite cenários, como efetuar pesquisas com cadeias sensível.</xref:System.Collections.IEqualityComparer>       Este construtor é uma Nã (`n`) operação, onde `n` é o `capacity` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/30b60c47-7bce-44a2-8d17-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/30b60c47-7bce-44a2-8d17-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/30b60c47-7bce-44a2-8d17-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto inicialmente pode conter."
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo de 0.1 através de 1.0 é multiplicado pelo valor predefinido que fornece o melhor desempenho. O resultado é o rácio máximo de elementos registos."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>objeto que define o fornecedor de código hash e o comparador para utilizar com o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o fornecedor predefinido de código hash e o comparador predefinido. O fornecedor de código de hash predefinido é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e o comparador predefinido é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero.       - ou - <code>loadFactor</code> é inferior ao 0.1.       - ou - <code>loadFactor</code> é superior a 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe ao copiar os elementos de dicionário especificado para o novo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto. A nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto tem uma capacidade inicial igual ao número de elementos copiados e utiliza o factor de carregamento especificado, o fornecedor de código hash e comparação."
  remarks: "A capacidade inicial está definida para o número de elementos no dicionário de origem. A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento. Factor de carregamento de 1.0 é o melhor equilíbrio entre velocidade e tamanho.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O fornecedor de código personalizado hash e o comparador personalizado ativar cenários, como o fazer pesquisas com cadeias sensível.       Os elementos da nova <xref:System.Collections.Hashtable>são ordenados pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.IDictionary>objeto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Este construtor é uma Nã (`n`) operação, onde `n` é o número de elementos a `d` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/c67b166f-bc6a-49e5-9bd7-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/c67b166f-bc6a-49e5-9bd7-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/c67b166f-bc6a-49e5-9bd7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>objeto para copiar para uma nova <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo de 0.1 através de 1.0 é multiplicado pelo valor predefinido que fornece o melhor desempenho. O resultado é o rácio máximo de elementos registos."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "O <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> os códigos de objeto que fornece o hash para todas as chaves no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o fornecedor de código de hash predefinido, que é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>objeto a utilizar para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o comparador predefinido, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>é menor que 0.1.       - ou - <code>loadFactor</code> é superior a 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma instância nova, vazia do <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe utilizando a capacidade inicial especificada, fator, o fornecedor de código hash e o comparador de carga."
  remarks: "Especificar a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable> A capacidade é automaticamente aumentada, conforme necessário, com base no factor de carregamento.       O factor de carregamento é o rácio máximo de elementos para registos. Um fator de carga mais pequeno significa pesquisa mais rápida, mas utiliza o consumo de memória de aumento. Factor de carregamento de 1.0 é o melhor equilíbrio entre velocidade e tamanho.       Quando o factor de carregamento real atinge o fator de carga especificado, o número de registos automaticamente é aumentado para o número de prime mais pequeno que é maior do que duas vezes o número atual de registos.       O fornecedor de código hash dispenses códigos de hash de chaves no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> O fornecedor de código de hash predefinido é a implementação da chave de <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Hashtable>tem de ser exclusivo.</xref:System.Collections.Hashtable> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O fornecedor de código personalizado hash e o comparador personalizado ativar cenários, como o fazer pesquisas com cadeias sensível.       Este construtor é uma Nã (`n`) operação, onde `n` é o `capacity` parâmetro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/86ed2545-c9ee-4654-a1a4-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/86ed2545-c9ee-4654-a1a4-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/86ed2545-c9ee-4654-a1a4-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número aproximado de elementos que o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> objeto inicialmente pode conter."
    - id: loadFactor
      type: System.Single
      description: "Um número no intervalo de 0.1 através de 1.0 é multiplicado pelo valor predefinido que fornece o melhor desempenho. O resultado é o rácio máximo de elementos registos."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "O <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> os códigos de objeto que fornece o hash para todas as chaves no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o fornecedor de código de hash predefinido, que é a implementação de cada chave de &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>objeto a utilizar para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o comparador predefinido, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero.       - ou - <code>loadFactor</code> é inferior ao 0.1.       - ou - <code>loadFactor</code> é superior a 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: Hashtable.Add(Object,Object)
  fullName: System.Collections.Hashtable.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Adiciona um elemento com o nome da chave e valor para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Não pode ser uma chave `null`, mas pode ser um valor.       Um objeto que tem não correlação entre o estado e o respetivo valor de código hash não normalmente deve ser utilizado como a chave. Por exemplo, os objetos de cadeia são melhores do que os objetos de StringBuilder para utilização como chaves.       Também pode utilizar o <xref:System.Collections.Hashtable.Item%2A>para adicionar novos elementos, definindo o valor de uma chave que não existe propriedade no <xref:System.Collections.Hashtable>; por exemplo, `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable.Item%2A> No entanto, se a chave especificada já existe no <xref:System.Collections.Hashtable>, definição de <xref:System.Collections.Hashtable.Item%2A>propriedade substitui o valor antigo.</xref:System.Collections.Hashtable.Item%2A> </xref:System.Collections.Hashtable> Em contrapartida, o método Add não modificar elementos existentes.       Se <xref:System.Collections.Hashtable.Count%2A>é inferior à capacidade dos <xref:System.Collections.Hashtable>, este método é uma operação O(1).</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable.Count%2A> Se a capacidade tem de ser aumentado para o novo elemento, este método torna-se um Nã (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Add Example#1](~/add/codesnippet/cpp/m-system.collections.has_6_1.cpp)]\n [!code-cs[Classic Hashtable.Add Example#1](~/add/codesnippet/csharp/m-system.collections.has_6_1.cs)]\n [!code-vb[Classic Hashtable.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_6_1.vb)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "A chave do elemento para adicionar."
    - id: value
      type: System.Object
      description: "O valor do elemento para adicionar. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Já existe um elemento com a mesma chave no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.Hashtable&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.Hashtable.Clear
  id: Clear
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Clear()
  nameWithType: Hashtable.Clear()
  fullName: System.Collections.Hashtable.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove todos os elementos do <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "<xref:System.Collections.Hashtable.Count%2A>está definido como zero e também são lançadas as referências a outros objetos de elementos da coleção.</xref:System.Collections.Hashtable.Count%2A> A capacidade permanece inalterada.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to clear the values of the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.has_10_1.cpp)]\n [!code-vb[Classic Hashtable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_10_1.vb)]\n [!code-cs[Classic Hashtable.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.has_10_1.cs)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.Hashtable.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é só de leitura."
  platform:
  - net462
- uid: System.Collections.Hashtable.Clone
  id: Clone
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Clone()
  nameWithType: Hashtable.Clone()
  fullName: System.Collections.Hashtable.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cria uma cópia shallow o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Uma cópia de uma coleção shallow copia apenas os elementos da coleção, se são tipos de referência ou tipos de valor, mas não copia os objetos que consulte as referências. As referências a nova coleção apontam para os objetos do mesmos que as referências na coleção original apontam para.       Em contrapartida, uma cópia profunda de uma coleção copia os elementos e tudo direta ou indiretamente referenciada pelos elementos.       O <xref:System.Collections.Hashtable>clone tem a mesma contagem, a mesma capacidade, a mesma <xref:System.Collections.IHashCodeProvider>implementação e a mesma <xref:System.Collections.IComparer>implementação que o original <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.IComparer> </xref:System.Collections.IHashCodeProvider> </xref:System.Collections.Hashtable>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Uma cópia shallow o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.comparer
  id: comparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: comparer
  nameWithType: Hashtable.comparer
  fullName: System.Collections.Hashtable.comparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém ou define o <xref:System.Collections.IComparer>a utilizar para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IComparer>"
  remarks: "Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: protected System.Collections.IComparer comparer { get; set; }
    return:
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>a utilizar para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IComparer>"
  overload: System.Collections.Hashtable.comparer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade está definida para um valor, mas a tabela hash foi criada utilizando uma <xref:System.Collections.IEqualityComparer>.</xref:System.Collections.IEqualityComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: Hashtable.Contains(Object)
  fullName: System.Collections.Hashtable.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém uma chave específica."
  remarks: "Contém implementa <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> Esta se comporta exatamente como <xref:System.Collections.Hashtable.ContainsKey%2A>.</xref:System.Collections.Hashtable.ContainsKey%2A>       Este método é uma operação de O(1).       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_12_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_12_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave para localizar no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém um elemento com especificado chave; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: Hashtable.ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém uma chave específica."
  remarks: "Este método funciona exatamente como <xref:System.Collections.Hashtable.Contains%2A>.</xref:System.Collections.Hashtable.Contains%2A>       Este método é uma operação de O(1).       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_7_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_7_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_7_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave para localizar no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém um elemento com especificado chave; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: Hashtable.ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém um valor específico."
  remarks: "Os valores dos elementos do <xref:System.Collections.Hashtable>em comparação com o valor especificado utilizando o <xref:System.Object.Equals%2A?displayProperty=fullName>método.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Collections.Hashtable>       Este método efetua uma pesquisa linear; Por conseguinte, este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_9_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_9_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_9_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O valor a localizar no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contém um elemento com especificado <code> value </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: Hashtable.CopyTo(Array,Int32)
  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> elementos um unidimensional <xref:System.Array>instância no índice especificado.</xref:System.Array>"
  remarks: "Os elementos são copiados para o <xref:System.Array>pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Array>       Para copiar apenas as chaves no <xref:System.Collections.Hashtable>, utilize `Hashtable.Keys.CopyTo`.</xref:System.Collections.Hashtable>       Para copiar apenas os valores existentes no <xref:System.Collections.Hashtable>, utilize `Hashtable.Values.CopyTo`.</xref:System.Collections.Hashtable>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to copy the list of keys or the list of values in a <xref:System.Collections.Hashtable> into a one-dimensional <xref:System.Array>.  \n  \n [!code-cs[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.has_0_1.cs)]\n [!code-vb[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_0_1.vb)]\n [!code-cpp[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.has_0_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "O unidimensional <xref:System.Array>que é o destino de <xref:System.Collections.DictionaryEntry>objetos copiados <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> O <xref:System.Array>tem de ter a indexação com base em zero.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "O índice baseado em zero `array` em que copiar começa."
  overload: System.Collections.Hashtable.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       - ou - o número de elementos na origem de <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é superior ao espaço disponível desde o <code>arrayIndex</code> ao fim do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da origem de <xref href=&quot;System.Collections.Hashtable&quot;> </xref> não pode ser convertido automaticamente para o tipo de destino <code> array </code>."
  platform:
  - net462
- uid: System.Collections.Hashtable.Count
  id: Count
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Count
  nameWithType: Hashtable.Count
  fullName: System.Collections.Hashtable.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém o número de pares chave/valor contidas no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "O número de pares chave/valor contidas no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.EqualityComparer
  id: EqualityComparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém o <xref:System.Collections.IEqualityComparer>a utilizar para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>"
  remarks: "O <xref:System.Collections.IEqualityComparer>inclui o comparador e o fornecedor de código hash.</xref:System.Collections.IEqualityComparer> Se um <xref:System.Collections.IEqualityComparer>é utilizada no <xref:System.Collections.Hashtable>construtor, os objectos utilizados como chaves no <xref:System.Collections.Hashtable>não são necessários para substituir o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>métodos.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: protected System.Collections.IEqualityComparer EqualityComparer { get; }
    return:
      type: System.Collections.IEqualityComparer
      description: "O <xref:System.Collections.IEqualityComparer>a utilizar para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>"
  overload: System.Collections.Hashtable.EqualityComparer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade está definida para um valor, mas a tabela hash foi criada utilizando uma <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> e <xref:System.Collections.IComparer>.</xref:System.Collections.IComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Hashtable.GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um <xref:System.Collections.IDictionaryEnumerator>que itera através de <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "[Visual Basic, c#]       O `foreach` declaração do Estado de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Por conseguinte, utilizando `foreach` recomenda-se, em vez de manipular diretamente o enumerador.       Enumeradores podem ser utilizados para ler os dados da coleção, mas não pode ser utilizados para modificar a colecção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento da coleção. <xref:System.Collections.IEnumerator.Reset%2A>também oferece o enumerador novamente para nesta posição.</xref:System.Collections.IEnumerator.Reset%2A>  Nesta posição <xref:System.Collections.IEnumerator.Current%2A>não está definido.</xref:System.Collections.IEnumerator.Current%2A> Por conseguinte, tem de chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção de antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Devolve o mesmo objeto até ser <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>transmite o fim da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>devolve `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nesta posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também devolvem `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A>devolvido `false`, <xref:System.Collections.IEnumerator.Current%2A>não está definido.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Para definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção, pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permanece inalterada. Caso sejam feitas alterações à coleção, como adicionar, modificar ou eliminar elementos, o enumerador está irrevogavelmente inválido e o respetivo comportamento não está definido.       O enumerador não tem acesso exclusivo à coleção; Por conseguinte, a enumerar através de uma coleção intrinsecamente não é um procedimento de segurança de thread.  Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda.  Para permitir a coleção ser acedido por vários threads para ler e escrever, tem de implementar a seus próprios sincronização.       Este método é uma operação de O(1).       Uma vez que serializar e anular a serialização de um enumerador de um <xref:System.Collections.Hashtable>pode fazer com que os elementos ficam reordenados, não é possível continuar a enumeração sem chamar o <xref:System.Collections.IEnumerator.Reset%2A>método.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  example:
  - "The following example compares the use of GetEnumerator and `foreach` to enumerate the contents of a <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable Example#2](~/add/codesnippet/cpp/m-system.collections.has_3_1.cpp)]\n [!code-cs[Classic Hashtable Example#2](~/add/codesnippet/csharp/m-system.collections.has_3_1.cs)]\n [!code-vb[Classic Hashtable Example#2](~/add/codesnippet/visualbasic/m-system.collections.has_3_1.vb)]"
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.Hashtable&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Hashtable.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.GetHash(System.Object)
  id: GetHash(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetHash(Object)
  nameWithType: Hashtable.GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve o código hash para a chave especificada."
  remarks: "Se a tabela hash foi criada com um específico <xref:System.Collections.IHashCodeProvider>implementação, este método utiliza esse fornecedor de código hash; caso contrário, utiliza o <xref:System.Object.GetHashCode%2A?displayProperty=fullName>implementação `key`.</xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.IHashCodeProvider>       Este método é uma operação de O(1)."
  syntax:
    content: protected virtual int GetHash (object key);
    parameters:
    - id: key
      type: System.Object
      description: "O <xref:System.Object>para o qual um código hash deve ser devolvido.</xref:System.Object>"
    return:
      type: System.Int32
      description: "O código hash para <code> key </code>."
  overload: System.Collections.Hashtable.GetHash*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Implementa o <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> interface e devolve os dados necessários para serializar o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objeto que contém as informações necessárias para serializar o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A <xref:System.Runtime.Serialization.StreamingContext>objeto que contém a origem e de destino de fluxo serializado associado a <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Collections.Hashtable.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A colecção foi modificada."
  platform:
  - net462
- uid: System.Collections.Hashtable.hcp
  id: hcp
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: hcp
  nameWithType: Hashtable.hcp
  fullName: System.Collections.Hashtable.hcp
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém ou define o objecto que pode dispense códigos de hash."
  remarks: "Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: protected System.Collections.IHashCodeProvider hcp { get; set; }
    return:
      type: System.Collections.IHashCodeProvider
      description: "O objecto que pode dispense códigos de hash."
  overload: System.Collections.Hashtable.hcp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade está definida para um valor, mas a tabela hash foi criada utilizando uma <xref:System.Collections.IEqualityComparer>.</xref:System.Collections.IEqualityComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> tem um tamanho fixo."
  remarks: "Uma coleção com um tamanho fixo não permite a adição ou remoção de elementos depois da coleção é criada, mas permite a modificação de elementos existentes.       Uma coleção com um tamanho fixo é simplesmente uma coleção com um wrapper que impede a adição e remoção de elementos; Por conseguinte, caso sejam feitas alterações para a colecção subjacente, incluindo a adição ou remoção de elementos, a coleção de tamanho fixo reflete essas alterações.       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> tem fixa tamanho; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é só de leitura."
  remarks: "Uma coleção que é só de leitura não permite a adição, remoção ou modificação de elementos depois de criar a coleção.       Uma coleção que é só de leitura é simplesmente uma coleção com um wrapper que impede a modificar a coleção; Por conseguinte, caso sejam feitas alterações para a colecção subjacente, a coleção só de leitura reflete essas alterações.       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é só de leitura; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se o acesso à <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é sincronizado (seguros para threads)."
  remarks: "A <xref:System.Collections.Hashtable>pode suportar um escritor e leitores múltiplos em simultâneo.</xref:System.Collections.Hashtable> Para suportar vários escritores, todas as operações tem de ser efetuadas através de wrapper devolvido pelo <xref:System.Collections.Hashtable.Synchronized%2A>método.</xref:System.Collections.Hashtable.Synchronized%2A>       Enumerar através de uma coleção intrinsecamente não é um procedimento de segurança de thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads.       Exemplo de código seguinte mostra como utilizar a coleção de bloqueio de <xref:System.Collections.Hashtable.SyncRoot%2A>durante a enumeração toda: [!code-cpp [clássico Hashtable.IsSynchronized exemplo n. º&2;](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)][!code-vb[clássico Hashtable.IsSynchronized exemplo n. º&2;](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)][!code-cs[clássico Hashtable.IsSynchronized exemplo n. º&2;](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs) ]     </xref:System.Collections.Hashtable.SyncRoot%2A>"
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \n  \n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.has_1_2.cs)]\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.has_1_2.cpp)]\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.has_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o acesso à <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é sincronizado (seguros para threads); caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Item(Object)
  nameWithType: Hashtable.Item(Object)
  fullName: System.Collections.Hashtable.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém ou define o valor associado à chave especificada."
  remarks: "Esta propriedade fornece a capacidade de aceder um elemento específico da coleção, utilizando a seguinte sintaxe: `myCollection[key]`.       Também pode utilizar a propriedade do Item para adicionar novos elementos definindo o valor de uma chave que não existe no <xref:System.Collections.Hashtable>; por exemplo, `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Hashtable> No entanto, se a chave especificada já existe no <xref:System.Collections.Hashtable>, definir a propriedade do Item substitui o valor antigo.</xref:System.Collections.Hashtable> Em contrapartida, o <xref:System.Collections.Hashtable.Add%2A>método não modifica os elementos existentes.</xref:System.Collections.Hashtable.Add%2A>       Não pode ser uma chave `null`, mas pode ser um valor. Para distinguir entre `null` que é devolvido porque a chave especificada não foi encontrada e `null` que é devolvido porque o valor da chave especificada é `null`, utilize o <xref:System.Collections.Hashtable.Contains%2A>método ou <xref:System.Collections.Hashtable.ContainsKey%2A>método para determinar se a chave existe na lista.</xref:System.Collections.Hashtable.ContainsKey%2A> </xref:System.Collections.Hashtable.Contains%2A>       Obter o valor desta propriedade é uma operação de O(1); definir a propriedade também é uma operação O(1).       A linguagem c# utiliza a palavra-chave para definir os indexadores em vez de implementar o <xref:System.Collections.IList.Item%2A>propriedade.</xref:System.Collections.IList.Item%2A> Visual Basic implementa Item como uma propriedade predefinida, que fornece a mesma funcionalidade de indexação."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "A chave cujo valor obter ou definir."
    return:
      type: System.Object
      description: "O valor associado à chave especificada. Se a chave especificada não é encontrada, a tentar obter devolve <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, e a tentar definir-cria um novo elemento de utilizando a chave especificada."
  overload: System.Collections.Hashtable.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A propriedade está definida e o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é só de leitura.       - ou - a propriedade está definida, <code> key </code> não existe na coleção e o <xref href=&quot;System.Collections.Hashtable&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  id: KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: KeyEquals(Object,Object)
  nameWithType: Hashtable.KeyEquals(Object,Object)
  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Compara específico <xref:System.Object>com uma chave específica no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Object>"
  remarks: "Se a tabela hash foi criada com um específico <xref:System.Collections.IComparer>implementação, este método utiliza essa comparador; que seja, <xref:System.Collections.IComparer.Compare%2A>(`item`, `key`).</xref:System.Collections.IComparer.Compare%2A> </xref:System.Collections.IComparer> Caso contrário, utiliza `item.Equals(key)`.       Este método é uma operação de O(1)."
  syntax:
    content: protected virtual bool KeyEquals (object item, object key);
    parameters:
    - id: item
      type: System.Object
      description: "O <xref:System.Object>a comparar com `key`.</xref:System.Object>"
    - id: key
      type: System.Object
      description: "A chave no <xref href=&quot;System.Collections.Hashtable&quot;> </xref> a comparar com `item`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> and <code>key</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Hashtable.KeyEquals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>item</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.Keys
  id: Keys
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Keys
  nameWithType: Hashtable.Keys
  fullName: System.Collections.Hashtable.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um <xref:System.Collections.ICollection>que contém as chaves no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "A ordem das chaves no <xref:System.Collections.ICollection>não foi especificado, mas não os valores associados na mesma ordem o <xref:System.Collections.ICollection>devolvido pelo <xref:System.Collections.Hashtable.Values%2A>método.</xref:System.Collections.Hashtable.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       O devolvido <xref:System.Collections.ICollection>não é uma cópia estática; em vez disso, <xref:System.Collections.ICollection>refere-se novamente as chaves de original <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Por conseguinte, é alterado para <xref:System.Collections.Hashtable>continuar a ser refletida no <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Hashtable>       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>que contém as chaves no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Hashtable.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: Hashtable.OnDeserialization(Object)
  fullName: System.Collections.Hashtable.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Implementa o <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> interface e desencadeia o evento de anulação da serialização depois de concluída a anulação da serialização."
  remarks: "Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Uma vez que serializar e anular a serialização de um enumerador de um <xref:System.Collections.Hashtable>pode fazer com que os elementos ficam reordenados, não é possível continuar a enumeração sem chamar o <xref:System.Collections.IEnumerator.Reset%2A>método.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "A origem do evento de anulação da serialização."
  overload: System.Collections.Hashtable.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "O <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objeto associado atual <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é inválido."
  platform:
  - net462
- uid: System.Collections.Hashtable.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: Hashtable.Remove(Object)
  fullName: System.Collections.Hashtable.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove o elemento com o nome da chave do <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Se o <xref:System.Collections.Hashtable>não contém um elemento com a chave especificada, o <xref:System.Collections.Hashtable>permanece inalterada.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> Sem exceção é emitida.       Este método é uma operação de O(1)."
  example:
  - "The following example shows how to remove elements from the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.has_13_1.cpp)]\n [!code-cs[Classic Hashtable.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.has_13_1.cs)]\n [!code-vb[Classic Hashtable.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_13_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave do elemento para remover."
  overload: System.Collections.Hashtable.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.Hashtable&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.Hashtable&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  id: Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Synchronized(Hashtable)
  nameWithType: Hashtable.Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(Hashtable)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um wrapper (seguro para thread) sincronizado para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "O método sincronizado é seguros para threads de múltiplos leitores e escritores. Além disso, o wrapper de sincronizado assegura que apenas um escritor de escrita de cada vez.       Enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads.       Exemplo de código seguinte mostra como utilizar a coleção de bloqueio de <xref:System.Collections.Hashtable.SyncRoot%2A>durante a enumeração toda: [!code-cpp [clássico Hashtable.IsSynchronized exemplo n. º&2;](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)][!code-vb[clássico Hashtable.IsSynchronized exemplo n. º&2;](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)][!code-cs[clássico Hashtable.IsSynchronized exemplo n. º&2;](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs) ] este método é uma operação O(1).    </xref:System.Collections.Hashtable.SyncRoot%2A>"
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \n  \n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.has_11_2.cs)]\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.has_11_2.cpp)]\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_11_2.vb)]"
  syntax:
    content: public static System.Collections.Hashtable Synchronized (System.Collections.Hashtable table);
    parameters:
    - id: table
      type: System.Collections.Hashtable
      description: "O <xref href=&quot;System.Collections.Hashtable&quot;> </xref> a sincronizar."
    return:
      type: System.Collections.Hashtable
      description: "A sincronizar wrapper (seguro para thread) para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>table</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.SyncRoot
  id: SyncRoot
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um objeto que pode ser utilizado para sincronizar acesso para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Para criar uma versão sincronizada a <xref:System.Collections.Hashtable>, utilize o <xref:System.Collections.Hashtable.Synchronized%2A>método.</xref:System.Collections.Hashtable.Synchronized%2A> </xref:System.Collections.Hashtable> No entanto, as classes derivadas podem fornecer os seus próprios versão sincronizado do <xref:System.Collections.Hashtable>utilizando a propriedade SyncRoot.</xref:System.Collections.Hashtable> O código de sincronização tem de efetuar operações em SyncRoot do <xref:System.Collections.Hashtable>, não diretamente no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> Isto assegura um funcionamento correto de coleções que são derivadas de outros objetos. Especificamente, mantém sincronização adequada com outros threads que podem ser simultaneamente modificar o <xref:System.Collections.Hashtable>objeto.</xref:System.Collections.Hashtable>       Enumerar através de uma coleção intrinsecamente não é um procedimento de segurança de thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads.       Exemplo de código seguinte mostra como a coleção utilizando o SyncRoot durante a enumeração completa de bloqueio: [!code-cpp [clássico Hashtable.IsSynchronized exemplo n. º&2;](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)][!code-vb[clássico Hashtable.IsSynchronized exemplo n. º&2;](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)][!code-cs[clássico Hashtable.IsSynchronized exemplo n. º&2;    ](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Um objeto que pode ser utilizado para sincronizar acesso para o <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um enumerador que itera através de uma coleção."
  remarks: "[Visual Basic, c#]       O `foreach` declaração do Estado de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Por conseguinte, utilizando `foreach` recomenda-se, em vez de manipular diretamente o enumerador.       Enumeradores podem ser utilizados para ler os dados da coleção, mas não pode ser utilizados para modificar a colecção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento da coleção. <xref:System.Collections.IEnumerator.Reset%2A>também oferece o enumerador novamente para nesta posição.</xref:System.Collections.IEnumerator.Reset%2A> AT isto posicionar, chamar <xref:System.Collections.IEnumerator.Current%2A>emite uma exceção.</xref:System.Collections.IEnumerator.Current%2A> Por conseguinte, tem de chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção de antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Devolve o mesmo objeto até ser <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>transmite o fim da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>devolve `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nesta posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também devolvem `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A>devolvido `false`, chamar <xref:System.Collections.IEnumerator.Current%2A>emite uma exceção.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Para definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção, pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permanece inalterada. Caso sejam feitas alterações à coleção, tais como adicionar, modificar ou eliminar elementos, o enumerador pode invalidado e a próxima chamada ou <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A>emitir um <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se a coleção é modificada entre <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>devolve o elemento que está definido, mesmo que o enumerador já é invalidado.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       O enumerador não tem acesso exclusivo à coleção; Por conseguinte, a enumerar através de uma coleção intrinsecamente não é um procedimento de segurança de thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads.       Este método é uma operação de O(1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Um <xref:System.Collections.IEnumerator>que podem ser utilizados para iterar através da coleção.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.Values
  id: Values
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Values
  nameWithType: Hashtable.Values
  fullName: System.Collections.Hashtable.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um <xref:System.Collections.ICollection>que contém os valores existentes no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "A ordem dos valores existentes no <xref:System.Collections.ICollection>não foi especificado, mas é a mesma ordem como as chaves associadas no <xref:System.Collections.ICollection>devolvido pelo <xref:System.Collections.Hashtable.Keys%2A>método.</xref:System.Collections.Hashtable.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       O devolvido <xref:System.Collections.ICollection>não é uma cópia estática; em vez disso, <xref:System.Collections.ICollection>refere-se novamente para os valores existentes na original <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Por conseguinte, é alterado para <xref:System.Collections.Hashtable>continuar a ser refletida no <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Hashtable>       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>que contém os valores existentes no <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Hashtable.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Runtime.Serialization.SerializationException
  isExternal: true
  name: System.Runtime.Serialization.SerializationException
- uid: System.Collections.Hashtable.#ctor
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable()
  nameWithType: Hashtable.Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary)
  nameWithType: Hashtable.Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: true
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32)
  nameWithType: Hashtable.Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single)
  nameWithType: Hashtable.Hashtable(IDictionary,Single)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)
- uid: System.Collections.IHashCodeProvider
  parent: System.Collections
  isExternal: false
  name: IHashCodeProvider
  nameWithType: IHashCodeProvider
  fullName: System.Collections.IHashCodeProvider
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single)
  nameWithType: Hashtable.Hashtable(Int32,Single)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)
- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Add(Object,Object)
  nameWithType: Hashtable.Add(Object,Object)
  fullName: System.Collections.Hashtable.Add(Object,Object)
- uid: System.Collections.Hashtable.Clear
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clear()
  nameWithType: Hashtable.Clear()
  fullName: System.Collections.Hashtable.Clear()
- uid: System.Collections.Hashtable.Clone
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clone()
  nameWithType: Hashtable.Clone()
  fullName: System.Collections.Hashtable.Clone()
- uid: System.Collections.Hashtable.comparer
  parent: System.Collections.Hashtable
  isExternal: false
  name: comparer
  nameWithType: Hashtable.comparer
  fullName: System.Collections.Hashtable.comparer
- uid: System.Collections.Hashtable.Contains(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Contains(Object)
  nameWithType: Hashtable.Contains(Object)
  fullName: System.Collections.Hashtable.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: Hashtable.ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(Object)
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: Hashtable.ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(Object)
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: Hashtable.CopyTo(Array,Int32)
  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Hashtable.Count
  parent: System.Collections.Hashtable
  isExternal: false
  name: Count
  nameWithType: Hashtable.Count
  fullName: System.Collections.Hashtable.Count
- uid: System.Collections.Hashtable.EqualityComparer
  parent: System.Collections.Hashtable
  isExternal: false
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
- uid: System.Collections.Hashtable.GetEnumerator
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetEnumerator()
  nameWithType: Hashtable.GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Hashtable.GetHash(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetHash(Object)
  nameWithType: Hashtable.GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(Object)
- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Hashtable.hcp
  parent: System.Collections.Hashtable
  isExternal: false
  name: hcp
  nameWithType: Hashtable.hcp
  fullName: System.Collections.Hashtable.hcp
- uid: System.Collections.Hashtable.IsFixedSize
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
- uid: System.Collections.Hashtable.IsReadOnly
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
- uid: System.Collections.Hashtable.IsSynchronized
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
- uid: System.Collections.Hashtable.Item(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Item(Object)
  nameWithType: Hashtable.Item(Object)
  fullName: System.Collections.Hashtable.Item(Object)
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: KeyEquals(Object,Object)
  nameWithType: Hashtable.KeyEquals(Object,Object)
  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)
- uid: System.Collections.Hashtable.Keys
  parent: System.Collections.Hashtable
  isExternal: false
  name: Keys
  nameWithType: Hashtable.Keys
  fullName: System.Collections.Hashtable.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Hashtable.OnDeserialization(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: Hashtable.OnDeserialization(Object)
  fullName: System.Collections.Hashtable.OnDeserialization(Object)
- uid: System.Collections.Hashtable.Remove(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Remove(Object)
  nameWithType: Hashtable.Remove(Object)
  fullName: System.Collections.Hashtable.Remove(Object)
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Synchronized(Hashtable)
  nameWithType: Hashtable.Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections.Hashtable.SyncRoot
  parent: System.Collections.Hashtable
  isExternal: false
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Hashtable
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Hashtable.Values
  parent: System.Collections.Hashtable
  isExternal: false
  name: Values
  nameWithType: Hashtable.Values
  fullName: System.Collections.Hashtable.Values
- uid: System.Collections.Hashtable.#ctor*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable.Hashtable
- uid: System.Collections.Hashtable.Add*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Add
  nameWithType: Hashtable.Add
- uid: System.Collections.Hashtable.Clear*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clear
  nameWithType: Hashtable.Clear
- uid: System.Collections.Hashtable.Clone*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clone
  nameWithType: Hashtable.Clone
- uid: System.Collections.Hashtable.comparer*
  parent: System.Collections.Hashtable
  isExternal: false
  name: comparer
  nameWithType: Hashtable.comparer
- uid: System.Collections.Hashtable.Contains*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Contains
  nameWithType: Hashtable.Contains
- uid: System.Collections.Hashtable.ContainsKey*
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsKey
  nameWithType: Hashtable.ContainsKey
- uid: System.Collections.Hashtable.ContainsValue*
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsValue
  nameWithType: Hashtable.ContainsValue
- uid: System.Collections.Hashtable.CopyTo*
  parent: System.Collections.Hashtable
  isExternal: false
  name: CopyTo
  nameWithType: Hashtable.CopyTo
- uid: System.Collections.Hashtable.Count*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Count
  nameWithType: Hashtable.Count
- uid: System.Collections.Hashtable.EqualityComparer*
  parent: System.Collections.Hashtable
  isExternal: false
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
- uid: System.Collections.Hashtable.GetEnumerator*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetEnumerator
  nameWithType: Hashtable.GetEnumerator
- uid: System.Collections.Hashtable.GetHash*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetHash
  nameWithType: Hashtable.GetHash
- uid: System.Collections.Hashtable.GetObjectData*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetObjectData
  nameWithType: Hashtable.GetObjectData
- uid: System.Collections.Hashtable.hcp*
  parent: System.Collections.Hashtable
  isExternal: false
  name: hcp
  nameWithType: Hashtable.hcp
- uid: System.Collections.Hashtable.IsFixedSize*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
- uid: System.Collections.Hashtable.IsReadOnly*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
- uid: System.Collections.Hashtable.IsSynchronized*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
- uid: System.Collections.Hashtable.Item*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Item
  nameWithType: Hashtable.Item
- uid: System.Collections.Hashtable.KeyEquals*
  parent: System.Collections.Hashtable
  isExternal: false
  name: KeyEquals
  nameWithType: Hashtable.KeyEquals
- uid: System.Collections.Hashtable.Keys*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Keys
  nameWithType: Hashtable.Keys
- uid: System.Collections.Hashtable.OnDeserialization*
  parent: System.Collections.Hashtable
  isExternal: false
  name: OnDeserialization
  nameWithType: Hashtable.OnDeserialization
- uid: System.Collections.Hashtable.Remove*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Remove
  nameWithType: Hashtable.Remove
- uid: System.Collections.Hashtable.Synchronized*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Synchronized
  nameWithType: Hashtable.Synchronized
- uid: System.Collections.Hashtable.SyncRoot*
  parent: System.Collections.Hashtable
  isExternal: false
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Hashtable
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Hashtable.Values*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Values
  nameWithType: Hashtable.Values
