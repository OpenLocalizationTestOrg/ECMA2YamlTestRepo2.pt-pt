### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  id: RSAPKCS1KeyExchangeFormatter
  children:
  - System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor
  - System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)
  - System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  - System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  - System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters
  - System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng
  - System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  langs:
  - csharp
  name: RSAPKCS1KeyExchangeFormatter
  nameWithType: RSAPKCS1KeyExchangeFormatter
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  type: Class
  summary: "Creates the PKCS#1 key exchange data using <xref href=&quot;System.Security.Cryptography.RSA&quot;></xref>."
  remarks: "Key exchange allows a sender to create secret information (such as random data that can be used as a key in a symmetric encryption algorithm) and use encryption to send it to the intended recipient.       Use <xref:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter> to receive the key exchange and extract the secret information from it.      > [!CAUTION] >  We recommend that you do not attempt to create your own key exchange method from the basic functionality provided, because many details of the operation must be performed carefully in order for the key exchange to be successful."
  example:
  - "The following example shows how to use the RSAPKCS1KeyExchangeFormatter class to create an exchange key for a message recipient.  \n  \n [!code-vb[System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter2#1](~/add/codesnippet/visualbasic/t-system.security.crypto_3_1.vb)]\n [!code-cs[System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter2#1](~/add/codesnippet/csharp/t-system.security.crypto_3_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class RSAPKCS1KeyExchangeFormatter : System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  langs:
  - csharp
  name: RSAPKCS1KeyExchangeFormatter()
  nameWithType: RSAPKCS1KeyExchangeFormatter.RSAPKCS1KeyExchangeFormatter()
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.RSAPKCS1KeyExchangeFormatter()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter&quot;></xref> class."
  remarks: "Use <xref:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey%2A> method to set the key to be used for key exchange before calling <xref:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange%2A>."
  syntax:
    content: public RSAPKCS1KeyExchangeFormatter ();
    parameters: []
  overload: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)
  id: '#ctor(System.Security.Cryptography.AsymmetricAlgorithm)'
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  langs:
  - csharp
  name: RSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm)
  nameWithType: RSAPKCS1KeyExchangeFormatter.RSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.RSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter&quot;></xref> class with the specified key."
  syntax:
    content: public RSAPKCS1KeyExchangeFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);
    parameters:
    - id: key
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "The instance of the <xref href=&quot;System.Security.Cryptography.RSA&quot;></xref> algorithm that holds the public key."
  overload: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  id: CreateKeyExchange(System.Byte[])
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  langs:
  - csharp
  name: CreateKeyExchange(Byte[])
  nameWithType: RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(Byte[])
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Creates the encrypted key exchange data from the specified input data."
  remarks: "This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information."
  syntax:
    content: public override byte[] CreateKeyExchange (byte[] rgbData);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: "The secret information to be passed in the key exchange."
    return:
      type: System.Byte[]
      description: "The encrypted key exchange data to be sent to the intended recipient."
  overload: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>rgbData </code>is too big."
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: "The key is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  id: CreateKeyExchange(System.Byte[],System.Type)
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  langs:
  - csharp
  name: CreateKeyExchange(Byte[],Type)
  nameWithType: RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Creates the encrypted key exchange data from the specified input data."
  remarks: "This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information."
  example:
  - "The following example shows how to use the CreateKeyExchange method to create an exchange key for a message recipient. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter> class.  \n  \n [!code-vb[System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter2#2](~/add/codesnippet/visualbasic/af9d2777-9c8f-4414-a6c1-_1.vb)]\n [!code-cs[System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter2#2](~/add/codesnippet/csharp/af9d2777-9c8f-4414-a6c1-_1.cs)]"
  syntax:
    content: public override byte[] CreateKeyExchange (byte[] rgbData, Type symAlgType);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: "The secret information to be passed in the key exchange."
    - id: symAlgType
      type: System.Type
      description: "This parameter is not used in the current version."
    return:
      type: System.Byte[]
      description: "The encrypted key exchange data to be sent to the intended recipient."
  overload: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters
  id: Parameters
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  langs:
  - csharp
  name: Parameters
  nameWithType: RSAPKCS1KeyExchangeFormatter.Parameters
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: 'Gets the parameters for the PKCS #1 key exchange.'
  remarks: 'The Parameters property returns an XML string that contains Uniform Resource Identifiers (URIs) that describe the parameters of the PKCS #1 key exchange operation.  Note that the URIs are not guaranteed to point to active addresses.'
  syntax:
    content: public override string Parameters { get; }
    return:
      type: System.String
      description: 'An XML string containing the parameters of the PKCS #1 key exchange operation.'
  overload: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng
  id: Rng
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  langs:
  - csharp
  name: Rng
  nameWithType: RSAPKCS1KeyExchangeFormatter.Rng
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Gets or sets the random number generator algorithm to use in the creation of the key exchange."
  remarks: "If this property is `null`, the default random number generator algorithm is used."
  syntax:
    content: public System.Security.Cryptography.RandomNumberGenerator Rng { get; set; }
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: "The instance of a random number generator algorithm to use."
  overload: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  langs:
  - csharp
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: RSAPKCS1KeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Sets the public key to use for encrypting the key exchange data."
  remarks: "You must set the key before calling <xref:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange%2A>."
  syntax:
    content: public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);
    parameters:
    - id: key
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "The instance of the <xref href=&quot;System.Security.Cryptography.RSA&quot;></xref> algorithm that holds the public key."
  overload: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: RSAPKCS1KeyExchangeFormatter()
  nameWithType: RSAPKCS1KeyExchangeFormatter.RSAPKCS1KeyExchangeFormatter()
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.RSAPKCS1KeyExchangeFormatter()
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: RSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm)
  nameWithType: RSAPKCS1KeyExchangeFormatter.RSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.RSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange(Byte[])
  nameWithType: RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(Byte[])
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange(Byte[],Type)
  nameWithType: RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: Parameters
  nameWithType: RSAPKCS1KeyExchangeFormatter.Parameters
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: Rng
  nameWithType: RSAPKCS1KeyExchangeFormatter.Rng
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng
- uid: System.Security.Cryptography.RandomNumberGenerator
  parent: System.Security.Cryptography
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: RSAPKCS1KeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor*
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: RSAPKCS1KeyExchangeFormatter
  nameWithType: RSAPKCS1KeyExchangeFormatter.RSAPKCS1KeyExchangeFormatter
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange*
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange
  nameWithType: RSAPKCS1KeyExchangeFormatter.CreateKeyExchange
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters*
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: Parameters
  nameWithType: RSAPKCS1KeyExchangeFormatter.Parameters
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng*
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: Rng
  nameWithType: RSAPKCS1KeyExchangeFormatter.Rng
- uid: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey*
  parent: System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter
  isExternal: false
  name: SetKey
  nameWithType: RSAPKCS1KeyExchangeFormatter.SetKey
