### YamlMime:ManagedReference
items:
- uid: System.Web.UI.StateManagedCollection
  id: StateManagedCollection
  children:
  - System.Web.UI.StateManagedCollection.#ctor
  - System.Web.UI.StateManagedCollection.Clear
  - System.Web.UI.StateManagedCollection.CopyTo(System.Array,System.Int32)
  - System.Web.UI.StateManagedCollection.Count
  - System.Web.UI.StateManagedCollection.CreateKnownType(System.Int32)
  - System.Web.UI.StateManagedCollection.GetEnumerator
  - System.Web.UI.StateManagedCollection.GetKnownTypes
  - System.Web.UI.StateManagedCollection.OnClear
  - System.Web.UI.StateManagedCollection.OnClearComplete
  - System.Web.UI.StateManagedCollection.OnInsert(System.Int32,System.Object)
  - System.Web.UI.StateManagedCollection.OnInsertComplete(System.Int32,System.Object)
  - System.Web.UI.StateManagedCollection.OnRemove(System.Int32,System.Object)
  - System.Web.UI.StateManagedCollection.OnRemoveComplete(System.Int32,System.Object)
  - System.Web.UI.StateManagedCollection.OnValidate(System.Object)
  - System.Web.UI.StateManagedCollection.SetDirty
  - System.Web.UI.StateManagedCollection.SetDirtyObject(System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#ICollection#Count
  - System.Web.UI.StateManagedCollection.System#Collections#ICollection#IsSynchronized
  - System.Web.UI.StateManagedCollection.System#Collections#ICollection#SyncRoot
  - System.Web.UI.StateManagedCollection.System#Collections#IEnumerable#GetEnumerator
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Add(System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Clear
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Contains(System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#IndexOf(System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#IsFixedSize
  - System.Web.UI.StateManagedCollection.System#Collections#IList#IsReadOnly
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Item(System.Int32)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Remove(System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#RemoveAt(System.Int32)
  - System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#IsTrackingViewState
  - System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#LoadViewState(System.Object)
  - System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#SaveViewState
  - System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#TrackViewState
  langs:
  - csharp
  name: StateManagedCollection
  nameWithType: StateManagedCollection
  fullName: System.Web.UI.StateManagedCollection
  type: Class
  summary: "Provides a base class for all strongly typed collections that manage <see cref=&quot;T:System.Web.UI.IStateManager&quot;></see> objects."
  remarks: "The StateManagedCollection class is the base class for all strongly typed collections that store <xref:System.Web.UI.IStateManager> elements, including <xref:System.Web.UI.WebControls.DataControlFieldCollection>, <xref:System.Web.UI.WebControls.ParameterCollection>, <xref:System.Web.UI.WebControls.StyleCollection>, <xref:System.Web.UI.WebControls.TreeNodeBindingCollection>, and others. The StateManagedCollection collection manages its own state as well as the state of the elements it contains. Therefore, a call to <xref:System.Web.UI.StateManagedCollection.System%23Web%23UI%23IStateManager%23SaveViewState%2A> saves the state of the collection and the state of all the elements currently contained by the collection.       The most important methods to consider when deriving from the StateManagedCollection class are <xref:System.Web.UI.StateManagedCollection.CreateKnownType%2A>, <xref:System.Web.UI.StateManagedCollection.GetKnownTypes%2A>, <xref:System.Web.UI.StateManagedCollection.OnValidate%2A>, <xref:System.Web.UI.StateManagedCollection.SetDirty%2A>, and <xref:System.Web.UI.StateManagedCollection.SetDirtyObject%2A>. The <xref:System.Web.UI.StateManagedCollection.CreateKnownType%2A> and <xref:System.Web.UI.StateManagedCollection.GetKnownTypes%2A> methods are used to store an index in view state for the type of a contained element. Storing an index rather than a fully qualified type name improves performance. The <xref:System.Web.UI.StateManagedCollection.OnValidate%2A> method is called whenever elements of the collection are manipulated, and validates the elements according to business rules. Currently, the implementation of the <xref:System.Web.UI.StateManagedCollection.OnValidate%2A> method prohibits `null` objects from being stored in the collection; however, you can override this method to define your own validation behavior in a derived type. The <xref:System.Web.UI.StateManagedCollection.SetDirty%2A> method forces the entire collection to be serialized to view state, rather than just serializing changes made to state since the last time it was loaded. The <xref:System.Web.UI.StateManagedCollection.SetDirtyObject%2A> method is an abstract method you can implement to perform this same behavior at the element level.      > [!IMPORTANT] >  StateManagedCollection stores assembly-qualified type names of the collection items in view state. A site visitor could decode the view state and retrieve the type name. If this scenario creates a security concern in your Web site, you can manually encrypt the type name before placing it in the view state."
  example:
  - "The following code example demonstrates how to derive a strongly typed collection class from StateManagedCollection to contain <xref:System.Web.UI.IStateManager> objects. In this example, the `CycleCollection` is derived to contain instances of the abstract `Cycle` class, which can be either `Bicycle` or `Tricycle` objects. The `Cycle` class implements the <xref:System.Web.UI.IStateManager> interface because it stores the value of the `CycleColor` property in view state.  \n  \n [!code-cs[Samples.AspNet.CycleCollection#1](~/add/codesnippet/CSharp/t-system.web.ui.stateman_1.cs)]\n [!code-vb[Samples.AspNet.CycleCollection#1](~/add/codesnippet/VisualBasic/t-system.web.ui.stateman_1.vb)]"
  syntax:
    content: 'public abstract class StateManagedCollection : System.Collections.IList, System.Web.UI.IStateManager'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Web.UI.IStateManager
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.#ctor
  id: '#ctor'
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: StateManagedCollection()
  nameWithType: StateManagedCollection.StateManagedCollection()
  fullName: System.Web.UI.StateManagedCollection.StateManagedCollection()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> class."
  remarks: "Derived classes can override the constructor to provide customized implementation."
  syntax:
    content: protected StateManagedCollection ();
    parameters: []
  overload: System.Web.UI.StateManagedCollection.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.Clear
  id: Clear
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: StateManagedCollection.Clear()
  fullName: System.Web.UI.StateManagedCollection.Clear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Removes all items from the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection."
  remarks: "The <xref:System.Web.UI.StateManagedCollection.OnClear%2A> method is called before the Clear method is called, and the <xref:System.Web.UI.StateManagedCollection.OnClearComplete%2A> method is called after Clear has finished removing elements from the collection."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Web.UI.StateManagedCollection.Clear*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: StateManagedCollection.CopyTo(Array,Int32)
  fullName: System.Web.UI.StateManagedCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Copies the elements of the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection to an array, starting at a particular array index."
  remarks: "The specified array must be of a compatible type.       The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Web.UI.StateManagedCollection> collection."
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "The one-dimensional <xref:System.Array> that is the destination of the elements copied from the . The <xref:System.Array> must have zero-based indexing."
    - id: index
      type: System.Int32
      description: "The zero-based index in `array` at which copying begins."
  overload: System.Web.UI.StateManagedCollection.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    array is ."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n    index is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    array is multidimensional.  \n  \n \\- or -  \n  \n index is greater than or equal to the length of array.  \n  \n \\- or -  \n  \n The number of elements in the source  is greater than the available space from the index to the end of the destination array."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.Count
  id: Count
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: Count
  nameWithType: StateManagedCollection.Count
  fullName: System.Web.UI.StateManagedCollection.Count
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the number of elements contained in the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "The number of elements contained in the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see>."
  overload: System.Web.UI.StateManagedCollection.Count*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.CreateKnownType(System.Int32)
  id: CreateKnownType(System.Int32)
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: CreateKnownType(Int32)
  nameWithType: StateManagedCollection.CreateKnownType(Int32)
  fullName: System.Web.UI.StateManagedCollection.CreateKnownType(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "When overridden in a derived class, creates an instance of a class that implements <see cref=&quot;T:System.Web.UI.IStateManager&quot;></see>. The type of object created is based on the specified member of the collection returned by the &lt;xref:System.Web.UI.StateManagedCollection.GetKnownTypes%2A&gt; method."
  remarks: "The CreateKnownType method is called internally by the <xref:System.Web.UI.StateManagedCollection> collection in its implementation of the <xref:System.Web.UI.StateManagedCollection.System%23Web%23UI%23IStateManager%23LoadViewState%2A?displayProperty=fullName> method. Derived collections override the CreateKnownType method to return a default instance of the <xref:System.Web.UI.IStateManager> type identified by the provided `index`, which maps to one of the types returned by the <xref:System.Web.UI.StateManagedCollection.GetKnownTypes%2A> method."
  example:
  - "The following code example demonstrates how a strongly typed <xref:System.Web.UI.StateManagedCollection> class implements the CreateKnownType method. The `CycleCollection` implementation of CreateKnownType returns the default instance of either a `Bicycle` or `Tricycle` object, depending on the index passed. This code example is part of a larger example provided for the <xref:System.Web.UI.StateManagedCollection> class.  \n  \n [!code-cs[Samples.AspNet.CycleCollection#2](~/add/codesnippet/CSharp/m-system.web.ui.stateman_1_1.cs)]\n [!code-vb[Samples.AspNet.CycleCollection#2](~/add/codesnippet/VisualBasic/m-system.web.ui.stateman_1_1.vb)]"
  syntax:
    content: protected virtual object CreateKnownType (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The index, from the ordered list of types returned by <xref:System.Web.UI.StateManagedCollection.GetKnownTypes%2A>, of the type of  to create."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Web.UI.StateManagedCollection.CreateKnownType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "In all cases when not overridden in a derived class."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: StateManagedCollection.GetEnumerator()
  fullName: System.Web.UI.StateManagedCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Returns an iterator that iterates through the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.Web.UI.StateManagedCollection.GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.GetKnownTypes
  id: GetKnownTypes
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: GetKnownTypes()
  nameWithType: StateManagedCollection.GetKnownTypes()
  fullName: System.Web.UI.StateManagedCollection.GetKnownTypes()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "When overridden in a derived class, gets an array of <see cref=&quot;T:System.Web.UI.IStateManager&quot;></see> types that the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection can contain."
  remarks: "The GetKnownTypes method is called internally by the <xref:System.Web.UI.StateManagedCollection> collection in its implementation of the <xref:System.Web.UI.StateManagedCollection.System%23Web%23UI%23IStateManager%23SaveViewState%2A> method. Derived collections override the GetKnownTypes method to return an array of <xref:System.Type> objects that represent the types the collection can contain."
  example:
  - "The following code example demonstrates how a strongly typed <xref:System.Web.UI.StateManagedCollection> class implements the GetKnownTypes method. The `CycleCollection` implementation of GetKnownTypes returns a <xref:System.Type> array of known types, including `Bicycle` and `Tricycle` types. This code example is part of a larger example provided for the <xref:System.Web.UI.StateManagedCollection> class.  \n  \n [!code-cs[Samples.AspNet.CycleCollection#2](~/add/codesnippet/CSharp/m-system.web.ui.stateman_0_1.cs)]\n [!code-vb[Samples.AspNet.CycleCollection#2](~/add/codesnippet/VisualBasic/m-system.web.ui.stateman_0_1.vb)]"
  syntax:
    content: protected virtual Type[] GetKnownTypes ();
    parameters: []
    return:
      type: System.Type[]
      description: "To be added."
  overload: System.Web.UI.StateManagedCollection.GetKnownTypes*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.OnClear
  id: OnClear
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: OnClear()
  nameWithType: StateManagedCollection.OnClear()
  fullName: System.Web.UI.StateManagedCollection.OnClear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "When overridden in a derived class, performs additional work before the &lt;xref:System.Web.UI.StateManagedCollection.Clear%2A&gt; method removes all items from the collection."
  remarks: "Collections derived from <xref:System.Web.UI.StateManagedCollection> can override the OnClear method to perform any additional work before all items are removed from the collection using the <xref:System.Web.UI.StateManagedCollection.Clear%2A> method."
  syntax:
    content: protected virtual void OnClear ();
    parameters: []
  overload: System.Web.UI.StateManagedCollection.OnClear*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.OnClearComplete
  id: OnClearComplete
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: OnClearComplete()
  nameWithType: StateManagedCollection.OnClearComplete()
  fullName: System.Web.UI.StateManagedCollection.OnClearComplete()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "When overridden in a derived class, performs additional work after the &lt;xref:System.Web.UI.StateManagedCollection.Clear%2A&gt; method finishes removing all items from the collection."
  remarks: "Collections derived from <xref:System.Web.UI.StateManagedCollection> can override the OnClearComplete method to perform any additional work after all items are removed from the collection using the <xref:System.Web.UI.StateManagedCollection.Clear%2A> method."
  syntax:
    content: protected virtual void OnClearComplete ();
    parameters: []
  overload: System.Web.UI.StateManagedCollection.OnClearComplete*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.OnInsert(System.Int32,System.Object)
  id: OnInsert(System.Int32,System.Object)
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: OnInsert(Int32,Object)
  nameWithType: StateManagedCollection.OnInsert(Int32,Object)
  fullName: System.Web.UI.StateManagedCollection.OnInsert(Int32,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "When overridden in a derived class, performs additional work before the &lt;xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Insert%2A&gt; or &lt;xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Add%2A&gt; method adds an item to the collection."
  remarks: "Collections derived from <xref:System.Web.UI.StateManagedCollection> can override the OnInsert method to perform any additional work before an item is added to the collection using the <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Add%2A> or <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Insert%2A> method."
  syntax:
    content: protected virtual void OnInsert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index at which `value` should be inserted by the <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Insert%2A> method."
    - id: value
      type: System.Object
      description: "The object to insert into the ."
  overload: System.Web.UI.StateManagedCollection.OnInsert*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.OnInsertComplete(System.Int32,System.Object)
  id: OnInsertComplete(System.Int32,System.Object)
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: OnInsertComplete(Int32,Object)
  nameWithType: StateManagedCollection.OnInsertComplete(Int32,Object)
  fullName: System.Web.UI.StateManagedCollection.OnInsertComplete(Int32,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "When overridden in a derived class, performs additional work after the &lt;xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Insert%2A&gt; or &lt;xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Add%2A&gt; method adds an item to the collection."
  remarks: "Collections derived from <xref:System.Web.UI.StateManagedCollection> can override the OnInsertComplete method to perform any additional work after an item is added to the collection using the <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Add%2A> or <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Insert%2A> method."
  syntax:
    content: protected virtual void OnInsertComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index at which `value` is inserted by the <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Insert%2A> method."
    - id: value
      type: System.Object
      description: "The object inserted into the ."
  overload: System.Web.UI.StateManagedCollection.OnInsertComplete*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.OnRemove(System.Int32,System.Object)
  id: OnRemove(System.Int32,System.Object)
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: OnRemove(Int32,Object)
  nameWithType: StateManagedCollection.OnRemove(Int32,Object)
  fullName: System.Web.UI.StateManagedCollection.OnRemove(Int32,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "When overridden in a derived class, performs additional work before the &lt;xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Remove%2A&gt; or &lt;xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23RemoveAt%2A&gt; method removes the specified item from the collection."
  remarks: "Collections derived from <xref:System.Web.UI.StateManagedCollection> can override the OnRemove method to perform any additional work before an item is removed from the collection using the <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Remove%2A> or <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23RemoveAt%2A> method."
  syntax:
    content: protected virtual void OnRemove (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the item to remove, which is used when <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23RemoveAt%2A> is called."
    - id: value
      type: System.Object
      description: "The object to remove from the , which is used when <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Remove%2A> is called."
  overload: System.Web.UI.StateManagedCollection.OnRemove*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.OnRemoveComplete(System.Int32,System.Object)
  id: OnRemoveComplete(System.Int32,System.Object)
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: OnRemoveComplete(Int32,Object)
  nameWithType: StateManagedCollection.OnRemoveComplete(Int32,Object)
  fullName: System.Web.UI.StateManagedCollection.OnRemoveComplete(Int32,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "When overridden in a derived class, performs additional work after the &lt;xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Remove%2A&gt; or &lt;xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23RemoveAt%2A&gt; method removes the specified item from the collection."
  remarks: "Collections derived from <xref:System.Web.UI.StateManagedCollection> can override the OnRemoveComplete method to perform any additional work after an item is removed from the collection using the <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Remove%2A> or <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23RemoveAt%2A> method."
  syntax:
    content: protected virtual void OnRemoveComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the item to remove, which is used when <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23RemoveAt%2A> is called."
    - id: value
      type: System.Object
      description: "The object removed from the , which is used when <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Remove%2A> is called."
  overload: System.Web.UI.StateManagedCollection.OnRemoveComplete*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.OnValidate(System.Object)
  id: OnValidate(System.Object)
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: OnValidate(Object)
  nameWithType: StateManagedCollection.OnValidate(Object)
  fullName: System.Web.UI.StateManagedCollection.OnValidate(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "When overridden in a derived class, validates an element of the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection."
  remarks: "The OnValidate method is called to validate the object manipulated through the <xref:System.Web.UI.StateManagedCollection> implementation of the <xref:System.Collections.IList> interface methods. The default implementation is to verify that the object manipulated by the collection is not `null`; however, collections derived from <xref:System.Web.UI.StateManagedCollection> override the OnValidate method to perform any additional validation, such as type-checking."
  syntax:
    content: protected virtual void OnValidate (object value);
    parameters:
    - id: value
      type: System.Object
      description: "The  to validate."
  overload: System.Web.UI.StateManagedCollection.OnValidate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    value is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.SetDirty
  id: SetDirty
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: SetDirty()
  nameWithType: StateManagedCollection.SetDirty()
  fullName: System.Web.UI.StateManagedCollection.SetDirty()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Forces the entire <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection to be serialized into view state."
  remarks: "The SetDirty method forces the <xref:System.Web.UI.StateManagedCollection> collection to be serialized completely (whereas the <xref:System.Web.UI.StateManagedCollection.System%23Web%23UI%23IStateManager%23SaveViewState%2A> method saves only the change information). This is useful when a collection has changed in a significant way and change information is insufficient to recreate the object in memory from view state."
  syntax:
    content: public void SetDirty ();
    parameters: []
  overload: System.Web.UI.StateManagedCollection.SetDirty*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.SetDirtyObject(System.Object)
  id: SetDirtyObject(System.Object)
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: SetDirtyObject(Object)
  nameWithType: StateManagedCollection.SetDirtyObject(Object)
  fullName: System.Web.UI.StateManagedCollection.SetDirtyObject(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "When overridden in a derived class, instructs an <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;></xref> contained by the collection to record its entire state to view state, rather than recording only change information."
  remarks: "The SetDirtyObject method is called internally by the <xref:System.Web.UI.StateManagedCollection.System%23Web%23UI%23IStateManager%23SaveViewState%2A>, <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Add%2A>, and <xref:System.Web.UI.StateManagedCollection.System%23Collections%23IList%23Insert%2A> methods."
  example:
  - "The following code example demonstrates how a strongly typed <xref:System.Web.UI.StateManagedCollection> class implements the abstract SetDirtyObject method. The `CycleCollection` uses a <xref:System.Web.UI.StateBag> object to store its view-state information, and simply delegates the call to the <xref:System.Web.UI.StateBag.SetDirty%2A> method of the <xref:System.Web.UI.StateBag> object. This code example is part of a larger example provided for the <xref:System.Web.UI.StateManagedCollection> class.  \n  \n [!code-cs[Samples.AspNet.CycleCollection#2](~/add/codesnippet/CSharp/m-system.web.ui.stateman_2_1.cs)]\n [!code-vb[Samples.AspNet.CycleCollection#2](~/add/codesnippet/VisualBasic/m-system.web.ui.stateman_2_1.vb)]"
  syntax:
    content: protected abstract void SetDirtyObject (object o);
    parameters:
    - id: o
      type: System.Object
      description: "The  that should serialize itself completely."
  overload: System.Web.UI.StateManagedCollection.SetDirtyObject*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.ICollection.Count
  nameWithType: StateManagedCollection.System.Collections.ICollection.Count
  fullName: System.Web.UI.StateManagedCollection.System.Collections.ICollection.Count
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the number of elements contained in the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection."
  syntax:
    content: int System.Collections.ICollection.Count { get; }
    return:
      type: System.Int32
      description: "The number of elements in the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see>."
  overload: System.Web.UI.StateManagedCollection.System#Collections#ICollection#Count*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: StateManagedCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.Web.UI.StateManagedCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection is synchronized (thread safe). This method returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> in all cases."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> in all cases."
  overload: System.Web.UI.StateManagedCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: StateManagedCollection.System.Collections.ICollection.SyncRoot
  fullName: System.Web.UI.StateManagedCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets an object that can be used to synchronize access to the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection. This method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> in all cases."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> in all cases."
  overload: System.Web.UI.StateManagedCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: StateManagedCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Returns an iterator that iterates through the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.Web.UI.StateManagedCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: StateManagedCollection.System.Collections.IList.Add(Object)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Adds an item to the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection."
  remarks: "The <xref:System.Web.UI.StateManagedCollection.OnValidate%2A> and <xref:System.Web.UI.StateManagedCollection.OnInsert%2A> methods are called before the element is added to the collection, and the <xref:System.Web.UI.StateManagedCollection.OnInsertComplete%2A> method is called after the element is added."
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Theto add to the ."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Web.UI.StateManagedCollection.System#Collections#IList#Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified value is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IList.Clear()
  nameWithType: StateManagedCollection.System.Collections.IList.Clear()
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Clear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Removes all items from the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection."
  remarks: "The <xref:System.Web.UI.StateManagedCollection.OnClear%2A> method is called before the <xref:System.Web.UI.StateManagedCollection.Clear%2A> method is called, and the <xref:System.Web.UI.StateManagedCollection.OnClearComplete%2A> method is called after <xref:System.Web.UI.StateManagedCollection.Clear%2A> has finished removing elements from the collection."
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: System.Web.UI.StateManagedCollection.System#Collections#IList#Clear*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: StateManagedCollection.System.Collections.IList.Contains(Object)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determines whether the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection contains a specific value."
  remarks: "The <xref:System.Web.UI.StateManagedCollection.OnValidate%2A> method is called to validate `value` before the collection is checked."
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "The  to locate in the ."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Web.UI.StateManagedCollection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: StateManagedCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Determines the index of a specified item in the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection."
  remarks: "The <xref:System.Web.UI.StateManagedCollection.OnValidate%2A> method is called to validate `value` before the index is returned."
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "The object to locate in the ."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Web.UI.StateManagedCollection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: StateManagedCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Inserts an item into the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection at the specified index."
  remarks: "If `index` is -1, `value` is appended to the beginning of the <xref:System.Web.UI.StateManagedCollection> collection. If `index` equals the number of items in the collection, `value` is appended to the end of the collection."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index at which `value` should be inserted."
    - id: value
      type: System.Object
      description: "The object to insert into the ."
  overload: System.Web.UI.StateManagedCollection.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The specified index is out of range of the collection."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The  is read-only."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified value is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: StateManagedCollection.System.Collections.IList.IsFixedSize
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection has a fixed size. This method returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> in all cases."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> in all cases."
  overload: System.Web.UI.StateManagedCollection.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: StateManagedCollection.System.Collections.IList.IsReadOnly
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection is read-only."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> is read-only; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.StateManagedCollection.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: StateManagedCollection.System.Collections.IList.Item(Int32)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets the <see cref=&quot;T:System.Web.UI.IStateManager&quot;></see> element at the specified index."
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the element to get."
    return:
      type: System.Object
      description: "The element at the specified index."
  overload: System.Web.UI.StateManagedCollection.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The specified index is out of range of the collection."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: StateManagedCollection.System.Collections.IList.Remove(Object)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Removes the first occurrence of the specified object from the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection."
  remarks: "The <xref:System.Web.UI.StateManagedCollection.OnValidate%2A> method is called to validate `value` before the value is removed from the collection. The <xref:System.Web.UI.StateManagedCollection.OnRemove%2A> method is called before the object is removed, and the <xref:System.Web.UI.StateManagedCollection.OnRemoveComplete%2A> method is called after the object is removed."
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "The object to remove from the ."
  overload: System.Web.UI.StateManagedCollection.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The  is read-only."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: StateManagedCollection.System.Collections.IList.RemoveAt(Int32)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Removes the <see cref=&quot;T:System.Web.UI.IStateManager&quot;></see> element at the specified index."
  remarks: "The <xref:System.Web.UI.StateManagedCollection.OnValidate%2A> method is called to validate `value` before the value is removed from the collection. The <xref:System.Web.UI.StateManagedCollection.OnRemove%2A> method is called before the object is removed, and the <xref:System.Web.UI.StateManagedCollection.OnRemoveComplete%2A> method is called after the object is removed."
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the item to remove."
  overload: System.Web.UI.StateManagedCollection.System#Collections#IList#RemoveAt*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The  is read-only."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#IsTrackingViewState
  id: System#Web#UI#IStateManager#IsTrackingViewState
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Web.UI.IStateManager.IsTrackingViewState
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.IsTrackingViewState
  fullName: System.Web.UI.StateManagedCollection.System.Web.UI.IStateManager.IsTrackingViewState
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Gets a value indicating whether the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection is saving changes to its view state."
  syntax:
    content: bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the collection is marked to save its own state and the state of all the <see cref=&quot;T:System.Web.UI.IStateManager&quot;></see> items it contains; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#IsTrackingViewState*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#LoadViewState(System.Object)
  id: System#Web#UI#IStateManager#LoadViewState(System.Object)
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Web.UI.IStateManager.LoadViewState(Object)
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.LoadViewState(Object)
  fullName: System.Web.UI.StateManagedCollection.System.Web.UI.IStateManager.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Restores the previously saved view state of the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection and the <see cref=&quot;T:System.Web.UI.IStateManager&quot;></see> items it contains."
  remarks: "This method restores view-state information that was saved by the <xref:System.Web.UI.StateManagedCollection.System%23Web%23UI%23IStateManager%23SaveViewState%2A> method.       View state is the accumulation of the values of a server control&quot;s properties. These values are automatically placed in the server control&quot;s <xref:System.Web.UI.Control.ViewState%2A> property, which is an instance of the <xref:System.Web.UI.StateBag> class. This property&quot;s value is then persisted to a string object after the save state stage of the server control life cycle. For more information, see [NIB: ASP.NET Web Server Controls](http://msdn.microsoft.com/en-us/e18eb2f2-cf00-47ae-b1a1-dfc188a6dea1).       This method is used primarily by control developers. You can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](../Topic/ASP.NET%20State%20Management%20Overview.md)."
  syntax:
    content: void IStateManager.LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "An object that represents the collection and collection elements&quot; state to restore."
  overload: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#LoadViewState*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#SaveViewState
  id: System#Web#UI#IStateManager#SaveViewState
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Web.UI.IStateManager.SaveViewState()
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.SaveViewState()
  fullName: System.Web.UI.StateManagedCollection.System.Web.UI.IStateManager.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Saves the changes to the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection and each <see cref=&quot;T:System.Web.UI.IStateManager&quot;></see> object it contains since the time the page was posted back to the server."
  remarks: "This method is used primarily by control developers.       View state is the accumulation of the values of a server control&quot;s properties. These values are automatically placed in the server control&quot;s <xref:System.Web.UI.Control.ViewState%2A> property, which is an instance of the <xref:System.Web.UI.StateBag> class. This property&quot;s value is then persisted to a string object after the save state stage of the server control life cycle. For more information, see [NIB: ASP.NET Web Server Controls](http://msdn.microsoft.com/en-us/e18eb2f2-cf00-47ae-b1a1-dfc188a6dea1).       When view state is saved, this string object is returned to the client as a variable that is stored in an HTML hidden element (`<input type=&quot;hidden&quot;>`). When you author custom server controls, you can improve efficiency by overriding this method and modifying your server control&quot;s <xref:System.Web.UI.Control.ViewState%2A> property. For more information, see [NIB: ASP.NET Web Server Controls](http://msdn.microsoft.com/en-us/e18eb2f2-cf00-47ae-b1a1-dfc188a6dea1) and[ASP.NET State Management Overview](../Topic/ASP.NET%20State%20Management%20Overview.md)."
  syntax:
    content: object IStateManager.SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "To be added."
  overload: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#SaveViewState*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#TrackViewState
  id: System#Web#UI#IStateManager#TrackViewState
  isEii: true
  parent: System.Web.UI.StateManagedCollection
  langs:
  - csharp
  name: System.Web.UI.IStateManager.TrackViewState()
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.TrackViewState()
  fullName: System.Web.UI.StateManagedCollection.System.Web.UI.IStateManager.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Causes the <see cref=&quot;T:System.Web.UI.StateManagedCollection&quot;></see> collection and each of the <see cref=&quot;T:System.Web.UI.IStateManager&quot;></see> objects it contains to track changes to their view state so they can be persisted across requests for the same page."
  remarks: 'View state is the accumulation of the values of a server control''s properties. These values are automatically placed in the server control''s <xref:System.Web.UI.Control.ViewState%2A> property, which is an instance of the <xref:System.Web.UI.StateBag> class. This property''s value is then persisted to a string object after the save state stage of the server control life cycle. For more information, see [NIB: ASP.NET Web Server Controls](http://msdn.microsoft.com/en-us/e18eb2f2-cf00-47ae-b1a1-dfc188a6dea1).'
  syntax:
    content: void IStateManager.TrackViewState ();
    parameters: []
  overload: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#TrackViewState*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.StateManagedCollection.#ctor
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: StateManagedCollection()
  nameWithType: StateManagedCollection.StateManagedCollection()
  fullName: System.Web.UI.StateManagedCollection.StateManagedCollection()
- uid: System.Web.UI.StateManagedCollection.Clear
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: Clear()
  nameWithType: StateManagedCollection.Clear()
  fullName: System.Web.UI.StateManagedCollection.Clear()
- uid: System.Web.UI.StateManagedCollection.CopyTo(System.Array,System.Int32)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: StateManagedCollection.CopyTo(Array,Int32)
  fullName: System.Web.UI.StateManagedCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.StateManagedCollection.Count
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: Count
  nameWithType: StateManagedCollection.Count
  fullName: System.Web.UI.StateManagedCollection.Count
- uid: System.Web.UI.StateManagedCollection.CreateKnownType(System.Int32)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: CreateKnownType(Int32)
  nameWithType: StateManagedCollection.CreateKnownType(Int32)
  fullName: System.Web.UI.StateManagedCollection.CreateKnownType(Int32)
- uid: System.Web.UI.StateManagedCollection.GetEnumerator
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: StateManagedCollection.GetEnumerator()
  fullName: System.Web.UI.StateManagedCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Web.UI.StateManagedCollection.GetKnownTypes
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: GetKnownTypes()
  nameWithType: StateManagedCollection.GetKnownTypes()
  fullName: System.Web.UI.StateManagedCollection.GetKnownTypes()
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.UI.StateManagedCollection.OnClear
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnClear()
  nameWithType: StateManagedCollection.OnClear()
  fullName: System.Web.UI.StateManagedCollection.OnClear()
- uid: System.Web.UI.StateManagedCollection.OnClearComplete
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnClearComplete()
  nameWithType: StateManagedCollection.OnClearComplete()
  fullName: System.Web.UI.StateManagedCollection.OnClearComplete()
- uid: System.Web.UI.StateManagedCollection.OnInsert(System.Int32,System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnInsert(Int32,Object)
  nameWithType: StateManagedCollection.OnInsert(Int32,Object)
  fullName: System.Web.UI.StateManagedCollection.OnInsert(Int32,Object)
- uid: System.Web.UI.StateManagedCollection.OnInsertComplete(System.Int32,System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnInsertComplete(Int32,Object)
  nameWithType: StateManagedCollection.OnInsertComplete(Int32,Object)
  fullName: System.Web.UI.StateManagedCollection.OnInsertComplete(Int32,Object)
- uid: System.Web.UI.StateManagedCollection.OnRemove(System.Int32,System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnRemove(Int32,Object)
  nameWithType: StateManagedCollection.OnRemove(Int32,Object)
  fullName: System.Web.UI.StateManagedCollection.OnRemove(Int32,Object)
- uid: System.Web.UI.StateManagedCollection.OnRemoveComplete(System.Int32,System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnRemoveComplete(Int32,Object)
  nameWithType: StateManagedCollection.OnRemoveComplete(Int32,Object)
  fullName: System.Web.UI.StateManagedCollection.OnRemoveComplete(Int32,Object)
- uid: System.Web.UI.StateManagedCollection.OnValidate(System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnValidate(Object)
  nameWithType: StateManagedCollection.OnValidate(Object)
  fullName: System.Web.UI.StateManagedCollection.OnValidate(Object)
- uid: System.Web.UI.StateManagedCollection.SetDirty
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: SetDirty()
  nameWithType: StateManagedCollection.SetDirty()
  fullName: System.Web.UI.StateManagedCollection.SetDirty()
- uid: System.Web.UI.StateManagedCollection.SetDirtyObject(System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: SetDirtyObject(Object)
  nameWithType: StateManagedCollection.SetDirtyObject(Object)
  fullName: System.Web.UI.StateManagedCollection.SetDirtyObject(Object)
- uid: System.Web.UI.StateManagedCollection.System#Collections#ICollection#Count
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: StateManagedCollection.System.Collections.ICollection.Count
  fullName: System.Web.UI.StateManagedCollection.System.Collections.ICollection.Count
- uid: System.Web.UI.StateManagedCollection.System#Collections#ICollection#IsSynchronized
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: StateManagedCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.Web.UI.StateManagedCollection.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.StateManagedCollection.System#Collections#ICollection#SyncRoot
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: StateManagedCollection.System.Collections.ICollection.SyncRoot
  fullName: System.Web.UI.StateManagedCollection.System.Collections.ICollection.SyncRoot
- uid: System.Web.UI.StateManagedCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: StateManagedCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Add(System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: StateManagedCollection.System.Collections.IList.Add(Object)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Add(Object)
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Clear
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Clear()
  nameWithType: StateManagedCollection.System.Collections.IList.Clear()
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Clear()
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Contains(System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: StateManagedCollection.System.Collections.IList.Contains(Object)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Contains(Object)
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: StateManagedCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.IndexOf(Object)
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: StateManagedCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Insert(Int32,Object)
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#IsFixedSize
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: StateManagedCollection.System.Collections.IList.IsFixedSize
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.IsFixedSize
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#IsReadOnly
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: StateManagedCollection.System.Collections.IList.IsReadOnly
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.IsReadOnly
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Item(System.Int32)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: StateManagedCollection.System.Collections.IList.Item(Int32)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Item(Int32)
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Remove(System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: StateManagedCollection.System.Collections.IList.Remove(Object)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.Remove(Object)
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: StateManagedCollection.System.Collections.IList.RemoveAt(Int32)
  fullName: System.Web.UI.StateManagedCollection.System.Collections.IList.RemoveAt(Int32)
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#IsTrackingViewState
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Web.UI.IStateManager.IsTrackingViewState
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.IsTrackingViewState
  fullName: System.Web.UI.StateManagedCollection.System.Web.UI.IStateManager.IsTrackingViewState
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#LoadViewState(System.Object)
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Web.UI.IStateManager.LoadViewState(Object)
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.LoadViewState(Object)
  fullName: System.Web.UI.StateManagedCollection.System.Web.UI.IStateManager.LoadViewState(Object)
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#SaveViewState
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Web.UI.IStateManager.SaveViewState()
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.SaveViewState()
  fullName: System.Web.UI.StateManagedCollection.System.Web.UI.IStateManager.SaveViewState()
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#TrackViewState
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Web.UI.IStateManager.TrackViewState()
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.TrackViewState()
  fullName: System.Web.UI.StateManagedCollection.System.Web.UI.IStateManager.TrackViewState()
- uid: System.Web.UI.StateManagedCollection.#ctor*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: StateManagedCollection
  nameWithType: StateManagedCollection.StateManagedCollection
- uid: System.Web.UI.StateManagedCollection.Clear*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: Clear
  nameWithType: StateManagedCollection.Clear
- uid: System.Web.UI.StateManagedCollection.CopyTo*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: CopyTo
  nameWithType: StateManagedCollection.CopyTo
- uid: System.Web.UI.StateManagedCollection.Count*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: Count
  nameWithType: StateManagedCollection.Count
- uid: System.Web.UI.StateManagedCollection.CreateKnownType*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: CreateKnownType
  nameWithType: StateManagedCollection.CreateKnownType
- uid: System.Web.UI.StateManagedCollection.GetEnumerator*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: StateManagedCollection.GetEnumerator
- uid: System.Web.UI.StateManagedCollection.GetKnownTypes*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: GetKnownTypes
  nameWithType: StateManagedCollection.GetKnownTypes
- uid: System.Web.UI.StateManagedCollection.OnClear*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnClear
  nameWithType: StateManagedCollection.OnClear
- uid: System.Web.UI.StateManagedCollection.OnClearComplete*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnClearComplete
  nameWithType: StateManagedCollection.OnClearComplete
- uid: System.Web.UI.StateManagedCollection.OnInsert*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnInsert
  nameWithType: StateManagedCollection.OnInsert
- uid: System.Web.UI.StateManagedCollection.OnInsertComplete*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnInsertComplete
  nameWithType: StateManagedCollection.OnInsertComplete
- uid: System.Web.UI.StateManagedCollection.OnRemove*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnRemove
  nameWithType: StateManagedCollection.OnRemove
- uid: System.Web.UI.StateManagedCollection.OnRemoveComplete*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnRemoveComplete
  nameWithType: StateManagedCollection.OnRemoveComplete
- uid: System.Web.UI.StateManagedCollection.OnValidate*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: OnValidate
  nameWithType: StateManagedCollection.OnValidate
- uid: System.Web.UI.StateManagedCollection.SetDirty*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: SetDirty
  nameWithType: StateManagedCollection.SetDirty
- uid: System.Web.UI.StateManagedCollection.SetDirtyObject*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: SetDirtyObject
  nameWithType: StateManagedCollection.SetDirtyObject
- uid: System.Web.UI.StateManagedCollection.System#Collections#ICollection#Count*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: StateManagedCollection.System.Collections.ICollection.Count
- uid: System.Web.UI.StateManagedCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: StateManagedCollection.System.Collections.ICollection.IsSynchronized
- uid: System.Web.UI.StateManagedCollection.System#Collections#ICollection#SyncRoot*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: StateManagedCollection.System.Collections.ICollection.SyncRoot
- uid: System.Web.UI.StateManagedCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: StateManagedCollection.System.Collections.IEnumerable.GetEnumerator
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Add*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: StateManagedCollection.System.Collections.IList.Add
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Clear*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: StateManagedCollection.System.Collections.IList.Clear
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Contains*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: StateManagedCollection.System.Collections.IList.Contains
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#IndexOf*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: StateManagedCollection.System.Collections.IList.IndexOf
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Insert*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: StateManagedCollection.System.Collections.IList.Insert
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#IsFixedSize*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: StateManagedCollection.System.Collections.IList.IsFixedSize
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#IsReadOnly*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: StateManagedCollection.System.Collections.IList.IsReadOnly
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Item*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: StateManagedCollection.System.Collections.IList.Item
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#Remove*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: StateManagedCollection.System.Collections.IList.Remove
- uid: System.Web.UI.StateManagedCollection.System#Collections#IList#RemoveAt*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: StateManagedCollection.System.Collections.IList.RemoveAt
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#IsTrackingViewState*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Web.UI.IStateManager.IsTrackingViewState
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.IsTrackingViewState
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#LoadViewState*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Web.UI.IStateManager.LoadViewState
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.LoadViewState
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#SaveViewState*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Web.UI.IStateManager.SaveViewState
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.SaveViewState
- uid: System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#TrackViewState*
  parent: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Web.UI.IStateManager.TrackViewState
  nameWithType: StateManagedCollection.System.Web.UI.IStateManager.TrackViewState
