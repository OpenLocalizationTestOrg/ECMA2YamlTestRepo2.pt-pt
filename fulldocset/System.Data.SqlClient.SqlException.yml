### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlException
  id: SqlException
  children:
  - System.Data.SqlClient.SqlException.Class
  - System.Data.SqlClient.SqlException.ClientConnectionId
  - System.Data.SqlClient.SqlException.Errors
  - System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.SqlClient.SqlException.LineNumber
  - System.Data.SqlClient.SqlException.Number
  - System.Data.SqlClient.SqlException.Procedure
  - System.Data.SqlClient.SqlException.Server
  - System.Data.SqlClient.SqlException.Source
  - System.Data.SqlClient.SqlException.State
  - System.Data.SqlClient.SqlException.ToString
  langs:
  - csharp
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
  type: Class
  summary: "The exception that is thrown when SQL Server returns a warning or error. This class cannot be inherited."
  remarks: "This class is created whenever the .NET Framework Data Provider for SQL Server encounters an error generated from the server. (Client side errors are thrown as standard common language runtime exceptions.) SqlException always contains at least one instance of <xref:System.Data.SqlClient.SqlError>.       Messages that have a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement.       The <xref:System.Data.SqlClient.SqlConnection> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <xref:System.Data.SqlClient.SqlConnection>. However, the user can reopen the connection and continue. In both cases, a SqlException is generated by the method executing the command.       For information about the warning and informational messages sent by SQL Server, see the Troubleshooting section of SQL Server Books Online. The SqlException class maps to SQL Server severity.       The following is general information on handling exceptions. Your code should catch exceptions to prevent the application from crashing and to allow displaying a relevant error message to the user.  You can use database transactions to ensure that the data is consistent regardless of what happens in the client application (including a crash). Features like System.Transaction.TransactionScope or the BeginTransaction method (in System.Data.OleDb.OleDbConnection, System.Data.ODBC.ODBCConnection, and System.Data.SqlClient.SqlConnection) ensure consistent data regardless of exceptions raised by a provider. Transactions can fail, so catch failures and retry the transaction.       Note that beginning with  .NET Framework 4.5, SqlException can return an inner <xref:System.ComponentModel.Win32Exception>.       The exception class of a .Net Framework data provider reports provider-specific errors. For example System.Data.Odbc has OdbcException, System.Data.OleDb has OleDbException, and System.Data.SqlClient has SqlException. For the best level of error detail, catch these exceptions and use the members of these exception classes to get details of the error.       In addition to the provider-specific errors, .NET Framework data provider types can raise .NET Framework exceptions such as System.OutOfMemoryException and System.Threading.ThreadAbortException. Recovery from these exceptions may not be possible.       Bad input can cause a .NET Framework data provider type to raise an exception such as System.ArgumentException or System.IndexOutOfRangeException.  Calling a method at the wrong time can raise System.InvalidOperationException.       So, in general, write an exception handler that catches any provider specific exceptions as well as exceptions from the common language runtime.  These can be layered as follows:      ```   Try {      // code here   }   catch (SqlException odbcEx) {      // Handle more specific SqlException exception here.   }   catch (Exception ex) {      // Handle generic ones here.   }      ```       Or:      ```   Try {      // code here   }   catch (Exception ex) {      if (ex is SqlException) {         // Handle more specific SqlException exception here.      }      Else {         // Handle generic ones here.      }   }      ```       It is also possible for a .NET Framework data provider method call to fail on a thread pool thread with no user code on the stack. In this case, and when using asynchronous method calls, you must register the <xref:System.AppDomain.UnhandledException> event to handle those exceptions and avoid application crash."
  example:
  - "The following example generates a SqlException and then displays the exception.  \n  \n [!code-cs[Classic WebData SqlException Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._1_1.cs)]\n [!code-vb[Classic WebData SqlException Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._1_1.vb)]"
  syntax:
    content: 'public sealed class SqlException : System.Data.Common.DbException'
  inheritance:
  - System.Exception
  - System.SystemException
  - System.Runtime.InteropServices.ExternalException
  - System.Data.Common.DbException
  implements: []
  inheritedMembers:
  - System.Runtime.InteropServices.ExternalException.ErrorCode
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Class
  id: Class
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Class
  nameWithType: SqlException.Class
  fullName: System.Data.SqlClient.SqlException.Class
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gets the severity level of the error returned from the .NET Framework Data Provider for SQL Server."
  remarks: "Messages that have a severity level of 10 or less are informational and indicate problems caused by mistakes in information that a user has entered. Severity levels from 11 through 16 are generated by the user, and can be corrected by the user. Severity levels from 17 through 25 indicate software or hardware errors. When a level 17, 18, or 19 error occurs, you can continue working, although you might not be able to execute a particular statement.       The <xref:System.Data.SqlClient.SqlConnection> remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the <xref:System.Data.SqlClient.SqlConnection>. However, the user can reopen the connection and continue. In both cases, a <xref:System.Data.SqlClient.SqlException> is generated by the method executing the command.       For information about the warning and informational messages sent by SQL Server, see the Troubleshooting section of the SQL Server documentation.       This is a wrapper for the <xref:System.Data.SqlClient.SqlError.Class%2A> property of the first <xref:System.Data.SqlClient.SqlError> in the <xref:System.Data.SqlClient.SqlException.Errors%2A> property."
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._21_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._21_1.vb)]"
  syntax:
    content: public byte Class { get; }
    return:
      type: System.Byte
      description: "A value from 1 to 25 that indicates the severity level of the error."
  overload: System.Data.SqlClient.SqlException.Class*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.ClientConnectionId
  id: ClientConnectionId
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: ClientConnectionId
  nameWithType: SqlException.ClientConnectionId
  fullName: System.Data.SqlClient.SqlException.ClientConnectionId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Represents the client connection ID. For more information, see [Data Tracing in ADO.NET](~/add/includes/ajax-current-ext-md.md)."
  remarks: "For a code sample, see <xref:System.Data.SqlClient.SqlException.ToString%2A>."
  syntax:
    content: public Guid ClientConnectionId { get; }
    return:
      type: System.Guid
      description: "Returns the client connection ID."
  overload: System.Data.SqlClient.SqlException.ClientConnectionId*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Errors
  id: Errors
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Errors
  nameWithType: SqlException.Errors
  fullName: System.Data.SqlClient.SqlException.Errors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gets a collection of one or more <xref href=&quot;System.Data.SqlClient.SqlError&quot;></xref> objects that give detailed information about exceptions generated by the .NET Framework Data Provider for SQL Server."
  remarks: "The <xref:System.Data.SqlClient.SqlErrorCollection> class always contains at least one instance of the <xref:System.Data.SqlClient.SqlError> class.       This is a wrapper for <xref:System.Data.SqlClient.SqlErrorCollection>. For more information on SQL Server engine errors, see SQL Server Books Online."
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-vb[Classic WebData SqlError Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._59_1.vb)]\n [!code-cs[Classic WebData SqlError Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._59_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlErrorCollection Errors { get; }
    return:
      type: System.Data.SqlClient.SqlErrorCollection
      description: "The collected instances of the <xref href=&quot;System.Data.SqlClient.SqlError&quot;></xref> class."
  overload: System.Data.SqlClient.SqlException.Errors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SqlException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.SqlClient.SqlException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Sets the <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref> with information about the exception."
  remarks: '`GetObjectData` sets a `SerializationInfo` with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.'
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: si
      type: System.Runtime.Serialization.SerializationInfo
      description: "The <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref> that holds the serialized object data about the exception being thrown."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "The <xref:System.Runtime.Serialization.StreamingContext> that contains contextual information about the source or destination."
  overload: System.Data.SqlClient.SqlException.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>si</code> parameter is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.LineNumber
  id: LineNumber
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: LineNumber
  nameWithType: SqlException.LineNumber
  fullName: System.Data.SqlClient.SqlException.LineNumber
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gets the line number within the Transact-SQL command batch or stored procedure that generated the error."
  remarks: "The line numbering starts at 1; if 0 is returned, the line number is not applicable.       This is a wrapper for the <xref:System.Data.SqlClient.SqlError.LineNumber%2A> property of the first <xref:System.Data.SqlClient.SqlError> in the <xref:System.Data.SqlClient.SqlException.Errors%2A> property."
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: public int LineNumber { get; }
    return:
      type: System.Int32
      description: "The line number within the Transact-SQL command batch or stored procedure that generated the error."
  overload: System.Data.SqlClient.SqlException.LineNumber*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Number
  id: Number
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Number
  nameWithType: SqlException.Number
  fullName: System.Data.SqlClient.SqlException.Number
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gets a number that identifies the type of error."
  remarks: "This is a wrapper for the <xref:System.Data.SqlClient.SqlError.Number%2A> property of the first <xref:System.Data.SqlClient.SqlError> in the <xref:System.Data.SqlClient.SqlException.Errors%2A> property. For more information on SQL Server engine errors, see SQL Server Books Online."
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._13_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._13_1.vb)]"
  syntax:
    content: public int Number { get; }
    return:
      type: System.Int32
      description: "The number that identifies the type of error."
  overload: System.Data.SqlClient.SqlException.Number*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Procedure
  id: Procedure
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Procedure
  nameWithType: SqlException.Procedure
  fullName: System.Data.SqlClient.SqlException.Procedure
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gets the name of the stored procedure or remote procedure call (RPC) that generated the error."
  remarks: "This is a wrapper for the <xref:System.Data.SqlClient.SqlError.Procedure%2A> property of the first <xref:System.Data.SqlClient.SqlError> in the <xref:System.Data.SqlClient.SqlException.Errors%2A> property."
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._9_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._9_1.vb)]"
  syntax:
    content: public string Procedure { get; }
    return:
      type: System.String
      description: "The name of the stored procedure or RPC."
  overload: System.Data.SqlClient.SqlException.Procedure*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Server
  id: Server
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Server
  nameWithType: SqlException.Server
  fullName: System.Data.SqlClient.SqlException.Server
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gets the name of the computer that is running an instance of SQL Server that generated the error."
  remarks: "This is a wrapper for the <xref:System.Data.SqlClient.SqlError.Server%2A> property of the first <xref:System.Data.SqlClient.SqlError> in the <xref:System.Data.SqlClient.SqlException.Errors%2A> property."
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._25_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._25_1.vb)]"
  syntax:
    content: public string Server { get; }
    return:
      type: System.String
      description: "The name of the computer running an instance of SQL Server."
  overload: System.Data.SqlClient.SqlException.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Source
  id: Source
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Source
  nameWithType: SqlException.Source
  fullName: System.Data.SqlClient.SqlException.Source
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gets the name of the provider that generated the error."
  remarks: "This is a wrapper for the <xref:System.Data.SqlClient.SqlError.Source%2A> property of the first <xref:System.Data.SqlClient.SqlError> in the <xref:System.Data.SqlClient.SqlException.Errors%2A> property."
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._20_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._20_1.vb)]"
  syntax:
    content: public override string Source { get; }
    return:
      type: System.String
      description: "The name of the provider that generated the error."
  overload: System.Data.SqlClient.SqlException.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.State
  id: State
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: State
  nameWithType: SqlException.State
  fullName: System.Data.SqlClient.SqlException.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gets a numeric error code from SQL Server that represents an error, warning or &quot;no data found&quot; message. For more information about how to decode these values, see SQL Server Books Online."
  remarks: "This is a wrapper for the <xref:System.Data.SqlClient.SqlError.State%2A> property of the first <xref:System.Data.SqlClient.SqlError> in the <xref:System.Data.SqlClient.SqlException.Errors%2A> property."
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._61_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._61_1.vb)]"
  syntax:
    content: public byte State { get; }
    return:
      type: System.Byte
      description: "The number representing the error code."
  overload: System.Data.SqlClient.SqlException.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.ToString
  id: ToString
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: ToString()
  nameWithType: SqlException.ToString()
  fullName: System.Data.SqlClient.SqlException.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Returns a string that represents the current <xref href=&quot;System.Data.SqlClient.SqlException&quot;></xref> object, and includes the client connection ID (for more information, see <xref:System.Data.SqlClient.SqlException.ClientConnectionId*>)."
  remarks: ''
  example:
  - "The following C# example shows how a connection attempt to a valid server but non-existent database causes a <xref:System.Data.SqlClient.SqlException>, which includes the client connection ID:  \n  \n```  \nusing System.Data.SqlClient;  \nusing System;  \n  \npublic class A {  \n   public static void Main() {  \n      SqlConnection connection = new SqlConnection();  \n      connection.ConnectionString = \"Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true\";  \n      try {  \n         connection.Open();  \n      }  \n      catch (SqlException p) {  \n         Console.WriteLine(\"{0}\", p.ClientConnectionId);  \n         Console.WriteLine(\"{0}\", p.ToString());  \n      }  \n      connection.Close();  \n   }  \n}  \n```  \n  \n The following Visual Basic sample is functionally equivalent to the previous (C#) sample:  \n  \n```  \nImports System.Data.SqlClient  \nImports System  \n  \nModule Module1  \n  \n    Sub Main()  \n        Dim connection As New SqlConnection()  \n        connection.ConnectionString = \"Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true\"  \n        Try  \n            connection.Open()  \n        Catch p As SqlException  \n            Console.WriteLine(\"{0}\", p.ClientConnectionId)  \n            Console.WriteLine(\"{0}\", p.ToString())  \n        End Try  \n        connection.Close()  \n    End Sub  \n  \nEnd Module  \n```"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A string that represents the current <xref href=&quot;System.Data.SqlClient.SqlException&quot;></xref> object.<xref:System.String>."
  overload: System.Data.SqlClient.SqlException.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbException
  isExternal: false
  name: System.Data.Common.DbException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.SqlClient.SqlException.Class
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Class
  nameWithType: SqlException.Class
  fullName: System.Data.SqlClient.SqlException.Class
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.SqlClient.SqlException.ClientConnectionId
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlException.ClientConnectionId
  fullName: System.Data.SqlClient.SqlException.ClientConnectionId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlException.Errors
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Errors
  nameWithType: SqlException.Errors
  fullName: System.Data.SqlClient.SqlException.Errors
- uid: System.Data.SqlClient.SqlErrorCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlErrorCollection
  nameWithType: SqlErrorCollection
  fullName: System.Data.SqlClient.SqlErrorCollection
- uid: System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SqlException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.SqlClient.SqlException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.SqlClient.SqlException.LineNumber
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: LineNumber
  nameWithType: SqlException.LineNumber
  fullName: System.Data.SqlClient.SqlException.LineNumber
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlException.Number
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Number
  nameWithType: SqlException.Number
  fullName: System.Data.SqlClient.SqlException.Number
- uid: System.Data.SqlClient.SqlException.Procedure
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Procedure
  nameWithType: SqlException.Procedure
  fullName: System.Data.SqlClient.SqlException.Procedure
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlException.Server
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Server
  nameWithType: SqlException.Server
  fullName: System.Data.SqlClient.SqlException.Server
- uid: System.Data.SqlClient.SqlException.Source
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Source
  nameWithType: SqlException.Source
  fullName: System.Data.SqlClient.SqlException.Source
- uid: System.Data.SqlClient.SqlException.State
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: State
  nameWithType: SqlException.State
  fullName: System.Data.SqlClient.SqlException.State
- uid: System.Data.SqlClient.SqlException.ToString
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ToString()
  nameWithType: SqlException.ToString()
  fullName: System.Data.SqlClient.SqlException.ToString()
- uid: System.Data.SqlClient.SqlException.Class*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Class
  nameWithType: SqlException.Class
- uid: System.Data.SqlClient.SqlException.ClientConnectionId*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlException.ClientConnectionId
- uid: System.Data.SqlClient.SqlException.Errors*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Errors
  nameWithType: SqlException.Errors
- uid: System.Data.SqlClient.SqlException.GetObjectData*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: GetObjectData
  nameWithType: SqlException.GetObjectData
- uid: System.Data.SqlClient.SqlException.LineNumber*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: LineNumber
  nameWithType: SqlException.LineNumber
- uid: System.Data.SqlClient.SqlException.Number*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Number
  nameWithType: SqlException.Number
- uid: System.Data.SqlClient.SqlException.Procedure*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Procedure
  nameWithType: SqlException.Procedure
- uid: System.Data.SqlClient.SqlException.Server*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Server
  nameWithType: SqlException.Server
- uid: System.Data.SqlClient.SqlException.Source*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Source
  nameWithType: SqlException.Source
- uid: System.Data.SqlClient.SqlException.State*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: State
  nameWithType: SqlException.State
- uid: System.Data.SqlClient.SqlException.ToString*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ToString
  nameWithType: SqlException.ToString
