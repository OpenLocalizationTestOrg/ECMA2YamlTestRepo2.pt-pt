### YamlMime:ManagedReference
items:
- uid: System.Drawing.Drawing2D.CustomLineCap
  id: CustomLineCap
  children:
  - System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)
  - System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)
  - System.Drawing.Drawing2D.CustomLineCap.BaseCap
  - System.Drawing.Drawing2D.CustomLineCap.BaseInset
  - System.Drawing.Drawing2D.CustomLineCap.Clone
  - System.Drawing.Drawing2D.CustomLineCap.Dispose
  - System.Drawing.Drawing2D.CustomLineCap.Dispose(System.Boolean)
  - System.Drawing.Drawing2D.CustomLineCap.Finalize
  - System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)
  - System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)
  - System.Drawing.Drawing2D.CustomLineCap.StrokeJoin
  - System.Drawing.Drawing2D.CustomLineCap.WidthScale
  langs:
  - csharp
  name: CustomLineCap
  nameWithType: CustomLineCap
  fullName: System.Drawing.Drawing2D.CustomLineCap
  type: Class
  summary: "Encapsulates a custom user-defined line cap."
  remarks: "Line caps are used at the beginnings and ends of lines or curves drawn by GDI+ <xref:System.Drawing.Pen> objects. GDI+ supports several predefined cap styles, and also allows users to define their own cap styles. This class is used to create custom cap styles."
  example:
  - "The following example demonstrates how to use the CustomLineCap class. To run this example paste, the code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `DrawCaps` from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-vb[System.Drawing.Misc3#1](~/add/codesnippet/VisualBasic/t-system.drawing.drawing_4_1.vb)]\n [!code-cs[System.Drawing.Misc3#1](~/add/codesnippet/CSharp/t-system.drawing.drawing_4_1.cs)]"
  syntax:
    content: 'public class CustomLineCap : MarshalByRefObject, ICloneable, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.ICloneable
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)
  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)'
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: CustomLineCap(GraphicsPath,GraphicsPath)
  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath)
  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> class with the specified outline and fill."
  remarks: "<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of &quot;winding&quot; regardless of the fill mode specified for the operation.       The `fillPath` and `strokePath` parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, `fillPath` will be ignored. If `strokePath` is `null`, `fillPath` should intercept the negative y-axis."
  example:
  - "The following example demonstrates how to use the CustomLineCap constructor. To run this example, paste the code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `DrawCaps` from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-vb[System.Drawing.Misc3#1](~/add/codesnippet/VisualBasic/b65925ed-80d8-46c6-8585-_1.vb)]\n [!code-cs[System.Drawing.Misc3#1](~/add/codesnippet/CSharp/b65925ed-80d8-46c6-8585-_1.cs)]"
  syntax:
    content: public CustomLineCap (System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath);
    parameters:
    - id: fillPath
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "A  object that defines the fill for the custom cap."
    - id: strokePath
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "A  object that defines the outline of the custom cap."
  overload: System.Drawing.Drawing2D.CustomLineCap.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)
  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)'
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: CustomLineCap(GraphicsPath,GraphicsPath,LineCap)
  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap)
  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> class from the specified existing <see cref=&quot;T:System.Drawing.Drawing2D.LineCap&quot;></see> enumeration with the specified outline and fill."
  remarks: "<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of &quot;winding&quot; regardless of the fill mode specified for the operation.       The `fillPath` and `strokePath` parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, `fillPath` will be ignored. If `strokePath` is `null`, `fillPath` should intercept the negative y-axis."
  syntax:
    content: public CustomLineCap (System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath, System.Drawing.Drawing2D.LineCap baseCap);
    parameters:
    - id: fillPath
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "A  object that defines the fill for the custom cap."
    - id: strokePath
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "A  object that defines the outline of the custom cap."
    - id: baseCap
      type: System.Drawing.Drawing2D.LineCap
      description: "The line cap from which to create the custom cap."
  overload: System.Drawing.Drawing2D.CustomLineCap.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)
  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)'
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)
  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)
  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> class from the specified existing <see cref=&quot;T:System.Drawing.Drawing2D.LineCap&quot;></see> enumeration with the specified outline, fill, and inset."
  remarks: "<xref:System.Drawing.Drawing2D.CustomLineCap> uses a fill mode of &quot;winding&quot; regardless of the fill mode specified for the operation.       The `fillPath` and `strokePath` parameters cannot be used at the same time. One parameter must be passed a null value. If neither parameter is passed a null value, `fillPath` will be ignored. If `strokePath` is `null`, `fillPath` should intercept the negative y-axis."
  syntax:
    content: public CustomLineCap (System.Drawing.Drawing2D.GraphicsPath fillPath, System.Drawing.Drawing2D.GraphicsPath strokePath, System.Drawing.Drawing2D.LineCap baseCap, float baseInset);
    parameters:
    - id: fillPath
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "A  object that defines the fill for the custom cap."
    - id: strokePath
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "A  object that defines the outline of the custom cap."
    - id: baseCap
      type: System.Drawing.Drawing2D.LineCap
      description: "The line cap from which to create the custom cap."
    - id: baseInset
      type: System.Single
      description: "The distance between the cap and the line."
  overload: System.Drawing.Drawing2D.CustomLineCap.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.BaseCap
  id: BaseCap
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: BaseCap
  nameWithType: CustomLineCap.BaseCap
  fullName: System.Drawing.Drawing2D.CustomLineCap.BaseCap
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets or sets the <see cref=&quot;T:System.Drawing.Drawing2D.LineCap&quot;></see> enumeration on which this <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> is based."
  syntax:
    content: public System.Drawing.Drawing2D.LineCap BaseCap { get; set; }
    return:
      type: System.Drawing.Drawing2D.LineCap
      description: "The <see cref=&quot;T:System.Drawing.Drawing2D.LineCap&quot;></see> enumeration on which this <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> is based."
  overload: System.Drawing.Drawing2D.CustomLineCap.BaseCap*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.BaseInset
  id: BaseInset
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: BaseInset
  nameWithType: CustomLineCap.BaseInset
  fullName: System.Drawing.Drawing2D.CustomLineCap.BaseInset
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets or sets the distance between the cap and the line."
  syntax:
    content: public float BaseInset { get; set; }
    return:
      type: System.Single
      description: "The distance between the beginning of the cap and the end of the line."
  overload: System.Drawing.Drawing2D.CustomLineCap.BaseInset*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.Clone
  id: Clone
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: Clone()
  nameWithType: CustomLineCap.Clone()
  fullName: System.Drawing.Drawing2D.CustomLineCap.Clone()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates an exact copy of this <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see>."
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Creates a custom line cap by using the <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.CustomLineCap> object, `firstCap`,using the <xref:System.Drawing.Drawing2D.GraphicsPath> object just created.  \n  \n-   Creates a clone of `firstCap` by using the Clone method.  \n  \n-   Sets up the <xref:System.Drawing.Pen.CustomStartCap%2A> and <xref:System.Drawing.Pen.CustomEndCap%2A> properties of the <xref:System.Drawing.Pen> object, and uses that pen to draw a line and the custom caps to the screen.  \n  \n```vb#  \nPublic Sub CloneExample(e As PaintEventArgs)  \n Dim points As Point() = New Point(- 5, - 5) New Point(0, 0) _  \n New Point(5, - 5)  \n Dim capPath As New GraphicsPath()  \n ' Create a Path and add two lines to it,  \n ' forming a custom line cap.  \n capPath.AddLines(points)  \n ' Create a CustomLineCap object.  \n Dim firstCap As New CustomLineCap(Nothing, capPath)  \n ' Create a copy of firstCap.  \n Dim secondCap As CustomLineCap = CType(firstCap.Clone(), _  \n CustomLineCap)  \n ' Create a Pen object.  \n Dim pen As New Pen(Color.Black, 3F)  \n 'Set up the line.  \n Dim point1 As New Point(20, 20)  \n Dim point2 As New Point(100, 100)  \n ' Set up the caps.  \n pen.CustomStartCap = firstCap  \n pen.CustomEndCap = secondCap  \n ' Draw the line and caps to the screen.  \n e.Graphics.DrawLine(pen, point1, point2)  \n End Sub  \n```  \n  \n```c#  \nprivate void CloneExample(PaintEventArgs e)  \n {  \n // Create a Path and add two lines to it,  \n // forming a custom line cap.  \n Point[] points =  \n {  \n new Point(-5, -5),  \n new Point(0, 0),  \n new Point(5, -5)  \n };  \n GraphicsPath capPath = new GraphicsPath();  \n capPath.AddLines(points);  \n // Create a CustomLineCap object.  \n CustomLineCap firstCap = new CustomLineCap(null, capPath);  \n // Create a copy of firstCap.  \n CustomLineCap secondCap = (CustomLineCap)firstCap.Clone();  \n // Create a Pen object.  \n Pen pen = new Pen(Color.Black, 3.0f);  \n // Set up the line.  \n Point point1 = new Point(20, 20);  \n Point point2 = new Point(100, 100);  \n // Set up the caps.  \n pen.CustomStartCap = firstCap;  \n pen.CustomEndCap = secondCap;  \n // Draw the line and caps to the screen.  \n e.Graphics.DrawLine(pen, point1, point2);  \n }  \n```"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "To be added."
  overload: System.Drawing.Drawing2D.CustomLineCap.Clone*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.Dispose
  id: Dispose
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: Dispose()
  nameWithType: CustomLineCap.Dispose()
  fullName: System.Drawing.Drawing2D.CustomLineCap.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Releases all resources used by this <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> object."
  remarks: "Calling <xref:System.IDisposable.Dispose%2A> allows the resources used by this <xref:System.Drawing.Drawing2D.CustomLineCap> object to be reallocated for other purposes."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Drawing2D.CustomLineCap.Dispose*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: CustomLineCap.Dispose(Boolean)
  fullName: System.Drawing.Drawing2D.CustomLineCap.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Releases the unmanaged resources used by the <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> and optionally releases the managed resources."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n     to release both managed and unmanaged resources;  to release only unmanaged resources."
  overload: System.Drawing.Drawing2D.CustomLineCap.Dispose*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.Finalize
  id: Finalize
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: Finalize()
  nameWithType: CustomLineCap.Finalize()
  fullName: System.Drawing.Drawing2D.CustomLineCap.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Allows an <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> to attempt to free resources and perform other cleanup operations before the <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> is reclaimed by garbage collection."
  syntax:
    content: ~CustomLineCap ();
    parameters: []
  overload: System.Drawing.Drawing2D.CustomLineCap.Finalize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)
  id: GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: GetStrokeCaps(LineCap,LineCap)
  nameWithType: CustomLineCap.GetStrokeCaps(LineCap,LineCap)
  fullName: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(LineCap,LineCap)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets the caps used to start and end lines that make up this custom cap."
  remarks: ''
  example:
  - "The following example demonstrates how to use the GetStrokeCaps method. To run this example, paste the code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `DrawCaps` from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-vb[System.Drawing.Misc3#1](~/add/codesnippet/VisualBasic/ecbd86d4-445b-4466-aba2-_1.vb)]\n [!code-cs[System.Drawing.Misc3#1](~/add/codesnippet/CSharp/ecbd86d4-445b-4466-aba2-_1.cs)]"
  syntax:
    content: public void GetStrokeCaps (out System.Drawing.Drawing2D.LineCap startCap, out System.Drawing.Drawing2D.LineCap endCap);
    parameters:
    - id: startCap
      type: System.Drawing.Drawing2D.LineCap
      description: "The  enumeration used at the beginning of a line within this cap."
    - id: endCap
      type: System.Drawing.Drawing2D.LineCap
      description: "The  enumeration used at the end of a line within this cap."
  overload: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)
  id: SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: SetStrokeCaps(LineCap,LineCap)
  nameWithType: CustomLineCap.SetStrokeCaps(LineCap,LineCap)
  fullName: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(LineCap,LineCap)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Sets the caps used to start and end lines that make up this custom cap."
  remarks: ''
  example:
  - "The following example demonstrates how to use the SetStrokeCaps method. To run this example, paste the code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `DrawCaps` from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-vb[System.Drawing.Misc3#1](~/add/codesnippet/VisualBasic/fda6a751-fef5-4b7b-a5e4-_1.vb)]\n [!code-cs[System.Drawing.Misc3#1](~/add/codesnippet/CSharp/fda6a751-fef5-4b7b-a5e4-_1.cs)]"
  syntax:
    content: public void SetStrokeCaps (System.Drawing.Drawing2D.LineCap startCap, System.Drawing.Drawing2D.LineCap endCap);
    parameters:
    - id: startCap
      type: System.Drawing.Drawing2D.LineCap
      description: "The  enumeration used at the beginning of a line within this cap."
    - id: endCap
      type: System.Drawing.Drawing2D.LineCap
      description: "The  enumeration used at the end of a line within this cap."
  overload: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin
  id: StrokeJoin
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: StrokeJoin
  nameWithType: CustomLineCap.StrokeJoin
  fullName: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets or sets the <see cref=&quot;T:System.Drawing.Drawing2D.LineJoin&quot;></see> enumeration that determines how lines that compose this <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> object are joined."
  remarks: "This property specifies a <xref:System.Drawing.Drawing2D.LineJoin> enumeration that is used to join lines and curves that make up the stroked path of this <xref:System.Drawing.Drawing2D.CustomLineCap> object."
  syntax:
    content: public System.Drawing.Drawing2D.LineJoin StrokeJoin { get; set; }
    return:
      type: System.Drawing.Drawing2D.LineJoin
      description: "The <see cref=&quot;T:System.Drawing.Drawing2D.LineJoin&quot;></see> enumeration this <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> object uses to join lines."
  overload: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Drawing2D.CustomLineCap.WidthScale
  id: WidthScale
  parent: System.Drawing.Drawing2D.CustomLineCap
  langs:
  - csharp
  name: WidthScale
  nameWithType: CustomLineCap.WidthScale
  fullName: System.Drawing.Drawing2D.CustomLineCap.WidthScale
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets or sets the amount by which to scale this <see cref=&quot;T:System.Drawing.Drawing2D.CustomLineCap&quot;></see> Class object with respect to the width of the <see cref=&quot;T:System.Drawing.Pen&quot;></see> object."
  remarks: "This property specifies the multiple of the pen width by which to multiply the size of the custom cap. For example, if this property equals 1, the custom cap width is 10, the custom cap height is 5, and a line is drawn with a pen with a width of 3, then the cap is drawn 30 units wide and 15 units high. Setting this property to 3 causes the cap to be drawn 90 units wide and 45 units high."
  syntax:
    content: public float WidthScale { get; set; }
    return:
      type: System.Single
      description: "The amount by which to scale the cap."
  overload: System.Drawing.Drawing2D.CustomLineCap.WidthScale*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: CustomLineCap(GraphicsPath,GraphicsPath)
  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath)
  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap)
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: CustomLineCap(GraphicsPath,GraphicsPath,LineCap)
  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap)
  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap)
- uid: System.Drawing.Drawing2D.LineCap
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: LineCap
  nameWithType: LineCap
  fullName: System.Drawing.Drawing2D.LineCap
- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.LineCap,System.Single)
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)
  nameWithType: CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)
  fullName: System.Drawing.Drawing2D.CustomLineCap.CustomLineCap(GraphicsPath,GraphicsPath,LineCap,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Drawing2D.CustomLineCap.BaseCap
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: BaseCap
  nameWithType: CustomLineCap.BaseCap
  fullName: System.Drawing.Drawing2D.CustomLineCap.BaseCap
- uid: System.Drawing.Drawing2D.CustomLineCap.BaseInset
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: BaseInset
  nameWithType: CustomLineCap.BaseInset
  fullName: System.Drawing.Drawing2D.CustomLineCap.BaseInset
- uid: System.Drawing.Drawing2D.CustomLineCap.Clone
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: Clone()
  nameWithType: CustomLineCap.Clone()
  fullName: System.Drawing.Drawing2D.CustomLineCap.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Drawing.Drawing2D.CustomLineCap.Dispose
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: Dispose()
  nameWithType: CustomLineCap.Dispose()
  fullName: System.Drawing.Drawing2D.CustomLineCap.Dispose()
- uid: System.Drawing.Drawing2D.CustomLineCap.Dispose(System.Boolean)
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: CustomLineCap.Dispose(Boolean)
  fullName: System.Drawing.Drawing2D.CustomLineCap.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Drawing2D.CustomLineCap.Finalize
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: Finalize()
  nameWithType: CustomLineCap.Finalize()
  fullName: System.Drawing.Drawing2D.CustomLineCap.Finalize()
- uid: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(System.Drawing.Drawing2D.LineCap@,System.Drawing.Drawing2D.LineCap@)
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: GetStrokeCaps(LineCap,LineCap)
  nameWithType: CustomLineCap.GetStrokeCaps(LineCap,LineCap)
  fullName: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps(LineCap,LineCap)
- uid: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(System.Drawing.Drawing2D.LineCap,System.Drawing.Drawing2D.LineCap)
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: SetStrokeCaps(LineCap,LineCap)
  nameWithType: CustomLineCap.SetStrokeCaps(LineCap,LineCap)
  fullName: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps(LineCap,LineCap)
- uid: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: StrokeJoin
  nameWithType: CustomLineCap.StrokeJoin
  fullName: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin
- uid: System.Drawing.Drawing2D.LineJoin
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: LineJoin
  nameWithType: LineJoin
  fullName: System.Drawing.Drawing2D.LineJoin
- uid: System.Drawing.Drawing2D.CustomLineCap.WidthScale
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: WidthScale
  nameWithType: CustomLineCap.WidthScale
  fullName: System.Drawing.Drawing2D.CustomLineCap.WidthScale
- uid: System.Drawing.Drawing2D.CustomLineCap.#ctor*
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: CustomLineCap
  nameWithType: CustomLineCap.CustomLineCap
- uid: System.Drawing.Drawing2D.CustomLineCap.BaseCap*
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: BaseCap
  nameWithType: CustomLineCap.BaseCap
- uid: System.Drawing.Drawing2D.CustomLineCap.BaseInset*
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: BaseInset
  nameWithType: CustomLineCap.BaseInset
- uid: System.Drawing.Drawing2D.CustomLineCap.Clone*
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: Clone
  nameWithType: CustomLineCap.Clone
- uid: System.Drawing.Drawing2D.CustomLineCap.Dispose*
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: Dispose
  nameWithType: CustomLineCap.Dispose
- uid: System.Drawing.Drawing2D.CustomLineCap.Finalize*
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: Finalize
  nameWithType: CustomLineCap.Finalize
- uid: System.Drawing.Drawing2D.CustomLineCap.GetStrokeCaps*
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: GetStrokeCaps
  nameWithType: CustomLineCap.GetStrokeCaps
- uid: System.Drawing.Drawing2D.CustomLineCap.SetStrokeCaps*
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: SetStrokeCaps
  nameWithType: CustomLineCap.SetStrokeCaps
- uid: System.Drawing.Drawing2D.CustomLineCap.StrokeJoin*
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: StrokeJoin
  nameWithType: CustomLineCap.StrokeJoin
- uid: System.Drawing.Drawing2D.CustomLineCap.WidthScale*
  parent: System.Drawing.Drawing2D.CustomLineCap
  isExternal: false
  name: WidthScale
  nameWithType: CustomLineCap.WidthScale
