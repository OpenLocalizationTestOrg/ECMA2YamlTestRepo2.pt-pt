### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlReader
  id: XamlReader
  children:
  - System.Xaml.XamlReader.#ctor
  - System.Xaml.XamlReader.Close
  - System.Xaml.XamlReader.Dispose(System.Boolean)
  - System.Xaml.XamlReader.IsDisposed
  - System.Xaml.XamlReader.IsEof
  - System.Xaml.XamlReader.Member
  - System.Xaml.XamlReader.Namespace
  - System.Xaml.XamlReader.NodeType
  - System.Xaml.XamlReader.Read
  - System.Xaml.XamlReader.ReadSubtree
  - System.Xaml.XamlReader.SchemaContext
  - System.Xaml.XamlReader.Skip
  - System.Xaml.XamlReader.System#IDisposable#Dispose
  - System.Xaml.XamlReader.Type
  - System.Xaml.XamlReader.Value
  langs:
  - csharp
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
  type: Class
  summary: "Fornece definições de base para classes que consumam XAML entrada e produzem sequências de nó XAML."
  remarks: "XamlReader é uma classe abstrata e não fornece implementações ou definições de que tem um resultado de trabalho para todos os membros. Membros que tem uma implementação em XamlReader são apresentados nos comentários para esse membro. Especificamente, XamlReader tem vários membros abstratos que tem de ser implementados e vários membros virtuais.       Membros virtual, <xref:System.Xaml.XamlReader.ReadSubtree%2A>e <xref:System.Xaml.XamlReader.Skip%2A>cada fornecer uma implementação predefinida que é adequada para a maioria dos casos.</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> No entanto, o <xref:System.Xaml.XamlReader.ReadSubtree%2A>e <xref:System.Xaml.XamlReader.Skip%2A>implementações predefinidas do dependem outro comportamento esperado do leitor XAML implementar; em particular, que dependem de <xref:System.Xaml.XamlReader.Read%2A>substituir.</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> <xref:System.Xaml.XamlReader.Dispose%2A>Também é um membro virtual que tenha uma implementação predefinida do trabalho.</xref:System.Xaml.XamlReader.Dispose%2A>       As seguintes duas classes são o mais relevante e práticos derivam classes nos serviços de XAML do .NET Framework e a assemblagem de System.Xaml:- <xref:System.Xaml.XamlObjectReader>, que lê um gráfico de objeto, tais como o gráfico de objeto de Active Directory de uma aplicação em tempo de execução.</xref:System.Xaml.XamlObjectReader>      - <xref:System.Xaml.XamlXmlReader>, que lê XAML sob a forma de um ficheiro de texto XML utilizando um gerais <xref:System.Xml.XmlReader>que carrega o ficheiro como uma classe de programa auxiliar intermediário.</xref:System.Xml.XmlReader> </xref:System.Xaml.XamlXmlReader>       Outros leitores XAML de outras estruturas incluem <xref:System.Windows.Baml2006.Baml2006Reader>e <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.</xref:System.Activities.Debugger.XamlDebuggerXmlReader> </xref:System.Windows.Baml2006.Baml2006Reader>       XamlReader difere do [!INCLUDE[TLA#tla_xmldom](~/add/includes/tlasharptla-xmldom-md.md)] e <xref:System.Xml.XmlReader>princípios de design porque XamlReader não tem um `Create` método para devolver predefinido subjacente implementações de leitor XAML.</xref:System.Xml.XmlReader> Em vez disso, tem de instanciar específicas XAML leitor as classes derivadas ao chamar os construtores ou outro específico da classe de programa auxiliar de APIs.      ## Subtree leitores para parte mais, chame a API de XamlReader no contexto das classes de leitor XAML específicos que derivem de XamlReader. No entanto, um cenário específico, vai aceder a API de XamlReader numa instância de leitor XAML prática que não é público e não derivada da <xref:System.Xaml.XamlObjectReader>ou <xref:System.Xaml.XamlXmlReader>.</xref:System.Xaml.XamlXmlReader> </xref:System.Xaml.XamlObjectReader> Neste caso é quando chamar <xref:System.Xaml.XamlReader.ReadSubtree%2A>, que devolve uma instância XamlReader.</xref:System.Xaml.XamlReader.ReadSubtree%2A> A implementação predefinida, XamlReader que é devolvido por esta API é uma classe interna.       O XamlReader obtido para leitura subárvore tem as ações válidas para APIs como <xref:System.Xaml.XamlReader.Read%2A>e <xref:System.Xaml.XamlReader.NodeType%2A>, e essas ações são baseadas na classe de leitor de principal.</xref:System.Xaml.XamlReader.NodeType%2A> </xref:System.Xaml.XamlReader.Read%2A> Este design permite que a classe interna para controlar o nível de frame onde subárvore foi introduzida. A subárvore do agir XamlReader certifica-se de que o se a posição do nó atual for movida para além dos limites da subárvore, o leitor de subárvore específico apresenta fim de ficheiro ou `null` no nó atual.       Notas sobre a utilização de leitor de subárvore estão incluídas no determinadas APIs XamlReader."
  syntax:
    content: 'public abstract class XamlReader : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.#ctor
  id: '#ctor'
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa a <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> classe."
  syntax:
    content: protected XamlReader ();
    parameters: []
  overload: System.Xaml.XamlReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Close
  id: Close
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Fecha a sequência de nós de XAML."
  remarks: "Numa implementação base, ao chamar Close chamadas <xref:System.Xaml.XamlReader.Dispose%2A>com o `isDisposing` parâmetro como `true`.</xref:System.Xaml.XamlReader.Dispose%2A>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Xaml.XamlReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Xaml.XamlReader&quot;> </xref>e, opcionalmente, liberta os recursos geridos."
  remarks: "Tem de chamar a classe base para obter <xref:System.Xaml.XamlReader.IsDisposed%2A>= `true`.</xref:System.Xaml.XamlReader.IsDisposed%2A>"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar os recursos geridos; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsDisposed
  id: IsDisposed
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém se <xref:System.Xaml.XamlReader.Dispose*>ter sido chamado.</xref:System.Xaml.XamlReader.Dispose*>"
  syntax:
    content: protected bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <xref:System.Xaml.XamlReader.Dispose*>foi chamado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Xaml.XamlReader.Dispose*>"
  overload: System.Xaml.XamlReader.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsEof
  id: IsEof
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada numa classe derivada, obtém um valor que indica se a posição do leitor é no fim do ficheiro."
  remarks: "Leitores de subárvore podem chamar IsEof, com o comportamento que reflete corretamente dos limites da subárvore introduzido. Para obter mais informações, consulte a secção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool IsEof { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a posição é o conceptual fim-de-ficheiro de sequência de nós XAML; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlReader.IsEof*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Member
  id: Member
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada numa classe derivada, obtém o membro atual da posição de leitor, se a posição de leitor estiver num <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>."
  remarks: "Subárvore leitores podem chamar membro, com restrições de comportamento. Para obter mais informações, consulte a secção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlMember Member { get; }
    return:
      type: System.Xaml.XamlMember
      description: "O membro atual; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se a posição do leitor não é um membro."
  overload: System.Xaml.XamlReader.Member*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Namespace
  id: Namespace
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada numa classe derivada, obtém as informações de espaço de nomes XAML do nó atual."
  remarks: "Conceção pretendida desta API está a devolver um resultado não nulo apenas se for o <xref:System.Xaml.XamlReader.NodeType%2A>nó atual é <xref:System.Xaml.XamlNodeType>.</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlReader.NodeType%2A> A propriedade não comunica o espaço de nomes XAML que se aplica a objetos ou membros de um sentido de âmbito geral, como interpretado num contexto do esquema XAML. A aplicação tem de fornecer um meio de informações na cache para o agir espaço de nomes XAML que atravessa os nós XAML, se precisar de informações de forma diferente como o contexto do esquema XAML reporta um escritor. Consulte<xref:System.Xaml.XamlXmlReader.Namespace%2A> para notas sobre a implementação de referência.</xref:System.Xaml.XamlXmlReader.Namespace%2A>"
  syntax:
    content: public abstract System.Xaml.NamespaceDeclaration Namespace { get; }
    return:
      type: System.Xaml.NamespaceDeclaration
      description: "As informações de espaço de nomes XAML, se estiver disponível; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlReader.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.NodeType
  id: NodeType
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada numa classe derivada, obtém o tipo de nó atual."
  remarks: "Subárvore leitores podem chamar NodeType, com restrições de comportamento. Para obter mais informações, consulte a secção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlNodeType NodeType { get; }
    return:
      type: System.Xaml.XamlNodeType
      description: "Um valor da <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref> enumeração."
  overload: System.Xaml.XamlReader.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Read
  id: Read
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada numa classe derivada, fornece o próximo nó XAML da origem, se um nó estiver disponível."
  remarks: "Subárvore leitores podem chamar leitura, com restrições de comportamento. Para obter mais informações, consulte a secção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se um nó estiver disponível; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlReader.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.ReadSubtree
  id: ReadSubtree
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve um <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> que baseia-se na atual <xref href=&quot;System.Xaml.XamlReader&quot;> </xref>, onde o devolvido <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> é utilizado para iterar através de uma subárvore de estrutura de nó XAML."
  remarks: "Este método tem uma implementação predefinida e devolve um <xref:System.Xaml.XamlReader>.</xref:System.Xaml.XamlReader> válido O devolvido <xref:System.Xaml.XamlReader>é uma classe interna que restringe determinados <xref:System.Xaml.XamlReader>ações.</xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader> As restrições são consistentes with the purpose of ler apenas uma subárvore dimensioned de uma origem para um conjunto de nós XAML maior e devolver o fim do ficheiro ou `null` no nó atual quando subárvore é terminada.       Geralmente, deve verificar o nó atual do iniciais <xref:System.Xaml.XamlReader.Read%2A>para determinar se necessita de um leitor de subárvore.</xref:System.Xaml.XamlReader.Read%2A> Como selecionar esta opção pode ser implementação específica; No entanto, evite criar vários leitores de subárvore para cada subárvore. Além disso, evite invocar um leitor de subárvore para certos casos de nó (por exemplo, para <xref:System.Xaml.XamlNodeType>) que não pode conter uma subárvore de nós.</xref:System.Xaml.XamlNodeType>       Depois de obter um leitor de subárvore, tem de chamar <xref:System.Xaml.XamlReader.Read%2A>na mesma para obter um nó atual (ou chamar <xref:System.Xaml.XamlReader.Skip%2A>para obter um nó seguinte).</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.Read%2A> Não automaticamente obter uma posição inicial de nós do leitor subárvore aquando da respetiva criação.       O leitor de que obter ao chamar ReadSubtree da implementação predefinição é uma classe interna. A classe interna bases respetivo comportamento no <xref:System.Xaml.XamlReader>implementação que está a ser utilizada quando ReadSubtree é chamado.</xref:System.Xaml.XamlReader> O objetivo da classe interno é moldar o <xref:System.Xaml.XamlReader.Read%2A>e o comportamento geral transversal.</xref:System.Xaml.XamlReader.Read%2A> A transversal permanece na subárvore pretendido por controlar <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> pares ou <xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType> pares.</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> Também corretamente devolve `false` para <xref:System.Xaml.XamlReader.Read%2A>e `true` para <xref:System.Xaml.XamlReader.IsEof%2A>quando o leitor está no fim da subárvore, conforme definido pelo respetivo ponto de entrada.</xref:System.Xaml.XamlReader.IsEof%2A> </xref:System.Xaml.XamlReader.Read%2A> Em geral, parte do princípio de que qualquer <xref:System.Xaml.XamlReader>API chamar a partir de um leitor de subárvore tem a mesma implementação como a global <xref:System.Xaml.XamlReader>exceto transversal delimitadora comportamento.</xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader>       No entanto, ReadSubtree é virtual. Por conseguinte, específico <xref:System.Xaml.XamlReader>implementação pode fornecer comportamento difere de acordo com o <xref:System.Xaml.XamlReader>comportamento de wrapper interno; e um <xref:System.Xaml.XamlReader>implementação ainda pode desativar a funcionalidade de leitor subárvore devolvendo <xref:System.NotImplementedException>ou outras exceções.</xref:System.NotImplementedException> </xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public virtual System.Xaml.XamlReader ReadSubtree ();
    parameters: []
    return:
      type: System.Xaml.XamlReader
      description: "Uma nova instância de leitor XAML para subárvore."
  overload: System.Xaml.XamlReader.ReadSubtree*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.SchemaContext
  id: SchemaContext
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada numa classe derivada, obtém um objeto que fornece informações de contexto do esquema XAML para o conjunto de informações."
  syntax:
    content: public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }
    return:
      type: System.Xaml.XamlSchemaContext
      description: "Definir um objeto que fornece informações de contexto do esquema XAML para obter as informações."
  overload: System.Xaml.XamlReader.SchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Skip
  id: Skip
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Ignora o nó atual e avança a posição de leitor para o próximo nó."
  remarks: "Uma vez foi ignorada, <xref:System.Xaml.XamlReader.Read%2A>é denominado por predefinição implementação Skip.</xref:System.Xaml.XamlReader.Read%2A> Normalmente, não chame ignorar e <xref:System.Xaml.XamlReader.Read%2A>na sequência.</xref:System.Xaml.XamlReader.Read%2A>       Na implementação de ignorar a predefinição, são executadas ações de diferentes dependendo <xref:System.Xaml.XamlReader.NodeType%2A>a posição de leitor está atualmente ativada.</xref:System.Xaml.XamlReader.NodeType%2A> Se a posição do leitor é atualmente num <xref:System.Xaml.XamlNodeType>ou <xref:System.Xaml.XamlNodeType>, que o membro ou o objeto é ignorado.</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> Para outros <xref:System.Xaml.XamlReader.NodeType%2A>valores, foi efetuada nenhuma ação além chamar <xref:System.Xaml.XamlReader.Read%2A>da posição atual.</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.NodeType%2A>       Subárvore leitores podem chamar Skip, com restrições de comportamento. Para obter mais informações, consulte a secção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>       O comportamento de árvore do nó de ignorar baseia-se no XML equivalente <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>.</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName> Com base no <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>equivalência de comportamento, ignorar ignora o nó e a respetiva subárvore, não apenas o nó com uma única entrada.</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>"
  syntax:
    content: public virtual void Skip ();
    parameters: []
  overload: System.Xaml.XamlReader.Skip*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Versões de todos os recursos utilizados pela instância atual do <xref href=&quot;System.Xaml.XamlReader&quot;> </xref> classe."
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Xaml.XamlReader.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Type
  id: Type
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada numa classe derivada, obtém o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do nó atual."
  remarks: "Subárvore leitores podem chamar tipo com restrições de comportamento. Para obter mais informações, consulte a secção &quot;Subárvore leitores&quot; <xref:System.Xaml.XamlReader>, ou consulte <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do nó atual; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se a posição atual do leitor não está num objeto."
  overload: System.Xaml.XamlReader.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Value
  id: Value
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada numa classe derivada, obtém o valor do nó atual."
  syntax:
    content: public abstract object Value { get; }
    return:
      type: System.Object
      description: "O valor do nó atual; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, se a posição atual do leitor não está ativada uma <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref> tipo de nó."
  overload: System.Xaml.XamlReader.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xaml.XamlReader.#ctor
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
- uid: System.Xaml.XamlReader.Close
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlReader.IsDisposed
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlReader.Namespace
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
- uid: System.Xaml.NamespaceDeclaration
  parent: System.Xaml
  isExternal: false
  name: NamespaceDeclaration
  nameWithType: NamespaceDeclaration
  fullName: System.Xaml.NamespaceDeclaration
- uid: System.Xaml.XamlReader.NodeType
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
- uid: System.Xaml.XamlNodeType
  parent: System.Xaml
  isExternal: false
  name: XamlNodeType
  nameWithType: XamlNodeType
  fullName: System.Xaml.XamlNodeType
- uid: System.Xaml.XamlReader.Read
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
- uid: System.Xaml.XamlReader.ReadSubtree
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
- uid: System.Xaml.XamlReader
  parent: System.Xaml
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
- uid: System.Xaml.XamlReader.SchemaContext
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlReader.Skip
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
- uid: System.Xaml.XamlReader.Type
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlReader.Value
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
- uid: System.Xaml.XamlReader.#ctor*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader.XamlReader
- uid: System.Xaml.XamlReader.Close*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close
  nameWithType: XamlReader.Close
- uid: System.Xaml.XamlReader.Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose
  nameWithType: XamlReader.Dispose
- uid: System.Xaml.XamlReader.IsDisposed*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
- uid: System.Xaml.XamlReader.Namespace*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
- uid: System.Xaml.XamlReader.NodeType*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
- uid: System.Xaml.XamlReader.Read*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read
  nameWithType: XamlReader.Read
- uid: System.Xaml.XamlReader.ReadSubtree*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree
  nameWithType: XamlReader.ReadSubtree
- uid: System.Xaml.XamlReader.SchemaContext*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
- uid: System.Xaml.XamlReader.Skip*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip
  nameWithType: XamlReader.Skip
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: XamlReader.System.IDisposable.Dispose
- uid: System.Xaml.XamlReader.Type*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
- uid: System.Xaml.XamlReader.Value*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
