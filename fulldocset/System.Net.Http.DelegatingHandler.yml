### YamlMime:ManagedReference
items:
- uid: System.Net.Http.DelegatingHandler
  id: DelegatingHandler
  children:
  - System.Net.Http.DelegatingHandler.#ctor
  - System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  - System.Net.Http.DelegatingHandler.InnerHandler
  - System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: DelegatingHandler
  nameWithType: DelegatingHandler
  fullName: System.Net.Http.DelegatingHandler
  type: Class
  summary: "Um tipo de processadores HTTP que delegar o processamento de mensagens de resposta HTTP para outro processador, denominado o processador interno."
  remarks: "Esta aplicação normalmente instanciar esta classe e, em seguida, definir o processador interno ou forneça um processador interno no construtor.       Tenha em atenção que <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>propriedade pode ser um processador delegating demasiado.</xref:System.Net.Http.DelegatingHandler.InnerHandler%2A> Esta abordagem permite a criação de pilhas de processador para processar as mensagens de resposta HTTP."
  syntax:
    content: 'public abstract class DelegatingHandler : System.Net.Http.HttpMessageHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: DelegatingHandler()
  nameWithType: DelegatingHandler.DelegatingHandler()
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Cria uma nova instância do <xref href=&quot;System.Net.Http.DelegatingHandler&quot;> </xref> classe."
  remarks: "O identificador interno pode ser definido utilizando <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>.</xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>"
  syntax:
    content: protected DelegatingHandler ();
    parameters: []
  overload: System.Net.Http.DelegatingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: DelegatingHandler(HttpMessageHandler)
  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Cria uma nova instância do <xref href=&quot;System.Net.Http.DelegatingHandler&quot;> </xref> classe com um processador específico interno."
  syntax:
    content: protected DelegatingHandler (System.Net.Http.HttpMessageHandler innerHandler);
    parameters:
    - id: innerHandler
      type: System.Net.Http.HttpMessageHandler
      description: "O processador interno que é responsável por processar as mensagens de resposta HTTP."
  overload: System.Net.Http.DelegatingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DelegatingHandler.Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Net.Http.DelegatingHandler&quot;> </xref>e opcionalmente disposes dos recursos geridos."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> às versões apenas não gerido recursos."
  overload: System.Net.Http.DelegatingHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  id: InnerHandler
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Obtém ou define o processador interno que processa as mensagens de resposta HTTP."
  remarks: "Esta propriedade InnerHandler só pode ser definida antes da classe é utilizada (as <xref:System.Net.Http.DelegatingHandler.SendAsync%2A>método é denominado).</xref:System.Net.Http.DelegatingHandler.SendAsync%2A>       Tenha em atenção que InnerHandler propriedade pode ser um processador delegating demasiado, apesar de este ser invulgar. Esta abordagem permite a criação de pilhas de processador para as mensagens de resposta HTTP."
  syntax:
    content: public System.Net.Http.HttpMessageHandler InnerHandler { get; set; }
    return:
      type: System.Net.Http.HttpMessageHandler
      description: "O processador interno para mensagens de resposta HTTP."
  overload: System.Net.Http.DelegatingHandler.InnerHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Envia um pedido HTTP para o processador interno para enviar para o servidor como uma operação assíncrona."
  remarks: "Esta operação não bloquear. Esta implementação substituível do <xref:System.Net.Http.HttpClientHandler.SendAsync%2A>método reencaminha o pedido HTTP para o processador interno para enviar para o servidor como uma operação assíncrona.</xref:System.Net.Http.HttpClientHandler.SendAsync%2A>       O método SendAsync é essencialmente utilizado pelo sistema e não por aplicações. Quando este método é denominado, chama o método SendAsync no processador interno."
  syntax:
    content: protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "A mensagem de pedido HTTP para enviar para o servidor."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Um token de cancelamento para cancelar a operação."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.Http.DelegatingHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: System.Net.Http.HttpMessageHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.DelegatingHandler.#ctor
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler()
  nameWithType: DelegatingHandler.DelegatingHandler()
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()
- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler(HttpMessageHandler)
  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DelegatingHandler.Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.DelegatingHandler.#ctor*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler
  nameWithType: DelegatingHandler.DelegatingHandler
- uid: System.Net.Http.DelegatingHandler.Dispose*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: Dispose
  nameWithType: DelegatingHandler.Dispose
- uid: System.Net.Http.DelegatingHandler.InnerHandler*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.SendAsync*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: SendAsync
  nameWithType: DelegatingHandler.SendAsync
