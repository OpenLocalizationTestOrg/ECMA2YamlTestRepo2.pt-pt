### YamlMime:ManagedReference
items:
- uid: System.Net.Http.DelegatingHandler
  id: DelegatingHandler
  children:
  - System.Net.Http.DelegatingHandler.#ctor
  - System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  - System.Net.Http.DelegatingHandler.InnerHandler
  - System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: DelegatingHandler
  nameWithType: DelegatingHandler
  fullName: System.Net.Http.DelegatingHandler
  type: Class
  summary: "A type for HTTP handlers that delegate the processing of HTTP response messages to another handler, called the inner handler."
  remarks: "This application normally instantiate this class and then set the inner handler or provide an inner handler in the constructor.       Note that <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A> property may be a delegating handler too. This approach allows the creation of handler stacks to process the HTTP response messages."
  syntax:
    content: 'public abstract class DelegatingHandler : System.Net.Http.HttpMessageHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: DelegatingHandler()
  nameWithType: DelegatingHandler.DelegatingHandler()
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Creates a new instance of the <xref href=&quot;System.Net.Http.DelegatingHandler&quot;></xref> class."
  remarks: "The inner handle can be set using the <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>."
  syntax:
    content: protected DelegatingHandler ();
    parameters: []
  overload: System.Net.Http.DelegatingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: DelegatingHandler(HttpMessageHandler)
  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Creates a new instance of the <xref href=&quot;System.Net.Http.DelegatingHandler&quot;></xref> class with a specific inner handler."
  syntax:
    content: protected DelegatingHandler (System.Net.Http.HttpMessageHandler innerHandler);
    parameters:
    - id: innerHandler
      type: System.Net.Http.HttpMessageHandler
      description: "The inner handler which is responsible for processing the HTTP response messages."
  overload: System.Net.Http.DelegatingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DelegatingHandler.Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.Net.Http.DelegatingHandler&quot;></xref>, and optionally disposes of the managed resources."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to releases only unmanaged resources."
  overload: System.Net.Http.DelegatingHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  id: InnerHandler
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Gets or sets the inner handler which processes the HTTP response messages."
  remarks: "This InnerHandler property can only be set before the class is used (the <xref:System.Net.Http.DelegatingHandler.SendAsync%2A> method is called).       Note that InnerHandler property may be a delegating handler too, although this is uncommon. This approach allows the creation of handler stacks for the HTTP response messages."
  syntax:
    content: public System.Net.Http.HttpMessageHandler InnerHandler { get; set; }
    return:
      type: System.Net.Http.HttpMessageHandler
      description: "The inner handler for HTTP response messages."
  overload: System.Net.Http.DelegatingHandler.InnerHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Sends an HTTP request to the inner handler to send to the server as an asynchronous operation."
  remarks: "This operation does not block. This overridable implementation of <xref:System.Net.Http.HttpClientHandler.SendAsync%2A> method forwards the HTTP request to the inner handler to send to the server as an asynchronous operation.       The SendAsync method is mainly used by the system and not by applications. When this method is called, it calls the SendAsync method on the inner handler."
  syntax:
    content: protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "The HTTP request message to send to the server."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "A cancellation token to cancel operation."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "The task object representing the asynchronous operation."
  overload: System.Net.Http.DelegatingHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: System.Net.Http.HttpMessageHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.DelegatingHandler.#ctor
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler()
  nameWithType: DelegatingHandler.DelegatingHandler()
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()
- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler(HttpMessageHandler)
  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DelegatingHandler.Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.DelegatingHandler.#ctor*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler
  nameWithType: DelegatingHandler.DelegatingHandler
- uid: System.Net.Http.DelegatingHandler.Dispose*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: Dispose
  nameWithType: DelegatingHandler.Dispose
- uid: System.Net.Http.DelegatingHandler.InnerHandler*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.SendAsync*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: SendAsync
  nameWithType: DelegatingHandler.SendAsync
