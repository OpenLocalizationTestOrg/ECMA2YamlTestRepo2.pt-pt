### YamlMime:ManagedReference
items:
- uid: System.Web.Security.FileAuthorizationModule
  id: FileAuthorizationModule
  children:
  - System.Web.Security.FileAuthorizationModule.#ctor
  - System.Web.Security.FileAuthorizationModule.CheckFileAccessForUser(System.String,System.IntPtr,System.String)
  - System.Web.Security.FileAuthorizationModule.Dispose
  - System.Web.Security.FileAuthorizationModule.Init(System.Web.HttpApplication)
  langs:
  - csharp
  name: FileAuthorizationModule
  nameWithType: FileAuthorizationModule
  fullName: System.Web.Security.FileAuthorizationModule
  type: Class
  summary: "Verifica se o utilizador tem permissão para aceder ao ficheiro pedido. Esta classe não pode ser herdada."
  remarks: "Este módulo fornece serviços de autorização contra do sistema de ficheiros listas de controlo de acesso (ACLs). Quando o `mode` atributo o [autenticação elemento (esquema de definições do ASP.NET)](http://msdn.microsoft.com/en-us/27bc0ba9-f23a-45f3-ae42-dbe7916e3ee2) elemento de configuração está definido como `Windows` para que o <xref:System.Web.Security.WindowsAuthenticationModule>está a ser utilizado para a aplicação, FileAuthorizationModule módulo assegura que o utilizador requerente está autorizado de leitura ou escrita acesso ao recurso, consoante o verbo de pedido, antes de executar o pedido.</xref:System.Web.Security.WindowsAuthenticationModule> Para obter mais informações, consulte o <xref:System.Web.Security.FileAuthorizationModule.CheckFileAccessForUser%2A>método.</xref:System.Web.Security.FileAuthorizationModule.CheckFileAccessForUser%2A>"
  syntax:
    content: 'public sealed class FileAuthorizationModule : System.Web.IHttpModule'
  inheritance:
  - System.Object
  implements:
  - System.Web.IHttpModule
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.FileAuthorizationModule.#ctor
  id: '#ctor'
  parent: System.Web.Security.FileAuthorizationModule
  langs:
  - csharp
  name: FileAuthorizationModule()
  nameWithType: FileAuthorizationModule.FileAuthorizationModule()
  fullName: System.Web.Security.FileAuthorizationModule.FileAuthorizationModule()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Cria uma instância do <xref href=&quot;System.Web.Security.FileAuthorizationModule&quot;> </xref> classe."
  remarks: "Este construtor não se destina a ser chamado a partir do código da aplicação.       ASP.NET chama este construtor para criar uma instância de <xref:System.Web.Security.FileAuthorizationModule>classe.</xref:System.Web.Security.FileAuthorizationModule> Depois de chamar o construtor, aquele invoca o <xref:System.Web.Security.FileAuthorizationModule.Init%2A>método ao inicializar o novo <xref:System.Web.Security.FileAuthorizationModule>objeto.</xref:System.Web.Security.FileAuthorizationModule> </xref:System.Web.Security.FileAuthorizationModule.Init%2A>"
  syntax:
    content: public FileAuthorizationModule ();
    parameters: []
  overload: System.Web.Security.FileAuthorizationModule.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FileAuthorizationModule.CheckFileAccessForUser(System.String,System.IntPtr,System.String)
  id: CheckFileAccessForUser(System.String,System.IntPtr,System.String)
  parent: System.Web.Security.FileAuthorizationModule
  langs:
  - csharp
  name: CheckFileAccessForUser(String,IntPtr,String)
  nameWithType: FileAuthorizationModule.CheckFileAccessForUser(String,IntPtr,String)
  fullName: System.Web.Security.FileAuthorizationModule.CheckFileAccessForUser(String,IntPtr,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Determina se o utilizador tem acesso para o ficheiro pedido."
  remarks: "O método CheckFileAccessForUser verifica se o utilizador atual, representado por um token de acesso do Windows, é concedido acesso ao ficheiro solicitado na listas de controlo de acesso de sistema de ficheiros (ACLs). O caminho virtual é mapeado para o caminho do sistema de ficheiros físicos antes da verificação é efetuada.       Se o verbo HTTP utilizado para efetuar o pedido é `GET`, `POST`, ou `HEAD`, o método CheckFileAccessForUser verifica a existência de acesso de leitura ao ficheiro. Se nenhum outro verbo é utilizado, o método CheckFileAccessForUser verifica a existência de permissão de leitura/escrita para o ficheiro.       **Nota de segurança** se o <xref:System.Web.Security.FileAuthorizationModule>módulo não está definido no `httpModules` secção de configuração para a aplicação, o <xref:System.Web.Security.FileAuthorizationModule>módulo sempre devolve `true`.</xref:System.Web.Security.FileAuthorizationModule> </xref:System.Web.Security.FileAuthorizationModule>"
  syntax:
    content: public static bool CheckFileAccessForUser (string virtualPath, IntPtr token, string verb);
    parameters:
    - id: virtualPath
      type: System.String
      description: "O caminho virtual para o ficheiro."
    - id: token
      type: System.IntPtr
      description: "Um token de acesso do Windows que representa o utilizador."
    - id: verb
      type: System.String
      description: "O verbo HTTP utilizado para efetuar o pedido."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o utilizador atual do Windows representado pelo <code> token </code> tem acesso ao ficheiro utilizando o verbo HTTP especificado ou se o <xref href=&quot;System.Web.Security.FileAuthorizationModule&quot;> </xref> módulo não está definido no ficheiro de configuração da aplicação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.FileAuthorizationModule.CheckFileAccessForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>virtualPath</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>token</code> is <xref:System.IntPtr.Zero>.       -or-       <code>verb</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>virtualPath</code>Não é na estrutura de diretório de aplicação da aplicação Web."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O ficheiro especificado pelo <code> virtualPath </code> não existe."
  platform:
  - net462
- uid: System.Web.Security.FileAuthorizationModule.Dispose
  id: Dispose
  parent: System.Web.Security.FileAuthorizationModule
  langs:
  - csharp
  name: Dispose()
  nameWithType: FileAuthorizationModule.Dispose()
  fullName: System.Web.Security.FileAuthorizationModule.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Versões de todos os recursos que não sejam de memória, utilizada pelo <xref href=&quot;System.Web.Security.FileAuthorizationModule&quot;> </xref>."
  remarks: "Este método não se destina a ser chamado a partir do código da aplicação."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Web.Security.FileAuthorizationModule.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FileAuthorizationModule.Init(System.Web.HttpApplication)
  id: Init(System.Web.HttpApplication)
  parent: System.Web.Security.FileAuthorizationModule
  langs:
  - csharp
  name: Init(HttpApplication)
  nameWithType: FileAuthorizationModule.Init(HttpApplication)
  fullName: System.Web.Security.FileAuthorizationModule.Init(HttpApplication)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Inicializa a <xref href=&quot;System.Web.Security.FileAuthorizationModule&quot;> </xref> objeto."
  remarks: "Este método não se destina a ser chamado a partir do código da aplicação.       O método Init assegura que o <xref:System.Web.Security.FileAuthorizationModule>está incluído no processamento do <xref:System.Web.HttpApplication.AuthorizeRequest>eventos.</xref:System.Web.HttpApplication.AuthorizeRequest> </xref:System.Web.Security.FileAuthorizationModule>"
  syntax:
    content: public void Init (System.Web.HttpApplication app);
    parameters:
    - id: app
      type: System.Web.HttpApplication
      description: "Atual <xref href=&quot;System.Web.HttpApplication&quot;> </xref> instância."
  overload: System.Web.Security.FileAuthorizationModule.Init*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.Web.Security.FileAuthorizationModule.#ctor
  parent: System.Web.Security.FileAuthorizationModule
  isExternal: false
  name: FileAuthorizationModule()
  nameWithType: FileAuthorizationModule.FileAuthorizationModule()
  fullName: System.Web.Security.FileAuthorizationModule.FileAuthorizationModule()
- uid: System.Web.Security.FileAuthorizationModule.CheckFileAccessForUser(System.String,System.IntPtr,System.String)
  parent: System.Web.Security.FileAuthorizationModule
  isExternal: false
  name: CheckFileAccessForUser(String,IntPtr,String)
  nameWithType: FileAuthorizationModule.CheckFileAccessForUser(String,IntPtr,String)
  fullName: System.Web.Security.FileAuthorizationModule.CheckFileAccessForUser(String,IntPtr,String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Web.Security.FileAuthorizationModule.Dispose
  parent: System.Web.Security.FileAuthorizationModule
  isExternal: false
  name: Dispose()
  nameWithType: FileAuthorizationModule.Dispose()
  fullName: System.Web.Security.FileAuthorizationModule.Dispose()
- uid: System.Web.Security.FileAuthorizationModule.Init(System.Web.HttpApplication)
  parent: System.Web.Security.FileAuthorizationModule
  isExternal: false
  name: Init(HttpApplication)
  nameWithType: FileAuthorizationModule.Init(HttpApplication)
  fullName: System.Web.Security.FileAuthorizationModule.Init(HttpApplication)
- uid: System.Web.HttpApplication
  parent: System.Web
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
- uid: System.Web.Security.FileAuthorizationModule.#ctor*
  parent: System.Web.Security.FileAuthorizationModule
  isExternal: false
  name: FileAuthorizationModule
  nameWithType: FileAuthorizationModule.FileAuthorizationModule
- uid: System.Web.Security.FileAuthorizationModule.CheckFileAccessForUser*
  parent: System.Web.Security.FileAuthorizationModule
  isExternal: false
  name: CheckFileAccessForUser
  nameWithType: FileAuthorizationModule.CheckFileAccessForUser
- uid: System.Web.Security.FileAuthorizationModule.Dispose*
  parent: System.Web.Security.FileAuthorizationModule
  isExternal: false
  name: Dispose
  nameWithType: FileAuthorizationModule.Dispose
- uid: System.Web.Security.FileAuthorizationModule.Init*
  parent: System.Web.Security.FileAuthorizationModule
  isExternal: false
  name: Init
  nameWithType: FileAuthorizationModule.Init
