### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.ReliableSession
  id: ReliableSession
  children:
  - System.ServiceModel.ReliableSession.#ctor
  - System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  - System.ServiceModel.ReliableSession.InactivityTimeout
  - System.ServiceModel.ReliableSession.Ordered
  langs:
  - csharp
  name: ReliableSession
  nameWithType: ReliableSession
  fullName: System.ServiceModel.ReliableSession
  type: Class
  summary: "Fornece acesso prático para as propriedades de um elemento de enlace da sessão fiável que estão disponíveis ao utilizar uma dos enlaces fornecidos pelo sistema."
  remarks: "As propriedades contidas na classe ReliableSession são o subconjunto dos contidas no <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>que estejam acessíveis a partir de um vínculo predefinido.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement> Este subconjunto consiste o <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A>e <xref:System.ServiceModel.ReliableSession.Ordered%2A>Propriedades.</xref:System.ServiceModel.ReliableSession.Ordered%2A> </xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> A classe de ReliableSession referencia os mesmos objetos como does o <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>, por isso, a alteração do valor de um altera o valor das outras demasiado.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement> Esta classe reúne estas duas propriedades do elemento de enlace da sessão fiável em conjunto para melhor capacidade de deteção."
  example:
  - "The following example shows how to create a new reliable session, and access and change the property values of that session. The ReliableSession class allows you to write:  \n  \n [!code-cs[UEReliableSession#1](~/add/codesnippet/csharp/t-system.servicemodel.re_0_1.cs)]\n [!code-vb[UEReliableSession#1](~/add/codesnippet/visualbasic/t-system.servicemodel.re_0_1.vb)]"
  syntax:
    content: public class ReliableSession
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.#ctor
  id: '#ctor'
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: ReliableSession()
  nameWithType: ReliableSession.ReliableSession()
  fullName: System.ServiceModel.ReliableSession.ReliableSession()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.ReliableSession&quot;> </xref> classe."
  syntax:
    content: public ReliableSession ();
    parameters: []
  overload: System.ServiceModel.ReliableSession.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  id: '#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)'
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: ReliableSession(ReliableSessionBindingElement)
  nameWithType: ReliableSession.ReliableSession(ReliableSessionBindingElement)
  fullName: System.ServiceModel.ReliableSession.ReliableSession(ReliableSessionBindingElement)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ServiceModel.ReliableSession&quot;> </xref> classe a partir de um elemento de enlace da sessão fiável."
  remarks: ''
  example:
  - >-
    [!code-cs[UEReliableSession#1](~/add/codesnippet/csharp/80f1598c-ddfc-4656-a81f-_1.cs)]
     [!code-vb[UEReliableSession#1](~/add/codesnippet/visualbasic/80f1598c-ddfc-4656-a81f-_1.vb)]
  syntax:
    content: public ReliableSession (System.ServiceModel.Channels.ReliableSessionBindingElement reliableSessionBindingElement);
    parameters:
    - id: reliableSessionBindingElement
      type: System.ServiceModel.Channels.ReliableSessionBindingElement
      description: "O <xref href=&quot;System.ServiceModel.Channels.ReliableSessionBindingElement&quot;> </xref> cujos valores de propriedade são utilizados para iniciar a sessão fiável."
  overload: System.ServiceModel.ReliableSession.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>reliableSessionBindingElement</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.InactivityTimeout
  id: InactivityTimeout
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
  fullName: System.ServiceModel.ReliableSession.InactivityTimeout
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define um intervalo de tempo que um serviço pode permanecer inativo antes de fechar."
  remarks: "A propriedade obtém e define o valor da <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A>propriedade.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A>       Atividade de num canal está definida como receber uma mensagem de infraestrutura ou de aplicação. A propriedade de tempo limite de inatividade controla a quantidade máxima de tempo para manter uma sessão inativa alive. Se mais do que o intervalo de tempo especificado InactivityTimeout passa com nenhuma atividade, a sessão foi abortada, a infraestrutura e de falhas de canal. A sessão fiável está desligada forma unilateral.       Se a aplicação de envio não tem nenhum mensagens a enviar, em seguida, a sessão fiável não normalmente falhou devido a inatividade; em vez disso, um mecanismo de ligação keep-alive mantém a sessão ativa indefinidamente. Tenha em atenção que a sessão fiável independentemente foi abortar o dispatcher se não existem mensagens da aplicação são enviadas ou recebidas. Assim, o limite de tempo de inatividade normalmente expira se a condições de rede são, de modo a que não existem mensagens de qualquer ordenação são recebidas ou se existir uma falha no remetente.       Definir este tempo limite impede que o servidor que contém para uma sessão de segurança se o cliente não feche-a. Se a sessão de segurança não recebeu uma mensagem durante o intervalo de tempo de inatividade, é fechada pelo servidor. Isto alivia uma potencial ataque de recusa de serviço.       Quando utilizar uma sessão fiável, existem dois temporizadores de inatividade diferentes que devem ser satisfeitos para keep alive da ligação. Se qualquer uma destas temporizadores de inatividade ficar, a ligação foi removida.      -O temporizador de inatividade primeiro está ligado a sessão fiável e chama o InactivityTimeout. Este temporizador de inatividade é acionado se não existem mensagens, aplicação ou de infraestrutura, são recebidas dentro do período de tempo limite. Uma mensagem de infraestrutura é uma mensagem que é gerada para fins de um dos protocolos na pilha de canal, tais como um keep alive ou uma confirmação, em vez que contêm dados de aplicação.      -O temporizador de inatividade segundo no serviço e utiliza o <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A>definição do enlace.</xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> Desencadeado este temporizador de inatividade não se forem recebidas mensagens nenhuma aplicação dentro do período de tempo limite.       Uma vez que a ligação é ignorada se o temporizador de inatividade é acionado, o aumento InactivityTimeout assim que for maior do que <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A>não tem qualquer efeito.</xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> A predefinição para ambos estes tempos limite é de 10 minutos, pelo que terá sempre aumentar a ambos os parâmetros para efetuar uma diferença ao utilizar uma sessão fiável."
  example:
  - >-
    [!code-cs[UEReliableSession#2](~/add/codesnippet/csharp/p-system.servicemodel.re_0_1.cs)]
     [!code-vb[UEReliableSession#2](~/add/codesnippet/visualbasic/p-system.servicemodel.re_0_1.vb)]
  syntax:
    content: public TimeSpan InactivityTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "O <xref:System.TimeSpan>que especifica o intervalo de tempo que um serviço permanece inativo antes de fechar.</xref:System.TimeSpan> O valor predefinido é de 10 minutos."
  overload: System.ServiceModel.ReliableSession.InactivityTimeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O conjunto de valor é menor ou igual a zero."
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.Ordered
  id: Ordered
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: Ordered
  nameWithType: ReliableSession.Ordered
  fullName: System.ServiceModel.ReliableSession.Ordered
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Obtém ou define um valor que indica se a entrega de mensagens tem preservar a ordem na qual são enviadas as mensagens."
  remarks: "A propriedade obtém e define o valor da <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A>propriedade.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A>"
  example:
  - >-
    [!code-cs[UEReliableSession#2](~/add/codesnippet/csharp/p-system.servicemodel.re_1_1.cs)]
     [!code-vb[UEReliableSession#2](~/add/codesnippet/visualbasic/p-system.servicemodel.re_1_1.vb)]
  syntax:
    content: public bool Ordered { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se as mensagens tem de ser entregue pela ordem na qual são enviados; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor predefinido é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.ReliableSession.Ordered*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ServiceModel.ReliableSession.#ctor
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession()
  nameWithType: ReliableSession.ReliableSession()
  fullName: System.ServiceModel.ReliableSession.ReliableSession()
- uid: System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession(ReliableSessionBindingElement)
  nameWithType: ReliableSession.ReliableSession(ReliableSessionBindingElement)
  fullName: System.ServiceModel.ReliableSession.ReliableSession(ReliableSessionBindingElement)
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement
  parent: System.ServiceModel.Channels
  isExternal: false
  name: ReliableSessionBindingElement
  nameWithType: ReliableSessionBindingElement
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement
- uid: System.ServiceModel.ReliableSession.InactivityTimeout
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
  fullName: System.ServiceModel.ReliableSession.InactivityTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.ReliableSession.Ordered
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: Ordered
  nameWithType: ReliableSession.Ordered
  fullName: System.ServiceModel.ReliableSession.Ordered
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.ReliableSession.#ctor*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession
  nameWithType: ReliableSession.ReliableSession
- uid: System.ServiceModel.ReliableSession.InactivityTimeout*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
- uid: System.ServiceModel.ReliableSession.Ordered*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: Ordered
  nameWithType: ReliableSession.Ordered
