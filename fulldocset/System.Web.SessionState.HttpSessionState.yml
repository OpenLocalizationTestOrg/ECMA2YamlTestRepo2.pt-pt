### YamlMime:ManagedReference
items:
- uid: System.Web.SessionState.HttpSessionState
  id: HttpSessionState
  children:
  - System.Web.SessionState.HttpSessionState.Abandon
  - System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)
  - System.Web.SessionState.HttpSessionState.Clear
  - System.Web.SessionState.HttpSessionState.CodePage
  - System.Web.SessionState.HttpSessionState.Contents
  - System.Web.SessionState.HttpSessionState.CookieMode
  - System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)
  - System.Web.SessionState.HttpSessionState.Count
  - System.Web.SessionState.HttpSessionState.GetEnumerator
  - System.Web.SessionState.HttpSessionState.IsCookieless
  - System.Web.SessionState.HttpSessionState.IsNewSession
  - System.Web.SessionState.HttpSessionState.IsReadOnly
  - System.Web.SessionState.HttpSessionState.IsSynchronized
  - System.Web.SessionState.HttpSessionState.Item(System.Int32)
  - System.Web.SessionState.HttpSessionState.Item(System.String)
  - System.Web.SessionState.HttpSessionState.Keys
  - System.Web.SessionState.HttpSessionState.LCID
  - System.Web.SessionState.HttpSessionState.Mode
  - System.Web.SessionState.HttpSessionState.Remove(System.String)
  - System.Web.SessionState.HttpSessionState.RemoveAll
  - System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)
  - System.Web.SessionState.HttpSessionState.SessionID
  - System.Web.SessionState.HttpSessionState.StaticObjects
  - System.Web.SessionState.HttpSessionState.SyncRoot
  - System.Web.SessionState.HttpSessionState.Timeout
  langs:
  - csharp
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
  type: Class
  summary: "Provides access to session-state values as well as session-level settings and lifetime management methods."
  remarks: "ASP.NET provides session-state management to enable you to store information associated with a unique browser session across multiple requests. You can store a collection of values referenced by a key name or by numerical index. Access to session values and functionality is available using the HttpSessionState class, which is accessible through the <xref:System.Web.HttpContext.Session%2A> property of the current <xref:System.Web.HttpContext>, or the <xref:System.Web.UI.Page.Session%2A> property of the <xref:System.Web.UI.Page>.       Session data is associated with a specific browser session using a unique identifier. By default, this identifier is stored in a non-expiring session cookie in the browser, but you can also configure your application to store the session identifier in the URL by setting the `cookieless` attribute to `true` or <xref:System.Web.HttpCookieMode> in the  element of your application configuration. You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <xref:System.Web.HttpCookieMode> for the `cookieless` attribute. You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <xref:System.Web.HttpCookieMode> for the `cookieless` attribute. If cookies are supported when <xref:System.Web.HttpCookieMode> is specified, or enabled when <xref:System.Web.HttpCookieMode> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL.       Sessions are started during the first request and session values will persist as long as a new request is made by the browser before the number of minutes specified in the <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property pass. When a new session begins, the session <xref:System.Web.SessionState.SessionStateModule.Start> event is raised. You can use this event to perform any additional work at the start of a session, such as setting default session values. When a session times out, the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, or the ASP.NET application is shut down, the session <xref:System.Web.SessionState.SessionStateModule.End> event is raised. You can use this event to perform any necessary cleanup. The <xref:System.Web.SessionState.SessionStateModule.End> event is raised only when the session state `mode` is set to <xref:System.Web.SessionState.SessionStateMode>.       To improve performance, sessions that use cookies do not allocate session storage until data is actually stored in the <xref:System.Web.UI.Page.Session%2A> object. For more information, see the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property.       Session state does not persist across ASP.NET application boundaries. If a browser navigates to another application, the session information is not available to the new application.       Session values are stored in memory on the Web server, by default. You can also store session values in a SQL Server database, an ASP.NET state server, or a custom server. This enables you to preserve session values in cases where the ASP.NET or IIS process or the ASP.NET application restarts and to make session values available across all the servers in a Web farm. This behavior is configured by setting the `mode` attribute to a valid <xref:System.Web.SessionState.SessionStateMode> value in the  element of your application configuration. For more information, see [Session-State Modes](~/add/includes/ajax-current-ext-md.md).       Alternatives to session state include application state (see the <xref:System.Web.HttpApplication.Application%2A> property) and the ASP.NET cache (see the <xref:System.Web.Caching> namespace), which store variables that can be accessed by all users of an ASP.NET application; the ASP.NET profile (see the <xref:System.Web.Profile> namespace), which persists user values in a data store without expiring them using a time-out; ASP.NET <xref:System.Web.UI.WebControls?displayProperty=fullName>, which persist control values in the <xref:System.Web.UI.Control.ViewState%2A>; <xref:System.Web.HttpResponse.Cookies%2A>; the <xref:System.Web.HttpRequest.QueryString%2A> property; and fields on an HTML form that are available from an HTTP `POST` using the <xref:System.Web.HttpRequest.Form%2A> collection. For more details on the differences between session state and other state-management alternatives, see [ASP.NET State Management Recommendations](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example sets and retrieves values from session state.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[HttpSessionState#30](~/add/codesnippet/csharp/t-system.web.sessionstat_5_1.aspx)]\n [!code-vb[HttpSessionState#30](~/add/codesnippet/visualbasic/t-system.web.sessionstat_5_1.aspx)]"
  syntax:
    content: 'public sealed class HttpSessionState : System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Abandon
  id: Abandon
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Abandon()
  nameWithType: HttpSessionState.Abandon()
  fullName: System.Web.SessionState.HttpSessionState.Abandon()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Cancels the current session."
  remarks: "Once the Abandon method is called, the current session is no longer valid and a new session can be started. Abandon causes the <xref:System.Web.SessionState.SessionStateModule.End> event to be raised. A new <xref:System.Web.SessionState.SessionStateModule.Start> event will be raised on the next request.       Session identifiers for abandoned or expired sessions are recycled by default. That is, if a request is made that includes the session identifier for an expired or abandoned session, a new session is started using the same session identifier. You can disable this by setting `regenerateExpiredSessionId` attribute of the  configuration element to `true`. For more information, see [Session Identifiers](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Web.SessionState.SessionStateModule.End> event is supported only when the <xref:System.Web.SessionState.HttpSessionState.Mode%2A> property is set to <xref:System.Web.SessionState.SessionStateMode>."
  syntax:
    content: public void Abandon ();
    parameters: []
  overload: System.Web.SessionState.HttpSessionState.Abandon*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)
  id: Add(System.String,System.Object)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Add(String,Object)
  nameWithType: HttpSessionState.Add(String,Object)
  fullName: System.Web.SessionState.HttpSessionState.Add(String,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Adds a new item to the session-state collection."
  remarks: "If the `name` parameter refers to an existing session state item, the existing item is overwritten with the specified `value`."
  example:
  - "The following example shows how to store values in session state by using the Add method. It also shows how to remove values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Remove%2A> method. A <xref:System.Web.UI.WebControls.Repeater> control is used to display the contents session state on the Web page. The <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> method is used to iterate through the session-state collection and populate the <xref:System.Web.UI.WebControls.Repeater> control.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[HttpSessionState#13](~/add/codesnippet/csharp/m-system.web.sessionstat_16_1.aspx)]\n [!code-vb[HttpSessionState#13](~/add/codesnippet/visualbasic/m-system.web.sessionstat_16_1.aspx)]"
  syntax:
    content: public void Add (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "The name of the item to add to the session-state collection."
    - id: value
      type: System.Object
      description: "The value of the item to add to the session-state collection."
  overload: System.Web.SessionState.HttpSessionState.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Clear
  id: Clear
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Clear()
  nameWithType: HttpSessionState.Clear()
  fullName: System.Web.SessionState.HttpSessionState.Clear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Removes all keys and values from the session-state collection."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Web.SessionState.HttpSessionState.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.CodePage
  id: CodePage
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: CodePage
  nameWithType: HttpSessionState.CodePage
  fullName: System.Web.SessionState.HttpSessionState.CodePage
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets or sets the character-set identifier for the current session."
  remarks: "A character set (code page) is used to interpret multi-byte character data, determining character value, and therefore sort order. Code-page settings apply only to multi-byte character data, not to Unicode character data.       This <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Web.HttpResponse.ContentEncoding%2A> property instead."
  syntax:
    content: public int CodePage { get; set; }
    return:
      type: System.Int32
      description: "The character-set identifier for the current session."
  overload: System.Web.SessionState.HttpSessionState.CodePage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Contents
  id: Contents
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Contents
  nameWithType: HttpSessionState.Contents
  fullName: System.Web.SessionState.HttpSessionState.Contents
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets a reference to the current session-state object."
  remarks: "The Contents property is provided for compatibility with earlier versions of ASP."
  example:
  - "The following code example lists the item names and values in the Contents property.  \n  \n [!code-cs[HttpSessionState#9](~/add/codesnippet/csharp/p-system.web.sessionstat_8_1.aspx)]\n [!code-vb[HttpSessionState#9](~/add/codesnippet/visualbasic/p-system.web.sessionstat_8_1.aspx)]"
  syntax:
    content: public System.Web.SessionState.HttpSessionState Contents { get; }
    return:
      type: System.Web.SessionState.HttpSessionState
      description: "The current <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;></xref>."
  overload: System.Web.SessionState.HttpSessionState.Contents*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.CookieMode
  id: CookieMode
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: CookieMode
  nameWithType: HttpSessionState.CookieMode
  fullName: System.Web.SessionState.HttpSessionState.CookieMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets a value that indicates whether the application is configured for cookieless sessions."
  remarks: "When <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> is `true`, the CookieMode property returns <xref:System.Web.HttpCookieMode>; otherwise the CookieMode property returns <xref:System.Web.HttpCookieMode>."
  example:
  - "The following code example sets the `cookieless` session attribute to `true` in the Web.config file. For this sample application configuration, the CookieMode property would return <xref:System.Web.HttpCookieMode>.  \n  \n```  \n<configuration>  \n  <system.web>  \n    <sessionState   \n      mode=\"InProc\"  \n      cookieless=\"true\"  \n      timeout=\"30\" />  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: public System.Web.HttpCookieMode CookieMode { get; }
    return:
      type: System.Web.HttpCookieMode
      description: "One of the <xref href=&quot;System.Web.HttpCookieMode&quot;></xref> values that indicate whether the application is configured for cookieless sessions. The default is <xref href=&quot;System.Web.HttpCookieMode&quot;></xref>."
  overload: System.Web.SessionState.HttpSessionState.CookieMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: HttpSessionState.CopyTo(Array,Int32)
  fullName: System.Web.SessionState.HttpSessionState.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Copies the collection of session-state values to a one-dimensional array, starting at the specified index in the array."
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "The <xref:System.Array> that receives the session values."
    - id: index
      type: System.Int32
      description: "The zero-based index in `array` from which copying starts."
  overload: System.Web.SessionState.HttpSessionState.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Count
  id: Count
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Count
  nameWithType: HttpSessionState.Count
  fullName: System.Web.SessionState.HttpSessionState.Count
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets the number of items in the session-state collection."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "The number of items in the collection."
  overload: System.Web.SessionState.HttpSessionState.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.GetEnumerator
  id: GetEnumerator
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: HttpSessionState.GetEnumerator()
  fullName: System.Web.SessionState.HttpSessionState.GetEnumerator()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Returns an enumerator that can be used to read all the session-state variable names in the current session."
  remarks: ''
  example:
  - "The following example shows how to store values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Add%2A> method. It also shows how to remove values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Remove%2A> method. A <xref:System.Web.UI.WebControls.Repeater> control is used to display the contents of session state on the Web page. The GetEnumerator method is used to iterate through the session-state collection and populate the <xref:System.Web.UI.WebControls.Repeater> control.  \n  \n [!code-cs[HttpSessionState#13](~/add/codesnippet/csharp/m-system.web.sessionstat_14_1.aspx)]\n [!code-vb[HttpSessionState#13](~/add/codesnippet/visualbasic/m-system.web.sessionstat_14_1.aspx)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> that can iterate through the variable names in the session-state collection."
  overload: System.Web.SessionState.HttpSessionState.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.IsCookieless
  id: IsCookieless
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: IsCookieless
  nameWithType: HttpSessionState.IsCookieless
  fullName: System.Web.SessionState.HttpSessionState.IsCookieless
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets a value indicating whether the session ID is embedded in the URL or stored in an HTTP cookie."
  remarks: "ASP.NET identifies sessions uniquely with each browser. By default, the unique identifier for a session is stored in a non-expiring session cookie in the browser. You can specify that session identifiers not be stored in a cookie by setting the `cookieless` attribute to `true` in the  configuration element.      > [!NOTE] >  To improve the security of your application, your application should allow users to log out, at which point it should call the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method. This reduces the potential for an unwanted source using the unique identifier in the URL to retrieve private data stored in the session for a user.       ASP.NET maintains cookieless session state by automatically inserting a unique session ID into the page&quot;s URL. For example, the following URL has been modified by ASP.NET to include the unique session ID lit3py55t21z5v55vlm25s55:      ```   http://www.example.com/(S(4danlfat035muve4g0mvgfrr))/orderform.aspx   ```       ASP.NET modifies the links contained in all requested pages by embedding a session-ID value in the links just before sending each page to the browser. Session state is maintained as long as the user follows the path of links that the site provides. However, if the user agent rewrites a URL, the session-state instance will be lost.       The session ID is embedded in the URL after the slash that follows the application name and before any remaining file or virtual-directory identifier. This allows ASP.NET to resolve the application name before involving the <xref:System.Web.SessionState.SessionStateModule> in the request.       By default, session identifiers used in cookieless sessions are recycled. That is, if a request is made with a session ID that has expired, a new session is started using the session ID supplied with the request. This behavior can result in the unwanted sharing of session data when a link that contains a cookieless session ID is shared with multiple browsers, perhaps through a search engine or other program. You can reduce the possibility of session data being shared by multiple clients by disabling the recycling of session identifiers. To do this, set the `regenerateExpiredSessionId` attribute of the  configuration element to `true`. This will result in a new session ID being generated when a cookieless session request is made with an expired session ID. Note that if the request made with the expired session ID uses the HTTP `POST` method, then any posted data will be lost when `regenerateExpiredSessionId` is `true`, as ASP.NET performs a redirect to ensure that the browser has the new session identifier in the URL.      > [!NOTE] >  While setting the `regenerateExpiredSessionId` attribute to `true` reduces the possibility of unwanted sharing of session data, it does not protect against an unwanted source gaining access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server. If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>."
  example:
  - "The following code example sets the `cookieless` session attribute to true in the Web.config file.  \n  \n```  \n<configuration>  \n  <system.web>  \n    <sessionState   \n      mode=\"InProc\"  \n      cookieless=\"true\"  \n      regenerateExpiredSessionId=\"true\"  \n      timeout=\"30\" />  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: public bool IsCookieless { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the session is embedded in the URL; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.SessionState.HttpSessionState.IsCookieless*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.IsNewSession
  id: IsNewSession
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: IsNewSession
  nameWithType: HttpSessionState.IsNewSession
  fullName: System.Web.SessionState.HttpSessionState.IsNewSession
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets a value indicating whether the session was created with the current request."
  syntax:
    content: public bool IsNewSession { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the session was created with the current request; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.SessionState.HttpSessionState.IsNewSession*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.IsReadOnly
  id: IsReadOnly
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: HttpSessionState.IsReadOnly
  fullName: System.Web.SessionState.HttpSessionState.IsReadOnly
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets a value indicating whether the session is read-only."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the session is read-only; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.SessionState.HttpSessionState.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.IsSynchronized
  id: IsSynchronized
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: HttpSessionState.IsSynchronized
  fullName: System.Web.SessionState.HttpSessionState.IsSynchronized
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets a value indicating whether access to the collection of session-state values is synchronized (thread safe)."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if access to the collection is synchronized (thread safe); otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.SessionState.HttpSessionState.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: HttpSessionState.Item(Int32)
  fullName: System.Web.SessionState.HttpSessionState.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets or sets a session value by numerical index."
  syntax:
    content: public object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "The numerical index of the session value."
    return:
      type: System.Object
      description: "The session-state value stored at the specified index, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the item does not exist."
  overload: System.Web.SessionState.HttpSessionState.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Item(System.String)
  id: Item(System.String)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Item(String)
  nameWithType: HttpSessionState.Item(String)
  fullName: System.Web.SessionState.HttpSessionState.Item(String)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets or sets a session value by name."
  syntax:
    content: public object this[string name] { get; set; }
    parameters:
    - id: name
      type: System.String
      description: "The key name of the session value."
    return:
      type: System.Object
      description: "The session-state value with the specified name, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the item does not exist."
  overload: System.Web.SessionState.HttpSessionState.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Keys
  id: Keys
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Keys
  nameWithType: HttpSessionState.Keys
  fullName: System.Web.SessionState.HttpSessionState.Keys
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets a collection of the keys for all values stored in the session-state collection."
  syntax:
    content: public System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }
    return:
      type: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
      description: "The <xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection> that contains all the session keys."
  overload: System.Web.SessionState.HttpSessionState.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.LCID
  id: LCID
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: LCID
  nameWithType: HttpSessionState.LCID
  fullName: System.Web.SessionState.HttpSessionState.LCID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets or sets the locale identifier (LCID) of the current session."
  remarks: "The LCID property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Globalization.CultureInfo.LCID%2A> property instead.       ASP.NET does not store the locale identifier in session state. The LCID property accesses the <xref:System.Globalization.CultureInfo.LCID%2A> property to get and set the identifier."
  syntax:
    content: public int LCID { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Globalization.CultureInfo> instance that specifies the culture of the current session."
  overload: System.Web.SessionState.HttpSessionState.LCID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Mode
  id: Mode
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Mode
  nameWithType: HttpSessionState.Mode
  fullName: System.Web.SessionState.HttpSessionState.Mode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets the current session-state mode."
  remarks: "For information about how to configure your server for <xref:System.Web.SessionState.SessionStateMode> or <xref:System.Web.SessionState.SessionStateMode> session-state storage, see [ASP.NET Session State Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example sets the `mode` session attribute to <xref:System.Web.SessionState.SessionStateMode> in the Web.config file. For SQL Server session mode, the `sqlConnectionString` attribute is also required.  \n  \n```  \n<configuration>  \n  <system.web>  \n    <sessionState   \n      mode=\"SQLServer\"  \n      sqlConnectionString=\"Data Source=localhost;Integrated Security=SSPI\"  \n      cookieless=\"true\"  \n      timeout=\"30\" />  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: public System.Web.SessionState.SessionStateMode Mode { get; }
    return:
      type: System.Web.SessionState.SessionStateMode
      description: "One of the <xref href=&quot;System.Web.SessionState.SessionStateMode&quot;></xref> values."
  overload: System.Web.SessionState.HttpSessionState.Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Remove(System.String)
  id: Remove(System.String)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Remove(String)
  nameWithType: HttpSessionState.Remove(String)
  fullName: System.Web.SessionState.HttpSessionState.Remove(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Deletes an item from the session-state collection."
  remarks: "If the session-state collection does not contain an element with the specified `name`, the collection remains unchanged. No exception is thrown."
  example:
  - "The following example shows how to store values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Add%2A> method. It also shows how to remove values in session state by using the Remove method. A <xref:System.Web.UI.WebControls.Repeater> control is used to display the contents of session state on the Web page. The <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> method is used to iterate through the session-state collection and populate the <xref:System.Web.UI.WebControls.Repeater> control.  \n  \n [!code-cs[HttpSessionState#13](~/add/codesnippet/csharp/m-system.web.sessionstat_6_1.aspx)]\n [!code-vb[HttpSessionState#13](~/add/codesnippet/visualbasic/m-system.web.sessionstat_6_1.aspx)]"
  syntax:
    content: public void Remove (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the item to delete from the session-state collection."
  overload: System.Web.SessionState.HttpSessionState.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.RemoveAll
  id: RemoveAll
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: RemoveAll()
  nameWithType: HttpSessionState.RemoveAll()
  fullName: System.Web.SessionState.HttpSessionState.RemoveAll()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Removes all keys and values from the session-state collection."
  remarks: "RemoveAll performs the same function as <xref:System.Web.SessionState.HttpSessionState.Clear%2A>."
  syntax:
    content: public void RemoveAll ();
    parameters: []
  overload: System.Web.SessionState.HttpSessionState.RemoveAll*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: HttpSessionState.RemoveAt(Int32)
  fullName: System.Web.SessionState.HttpSessionState.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Deletes an item at a specified index from the session-state collection."
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The index of the item to remove from the session-state collection."
  overload: System.Web.SessionState.HttpSessionState.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n \\- or -  \n  \n <code>index</code> is equal to or greater than <xref:System.Web.SessionState.HttpSessionState.Count*>."
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.SessionID
  id: SessionID
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: SessionID
  nameWithType: HttpSessionState.SessionID
  fullName: System.Web.SessionState.HttpSessionState.SessionID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets the unique identifier for the session."
  remarks: "The SessionID property is used to uniquely identify a browser with session data on the server. The SessionID value is randomly generated by ASP.NET and stored in a non-expiring session cookie in the browser. The SessionID value is then sent in a cookie with each request to the ASP.NET application.       If you want to disable the use of cookies in your ASP.NET application and still make use of session state, you can configure your application to store the session identifier in the URL instead of a cookie by setting the `cookieless` attribute of the  configuration element to `true`, or to <xref:System.Web.HttpCookieMode>, in the Web.config file for your application. You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <xref:System.Web.HttpCookieMode> for the `cookieless` attribute. You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <xref:System.Web.HttpCookieMode> for the `cookieless` attribute. If cookies are supported when <xref:System.Web.HttpCookieMode> is specified, or enabled when <xref:System.Web.HttpCookieMode> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL. For more information, see the <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> property.       The SessionID is sent between the server and the browser in clear text, either in a cookie or in the URL. As a result, an unwanted source could gain access to the session of another user by obtaining the SessionID value and including it in requests to the server. If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the SessionID.       When using cookie-based session state, ASP.NET does not allocate storage for session data until the <xref:System.Web.UI.Page.Session%2A> object is used. As a result, a new session ID is generated for each page request until the session object is accessed. If your application requires a static session ID for the entire session, you can either implement the `Session_Start` method in the application&quot;s Global.asax file and store data in the <xref:System.Web.UI.Page.Session%2A> object to fix the session ID, or you can use code in another part of your application to explicitly store data in the <xref:System.Web.UI.Page.Session%2A> object.       If your application uses cookieless session state, the session ID is generated on the first page view and is maintained for the entire session."
  example:
  - "The following code example shows a Web.config file that configures session state to use cookieless session identifiers. For more information, see the <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> property.  \n  \n```  \n<configuration>  \n  <system.web>  \n    <sessionState   \n      cookieless=\"true\"  \n      regenerateExpiredSessionId=\"true\"  \n      timeout=\"30\" />  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: public string SessionID { get; }
    return:
      type: System.String
      description: "The unique session identifier."
  overload: System.Web.SessionState.HttpSessionState.SessionID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.StaticObjects
  id: StaticObjects
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: StaticObjects
  nameWithType: HttpSessionState.StaticObjects
  fullName: System.Web.SessionState.HttpSessionState.StaticObjects
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets a collection of objects declared by <xref uid=&quot;langword_csharp_&lt;object Runat=&quot;Server&quot; Scope=&quot;Session&quot;/&gt;&quot; name=&quot;&lt;object Runat=&quot;Server&quot; Scope=&quot;Session&quot;/&gt;&quot; href=&quot;&quot;></xref> tags within the ASP.NET application file Global.asax."
  remarks: "If an object on a page does not support serialization and <xref:System.Web.SessionState.HttpSessionState.Mode%2A> is out-of-process (<xref:System.Web.SessionState.SessionStateMode> or <xref:System.Web.SessionState.SessionStateMode>), the object will not be created and will not be added to this collection.       The StaticObjects property is provided for compatibility with earlier versions of ASP."
  example:
  - "The following code example lists the `id` and object type of the objects in the StaticObjects collection.  \n  \n [!code-cs[HttpSessionState#10](~/add/codesnippet/csharp/p-system.web.sessionstat_9_1.aspx)]\n [!code-vb[HttpSessionState#10](~/add/codesnippet/visualbasic/p-system.web.sessionstat_9_1.aspx)]"
  syntax:
    content: public System.Web.HttpStaticObjectsCollection StaticObjects { get; }
    return:
      type: System.Web.HttpStaticObjectsCollection
      description: "An <xref href=&quot;System.Web.HttpStaticObjectsCollection&quot;></xref> containing objects declared in the Global.asax file."
  overload: System.Web.SessionState.HttpSessionState.StaticObjects*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.SyncRoot
  id: SyncRoot
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: SyncRoot
  nameWithType: HttpSessionState.SyncRoot
  fullName: System.Web.SessionState.HttpSessionState.SyncRoot
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets an object that can be used to synchronize access to the collection of session-state values."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "An object that can be used to synchronize access to the collection."
  overload: System.Web.SessionState.HttpSessionState.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.HttpSessionState.Timeout
  id: Timeout
  parent: System.Web.SessionState.HttpSessionState
  langs:
  - csharp
  name: Timeout
  nameWithType: HttpSessionState.Timeout
  fullName: System.Web.SessionState.HttpSessionState.Timeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "Gets and sets the amount of time, in minutes, allowed between requests before the session-state provider terminates the session."
  remarks: "The Timeout property can be set in the Web.config file for an application using the `timeout` attribute of the  configuration element, or you can set the Timeout property value directly using application code.       The Timeout property cannot be set to a value greater than 525,600 minutes (1 year). The default value is 20 minutes."
  example:
  - "The following code example sets the `timeout` session attribute to 30 minutes in the Web.config file.  \n  \n```  \n<configuration>  \n  <system.web>  \n    <sessionState   \n      mode=\"InProc\"  \n      cookieless=\"true\"  \n      timeout=\"30\" />  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: public int Timeout { get; set; }
    return:
      type: System.Int32
      description: "The time-out period, in minutes."
  overload: System.Web.SessionState.HttpSessionState.Timeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Web.SessionState.HttpSessionState.Abandon
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Abandon()
  nameWithType: HttpSessionState.Abandon()
  fullName: System.Web.SessionState.HttpSessionState.Abandon()
- uid: System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Add(String,Object)
  nameWithType: HttpSessionState.Add(String,Object)
  fullName: System.Web.SessionState.HttpSessionState.Add(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.SessionState.HttpSessionState.Clear
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Clear()
  nameWithType: HttpSessionState.Clear()
  fullName: System.Web.SessionState.HttpSessionState.Clear()
- uid: System.Web.SessionState.HttpSessionState.CodePage
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CodePage
  nameWithType: HttpSessionState.CodePage
  fullName: System.Web.SessionState.HttpSessionState.CodePage
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.SessionState.HttpSessionState.Contents
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Contents
  nameWithType: HttpSessionState.Contents
  fullName: System.Web.SessionState.HttpSessionState.Contents
- uid: System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: false
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.SessionState.HttpSessionState.CookieMode
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CookieMode
  nameWithType: HttpSessionState.CookieMode
  fullName: System.Web.SessionState.HttpSessionState.CookieMode
- uid: System.Web.HttpCookieMode
  parent: System.Web
  isExternal: false
  name: HttpCookieMode
  nameWithType: HttpCookieMode
  fullName: System.Web.HttpCookieMode
- uid: System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: HttpSessionState.CopyTo(Array,Int32)
  fullName: System.Web.SessionState.HttpSessionState.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Web.SessionState.HttpSessionState.Count
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Count
  nameWithType: HttpSessionState.Count
  fullName: System.Web.SessionState.HttpSessionState.Count
- uid: System.Web.SessionState.HttpSessionState.GetEnumerator
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: GetEnumerator()
  nameWithType: HttpSessionState.GetEnumerator()
  fullName: System.Web.SessionState.HttpSessionState.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Web.SessionState.HttpSessionState.IsCookieless
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsCookieless
  nameWithType: HttpSessionState.IsCookieless
  fullName: System.Web.SessionState.HttpSessionState.IsCookieless
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.SessionState.HttpSessionState.IsNewSession
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsNewSession
  nameWithType: HttpSessionState.IsNewSession
  fullName: System.Web.SessionState.HttpSessionState.IsNewSession
- uid: System.Web.SessionState.HttpSessionState.IsReadOnly
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsReadOnly
  nameWithType: HttpSessionState.IsReadOnly
  fullName: System.Web.SessionState.HttpSessionState.IsReadOnly
- uid: System.Web.SessionState.HttpSessionState.IsSynchronized
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsSynchronized
  nameWithType: HttpSessionState.IsSynchronized
  fullName: System.Web.SessionState.HttpSessionState.IsSynchronized
- uid: System.Web.SessionState.HttpSessionState.Item(System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Item(Int32)
  nameWithType: HttpSessionState.Item(Int32)
  fullName: System.Web.SessionState.HttpSessionState.Item(Int32)
- uid: System.Web.SessionState.HttpSessionState.Item(System.String)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Item(String)
  nameWithType: HttpSessionState.Item(String)
  fullName: System.Web.SessionState.HttpSessionState.Item(String)
- uid: System.Web.SessionState.HttpSessionState.Keys
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Keys
  nameWithType: HttpSessionState.Keys
  fullName: System.Web.SessionState.HttpSessionState.Keys
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameObjectCollectionBase+KeysCollection
  nameWithType: NameObjectCollectionBase+KeysCollection
  fullName: System.Collections.Specialized.NameObjectCollectionBase+KeysCollection
- uid: System.Web.SessionState.HttpSessionState.LCID
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: LCID
  nameWithType: HttpSessionState.LCID
  fullName: System.Web.SessionState.HttpSessionState.LCID
- uid: System.Web.SessionState.HttpSessionState.Mode
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Mode
  nameWithType: HttpSessionState.Mode
  fullName: System.Web.SessionState.HttpSessionState.Mode
- uid: System.Web.SessionState.SessionStateMode
  parent: System.Web.SessionState
  isExternal: false
  name: SessionStateMode
  nameWithType: SessionStateMode
  fullName: System.Web.SessionState.SessionStateMode
- uid: System.Web.SessionState.HttpSessionState.Remove(System.String)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Remove(String)
  nameWithType: HttpSessionState.Remove(String)
  fullName: System.Web.SessionState.HttpSessionState.Remove(String)
- uid: System.Web.SessionState.HttpSessionState.RemoveAll
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: RemoveAll()
  nameWithType: HttpSessionState.RemoveAll()
  fullName: System.Web.SessionState.HttpSessionState.RemoveAll()
- uid: System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: HttpSessionState.RemoveAt(Int32)
  fullName: System.Web.SessionState.HttpSessionState.RemoveAt(Int32)
- uid: System.Web.SessionState.HttpSessionState.SessionID
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: SessionID
  nameWithType: HttpSessionState.SessionID
  fullName: System.Web.SessionState.HttpSessionState.SessionID
- uid: System.Web.SessionState.HttpSessionState.StaticObjects
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: StaticObjects
  nameWithType: HttpSessionState.StaticObjects
  fullName: System.Web.SessionState.HttpSessionState.StaticObjects
- uid: System.Web.HttpStaticObjectsCollection
  parent: System.Web
  isExternal: false
  name: HttpStaticObjectsCollection
  nameWithType: HttpStaticObjectsCollection
  fullName: System.Web.HttpStaticObjectsCollection
- uid: System.Web.SessionState.HttpSessionState.SyncRoot
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: SyncRoot
  nameWithType: HttpSessionState.SyncRoot
  fullName: System.Web.SessionState.HttpSessionState.SyncRoot
- uid: System.Web.SessionState.HttpSessionState.Timeout
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Timeout
  nameWithType: HttpSessionState.Timeout
  fullName: System.Web.SessionState.HttpSessionState.Timeout
- uid: System.Web.SessionState.HttpSessionState.Abandon*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Abandon
  nameWithType: HttpSessionState.Abandon
- uid: System.Web.SessionState.HttpSessionState.Add*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Add
  nameWithType: HttpSessionState.Add
- uid: System.Web.SessionState.HttpSessionState.Clear*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Clear
  nameWithType: HttpSessionState.Clear
- uid: System.Web.SessionState.HttpSessionState.CodePage*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CodePage
  nameWithType: HttpSessionState.CodePage
- uid: System.Web.SessionState.HttpSessionState.Contents*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Contents
  nameWithType: HttpSessionState.Contents
- uid: System.Web.SessionState.HttpSessionState.CookieMode*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CookieMode
  nameWithType: HttpSessionState.CookieMode
- uid: System.Web.SessionState.HttpSessionState.CopyTo*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: CopyTo
  nameWithType: HttpSessionState.CopyTo
- uid: System.Web.SessionState.HttpSessionState.Count*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Count
  nameWithType: HttpSessionState.Count
- uid: System.Web.SessionState.HttpSessionState.GetEnumerator*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: GetEnumerator
  nameWithType: HttpSessionState.GetEnumerator
- uid: System.Web.SessionState.HttpSessionState.IsCookieless*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsCookieless
  nameWithType: HttpSessionState.IsCookieless
- uid: System.Web.SessionState.HttpSessionState.IsNewSession*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsNewSession
  nameWithType: HttpSessionState.IsNewSession
- uid: System.Web.SessionState.HttpSessionState.IsReadOnly*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsReadOnly
  nameWithType: HttpSessionState.IsReadOnly
- uid: System.Web.SessionState.HttpSessionState.IsSynchronized*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: IsSynchronized
  nameWithType: HttpSessionState.IsSynchronized
- uid: System.Web.SessionState.HttpSessionState.Item*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Item
  nameWithType: HttpSessionState.Item
- uid: System.Web.SessionState.HttpSessionState.Keys*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Keys
  nameWithType: HttpSessionState.Keys
- uid: System.Web.SessionState.HttpSessionState.LCID*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: LCID
  nameWithType: HttpSessionState.LCID
- uid: System.Web.SessionState.HttpSessionState.Mode*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Mode
  nameWithType: HttpSessionState.Mode
- uid: System.Web.SessionState.HttpSessionState.Remove*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Remove
  nameWithType: HttpSessionState.Remove
- uid: System.Web.SessionState.HttpSessionState.RemoveAll*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: RemoveAll
  nameWithType: HttpSessionState.RemoveAll
- uid: System.Web.SessionState.HttpSessionState.RemoveAt*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: RemoveAt
  nameWithType: HttpSessionState.RemoveAt
- uid: System.Web.SessionState.HttpSessionState.SessionID*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: SessionID
  nameWithType: HttpSessionState.SessionID
- uid: System.Web.SessionState.HttpSessionState.StaticObjects*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: StaticObjects
  nameWithType: HttpSessionState.StaticObjects
- uid: System.Web.SessionState.HttpSessionState.SyncRoot*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: SyncRoot
  nameWithType: HttpSessionState.SyncRoot
- uid: System.Web.SessionState.HttpSessionState.Timeout*
  parent: System.Web.SessionState.HttpSessionState
  isExternal: false
  name: Timeout
  nameWithType: HttpSessionState.Timeout
