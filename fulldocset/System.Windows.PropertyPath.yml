### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "Implementa uma estrutura de dados para descrever uma propriedade como um caminho abaixo outra propriedade ou abaixo de um tipo de propriedade. Propriedade são utilizados caminhos no enlace de dados para objetos de e storyboards e linhas cronológicas de animações."
  remarks: "Esta classe contém uma cadeia <xref:System.Windows.PropertyPath.Path%2A>e a lista de propriedades de dependência que estão <xref:System.Windows.PropertyPath.PathParameters%2A>na cadeia<xref:System.Windows.PropertyPath.Path%2A>.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>       PropertyPath suporta dois modos de comportamento: **modo origem** descreve um caminho para uma propriedade que é utilizado como uma origem para outra operação. Este modo é utilizado pelo <xref:System.Windows.Data.Binding>classe para suportar o enlace de dados.</xref:System.Windows.Data.Binding>       **Modo de destino** descreve um caminho para uma propriedade que será definida como uma propriedade de destino. Este modo é utilizado pelo animação como suporte de guião gráfico principal e a linha cronológica setters.       Por exemplo, `Background.Opacity` é um caminho de dois passos. Este caminho implica: em primeiro lugar, localize o `Background` propriedade de um objeto, obter o objeto de valor que o `Background` propriedade está definida como e, em seguida, obter o valor do `Opacity` propriedade nesse objecto.      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a># # Utilização do atributo de XAML ```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> # # XAML valores *propertyPath* uma cadeia que é avaliada para ser um caminho de propriedade simples ou complexas.       A sintaxe para definir um PropertyPath [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] versátil mas complexa e é descrita no tópico separado [PropertyPath XAML sintaxe](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> classe."
  remarks: "Este construtor tem dois utilizações completamente diferentes dependendo se está a ser utilizado para um caminho de propriedade do modo de origem para um enlace de ou para um caminho de propriedade de único passo do modo de destino para um destino de guião gráfico principal.       Se utilizar esta <xref:System.Windows.PropertyPath>no modo de origem para um enlace `parameter` é uma cadeia que representa um nome de propriedade ou pode ser uma cadeia que descreve um caminho &quot;passo a passo&quot; para a propriedade no [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] modelo de objeto do objeto que está a ser utilizado como origem para um enlace.</xref:System.Windows.PropertyPath> Para um caminho de propriedade de enlace, o caráter que identifica um &quot;passo&quot; é um ponto (.). Também são suportadas referências de indexador (incluindo vários indexadores e tipo diferenciação). Para obter mais detalhes sobre a sintaxe da cadeia como especificamente utilizada pelo <xref:System.Windows.Data.Binding>objeto, consulte <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding> Uma propriedade utilizada como uma origem de enlace não tem de ser uma propriedade de dependência. Se o enlace de atualizações bidirecional, a propriedade referenciada tem de ser de leitura / escrita. Note também que o destino de enlace tem de ser uma propriedade de dependência. Para obter mais informações, consulte [descrição geral de enlace de dados](~/add/includes/ajax-current-ext-md.md).       Se utilizar esta <xref:System.Windows.PropertyPath>no modo de destino para um caminho único passo para um destino de guião gráfico principal, `parameter` é, geralmente, fornecido como tipo <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.PropertyPath> Também pode especificar uma cadeia que é <xref:System.Windows.DependencyProperty.Name%2A>.</xref:System.Windows.DependencyProperty.Name%2A> Qualquer uma destas avaliar para o mesmo resultado, porque esta está armazenada internamente como uma cadeia. Um fornecido <xref:System.Windows.DependencyProperty>é convertido numa cadeia através de <xref:System.Windows.Markup.DependencyPropertyConverter>.</xref:System.Windows.Markup.DependencyPropertyConverter> </xref:System.Windows.DependencyProperty> O <xref:System.Windows.Markup.DependencyPropertyConverter>suporta um formato de nomenclatura qualificado para propriedades de dependência, pelo que pode especificar um *typeName*.* propertyName* qualificado cadeia de nome de propriedade de dependência para o construtor PropertyPath no código.</xref:System.Windows.Markup.DependencyPropertyConverter> O caminho qualificado para o identificador de propriedade de dependência é um conceito diferentes que um caminho complexo. Um caminho de complexas <xref:System.Windows.PropertyPath>em vez disso, deve ser criado com o <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>construtor.</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath>"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Um caminho de propriedade que descreve a um caminho para um [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] propriedade ou uma propriedade de dependência único."
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> classe, com os parâmetros e a cadeia do token pathing fornecido."
  remarks: "Esta assinatura é geralmente apenas utilizada para o modo de destino <xref:System.Windows.PropertyPath>utilizações com caminhos complexas.</xref:System.Windows.PropertyPath>       Este construtor suporta `params` para o `pathParameters` argumento de construtor. Por conseguinte, pode especificar o conteúdo do `pathParameters` como uma série de argumentos de construtor de valores separados por vírgulas que povoa a matriz, em vez de necessitar de uma matriz de dimensão e, em seguida, preenchê-lo com o `pathParameters` itens. Cada item que especificar tem de ser um dos seguintes tipos: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo> <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> </xref:System.Windows.DependencyProperty>       Para obter mais informações sobre os requisitos dos parâmetros, consulte <xref:System.Windows.PropertyPath.Path%2A>e <xref:System.Windows.PropertyPath.PathParameters%2A>.</xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>"
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "Uma cadeia que especifica o <xref:System.Windows.PropertyPath.Path*>, num formato tokenized.</xref:System.Windows.PropertyPath.Path*>"
    - id: pathParameters
      type: System.Object[]
      description: "Uma matriz de objetos que define o <xref:System.Windows.PropertyPath.PathParameters*>.</xref:System.Windows.PropertyPath.PathParameters*>"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém ou define a cadeia que descreve o caminho."
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "A cadeia que descreve o caminho."
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Obtém a lista de parâmetros a utilizar quando o caminho se refere a parâmetros indexados."
  remarks: "As propriedades de um <xref:System.Windows.PropertyPath>normalmente são estabelecidas através de construtores.</xref:System.Windows.PropertyPath> Para definir PathParameters, o <xref:System.Windows.PropertyPath.%23ctor%2A>construtor é particularmente conveniente porque o `pathParameters` argumento de construtor é designado como `params`, que significa que não tem de criar ou uma matriz de construção de dimensão.</xref:System.Windows.PropertyPath.%23ctor%2A> Basta especificar cada membro da matriz como um parâmetro adicional.       Se a propriedade final que é o destino for um <xref:System.Windows.Freezable>tipo, que irá ser clonado valor.</xref:System.Windows.Freezable> Para obter mais informações, consulte [descrição geral de Storyboards](~/add/includes/ajax-current-ext-md.md).       A avaliação real da cadeia de propriedade é realizada os mecanismos de animação guião gráfico principal. Na <xref:System.Windows.PropertyPath>nível, nenhuma validação é efetuada para se certificar de que os passos do caminho ligar-se de todo.</xref:System.Windows.PropertyPath> Por exemplo, pode construir um caminho de propriedade que tenha <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>como o primeiro passo e <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>como segundo passo.</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Mas um caminho de propriedade provocaria a falha se aplicados, na verdade, como um destino, porque o Pincel tipo que preenche <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>não tem um <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>propriedade.</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Caminhos de propriedade inválido falharem silenciosamente. Para obter mais informações, consulte [descrição geral de Storyboards](../Topic/Storyboards%20Overview.md).       **XAML:** quando utiliza um <xref:System.Windows.PropertyPath>para descrever uma referência de propriedade no [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], como um valor de atributo, a cadeia que especificar pela primeira vez é processado por um conversor de tipos (<xref:System.Windows.PropertyPathConverter>).</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> Este conversor de tipos, em seguida, processa a cadeia e com base no respetivo sintaxe irá chamar um do <xref:System.Windows.PropertyPath>assinaturas de construtor.</xref:System.Windows.PropertyPath> Este direção através do conversor de tipos processamento de um valor de atributo é, geralmente, como utilizar <xref:System.Windows.PropertyPath>no [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], em vez de declarar um <xref:System.Windows.PropertyPath>elemento e, em seguida, aplicar, tais como valores específicos para atributos de objeto <xref:System.Windows.PropertyPath.Path%2A>e PathParameters.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> Para obter mais informações, consulte [PropertyPath XAML sintaxe](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlTextUsage_PathParameters&quot;></a># # XAML texto utilização membros o <xref:System.Windows.PropertyPath>tipo não são normalmente definidas numa direta [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] sintaxe.</xref:System.Windows.PropertyPath> Consulte observações."
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "A lista de parâmetros."
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
