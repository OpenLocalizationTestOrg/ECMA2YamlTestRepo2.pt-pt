### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlTransaction
  id: SqlTransaction
  children:
  - System.Data.SqlClient.SqlTransaction.Commit
  - System.Data.SqlClient.SqlTransaction.Connection
  - System.Data.SqlClient.SqlTransaction.DbConnection
  - System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlTransaction.IsolationLevel
  - System.Data.SqlClient.SqlTransaction.Rollback
  - System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  - System.Data.SqlClient.SqlTransaction.Save(System.String)
  langs:
  - csharp
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
  type: Class
  summary: "Representa um [!INCLUDE[tsql](~/add/includes/tsql-md.md)] transação a ser efetuadas num [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] base de dados. Esta classe não pode ser herdada."
  remarks: "The application creates a SqlTransaction object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the SqlTransaction object.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a SqlTransaction. Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\\(SQL.105\\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\\(SQL.105\\).aspx)."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a SqlTransaction. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error, or if it is disposed without first being committed. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: 'public sealed class SqlTransaction : System.Data.Common.DbTransaction'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbTransaction
  implements: []
  inheritedMembers:
  - System.Data.Common.DbTransaction.Dispose
  - System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Commit
  id: Commit
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Consolida a transação de base de dados."
  remarks: "O método de consolidação é equivalente à instrução de Transact-SQL CONSOLIDAR a transação. -Não é possível reverter uma transação depois de ter sido consolidada, porque todas as modificações ficou permanente parte da base de dados. Para obter mais informações, consulte SQL Server Books Online.      > [!NOTE]  >   `Try` / `Catch` processamento de exceções deve sempre ser utilizado se a consolidação ou reversão <xref:System.Data.SqlClient.SqlTransaction>.</xref:System.Data.SqlClient.SqlTransaction> Ambos `Commit` e <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>gera um <xref:System.InvalidOperationException>se a ligação foi terminada ou se a transação já foi revertida no servidor.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       Para obter mais informações sobre transações do SQL Server, consulte &quot;Transações explícitas&quot; e &quot;Codificação eficiente transações&quot; no SQL Server Books Online."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the Commit, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._25_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._25_1.vb)]"
  syntax:
    content: public override void Commit ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Commit*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Ocorreu um erro ao tentar consolidar a transação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A transação já foi consolidada ou revertida.       - ou - a ligação está quebrada."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Obtém o <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objeto associado à transação, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a transação já não é válida."
  remarks: "Uma aplicação individual pode ter várias ligações de base de dados, cada um com zero ou mais transações. Esta propriedade permite-lhe determinar o objeto de ligação associado uma transação específica criada pelo <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>"
  syntax:
    content: public System.Data.SqlClient.SqlConnection Connection { get; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: "O <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> objeto associado à transação."
  overload: System.Data.SqlClient.SqlTransaction.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  id: DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbConnection DbConnection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "A adicionar."
  overload: System.Data.SqlClient.SqlTransaction.DbConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "A adicionar."
  overload: System.Data.SqlClient.SqlTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  id: IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Especifica o <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> para esta transação."
  remarks: "Transações paralelas não são suportadas. Por conseguinte, o <xref:System.Data.IsolationLevel>aplica-se para a transação de toda.</xref:System.Data.IsolationLevel>       Para obter mais informações sobre níveis de isolamento do SQL Server, consulte &quot;Isolamento de níveis no motor base de dados&quot; no SQL Server Books Online."
  syntax:
    content: public override System.Data.IsolationLevel IsolationLevel { get; }
    return:
      type: System.Data.IsolationLevel
      description: "O <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> para esta transação. A predefinição é <xref uid=&quot;langword_csharp_ReadCommitted&quot; name=&quot;ReadCommitted&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlTransaction.IsolationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  id: Rollback
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Reverte uma transação de estado pendente."
  remarks: "O método de reversão é equivalente à instrução de Transact-SQL ROLLBACK TRANSACTION. Para obter mais informações, consulte SQL Server Books Online.       A transação pode apenas ser revertida partir de um estado pendente (após <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>foi chamado, mas antes <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>denomina).</xref:System.Data.SqlClient.SqlTransaction.Commit%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> A transação é revertida novamente no caso de este é eliminado antes `Commit` ou `Rollback` é chamado.      > [!NOTE]  >   `Try` / `Catch` processamento de exceções sempre deve ser utilizado ao reverter uma transação. A `Rollback` gera um <xref:System.InvalidOperationException>se a ligação foi terminada ou se a transação já foi revertida no servidor.</xref:System.InvalidOperationException>       Para obter mais informações sobre transações do SQL Server, consulte &quot;Transações explícitas&quot; e &quot;Codificação eficiente transações&quot; no SQL Server Books Online."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and Rollback methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._8_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._8_1.vb)]"
  syntax:
    content: public override void Rollback ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Ocorreu um erro ao tentar consolidar a transação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A transação já foi consolidada ou revertida.       - ou - a ligação está quebrada."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  id: Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Reverte uma transação de estado pendente e especifica o nome de ponto de reposição ou a transação."
  remarks: "O <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>método é equivalente à instrução de Transact-SQL ROLLBACK TRANSACTION.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> Para obter mais informações, consulte &quot;Transações explícitas&quot; e &quot;Transação pontos de reposição&quot; no SQL Server Books Online.       A transação pode apenas ser revertida partir de um estado pendente (após <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>foi chamado, mas antes <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>denomina).</xref:System.Data.SqlClient.SqlTransaction.Commit%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> A transação é revertida se este é eliminado antes `Commit` ou `Rollback` é chamado.      > [!NOTE]  >   `Try` / `Catch` processamento de exceções sempre deve ser utilizado ao reverter uma transação. A `Rollback` gera um <xref:System.InvalidOperationException>se a ligação foi terminada ou se a transação já foi revertida no servidor.</xref:System.InvalidOperationException>       Para obter mais informações sobre transações do SQL Server, consulte &quot;Transações explícitas&quot; e &quot;Codificação eficiente transações&quot; no SQL Server Books Online."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._40_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._40_1.vb)]"
  syntax:
    content: public void Rollback (string transactionName);
    parameters:
    - id: transactionName
      type: System.String
      description: "O nome da transação para reverter ou o ponto de reposição para que a reversão."
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Foi especificado nenhum nome de transação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A transação já foi consolidada ou revertida.       - ou - a ligação está quebrada."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  id: Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Cria um ponto de reposição na transação que pode ser utilizada para reverter uma parte da transação e especifica o nome de ponto de reposição."
  remarks: "Método de guardar é equivalente à instrução de Transact-SQL SAVE TRANSACTION.       O valor utilizado no `savePoint` parâmetro pode ser o mesmo valor utilizado no `transactionName` parâmetro de algumas implementações do <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>método.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>       Pontos de reposição oferecem um mecanismo para reverter partes de transações. Criar um ponto de reposição utilizando o método de guardar e, em seguida, posterior chamada o <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>método para reverter para o ponto de reposição em vez de a reverter para o início da transação.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>"
  syntax:
    content: public void Save (string savePointName);
    parameters:
    - id: savePointName
      type: System.String
      description: "O nome do ponto de reposição."
  overload: System.Data.SqlClient.SqlTransaction.Save*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Ocorreu um erro ao tentar consolidar a transação."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A transação já foi consolidada ou revertida.       - ou - a ligação está quebrada."
  platform:
  - net462
references:
- uid: System.Data.Common.DbTransaction
  isExternal: false
  name: System.Data.Common.DbTransaction
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.SqlClient.SqlTransaction.Commit
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
- uid: System.Data.SqlClient.SqlTransaction.Connection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
- uid: System.Data.SqlClient.SqlTransaction.Commit*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit
  nameWithType: SqlTransaction.Commit
- uid: System.Data.SqlClient.SqlTransaction.Connection*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose
  nameWithType: SqlTransaction.Dispose
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback
  nameWithType: SqlTransaction.Rollback
- uid: System.Data.SqlClient.SqlTransaction.Save*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save
  nameWithType: SqlTransaction.Save
