### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.DataList
  id: DataList
  children:
  - System.Web.UI.WebControls.DataList.#ctor
  - System.Web.UI.WebControls.DataList.AlternatingItemStyle
  - System.Web.UI.WebControls.DataList.AlternatingItemTemplate
  - System.Web.UI.WebControls.DataList.CancelCommand
  - System.Web.UI.WebControls.DataList.CancelCommandName
  - System.Web.UI.WebControls.DataList.CreateControlHierarchy(System.Boolean)
  - System.Web.UI.WebControls.DataList.CreateControlStyle
  - System.Web.UI.WebControls.DataList.CreateItem(System.Int32,System.Web.UI.WebControls.ListItemType)
  - System.Web.UI.WebControls.DataList.DeleteCommand
  - System.Web.UI.WebControls.DataList.DeleteCommandName
  - System.Web.UI.WebControls.DataList.EditCommand
  - System.Web.UI.WebControls.DataList.EditCommandName
  - System.Web.UI.WebControls.DataList.EditItemIndex
  - System.Web.UI.WebControls.DataList.EditItemStyle
  - System.Web.UI.WebControls.DataList.EditItemTemplate
  - System.Web.UI.WebControls.DataList.ExtractTemplateRows
  - System.Web.UI.WebControls.DataList.FooterStyle
  - System.Web.UI.WebControls.DataList.FooterTemplate
  - System.Web.UI.WebControls.DataList.GridLines
  - System.Web.UI.WebControls.DataList.HeaderStyle
  - System.Web.UI.WebControls.DataList.HeaderTemplate
  - System.Web.UI.WebControls.DataList.InitializeItem(System.Web.UI.WebControls.DataListItem)
  - System.Web.UI.WebControls.DataList.ItemCommand
  - System.Web.UI.WebControls.DataList.ItemCreated
  - System.Web.UI.WebControls.DataList.ItemDataBound
  - System.Web.UI.WebControls.DataList.Items
  - System.Web.UI.WebControls.DataList.ItemStyle
  - System.Web.UI.WebControls.DataList.ItemTemplate
  - System.Web.UI.WebControls.DataList.LoadViewState(System.Object)
  - System.Web.UI.WebControls.DataList.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  - System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  - System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  - System.Web.UI.WebControls.DataList.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  - System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)
  - System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)
  - System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  - System.Web.UI.WebControls.DataList.PrepareControlHierarchy
  - System.Web.UI.WebControls.DataList.RenderContents(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.DataList.RepeatColumns
  - System.Web.UI.WebControls.DataList.RepeatDirection
  - System.Web.UI.WebControls.DataList.RepeatLayout
  - System.Web.UI.WebControls.DataList.SaveViewState
  - System.Web.UI.WebControls.DataList.SelectCommandName
  - System.Web.UI.WebControls.DataList.SelectedIndex
  - System.Web.UI.WebControls.DataList.SelectedItem
  - System.Web.UI.WebControls.DataList.SelectedItemStyle
  - System.Web.UI.WebControls.DataList.SelectedItemTemplate
  - System.Web.UI.WebControls.DataList.SelectedValue
  - System.Web.UI.WebControls.DataList.SeparatorStyle
  - System.Web.UI.WebControls.DataList.SeparatorTemplate
  - System.Web.UI.WebControls.DataList.ShowFooter
  - System.Web.UI.WebControls.DataList.ShowHeader
  - System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#GetItemStyle(System.Web.UI.WebControls.ListItemType,System.Int32)
  - System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasFooter
  - System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasHeader
  - System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasSeparators
  - System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RenderItem(System.Web.UI.WebControls.ListItemType,System.Int32,System.Web.UI.WebControls.RepeatInfo,System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RepeatedItemCount
  - System.Web.UI.WebControls.DataList.TagKey
  - System.Web.UI.WebControls.DataList.TrackViewState
  - System.Web.UI.WebControls.DataList.UpdateCommand
  - System.Web.UI.WebControls.DataList.UpdateCommandName
  langs:
  - csharp
  name: DataList
  nameWithType: DataList
  fullName: System.Web.UI.WebControls.DataList
  type: Class
  summary: "A data bound list control that displays items using templates."
  remarks: "In this topic:      -   [Introduction](#introduction)      -   [Templates](#templates)      -   [Customizing the Appearance of the DataList Control](#customizing_the_appearance_of_the_datalist_control)      -   [Display Direction and Layout](#display_direction_and_layout)      -   [Security](#security)      -   [Declarative Syntax](#declarative_syntax)      <a name=&quot;introduction&quot;></a>    ## Introduction    Use the DataList control to display a template-defined data bound list. The DataList control supports selecting and editing.      <a name=&quot;templates&quot;></a>    ## Templates    The contents of the DataList control can be manipulated by using templates. The following table lists the supported templates.      |Template Name|Description|   |-------------------|-----------------|   |<xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A>|If defined, provides the content and layout for alternating items in the DataList. If not defined, `ItemTemplate` is used.|   |<xref:System.Web.UI.WebControls.DataList.EditItemTemplate%2A>|If defined, provides the content and layout for the item currently being edited in the DataList. If not defined, `ItemTemplate` is used.|   |<xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A>|If defined, provides the content and layout for the footer section of the DataList. If not defined, a footer section will not be displayed.|   |<xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A>|If defined, provides the content and layout for the header section of the DataList. If not defined, a header section will not be displayed.|   |<xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A>|Required template that provides the content and layout for items in the DataList.|   |<xref:System.Web.UI.WebControls.DataList.SelectedItemTemplate%2A>|If defined, provides the content and layout for the currently selected item in the DataList. If not defined, <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> is used.|   |<xref:System.Web.UI.WebControls.DataList.SeparatorTemplate%2A>|If defined, provides the content and layout for the separator between items in the DataList. If not defined, a separator will not be displayed.|       At the very minimum, the <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> needs to be defined to display the items in the DataList control. Additional templates can be used to provide a custom look to the DataList control.      <a name=&quot;customizing_the_appearance_of_the_datalist_control&quot;></a>    ## Customizing the Appearance of the DataList Control    The appearance of the DataList control may be customized by setting the style properties for the different parts of the control. The following table lists the different style properties.      |Style Property|Description|   |--------------------|-----------------|   |<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|Specifies the style for alternating items in the DataList control.|   |<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|Specifies the style for the item being edited in the DataList control.|   |<xref:System.Web.UI.WebControls.DataList.FooterStyle%2A>|Specifies the style for the footer in the DataList control.|   |<xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A>|Specifies the style for the header in the DataList control.|   |<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|Specifies the style for the items in the DataList control.|   |<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|Specifies the style for the selected item in the DataList control.|   |<xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A>|Specifies the style for the separator between the items in the DataList control.|       You can also show or hide different parts of the control. The following table lists the properties that control which parts are shown or hidden.      |Property|Description|   |--------------|-----------------|   |<xref:System.Web.UI.WebControls.DataList.ShowFooter%2A>|Shows or hides the footer section of the DataList control.|   |<xref:System.Web.UI.WebControls.DataList.ShowHeader%2A>|Shows or hides the header section of the DataList control.|      <a name=&quot;display_direction_and_layout&quot;></a>    ## Display Direction and Layout    The display direction of a DataList control can be vertical or horizontal. Set the <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> property to specify the display direction.       The layout of the DataList control is controlled with the <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> property. Setting this property to `RepeatLayout.Table` will display the DataList in a table format, while `RepeatLayout.Flow` displays the DataList without a table structure.      <a name=&quot;security&quot;></a>    ## Security    The `DataList` control can contain controls that enable users to enter information.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input.       For more information about security, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:DataList       AccessKey=&quot;string&quot;       BackColor=&quot;color name|#dddddd&quot;       BorderColor=&quot;color name|#dddddd&quot;       BorderStyle=&quot;NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|           Inset|Outset&quot;       BorderWidth=&quot;size&quot;       Caption=&quot;string&quot;       CaptionAlign=&quot;NotSet|Top|Bottom|Left|Right&quot;       CellPadding=&quot;integer&quot;       CellSpacing=&quot;integer&quot;       CssClass=&quot;string&quot;       DataKeyField=&quot;string&quot;       DataMember=&quot;string&quot;       DataSource=&quot;string&quot;       DataSourceID=&quot;string&quot;       EditItemIndex=&quot;integer&quot;       Enabled=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       ExtractTemplateRows=&quot;True|False&quot;       Font-Bold=&quot;True|False&quot;       Font-Italic=&quot;True|False&quot;       Font-Names=&quot;string&quot;       Font-Overline=&quot;True|False&quot;       Font-Size=&quot;string|Smaller|Larger|XX-Small|X-Small|Small|Medium|           Large|X-Large|XX-Large&quot;       Font-Strikeout=&quot;True|False&quot;       Font-Underline=&quot;True|False&quot;       ForeColor=&quot;color name|#dddddd&quot;       GridLines=&quot;None|Horizontal|Vertical|Both&quot;       Height=&quot;size&quot;       HorizontalAlign=&quot;NotSet|Left|Center|Right|Justify&quot;       ID=&quot;string&quot;       OnCancelCommand=&quot;CancelCommand event handler&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDeleteCommand=&quot;DeleteCommand event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnEditCommand=&quot;EditCommand event handler&quot;       OnInit=&quot;Init event handler&quot;       OnItemCommand=&quot;ItemCommand event handler&quot;       OnItemCreated=&quot;ItemCreated event handler&quot;       OnItemDataBound=&quot;ItemDataBound event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnSelectedIndexChanged=&quot;SelectedIndexChanged event handler&quot;       OnUnload=&quot;Unload event handler&quot;       OnUpdateCommand=&quot;UpdateCommand event handler&quot;       RepeatColumns=&quot;integer&quot;       RepeatDirection=&quot;Horizontal|Vertical&quot;       RepeatLayout=&quot;Table|Flow&quot;       runat=&quot;server&quot;       SelectedIndex=&quot;integer&quot;       ShowFooter=&quot;True|False&quot;       ShowHeader=&quot;True|False&quot;       SkinID=&quot;string&quot;       Style=&quot;string&quot;       TabIndex=&quot;integer&quot;       ToolTip=&quot;string&quot;       UseAccessibleHeader=&quot;True|False&quot;       Visible=&quot;True|False&quot;       Width=&quot;size&quot;   >           <AlternatingItemStyle />           <AlternatingItemTemplate>               <!-- child controls -->           </AlternatingItemTemplate>           <EditItemStyle />           <EditItemTemplate>               <!-- child controls -->           </EditItemTemplate>           <FooterStyle />           <FooterTemplate>               <!-- child controls -->           </FooterTemplate>           <HeaderStyle />           <HeaderTemplate>               <!-- child controls -->           </HeaderTemplate>           <ItemStyle />           <ItemTemplate>               <!-- child controls -->           </ItemTemplate>           <SelectedItemStyle />           <SelectedItemTemplate>               <!-- child controls -->           </SelectedItemTemplate>           <SeparatorStyle />           <SeparatorTemplate>               <!-- child controls -->           </SeparatorTemplate>   </asp:DataList>   ```"
  example:
  - "The following code example demonstrates how to use a DataList control to display a list of items from a data source.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataList#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_141_1.aspx)]\n [!code-vb[DataList#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_141_1.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.DataListDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataListComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.ComponentEditor))]

      [System.Web.UI.ControlValueProperty("SelectedValue")]

      public class DataList : System.Web.UI.WebControls.BaseDataList, System.Web.UI.INamingContainer, System.Web.UI.WebControls.IRepeatInfoUser
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.WebControls.WebControl
  - System.Web.UI.WebControls.BaseDataList
  implements:
  - System.Web.UI.INamingContainer
  - System.Web.UI.WebControls.IRepeatInfoUser
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateControlCollection
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.Focus
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.Control.Visible
  - System.Web.UI.WebControls.BaseDataList.AddParsedSubObject(System.Object)
  - System.Web.UI.WebControls.BaseDataList.Caption
  - System.Web.UI.WebControls.BaseDataList.CaptionAlign
  - System.Web.UI.WebControls.BaseDataList.CellPadding
  - System.Web.UI.WebControls.BaseDataList.CellSpacing
  - System.Web.UI.WebControls.BaseDataList.Controls
  - System.Web.UI.WebControls.BaseDataList.CreateChildControls
  - System.Web.UI.WebControls.BaseDataList.CreateDataSourceSelectArguments
  - System.Web.UI.WebControls.BaseDataList.DataBind
  - System.Web.UI.WebControls.BaseDataList.DataKeyField
  - System.Web.UI.WebControls.BaseDataList.DataKeys
  - System.Web.UI.WebControls.BaseDataList.DataKeysArray
  - System.Web.UI.WebControls.BaseDataList.DataMember
  - System.Web.UI.WebControls.BaseDataList.DataSource
  - System.Web.UI.WebControls.BaseDataList.DataSourceID
  - System.Web.UI.WebControls.BaseDataList.EnsureDataBound
  - System.Web.UI.WebControls.BaseDataList.GetData
  - System.Web.UI.WebControls.BaseDataList.HorizontalAlign
  - System.Web.UI.WebControls.BaseDataList.Initialized
  - System.Web.UI.WebControls.BaseDataList.IsBindableType(System.Type)
  - System.Web.UI.WebControls.BaseDataList.IsBoundUsingDataSourceID
  - System.Web.UI.WebControls.BaseDataList.OnDataBinding(System.EventArgs)
  - System.Web.UI.WebControls.BaseDataList.OnDataPropertyChanged
  - System.Web.UI.WebControls.BaseDataList.OnDataSourceViewChanged(System.Object,System.EventArgs)
  - System.Web.UI.WebControls.BaseDataList.OnLoad(System.EventArgs)
  - System.Web.UI.WebControls.BaseDataList.OnPreRender(System.EventArgs)
  - System.Web.UI.WebControls.BaseDataList.OnSelectedIndexChanged(System.EventArgs)
  - System.Web.UI.WebControls.BaseDataList.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.BaseDataList.RequiresDataBinding
  - System.Web.UI.WebControls.BaseDataList.SelectArguments
  - System.Web.UI.WebControls.BaseDataList.SelectedIndexChanged
  - System.Web.UI.WebControls.BaseDataList.SupportsDisabledAttribute
  - System.Web.UI.WebControls.BaseDataList.UseAccessibleHeader
  - System.Web.UI.WebControls.WebControl.AccessKey
  - System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.Attributes
  - System.Web.UI.WebControls.WebControl.BackColor
  - System.Web.UI.WebControls.WebControl.BorderColor
  - System.Web.UI.WebControls.WebControl.BorderStyle
  - System.Web.UI.WebControls.WebControl.BorderWidth
  - System.Web.UI.WebControls.WebControl.ControlStyle
  - System.Web.UI.WebControls.WebControl.ControlStyleCreated
  - System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)
  - System.Web.UI.WebControls.WebControl.CssClass
  - System.Web.UI.WebControls.WebControl.DisabledCssClass
  - System.Web.UI.WebControls.WebControl.Enabled
  - System.Web.UI.WebControls.WebControl.EnableTheming
  - System.Web.UI.WebControls.WebControl.Font
  - System.Web.UI.WebControls.WebControl.ForeColor
  - System.Web.UI.WebControls.WebControl.HasAttributes
  - System.Web.UI.WebControls.WebControl.Height
  - System.Web.UI.WebControls.WebControl.IsEnabled
  - System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.SkinID
  - System.Web.UI.WebControls.WebControl.Style
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)
  - System.Web.UI.WebControls.WebControl.TabIndex
  - System.Web.UI.WebControls.WebControl.TagName
  - System.Web.UI.WebControls.WebControl.ToolTip
  - System.Web.UI.WebControls.WebControl.Width
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: DataList()
  nameWithType: DataList.DataList()
  fullName: System.Web.UI.WebControls.DataList.DataList()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> class."
  remarks: "Use this constructor to create and initialize a new instance of the <xref:System.Web.UI.WebControls.DataList> class."
  example:
  - "The following code example demonstrates how to create and initialize a new instance of the <xref:System.Web.UI.WebControls.DataList> class.  \n  \n [!code-cs[Classic DataList.DataList Example#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_27_1.cs)]\n [!code-vb[Classic DataList.DataList Example#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_27_1.vb)]"
  syntax:
    content: public DataList ();
    parameters: []
  overload: System.Web.UI.WebControls.DataList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.AlternatingItemStyle
  id: AlternatingItemStyle
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: AlternatingItemStyle
  nameWithType: DataList.AlternatingItemStyle
  fullName: System.Web.UI.WebControls.DataList.AlternatingItemStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the style properties for alternating items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the AlternatingItemStyle property to provide a custom style for the alternating items in the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.       Item style properties in the <xref:System.Web.UI.WebControls.DataList> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property, all other item style properties in the <xref:System.Web.UI.WebControls.DataList> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the AlternatingItemStyle property, overriding the red font specified in the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property. The following table lists the hierarchy order from highest to lowest.      |Precedence|Style property|   |----------------|--------------------|   |1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|   |2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|   |3|AlternatingItemStyle|   |4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|   |5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|       To specify a custom style for the alternating items, place the `<AlternatingItemStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<AlternatingItemStyle>` tag."
  example:
  - "The following code example demonstrates how to use the AlternatingItemStyle property to specify a different background color for alternating items in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListItemStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_512_1.aspx)]\n [!code-cs[DataListItemStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_512_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.TableItemStyle AlternatingItemStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that represents the style properties for alternating items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is an empty <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object."
  overload: System.Web.UI.WebControls.DataList.AlternatingItemStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.AlternatingItemTemplate
  id: AlternatingItemTemplate
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: AlternatingItemTemplate
  nameWithType: DataList.AlternatingItemTemplate
  fullName: System.Web.UI.WebControls.DataList.AlternatingItemTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the template for alternating items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref>."
  remarks: "Use the AlternatingItemTemplate property to control the contents of alternating items in the <xref:System.Web.UI.WebControls.DataList> control. The appearance of alternating items is controlled by the <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> property.       To specify a template for the alternating items, place the `<AlternatingItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<AlternatingItemTemplate>` tags.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the AlternatingItemTemplate property to control the contents of alternating items in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListAlternatingItemTemplate#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1361_1.aspx)]\n [!code-cs[DataListAlternatingItemTemplate#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1361_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate AlternatingItemTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> object that contains the template for alternating items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.AlternatingItemTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.CancelCommand
  id: CancelCommand
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: CancelCommand
  nameWithType: DataList.CancelCommand
  fullName: System.Web.UI.WebControls.DataList.CancelCommand
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when the <xref uid=&quot;langword_csharp_Cancel&quot; name=&quot;Cancel&quot; href=&quot;&quot;></xref> button is clicked for an item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "The CancelCommand event is raised when the `Cancel` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.       A typical handler for the CancelCommand event sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to `-1` (to deselect the item) and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.      > [!CAUTION] >  Text is not HTML encoded before it is displayed in the <xref:System.Web.UI.WebControls.DataList> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.       For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to specify and code a handler for the CancelCommand event. It cancels any edits made to an item in the <xref:System.Web.UI.WebControls.DataList> control when the `Cancel` button is clicked.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_29_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_29_1.aspx)]  \n  \n [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_29_2.aspx)]\n [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_29_2.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.DataListCommandEventHandler CancelCommand;
    return:
      type: System.Web.UI.WebControls.DataListCommandEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.CancelCommandName
  id: CancelCommandName
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: CancelCommandName
  nameWithType: DataList.CancelCommandName
  fullName: System.Web.UI.WebControls.DataList.CancelCommandName
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Represents the <xref uid=&quot;langword_csharp_Cancel&quot; name=&quot;Cancel&quot; href=&quot;&quot;></xref> command name. This field is read-only."
  remarks: "Use the CancelCommandName field to represent the `Cancel` command name."
  syntax:
    content: public const string CancelCommandName;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.CreateControlHierarchy(System.Boolean)
  id: CreateControlHierarchy(System.Boolean)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: CreateControlHierarchy(Boolean)
  nameWithType: DataList.CreateControlHierarchy(Boolean)
  fullName: System.Web.UI.WebControls.DataList.CreateControlHierarchy(Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Creates the control hierarchy that is used to render the data list control, with or without the specified data source."
  remarks: "The CreateControlHierarchy method is used primarily by control developers when deriving a custom implementation from the <xref:System.Web.UI.WebControls.DataList> control.       The CreateControlHierarchy method uses the <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> and <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> methods to create <xref:System.Web.UI.WebControls.DataListItem> controls that represent the header, footer, separator, and data-bound items contained in the data list. You can access the data-bound items for the data list through the <xref:System.Web.UI.WebControls.DataList.Items%2A> collection. You can access all item types, including the header, footer, and separator items, through the <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> collection.       Override the CreateControlHierarchy method to customize how <xref:System.Web.UI.WebControls.DataListItem> controls are created or added to the <xref:System.Web.UI.WebControls.DataList> control. Override the <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> method to customize templates for a <xref:System.Web.UI.WebControls.DataListItem> control."
  syntax:
    content: protected override void CreateControlHierarchy (bool useDataSource);
    parameters:
    - id: useDataSource
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to use the control&quot;s data source; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to indicate that the control is being recreated from view state and should not be data-bound."
  overload: System.Web.UI.WebControls.DataList.CreateControlHierarchy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.CreateControlStyle
  id: CreateControlStyle
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: CreateControlStyle()
  nameWithType: DataList.CreateControlStyle()
  fullName: System.Web.UI.WebControls.DataList.CreateControlStyle()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Creates the default style object that is used internally by the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control to implement all style related properties."
  remarks: "The CreateControlStyle method is used primarily by control developers in deriving a custom implementation from the <xref:System.Web.UI.WebControls.DataList> control."
  example:
  - "The following code example demonstrates how to override the CreateControlStyle method in a custom server control so that it always displays horizontal grid lines with no cell spacing in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n [!code-vb[CustomDataListCreateControlStyle#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_243_1.aspx)]\n [!code-cs[CustomDataListCreateControlStyle#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_243_1.aspx)]  \n[!code-vb[CustomDataListCreateControlStyle#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_243_2.vb)]\n[!code-cs[CustomDataListCreateControlStyle#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_243_2.cs)]"
  syntax:
    content: protected override System.Web.UI.WebControls.Style CreateControlStyle ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.Style
      description: "A <xref href=&quot;System.Web.UI.WebControls.TableStyle&quot;></xref> that contains the default style properties for the control."
  overload: System.Web.UI.WebControls.DataList.CreateControlStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.CreateItem(System.Int32,System.Web.UI.WebControls.ListItemType)
  id: CreateItem(System.Int32,System.Web.UI.WebControls.ListItemType)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: CreateItem(Int32,ListItemType)
  nameWithType: DataList.CreateItem(Int32,ListItemType)
  fullName: System.Web.UI.WebControls.DataList.CreateItem(Int32,ListItemType)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Creates a <xref href=&quot;System.Web.UI.WebControls.DataListItem&quot;></xref> object."
  remarks: "The CreateItem method is used primarily by control developers in creating a custom implementation of the <xref:System.Web.UI.WebControls.DataList> control. The CreateItem method is functionally equivalent to calling the <xref:System.Web.UI.WebControls.DataListItem.%23ctor%2A> constructor for a <xref:System.Web.UI.WebControls.DataListItem>. The <xref:System.Web.UI.WebControls.DataListItem.ItemIndex%2A> and <xref:System.Web.UI.WebControls.DataListItem.ItemType%2A> properties are initialized for the new <xref:System.Web.UI.WebControls.DataListItem> using the specified values, but the item is not inserted into the <xref:System.Web.UI.WebControls.DataList>.       The <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> method uses the CreateItem and <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> methods to create <xref:System.Web.UI.WebControls.DataListItem> controls that represent the header, footer, separator, and data-bound items contained in the data list. You can access the data-bound items for the data list through the <xref:System.Web.UI.WebControls.DataList.Items%2A> collection. You can access all item types, including the header, footer, and separator items, through the <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> collection."
  syntax:
    content: protected virtual System.Web.UI.WebControls.DataListItem CreateItem (int itemIndex, System.Web.UI.WebControls.ListItemType itemType);
    parameters:
    - id: itemIndex
      type: System.Int32
      description: "The specified location within the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> to place the created item."
    - id: itemType
      type: System.Web.UI.WebControls.ListItemType
      description: "A <xref href=&quot;System.Web.UI.WebControls.ListItemType&quot;></xref> that represents the specified type of the item to create."
    return:
      type: System.Web.UI.WebControls.DataListItem
      description: "A new <xref href=&quot;System.Web.UI.WebControls.DataListItem&quot;></xref> created with the specified list-item type."
  overload: System.Web.UI.WebControls.DataList.CreateItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.DeleteCommand
  id: DeleteCommand
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: DataList.DeleteCommand
  fullName: System.Web.UI.WebControls.DataList.DeleteCommand
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when the <xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;></xref> button is clicked for an item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "The DeleteCommand event is raised when the `Delete` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.       A typical handler for the DeleteCommand event removes the selected item from the data source and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.       For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to specify and code a handler for the DeleteCommand event. It deletes the selected item in the <xref:System.Web.UI.WebControls.DataList> control when the `Delete` button is clicked.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_109_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_109_1.aspx)]  \n  \n [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_109_2.aspx)]\n [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_109_2.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.DataListCommandEventHandler DeleteCommand;
    return:
      type: System.Web.UI.WebControls.DataListCommandEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.DeleteCommandName
  id: DeleteCommandName
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: DeleteCommandName
  nameWithType: DataList.DeleteCommandName
  fullName: System.Web.UI.WebControls.DataList.DeleteCommandName
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Represents the <xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;></xref> command name. This field is read-only."
  remarks: "Use the DeleteCommandName field to represent the `Delete` command name."
  syntax:
    content: public const string DeleteCommandName;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.EditCommand
  id: EditCommand
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: EditCommand
  nameWithType: DataList.EditCommand
  fullName: System.Web.UI.WebControls.DataList.EditCommand
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when the <xref uid=&quot;langword_csharp_Edit&quot; name=&quot;Edit&quot; href=&quot;&quot;></xref> button is clicked for an item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "The EditCommand event is raised when the `Edit` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.       A typical handler for the EditCommand event sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to the selected row and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.      > [!CAUTION] >  Text is not HTML encoded before it is displayed in the <xref:System.Web.UI.WebControls.DataList> control. This makes it possible to embed script within HTML tags in the text. If the values for the control come from user input, be sure to validate the values to reduce security vulnerabilities.       For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to specify and code a handler for the EditCommand event. It allows you to edit the selected item in the <xref:System.Web.UI.WebControls.DataList> control when the `Edit` button is clicked.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_64_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_64_1.aspx)]  \n  \n [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_64_2.aspx)]\n [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_64_2.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.DataListCommandEventHandler EditCommand;
    return:
      type: System.Web.UI.WebControls.DataListCommandEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.EditCommandName
  id: EditCommandName
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: EditCommandName
  nameWithType: DataList.EditCommandName
  fullName: System.Web.UI.WebControls.DataList.EditCommandName
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Represents the <xref uid=&quot;langword_csharp_Edit&quot; name=&quot;Edit&quot; href=&quot;&quot;></xref> command name. This field is read-only."
  remarks: "Use the EditCommandName field to represent the `Edit` command name."
  syntax:
    content: public const string EditCommandName;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.EditItemIndex
  id: EditItemIndex
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: EditItemIndex
  nameWithType: DataList.EditItemIndex
  fullName: System.Web.UI.WebControls.DataList.EditItemIndex
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the index number of the selected item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control to edit."
  remarks: "Use the EditItemIndex property to programmatically specify the item to edit. You can also use this property to determine the index of the item selected for editing.      > [!NOTE] >  The EditItemIndex property is zero based.       To unselect an item, set the EditItemIndex property to `-1`.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).       The EditItemIndex property is stored in control state."
  example:
  - "The following code example demonstrates how to use the EditItemIndex property to specify the item selected by the user for editing.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_620_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_620_1.aspx)]"
  syntax:
    content: public virtual int EditItemIndex { get; set; }
    return:
      type: System.Int32
      description: "The index number of the selected item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control to edit."
  overload: System.Web.UI.WebControls.DataList.EditItemIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The selected value is less than <xref uid=&quot;langword_csharp_0&quot; name=&quot;0&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.EditItemStyle
  id: EditItemStyle
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: EditItemStyle
  nameWithType: DataList.EditItemStyle
  fullName: System.Web.UI.WebControls.DataList.EditItemStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the style properties for the item selected for editing in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the EditItemStyle property to provide a custom style for the item selected for editing in the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.       Item style properties in the <xref:System.Web.UI.WebControls.DataList> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property, all other item style properties in the <xref:System.Web.UI.WebControls.DataList> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> property, overriding the red font specified in the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property. The following table lists the hierarchy order from highest to lowest.      |Precedence|Style Property|   |----------------|--------------------|   |1|EditItemStyle|   |2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|   |3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|   |4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|   |5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|       To specify a custom style for the item selected for editing, place the `<EditItemStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<EditItemStyle>` tag."
  example:
  - "The following code example demonstrates how to use the EditItemStyle property to specify a different appearance for the item selected by the user for editing.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_214_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_214_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.TableItemStyle EditItemStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that contains the style properties for the item selected for editing in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is an empty <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object."
  overload: System.Web.UI.WebControls.DataList.EditItemStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.EditItemTemplate
  id: EditItemTemplate
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: EditItemTemplate
  nameWithType: DataList.EditItemTemplate
  fullName: System.Web.UI.WebControls.DataList.EditItemTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the template for the item selected for editing in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the EditItemTemplate property to control the contents of the item selected for editing in the <xref:System.Web.UI.WebControls.DataList> control. The appearance of the item selected for editing is controlled by the <xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A> property.       To specify a template for the item selected for editing, place the `<EditItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<EditItemTemplate>` tags.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the EditItemTemplate property to control the contents of the item selected by the user for editing.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_316_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_316_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate EditItemTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> object that contains the template for the item selected for editing in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.EditItemTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.ExtractTemplateRows
  id: ExtractTemplateRows
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: ExtractTemplateRows
  nameWithType: DataList.ExtractTemplateRows
  fullName: System.Web.UI.WebControls.DataList.ExtractTemplateRows
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value that indicates whether the rows of a <xref href=&quot;System.Web.UI.WebControls.Table&quot;></xref> control, defined in each template of a <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control, are extracted and displayed."
  remarks: "The contents of the <xref:System.Web.UI.WebControls.DataList> control are specified by using templates. Normally, you list controls that you want to display in the templates. You can also place a <xref:System.Web.UI.WebControls.Table> control in a template and display the rows of the table.       Use the ExtractTemplateRows property to specify whether the rows of a <xref:System.Web.UI.WebControls.Table> control defined in each template of a <xref:System.Web.UI.WebControls.DataList> control are extracted and displayed. All rows extracted from the templates of the <xref:System.Web.UI.WebControls.DataList> control are displayed in a single table. This allows you to create a single table from other smaller tables and still maintain the features of the <xref:System.Web.UI.WebControls.DataList> control.      > [!NOTE] >  When this property is set to `true`, you must provide a well-formed <xref:System.Web.UI.WebControls.Table> control for each template you want to include in the <xref:System.Web.UI.WebControls.DataList> control. Only the rows of the tables will be displayed. All other content in the template will be ignored. You must use a <xref:System.Web.UI.WebControls.Table> control for this feature to work properly. The <xref:System.Web.UI.HtmlControls.HtmlTable?displayProperty=fullName> control is not compatible with this property.       When you create a cell for a <xref:System.Web.UI.WebControls.Table> control in a template, you can use the <xref:System.Web.UI.WebControls.TableCell.ColumnSpan%2A> property of the <xref:System.Web.UI.WebControls.TableCell> object to control the number of columns the cell spans. You can also use the <xref:System.Web.UI.WebControls.TableCell.RowSpan%2A> property to control the number of rows the cell spans.      > [!NOTE] >  The <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A>, <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A>, and <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> properties do not affect the appearance of the <xref:System.Web.UI.WebControls.DataList> control when this property is set to `true`."
  example:
  - "The following code example demonstrate how to use the ExtractTemplateRows property to extract and display the rows of <xref:System.Web.UI.WebControls.Table> controls defined in the templates of the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[Classic DataList.ExtractTemplateRows Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1162_1.aspx)]\n [!code-cs[Classic DataList.ExtractTemplateRows Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1162_1.aspx)]"
  syntax:
    content: public virtual bool ExtractTemplateRows { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the rows of a <xref href=&quot;System.Web.UI.WebControls.Table&quot;></xref> control, defined in each template of a <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control, are extracted and displayed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.ExtractTemplateRows*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.FooterStyle
  id: FooterStyle
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: FooterStyle
  nameWithType: DataList.FooterStyle
  fullName: System.Web.UI.WebControls.DataList.FooterStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the style properties for the footer section of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use this property to provide a custom style for the footer section of the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.       The FooterStyle property of the <xref:System.Web.UI.WebControls.DataList> control inherits the style settings of the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property. For example, if you specify a red font for the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property, the FooterStyle property will also have a red font. This allows you to provide a common appearance for the control by setting a single style property. You can override the inherited style settings by setting the FooterStyle property. For example, you can specify a blue font for the FooterStyle property, overriding the red font specified in the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property.       To specify a custom style for the footer section, place the `<FooterStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<FooterStyle>` tag.      > [!NOTE] >  The <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> property must be set to `true` for this property to be visible."
  example:
  - "The following code example demonstrates how to use the FooterStyle property to specify a custom background color for the footer section of the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListHeaderStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_335_1.aspx)]\n [!code-vb[DataListHeaderStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_335_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that contains the style properties for the footer section of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is an empty <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object."
  overload: System.Web.UI.WebControls.DataList.FooterStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.FooterTemplate
  id: FooterTemplate
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: FooterTemplate
  nameWithType: DataList.FooterTemplate
  fullName: System.Web.UI.WebControls.DataList.FooterTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the template for the footer section of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the FooterTemplate property to control the contents of the footer section. The appearance of the footer section is controlled by the <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> property.      > [!NOTE] >  The <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> property must be set to `true` for this property to be visible.       The <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property of the <xref:System.Web.UI.WebControls.DataList> control inherits the style settings of the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property. For example, if you specify a red font for the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property, the <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property will also have a red font. This allows you to provide a common appearance for the control by setting a single style property. You can override the inherited style settings by setting the <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property. For example, you can specify a blue font for the <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property, overriding the red font specified in the <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> property.       To specify a template for the footer section, place the `<FooterTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<FooterTemplate>` tags.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the FooterTemplate property to control the contents of the footer section of the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListHeaderStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1036_1.aspx)]\n [!code-vb[DataListHeaderStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1036_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate FooterTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> object that contains the template for the footer section of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.FooterTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.GridLines
  id: GridLines
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: GridLines
  nameWithType: DataList.GridLines
  fullName: System.Web.UI.WebControls.DataList.GridLines
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the grid line style for the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control when the <xref:System.Web.UI.WebControls.DataList.RepeatLayout*> property is set to <xref uid=&quot;langword_csharp_RepeatLayout.Table&quot; name=&quot;RepeatLayout.Table&quot; href=&quot;&quot;></xref>."
  remarks: "Use the GridLines property to specify the grid line style for the <xref:System.Web.UI.WebControls.DataList> control. The following table lists the possible styles.      |Style|Description|   |-----------|-----------------|   |<xref:System.Web.UI.WebControls.GridLines>|No grid lines.|   |<xref:System.Web.UI.WebControls.GridLines>|Displays the horizontal grid lines.|   |<xref:System.Web.UI.WebControls.GridLines>|Displays the vertical grid line.|   |<xref:System.Web.UI.WebControls.GridLines>|Displays both the horizontal and vertical grid lines.|      > [!NOTE] >  This property only applies if the <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> property is set to `RepeatLayout.Table`."
  example:
  - "The following code example demonstrates how to use the GridLines property to display the vertical and horizontal grid lines of the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1324_1.aspx)]\n [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1324_1.aspx)]"
  syntax:
    content: public override System.Web.UI.WebControls.GridLines GridLines { get; set; }
    return:
      type: System.Web.UI.WebControls.GridLines
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.GridLines&quot;></xref> enumeration values. The default value is <xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.GridLines*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.HeaderStyle
  id: HeaderStyle
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: HeaderStyle
  nameWithType: DataList.HeaderStyle
  fullName: System.Web.UI.WebControls.DataList.HeaderStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the style properties for the heading section of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use this property to provide a custom style for the heading of the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.       To specify a custom style for the heading section, place the `<HeaderStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<HeaderStyle>` tag.      > [!NOTE] >  The <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> property must be set to `true` for this property to be visible."
  example:
  - "The following code example demonstrates how to use the HeaderStyle property to specify a custom background color for the heading section of the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListHeaderStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1175_1.aspx)]\n [!code-vb[DataListHeaderStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1175_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that contains the style properties for the heading section of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is an empty <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object."
  overload: System.Web.UI.WebControls.DataList.HeaderStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.HeaderTemplate
  id: HeaderTemplate
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: HeaderTemplate
  nameWithType: DataList.HeaderTemplate
  fullName: System.Web.UI.WebControls.DataList.HeaderTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the template for the heading section of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the HeaderTemplate property to control the contents of the heading section. The appearance of the header section is controlled by the <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property.      > [!NOTE] >  The <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> property must be set to `true` for this property to be visible.       To specify a template for the heading section, place the `<HeaderTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<HeaderTemplate>` tags.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the HeaderTemplate property to control the contents of the heading section of the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_905_1.aspx)]\n [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_905_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate HeaderTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the template for the heading section of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.HeaderTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.InitializeItem(System.Web.UI.WebControls.DataListItem)
  id: InitializeItem(System.Web.UI.WebControls.DataListItem)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: InitializeItem(DataListItem)
  nameWithType: DataList.InitializeItem(DataListItem)
  fullName: System.Web.UI.WebControls.DataList.InitializeItem(DataListItem)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a <xref href=&quot;System.Web.UI.WebControls.DataListItem&quot;></xref> object based on the specified templates and styles for the list-item type."
  remarks: "The InitializeItem method is used primarily by control developers to extend the <xref:System.Web.UI.WebControls.DataList> control.       The <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> method uses the <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> and InitializeItem methods to create <xref:System.Web.UI.WebControls.DataListItem> controls that represent the header, footer, separator, and data-bound items contained in the data list. You can access the data-bound items for the data list through the <xref:System.Web.UI.WebControls.DataList.Items%2A> collection. You can access all item types, including the header, footer, and separator items, through the <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> collection.       Override the <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> method to customize how <xref:System.Web.UI.WebControls.DataListItem> controls are created or added to the <xref:System.Web.UI.WebControls.DataList> control. Override the InitializeItem method to customize templates for a <xref:System.Web.UI.WebControls.DataListItem> control."
  syntax:
    content: protected virtual void InitializeItem (System.Web.UI.WebControls.DataListItem item);
    parameters:
    - id: item
      type: System.Web.UI.WebControls.DataListItem
      description: "The <xref href=&quot;System.Web.UI.WebControls.DataListItem&quot;></xref> to initialize."
  overload: System.Web.UI.WebControls.DataList.InitializeItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.ItemCommand
  id: ItemCommand
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: ItemCommand
  nameWithType: DataList.ItemCommand
  fullName: System.Web.UI.WebControls.DataList.ItemCommand
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when any button is clicked in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "The ItemCommand event is raised when any button is clicked in the <xref:System.Web.UI.WebControls.DataList> control and is commonly used when you have a button control with a custom `CommandName` value.       For more information about handling events, see[How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to specify and code a handler for the ItemCommand event to select an item from the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListItemCommand#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_0_1.aspx)]\n [!code-cs[DataListItemCommand#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_0_1.aspx)]  \n  \n [!code-vb[DataListItemCommand2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_0_2.aspx)]\n [!code-cs[DataListItemCommand2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_0_2.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.DataListCommandEventHandler ItemCommand;
    return:
      type: System.Web.UI.WebControls.DataListCommandEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.ItemCreated
  id: ItemCreated
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: ItemCreated
  nameWithType: DataList.ItemCreated
  fullName: System.Web.UI.WebControls.DataList.ItemCreated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs on the server when an item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control is created."
  remarks: "The ItemCreated event is raised when an item in the <xref:System.Web.UI.WebControls.DataList> control is created, both during round-trips and at the time data is bound to the control.       The ItemCreated event is commonly used to control the content and appearance of a row in the <xref:System.Web.UI.WebControls.DataList> control.       For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to specify and code a handler for the ItemCreated event to display the order in which items in the <xref:System.Web.UI.WebControls.DataList> control are created.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListItemCreated#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_106_1.aspx)]\n [!code-cs[DataListItemCreated#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_106_1.aspx)]  \n  \n [!code-cs[DataListItemCreated2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_106_2.aspx)]\n [!code-vb[DataListItemCreated2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_106_2.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.DataListItemEventHandler ItemCreated;
    return:
      type: System.Web.UI.WebControls.DataListItemEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.ItemDataBound
  id: ItemDataBound
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: ItemDataBound
  nameWithType: DataList.ItemDataBound
  fullName: System.Web.UI.WebControls.DataList.ItemDataBound
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when an item is data bound to the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "The ItemDataBound event is raised after an item is data bound to the <xref:System.Web.UI.WebControls.DataList> control. This event provides you with the last opportunity to access the data item before it is displayed on the client. After this event is raised, the data item is no longer available.       For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to specify and code a handler for the ItemDataBound event to display the order in which items in the <xref:System.Web.UI.WebControls.DataList> control are bound to the control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListItemDataBound#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_143_1.aspx)]\n [!code-vb[DataListItemDataBound#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_143_1.aspx)]  \n  \n [!code-vb[DataListItemDataBound2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_143_2.aspx)]\n [!code-cs[DataListItemDataBound2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_143_2.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.DataListItemEventHandler ItemDataBound;
    return:
      type: System.Web.UI.WebControls.DataListItemEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.Items
  id: Items
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: Items
  nameWithType: DataList.Items
  fullName: System.Web.UI.WebControls.DataList.Items
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a collection of <xref href=&quot;System.Web.UI.WebControls.DataListItem&quot;></xref> objects representing the individual items within the control."
  remarks: "Use the Items collection to programmatically control the items in the <xref:System.Web.UI.WebControls.DataList> control. The Items collection does not provide any methods to add or remove items to the collection. However, you can control the contents of an item by providing a handler for the <xref:System.Web.UI.WebControls.DataList.ItemCreated> event.      > [!NOTE] >  Only items bound to the data source are contained in the Items collection. The header, footer, and separator are not included in the collection."
  example:
  - "The following code example demonstrates how to use the Items collection to display the items in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[Classic DataList.Items Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_231_1.aspx)]\n [!code-cs[Classic DataList.Items Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_231_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.DataListItemCollection Items { get; }
    return:
      type: System.Web.UI.WebControls.DataListItemCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.DataListItemCollection&quot;></xref> that contains a collection of <xref href=&quot;System.Web.UI.WebControls.DataListItem&quot;></xref> objects representing the individual items within the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  overload: System.Web.UI.WebControls.DataList.Items*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.ItemStyle
  id: ItemStyle
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: ItemStyle
  nameWithType: DataList.ItemStyle
  fullName: System.Web.UI.WebControls.DataList.ItemStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the style properties for the items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use this property to provide a custom style for the items of the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.       Item style properties in the <xref:System.Web.UI.WebControls.DataList> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the ItemStyle property, all other item style properties in the <xref:System.Web.UI.WebControls.DataList> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> property, overriding the red font specified in the ItemStyle property. The following table lists the hierarchy order from highest to lowest.      |Precedence|Style Property|   |----------------|--------------------|   |1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|   |2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|   |3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|   |4|ItemStyle|   |5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|       To specify a custom style for the items of the <xref:System.Web.UI.WebControls.DataList> control, place the `<ItemStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<ItemStyle>` tag.       You can also use the <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> property to provide a different appearance for the alternating items in the <xref:System.Web.UI.WebControls.DataList> control."
  example:
  - "The following code example demonstrates how to use the ItemStyle property to specify a different background color for the items in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListItemStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_649_1.aspx)]\n [!code-cs[DataListItemStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_649_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.TableItemStyle ItemStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that contains the style properties for the items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is an empty <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object."
  overload: System.Web.UI.WebControls.DataList.ItemStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.ItemTemplate
  id: ItemTemplate
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: ItemTemplate
  nameWithType: DataList.ItemTemplate
  fullName: System.Web.UI.WebControls.DataList.ItemTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the template for the items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the ItemTemplate property to control the contents of the items in the <xref:System.Web.UI.WebControls.DataList> control. The appearance of the items in the <xref:System.Web.UI.WebControls.DataList> control is controlled by the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property.       To specify a template for the items of the <xref:System.Web.UI.WebControls.DataList> control, place the `<ItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<ItemTemplate>` tags.       You can optionally use the <xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A> property to provide a different appearance for the alternating items in the <xref:System.Web.UI.WebControls.DataList> control.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the ItemTemplate property to control the contents of the items in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_848_1.aspx)]\n [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_848_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate ItemTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the template for the items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.ItemTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: DataList.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.DataList.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Loads the previously saved view state of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code.  However, control developers can override this method to specify how a custom server control restores its view state. For more information, see [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md).       The LoadViewState method restores view-state information for the <xref:System.Web.UI.WebControls.DataList> control from a previous page request that was saved by the <xref:System.Web.UI.WebControls.DataList.SaveViewState%2A> method."
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "An object that represents the state of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.OnBubbleEvent(System.Object,System.EventArgs)
  id: OnBubbleEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: OnBubbleEvent(Object,EventArgs)
  nameWithType: DataList.OnBubbleEvent(Object,EventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnBubbleEvent(Object,EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Determines whether the event for the server control is passed up the page&quot;s UI server control hierarchy."
  syntax:
    content: protected override bool OnBubbleEvent (object source, EventArgs e);
    parameters:
    - id: source
      type: System.Object
      description: "The source of the event."
    - id: e
      type: System.EventArgs
      description: "The event data."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the event has been canceled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.OnBubbleEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  id: OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: OnCancelCommand(DataListCommandEventArgs)
  nameWithType: DataList.OnCancelCommand(DataListCommandEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnCancelCommand(DataListCommandEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.DataList.CancelCommand&quot;></xref> event. This allows you to provide a custom handler for the event."
  remarks: "Use the OnCancelCommand method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.CancelCommand> event.       The <xref:System.Web.UI.WebControls.DataList.CancelCommand> event is raised when the `Cancel` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.       A typical handler for the <xref:System.Web.UI.WebControls.DataList.CancelCommand> event sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to `-1` (to deselect the item) and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).       Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).       The OnCancelCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.CancelCommand> event. It cancels any edits made to an item in the <xref:System.Web.UI.WebControls.DataList> control when the `Cancel` button is clicked.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/f712037e-c950-4136-8daf-_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/f712037e-c950-4136-8daf-_1.aspx)]  \n  \n [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/f712037e-c950-4136-8daf-_2.aspx)]\n [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/f712037e-c950-4136-8daf-_2.aspx)]"
  syntax:
    content: protected virtual void OnCancelCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.DataListCommandEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.DataListCommandEventArgs&quot;></xref> that contains event data."
  overload: System.Web.UI.WebControls.DataList.OnCancelCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  id: OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: OnDeleteCommand(DataListCommandEventArgs)
  nameWithType: DataList.OnDeleteCommand(DataListCommandEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnDeleteCommand(DataListCommandEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.DataList.DeleteCommand&quot;></xref> event. This allows you to provide a custom handler for the event."
  remarks: "Use the OnDeleteCommand method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.DeleteCommand> event.       The <xref:System.Web.UI.WebControls.DataList.DeleteCommand> event is raised when the `Delete` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.       A typical handler for the <xref:System.Web.UI.WebControls.DataList.DeleteCommand> event removes the selected item from the data source and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.       Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).       The OnDeleteCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.DeleteCommand> event. It deletes the selected item in the <xref:System.Web.UI.WebControls.DataList> control when the `Delete` button is clicked.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/b69fcef1-7d66-4606-9238-_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/b69fcef1-7d66-4606-9238-_1.aspx)]  \n  \n [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/b69fcef1-7d66-4606-9238-_2.aspx)]\n [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/b69fcef1-7d66-4606-9238-_2.aspx)]"
  syntax:
    content: protected virtual void OnDeleteCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.DataListCommandEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.DataListCommandEventArgs&quot;></xref> that contains event data."
  overload: System.Web.UI.WebControls.DataList.OnDeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  id: OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: OnEditCommand(DataListCommandEventArgs)
  nameWithType: DataList.OnEditCommand(DataListCommandEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnEditCommand(DataListCommandEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.DataList.EditCommand&quot;></xref> event. This allows you to provide a custom handler for the event."
  remarks: "Use the OnEditCommand method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.EditCommand> event.       The <xref:System.Web.UI.WebControls.DataList.EditCommand> event is raised when the `Edit` button is clicked for an item in the <xref:System.Web.UI.WebControls.DataList> control.       A typical handler for the <xref:System.Web.UI.WebControls.DataList.EditCommand> event sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to the selected row and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).       Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).       The OnEditCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.EditCommand> event. It allows you to edit the selected item in the <xref:System.Web.UI.WebControls.DataList> control when the `Edit` button is clicked.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/99a47a87-5972-4aac-87aa-_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/99a47a87-5972-4aac-87aa-_1.aspx)]  \n  \n [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/99a47a87-5972-4aac-87aa-_2.aspx)]\n [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/99a47a87-5972-4aac-87aa-_2.aspx)]"
  syntax:
    content: protected virtual void OnEditCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.DataListCommandEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.DataListCommandEventArgs&quot;></xref> that contains event data."
  overload: System.Web.UI.WebControls.DataList.OnEditCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: DataList.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.Control.Init&quot;></xref> event for the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "The OnInit method notifies the <xref:System.Web.UI.WebControls.DataList> control to perform any initialization steps that are required to create and set up an instance."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Web.UI.WebControls.DataList.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  id: OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: OnItemCommand(DataListCommandEventArgs)
  nameWithType: DataList.OnItemCommand(DataListCommandEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnItemCommand(DataListCommandEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.DataList.ItemCommand&quot;></xref> event. This allows you to provide a custom handler for the event."
  remarks: "Use the OnItemCommand method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.ItemCommand> event.       The <xref:System.Web.UI.WebControls.DataList.ItemCommand> event is raised when any button is clicked in the <xref:System.Web.UI.WebControls.DataList> control and is commonly used when you have a button control with a custom `CommandName` value, such as `Add`, in the <xref:System.Web.UI.WebControls.DataList> control.       Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).       The OnItemCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.ItemCommand> event to select an item from the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListItemCommand#1](~/add/codesnippet/visualbasic/346e0b5a-81b1-46ba-abc9-_1.aspx)]\n [!code-cs[DataListItemCommand#1](~/add/codesnippet/csharp/346e0b5a-81b1-46ba-abc9-_1.aspx)]  \n  \n [!code-vb[DataListItemCommand2#1](~/add/codesnippet/visualbasic/346e0b5a-81b1-46ba-abc9-_2.aspx)]\n [!code-cs[DataListItemCommand2#1](~/add/codesnippet/csharp/346e0b5a-81b1-46ba-abc9-_2.aspx)]"
  syntax:
    content: protected virtual void OnItemCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.DataListCommandEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.DataListCommandEventArgs&quot;></xref> that contains event data."
  overload: System.Web.UI.WebControls.DataList.OnItemCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)
  id: OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: OnItemCreated(DataListItemEventArgs)
  nameWithType: DataList.OnItemCreated(DataListItemEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnItemCreated(DataListItemEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.DataList.ItemCreated&quot;></xref> event. This allows you to provide a custom handler for the event."
  remarks: "Use the OnItemCreated method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.ItemCreated> event.       The <xref:System.Web.UI.WebControls.DataList.ItemCreated> event is raised when an item in the <xref:System.Web.UI.WebControls.DataList> control is created, both during round-trips and at the time data is bound to the control.       The <xref:System.Web.UI.WebControls.DataList.ItemCreated> event is commonly used to control the content and appearance of a row in the <xref:System.Web.UI.WebControls.DataList> control.       Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).       The OnItemCreated method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.ItemCreated> event to display the order in which items in the <xref:System.Web.UI.WebControls.DataList> control are created.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListItemCreated#1](~/add/codesnippet/visualbasic/daa572be-0a5b-4a9b-a0e3-_1.aspx)]\n [!code-cs[DataListItemCreated#1](~/add/codesnippet/csharp/daa572be-0a5b-4a9b-a0e3-_1.aspx)]  \n  \n [!code-cs[DataListItemCreated2#1](~/add/codesnippet/csharp/daa572be-0a5b-4a9b-a0e3-_2.aspx)]\n [!code-vb[DataListItemCreated2#1](~/add/codesnippet/visualbasic/daa572be-0a5b-4a9b-a0e3-_2.aspx)]"
  syntax:
    content: protected virtual void OnItemCreated (System.Web.UI.WebControls.DataListItemEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.DataListItemEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.DataListItemEventArgs&quot;></xref> that contains event data."
  overload: System.Web.UI.WebControls.DataList.OnItemCreated*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)
  id: OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: OnItemDataBound(DataListItemEventArgs)
  nameWithType: DataList.OnItemDataBound(DataListItemEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnItemDataBound(DataListItemEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.DataList.ItemDataBound&quot;></xref> event. This allows you to provide a custom handler for the event."
  remarks: "Use the OnItemDataBound method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.ItemDataBound> event.       The <xref:System.Web.UI.WebControls.DataList.ItemDataBound> event is raised after an item is data bound to the <xref:System.Web.UI.WebControls.DataList> control. This event provides you with the last opportunity to access the data item before it is displayed on the client. After this event is raised, the data item is no longer available.       Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).       The OnItemDataBound method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.ItemDataBound> event to display the order in which items in the <xref:System.Web.UI.WebControls.DataList> control are bound to the control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListItemDataBound#1](~/add/codesnippet/csharp/d0f378ec-24e7-443f-8ae5-_1.aspx)]\n [!code-vb[DataListItemDataBound#1](~/add/codesnippet/visualbasic/d0f378ec-24e7-443f-8ae5-_1.aspx)]  \n  \n [!code-vb[DataListItemDataBound2#1](~/add/codesnippet/visualbasic/d0f378ec-24e7-443f-8ae5-_2.aspx)]\n [!code-cs[DataListItemDataBound2#1](~/add/codesnippet/csharp/d0f378ec-24e7-443f-8ae5-_2.aspx)]"
  syntax:
    content: protected virtual void OnItemDataBound (System.Web.UI.WebControls.DataListItemEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.DataListItemEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.DataListItemEventArgs&quot;></xref> that contains event data."
  overload: System.Web.UI.WebControls.DataList.OnItemDataBound*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  id: OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: OnUpdateCommand(DataListCommandEventArgs)
  nameWithType: DataList.OnUpdateCommand(DataListCommandEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnUpdateCommand(DataListCommandEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Raises the <xref href=&quot;System.Web.UI.WebControls.DataList.UpdateCommand&quot;></xref> event. This allows you to provide a custom handler for the event."
  remarks: "Use the OnUpdateCommand method to provide a custom handler for the <xref:System.Web.UI.WebControls.DataList.UpdateCommand> event.       The <xref:System.Web.UI.WebControls.DataList.UpdateCommand> event is raised when the `Update` button for an item is clicked.       A typical handler for the <xref:System.Web.UI.WebControls.DataList.UpdateCommand> event updates the data, sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to `-1` (to deselect the item), and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).       Raising an event invokes the event handler through a delegate. For more information, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md).       The OnUpdateCommand method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  example:
  - "The following code example demonstrates how to specify and code a handler for the <xref:System.Web.UI.WebControls.DataList.UpdateCommand> event. It allows you to update the selected item in the <xref:System.Web.UI.WebControls.DataList> control with the new values entered by the user when the `Update` button is clicked.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/0d1a8fde-7046-4f78-b346-_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/0d1a8fde-7046-4f78-b346-_1.aspx)]  \n  \n [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/0d1a8fde-7046-4f78-b346-_2.aspx)]\n [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/0d1a8fde-7046-4f78-b346-_2.aspx)]"
  syntax:
    content: protected virtual void OnUpdateCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.DataListCommandEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.DataListItemEventArgs&quot;></xref> that contains event data."
  overload: System.Web.UI.WebControls.DataList.OnUpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.PrepareControlHierarchy
  id: PrepareControlHierarchy
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: PrepareControlHierarchy()
  nameWithType: DataList.PrepareControlHierarchy()
  fullName: System.Web.UI.WebControls.DataList.PrepareControlHierarchy()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Prepares the control hierarchy for rendering in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "The PrepareControlHierarchy method is used primarily by control developers when deriving a custom control from the <xref:System.Web.UI.WebControls.DataList> control.       The PrepareControlHierarchy prepares the control hierarchy and sets styles for contained <xref:System.Web.UI.WebControls.DataListItem> controls before the child controls are rendered."
  syntax:
    content: protected override void PrepareControlHierarchy ();
    parameters: []
  overload: System.Web.UI.WebControls.DataList.PrepareControlHierarchy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.RenderContents(System.Web.UI.HtmlTextWriter)
  id: RenderContents(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: RenderContents(HtmlTextWriter)
  nameWithType: DataList.RenderContents(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.DataList.RenderContents(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Renders the list items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "The RenderContents method is used primarily by control developers, when deriving a custom control from the <xref:System.Web.UI.WebControls.DataList> control.       The RenderContents method renders the inner content of the <xref:System.Web.UI.WebControls.DataList> control, including the contained <xref:System.Web.UI.WebControls.DataListItem> controls."
  example:
  - "The following code example demonstrates how to override the RenderContents method in a custom server control so that some text precedes the <xref:System.Web.UI.WebControls.DataList> object.  \n  \n [!code-cs[CustomDataListRenderContents#1](~/add/codesnippet/csharp/723e0bf7-1579-4578-bf9d-_1.aspx)]\n [!code-vb[CustomDataListRenderContents#1](~/add/codesnippet/visualbasic/723e0bf7-1579-4578-bf9d-_1.aspx)]  \n[!code-cs[CustomDataListRenderContents#2](~/add/codesnippet/csharp/723e0bf7-1579-4578-bf9d-_2.cs)]\n[!code-vb[CustomDataListRenderContents#2](~/add/codesnippet/visualbasic/723e0bf7-1579-4578-bf9d-_2.vb)]"
  syntax:
    content: protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "A <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;></xref> that represents the output stream to render HTML content on the client."
  overload: System.Web.UI.WebControls.DataList.RenderContents*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.RepeatColumns
  id: RepeatColumns
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: RepeatColumns
  nameWithType: DataList.RepeatColumns
  fullName: System.Web.UI.WebControls.DataList.RepeatColumns
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the number of columns to display in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use this property to specify the number of columns that display items in the <xref:System.Web.UI.WebControls.DataList> control. For example, if you set this property to `5`, the <xref:System.Web.UI.WebControls.DataList> control displays its items in five columns.      > [!NOTE] >  If this property is set to `0`, the <xref:System.Web.UI.WebControls.DataList> control displays its items in a single row or column, based on the value of the <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> property. If the <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> property is set to `RepeatDirection.Horizontal`, the items are displayed in a single row. If the <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> property is set to `RepeatDirection.Vertical`, the items are displayed in a single column."
  example:
  - "The following code example demonstrates how to use the RepeatColumns property to specify the number of columns to display in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_722_1.aspx)]\n [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_722_1.aspx)]"
  syntax:
    content: public virtual int RepeatColumns { get; set; }
    return:
      type: System.Int32
      description: "The number of columns to display in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is <xref uid=&quot;langword_csharp_0&quot; name=&quot;0&quot; href=&quot;&quot;></xref>, which indicates that the items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control are displayed in a single row or column, based on the value of the <xref:System.Web.UI.WebControls.DataList.RepeatDirection*> property."
  overload: System.Web.UI.WebControls.DataList.RepeatColumns*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The specified number of columns is a negative value."
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.RepeatDirection
  id: RepeatDirection
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: RepeatDirection
  nameWithType: DataList.RepeatDirection
  fullName: System.Web.UI.WebControls.DataList.RepeatDirection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets whether the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control displays vertically or horizontally."
  remarks: "Use the RepeatDirection property to specify the display direction of the <xref:System.Web.UI.WebControls.DataList> control.      > [!NOTE] >  The number of columns displayed is always determined by the <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> property.       If this property is set to `RepeatDirection.Vertical`, the items in the list are displayed in columns loaded from top to bottom, then left to right, until all items are rendered. For example, if the <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> property is set to `3`, the items in the <xref:System.Web.UI.WebControls.DataList> control are displayed in three columns, as in the following table.      ||||   |-|-|-|   |1|4|7|   |2|5|8|   |3|6|9|       If this property is set to `RepeatDirection.Horizontal`, the items in the list are displayed in rows loaded from left to right, then top to bottom, until all items are rendered. For example, if the <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> property is set to `3`, the items of the <xref:System.Web.UI.WebControls.DataList> control are displayed in rows of three items each, as in the following table.      ||||   |-|-|-|   |1|2|3|   |4|5|6|   |7|8|9|"
  example:
  - "The following code example demonstrates how to use the RepeatDirection property to specify the direction in which the <xref:System.Web.UI.WebControls.DataList> control is displayed.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_42_1.aspx)]\n [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_42_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.RepeatDirection RepeatDirection { get; set; }
    return:
      type: System.Web.UI.WebControls.RepeatDirection
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.RepeatDirection&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_Vertical&quot; name=&quot;Vertical&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.RepeatDirection*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The specified value is not one of the <xref href=&quot;System.Web.UI.WebControls.RepeatDirection&quot;></xref> values."
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.RepeatLayout
  id: RepeatLayout
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: RepeatLayout
  nameWithType: DataList.RepeatLayout
  fullName: System.Web.UI.WebControls.DataList.RepeatLayout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets whether the control is displayed in a table or flow layout."
  remarks: "Use the RepeatLayout property to specify whether the items in the <xref:System.Web.UI.WebControls.DataList> control are displayed in a table. The only <xref:System.Web.UI.WebControls.RepeatLayout> values that are supported by the <xref:System.Web.UI.WebControls.DataList> control are <xref:System.Web.UI.WebControls.RepeatLayout> and <xref:System.Web.UI.WebControls.RepeatLayout>.       If this property is set to `RepeatLayout.Table`, the items in the list are displayed in a table. If this property is set to `RepeatLayout.Flow`, the items in the list are displayed without a table structure.       When the <xref:System.Web.UI.WebControls.DataList> control is displayed in a table, you can use the <xref:System.Web.UI.WebControls.DataList.GridLines%2A> property to specify a grid line style."
  example:
  - "The following code example demonstrates how to use the RepeatLayout property to specify the layout style of the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListLayout#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_586_1.aspx)]\n [!code-cs[DataListLayout#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_586_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.RepeatLayout RepeatLayout { get; set; }
    return:
      type: System.Web.UI.WebControls.RepeatLayout
      description: "A value that specifies whether the control is displayed in a table or in flow layout."
  overload: System.Web.UI.WebControls.DataList.RepeatLayout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The specified value is not one of the supported <xref href=&quot;System.Web.UI.WebControls.RepeatLayout&quot;></xref> values."
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: DataList.SaveViewState()
  fullName: System.Web.UI.WebControls.DataList.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Saves the changes to the control view state since the time the page was posted back to the server."
  remarks: "The SaveViewState method is used primarily by control developers.       View state is the accumulation of the values of a server control&quot;s properties. These values are automatically placed in the server control&quot;s <xref:System.Web.UI.Control.ViewState%2A> property, which is an instance of the <xref:System.Web.UI.StateBag> class. The <xref:System.Web.UI.Control.ViewState%2A> property&quot;s value is then persisted to a string object after the save-state stage of the server control&quot;s life cycle. For more information, see [ASP.NET Page Life Cycle Overview](~/add/includes/ajax-current-ext-md.md).       When view state is saved, this string object is returned to the client as a variable that is stored in a hidden HTML input element. When you author custom server controls, you can improve efficiency by overriding the SaveViewState method and modifying the <xref:System.Web.UI.Control.ViewState%2A> property for your server control. For more information, see [Developing Custom ASP.NET Server Controls](~/add/includes/ajax-current-ext-md.md) and [ASP.NET State Management Overview](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "The object that contains the changes to the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> view state."
  overload: System.Web.UI.WebControls.DataList.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.SelectCommandName
  id: SelectCommandName
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: SelectCommandName
  nameWithType: DataList.SelectCommandName
  fullName: System.Web.UI.WebControls.DataList.SelectCommandName
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Represents the <xref uid=&quot;langword_csharp_Select&quot; name=&quot;Select&quot; href=&quot;&quot;></xref> command name. This field is read-only."
  remarks: "Use the SelectCommandName field to represent the `Select` command name."
  syntax:
    content: public const string SelectCommandName;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.SelectedIndex
  id: SelectedIndex
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: SelectedIndex
  nameWithType: DataList.SelectedIndex
  fullName: System.Web.UI.WebControls.DataList.SelectedIndex
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the index of the selected item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the SelectedIndex property to programmatically specify the selected item in the <xref:System.Web.UI.WebControls.DataList> control. You can also use this property to determine the index of the selected item.      > [!NOTE] >  The SelectedIndex property is zero based.       To deselect an item, set the SelectedIndex property to `-1`.       The SelectedIndex property is stored in control state."
  example:
  - "The following code example demonstrates how to use the SelectedIndex property to specify the selected item in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListItemCommand#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1039_1.aspx)]\n [!code-cs[DataListItemCommand#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1039_1.aspx)]"
  syntax:
    content: public virtual int SelectedIndex { get; set; }
    return:
      type: System.Int32
      description: "The index of the selected item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  overload: System.Web.UI.WebControls.DataList.SelectedIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The specified value is less than <xref uid=&quot;langword_csharp_-1&quot; name=&quot;-1&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.SelectedItem
  id: SelectedItem
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: SelectedItem
  nameWithType: DataList.SelectedItem
  fullName: System.Web.UI.WebControls.DataList.SelectedItem
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the selected item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the SelectedItem property to get a <xref:System.Web.UI.WebControls.DataListItem> object that represents the selected item in the <xref:System.Web.UI.WebControls.DataList> control. This object can then be used to access the properties of the selected item."
  example:
  - "The following code example demonstrates how to use the SelectedItem property to display the contents of the selected item in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[Classic DataList.SelectedItem Example#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_681_1.aspx)]\n [!code-vb[Classic DataList.SelectedItem Example#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_681_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.DataListItem SelectedItem { get; }
    return:
      type: System.Web.UI.WebControls.DataListItem
      description: "A <xref href=&quot;System.Web.UI.WebControls.DataListItem&quot;></xref> that represents the item selected in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  overload: System.Web.UI.WebControls.DataList.SelectedItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.SelectedItemStyle
  id: SelectedItemStyle
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: SelectedItemStyle
  nameWithType: DataList.SelectedItemStyle
  fullName: System.Web.UI.WebControls.DataList.SelectedItemStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the style properties for the selected item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use this property to provide a custom style for the selected item in the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.       Item style properties in the <xref:System.Web.UI.WebControls.DataList> control are inherited from one item style property to another through a hierarchy. Item style properties set lower in the hierarchy are inherited by item style properties higher in the hierarchy. For example, if you specify a red font for the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property, all other item style properties in the <xref:System.Web.UI.WebControls.DataList> control will also have a red font. This allows you to provide a common appearance for the control by setting a single item style property. You can override the inherited style settings for an item style property that is higher in the hierarchy by setting its style properties. For example, you can specify a blue font for the <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> property, overriding the red font specified in the <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> property. The following table lists the hierarchy order from highest to lowest.      |Precedence|Style Property|   |----------------|--------------------|   |1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|   |2|SelectedItemStyle|   |3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|   |4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|   |5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|       To specify a custom style for the selected item, place the `<SelectedItemStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<SelectedItemStyle>` tag."
  example:
  - "The following code example demonstrates how to use the SelectedItemStyle property to specify a custom background color for the selected item in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListItemCommand#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_571_1.aspx)]\n [!code-cs[DataListItemCommand#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_571_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.TableItemStyle SelectedItemStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that contains the style properties for the selected item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is an empty <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object."
  overload: System.Web.UI.WebControls.DataList.SelectedItemStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.SelectedItemTemplate
  id: SelectedItemTemplate
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: SelectedItemTemplate
  nameWithType: DataList.SelectedItemTemplate
  fullName: System.Web.UI.WebControls.DataList.SelectedItemTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the template for the selected item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the SelectedItemTemplate property to control the contents of the selected item. The appearance of the selected item is controlled by the <xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A> property.       To specify a template for the selected item, place the `<SelectedItemTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<SelectedItemTemplate>` tags.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the SelectedItemTemplate property to control the contents of the selected item in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[DataListItemCommand#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_845_1.aspx)]\n [!code-cs[DataListItemCommand#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_845_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate SelectedItemTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the template for the selected item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.SelectedItemTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.SelectedValue
  id: SelectedValue
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: SelectedValue
  nameWithType: DataList.SelectedValue
  fullName: System.Web.UI.WebControls.DataList.SelectedValue
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the value of the key field for the selected data list item."
  syntax:
    content: public object SelectedValue { get; }
    return:
      type: System.Object
      description: "The key field value for the selected data list item. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, which indicates that no data list item is currently selected."
  overload: System.Web.UI.WebControls.DataList.SelectedValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Web.UI.WebControls.BaseDataList.DataKeyField*> property has not been set."
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.SeparatorStyle
  id: SeparatorStyle
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: SeparatorStyle
  nameWithType: DataList.SeparatorStyle
  fullName: System.Web.UI.WebControls.DataList.SeparatorStyle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the style properties of the separator between each item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the SeparatorStyle property to provide a custom style for the separator between each item in the <xref:System.Web.UI.WebControls.DataList> control. The separator allows you to place an element with custom content between each item in the <xref:System.Web.UI.WebControls.DataList> control. Common style attributes that can be adjusted include foreground color, background color, font, and content alignment within the cell. Providing a different style enhances the appearance of the <xref:System.Web.UI.WebControls.DataList> control.       To specify a custom style for the separator, place the `<SeparatorStyle>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the style attributes within the opening `<SeparatorStyle>` tag."
  example:
  - "The following code example demonstrates how to use the SeparatorStyle property to specify a custom background color for the separator between each item in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListSeparatorStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1134_1.aspx)]\n [!code-vb[DataListSeparatorStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1134_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.WebControls.TableItemStyle SeparatorStyle { get; }
    return:
      type: System.Web.UI.WebControls.TableItemStyle
      description: "A <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object that contains the style properties of the separator between each item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is an empty <xref href=&quot;System.Web.UI.WebControls.TableItemStyle&quot;></xref> object."
  overload: System.Web.UI.WebControls.DataList.SeparatorStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.SeparatorTemplate
  id: SeparatorTemplate
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: SeparatorTemplate
  nameWithType: DataList.SeparatorTemplate
  fullName: System.Web.UI.WebControls.DataList.SeparatorTemplate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the template for the separator between the items of the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the SeparatorTemplate property to control the contents of the separator between the items of the <xref:System.Web.UI.WebControls.DataList> control. The separator allows you to place an element with custom content between each item in the <xref:System.Web.UI.WebControls.DataList> control. The appearance of the separator between the items of the <xref:System.Web.UI.WebControls.DataList> control is controlled by the <xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A> property.       To specify a template for the separator, place the `<SeparatorTemplate>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.DataList> control. You can then list the contents of the template between the opening and closing `<SeparatorTemplate>` tags.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the SeparatorTemplate property to control the contents of the separator between each item in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListSeparatorStyle#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1118_1.aspx)]\n [!code-vb[DataListSeparatorStyle#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1118_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.ITemplate SeparatorTemplate { get; set; }
    return:
      type: System.Web.UI.ITemplate
      description: "A <xref href=&quot;System.Web.UI.ITemplate&quot;></xref> that contains the template for the separator between items in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.SeparatorTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.ShowFooter
  id: ShowFooter
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: ShowFooter
  nameWithType: DataList.ShowFooter
  fullName: System.Web.UI.WebControls.DataList.ShowFooter
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether the footer section is displayed in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the ShowFooter property to specify whether the footer section is displayed in the <xref:System.Web.UI.WebControls.DataList> control.       You can control the appearance of the footer section by setting the <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> property. The contents of the footer section are controlled by the <xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A> property."
  example:
  - "The following code example demonstrates how to use the ShowFooter property to display the footer section in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListShowHeader#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_885_1.aspx)]\n [!code-vb[DataListShowHeader#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_885_1.aspx)]"
  syntax:
    content: public virtual bool ShowFooter { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the footer section is displayed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, however this property is only examined when the <xref:System.Web.UI.WebControls.DataList.FooterTemplate*> property is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.ShowFooter*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.ShowHeader
  id: ShowHeader
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: ShowHeader
  nameWithType: DataList.ShowHeader
  fullName: System.Web.UI.WebControls.DataList.ShowHeader
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether the header section is displayed in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the ShowHeader property to specify whether the header section is displayed in the <xref:System.Web.UI.WebControls.DataList> control.       You can control appearance of the header section by setting the <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> property. The contents of the header section are controlled by the <xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A> property."
  example:
  - "The following code example demonstrates how to use the ShowHeader property to display the header section in the <xref:System.Web.UI.WebControls.DataList> control.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListShowHeader#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_933_1.aspx)]\n [!code-vb[DataListShowHeader#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_933_1.aspx)]"
  syntax:
    content: public virtual bool ShowHeader { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the header is displayed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, however this property is only examined when the <xref:System.Web.UI.WebControls.DataList.HeaderTemplate*> property is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.ShowHeader*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#GetItemStyle(System.Web.UI.WebControls.ListItemType,System.Int32)
  id: System#Web#UI#WebControls#IRepeatInfoUser#GetItemStyle(System.Web.UI.WebControls.ListItemType,System.Int32)
  isEii: true
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType,Int32)
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType,Int32)
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast to an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface."
  syntax:
    content: System.Web.UI.WebControls.Style IRepeatInfoUser.GetItemStyle (System.Web.UI.WebControls.ListItemType itemType, int repeatIndex);
    parameters:
    - id: itemType
      type: System.Web.UI.WebControls.ListItemType
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.ListItemType&quot;></xref> enumeration values."
    - id: repeatIndex
      type: System.Int32
      description: "The index of the item in the list control."
    return:
      type: System.Web.UI.WebControls.Style
      description: "A <xref href=&quot;System.Web.UI.WebControls.Style&quot;></xref> that represents the style of the specified item type at the specified index in the list control."
  overload: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#GetItemStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasFooter
  id: System#Web#UI#WebControls#IRepeatInfoUser#HasFooter
  isEii: true
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.HasFooter%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast to an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface."
  syntax:
    content: bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasFooter*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasHeader
  id: System#Web#UI#WebControls#IRepeatInfoUser#HasHeader
  isEii: true
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.HasHeader%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface."
  syntax:
    content: bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasHeader*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasSeparators
  id: System#Web#UI#WebControls#IRepeatInfoUser#HasSeparators
  isEii: true
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast to an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface."
  syntax:
    content: bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators { get; }
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasSeparators*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RenderItem(System.Web.UI.WebControls.ListItemType,System.Int32,System.Web.UI.WebControls.RepeatInfo,System.Web.UI.HtmlTextWriter)
  id: System#Web#UI#WebControls#IRepeatInfoUser#RenderItem(System.Web.UI.WebControls.ListItemType,System.Int32,System.Web.UI.WebControls.RepeatInfo,System.Web.UI.HtmlTextWriter)
  isEii: true
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType,Int32,RepeatInfo,HtmlTextWriter)
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType,Int32,RepeatInfo,HtmlTextWriter)
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType,Int32,RepeatInfo,HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.RenderItem%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast to an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface."
  syntax:
    content: void IRepeatInfoUser.RenderItem (System.Web.UI.WebControls.ListItemType itemType, int repeatIndex, System.Web.UI.WebControls.RepeatInfo repeatInfo, System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: itemType
      type: System.Web.UI.WebControls.ListItemType
      description: "The type of the item."
    - id: repeatIndex
      type: System.Int32
      description: "The index of the item."
    - id: repeatInfo
      type: System.Web.UI.WebControls.RepeatInfo
      description: "Information that is used to render the item."
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "The <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;></xref> object to use to render the item."
  overload: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RenderItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RepeatedItemCount
  id: System#Web#UI#WebControls#IRepeatInfoUser#RepeatedItemCount
  isEii: true
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "For a description of this member, see &lt;xref:System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount%2A?displayProperty=fullName&gt;."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.UI.WebControls.DataList> instance is cast to an <xref:System.Web.UI.WebControls.IRepeatInfoUser> interface."
  syntax:
    content: int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount { get; }
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RepeatedItemCount*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.TagKey
  id: TagKey
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: TagKey
  nameWithType: DataList.TagKey
  fullName: System.Web.UI.WebControls.DataList.TagKey
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the HTML tag that is used to render the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "Use the TagKey property to determine the <xref:System.Web.UI.HtmlTextWriterTag> value that is associated with a <xref:System.Web.UI.WebControls.DataList> control. The TagKey property is used primarily by control developers."
  syntax:
    content: protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }
    return:
      type: System.Web.UI.HtmlTextWriterTag
      description: "Returns the <xref href=&quot;System.Web.UI.HtmlTextWriterTag&quot;></xref> tag if the <xref:System.Web.UI.WebControls.DataList.RepeatLayout*> is set to <xref href=&quot;System.Web.UI.WebControls.RepeatLayout&quot;></xref>; otherwise, returns the <xref href=&quot;System.Web.UI.HtmlTextWriterTag&quot;></xref> tag. The default is <xref href=&quot;System.Web.UI.WebControls.RepeatLayout&quot;></xref>."
  overload: System.Web.UI.WebControls.DataList.TagKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: DataList.TrackViewState()
  fullName: System.Web.UI.WebControls.DataList.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Tracks view-state changes to the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control so they can be stored in the control&quot;s <xref:System.Web.UI.Control.ViewState*> property."
  remarks: "The TrackViewState method is overridden to mark the starting point at which to begin tracking and saving changes to the control as part of the control&quot;s view state."
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.DataList.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.UpdateCommand
  id: UpdateCommand
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: DataList.UpdateCommand
  fullName: System.Web.UI.WebControls.DataList.UpdateCommand
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when the <xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;></xref> button is clicked for an item in the <xref href=&quot;System.Web.UI.WebControls.DataList&quot;></xref> control."
  remarks: "The UpdateCommand event is raised when the `Update` button for an item is clicked.       A typical handler for the UpdateCommand event updates the data, sets the <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> property to `-1` (to deselect the item), and then rebinds the data to the <xref:System.Web.UI.WebControls.DataList> control.      > [!CAUTION] >  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input. For more information, see [Securing Standard Controls](~/add/includes/ajax-current-ext-md.md), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](~/add/includes/ajax-current-ext-md.md), and [Validating User Input in ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md).       For more information about handling events, see [How to: Consume Events in a Web Forms Application](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to specify and code a handler for the UpdateCommand event. It allows you to update the selected item in the <xref:System.Web.UI.WebControls.DataList> control with the new values entered by the user when the `Update` button is clicked.  \n  \n> [!NOTE]\n>  The following code sample uses the single-file code model and may not work correctly if copied directly into a code-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Forms Page Code Model](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[DataListEdit#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_128_1.aspx)]\n [!code-vb[DataListEdit#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_128_1.aspx)]  \n  \n [!code-vb[DataListEdit2#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_128_2.aspx)]\n [!code-cs[DataListEdit2#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_128_2.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.DataListCommandEventHandler UpdateCommand;
    return:
      type: System.Web.UI.WebControls.DataListCommandEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.DataList.UpdateCommandName
  id: UpdateCommandName
  parent: System.Web.UI.WebControls.DataList
  langs:
  - csharp
  name: UpdateCommandName
  nameWithType: DataList.UpdateCommandName
  fullName: System.Web.UI.WebControls.DataList.UpdateCommandName
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Represents the <xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;></xref> command name. This field is read-only."
  remarks: "Use the UpdateCommandName field to represent the `Update` command name."
  syntax:
    content: public const string UpdateCommandName;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.BaseDataList
  isExternal: false
  name: System.Web.UI.WebControls.BaseDataList
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.DataList.#ctor
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: DataList()
  nameWithType: DataList.DataList()
  fullName: System.Web.UI.WebControls.DataList.DataList()
- uid: System.Web.UI.WebControls.DataList.AlternatingItemStyle
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: AlternatingItemStyle
  nameWithType: DataList.AlternatingItemStyle
  fullName: System.Web.UI.WebControls.DataList.AlternatingItemStyle
- uid: System.Web.UI.WebControls.TableItemStyle
  parent: System.Web.UI.WebControls
  isExternal: false
  name: TableItemStyle
  nameWithType: TableItemStyle
  fullName: System.Web.UI.WebControls.TableItemStyle
- uid: System.Web.UI.WebControls.DataList.AlternatingItemTemplate
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: AlternatingItemTemplate
  nameWithType: DataList.AlternatingItemTemplate
  fullName: System.Web.UI.WebControls.DataList.AlternatingItemTemplate
- uid: System.Web.UI.ITemplate
  parent: System.Web.UI
  isExternal: false
  name: ITemplate
  nameWithType: ITemplate
  fullName: System.Web.UI.ITemplate
- uid: System.Web.UI.WebControls.DataList.CancelCommand
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: CancelCommand
  nameWithType: DataList.CancelCommand
  fullName: System.Web.UI.WebControls.DataList.CancelCommand
- uid: System.Web.UI.WebControls.DataListCommandEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataListCommandEventHandler
  nameWithType: DataListCommandEventHandler
  fullName: System.Web.UI.WebControls.DataListCommandEventHandler
- uid: System.Web.UI.WebControls.DataList.CancelCommandName
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: CancelCommandName
  nameWithType: DataList.CancelCommandName
  fullName: System.Web.UI.WebControls.DataList.CancelCommandName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.DataList.CreateControlHierarchy(System.Boolean)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: CreateControlHierarchy(Boolean)
  nameWithType: DataList.CreateControlHierarchy(Boolean)
  fullName: System.Web.UI.WebControls.DataList.CreateControlHierarchy(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.DataList.CreateControlStyle
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: CreateControlStyle()
  nameWithType: DataList.CreateControlStyle()
  fullName: System.Web.UI.WebControls.DataList.CreateControlStyle()
- uid: System.Web.UI.WebControls.Style
  parent: System.Web.UI.WebControls
  isExternal: false
  name: Style
  nameWithType: Style
  fullName: System.Web.UI.WebControls.Style
- uid: System.Web.UI.WebControls.DataList.CreateItem(System.Int32,System.Web.UI.WebControls.ListItemType)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: CreateItem(Int32,ListItemType)
  nameWithType: DataList.CreateItem(Int32,ListItemType)
  fullName: System.Web.UI.WebControls.DataList.CreateItem(Int32,ListItemType)
- uid: System.Web.UI.WebControls.DataListItem
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataListItem
  nameWithType: DataListItem
  fullName: System.Web.UI.WebControls.DataListItem
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.ListItemType
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ListItemType
  nameWithType: ListItemType
  fullName: System.Web.UI.WebControls.ListItemType
- uid: System.Web.UI.WebControls.DataList.DeleteCommand
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: DeleteCommand
  nameWithType: DataList.DeleteCommand
  fullName: System.Web.UI.WebControls.DataList.DeleteCommand
- uid: System.Web.UI.WebControls.DataList.DeleteCommandName
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: DeleteCommandName
  nameWithType: DataList.DeleteCommandName
  fullName: System.Web.UI.WebControls.DataList.DeleteCommandName
- uid: System.Web.UI.WebControls.DataList.EditCommand
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: EditCommand
  nameWithType: DataList.EditCommand
  fullName: System.Web.UI.WebControls.DataList.EditCommand
- uid: System.Web.UI.WebControls.DataList.EditCommandName
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: EditCommandName
  nameWithType: DataList.EditCommandName
  fullName: System.Web.UI.WebControls.DataList.EditCommandName
- uid: System.Web.UI.WebControls.DataList.EditItemIndex
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: EditItemIndex
  nameWithType: DataList.EditItemIndex
  fullName: System.Web.UI.WebControls.DataList.EditItemIndex
- uid: System.Web.UI.WebControls.DataList.EditItemStyle
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: EditItemStyle
  nameWithType: DataList.EditItemStyle
  fullName: System.Web.UI.WebControls.DataList.EditItemStyle
- uid: System.Web.UI.WebControls.DataList.EditItemTemplate
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: EditItemTemplate
  nameWithType: DataList.EditItemTemplate
  fullName: System.Web.UI.WebControls.DataList.EditItemTemplate
- uid: System.Web.UI.WebControls.DataList.ExtractTemplateRows
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ExtractTemplateRows
  nameWithType: DataList.ExtractTemplateRows
  fullName: System.Web.UI.WebControls.DataList.ExtractTemplateRows
- uid: System.Web.UI.WebControls.DataList.FooterStyle
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: FooterStyle
  nameWithType: DataList.FooterStyle
  fullName: System.Web.UI.WebControls.DataList.FooterStyle
- uid: System.Web.UI.WebControls.DataList.FooterTemplate
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: FooterTemplate
  nameWithType: DataList.FooterTemplate
  fullName: System.Web.UI.WebControls.DataList.FooterTemplate
- uid: System.Web.UI.WebControls.DataList.GridLines
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: GridLines
  nameWithType: DataList.GridLines
  fullName: System.Web.UI.WebControls.DataList.GridLines
- uid: System.Web.UI.WebControls.GridLines
  parent: System.Web.UI.WebControls
  isExternal: false
  name: GridLines
  nameWithType: GridLines
  fullName: System.Web.UI.WebControls.GridLines
- uid: System.Web.UI.WebControls.DataList.HeaderStyle
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: HeaderStyle
  nameWithType: DataList.HeaderStyle
  fullName: System.Web.UI.WebControls.DataList.HeaderStyle
- uid: System.Web.UI.WebControls.DataList.HeaderTemplate
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: HeaderTemplate
  nameWithType: DataList.HeaderTemplate
  fullName: System.Web.UI.WebControls.DataList.HeaderTemplate
- uid: System.Web.UI.WebControls.DataList.InitializeItem(System.Web.UI.WebControls.DataListItem)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: InitializeItem(DataListItem)
  nameWithType: DataList.InitializeItem(DataListItem)
  fullName: System.Web.UI.WebControls.DataList.InitializeItem(DataListItem)
- uid: System.Web.UI.WebControls.DataList.ItemCommand
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ItemCommand
  nameWithType: DataList.ItemCommand
  fullName: System.Web.UI.WebControls.DataList.ItemCommand
- uid: System.Web.UI.WebControls.DataList.ItemCreated
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ItemCreated
  nameWithType: DataList.ItemCreated
  fullName: System.Web.UI.WebControls.DataList.ItemCreated
- uid: System.Web.UI.WebControls.DataListItemEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataListItemEventHandler
  nameWithType: DataListItemEventHandler
  fullName: System.Web.UI.WebControls.DataListItemEventHandler
- uid: System.Web.UI.WebControls.DataList.ItemDataBound
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ItemDataBound
  nameWithType: DataList.ItemDataBound
  fullName: System.Web.UI.WebControls.DataList.ItemDataBound
- uid: System.Web.UI.WebControls.DataList.Items
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: Items
  nameWithType: DataList.Items
  fullName: System.Web.UI.WebControls.DataList.Items
- uid: System.Web.UI.WebControls.DataListItemCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataListItemCollection
  nameWithType: DataListItemCollection
  fullName: System.Web.UI.WebControls.DataListItemCollection
- uid: System.Web.UI.WebControls.DataList.ItemStyle
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ItemStyle
  nameWithType: DataList.ItemStyle
  fullName: System.Web.UI.WebControls.DataList.ItemStyle
- uid: System.Web.UI.WebControls.DataList.ItemTemplate
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ItemTemplate
  nameWithType: DataList.ItemTemplate
  fullName: System.Web.UI.WebControls.DataList.ItemTemplate
- uid: System.Web.UI.WebControls.DataList.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: DataList.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.DataList.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.DataList.OnBubbleEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnBubbleEvent(Object,EventArgs)
  nameWithType: DataList.OnBubbleEvent(Object,EventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnBubbleEvent(Object,EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnCancelCommand(DataListCommandEventArgs)
  nameWithType: DataList.OnCancelCommand(DataListCommandEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnCancelCommand(DataListCommandEventArgs)
- uid: System.Web.UI.WebControls.DataListCommandEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataListCommandEventArgs
  nameWithType: DataListCommandEventArgs
  fullName: System.Web.UI.WebControls.DataListCommandEventArgs
- uid: System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnDeleteCommand(DataListCommandEventArgs)
  nameWithType: DataList.OnDeleteCommand(DataListCommandEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnDeleteCommand(DataListCommandEventArgs)
- uid: System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnEditCommand(DataListCommandEventArgs)
  nameWithType: DataList.OnEditCommand(DataListCommandEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnEditCommand(DataListCommandEventArgs)
- uid: System.Web.UI.WebControls.DataList.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: DataList.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnInit(EventArgs)
- uid: System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnItemCommand(DataListCommandEventArgs)
  nameWithType: DataList.OnItemCommand(DataListCommandEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnItemCommand(DataListCommandEventArgs)
- uid: System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnItemCreated(DataListItemEventArgs)
  nameWithType: DataList.OnItemCreated(DataListItemEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnItemCreated(DataListItemEventArgs)
- uid: System.Web.UI.WebControls.DataListItemEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataListItemEventArgs
  nameWithType: DataListItemEventArgs
  fullName: System.Web.UI.WebControls.DataListItemEventArgs
- uid: System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnItemDataBound(DataListItemEventArgs)
  nameWithType: DataList.OnItemDataBound(DataListItemEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnItemDataBound(DataListItemEventArgs)
- uid: System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnUpdateCommand(DataListCommandEventArgs)
  nameWithType: DataList.OnUpdateCommand(DataListCommandEventArgs)
  fullName: System.Web.UI.WebControls.DataList.OnUpdateCommand(DataListCommandEventArgs)
- uid: System.Web.UI.WebControls.DataList.PrepareControlHierarchy
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: PrepareControlHierarchy()
  nameWithType: DataList.PrepareControlHierarchy()
  fullName: System.Web.UI.WebControls.DataList.PrepareControlHierarchy()
- uid: System.Web.UI.WebControls.DataList.RenderContents(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: RenderContents(HtmlTextWriter)
  nameWithType: DataList.RenderContents(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.DataList.RenderContents(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.UI.WebControls.DataList.RepeatColumns
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: RepeatColumns
  nameWithType: DataList.RepeatColumns
  fullName: System.Web.UI.WebControls.DataList.RepeatColumns
- uid: System.Web.UI.WebControls.DataList.RepeatDirection
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: RepeatDirection
  nameWithType: DataList.RepeatDirection
  fullName: System.Web.UI.WebControls.DataList.RepeatDirection
- uid: System.Web.UI.WebControls.RepeatDirection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: RepeatDirection
  nameWithType: RepeatDirection
  fullName: System.Web.UI.WebControls.RepeatDirection
- uid: System.Web.UI.WebControls.DataList.RepeatLayout
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: RepeatLayout
  nameWithType: DataList.RepeatLayout
  fullName: System.Web.UI.WebControls.DataList.RepeatLayout
- uid: System.Web.UI.WebControls.RepeatLayout
  parent: System.Web.UI.WebControls
  isExternal: false
  name: RepeatLayout
  nameWithType: RepeatLayout
  fullName: System.Web.UI.WebControls.RepeatLayout
- uid: System.Web.UI.WebControls.DataList.SaveViewState
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SaveViewState()
  nameWithType: DataList.SaveViewState()
  fullName: System.Web.UI.WebControls.DataList.SaveViewState()
- uid: System.Web.UI.WebControls.DataList.SelectCommandName
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectCommandName
  nameWithType: DataList.SelectCommandName
  fullName: System.Web.UI.WebControls.DataList.SelectCommandName
- uid: System.Web.UI.WebControls.DataList.SelectedIndex
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectedIndex
  nameWithType: DataList.SelectedIndex
  fullName: System.Web.UI.WebControls.DataList.SelectedIndex
- uid: System.Web.UI.WebControls.DataList.SelectedItem
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectedItem
  nameWithType: DataList.SelectedItem
  fullName: System.Web.UI.WebControls.DataList.SelectedItem
- uid: System.Web.UI.WebControls.DataList.SelectedItemStyle
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectedItemStyle
  nameWithType: DataList.SelectedItemStyle
  fullName: System.Web.UI.WebControls.DataList.SelectedItemStyle
- uid: System.Web.UI.WebControls.DataList.SelectedItemTemplate
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectedItemTemplate
  nameWithType: DataList.SelectedItemTemplate
  fullName: System.Web.UI.WebControls.DataList.SelectedItemTemplate
- uid: System.Web.UI.WebControls.DataList.SelectedValue
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectedValue
  nameWithType: DataList.SelectedValue
  fullName: System.Web.UI.WebControls.DataList.SelectedValue
- uid: System.Web.UI.WebControls.DataList.SeparatorStyle
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SeparatorStyle
  nameWithType: DataList.SeparatorStyle
  fullName: System.Web.UI.WebControls.DataList.SeparatorStyle
- uid: System.Web.UI.WebControls.DataList.SeparatorTemplate
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SeparatorTemplate
  nameWithType: DataList.SeparatorTemplate
  fullName: System.Web.UI.WebControls.DataList.SeparatorTemplate
- uid: System.Web.UI.WebControls.DataList.ShowFooter
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ShowFooter
  nameWithType: DataList.ShowFooter
  fullName: System.Web.UI.WebControls.DataList.ShowFooter
- uid: System.Web.UI.WebControls.DataList.ShowHeader
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ShowHeader
  nameWithType: DataList.ShowHeader
  fullName: System.Web.UI.WebControls.DataList.ShowHeader
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#GetItemStyle(System.Web.UI.WebControls.ListItemType,System.Int32)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType,Int32)
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType,Int32)
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(ListItemType,Int32)
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasFooter
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasHeader
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasSeparators
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RenderItem(System.Web.UI.WebControls.ListItemType,System.Int32,System.Web.UI.WebControls.RepeatInfo,System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType,Int32,RepeatInfo,HtmlTextWriter)
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType,Int32,RepeatInfo,HtmlTextWriter)
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(ListItemType,Int32,RepeatInfo,HtmlTextWriter)
- uid: System.Web.UI.WebControls.RepeatInfo
  parent: System.Web.UI.WebControls
  isExternal: false
  name: RepeatInfo
  nameWithType: RepeatInfo
  fullName: System.Web.UI.WebControls.RepeatInfo
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RepeatedItemCount
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
  fullName: System.Web.UI.WebControls.DataList.System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
- uid: System.Web.UI.WebControls.DataList.TagKey
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: TagKey
  nameWithType: DataList.TagKey
  fullName: System.Web.UI.WebControls.DataList.TagKey
- uid: System.Web.UI.HtmlTextWriterTag
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriterTag
  nameWithType: HtmlTextWriterTag
  fullName: System.Web.UI.HtmlTextWriterTag
- uid: System.Web.UI.WebControls.DataList.TrackViewState
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: TrackViewState()
  nameWithType: DataList.TrackViewState()
  fullName: System.Web.UI.WebControls.DataList.TrackViewState()
- uid: System.Web.UI.WebControls.DataList.UpdateCommand
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: UpdateCommand
  nameWithType: DataList.UpdateCommand
  fullName: System.Web.UI.WebControls.DataList.UpdateCommand
- uid: System.Web.UI.WebControls.DataList.UpdateCommandName
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: UpdateCommandName
  nameWithType: DataList.UpdateCommandName
  fullName: System.Web.UI.WebControls.DataList.UpdateCommandName
- uid: System.Web.UI.WebControls.DataList.#ctor*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: DataList
  nameWithType: DataList.DataList
- uid: System.Web.UI.WebControls.DataList.AlternatingItemStyle*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: AlternatingItemStyle
  nameWithType: DataList.AlternatingItemStyle
- uid: System.Web.UI.WebControls.DataList.AlternatingItemTemplate*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: AlternatingItemTemplate
  nameWithType: DataList.AlternatingItemTemplate
- uid: System.Web.UI.WebControls.DataList.CreateControlHierarchy*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: CreateControlHierarchy
  nameWithType: DataList.CreateControlHierarchy
- uid: System.Web.UI.WebControls.DataList.CreateControlStyle*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: CreateControlStyle
  nameWithType: DataList.CreateControlStyle
- uid: System.Web.UI.WebControls.DataList.CreateItem*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: CreateItem
  nameWithType: DataList.CreateItem
- uid: System.Web.UI.WebControls.DataList.EditItemIndex*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: EditItemIndex
  nameWithType: DataList.EditItemIndex
- uid: System.Web.UI.WebControls.DataList.EditItemStyle*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: EditItemStyle
  nameWithType: DataList.EditItemStyle
- uid: System.Web.UI.WebControls.DataList.EditItemTemplate*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: EditItemTemplate
  nameWithType: DataList.EditItemTemplate
- uid: System.Web.UI.WebControls.DataList.ExtractTemplateRows*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ExtractTemplateRows
  nameWithType: DataList.ExtractTemplateRows
- uid: System.Web.UI.WebControls.DataList.FooterStyle*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: FooterStyle
  nameWithType: DataList.FooterStyle
- uid: System.Web.UI.WebControls.DataList.FooterTemplate*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: FooterTemplate
  nameWithType: DataList.FooterTemplate
- uid: System.Web.UI.WebControls.DataList.GridLines*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: GridLines
  nameWithType: DataList.GridLines
- uid: System.Web.UI.WebControls.DataList.HeaderStyle*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: HeaderStyle
  nameWithType: DataList.HeaderStyle
- uid: System.Web.UI.WebControls.DataList.HeaderTemplate*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: HeaderTemplate
  nameWithType: DataList.HeaderTemplate
- uid: System.Web.UI.WebControls.DataList.InitializeItem*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: InitializeItem
  nameWithType: DataList.InitializeItem
- uid: System.Web.UI.WebControls.DataList.Items*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: Items
  nameWithType: DataList.Items
- uid: System.Web.UI.WebControls.DataList.ItemStyle*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ItemStyle
  nameWithType: DataList.ItemStyle
- uid: System.Web.UI.WebControls.DataList.ItemTemplate*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ItemTemplate
  nameWithType: DataList.ItemTemplate
- uid: System.Web.UI.WebControls.DataList.LoadViewState*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: LoadViewState
  nameWithType: DataList.LoadViewState
- uid: System.Web.UI.WebControls.DataList.OnBubbleEvent*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnBubbleEvent
  nameWithType: DataList.OnBubbleEvent
- uid: System.Web.UI.WebControls.DataList.OnCancelCommand*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnCancelCommand
  nameWithType: DataList.OnCancelCommand
- uid: System.Web.UI.WebControls.DataList.OnDeleteCommand*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnDeleteCommand
  nameWithType: DataList.OnDeleteCommand
- uid: System.Web.UI.WebControls.DataList.OnEditCommand*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnEditCommand
  nameWithType: DataList.OnEditCommand
- uid: System.Web.UI.WebControls.DataList.OnInit*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnInit
  nameWithType: DataList.OnInit
- uid: System.Web.UI.WebControls.DataList.OnItemCommand*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnItemCommand
  nameWithType: DataList.OnItemCommand
- uid: System.Web.UI.WebControls.DataList.OnItemCreated*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnItemCreated
  nameWithType: DataList.OnItemCreated
- uid: System.Web.UI.WebControls.DataList.OnItemDataBound*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnItemDataBound
  nameWithType: DataList.OnItemDataBound
- uid: System.Web.UI.WebControls.DataList.OnUpdateCommand*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: OnUpdateCommand
  nameWithType: DataList.OnUpdateCommand
- uid: System.Web.UI.WebControls.DataList.PrepareControlHierarchy*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: PrepareControlHierarchy
  nameWithType: DataList.PrepareControlHierarchy
- uid: System.Web.UI.WebControls.DataList.RenderContents*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: RenderContents
  nameWithType: DataList.RenderContents
- uid: System.Web.UI.WebControls.DataList.RepeatColumns*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: RepeatColumns
  nameWithType: DataList.RepeatColumns
- uid: System.Web.UI.WebControls.DataList.RepeatDirection*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: RepeatDirection
  nameWithType: DataList.RepeatDirection
- uid: System.Web.UI.WebControls.DataList.RepeatLayout*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: RepeatLayout
  nameWithType: DataList.RepeatLayout
- uid: System.Web.UI.WebControls.DataList.SaveViewState*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SaveViewState
  nameWithType: DataList.SaveViewState
- uid: System.Web.UI.WebControls.DataList.SelectedIndex*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectedIndex
  nameWithType: DataList.SelectedIndex
- uid: System.Web.UI.WebControls.DataList.SelectedItem*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectedItem
  nameWithType: DataList.SelectedItem
- uid: System.Web.UI.WebControls.DataList.SelectedItemStyle*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectedItemStyle
  nameWithType: DataList.SelectedItemStyle
- uid: System.Web.UI.WebControls.DataList.SelectedItemTemplate*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectedItemTemplate
  nameWithType: DataList.SelectedItemTemplate
- uid: System.Web.UI.WebControls.DataList.SelectedValue*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SelectedValue
  nameWithType: DataList.SelectedValue
- uid: System.Web.UI.WebControls.DataList.SeparatorStyle*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SeparatorStyle
  nameWithType: DataList.SeparatorStyle
- uid: System.Web.UI.WebControls.DataList.SeparatorTemplate*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: SeparatorTemplate
  nameWithType: DataList.SeparatorTemplate
- uid: System.Web.UI.WebControls.DataList.ShowFooter*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ShowFooter
  nameWithType: DataList.ShowFooter
- uid: System.Web.UI.WebControls.DataList.ShowHeader*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: ShowHeader
  nameWithType: DataList.ShowHeader
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#GetItemStyle*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasFooter*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasFooter
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasHeader*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasHeader
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasSeparators*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RenderItem*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.RenderItem
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.RenderItem
- uid: System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RepeatedItemCount*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
  nameWithType: DataList.System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount
- uid: System.Web.UI.WebControls.DataList.TagKey*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: TagKey
  nameWithType: DataList.TagKey
- uid: System.Web.UI.WebControls.DataList.TrackViewState*
  parent: System.Web.UI.WebControls.DataList
  isExternal: false
  name: TrackViewState
  nameWithType: DataList.TrackViewState
