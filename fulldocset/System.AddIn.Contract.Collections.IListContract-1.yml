### YamlMime:ManagedReference
items:
- uid: System.AddIn.Contract.Collections.IListContract`1
  id: IListContract`1
  children:
  - System.AddIn.Contract.Collections.IListContract`1.GetItem(System.Int32)
  - System.AddIn.Contract.Collections.IListContract`1.IndexOf(`0)
  - System.AddIn.Contract.Collections.IListContract`1.Insert(System.Int32,`0)
  - System.AddIn.Contract.Collections.IListContract`1.RemoveAt(System.Int32)
  - System.AddIn.Contract.Collections.IListContract`1.SetItem(System.Int32,`0)
  langs:
  - csharp
  name: IListContract<C>
  nameWithType: IListContract<C>
  fullName: System.AddIn.Contract.Collections.IListContract<C>
  type: Interface
  syntax:
    content: 'public interface IListContract<C> : System.AddIn.Contract.Collections.ICollectionContract<C>, System.AddIn.Contract.Collections.IEnumerableContract<C> where C : IContract'
    typeParameters:
    - id: C
      description: "To be added."
  implements:
  - System.AddIn.Contract.Collections.ICollectionContract<C>
  - System.AddIn.Contract.Collections.IEnumerableContract<C>
  platform:
  - net462
- uid: System.AddIn.Contract.Collections.IListContract`1.GetItem(System.Int32)
  id: GetItem(System.Int32)
  parent: System.AddIn.Contract.Collections.IListContract`1
  langs:
  - csharp
  name: GetItem(Int32)
  nameWithType: IListContract<C>.GetItem(Int32)
  fullName: System.AddIn.Contract.Collections.IListContract<C>.GetItem(Int32)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Collections
  syntax:
    content: public C GetItem (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    return:
      type: C
      description: "To be added."
  overload: System.AddIn.Contract.Collections.IListContract`1.GetItem*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.Collections.IListContract`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.AddIn.Contract.Collections.IListContract`1
  langs:
  - csharp
  name: IndexOf(C)
  nameWithType: IListContract<C>.IndexOf(C)
  fullName: System.AddIn.Contract.Collections.IListContract<C>.IndexOf(C)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Collections
  syntax:
    content: public int IndexOf (C item);
    parameters:
    - id: item
      type: C
      description: "To be added."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.AddIn.Contract.Collections.IListContract`1.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.Collections.IListContract`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.AddIn.Contract.Collections.IListContract`1
  langs:
  - csharp
  name: Insert(Int32,C)
  nameWithType: IListContract<C>.Insert(Int32,C)
  fullName: System.AddIn.Contract.Collections.IListContract<C>.Insert(Int32,C)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Collections
  syntax:
    content: public void Insert (int index, C item);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    - id: item
      type: C
      description: "To be added."
  overload: System.AddIn.Contract.Collections.IListContract`1.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.Collections.IListContract`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.AddIn.Contract.Collections.IListContract`1
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: IListContract<C>.RemoveAt(Int32)
  fullName: System.AddIn.Contract.Collections.IListContract<C>.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Collections
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
  overload: System.AddIn.Contract.Collections.IListContract`1.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.Collections.IListContract`1.SetItem(System.Int32,`0)
  id: SetItem(System.Int32,`0)
  parent: System.AddIn.Contract.Collections.IListContract`1
  langs:
  - csharp
  name: SetItem(Int32,C)
  nameWithType: IListContract<C>.SetItem(Int32,C)
  fullName: System.AddIn.Contract.Collections.IListContract<C>.SetItem(Int32,C)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Collections
  syntax:
    content: public void SetItem (int index, C value);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    - id: value
      type: C
      description: "To be added."
  overload: System.AddIn.Contract.Collections.IListContract`1.SetItem*
  exceptions: []
  platform:
  - net462
references:
- uid: System.AddIn.Contract.Collections.IListContract`1.GetItem(System.Int32)
  parent: System.AddIn.Contract.Collections.IListContract`1
  isExternal: false
  name: GetItem(Int32)
  nameWithType: IListContract<C>.GetItem(Int32)
  fullName: System.AddIn.Contract.Collections.IListContract<C>.GetItem(Int32)
- uid: C
  isExternal: true
  name: C
  nameWithType: C
  fullName: C
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.AddIn.Contract.Collections.IListContract`1.IndexOf(`0)
  parent: System.AddIn.Contract.Collections.IListContract`1
  isExternal: false
  name: IndexOf(C)
  nameWithType: IListContract<C>.IndexOf(C)
  fullName: System.AddIn.Contract.Collections.IListContract<C>.IndexOf(C)
- uid: System.AddIn.Contract.Collections.IListContract`1.Insert(System.Int32,`0)
  parent: System.AddIn.Contract.Collections.IListContract`1
  isExternal: false
  name: Insert(Int32,C)
  nameWithType: IListContract<C>.Insert(Int32,C)
  fullName: System.AddIn.Contract.Collections.IListContract<C>.Insert(Int32,C)
- uid: System.AddIn.Contract.Collections.IListContract`1.RemoveAt(System.Int32)
  parent: System.AddIn.Contract.Collections.IListContract`1
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IListContract<C>.RemoveAt(Int32)
  fullName: System.AddIn.Contract.Collections.IListContract<C>.RemoveAt(Int32)
- uid: System.AddIn.Contract.Collections.IListContract`1.SetItem(System.Int32,`0)
  parent: System.AddIn.Contract.Collections.IListContract`1
  isExternal: false
  name: SetItem(Int32,C)
  nameWithType: IListContract<C>.SetItem(Int32,C)
  fullName: System.AddIn.Contract.Collections.IListContract<C>.SetItem(Int32,C)
- uid: System.AddIn.Contract.Collections.IListContract`1.GetItem*
  parent: System.AddIn.Contract.Collections.IListContract`1
  isExternal: false
  name: GetItem
  nameWithType: IListContract<C>.GetItem
- uid: System.AddIn.Contract.Collections.IListContract`1.IndexOf*
  parent: System.AddIn.Contract.Collections.IListContract`1
  isExternal: false
  name: IndexOf
  nameWithType: IListContract<C>.IndexOf
- uid: System.AddIn.Contract.Collections.IListContract`1.Insert*
  parent: System.AddIn.Contract.Collections.IListContract`1
  isExternal: false
  name: Insert
  nameWithType: IListContract<C>.Insert
- uid: System.AddIn.Contract.Collections.IListContract`1.RemoveAt*
  parent: System.AddIn.Contract.Collections.IListContract`1
  isExternal: false
  name: RemoveAt
  nameWithType: IListContract<C>.RemoveAt
- uid: System.AddIn.Contract.Collections.IListContract`1.SetItem*
  parent: System.AddIn.Contract.Collections.IListContract`1
  isExternal: false
  name: SetItem
  nameWithType: IListContract<C>.SetItem
