### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.ChangeMonitor
  id: ChangeMonitor
  children:
  - System.Runtime.Caching.ChangeMonitor.#ctor
  - System.Runtime.Caching.ChangeMonitor.Dispose
  - System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  - System.Runtime.Caching.ChangeMonitor.HasChanged
  - System.Runtime.Caching.ChangeMonitor.InitializationComplete
  - System.Runtime.Caching.ChangeMonitor.IsDisposed
  - System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  - System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  - System.Runtime.Caching.ChangeMonitor.UniqueId
  langs:
  - csharp
  name: ChangeMonitor
  nameWithType: ChangeMonitor
  fullName: System.Runtime.Caching.ChangeMonitor
  type: Class
  summary: "Fornece uma classe base para um tipo derivado personalizado que monitoriza as alterações no estado dos dados que depende de um item de cache."
  remarks: "A classe de ChangeMonitor é utilizada como a classe base para classes derivadas monitor que são especializadas para implementações de cache específico. Uma instância de ChangeMonitor monitoriza as alterações no estado de dados dos quais depende de um item de cache. Por exemplo, o item pode ser uma entidade de dados ou ficheiros cujo conteúdo é colocadas em cache. Se a entidade ou dados de ficheiro é atualizada, a entrada de cache associados deve ser alterada também. Itens comuns que podem ser monitorizados incluem entidades de dados (por exemplo, os campos de base de dados, valores, linhas ou tabelas), outra entrada de cache e os ficheiros e os atributos do ficheiro.       Uma alteração de dependência é uma alteração de estado de uma dependência. Numa implementação de cache típica, depois de uma instância de ChangeMonitor notifica a cache uma dependência tiver sido alterado, a cache executa a ação necessária, como invalidar a entrada de cache inseridas.       Classes derivadas de ChangeMonitor podem ser personalizadas para monitorizar as alterações de dependência para específico diferentes arquivos de dados. Por exemplo, são implementações de cache para um sistema de ficheiros, memória física ou uma base de dados. A classe de ChangeMonitor examina as alterações que ocorrem fora da cache e, em seguida, a cache que ocorreram alterações de alertas.       O [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] inclui as seguintes classes que derivam da classe de ChangeMonitor:- <xref:System.Runtime.Caching.CacheEntryChangeMonitor>- <xref:System.Runtime.Caching.FileChangeMonitor>- <xref:System.Runtime.Caching.HostFileChangeMonitor>- <xref:System.Runtime.Caching.SqlChangeMonitor>cada uma destas classes funciona com diferentes tipos de dependências.</xref:System.Runtime.Caching.SqlChangeMonitor> </xref:System.Runtime.Caching.HostFileChangeMonitor> </xref:System.Runtime.Caching.FileChangeMonitor> </xref:System.Runtime.Caching.CacheEntryChangeMonitor> Por exemplo, o derivada <xref:System.Runtime.Caching.FileChangeMonitor>classe monitoriza as alterações a uma cache de dados de sistema de ficheiros (ficheiros e pastas) que o item de cache depende.</xref:System.Runtime.Caching.FileChangeMonitor>"
  syntax:
    content: 'public abstract class ChangeMonitor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  id: '#ctor'
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: System.Runtime.Caching.ChangeMonitor.ChangeMonitor()
  type: Constructor
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> classe. Este construtor é chamado a partir de construtores em classes derivadas para inicializar a classe base."
  remarks: "O <xref:System.Runtime.Caching.ChangeMonitor>classe tem um construtor predefinido.</xref:System.Runtime.Caching.ChangeMonitor> No entanto, as classes que herdar a partir da base de <xref:System.Runtime.Caching.ChangeMonitor>classe e definir personalizado alteração-monitorização de comportamento deve efetuar a inicialização no construtor.</xref:System.Runtime.Caching.ChangeMonitor> Para obter mais informações, consulte as notas para a secção os herdeiros."
  syntax:
    content: protected ChangeMonitor ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  id: Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Versões de todos os recursos que são utilizados pela instância atual do <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> classe."
  remarks: "O método de Dispose invoca o <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>método de classes derivadas apenas uma vez, a primeira vez que é chamado.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> As chamadas subsequentes para o método de Dispose não tem qualquer efeito. Depois de ter sido chamado o método, o <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>propriedade está definida como `true`.</xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>       O <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>sobrecarga tem de ser chamada para eliminar um <xref:System.Runtime.Caching.ChangeMonitor>instância.</xref:System.Runtime.Caching.ChangeMonitor> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Seguem-se as regras para chamar o método de dispose:-antes de um item é inserido na cache, é responsabilidade da função invocadora eliminar um <xref:System.Runtime.Caching.ChangeMonitor>instância.</xref:System.Runtime.Caching.ChangeMonitor>      -Item de cache uma vez e o <xref:System.Runtime.Caching.ChangeMonitor>instâncias que estão associadas a ele são transmitidas para uma cache, o implementador de cache tem de se certificar que <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>denomina-se, mesmo se falha a inserção.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor>      -Depois de um item e associado <xref:System.Runtime.Caching.ChangeMonitor>instâncias são transmitidas para uma cache, o autor da chamada não deve eliminar a dependência porque quando o <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>método é denominado, a chamada é tratada como se a dependência foi alterada.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor> Como resultado, o <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>método automaticamente é invocado.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      -Estas regras tendo em consideração, o <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>método tem de ser chamado das seguintes formas:-os utilizadores tem de chamar a sobrecarga de método Dispose se decidirem não inserir a instância de derivada de monitor de alterações uma cache.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>          -A implementação de cache é responsável por chamar a sobrecarga de Dispose se a implementação tenta inserir a instância de monitor de alterações uma cache de objeto, mas a inserção falha. Quando a tentativa de inserção faz com que uma exceção, a implementação de cache tem de eliminar quaisquer dependências associadas.          -Se a entrada de cache for removida, a implementação de cache tem também a eliminar a dependência.       A implementação interna do <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>automaticamente chama o método a <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>método depois chama uma chamada de retorno que é registado através do <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>método.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      > [!NOTE] > Este dispose automática durante a acionadas eventos só ocorre se a inicialização do <xref:System.Runtime.Caching.ChangeMonitor>instância anteriormente foi concluída.</xref:System.Runtime.Caching.ChangeMonitor>       Quando o construtor de um monitor de alteração derivada chama o <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>método, se o estado do monitor alterar já tiver sido alterado (ou seja, o estado de que está a ser monitorizado já mudou o construtor não tiver sido ainda ativo), em seguida, <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>método automaticamente irá eliminar o monitor de alteração.</xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> </xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>      > [!NOTE] > Os utilizadores não deverão chamar o método de Dispose. No entanto, não é possível impedir que os utilizadores a chamada do método. Por conseguinte, caso contrário, o <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>método é invocado.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Nesse caso, a entrada de cache é notificada como se a dependência foi alterada.       Para impedir que as classes derivadas substituir Dispose método, o método não é uma implementação de interface explícita."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Inicialização não está concluída na classe derivada de monitor de alterações que chamou o método de Dispose base."
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Versões de todos os recursos geridos e e quaisquer referências para o <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> instância. Esta sobrecarga tem de ser implementada por classes derivadas de monitor de alterações."
  remarks: "Quando o valor de `disposing` valor é `true`, todos os recursos geridos e são eliminados depois e quaisquer referências a este objeto são lançadas para que a instância de monitor de alterações derivada possam ser recolhidos. É garantido que a base de <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>método irá invocar o método de Dispose implementado apenas uma vez.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>"
  syntax:
    content: protected abstract void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e e quaisquer referências a uma <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> instância; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos. Quando <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> é transmitida Dispose método é denominado por um <xref uid=&quot;langword_csharp_finalizer&quot; name=&quot;finalizer&quot; href=&quot;&quot;> </xref> thread e quaisquer referências externas geridas, é provável que já não é válido devido a já foram recolhidos."
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  id: HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: System.Runtime.Caching.ChangeMonitor.HasChanged
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém um valor que indica que o estado de que é monitorizado pelo <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> classe foi alterada."
  remarks: "Pode verificar o valor desta propriedade no derivada de um <xref:System.Runtime.Caching.ChangeMonitor>classe para ver se uma dependência foi alterado.</xref:System.Runtime.Caching.ChangeMonitor>       O valor é definido como `true` quando ocorre uma alteração de dependência (ou seja, quando o <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>método é denominado).</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Depois do <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>método é denominado por classe derivada, o valor da propriedade HasChanged será `true`, independentemente de se um <xref:System.Runtime.Caching.OnChangedCallback>instância foi notificada por uma chamada para o <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>método.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      > [!NOTE] > Os chamadores podem verificar a propriedade de HasChanged para ver se uma dependência foi alterado. No entanto, num ambiente com vários threads, um mais simples e mais abordagem sustentável é inserir dados de uma implementação de cache sem verificar a propriedade HasChanged. Implementações de cache devem verificar a propriedade HasChanged e terá não efetuar uma inserção ou definir operação se um ou mais dependências associadas já foram alterados."
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o estado de que é monitorizado pelo <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> instância foi alterada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ChangeMonitor.HasChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  id: InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: System.Runtime.Caching.ChangeMonitor.InitializationComplete()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Chamada do construtor de classes derivadas para indicar que inicialização estiver concluída."
  remarks: "Se uma dependência alterações antes da conclusão de uma classe derivada inicialização, o construtor de classe derivada tem de invocar o <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>método.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>       Quando o <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>invocar o método, o <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>propriedade é automaticamente definida para `true` pelo monitor de alteração.</xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Como resultado, quando o construtor do monitor alterar chama o método InitializationComplete, a classe base automaticamente ligará para o <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>método.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Se a inicialização estiver concluída, o <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>método disposes automaticamente a instância de monitor de alterações derivada.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>"
  syntax:
    content: protected void InitializationComplete ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  id: IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: System.Runtime.Caching.ChangeMonitor.IsDisposed
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém um valor que indica que a instância derivada de um <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> classe é eliminada."
  remarks: "A propriedade está definida como `true` após a base de <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>chamadas de método de <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>método de uma classe derivada eliminar a instância.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>"
  syntax:
    content: public bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a instância está a ser eliminada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  id: NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Chamado pelo implementadores de Cache para registar uma chamada de retorno e notificar um <xref href=&quot;System.Runtime.Caching.ObjectCache&quot;> </xref> instância através de <xref href=&quot;System.Runtime.Caching.OnChangedCallback&quot;> </xref> delegar quando uma dependência é alterado."
  remarks: "Os implementadores de cache utilizam este método para ligar-se até um monitor de alteração. Se associar uma ou mais monitores com o item de cache de alteração, transmita um <xref:System.Runtime.Caching.CacheItemPolicy>instância com uma propriedade de monitores de alteração preenchidos para o item de cache.</xref:System.Runtime.Caching.CacheItemPolicy> Um implementador de cache que suporta altera monitores é responsável por iterating através de <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>propriedade e registar o <xref:System.Runtime.Caching.OnChangedCallback>delegados com cada alterar monitor que encontra.</xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>       Porque o <xref:System.Runtime.Caching.OnChangedCallback>delegado inclui um parâmetro de estado opcional, uma implementação de monitor de alteração concreto pode transmitir informações de estado opcional.</xref:System.Runtime.Caching.OnChangedCallback> O implementador de cache determina se uma dependência explícita do tipo de estado que transmite um monitor de alteração personalizada como parte da chamada de retorno pode ser executada.      > [!NOTE] > A API de extensibilidade de base de cache não tem qualquer requisito para a dependência explícita do tipo de estado.       A implementação do método NotifyOnChanged determina automaticamente se o estado do monitor já foi alterado no momento NotifyOnChanged método é chamado. Se o <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>propriedade é `true`, em seguida, o método automaticamente chama o <xref:System.Runtime.Caching.OnChangedCallback>processador de eventos, que se encontrava registado, através de <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>método.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> Isto ocorre porque é possível que relativamente ao momento da que implementação de cache cria um monitor de alteração, para o tempo de uma implementação de cache obtém o monitor e wires próprio até, o estado monitorizado subjacente foi alterada. Se o estado já mudou, em seguida, o objeto que é transferido para o <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>método é `null`.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>       O método NotifyOnChanged pode ser invocado uma vez e irá gerar uma exceção no chamadas subsequentes."
  syntax:
    content: public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);
    parameters:
    - id: onChangedCallback
      type: System.Runtime.Caching.OnChangedCallback
      description: "Uma referência a um método que é invocada quando existe uma dependência foi alterada."
  overload: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O método de chamada de retorno já foi invocado."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>onChangedCallback</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  id: OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: System.Runtime.Caching.ChangeMonitor.OnChanged(Object)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Chamado por classes derivadas para aumentar o evento quando uma dependência é alterado."
  remarks: "Normalmente, o método de OnChanged é chamado quando ocorrem alterações de dependência. O método OnChanged também é invocado quando existe uma instância de monitor de alterações é eliminada mas a disposal ocorre apenas se a chamada de retorno já não ter sido invocada.       Se o método de OnChanged é chamado antes do <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>método é denominado, os dados de estado da chamada do método OnChanged são guardados, a implementação de cache.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Além disso, a chamada de retorno para a <xref:System.Runtime.Caching.OnChangedCallback>método é a invocar imediatamente quando o <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>método é invocado.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback>"
  syntax:
    content: protected void OnChanged (object state);
    parameters:
    - id: state
      type: System.Object
      description: "Os dados para o evento de alteração. Este valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ChangeMonitor.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  id: UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.ChangeMonitor.UniqueId
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém um valor que representa o <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> instância de classe."
  remarks: "O valor da propriedade UniqueId normalmente é composta por nomes combinados de dependência de dados de cadeia que exclusivamente identificadores os dados que está a ser monitorizados por um <xref:System.Runtime.Caching.ChangeMonitor>instância.</xref:System.Runtime.Caching.ChangeMonitor> O valor da propriedade UniqueId é uma cadeia. O valor da cadeia é utilizado para atribuir o ID exclusivo do <xref:System.Runtime.Caching.ChangeMonitor>instância.</xref:System.Runtime.Caching.ChangeMonitor>"
  syntax:
    content: public abstract string UniqueId { get; }
    return:
      type: System.String
      description: "O identificador de uma instância de monitor de alterações."
  overload: System.Runtime.Caching.ChangeMonitor.UniqueId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: System.Runtime.Caching.ChangeMonitor.ChangeMonitor()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: System.Runtime.Caching.ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: System.Runtime.Caching.ChangeMonitor.InitializationComplete()
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: System.Runtime.Caching.ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(OnChangedCallback)
- uid: System.Runtime.Caching.OnChangedCallback
  parent: System.Runtime.Caching
  isExternal: false
  name: OnChangedCallback
  nameWithType: OnChangedCallback
  fullName: System.Runtime.Caching.OnChangedCallback
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: System.Runtime.Caching.ChangeMonitor.OnChanged(Object)
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.ChangeMonitor.UniqueId
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Caching.ChangeMonitor.#ctor*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor
  nameWithType: ChangeMonitor.ChangeMonitor
- uid: System.Runtime.Caching.ChangeMonitor.Dispose*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose
  nameWithType: ChangeMonitor.Dispose
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete
  nameWithType: ChangeMonitor.InitializationComplete
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged
  nameWithType: ChangeMonitor.NotifyOnChanged
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged
  nameWithType: ChangeMonitor.OnChanged
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
