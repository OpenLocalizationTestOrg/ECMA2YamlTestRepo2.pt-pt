### YamlMime:ManagedReference
items:
- uid: System.Numerics.Quaternion
  id: Quaternion
  children:
  - System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)
  - System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)
  - System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)
  - System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)
  - System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)
  - System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  - System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)
  - System.Numerics.Quaternion.Equals(System.Object)
  - System.Numerics.Quaternion.GetHashCode
  - System.Numerics.Quaternion.Identity
  - System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)
  - System.Numerics.Quaternion.IsIdentity
  - System.Numerics.Quaternion.Length
  - System.Numerics.Quaternion.LengthSquared
  - System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)
  - System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)
  - System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)
  - System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)
  - System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)
  - System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)
  - System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)
  - System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)
  - System.Numerics.Quaternion.ToString
  - System.Numerics.Quaternion.W
  - System.Numerics.Quaternion.X
  - System.Numerics.Quaternion.Y
  - System.Numerics.Quaternion.Z
  langs:
  - csharp
  name: Quaternion
  nameWithType: Quaternion
  fullName: System.Numerics.Quaternion
  type: Struct
  summary: "Represents a vector that is used to encode three-dimensional physical rotations."
  remarks: "The Quaternion structure is used to efficiently rotate an object about the (x,y,z) vector by the angle theta, where:      ```   w = cos(theta/2)   ```"
  syntax:
    content: 'public struct Quaternion : IEquatable<System.Numerics.Quaternion>'
  inheritance:
  - System.ValueType
  implements:
  - System.IEquatable<System.Numerics.Quaternion>
  platform:
  - net462
- uid: System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)
  id: '#ctor(System.Numerics.Vector3,System.Single)'
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Quaternion(Vector3,Single)
  nameWithType: Quaternion.Quaternion(Vector3,Single)
  fullName: System.Numerics.Quaternion.Quaternion(Vector3,Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Creates a quaternion from the specified vector and rotation parts."
  syntax:
    content: public Quaternion (System.Numerics.Vector3 vectorPart, float scalarPart);
    parameters:
    - id: vectorPart
      type: System.Numerics.Vector3
      description: "The vector part of the quaternion."
    - id: scalarPart
      type: System.Single
      description: "The rotation part of the quaternion."
  overload: System.Numerics.Quaternion.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Quaternion(Single,Single,Single,Single)
  nameWithType: Quaternion.Quaternion(Single,Single,Single,Single)
  fullName: System.Numerics.Quaternion.Quaternion(Single,Single,Single,Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Constructs a quaternion from the specified components."
  syntax:
    content: public Quaternion (float x, float y, float z, float w);
    parameters:
    - id: x
      type: System.Single
      description: "The value to assign to the X component of the quaternion."
    - id: y
      type: System.Single
      description: "The value to assign to the Y component of the quaternion."
    - id: z
      type: System.Single
      description: "The value to assign to the Z component of the quaternion."
    - id: w
      type: System.Single
      description: "The value to assign to the W component of the quaternion."
  overload: System.Numerics.Quaternion.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: Add(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Add(Quaternion,Quaternion)
  nameWithType: Quaternion.Add(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Add(Quaternion,Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Adds each element in one quaternion with its corresponding element in a second quaternion."
  syntax:
    content: public static System.Numerics.Quaternion Add (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The first quaternion."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The second quaternion."
    return:
      type: System.Numerics.Quaternion
      description: "The quaternion that contains the summed values of <code>value1</code> and <code>value2</code>."
  overload: System.Numerics.Quaternion.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Concatenate(Quaternion,Quaternion)
  nameWithType: Quaternion.Concatenate(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Concatenate(Quaternion,Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Concatenates two quaternions."
  syntax:
    content: public static System.Numerics.Quaternion Concatenate (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The first quaternion rotation in the series."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The second quaternion rotation in the series."
    return:
      type: System.Numerics.Quaternion
      description: "A new quaternion representing the concatenation of the <code>value1</code> rotation followed by the <code>value2</code> rotation."
  overload: System.Numerics.Quaternion.Concatenate*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)
  id: Conjugate(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Conjugate(Quaternion)
  nameWithType: Quaternion.Conjugate(Quaternion)
  fullName: System.Numerics.Quaternion.Conjugate(Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the conjugate of a specified quaternion."
  syntax:
    content: public static System.Numerics.Quaternion Conjugate (System.Numerics.Quaternion value);
    parameters:
    - id: value
      type: System.Numerics.Quaternion
      description: "The quaternion."
    return:
      type: System.Numerics.Quaternion
      description: "A new quaternion that is the conjugate of <xref uid=&quot;langword_csharp_value&quot; name=&quot;value&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Quaternion.Conjugate*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)
  id: CreateFromAxisAngle(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: CreateFromAxisAngle(Vector3,Single)
  nameWithType: Quaternion.CreateFromAxisAngle(Vector3,Single)
  fullName: System.Numerics.Quaternion.CreateFromAxisAngle(Vector3,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Creates a quaternion from a vector and an angle to rotate about the vector."
  syntax:
    content: public static System.Numerics.Quaternion CreateFromAxisAngle (System.Numerics.Vector3 axis, float angle);
    parameters:
    - id: axis
      type: System.Numerics.Vector3
      description: "The vector to rotate around."
    - id: angle
      type: System.Single
      description: "The angle, in radians, to rotate around the vector."
    return:
      type: System.Numerics.Quaternion
      description: "The newly created quaternion."
  overload: System.Numerics.Quaternion.CreateFromAxisAngle*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)
  id: CreateFromRotationMatrix(System.Numerics.Matrix4x4)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: CreateFromRotationMatrix(Matrix4x4)
  nameWithType: Quaternion.CreateFromRotationMatrix(Matrix4x4)
  fullName: System.Numerics.Quaternion.CreateFromRotationMatrix(Matrix4x4)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Creates a quaternion from the specified rotation matrix."
  syntax:
    content: public static System.Numerics.Quaternion CreateFromRotationMatrix (System.Numerics.Matrix4x4 matrix);
    parameters:
    - id: matrix
      type: System.Numerics.Matrix4x4
      description: "The rotation matrix."
    return:
      type: System.Numerics.Quaternion
      description: "The newly created quaternion."
  overload: System.Numerics.Quaternion.CreateFromRotationMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  id: CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: CreateFromYawPitchRoll(Single,Single,Single)
  nameWithType: Quaternion.CreateFromYawPitchRoll(Single,Single,Single)
  fullName: System.Numerics.Quaternion.CreateFromYawPitchRoll(Single,Single,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Creates a new quaternion from the given yaw, pitch, and roll."
  syntax:
    content: public static System.Numerics.Quaternion CreateFromYawPitchRoll (float yaw, float pitch, float roll);
    parameters:
    - id: yaw
      type: System.Single
      description: "The yaw angle, in radians, around the Y axis."
    - id: pitch
      type: System.Single
      description: "The pitch angle, in radians, around the X axis."
    - id: roll
      type: System.Single
      description: "The roll angle, in radians, around the Z axis."
    return:
      type: System.Numerics.Quaternion
      description: "The resulting quaternion."
  overload: System.Numerics.Quaternion.CreateFromYawPitchRoll*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Divide(Quaternion,Quaternion)
  nameWithType: Quaternion.Divide(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Divide(Quaternion,Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Divides one quaternion by a second quaternion."
  syntax:
    content: public static System.Numerics.Quaternion Divide (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The dividend."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The divisor."
    return:
      type: System.Numerics.Quaternion
      description: "The quaternion that results from dividing <code>value1</code> by <code>value2</code>."
  overload: System.Numerics.Quaternion.Divide*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Dot(Quaternion,Quaternion)
  nameWithType: Quaternion.Dot(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Dot(Quaternion,Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Calculates the dot product of two quaternions."
  syntax:
    content: public static float Dot (System.Numerics.Quaternion quaternion1, System.Numerics.Quaternion quaternion2);
    parameters:
    - id: quaternion1
      type: System.Numerics.Quaternion
      description: "The first quaternion."
    - id: quaternion2
      type: System.Numerics.Quaternion
      description: "The second quaternion."
    return:
      type: System.Single
      description: "The dot product."
  overload: System.Numerics.Quaternion.Dot*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)
  id: Equals(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Equals(Quaternion)
  nameWithType: Quaternion.Equals(Quaternion)
  fullName: System.Numerics.Quaternion.Equals(Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns a value that indicates whether this instance and another quaternion are equal."
  remarks: "Two quaternions are equal if each of their corresponding components is equal."
  syntax:
    content: public bool Equals (System.Numerics.Quaternion other);
    parameters:
    - id: other
      type: System.Numerics.Quaternion
      description: "The other quaternion."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the two quaternions are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Quaternion.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Quaternion.Equals(Object)
  fullName: System.Numerics.Quaternion.Equals(Object)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns a value that indicates whether this instance and a specified object are equal."
  remarks: "The current instance and `obj` are equal if `obj` is a <xref:System.Numerics.Quaternion> object and the corresponding components of each matrix are equal."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to compare with the current instance."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current instance and <code>obj</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_&quot; name=&quot;&quot; href=&quot;&quot;></xref>. If <code>obj</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the method returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Quaternion.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Quaternion.GetHashCode()
  fullName: System.Numerics.Quaternion.GetHashCode()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the hash code for this instance."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "The hash code."
  overload: System.Numerics.Quaternion.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Identity
  id: Identity
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Identity
  nameWithType: Quaternion.Identity
  fullName: System.Numerics.Quaternion.Identity
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Gets a quaternion that represents no rotation."
  syntax:
    content: public static System.Numerics.Quaternion Identity { get; }
    return:
      type: System.Numerics.Quaternion
      description: "A quaternion whose values are `(0, 0, 0, 1)`."
  overload: System.Numerics.Quaternion.Identity*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)
  id: Inverse(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Inverse(Quaternion)
  nameWithType: Quaternion.Inverse(Quaternion)
  fullName: System.Numerics.Quaternion.Inverse(Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the inverse of a quaternion."
  syntax:
    content: public static System.Numerics.Quaternion Inverse (System.Numerics.Quaternion value);
    parameters:
    - id: value
      type: System.Numerics.Quaternion
      description: "The quaternion."
    return:
      type: System.Numerics.Quaternion
      description: "The inverted quaternion."
  overload: System.Numerics.Quaternion.Inverse*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.IsIdentity
  id: IsIdentity
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: IsIdentity
  nameWithType: Quaternion.IsIdentity
  fullName: System.Numerics.Quaternion.IsIdentity
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Gets a value that indicates whether the current instance is the identity quaternion."
  syntax:
    content: public bool IsIdentity { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current instance is the identity quaternion; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Quaternion.IsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Length
  id: Length
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Length()
  nameWithType: Quaternion.Length()
  fullName: System.Numerics.Quaternion.Length()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Calculates the length of the quaternion."
  syntax:
    content: public float Length ();
    parameters: []
    return:
      type: System.Single
      description: "The computed length of the quaternion."
  overload: System.Numerics.Quaternion.Length*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.LengthSquared
  id: LengthSquared
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: LengthSquared()
  nameWithType: Quaternion.LengthSquared()
  fullName: System.Numerics.Quaternion.LengthSquared()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Calculates the squared length of the quaternion."
  syntax:
    content: public float LengthSquared ();
    parameters: []
    return:
      type: System.Single
      description: "The length squared of the quaternion."
  overload: System.Numerics.Quaternion.LengthSquared*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)
  id: Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Lerp(Quaternion,Quaternion,Single)
  nameWithType: Quaternion.Lerp(Quaternion,Quaternion,Single)
  fullName: System.Numerics.Quaternion.Lerp(Quaternion,Quaternion,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Performs a linear interpolation between two quaternions based on a value that specifies the weighting of the second quaternion."
  syntax:
    content: public static System.Numerics.Quaternion Lerp (System.Numerics.Quaternion quaternion1, System.Numerics.Quaternion quaternion2, float amount);
    parameters:
    - id: quaternion1
      type: System.Numerics.Quaternion
      description: "The first quaternion."
    - id: quaternion2
      type: System.Numerics.Quaternion
      description: "The second quaternion."
    - id: amount
      type: System.Single
      description: "The relative weight of `quaternion2` in the interpolation."
    return:
      type: System.Numerics.Quaternion
      description: "The interpolated quaternion."
  overload: System.Numerics.Quaternion.Lerp*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Multiply(Quaternion,Quaternion)
  nameWithType: Quaternion.Multiply(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Multiply(Quaternion,Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the quaternion that results from multiplying two quaternions together."
  syntax:
    content: public static System.Numerics.Quaternion Multiply (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The first quaternion."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The second quaternion."
    return:
      type: System.Numerics.Quaternion
      description: "The product quaternion."
  overload: System.Numerics.Quaternion.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)
  id: Multiply(System.Numerics.Quaternion,System.Single)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Multiply(Quaternion,Single)
  nameWithType: Quaternion.Multiply(Quaternion,Single)
  fullName: System.Numerics.Quaternion.Multiply(Quaternion,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor."
  syntax:
    content: public static System.Numerics.Quaternion Multiply (System.Numerics.Quaternion value1, float value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The source quaternion."
    - id: value2
      type: System.Single
      description: "The scalar value."
    return:
      type: System.Numerics.Quaternion
      description: "The scaled quaternion."
  overload: System.Numerics.Quaternion.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)
  id: Negate(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Negate(Quaternion)
  nameWithType: Quaternion.Negate(Quaternion)
  fullName: System.Numerics.Quaternion.Negate(Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Reverses the sign of each component of the quaternion."
  syntax:
    content: public static System.Numerics.Quaternion Negate (System.Numerics.Quaternion value);
    parameters:
    - id: value
      type: System.Numerics.Quaternion
      description: "The quaternion to negate."
    return:
      type: System.Numerics.Quaternion
      description: "The negated quaternion."
  overload: System.Numerics.Quaternion.Negate*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)
  id: Normalize(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Normalize(Quaternion)
  nameWithType: Quaternion.Normalize(Quaternion)
  fullName: System.Numerics.Quaternion.Normalize(Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Divides each component of a specified <xref href=&quot;System.Numerics.Quaternion&quot;></xref> by its length."
  syntax:
    content: public static System.Numerics.Quaternion Normalize (System.Numerics.Quaternion value);
    parameters:
    - id: value
      type: System.Numerics.Quaternion
      description: "The quaternion to normalize."
    return:
      type: System.Numerics.Quaternion
      description: "The normalized quaternion."
  overload: System.Numerics.Quaternion.Normalize*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: op_Addition(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Addition(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Addition(Quaternion,Quaternion)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Adds each element in one quaternion with its corresponding element in a second quaternion."
  remarks: "The Addition method defines the operaton of the addition operator for <xref:System.Numerics.Quaternion> objects."
  syntax:
    content: public static System.Numerics.Quaternion op_Addition (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The first quaternion."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The second quaternion."
    return:
      type: System.Numerics.Quaternion
      description: "The quaternion that contains the summed values of <code>value1</code> and <code>value2</code>."
  overload: System.Numerics.Quaternion.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: op_Division(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Division(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Division(Quaternion,Quaternion)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Divides one quaternion by a second quaternion."
  remarks: "The Division method defines the division operation for <xref:System.Numerics.Quaternion> objects."
  syntax:
    content: public static System.Numerics.Quaternion op_Division (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The dividend."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The divisor."
    return:
      type: System.Numerics.Quaternion
      description: "The quaternion that results from dividing <code>value1</code> by <code>value2</code>."
  overload: System.Numerics.Quaternion.op_Division*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: op_Equality(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Equality(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Equality(Quaternion,Quaternion)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns a value that indicates whether two quaternions are equal."
  remarks: "Two quaternions are equal if each of their corresponding components is equal.       The Equality method defines the operation of the equality operator for <xref:System.Numerics.Quaternion> objects."
  syntax:
    content: public static bool op_Equality (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The first quaternion to compare."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The second quaternion to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the two quaternions are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Quaternion.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: op_Inequality(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Inequality(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Inequality(Quaternion,Quaternion)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns a value that indicates whether two quaternions are not equal."
  syntax:
    content: public static bool op_Inequality (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The first quaternion to compare."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The second quaternion to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>value1</code> and <code>value2</code> are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Quaternion.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: op_Multiply(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Multiply(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Multiply(Quaternion,Quaternion)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the quaternion that results from multiplying two quaternions together."
  remarks: "The Multiply method defines the operation of the multiplication operator for <xref:System.Numerics.Quaternion> objects."
  syntax:
    content: public static System.Numerics.Quaternion op_Multiply (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The first quaternion."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The second quaternion."
    return:
      type: System.Numerics.Quaternion
      description: "The product quaternion."
  overload: System.Numerics.Quaternion.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)
  id: op_Multiply(System.Numerics.Quaternion,System.Single)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: op_Multiply(Quaternion,Single)
  nameWithType: Quaternion.op_Multiply(Quaternion,Single)
  fullName: System.Numerics.Quaternion.op_Multiply(Quaternion,Single)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor."
  remarks: "The Multiply method defines the operation of the multiplication operator for <xref:System.Numerics.Quaternion> objects."
  syntax:
    content: public static System.Numerics.Quaternion op_Multiply (System.Numerics.Quaternion value1, float value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The source quaternion."
    - id: value2
      type: System.Single
      description: "The scalar value."
    return:
      type: System.Numerics.Quaternion
      description: "The scaled quaternion."
  overload: System.Numerics.Quaternion.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: op_Subtraction(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Subtraction(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Subtraction(Quaternion,Quaternion)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Subtracts each element in a second quaternion from its corresponding element in a first quaternion."
  remarks: "The Subtraction method defines the operation of the subtraction operator for <xref:System.Numerics.Quaternion> objects."
  syntax:
    content: public static System.Numerics.Quaternion op_Subtraction (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The first quaternion."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The second quaternion."
    return:
      type: System.Numerics.Quaternion
      description: "The quaternion containing the values that result from subtracting each element in <code>value2</code> from its corresponding element in <code>value1</code>."
  overload: System.Numerics.Quaternion.op_Subtraction*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)
  id: op_UnaryNegation(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: op_UnaryNegation(Quaternion)
  nameWithType: Quaternion.op_UnaryNegation(Quaternion)
  fullName: System.Numerics.Quaternion.op_UnaryNegation(Quaternion)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Reverses the sign of each component of the quaternion."
  remarks: "The UnaryNegation method defines the operation of the unary negation operator for <xref:System.Numerics.Quaternion> objects."
  syntax:
    content: public static System.Numerics.Quaternion op_UnaryNegation (System.Numerics.Quaternion value);
    parameters:
    - id: value
      type: System.Numerics.Quaternion
      description: "The quaternion to negate."
    return:
      type: System.Numerics.Quaternion
      description: "The negated quaternion."
  overload: System.Numerics.Quaternion.op_UnaryNegation*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)
  id: Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Slerp(Quaternion,Quaternion,Single)
  nameWithType: Quaternion.Slerp(Quaternion,Quaternion,Single)
  fullName: System.Numerics.Quaternion.Slerp(Quaternion,Quaternion,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Interpolates between two quaternions, using spherical linear interpolation."
  syntax:
    content: public static System.Numerics.Quaternion Slerp (System.Numerics.Quaternion quaternion1, System.Numerics.Quaternion quaternion2, float amount);
    parameters:
    - id: quaternion1
      type: System.Numerics.Quaternion
      description: "The first quaternion."
    - id: quaternion2
      type: System.Numerics.Quaternion
      description: "The second quaternion."
    - id: amount
      type: System.Single
      description: "The relative weight of the second quaternion in the interpolation."
    return:
      type: System.Numerics.Quaternion
      description: "The interpolated quaternion."
  overload: System.Numerics.Quaternion.Slerp*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)
  id: Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Subtract(Quaternion,Quaternion)
  nameWithType: Quaternion.Subtract(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Subtract(Quaternion,Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Subtracts each element in a second quaternion from its corresponding element in a first quaternion."
  syntax:
    content: public static System.Numerics.Quaternion Subtract (System.Numerics.Quaternion value1, System.Numerics.Quaternion value2);
    parameters:
    - id: value1
      type: System.Numerics.Quaternion
      description: "The first quaternion."
    - id: value2
      type: System.Numerics.Quaternion
      description: "The second quaternion."
    return:
      type: System.Numerics.Quaternion
      description: "The quaternion containing the values that result from subtracting each element in <code>value2</code> from its corresponding element in <code>value1</code>."
  overload: System.Numerics.Quaternion.Subtract*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.ToString
  id: ToString
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: ToString()
  nameWithType: Quaternion.ToString()
  fullName: System.Numerics.Quaternion.ToString()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "Returns a string that represents this quaternion."
  remarks: "The numeric values in the returned string are formatted by using the conventions of the current culture. For example, for the en-US culture, the returned string might appear as `{X:1.1 Y:2.2 Z:3.3 W:4.4}`."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "The string representation of this quaternion."
  overload: System.Numerics.Quaternion.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.W
  id: W
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: W
  nameWithType: Quaternion.W
  fullName: System.Numerics.Quaternion.W
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "The rotation component of the quaternion."
  syntax:
    content: public float W;
    return:
      type: System.Single
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.X
  id: X
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: X
  nameWithType: Quaternion.X
  fullName: System.Numerics.Quaternion.X
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "The X value of the vector component of the quaternion."
  syntax:
    content: public float X;
    return:
      type: System.Single
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Y
  id: Y
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Y
  nameWithType: Quaternion.Y
  fullName: System.Numerics.Quaternion.Y
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "The Y value of the vector component of the quaternion."
  syntax:
    content: public float Y;
    return:
      type: System.Single
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Quaternion.Z
  id: Z
  parent: System.Numerics.Quaternion
  langs:
  - csharp
  name: Z
  nameWithType: Quaternion.Z
  fullName: System.Numerics.Quaternion.Z
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "The Z value of the vector component of the quaternion."
  syntax:
    content: public float Z;
    return:
      type: System.Single
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Quaternion(Vector3,Single)
  nameWithType: Quaternion.Quaternion(Vector3,Single)
  fullName: System.Numerics.Quaternion.Quaternion(Vector3,Single)
- uid: System.Numerics.Vector3
  parent: System.Numerics
  isExternal: false
  name: Vector3
  nameWithType: Vector3
  fullName: System.Numerics.Vector3
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Quaternion(Single,Single,Single,Single)
  nameWithType: Quaternion.Quaternion(Single,Single,Single,Single)
  fullName: System.Numerics.Quaternion.Quaternion(Single,Single,Single,Single)
- uid: System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Add(Quaternion,Quaternion)
  nameWithType: Quaternion.Add(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Add(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion
  parent: System.Numerics
  isExternal: false
  name: Quaternion
  nameWithType: Quaternion
  fullName: System.Numerics.Quaternion
- uid: System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Concatenate(Quaternion,Quaternion)
  nameWithType: Quaternion.Concatenate(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Concatenate(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Conjugate(Quaternion)
  nameWithType: Quaternion.Conjugate(Quaternion)
  fullName: System.Numerics.Quaternion.Conjugate(Quaternion)
- uid: System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: CreateFromAxisAngle(Vector3,Single)
  nameWithType: Quaternion.CreateFromAxisAngle(Vector3,Single)
  fullName: System.Numerics.Quaternion.CreateFromAxisAngle(Vector3,Single)
- uid: System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: CreateFromRotationMatrix(Matrix4x4)
  nameWithType: Quaternion.CreateFromRotationMatrix(Matrix4x4)
  fullName: System.Numerics.Quaternion.CreateFromRotationMatrix(Matrix4x4)
- uid: System.Numerics.Matrix4x4
  parent: System.Numerics
  isExternal: false
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: System.Numerics.Matrix4x4
- uid: System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: CreateFromYawPitchRoll(Single,Single,Single)
  nameWithType: Quaternion.CreateFromYawPitchRoll(Single,Single,Single)
  fullName: System.Numerics.Quaternion.CreateFromYawPitchRoll(Single,Single,Single)
- uid: System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Divide(Quaternion,Quaternion)
  nameWithType: Quaternion.Divide(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Divide(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Dot(Quaternion,Quaternion)
  nameWithType: Quaternion.Dot(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Dot(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Equals(Quaternion)
  nameWithType: Quaternion.Equals(Quaternion)
  fullName: System.Numerics.Quaternion.Equals(Quaternion)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Numerics.Quaternion.Equals(System.Object)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Equals(Object)
  nameWithType: Quaternion.Equals(Object)
  fullName: System.Numerics.Quaternion.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Numerics.Quaternion.GetHashCode
  parent: System.Numerics.Quaternion
  isExternal: false
  name: GetHashCode()
  nameWithType: Quaternion.GetHashCode()
  fullName: System.Numerics.Quaternion.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Numerics.Quaternion.Identity
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Identity
  nameWithType: Quaternion.Identity
  fullName: System.Numerics.Quaternion.Identity
- uid: System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Inverse(Quaternion)
  nameWithType: Quaternion.Inverse(Quaternion)
  fullName: System.Numerics.Quaternion.Inverse(Quaternion)
- uid: System.Numerics.Quaternion.IsIdentity
  parent: System.Numerics.Quaternion
  isExternal: false
  name: IsIdentity
  nameWithType: Quaternion.IsIdentity
  fullName: System.Numerics.Quaternion.IsIdentity
- uid: System.Numerics.Quaternion.Length
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Length()
  nameWithType: Quaternion.Length()
  fullName: System.Numerics.Quaternion.Length()
- uid: System.Numerics.Quaternion.LengthSquared
  parent: System.Numerics.Quaternion
  isExternal: false
  name: LengthSquared()
  nameWithType: Quaternion.LengthSquared()
  fullName: System.Numerics.Quaternion.LengthSquared()
- uid: System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Lerp(Quaternion,Quaternion,Single)
  nameWithType: Quaternion.Lerp(Quaternion,Quaternion,Single)
  fullName: System.Numerics.Quaternion.Lerp(Quaternion,Quaternion,Single)
- uid: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Multiply(Quaternion,Quaternion)
  nameWithType: Quaternion.Multiply(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Multiply(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Multiply(Quaternion,Single)
  nameWithType: Quaternion.Multiply(Quaternion,Single)
  fullName: System.Numerics.Quaternion.Multiply(Quaternion,Single)
- uid: System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Negate(Quaternion)
  nameWithType: Quaternion.Negate(Quaternion)
  fullName: System.Numerics.Quaternion.Negate(Quaternion)
- uid: System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Normalize(Quaternion)
  nameWithType: Quaternion.Normalize(Quaternion)
  fullName: System.Numerics.Quaternion.Normalize(Quaternion)
- uid: System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Addition(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Addition(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Addition(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Division(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Division(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Division(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Equality(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Equality(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Equality(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Inequality(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Inequality(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Inequality(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Multiply(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Multiply(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Multiply(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Multiply(Quaternion,Single)
  nameWithType: Quaternion.op_Multiply(Quaternion,Single)
  fullName: System.Numerics.Quaternion.op_Multiply(Quaternion,Single)
- uid: System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Subtraction(Quaternion,Quaternion)
  nameWithType: Quaternion.op_Subtraction(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.op_Subtraction(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_UnaryNegation(Quaternion)
  nameWithType: Quaternion.op_UnaryNegation(Quaternion)
  fullName: System.Numerics.Quaternion.op_UnaryNegation(Quaternion)
- uid: System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Slerp(Quaternion,Quaternion,Single)
  nameWithType: Quaternion.Slerp(Quaternion,Quaternion,Single)
  fullName: System.Numerics.Quaternion.Slerp(Quaternion,Quaternion,Single)
- uid: System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Subtract(Quaternion,Quaternion)
  nameWithType: Quaternion.Subtract(Quaternion,Quaternion)
  fullName: System.Numerics.Quaternion.Subtract(Quaternion,Quaternion)
- uid: System.Numerics.Quaternion.ToString
  parent: System.Numerics.Quaternion
  isExternal: false
  name: ToString()
  nameWithType: Quaternion.ToString()
  fullName: System.Numerics.Quaternion.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Numerics.Quaternion.W
  parent: System.Numerics.Quaternion
  isExternal: false
  name: W
  nameWithType: Quaternion.W
  fullName: System.Numerics.Quaternion.W
- uid: System.Numerics.Quaternion.X
  parent: System.Numerics.Quaternion
  isExternal: false
  name: X
  nameWithType: Quaternion.X
  fullName: System.Numerics.Quaternion.X
- uid: System.Numerics.Quaternion.Y
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Y
  nameWithType: Quaternion.Y
  fullName: System.Numerics.Quaternion.Y
- uid: System.Numerics.Quaternion.Z
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Z
  nameWithType: Quaternion.Z
  fullName: System.Numerics.Quaternion.Z
- uid: System.Numerics.Quaternion.#ctor*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Quaternion
  nameWithType: Quaternion.Quaternion
- uid: System.Numerics.Quaternion.Add*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Add
  nameWithType: Quaternion.Add
- uid: System.Numerics.Quaternion.Concatenate*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Concatenate
  nameWithType: Quaternion.Concatenate
- uid: System.Numerics.Quaternion.Conjugate*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Conjugate
  nameWithType: Quaternion.Conjugate
- uid: System.Numerics.Quaternion.CreateFromAxisAngle*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: CreateFromAxisAngle
  nameWithType: Quaternion.CreateFromAxisAngle
- uid: System.Numerics.Quaternion.CreateFromRotationMatrix*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: CreateFromRotationMatrix
  nameWithType: Quaternion.CreateFromRotationMatrix
- uid: System.Numerics.Quaternion.CreateFromYawPitchRoll*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: CreateFromYawPitchRoll
  nameWithType: Quaternion.CreateFromYawPitchRoll
- uid: System.Numerics.Quaternion.Divide*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Divide
  nameWithType: Quaternion.Divide
- uid: System.Numerics.Quaternion.Dot*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Dot
  nameWithType: Quaternion.Dot
- uid: System.Numerics.Quaternion.Equals*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Equals
  nameWithType: Quaternion.Equals
- uid: System.Numerics.Quaternion.GetHashCode*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: GetHashCode
  nameWithType: Quaternion.GetHashCode
- uid: System.Numerics.Quaternion.Identity*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Identity
  nameWithType: Quaternion.Identity
- uid: System.Numerics.Quaternion.Inverse*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Inverse
  nameWithType: Quaternion.Inverse
- uid: System.Numerics.Quaternion.IsIdentity*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: IsIdentity
  nameWithType: Quaternion.IsIdentity
- uid: System.Numerics.Quaternion.Length*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Length
  nameWithType: Quaternion.Length
- uid: System.Numerics.Quaternion.LengthSquared*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: LengthSquared
  nameWithType: Quaternion.LengthSquared
- uid: System.Numerics.Quaternion.Lerp*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Lerp
  nameWithType: Quaternion.Lerp
- uid: System.Numerics.Quaternion.Multiply*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Multiply
  nameWithType: Quaternion.Multiply
- uid: System.Numerics.Quaternion.Negate*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Negate
  nameWithType: Quaternion.Negate
- uid: System.Numerics.Quaternion.Normalize*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Normalize
  nameWithType: Quaternion.Normalize
- uid: System.Numerics.Quaternion.op_Addition*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Addition
  nameWithType: Quaternion.op_Addition
- uid: System.Numerics.Quaternion.op_Division*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Division
  nameWithType: Quaternion.op_Division
- uid: System.Numerics.Quaternion.op_Equality*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Equality
  nameWithType: Quaternion.op_Equality
- uid: System.Numerics.Quaternion.op_Inequality*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Inequality
  nameWithType: Quaternion.op_Inequality
- uid: System.Numerics.Quaternion.op_Multiply*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Multiply
  nameWithType: Quaternion.op_Multiply
- uid: System.Numerics.Quaternion.op_Subtraction*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_Subtraction
  nameWithType: Quaternion.op_Subtraction
- uid: System.Numerics.Quaternion.op_UnaryNegation*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: op_UnaryNegation
  nameWithType: Quaternion.op_UnaryNegation
- uid: System.Numerics.Quaternion.Slerp*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Slerp
  nameWithType: Quaternion.Slerp
- uid: System.Numerics.Quaternion.Subtract*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: Subtract
  nameWithType: Quaternion.Subtract
- uid: System.Numerics.Quaternion.ToString*
  parent: System.Numerics.Quaternion
  isExternal: false
  name: ToString
  nameWithType: Quaternion.ToString
