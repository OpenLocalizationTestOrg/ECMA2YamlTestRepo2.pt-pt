### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Information
  id: Information
  children:
  - Microsoft.VisualBasic.Information.Erl
  - Microsoft.VisualBasic.Information.Err
  - Microsoft.VisualBasic.Information.IsArray(System.Object)
  - Microsoft.VisualBasic.Information.IsDate(System.Object)
  - Microsoft.VisualBasic.Information.IsDBNull(System.Object)
  - Microsoft.VisualBasic.Information.IsError(System.Object)
  - Microsoft.VisualBasic.Information.IsNothing(System.Object)
  - Microsoft.VisualBasic.Information.IsNumeric(System.Object)
  - Microsoft.VisualBasic.Information.IsReference(System.Object)
  - Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)
  - Microsoft.VisualBasic.Information.QBColor(System.Int32)
  - Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Information.SystemTypeName(System.String)
  - Microsoft.VisualBasic.Information.TypeName(System.Object)
  - Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)
  - Microsoft.VisualBasic.Information.VarType(System.Object)
  - Microsoft.VisualBasic.Information.VbTypeName(System.String)
  langs:
  - csharp
  name: Information
  nameWithType: Information
  fullName: Microsoft.VisualBasic.Information
  type: Class
  summary: "O <xref uid=&quot;langword_csharp_Information&quot; name=&quot;Information&quot; href=&quot;&quot;> </xref> módulo contém os procedimentos utilizados para devolver, testar ou verifique as informações."
  remarks: "Este módulo suporta as palavras-chave de linguagem do Visual Basic e membros de biblioteca de tempo de execução que fornecem informações de erro, validar os dados, determinam os limites de matriz e obter informações de cor e tipo de dados."
  example:
  - "The following example uses the `VbTypeName` function to return data type names for several variables.  \n  \n```  \nDim sysDateName As String = \"System.DateTime\"  \nDim sysShortName As String = \"Int16\"  \nDim sysBadName As String = \"Nonsense\"  \nDim testVbName As String  \ntestVbName = VbTypeName(sysDateName)   \n' Returns \"Date\".  \ntestVbName = VbTypeName(sysShortName)   \n' Returns \"Short\".  \ntestVbName = VbTypeName(sysBadName)   \n' Returns Nothing.  \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Information
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.Erl
  id: Erl
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: Erl()
  nameWithType: Information.Erl()
  fullName: Microsoft.VisualBasic.Information.Erl()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um número inteiro que indica o número de linha da última instrução executado. Só de leitura."
  remarks: "Se for Visual Basic encontra não números de linha, devolve 0."
  example:
  - "This example uses the `Erl` property to indicate the line number.  \n  \n [!code-vb[VbVbalrErrorHandling#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._209_1.vb)]"
  syntax:
    content: public static int Erl ();
    parameters: []
    return:
      type: System.Int32
      description: "Devolve um número inteiro que indica o número de linha da última instrução executado. Só de leitura."
  overload: Microsoft.VisualBasic.Information.Erl*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.Err
  id: Err
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: Err()
  nameWithType: Information.Err()
  fullName: Microsoft.VisualBasic.Information.Err()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Contém informações sobre os erros de tempo de execução."
  remarks: "As propriedades do `Err` objeto são definidas pelo gerador de dimensões de um erro — Visual Basic, um objeto ou o programador.       Ao tempo de execução ocorre um erro, as propriedades do `Err` estão preenchidos com as informações que identifica exclusivamente o erro de objeto e que pode utilizar para lidar com o erro. Para gerar um erro de tempo de execução no seu código, utilize o `Raise` método.       O `Err` propriedades do objeto são repostas zero ou cadeias de comprimento zero (&quot;&quot;) após um `Exit Sub`, `Exit Function`, `Exit Property`, ou `Resume Next` instrução dentro de uma rotina de tratamento de erros. Com qualquer outra forma do `Resume` instrução fora de uma rotina de tratamento de erros não irá repor a `Err` propriedades do objeto. Pode utilizar o `Clear` método explicitamente repor `Err`.       Utilize o `Raise` método em vez do `Error` instrução para gerar erros de tempo de execução de erros de sistema e classe de módulos. A decisão sobre como utilizar o `Raise` método no outro código depende richness das informações que pretende devolver.       O `Err` objeto é um objeto intrínseco com âmbito global. Por conseguinte, não terá de criar uma instância do mesmo no seu código."
  example:
  - "This example uses the properties of the `Err` object in constructing an error-message dialog box. Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.  \n  \n [!code-vb[VbVbalrErrorHandling#3](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._32_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.ErrObject Err ();
    parameters: []
    return:
      type: Microsoft.VisualBasic.ErrObject
      description: "Contém informações sobre os erros de tempo de execução."
  overload: Microsoft.VisualBasic.Information.Err*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsArray(System.Object)
  id: IsArray(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsArray(Object)
  nameWithType: Information.IsArray(Object)
  fullName: Microsoft.VisualBasic.Information.IsArray(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se a variável aponta para uma matriz."
  remarks: '`IsArray`Devolve `True` se a variável aponta para uma matriz; caso contrário, devolve `False`. `IsArray`é especialmente útil com objetos que podem conter matrizes.'
  example:
  - "This example uses the `IsArray` function to check if several variables refer to an array.  \n  \n [!code-vb[VbVbalrFunctions#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._76_1.vb)]"
  syntax:
    content: public static bool IsArray (object VarName);
    parameters:
    - id: VarName
      type: System.Object
      description: "Necessário. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>variável."
    return:
      type: System.Boolean
      description: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se a variável aponta para uma matriz."
  overload: Microsoft.VisualBasic.Information.IsArray*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsDate(System.Object)
  id: IsDate(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsDate(Object)
  nameWithType: Information.IsDate(Object)
  fullName: Microsoft.VisualBasic.Information.IsDate(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão representa um <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref> valor."
  remarks: "`IsDate`Devolve `True` se `Expression` tem o <xref:System.DateTime>dados escreva ou pode ser convertido para o mesmo; caso contrário, devolve `False`.</xref:System.DateTime>       O <xref:System.DateTime>tipo de dados contém um valor de data e um valor de tempo.</xref:System.DateTime> `IsDate`Devolve `True` se `Expression` representa uma data válida, uma hora válida, ou uma data ou hora válida."
  example:
  - "The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.  \n  \n [!code-vb[VbVbalrFunctions#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._9_1.vb)]  \n  \n In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call."
  syntax:
    content: public static bool IsDate (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Necessário. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>expressão."
    return:
      type: System.Boolean
      description: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão representa um <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref> valor."
  overload: Microsoft.VisualBasic.Information.IsDate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsDBNull(System.Object)
  id: IsDBNull(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsDBNull(Object)
  nameWithType: Information.IsDBNull(Object)
  fullName: Microsoft.VisualBasic.Information.IsDBNull(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão avaliada para a <xref href=&quot;System.DBNull&quot;> </xref> classe."
  remarks: "`IsDBNull`Devolve `True` se o tipo de dados de `Expression` é avaliada para a <xref:System.DBNull>Escreva; caso contrário, `IsDBNull` devolve `False`.</xref:System.DBNull>       O <xref:System.DBNull?displayProperty=fullName>valor indica que o `Object` representa os dados em falta ou não existe.</xref:System.DBNull?displayProperty=fullName> `DBNull`Não é igual à `Nothing`, que indica que uma variável não ainda foi inicializada. `DBNull`Também não é o mesmo como uma cadeia de comprimento zero (`&quot;&quot;`), que por vezes, é referido como uma cadeia nula."
  example:
  - "This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.  \n  \n [!code-vb[VbVbalrFunctions#36](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._101_1.vb)]"
  syntax:
    content: public static bool IsDBNull (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Necessário. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>expressão."
    return:
      type: System.Boolean
      description: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão avaliada para a <xref href=&quot;System.DBNull&quot;> </xref> classe."
  overload: Microsoft.VisualBasic.Information.IsDBNull*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsError(System.Object)
  id: IsError(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsError(Object)
  nameWithType: Information.IsError(Object)
  fullName: Microsoft.VisualBasic.Information.IsError(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão é um tipo de exceção."
  remarks: "`IsError`Devolve `True` se a expressão representa um `Object` variável que deriva a <xref:System.Exception>classe no <xref:System>espaço de nomes.</xref:System> </xref:System.Exception>       Uma exceção que deriva de <xref:System.Exception?displayProperty=fullName>pode ser detetado com a `Try...Catch...Finally` declarações.</xref:System.Exception?displayProperty=fullName>"
  example:
  - "The following example uses the `IsError` function to check if an expression represents a system exception.  \n  \n [!code-vb[VbVbalrFunctions#37](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._164_1.vb)]"
  syntax:
    content: public static bool IsError (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Necessário. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>expressão."
    return:
      type: System.Boolean
      description: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão é um tipo de exceção."
  overload: Microsoft.VisualBasic.Information.IsError*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsNothing(System.Object)
  id: IsNothing(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsNothing(Object)
  nameWithType: Information.IsNothing(Object)
  fullName: Microsoft.VisualBasic.Information.IsNothing(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão não tem qualquer objeto atribuído ao mesmo."
  remarks: "`IsNothing`Devolve `True` se a expressão representa uma variável de objeto que tenha atualmente não objeto atribuído ao mesmo; caso contrário, devolve `False`.       `IsNothing`destina-se para funcionam em tipos de referência. Um tipo de valor não pode conter um valor e é revertido para o valor predefinido se atribuir `Nothing` ao mesmo. Se fornecer um tipo de valor `Expression`, `IsNothing` sempre devolve `False`."
  example:
  - "The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.  \n  \n [!code-vb[VbVbalrFunctions#38](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._149_1.vb)]"
  syntax:
    content: public static bool IsNothing (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Necessário. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>expressão."
    return:
      type: System.Boolean
      description: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão não tem qualquer objeto atribuído ao mesmo."
  overload: Microsoft.VisualBasic.Information.IsNothing*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsNumeric(System.Object)
  id: IsNumeric(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsNumeric(Object)
  nameWithType: Information.IsNumeric(Object)
  fullName: Microsoft.VisualBasic.Information.IsNumeric(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão pode ser avaliada como um número."
  remarks: "`IsNumeric`returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`. Também devolve `True` se `Expression` é um `Char`, `String`, ou `Object` que podem ser convertidos com êxito para um número. `Expression`pode conter carateres não numéricos. `IsNumeric`Devolve `True` se `Expression` é uma cadeia que contém um número hexadecimal ou octal válido. `IsNumeric`também devolve `True` se `Expression` contém uma expressão numérica válida que comece com um + - caráter ou contém vírgulas.       `IsNumeric`Devolve `False` se `Expression` é do tipo de dados `Date`. Devolve `False` se `Expression` é um `Char`, `String`, ou `Object` que não é possível converter com êxito para um número."
  example:
  - "The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.  \n  \n [!code-vb[VbVbalrFunctions#39](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._137_1.vb)]"
  syntax:
    content: public static bool IsNumeric (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Necessário. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>expressão."
    return:
      type: System.Boolean
      description: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão pode ser avaliada como um número."
  overload: Microsoft.VisualBasic.Information.IsNumeric*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsReference(System.Object)
  id: IsReference(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsReference(Object)
  nameWithType: Information.IsReference(Object)
  fullName: Microsoft.VisualBasic.Information.IsReference(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão avaliada para um tipo de referência."
  remarks: "`IsReference`Devolve `True` se `Expression` representa um tipo de referência, tal como uma instância de classe, um `String` tipo ou uma matriz de qualquer tipo; caso contrário, devolve `False`.       Um tipo de referência contém um ponteiro para dados armazenados noutro local na memória. Um tipo de valor contém os seus próprios dados."
  example:
  - "This example uses the `IsReference` function to check if several variables refer to reference types.  \n  \n [!code-vb[VbVbalrFunctions#40](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._142_1.vb)]  \n  \n In the preceding example, the first three calls to `IsReference` return `True`. The last call returns `False`, because `Integer` is a value type, not a reference type."
  syntax:
    content: public static bool IsReference (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Necessário. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>expressão."
    return:
      type: System.Boolean
      description: "Devolve um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se uma expressão avaliada para um tipo de referência."
  overload: Microsoft.VisualBasic.Information.IsReference*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)
  id: LBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: LBound(Array,Int32)
  nameWithType: Information.LBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.LBound(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve o índice mais baixa disponível para a dimensão de uma matriz indicada."
  remarks: "Uma vez que os índices de matriz começam em 0, o índice mais baixa disponível para cada dimensão é sempre 0.       Para uma matriz com as seguintes dimensões, `LBound` devolve os valores na tabela seguinte: ```vb#   Dim a(100, 5, 4) As Byte   ``` | A chamada para LBound | Devolver valor |   |--------------------|------------------|   | `LBound(a, 1)`|0|   | `LBound(a, 2)`|0|   | `LBound(a, 3)`|0|"
  example:
  - "The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.  \n  \n [!code-vb[VbVbalrFunctions#41](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._241_1.vb)]"
  syntax:
    content: public static int LBound (Array Array, int Rank = 1);
    parameters:
    - id: Array
      type: System.Array
      description: "Necessário. Matriz de qualquer tipo de dados. A matriz no qual pretende localizar o índice mais baixa possível de uma dimensão."
    - id: Rank
      type: System.Int32
      description: "Opcional. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. A dimensão para o qual o índice mais baixa possível está a ser devolvido. Utilize 1 para a dimensão primeiro, 2 para o segundo e assim sucessivamente. Se `Rank` for omitido, é assumido 1."
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. O valor mais baixo pode conter o índice para a dimensão especificada. <xref uid=&quot;langword_csharp_LBound&quot; name=&quot;LBound&quot; href=&quot;&quot;></xref>devolve sempre 0 tão longas quanto <code> Array </code> foi inicializado, mesmo não tem elementos, por exemplo, se se tratar de uma cadeia de comprimento zero. If <code>Array</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_LBound&quot; name=&quot;LBound&quot; href=&quot;&quot;></xref> throws an <xref:System.ArgumentNullException>.</xref:System.ArgumentNullException>"
  overload: Microsoft.VisualBasic.Information.LBound*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Array</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.RankException
    commentId: T:System.RankException
    description: "<code>Rank</code>menor que 1, ou <code>Rank</code> é maior do que a classificação de <code>Array</code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.QBColor(System.Int32)
  id: QBColor(System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: QBColor(Int32)
  nameWithType: Information.QBColor(Int32)
  fullName: Microsoft.VisualBasic.Information.QBColor(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> de cores número representando o código de cor RGB correspondente ao especificado."
  remarks: "Começando com o byte menos significativo, o valor devolvido especifica os valores de vermelho, verdes e azuis utilizados para definir a cor adequada no sistema RGB utilizado pela linguagem Visual Basic.       O `Color` argument tem estas definições.      | Número | Cor | Número | Cor |   |------------|-----------|------------|-----------|   |&0; | Negra |&8; | Cinzento |   |&1; | Azul |&9; | Claro blue |   |&2; | Verde |&10; | Verde claro |   |&3; | CYAN |&11; | Leve cyan |   |&4; | Vermelho |&12; | Claro red |   |&5; | Magenta |&13; | Claro magenta |   |&6; | Amarelo |&14; | Claro amarelo |   |&7; | Em branco |&15; | Branco Bright |"
  example:
  - "This example uses the `QBColor` function to change to the color indicated by `colorInteger`. `QBColor` accepts integer values between 0 and 15.  \n  \n [!code-vb[VbVbalrCatRef#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._29_1.vb)]"
  syntax:
    content: public static int QBColor (int Color);
    parameters:
    - id: Color
      type: System.Int32
      description: "Necessário. Um número inteiro no intervalo 0-15."
    return:
      type: System.Int32
      description: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> de cores número representando o código de cor RGB correspondente ao especificado."
  overload: Microsoft.VisualBasic.Information.QBColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Color</code>está fora do intervalo de 0 a 15, inclusive."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)
  id: RGB(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: RGB(Int32,Int32,Int32)
  nameWithType: Information.RGB(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.Information.RGB(Int32,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que representa um valor de cor RGB de um conjunto de componentes de cor vermelho, verde e azul."
  remarks: "Métodos de aplicação e as propriedades que aceitam a especificação de uma cor esperam que a especificação de ser um número que representa um RGB cor valor. Um valor de cor RGB Especifica a intensidade relativa de vermelho, verde e azul para fazer com que uma cor específica que será apresentado.       Se o valor para qualquer argumento `RGB` é maior do que 255, 255 é utilizado.       A tabela seguinte lista algumas cores padrão e os valores de vermelho, verdes e azuis incluem.      | Cor | Valor vermelho | Verde valor | Valor de blue |   |-----------|---------------|-----------------|----------------|   | Negra |&0; |&0; |&0; |   | Azul |&0; |&0; |&255; |   | Verde |&0; |&255; |&0; |   | CYAN |&0; |&255; |&255; |   | Vermelho |&255; |&0; |&0; |   | Magenta |&255; |&0; |&255; |   | Amarelo |&255; |&255; |&0; |   | Em branco |&255; |&255; |&255; |"
  example:
  - "This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.  \n  \n [!code-vb[VbVbalrCatRef#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._89_1.vb)]"
  syntax:
    content: public static int RGB (int Red, int Green, int Blue);
    parameters:
    - id: Red
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>no intervalo 0-255, inclusive, que representa a intensidade do componente da cor vermelho."
    - id: Green
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>no intervalo 0-255, inclusive, que representa a intensidade do componente da cor verde."
    - id: Blue
      type: System.Int32
      description: "Necessário. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>no intervalo 0-255, inclusive, que representa a intensidade do componente da cor azul."
    return:
      type: System.Int32
      description: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que representa um valor de cor RGB de um conjunto de componentes de cor vermelho, verde e azul."
  overload: Microsoft.VisualBasic.Information.RGB*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Green</code>, <code>Blue</code>, ou <code>Red</code> está fora do intervalo de 0 a 255, inclusive."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.SystemTypeName(System.String)
  id: SystemTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: SystemTypeName(String)
  nameWithType: Information.SystemTypeName(String)
  fullName: Microsoft.VisualBasic.Information.SystemTypeName(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> valor contendo o nome de tipo de dados do sistema de uma variável."
  remarks: '`SystemTypeName`Devolve o nome completamente qualificado comuns language runtime (CLR) tipo correspondente para o nome do tipo de Visual Basic. Por exemplo, se `VbName` contém &quot;Data&quot; `SystemTypeName` devolve &quot;Datetime&quot;. Se `SystemTypeName` não reconhece o valor de `VbName`, devolve `Nothing` (não a cadeia de &quot;Nada&quot;).'
  example:
  - "The following example uses the `SystemTypeName` function to return data type names for several variables.  \n  \n [!code-vb[VbVbalrFunctions#49](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._174_1.vb)]"
  syntax:
    content: public static string SystemTypeName (string VbName);
    parameters:
    - id: VbName
      type: System.String
      description: "Necessário. A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> variável que contém um nome de tipo de Visual Basic."
    return:
      type: System.String
      description: "Devolve um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> valor contendo o nome de tipo de dados do sistema de uma variável."
  overload: Microsoft.VisualBasic.Information.SystemTypeName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.TypeName(System.Object)
  id: TypeName(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: TypeName(Object)
  nameWithType: Information.TypeName(Object)
  fullName: Microsoft.VisualBasic.Information.TypeName(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> valor contendo informações de tipo de dados sobre uma variável."
  remarks: "A tabela seguinte mostra o `String` os valores devolvidos por `TypeName` para outro conteúdo da `VarName`.      | `VarName` conteúdo | Devolvida uma cadeia |   |------------------------|---------------------|   | 16 bits `True` ou `False` tipo de valor | &quot; Booleano &quot;|   | o tipo do valor binário de 8 bits | &quot; Byte &quot;|   | o tipo de valor de caráter de 16 bits | &quot; Char &quot;|   | tipo de valor de 64 bits data e hora | &quot; Data &quot;|   | Tipo de dados em falta ou não existente com a indicação de referência | &quot; DBNull &quot;|   | o tipo de valor numérico o de 128 bits | &quot; Decimal &quot;|   | o tipo de valor numérico de vírgula flutuante de 64 bits | &quot; Duplo &quot;|   | o tipo de valor de número inteiro de 32 bits | &quot; Número inteiro &quot;|   | Referência de tipo de apontar para um objeto unspecialized | &quot; Objeto &quot;|   | Tipo de apontar para um objeto especializado criado a partir de classe de referência *objectclass*| &quot; *objectclass*&quot;|   | o tipo de valor de número inteiro de 64 bits | &quot; Muito &quot;|   | Tipo de referência com qualquer objeto atualmente atribuído | &quot; Nada &quot;|   | o tipo de valor de número inteiro com sinal de 8 bits | &quot; SByte &quot;|   | o tipo de valor de número inteiro de 16 bits | &quot; Curto &quot;|   | o tipo de valor numérico de vírgula flutuante de 32 bits | &quot; Único &quot;|   | Tipo de apontar para uma cadeia de carateres de 16 bits de referência | &quot; Cadeia &quot;|   | o tipo de valor de número inteiro sem sinal de 32 bits | &quot; UInteger &quot;|   | o tipo de valor de número inteiro sem sinal de 64 bits | &quot; ULong &quot;|   | o tipo de valor de número inteiro sem sinal de 16 bits | &quot; UShort &quot;|       Se `VarName` é uma matriz, a cadeia devolvida pode ser qualquer uma das cadeias na tabela anterior com parênteses vazios anexado. Por exemplo, se `VarName` aponta para uma matriz de números inteiros, `TypeName` devolve &quot;Integer()&quot;.       Quando `TypeName` devolve o nome de um tipo de referência, tais como uma classe, devolve apenas o nome próprio, não o nome qualificado. Por exemplo, se `VarName` aponta para um objecto da classe <xref:System.Drawing.Printing.PaperSource?displayProperty=fullName>, `TypeName` devolve &quot;PaperSource&quot;.</xref:System.Drawing.Printing.PaperSource?displayProperty=fullName> Tenha em atenção que se a variável é declarada como de um determinado tipo de classe, mas não tem um objeto atribuído ao mesmo, `TypeName` devolve &quot;Nada&quot;."
  example:
  - "The following example uses the `TypeName` function to return data type information about several variables.  \n  \n [!code-vb[VbVbalrFunctions#52](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._131_1.vb)]"
  syntax:
    content: public static string TypeName (object VarName);
    parameters:
    - id: VarName
      type: System.Object
      description: "Necessário. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>variável. Se <xref uid=&quot;langword_csharp_Option Strict&quot; name=&quot;Option Strict&quot; href=&quot;&quot;> </xref> é <xref uid=&quot;langword_csharp_Off&quot; name=&quot;Off&quot; href=&quot;&quot;> </xref>, pode passar de uma variável de qualquer tipo de dados, exceto uma estrutura."
    return:
      type: System.String
      description: "Devolve um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> valor contendo informações de tipo de dados sobre uma variável."
  overload: Microsoft.VisualBasic.Information.TypeName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)
  id: UBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: UBound(Array,Int32)
  nameWithType: Information.UBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.UBound(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve o índice mais elevada disponível para a dimensão de uma matriz indicada."
  remarks: "Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.  \n  \n For an array with the following dimensions, `UBound` returns the values in the following table:  \n  \n```vb#  \nDim a(100, 5, 4) As Byte  \n```  \n  \n|Call to UBound|Return value|  \n|--------------------|------------------|  \n|`UBound(a, 1)`|100|  \n|`UBound(a, 2)`|5|  \n|`UBound(a, 3)`|4|  \n  \n You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0. The following example calculates the total size of the array `a` in the preceding example:  \n  \n```vb#  \nDim total As Integer  \ntotal = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  \n```  \n  \n The value calculated for `total` is 3030, which is 101 * 6 \\* 5."
  example:
  - "The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.  \n  \n [!code-vb[VbVbalrFunctions#53](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._136_1.vb)]"
  syntax:
    content: public static int UBound (Array Array, int Rank = 1);
    parameters:
    - id: Array
      type: System.Array
      description: "Necessário. Matriz de qualquer tipo de dados. A matriz no qual pretende localizar o índice de possíveis mais elevado de uma dimensão."
    - id: Rank
      type: System.Int32
      description: "Opcional. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. A dimensão para o qual o índice mais elevado possível está a ser devolvido. Utilize 1 para a dimensão primeiro, 2 para o segundo e assim sucessivamente. Se `Rank` for omitido, é assumido 1."
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. O valor mais alto pode conter o índice para a dimensão especificada. Se <code> Array </code> tem apenas um elemento, <xref uid=&quot;langword_csharp_UBound&quot; name=&quot;UBound&quot; href=&quot;&quot;> </xref> devolve 0. Se <code> Array </code> não tem elementos, por exemplo, se se tratar de uma cadeia de comprimento de zero, <xref uid=&quot;langword_csharp_UBound&quot; name=&quot;UBound&quot; href=&quot;&quot;> </xref> devolve -1."
  overload: Microsoft.VisualBasic.Information.UBound*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Array</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.RankException
    commentId: T:System.RankException
    description: "<code>Rank</code>é menor que 1, ou <code>Rank</code> é maior do que a classificação de <code>Array</code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.VarType(System.Object)
  id: VarType(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: VarType(Object)
  nameWithType: Information.VarType(Object)
  fullName: Microsoft.VisualBasic.Information.VarType(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que contém a classificação de tipo de dados de uma variável."
  remarks: "O valor de número inteiro devolvido pelo `VarType` é um membro de <xref:Microsoft.VisualBasic.VariantType>.</xref:Microsoft.VisualBasic.VariantType>       A tabela seguinte mostra os valores devolvidos por `VarType` para casos especiais de `VarName`.      | Tipo de dados representado pelo `VarName`| Valor devolvido pelo `VarType`|   |----------------------------------------|---------------------------------|   | [Nothing](~/add/includes/ajax-current-ext-md.md)|`VariantType.Object`|   | <xref:System.DBNull>| `VariantType.Null`|   | Enumeração | Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)|   | Matriz | Bit a bit ou do tipo de elemento de matriz e `VariantType.Array`|   | Matriz de matrizes | Bit a bit ou de `VariantType.Object` e `VariantType.Array`|   | A estrutura (<xref:System.ValueType?displayProperty=fullName>) |`VariantType.UserDefinedType`|   | <xref:System.Exception>| `VariantType.Error`|   | Desconhecido | `VariantType.Object`|</xref:System.Exception></xref:System.ValueType?displayProperty=fullName></xref:System.DBNull>"
  example:
  - "The following example uses the `VarType` function to return data type classification information about several variables.  \n  \n [!code-vb[VbVbalrFunctions#55](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._179_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.VariantType VarType (object VarName);
    parameters:
    - id: VarName
      type: System.Object
      description: "Necessário. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>variável. Se <xref uid=&quot;langword_csharp_Option Strict&quot; name=&quot;Option Strict&quot; href=&quot;&quot;> </xref> é <xref uid=&quot;langword_csharp_Off&quot; name=&quot;Off&quot; href=&quot;&quot;> </xref>, pode passar de uma variável de qualquer tipo de dados, exceto uma estrutura."
    return:
      type: Microsoft.VisualBasic.VariantType
      description: "Devolve um <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> valor que contém a classificação de tipo de dados de uma variável."
  overload: Microsoft.VisualBasic.Information.VarType*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.VbTypeName(System.String)
  id: VbTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: VbTypeName(String)
  nameWithType: Information.VbTypeName(String)
  fullName: Microsoft.VisualBasic.Information.VbTypeName(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Devolve um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> valor contendo o nome de tipo de dados do Visual Basic de uma variável."
  remarks: "`VbTypeName`Devolve o nome do tipo de Visual Basic correspondente para o nome de tipo de tempo de execução de idioma comum. Por exemplo, se `UrtName` contém &quot;Int32&quot; ou &quot;System. Int32,&quot; `VbTypeName` devolve &quot;Número inteiro&quot;. Se `VbTypeName` não reconhece o valor de `UrtName`, devolve `Nothing` (não a cadeia de &quot;Nada&quot;).       O nome de tipo de `UrtName` podem ser obtidos a partir de várias origens, por exemplo da <xref:System.Reflection.MemberInfo.Name%2A>propriedade da <xref:System.Reflection.MemberInfo>matriz da <xref:System.Type>classe.</xref:System.Type> </xref:System.Reflection.MemberInfo> </xref:System.Reflection.MemberInfo.Name%2A>"
  example:
  - "The following example uses the `VbTypeName` function to return data type names for several variables.  \n  \n [!code-vb[VbVbalrFunctions#56](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._152_1.vb)]"
  syntax:
    content: public static string VbTypeName (string UrtName);
    parameters:
    - id: UrtName
      type: System.String
      description: "Necessário. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>variável que contém um nome de tipo utilizado pelo tempo de execução de idioma comum."
    return:
      type: System.String
      description: "Devolve um <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> valor contendo o nome de tipo de dados do Visual Basic de uma variável."
  overload: Microsoft.VisualBasic.Information.VbTypeName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.RankException
  isExternal: true
  name: System.RankException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.Information.Erl
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Erl()
  nameWithType: Information.Erl()
  fullName: Microsoft.VisualBasic.Information.Erl()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Information.Err
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Err()
  nameWithType: Information.Err()
  fullName: Microsoft.VisualBasic.Information.Err()
- uid: Microsoft.VisualBasic.ErrObject
  parent: Microsoft.VisualBasic
  isExternal: false
  name: ErrObject
  nameWithType: ErrObject
  fullName: Microsoft.VisualBasic.ErrObject
- uid: Microsoft.VisualBasic.Information.IsArray(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsArray(Object)
  nameWithType: Information.IsArray(Object)
  fullName: Microsoft.VisualBasic.Information.IsArray(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Information.IsDate(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDate(Object)
  nameWithType: Information.IsDate(Object)
  fullName: Microsoft.VisualBasic.Information.IsDate(Object)
- uid: Microsoft.VisualBasic.Information.IsDBNull(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDBNull(Object)
  nameWithType: Information.IsDBNull(Object)
  fullName: Microsoft.VisualBasic.Information.IsDBNull(Object)
- uid: Microsoft.VisualBasic.Information.IsError(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsError(Object)
  nameWithType: Information.IsError(Object)
  fullName: Microsoft.VisualBasic.Information.IsError(Object)
- uid: Microsoft.VisualBasic.Information.IsNothing(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNothing(Object)
  nameWithType: Information.IsNothing(Object)
  fullName: Microsoft.VisualBasic.Information.IsNothing(Object)
- uid: Microsoft.VisualBasic.Information.IsNumeric(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNumeric(Object)
  nameWithType: Information.IsNumeric(Object)
  fullName: Microsoft.VisualBasic.Information.IsNumeric(Object)
- uid: Microsoft.VisualBasic.Information.IsReference(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsReference(Object)
  nameWithType: Information.IsReference(Object)
  fullName: Microsoft.VisualBasic.Information.IsReference(Object)
- uid: Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: LBound(Array,Int32)
  nameWithType: Information.LBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.LBound(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.VisualBasic.Information.QBColor(System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: QBColor(Int32)
  nameWithType: Information.QBColor(Int32)
  fullName: Microsoft.VisualBasic.Information.QBColor(Int32)
- uid: Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: RGB(Int32,Int32,Int32)
  nameWithType: Information.RGB(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.Information.RGB(Int32,Int32,Int32)
- uid: Microsoft.VisualBasic.Information.SystemTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: SystemTypeName(String)
  nameWithType: Information.SystemTypeName(String)
  fullName: Microsoft.VisualBasic.Information.SystemTypeName(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Information.TypeName(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: TypeName(Object)
  nameWithType: Information.TypeName(Object)
  fullName: Microsoft.VisualBasic.Information.TypeName(Object)
- uid: Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: UBound(Array,Int32)
  nameWithType: Information.UBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.UBound(Array,Int32)
- uid: Microsoft.VisualBasic.Information.VarType(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VarType(Object)
  nameWithType: Information.VarType(Object)
  fullName: Microsoft.VisualBasic.Information.VarType(Object)
- uid: Microsoft.VisualBasic.VariantType
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VariantType
  nameWithType: VariantType
  fullName: Microsoft.VisualBasic.VariantType
- uid: Microsoft.VisualBasic.Information.VbTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VbTypeName(String)
  nameWithType: Information.VbTypeName(String)
  fullName: Microsoft.VisualBasic.Information.VbTypeName(String)
- uid: Microsoft.VisualBasic.Information.Erl*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Erl
  nameWithType: Information.Erl
- uid: Microsoft.VisualBasic.Information.Err*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Err
  nameWithType: Information.Err
- uid: Microsoft.VisualBasic.Information.IsArray*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsArray
  nameWithType: Information.IsArray
- uid: Microsoft.VisualBasic.Information.IsDate*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDate
  nameWithType: Information.IsDate
- uid: Microsoft.VisualBasic.Information.IsDBNull*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDBNull
  nameWithType: Information.IsDBNull
- uid: Microsoft.VisualBasic.Information.IsError*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsError
  nameWithType: Information.IsError
- uid: Microsoft.VisualBasic.Information.IsNothing*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNothing
  nameWithType: Information.IsNothing
- uid: Microsoft.VisualBasic.Information.IsNumeric*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNumeric
  nameWithType: Information.IsNumeric
- uid: Microsoft.VisualBasic.Information.IsReference*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsReference
  nameWithType: Information.IsReference
- uid: Microsoft.VisualBasic.Information.LBound*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: LBound
  nameWithType: Information.LBound
- uid: Microsoft.VisualBasic.Information.QBColor*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: QBColor
  nameWithType: Information.QBColor
- uid: Microsoft.VisualBasic.Information.RGB*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: RGB
  nameWithType: Information.RGB
- uid: Microsoft.VisualBasic.Information.SystemTypeName*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: SystemTypeName
  nameWithType: Information.SystemTypeName
- uid: Microsoft.VisualBasic.Information.TypeName*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: TypeName
  nameWithType: Information.TypeName
- uid: Microsoft.VisualBasic.Information.UBound*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: UBound
  nameWithType: Information.UBound
- uid: Microsoft.VisualBasic.Information.VarType*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VarType
  nameWithType: Information.VarType
- uid: Microsoft.VisualBasic.Information.VbTypeName*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VbTypeName
  nameWithType: Information.VbTypeName
