### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.CommandEventArgs
  id: CommandEventArgs
  children:
  - System.Web.UI.WebControls.CommandEventArgs.#ctor(System.Web.UI.WebControls.CommandEventArgs)
  - System.Web.UI.WebControls.CommandEventArgs.#ctor(System.String,System.Object)
  - System.Web.UI.WebControls.CommandEventArgs.CommandArgument
  - System.Web.UI.WebControls.CommandEventArgs.CommandName
  langs:
  - csharp
  name: CommandEventArgs
  nameWithType: CommandEventArgs
  fullName: System.Web.UI.WebControls.CommandEventArgs
  type: Class
  summary: "Provides data for the <xref uid=&quot;langword_csharp_Command&quot; name=&quot;Command&quot; href=&quot;&quot;></xref> event."
  remarks: "The `Command` event is raised when a <xref:System.Web.UI.WebControls.Button> or <xref:System.Web.UI.WebControls.ImageButton> control is clicked.       The CommandEventArgs object contains data about the `Command` event that can be accessed in the event handler. Using the properties available in the CommandEventArgs class, you can determine the name of the command to perform, such as `Sort`, in addition to an optional argument that supplements the command, such as `Ascending`.       For a list of initial property values for an instance of CommandEventArgs, see the <xref:System.Web.UI.WebControls.CommandEventArgs.%23ctor%2A> constructor.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following example demonstrates how to access the properties in CommandEventArgs to determine the command to perform. This example specifies the event handler declaratively, using the <xref:System.Web.UI.WebControls.Button.OnClick%2A> property of the <xref:System.Web.UI.WebControls.Button> control.  \n  \n [!code-vb[ButtonCommandNameArgument#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_199_1.aspx)]\n [!code-cs[ButtonCommandNameArgument#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_199_1.aspx)]  \n  \n The following code example demonstrates how to specify the event handler and programmatically add it to the event in the `Page_Load` method.  \n  \n [!code-cs[ButtonCommand#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_199_2.aspx)]\n [!code-vb[ButtonCommand#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_199_2.aspx)]"
  syntax:
    content: 'public class CommandEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.CommandEventArgs.#ctor(System.Web.UI.WebControls.CommandEventArgs)
  id: '#ctor(System.Web.UI.WebControls.CommandEventArgs)'
  parent: System.Web.UI.WebControls.CommandEventArgs
  langs:
  - csharp
  name: CommandEventArgs(CommandEventArgs)
  nameWithType: CommandEventArgs.CommandEventArgs(CommandEventArgs)
  fullName: System.Web.UI.WebControls.CommandEventArgs.CommandEventArgs(CommandEventArgs)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.CommandEventArgs&quot;></xref> class with another <xref href=&quot;System.Web.UI.WebControls.CommandEventArgs&quot;></xref> object."
  remarks: "Use this constructor to create and initialize a new instance of the <xref:System.Web.UI.WebControls.CommandEventArgs> class using the specified <xref:System.Web.UI.WebControls.CommandEventArgs> object.       When an instance of <xref:System.Web.UI.WebControls.CommandEventArgs> is created by a call to this constructor, the following properties are initialized to the specified values.      |Property|Initial Value|   |--------------|-------------------|   |CommandName|The `e.CommandName` parameter.|   |CommandArgument|The `e.CommandArgument` parameter.|"
  example:
  - "The following example demonstrates how to create and initialize a new instance of the <xref:System.Web.UI.WebControls.CommandEventArgs> class using the specified <xref:System.Web.UI.WebControls.CommandEventArgs> object.  \n  \n [!code-cs[Classic CommandEventArgs.CommandEventArgs Example#1](~/add/codesnippet/csharp/8cddd133-08a0-42ee-824a-_1.cs)]\n [!code-vb[Classic CommandEventArgs.CommandEventArgs Example#1](~/add/codesnippet/visualbasic/8cddd133-08a0-42ee-824a-_1.vb)]"
  syntax:
    content: public CommandEventArgs (System.Web.UI.WebControls.CommandEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.CommandEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.CommandEventArgs&quot;></xref> that contains the event data."
  overload: System.Web.UI.WebControls.CommandEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.CommandEventArgs.#ctor(System.String,System.Object)
  id: '#ctor(System.String,System.Object)'
  parent: System.Web.UI.WebControls.CommandEventArgs
  langs:
  - csharp
  name: CommandEventArgs(String,Object)
  nameWithType: CommandEventArgs.CommandEventArgs(String,Object)
  fullName: System.Web.UI.WebControls.CommandEventArgs.CommandEventArgs(String,Object)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.CommandEventArgs&quot;></xref> class with the specified command name and argument."
  remarks: "Use this constructor to create and initialize a new instance of the <xref:System.Web.UI.WebControls.CommandEventArgs> class using the specified command name and argument.       When an instance of <xref:System.Web.UI.WebControls.CommandEventArgs> is created by a call to this constructor, the following properties are initialized to the specified values.      |Property|Initial Value|   |--------------|-------------------|   |CommandName|The value of the `commandName` parameter.|   |CommandArgument|The value of the `argument` parameter.|"
  example:
  - "The following example demonstrates how to create and initialize a new instance of the <xref:System.Web.UI.WebControls.CommandEventArgs> class using the specified command name and argument.  \n  \n [!code-vb[Classic CommandEventArgs.CommandEventArgs1 Example#1](~/add/codesnippet/visualbasic/227f8d74-47ad-48c3-92e3-_1.vb)]\n [!code-cs[Classic CommandEventArgs.CommandEventArgs1 Example#1](~/add/codesnippet/csharp/227f8d74-47ad-48c3-92e3-_1.cs)]"
  syntax:
    content: public CommandEventArgs (string commandName, object argument);
    parameters:
    - id: commandName
      type: System.String
      description: "The name of the command."
    - id: argument
      type: System.Object
      description: "A &lt;xref:System.Object?displayProperty=fullName&gt; that contains the arguments for the command."
  overload: System.Web.UI.WebControls.CommandEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.CommandEventArgs.CommandArgument
  id: CommandArgument
  parent: System.Web.UI.WebControls.CommandEventArgs
  langs:
  - csharp
  name: CommandArgument
  nameWithType: CommandEventArgs.CommandArgument
  fullName: System.Web.UI.WebControls.CommandEventArgs.CommandArgument
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the argument for the command."
  remarks: "The CommandArgument can contain any string set by the programmer. The CommandArgument property complements the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A> property by allowing you to provide any additional information for the command. For example, you can set the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A> property to `Sort` and set the CommandArgument property to `Ascending` to specify a command to sort in ascending order."
  example:
  - "The following example demonstrates how to use the CommandArgument property to determine supplemental information for the command to perform.  \n  \n [!code-vb[ButtonCommandNameArgument#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1082_1.aspx)]\n [!code-cs[ButtonCommandNameArgument#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1082_1.aspx)]"
  syntax:
    content: public object CommandArgument { get; }
    return:
      type: System.Object
      description: "A &lt;xref:System.Object?displayProperty=fullName&gt; that contains the argument for the command."
  overload: System.Web.UI.WebControls.CommandEventArgs.CommandArgument*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.CommandEventArgs.CommandName
  id: CommandName
  parent: System.Web.UI.WebControls.CommandEventArgs
  langs:
  - csharp
  name: CommandName
  nameWithType: CommandEventArgs.CommandName
  fullName: System.Web.UI.WebControls.CommandEventArgs.CommandName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the name of the command."
  remarks: "Use the CommandName property to determine the command to perform. The CommandName property can contain any string set by the programmer. The programmer can then identify the command name in code and perform the appropriate tasks."
  example:
  - "The following example demonstrates how to use the CommandName property to programmatically determine the command to perform.  \n  \n [!code-vb[ButtonCommandNameArgument#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_858_1.aspx)]\n [!code-cs[ButtonCommandNameArgument#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_858_1.aspx)]"
  syntax:
    content: public string CommandName { get; }
    return:
      type: System.String
      description: "The name of the command to perform."
  overload: System.Web.UI.WebControls.CommandEventArgs.CommandName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Web.UI.WebControls.CommandEventArgs.#ctor(System.Web.UI.WebControls.CommandEventArgs)
  parent: System.Web.UI.WebControls.CommandEventArgs
  isExternal: false
  name: CommandEventArgs(CommandEventArgs)
  nameWithType: CommandEventArgs.CommandEventArgs(CommandEventArgs)
  fullName: System.Web.UI.WebControls.CommandEventArgs.CommandEventArgs(CommandEventArgs)
- uid: System.Web.UI.WebControls.CommandEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: CommandEventArgs
  nameWithType: CommandEventArgs
  fullName: System.Web.UI.WebControls.CommandEventArgs
- uid: System.Web.UI.WebControls.CommandEventArgs.#ctor(System.String,System.Object)
  parent: System.Web.UI.WebControls.CommandEventArgs
  isExternal: false
  name: CommandEventArgs(String,Object)
  nameWithType: CommandEventArgs.CommandEventArgs(String,Object)
  fullName: System.Web.UI.WebControls.CommandEventArgs.CommandEventArgs(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.CommandEventArgs.CommandArgument
  parent: System.Web.UI.WebControls.CommandEventArgs
  isExternal: false
  name: CommandArgument
  nameWithType: CommandEventArgs.CommandArgument
  fullName: System.Web.UI.WebControls.CommandEventArgs.CommandArgument
- uid: System.Web.UI.WebControls.CommandEventArgs.CommandName
  parent: System.Web.UI.WebControls.CommandEventArgs
  isExternal: false
  name: CommandName
  nameWithType: CommandEventArgs.CommandName
  fullName: System.Web.UI.WebControls.CommandEventArgs.CommandName
- uid: System.Web.UI.WebControls.CommandEventArgs.#ctor*
  parent: System.Web.UI.WebControls.CommandEventArgs
  isExternal: false
  name: CommandEventArgs
  nameWithType: CommandEventArgs.CommandEventArgs
- uid: System.Web.UI.WebControls.CommandEventArgs.CommandArgument*
  parent: System.Web.UI.WebControls.CommandEventArgs
  isExternal: false
  name: CommandArgument
  nameWithType: CommandEventArgs.CommandArgument
- uid: System.Web.UI.WebControls.CommandEventArgs.CommandName*
  parent: System.Web.UI.WebControls.CommandEventArgs
  isExternal: false
  name: CommandName
  nameWithType: CommandEventArgs.CommandName
