### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.XmlWriterTraceListener
  id: XmlWriterTraceListener
  children:
  - System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)
  - System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)
  - System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)
  - System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)
  - System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)
  - System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)
  - System.Diagnostics.XmlWriterTraceListener.Close
  - System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)
  - System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.XmlWriterTraceListener.Write(System.String)
  - System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: XmlWriterTraceListener
  nameWithType: XmlWriterTraceListener
  fullName: System.Diagnostics.XmlWriterTraceListener
  type: Class
  summary: "Directs tracing or debugging output as XML-encoded data to a <xref:System.IO.TextWriter> or to a <xref:System.IO.Stream>, such as a <xref href=&quot;System.IO.FileStream&quot;></xref>."
  remarks: "> [!NOTE]\n>  You must have unmanaged code permission to create an instance of the XmlWriterTraceListener class.  \n  \n The XmlWriterTraceListener class converts tracing and debugging information into an XML-encoded text stream. The description of the XML output is shown in the tables that follow. You can use the [Service Trace Viewer Tool (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129) to display the XML output.  \n  \n You can enable or disable an XmlWriterTraceListener through the application configuration file and then use the configured XmlWriterTraceListener in your application. Alternately, you can create an XmlWriterTraceListener in your code.  \n  \n To configure an XmlWriterTraceListener, edit the configuration file that corresponds to the name of your application. In this file, you can add or remove a listener, set the properties for a listener, or remove listeners. The configuration file should be formatted like the following example.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"false\" indentsize=\"4\">  \n      <listeners>  \n        <add name=\"xmlListener\"   \n          type=\"System.Diagnostics.XmlWriterTraceListener\"   \n          initializeData=\"xmlOutput.xml\"   \n          traceOutputOptions=\"ProcessId, DateTime\" />  \n        <remove name=\"Default\" />  \n      </listeners>  \n    </trace>  \n  </system.diagnostics>  \n</configuration>  \n```  \n  \n The XmlWriterTraceListener class inherits the <xref:System.Diagnostics.TraceListener.Filter%2A> property from the base class <xref:System.Diagnostics.TraceListener>.  The <xref:System.Diagnostics.TraceListener.Filter%2A> property allows an additional level of trace output filtering at the listener.  If there is a filter present, the `Trace` methods of the trace listener call the <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> method of the filter to determine whether to emit the trace.  \n  \n> [!NOTE]\n>  If an attempt is made to write to a file that is in use or unavailable, the file name is automatically prefixed by a GUID.  \n  \n> [!NOTE]\n>  Listener methods are intended to be called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes.  The listener methods are not intended to be called directly from application code. The XmlWriterTraceListener listener is primarily intended for use by the <xref:System.Diagnostics.TraceSource> class. The <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A> and <xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A> methods can be called by the <xref:System.Diagnostics.Trace> and <xref:System.Diagnostics.Debug> classes, and default values are provided for the XML elements that <xref:System.Diagnostics.Trace> and <xref:System.Diagnostics.Debug> do not supply values for.  \n  \n The following table describes the elements and attributes of the XML output.  \n  \n|Element|Attributes|Output|Notes|  \n|-------------|----------------|------------|-----------|  \n|`CallStack`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|Special characters such as > or < are replaced with escape sequences. See the escaped character translation table that follows.|  \n|`Computer`|None|Always present.|The value of the <xref:System.Environment.MachineName%2A> property.|  \n|`Correlation`|`ActivityID`|Always present|If not specified, the default is an empty GUID.|  \n||`RelatedActivityID`|Depends on the presence of the `relatedActivityId` parameter in the Trace method call.|The `relatedActivityId` parameter of the <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> method.|  \n|`DataItem`|None|Depends on the `data` parameter of the <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> method.|This element can contain an array of elements or one element, so the values are written as a set of `DataItem` nodes under the `TraceData` element.<br /><br /> The data output uses the `ToString` method of the passed-in data objects.|  \n|`EventID`|None|Always present.|Parameter input (`id`).|  \n|`Execution`|`ProcessName`|Always present.|From the <xref:System.Diagnostics.TraceEventCache>.|  \n||`ProcessID`|Always present.|From the <xref:System.Diagnostics.TraceEventCache>. On Windows 98 and Windows Me operating systems, if `ProcessID` is greater than 2,147,483,647 it is a positive representation of a negative number and should be converted to obtain the correct process identifier.|  \n||`ThreadID`|Always present.|From the <xref:System.Diagnostics.TraceEventCache>.|  \n|`Level`|None|Always present.|Parameter input (the numeric value of `eventType`). Parameter values greater than 255 are output as 255.|  \n|`LogicalOperationStack`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|There can be more than one logical operation, so the values are written as `LogicalOperation` nodes under the `LogicalOperationStack` element.|  \n|`Message`|None|Depends on the presence of a message in the Trace method call.|This element is a formatted message if formatting arguments are provided.|  \n|`Source`|`Name`|Always present.|Parameter input.|  \n|`SubType`|`Name`|Always present.|Parameter input.|  \n|`TimeCreated`|`SystemTime`|Always present.|If not present in the <xref:System.Diagnostics.TraceEventCache>, the default is the current time.|  \n|`TimeStamp`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|From the <xref:System.Diagnostics.TraceEventCache>.|  \n|`Type`|None|Always present.|Always the value 3.|  \n  \n The following table shows the characters that are escaped in the XML output. Escaping occurs in all the elements and attributes with the exception of the `DataItem` element, which is not escaped if the object passed to the `data` parameter of the <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> method is an <xref:System.Xml.XPath.XPathNavigator> object. If an <xref:System.Xml.XPath.XPathNavigator> is used for the data object, the <xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> method is called and the entire root node is traced as unescaped data.  \n  \n|Escaped character|Value|  \n|-----------------------|-----------|  \n|&|&amp;|  \n|\\<|&lt;|  \n|>|&gt;|  \n|\"|&quot;|  \n|\\|&apos;|  \n|0xD|&\\#xD;|  \n|0xA|&\\#xA;|"
  example:
  - "The following code example shows the use of the XmlWriterTraceListener class to write both escaped and non-escaped data to file logs.  \n  \n [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/add/codesnippet/visualbasic/t-system.diagnostics.xml_1.vb)]\n [!code-cs[System.Diagnostics.XmlWriterTraceListener#1](~/add/codesnippet/csharp/t-system.diagnostics.xml_1.cs)]"
  syntax:
    content: 'public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  - System.Diagnostics.TextWriterTraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)
  - System.Diagnostics.TextWriterTraceListener.Flush
  - System.Diagnostics.TextWriterTraceListener.Writer
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: XmlWriterTraceListener(Stream)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(Stream)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.XmlWriterTraceListener&quot;></xref> class, using the specified stream as the recipient of the debugging and tracing output."
  remarks: "The <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (&quot;&quot;)."
  syntax:
    content: public XmlWriterTraceListener (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream> that represents the stream the trace listener writes to."
  overload: System.Diagnostics.XmlWriterTraceListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)
  id: '#ctor(System.IO.TextWriter)'
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: XmlWriterTraceListener(TextWriter)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(TextWriter)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(TextWriter)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.XmlWriterTraceListener&quot;></xref> class using the specified writer as the recipient of the debugging and tracing output."
  remarks: "The <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (&quot;&quot;)."
  syntax:
    content: public XmlWriterTraceListener (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "A <xref:System.IO.TextWriter> that receives the output from the trace listener."
  overload: System.Diagnostics.XmlWriterTraceListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>writer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: XmlWriterTraceListener(String)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(String)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.XmlWriterTraceListener&quot;></xref> class, using the specified file as the recipient of the debugging and tracing output."
  remarks: "This constructor initializes a new instance of the <xref:System.IO.StreamWriter> class for the specified file on the specified path, using <xref:System.Text.Encoding.UTF8%2A> encoding. If the file exists, it is appended to. If the file does not exist, a new file is created.      > [!NOTE] >  To reduce the chance of an exception, any character that might invalidate the output is replaced with a &quot;?&quot; character.       The <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (&quot;&quot;)."
  syntax:
    content: public XmlWriterTraceListener (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "The name of the file to write to."
  overload: System.Diagnostics.XmlWriterTraceListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>filename</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)
  id: '#ctor(System.IO.Stream,System.String)'
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: XmlWriterTraceListener(Stream,String)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(Stream,String)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(Stream,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.XmlWriterTraceListener&quot;></xref> class with the specified name, using the specified stream as the recipient of the debugging and tracing output."
  remarks: "This constructor initializes the <xref:System.Diagnostics.TraceListener.Name%2A> property to the `name` parameter value or to an empty string (&quot;&quot;) if the `name` parameter is `null`. The name can be used as an index into the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection to programmatically change the properties for the listener. For example, the following code sets the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property for an instance of <xref:System.Diagnostics.XmlWriterTraceListener> whose <xref:System.Diagnostics.TraceListener.Name%2A> property is &quot;xmlListener&quot;.      ```   ((XmlWriterTraceListener)Trace.Listeners[&quot;xmlListener&quot;]).TraceOutputOptions =        TraceOptions.Timestamp   ```"
  syntax:
    content: public XmlWriterTraceListener (System.IO.Stream stream, string name);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream> that represents the stream the trace listener writes to."
    - id: name
      type: System.String
      description: "The name of the new instance."
  overload: System.Diagnostics.XmlWriterTraceListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)
  id: '#ctor(System.IO.TextWriter,System.String)'
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: XmlWriterTraceListener(TextWriter,String)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(TextWriter,String)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(TextWriter,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.XmlWriterTraceListener&quot;></xref> class with the specified name, using the specified writer as the recipient of the debugging and tracing output."
  remarks: "This constructor initializes the <xref:System.Diagnostics.TraceListener.Name%2A> property to the `name` parameter value or to an empty string (&quot;&quot;) if the `name` parameter is `null`. The name can be used as an index into the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection to programmatically change the properties for the listener. For example, the following code sets the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property for an instance of <xref:System.Diagnostics.XmlWriterTraceListener> whose <xref:System.Diagnostics.TraceListener.Name%2A> property is &quot;xmlListener&quot;.      ```   ((XmlWriterTraceListener)Trace.Listeners[&quot;xmlListener&quot;]).TraceOutputOptions =        TraceOptions.Timestamp.   ```"
  syntax:
    content: public XmlWriterTraceListener (System.IO.TextWriter writer, string name);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "A <xref:System.IO.TextWriter> that receives the output from the trace listener."
    - id: name
      type: System.String
      description: "The name of the new instance."
  overload: System.Diagnostics.XmlWriterTraceListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>writer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: XmlWriterTraceListener(String,String)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(String,String)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.XmlWriterTraceListener&quot;></xref> class with the specified name, using the specified file as the recipient of the debugging and tracing output."
  remarks: "This constructor initializes a new instance of the <xref:System.IO.StreamWriter> class for the specified file on the specified path, using <xref:System.Text.Encoding.UTF8%2A> encoding. If the file exists, it is appended to. If the file does not exist, a new file is created.      > [!NOTE] >  To reduce the chance of an exception, any character that might invalidate the output is replaced with a &quot;?&quot; character.       The <xref:System.Diagnostics.TraceListener.Name%2A> property is set to the `name` parameter value or to an empty string (&quot;&quot;) if the `name` parameter is `null`. The name can be used as an index into the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection to programmatically change the properties for the listener. For example, the following code sets the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property for an instance of <xref:System.Diagnostics.XmlWriterTraceListener> whose <xref:System.Diagnostics.TraceListener.Name%2A> property is &quot;xmlListener&quot;.      ```   ((XmlWriterTraceListener)Trace.Listeners[&quot;xmlListener&quot;]).TraceOutputOptions =       TraceOptions.Timestamp.   ```"
  syntax:
    content: public XmlWriterTraceListener (string filename, string name);
    parameters:
    - id: filename
      type: System.String
      description: "The name of the file to write to."
    - id: name
      type: System.String
      description: "The name of the new instance."
  overload: System.Diagnostics.XmlWriterTraceListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.Close
  id: Close
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: XmlWriterTraceListener.Close()
  fullName: System.Diagnostics.XmlWriterTraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Closes the <xref:System.Diagnostics.TextWriterTraceListener.Writer*> for this listener so that it no longer receives tracing or debugging output."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Diagnostics.XmlWriterTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: Fail(String,String)
  nameWithType: XmlWriterTraceListener.Fail(String,String)
  fullName: System.Diagnostics.XmlWriterTraceListener.Fail(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Writes trace information including an error message and a detailed error message to the file or stream."
  remarks: "The default behavior is to display the message and detailed message in a message box when the application is running in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. By default, the collection contains an instance of <xref:System.Diagnostics.DefaultTraceListener>. You can customize this behavior by adding or removing a <xref:System.Diagnostics.TraceListener> from the collection."
  syntax:
    content: public override void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: "The error message to write."
    - id: detailMessage
      type: System.String
      description: "The detailed error message to append to the error message."
  overload: System.Diagnostics.XmlWriterTraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: XmlWriterTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.XmlWriterTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Writes trace information, a data object, and event information to the file or stream."
  remarks: "The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before writing, so a negative `id` value is written as a large positive integer. The `data` parameter is written as a `DataItem` node in the `TraceData` element. The `ToString` method of the data object is used to convert the object to a string.      > [!IMPORTANT] >  This method is not intended to be called directly by application code.  It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;></xref> that contains the current process ID, thread ID, and stack trace information."
    - id: source
      type: System.String
      description: "The source name."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "One of the <xref href=&quot;System.Diagnostics.TraceEventType&quot;></xref> values."
    - id: id
      type: System.Int32
      description: "A numeric identifier for the event."
    - id: data
      type: System.Object
      description: "A data object to emit."
  overload: System.Diagnostics.XmlWriterTraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: XmlWriterTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.XmlWriterTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Writes trace information, data objects, and event information to the file or stream."
  remarks: "The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before writing, so a negative `id` value is written as a large positive integer. The objects in the `data` parameter array are written as `DataItem` nodes in the `TraceData` element. The `ToString` method of each data object is used to convert the object to a string.      > [!IMPORTANT] >  This method is not intended to be called directly by application code.  It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;></xref> that contains the current process ID, thread ID, and stack trace information."
    - id: source
      type: System.String
      description: "The source name."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "One of the <xref href=&quot;System.Diagnostics.TraceEventType&quot;></xref> values."
    - id: id
      type: System.Int32
      description: "A numeric identifier for the event."
    - id: data
      type: System.Object[]
      description: "An array of data objects to emit."
  overload: System.Diagnostics.XmlWriterTraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: XmlWriterTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.XmlWriterTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Writes trace information, a message, and event information to the file or stream."
  remarks: "The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before writing, so a negative `id` value is written as a large positive integer. The `message` parameter is written as the `Message` element.      > [!IMPORTANT] >  This method is not intended to be called directly by application code.  It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;></xref> that contains the current process ID, thread ID, and stack trace information."
    - id: source
      type: System.String
      description: "The source name."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "One of the <xref href=&quot;System.Diagnostics.TraceEventType&quot;></xref> values."
    - id: id
      type: System.Int32
      description: "A numeric identifier for the event."
    - id: message
      type: System.String
      description: "The message to write."
  overload: System.Diagnostics.XmlWriterTraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: XmlWriterTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.XmlWriterTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Writes trace information, a formatted message, and event information to the file or stream."
  remarks: "The `eventCache`, `source`, `eventType`, and `id` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before writing, so a negative `id` value is written as a large positive integer. The [String.Format(String, Object\\[\\])](assetId:///M:System.String.Format(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False) method is called, passing in the `format` string and `args` array as parameters, to format the `args` object array as the `Message` element.  \n  \n> [!IMPORTANT]\n>  This method is not intended to be called directly by application code.  It is called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes to write trace data."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;></xref> that contains the current process ID, thread ID, and stack trace information."
    - id: source
      type: System.String
      description: "The source name."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "One of the <xref href=&quot;System.Diagnostics.TraceEventType&quot;></xref> values."
    - id: id
      type: System.Int32
      description: "A numeric identifier for the event."
    - id: format
      type: System.String
      description: "A format string that contains zero or more format items that correspond to objects in the `args` array."
    - id: args
      type: System.Object[]
      description: "An object array containing zero or more objects to format."
  overload: System.Diagnostics.XmlWriterTraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  id: TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: XmlWriterTraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.XmlWriterTraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Writes trace information including the identity of a related activity, a message, and event information to the file or stream."
  remarks: "The TraceTransfer method is used for the correlation of related traces. The `eventCache`, `source`, `id`, and `relatedActivityId` parameters are used in the header and footer of the trace. The `id` parameter is converted to an unsigned integer before writing, so a negative `id` value is written as a large positive integer. The `message` parameter is written as the `Message` element. The <xref:System.Guid.ToString%28System.String%29?displayProperty=fullName> method is called to convert the `relatedActivityId`value to a &quot;B&quot; formatted string, which appears in the header. The `SubTypeName` element in the footer identifies the trace event type as a <xref:System.Diagnostics.TraceEventType>.      > [!IMPORTANT] >  The TraceTransfer method is not intended to be called by application code.  It is intended to be called by a <xref:System.Diagnostics.TraceSource> object to emit the trace information for its <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> method."
  syntax:
    content: public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;></xref> that contains the current process ID, thread ID, and stack trace information."
    - id: source
      type: System.String
      description: "The source name."
    - id: id
      type: System.Int32
      description: "A numeric identifier for the event."
    - id: message
      type: System.String
      description: "A trace message to write."
    - id: relatedActivityId
      type: System.Guid
      description: "A <xref:System.Guid> structure that identifies a related activity."
  overload: System.Diagnostics.XmlWriterTraceListener.TraceTransfer*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: XmlWriterTraceListener.Write(String)
  fullName: System.Diagnostics.XmlWriterTraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Writes a verbatim message without any additional context information to the file or stream."
  remarks: "Use the <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> method to include context information in the log output."
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "The message to write."
  overload: System.Diagnostics.XmlWriterTraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: XmlWriterTraceListener.WriteLine(String)
  fullName: System.Diagnostics.XmlWriterTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Writes a verbatim message without any additional context information followed by the current line terminator to the file or stream."
  remarks: "Use the <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> method to include context information in the log output."
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "The message to write."
  overload: System.Diagnostics.XmlWriterTraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.TextWriterTraceListener
  isExternal: false
  name: System.Diagnostics.TextWriterTraceListener
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: XmlWriterTraceListener(Stream)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(Stream)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: XmlWriterTraceListener(TextWriter)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(TextWriter)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: XmlWriterTraceListener(String)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(String)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: XmlWriterTraceListener(Stream,String)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(Stream,String)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(Stream,String)
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: XmlWriterTraceListener(TextWriter,String)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(TextWriter,String)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(TextWriter,String)
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: XmlWriterTraceListener(String,String)
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener(String,String)
  fullName: System.Diagnostics.XmlWriterTraceListener.XmlWriterTraceListener(String,String)
- uid: System.Diagnostics.XmlWriterTraceListener.Close
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: Close()
  nameWithType: XmlWriterTraceListener.Close()
  fullName: System.Diagnostics.XmlWriterTraceListener.Close()
- uid: System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: Fail(String,String)
  nameWithType: XmlWriterTraceListener.Fail(String,String)
  fullName: System.Diagnostics.XmlWriterTraceListener.Fail(String,String)
- uid: System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: XmlWriterTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.XmlWriterTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: XmlWriterTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.XmlWriterTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: XmlWriterTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.XmlWriterTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: XmlWriterTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.XmlWriterTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: XmlWriterTraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.XmlWriterTraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Diagnostics.XmlWriterTraceListener.Write(System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: XmlWriterTraceListener.Write(String)
  fullName: System.Diagnostics.XmlWriterTraceListener.Write(String)
- uid: System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: XmlWriterTraceListener.WriteLine(String)
  fullName: System.Diagnostics.XmlWriterTraceListener.WriteLine(String)
- uid: System.Diagnostics.XmlWriterTraceListener.#ctor*
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: XmlWriterTraceListener
  nameWithType: XmlWriterTraceListener.XmlWriterTraceListener
- uid: System.Diagnostics.XmlWriterTraceListener.Close*
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: Close
  nameWithType: XmlWriterTraceListener.Close
- uid: System.Diagnostics.XmlWriterTraceListener.Fail*
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: Fail
  nameWithType: XmlWriterTraceListener.Fail
- uid: System.Diagnostics.XmlWriterTraceListener.TraceData*
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: TraceData
  nameWithType: XmlWriterTraceListener.TraceData
- uid: System.Diagnostics.XmlWriterTraceListener.TraceEvent*
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: XmlWriterTraceListener.TraceEvent
- uid: System.Diagnostics.XmlWriterTraceListener.TraceTransfer*
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: TraceTransfer
  nameWithType: XmlWriterTraceListener.TraceTransfer
- uid: System.Diagnostics.XmlWriterTraceListener.Write*
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: Write
  nameWithType: XmlWriterTraceListener.Write
- uid: System.Diagnostics.XmlWriterTraceListener.WriteLine*
  parent: System.Diagnostics.XmlWriterTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: XmlWriterTraceListener.WriteLine
