### YamlMime:ManagedReference
items:
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  id: CompensatableTransactionScopeActivity
  children:
  - System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor
  - System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor(System.String)
  - System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  - System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#ICompensatableActivity#Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.TransactionOptions
  langs:
  - csharp
  name: CompensatableTransactionScopeActivity
  nameWithType: CompensatableTransactionScopeActivity
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  type: Class
  summary: "Defines a compensatable version of the <xref href=&quot;System.Workflow.ComponentModel.TransactionScopeActivity&quot;></xref> activity. This class cannot be inherited."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]       CompensatableTransactionScopeActivity implements the <xref:System.Workflow.ComponentModel.ICompensatableActivity> interface."
  syntax:
    content: >-
      [System.ComponentModel.Designer(typeof(System.Workflow.ComponentModel.Design.CompensatableTransactionScopeActivityDesigner), typeof(System.ComponentModel.Design.IDesigner))]

      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.ComponentModel.Design.ActivityToolboxItem))]

      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.ComponentModel.CompensatableTransactionScopeActivity), "Resources.Sequence.png")]

      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      [System.Workflow.ComponentModel.PersistOnClose]

      public sealed class CompensatableTransactionScopeActivity : System.Workflow.ComponentModel.CompositeActivity, System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>, System.Workflow.ComponentModel.ICompensatableActivity
  inheritance:
  - System.Object
  - System.Workflow.ComponentModel.DependencyObject
  - System.Workflow.ComponentModel.Activity
  - System.Workflow.ComponentModel.CompositeActivity
  implements:
  - System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>
  - System.Workflow.ComponentModel.ICompensatableActivity
  inheritedMembers:
  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty
  - System.Workflow.ComponentModel.Activity.Canceling
  - System.Workflow.ComponentModel.Activity.CancelingEvent
  - System.Workflow.ComponentModel.Activity.Clone
  - System.Workflow.ComponentModel.Activity.Closed
  - System.Workflow.ComponentModel.Activity.ClosedEvent
  - System.Workflow.ComponentModel.Activity.Compensating
  - System.Workflow.ComponentModel.Activity.CompensatingEvent
  - System.Workflow.ComponentModel.Activity.Description
  - System.Workflow.ComponentModel.Activity.Enabled
  - System.Workflow.ComponentModel.Activity.Executing
  - System.Workflow.ComponentModel.Activity.ExecutingEvent
  - System.Workflow.ComponentModel.Activity.ExecutionResult
  - System.Workflow.ComponentModel.Activity.ExecutionStatus
  - System.Workflow.ComponentModel.Activity.Faulting
  - System.Workflow.ComponentModel.Activity.FaultingEvent
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)
  - System.Workflow.ComponentModel.Activity.IsDynamicActivity
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.Name
  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Parent
  - System.Workflow.ComponentModel.Activity.QualifiedName
  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)
  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)
  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.StatusChanged
  - System.Workflow.ComponentModel.Activity.StatusChangedEvent
  - System.Workflow.ComponentModel.Activity.ToString
  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)
  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)
  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId
  - System.Workflow.ComponentModel.CompositeActivity.Activities
  - System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities
  - System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)
  - System.Workflow.ComponentModel.CompositeActivity.EnabledActivities
  - System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  - System.Workflow.ComponentModel.CompositeActivity.Initialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  - System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  - System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.DesignMode
  - System.Workflow.ComponentModel.DependencyObject.Dispose
  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)
  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties
  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)
  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject
  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)
  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.Site
  - System.Workflow.ComponentModel.DependencyObject.UserData
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor
  id: '#ctor'
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  langs:
  - csharp
  name: CompensatableTransactionScopeActivity()
  nameWithType: CompensatableTransactionScopeActivity.CompensatableTransactionScopeActivity()
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.CompensatableTransactionScopeActivity()
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.ComponentModel.CompensatableTransactionScopeActivity&quot;></xref> class."
  syntax:
    content: public CompensatableTransactionScopeActivity ();
    parameters: []
  overload: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  langs:
  - csharp
  name: CompensatableTransactionScopeActivity(String)
  nameWithType: CompensatableTransactionScopeActivity.CompensatableTransactionScopeActivity(String)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.CompensatableTransactionScopeActivity(String)
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.Workflow.ComponentModel.CompensatableTransactionScopeActivity&quot;></xref> class using the name of the activity."
  remarks: ''
  example:
  - "The following example demonstrates creating a <xref:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity> object.  This example is from the Compensation SDK sample.  For more information, see [Compensation Sample](http://msdn.microsoft.com/en-us/c847a694-9978-46af-aa80-5bd1833f813b).  \n  \n [!code-cs[WF_Samples#148](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#148)]\n [!code-vb[WF_Samples#148](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#148)]"
  syntax:
    content: public CompensatableTransactionScopeActivity (string name);
    parameters:
    - id: name
      type: System.String
      description: "The user-defined name of the activity."
  overload: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  langs:
  - csharp
  name: Cancel(ActivityExecutionContext)
  nameWithType: CompensatableTransactionScopeActivity.Cancel(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Cancel(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "To be added."
  overload: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  langs:
  - csharp
  name: Execute(ActivityExecutionContext)
  nameWithType: CompensatableTransactionScopeActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Execute(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "To be added."
  overload: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  id: OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  langs:
  - csharp
  name: OnActivityChangeRemove(ActivityExecutionContext,Activity)
  nameWithType: CompensatableTransactionScopeActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: protected override void OnActivityChangeRemove (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, System.Workflow.ComponentModel.Activity removedActivity);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
    - id: removedActivity
      type: System.Workflow.ComponentModel.Activity
      description: "To be added."
  overload: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnActivityChangeRemove*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  langs:
  - csharp
  name: OnWorkflowChangesCompleted(ActivityExecutionContext)
  nameWithType: CompensatableTransactionScopeActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: protected override void OnWorkflowChangesCompleted (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "To be added."
  overload: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnWorkflowChangesCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  id: System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  isEii: true
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  nameWithType: CompensatableTransactionScopeActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent (object sender, System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "To be added."
    - id: e
      type: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs
      description: "To be added."
  overload: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#ICompensatableActivity#Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: System#Workflow#ComponentModel#ICompensatableActivity#Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)
  isEii: true
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.ICompensatableActivity.Compensate(ActivityExecutionContext)
  nameWithType: CompensatableTransactionScopeActivity.System.Workflow.ComponentModel.ICompensatableActivity.Compensate(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System.Workflow.ComponentModel.ICompensatableActivity.Compensate(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Called by the workflow runtime to compensate an activity that is in the <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionStatus&quot;></xref> state. The activity must have a value of <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionResult&quot;></xref> for its <xref:System.Workflow.ComponentModel.Activity.ExecutionResult*> property in order to be compensatable."
  syntax:
    content: System.Workflow.ComponentModel.ActivityExecutionStatus ICompensatableActivity.Compensate (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "The <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionContext&quot;></xref> for the operation."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "The <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionStatus&quot;></xref> after operation has been tried."
  overload: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#ICompensatableActivity#Compensate*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.TransactionOptions
  id: TransactionOptions
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  langs:
  - csharp
  name: TransactionOptions
  nameWithType: CompensatableTransactionScopeActivity.TransactionOptions
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.TransactionOptions
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Gets the <xref href=&quot;System.Workflow.ComponentModel.WorkflowTransactionOptions&quot;></xref> associated with this instance."
  remarks: ''
  example:
  - "The following example demonstrates accessing the TransactionOptions property.  This example is from the Compensation SDK sample.  For more information, see [Compensation Sample](http://msdn.microsoft.com/en-us/c847a694-9978-46af-aa80-5bd1833f813b).  \n  \n [!code-cs[WF_Samples#154](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#154)]\n [!code-vb[WF_Samples#154](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#154)]"
  syntax:
    content: public System.Workflow.ComponentModel.WorkflowTransactionOptions TransactionOptions { get; set; }
    return:
      type: System.Workflow.ComponentModel.WorkflowTransactionOptions
      description: "The <xref href=&quot;System.Workflow.ComponentModel.WorkflowTransactionOptions&quot;></xref> associated with this instance."
  overload: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.TransactionOptions*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: System.Workflow.ComponentModel.CompositeActivity
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: CompensatableTransactionScopeActivity()
  nameWithType: CompensatableTransactionScopeActivity.CompensatableTransactionScopeActivity()
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.CompensatableTransactionScopeActivity()
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor(System.String)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: CompensatableTransactionScopeActivity(String)
  nameWithType: CompensatableTransactionScopeActivity.CompensatableTransactionScopeActivity(String)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.CompensatableTransactionScopeActivity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: Cancel(ActivityExecutionContext)
  nameWithType: CompensatableTransactionScopeActivity.Cancel(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Cancel(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.ActivityExecutionStatus
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatus
  nameWithType: ActivityExecutionStatus
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus
- uid: System.Workflow.ComponentModel.ActivityExecutionContext
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionContext
  nameWithType: ActivityExecutionContext
  fullName: System.Workflow.ComponentModel.ActivityExecutionContext
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: Execute(ActivityExecutionContext)
  nameWithType: CompensatableTransactionScopeActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Execute(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: OnActivityChangeRemove(ActivityExecutionContext,Activity)
  nameWithType: CompensatableTransactionScopeActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnActivityChangeRemove(ActivityExecutionContext,Activity)
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: OnWorkflowChangesCompleted(ActivityExecutionContext)
  nameWithType: CompensatableTransactionScopeActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnWorkflowChangesCompleted(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  nameWithType: CompensatableTransactionScopeActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatusChangedEventArgs
  nameWithType: ActivityExecutionStatusChangedEventArgs
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#ICompensatableActivity#Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: System.Workflow.ComponentModel.ICompensatableActivity.Compensate(ActivityExecutionContext)
  nameWithType: CompensatableTransactionScopeActivity.System.Workflow.ComponentModel.ICompensatableActivity.Compensate(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System.Workflow.ComponentModel.ICompensatableActivity.Compensate(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.TransactionOptions
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: TransactionOptions
  nameWithType: CompensatableTransactionScopeActivity.TransactionOptions
  fullName: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.TransactionOptions
- uid: System.Workflow.ComponentModel.WorkflowTransactionOptions
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowTransactionOptions
  nameWithType: WorkflowTransactionOptions
  fullName: System.Workflow.ComponentModel.WorkflowTransactionOptions
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor*
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: CompensatableTransactionScopeActivity
  nameWithType: CompensatableTransactionScopeActivity.CompensatableTransactionScopeActivity
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Cancel*
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: Cancel
  nameWithType: CompensatableTransactionScopeActivity.Cancel
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.Execute*
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: Execute
  nameWithType: CompensatableTransactionScopeActivity.Execute
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnActivityChangeRemove*
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: OnActivityChangeRemove
  nameWithType: CompensatableTransactionScopeActivity.OnActivityChangeRemove
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.OnWorkflowChangesCompleted*
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: OnWorkflowChangesCompleted
  nameWithType: CompensatableTransactionScopeActivity.OnWorkflowChangesCompleted
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent
  nameWithType: CompensatableTransactionScopeActivity.System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#ICompensatableActivity#Compensate*
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: System.Workflow.ComponentModel.ICompensatableActivity.Compensate
  nameWithType: CompensatableTransactionScopeActivity.System.Workflow.ComponentModel.ICompensatableActivity.Compensate
- uid: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.TransactionOptions*
  parent: System.Workflow.ComponentModel.CompensatableTransactionScopeActivity
  isExternal: false
  name: TransactionOptions
  nameWithType: CompensatableTransactionScopeActivity.TransactionOptions
