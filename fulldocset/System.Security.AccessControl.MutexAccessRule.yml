### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.MutexAccessRule
  id: MutexAccessRule
  children:
  - System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.MutexAccessRule.MutexRights
  langs:
  - csharp
  name: MutexAccessRule
  nameWithType: MutexAccessRule
  fullName: System.Security.AccessControl.MutexAccessRule
  type: Class
  summary: "Representa um conjunto de direitos de acesso permitido ou negado para um utilizador ou grupo. Esta classe não pode ser herdada."
  remarks: "A classe de MutexAccessRule é um de um conjunto de classes que fornece o .NET Framework para a gestão de segurança de controlo de acesso do Windows no sistema nomeado mutexes. Para uma descrição geral destas classes e a respetiva relação estruturas de controlo de acesso de Windows subjacente, consulte <xref:System.Security.AccessControl.MutexSecurity>.</xref:System.Security.AccessControl.MutexSecurity>      > [!NOTE] > Windows segurança de controlo de acesso é significativa apenas para com o nome mutexes de sistema. Se um <xref:System.Threading.Mutex>objeto representa uma exclusão mútua local, o controlo de acesso é irrelevantes.</xref:System.Threading.Mutex>       Para obter uma lista de regras a aplicada a uma exclusão mútua com nome, utilize o <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>método para obter um <xref:System.Security.AccessControl.MutexSecurity>de objeto e, em seguida, utilize o <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>método para obter uma coleção de objetos de MutexAccessRule.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.MutexSecurity> </xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>       Objetos de MutexAccessRule não mapeiam um para um com entradas de controlo de acesso na lista de controlo de acesso discricionário (DACL) subjacente. Quando obtiver o conjunto de todas as regras de acesso para uma exclusão mútua, o conjunto contém o número mínimo de regras necessárias atualmente para expressar todas as entradas de controlo de acesso.      > [!NOTE] > As entradas de controlo de acesso subjacente alterar como aplicar e remover regras. As informações nas regras intercaladas se possível, para manter o menor número de entradas de controlo de acesso. Assim, ao ler a lista atual de regras,-lo poderá não parece ser exatamente a lista de todas as regras que adicionou.       Utilize MutexAccessRule objetos para especificar os direitos de acesso para permitir ou negar a um utilizador ou grupo. Um MutexAccessRule objeto representa sempre permissão de acesso ou negado o acesso, nunca ambos.       Para aplicar uma regra a uma exclusão mútua sistema com nome, utilize o <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>método para obter o <xref:System.Security.AccessControl.MutexSecurity>objeto.</xref:System.Security.AccessControl.MutexSecurity> </xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> Modificar o <xref:System.Security.AccessControl.MutexSecurity>objeto ao utilizar os seus métodos para adicionar a regra e, em seguida, utilize o <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>método reattach o objeto de segurança.</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.MutexSecurity>      > [!IMPORTANT] > Alterações efetuadas a um <xref:System.Security.AccessControl.MutexSecurity>objeto não afetam os níveis de acesso da exclusão mútua com nome até que tem de chamar o <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>método para atribuir o objeto de segurança alterada para a exclusão mútua com nome.</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.MutexSecurity>       Objetos de MutexAccessRule são imutáveis. Segurança de uma exclusão mútua é modificada utilizando os métodos do <xref:System.Security.AccessControl.MutexSecurity>classe para adicionar ou remover regras; como tal, as entradas de controlo de acesso subjacente são modificadas.</xref:System.Security.AccessControl.MutexSecurity>      > [!NOTE] > Segurança em objetos de sincronização não é suportada para Windows 98 ou Windows Millennium Edition."
  example:
  - "The following code example demonstrates the creation and use of MutexAccessRule objects. The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_5_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_5_1.cs)]"
  syntax:
    content: 'public sealed class MutexAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.MutexAccessRule
  langs:
  - csharp
  name: MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
  nameWithType: MutexAccessRule.MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
  fullName: System.Security.AccessControl.MutexAccessRule.MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> classe, especificando o utilizador ou grupo a regra se aplica, os direitos de acesso, e se os direitos de acesso especificado são permitidos ou negados."
  remarks: "Aguarde um <xref:System.Threading.Mutex>(chamando a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>ou <xref:System.Threading.WaitHandle.WaitAll%2A>método), um utilizador tem de ter <xref:System.Security.AccessControl.MutexRights?displayProperty=fullName>acesso.</xref:System.Security.AccessControl.MutexRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Mutex> Para libertar a exclusão mútua, chamando o <xref:System.Threading.Mutex.ReleaseMutex%2A>método, o utilizador tem de ter <xref:System.Security.AccessControl.MutexRights?displayProperty=fullName>acesso.</xref:System.Security.AccessControl.MutexRights?displayProperty=fullName> </xref:System.Threading.Mutex.ReleaseMutex%2A>"
  syntax:
    content: public MutexAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "O utilizador ou grupo a regra aplica-se. Tem de ser do tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ou um tipo como <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> que pode ser convertido no tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: eventRights
      type: System.Security.AccessControl.MutexRights
      description: "Uma combinação bit a bit de <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> especificar os direitos de valores permitido ou negado."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Um do <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valores especificar se os direitos são permitidos ou negados."
  overload: System.Security.AccessControl.MutexAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Especifica um valor inválido.       - ou - <code>type</code> Especifica um valor inválido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - <code>eventRights</code> é zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>é nenhum tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> nem um tipo como <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> que pode ser convertido no tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.MutexAccessRule
  langs:
  - csharp
  name: MutexAccessRule(String,MutexRights,AccessControlType)
  nameWithType: MutexAccessRule.MutexAccessRule(String,MutexRights,AccessControlType)
  fullName: System.Security.AccessControl.MutexAccessRule.MutexAccessRule(String,MutexRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> classe, especificando o nome de utilizador ou grupo a regra se aplica, os direitos de acesso, e se os direitos de acesso especificado são permitidos ou negados."
  remarks: "Aguarde um <xref:System.Threading.Mutex>(chamando a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>ou <xref:System.Threading.WaitHandle.WaitAll%2A>método), um utilizador tem de ter <xref:System.Security.AccessControl.MutexRights?displayProperty=fullName>acesso.</xref:System.Security.AccessControl.MutexRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Mutex> Para libertar a exclusão mútua, chamando o <xref:System.Threading.Mutex.ReleaseMutex%2A>métodos, o utilizador tem de ter <xref:System.Security.AccessControl.MutexRights?displayProperty=fullName>acesso.</xref:System.Security.AccessControl.MutexRights?displayProperty=fullName> </xref:System.Threading.Mutex.ReleaseMutex%2A>       Este construtor é equivalente ao criar um <xref:System.Security.Principal.NTAccount>objeto, transferindo `identity` para o <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>construtor e transmitir recém-criada <xref:System.Security.Principal.NTAccount>de objeto para o <xref:System.Security.AccessControl.MutexAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.MutexRights%2CSystem.Security.AccessControl.AccessControlType%29>construtor.</xref:System.Security.AccessControl.MutexAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.MutexRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.MutexAccessRule> objects. The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/04cf3af8-ee81-48a6-806b-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/04cf3af8-ee81-48a6-806b-_1.cs)]"
  syntax:
    content: public MutexAccessRule (string identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "O nome de utilizador ou grupo a regra aplica-se."
    - id: eventRights
      type: System.Security.AccessControl.MutexRights
      description: "Uma combinação bit a bit de <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> especificar os direitos de valores permitido ou negado."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Um do <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valores especificar se os direitos são permitidos ou negados."
  overload: System.Security.AccessControl.MutexAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Especifica um valor inválido.       - ou - <code>type</code> Especifica um valor inválido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>é zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - ou - <code>identity</code> é uma cadeia de comprimento zero.       - ou - <code>identity</code> é superior a 512 caracteres."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexAccessRule.MutexRights
  id: MutexRights
  parent: System.Security.AccessControl.MutexAccessRule
  langs:
  - csharp
  name: MutexRights
  nameWithType: MutexAccessRule.MutexRights
  fullName: System.Security.AccessControl.MutexAccessRule.MutexRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém os direitos permitido ou negado pela regra de acesso."
  remarks: "<xref:System.Security.AccessControl.MutexAccessRule>os objetos são imutáveis.</xref:System.Security.AccessControl.MutexAccessRule> Pode criar uma nova regra de acesso que representa um utilizador diferente, direitos diferentes ou outro <xref:System.Security.AccessControl.AccessControlType>, mas não é possível modificar uma regra de acesso existentes.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the MutexRights property to display the rights in the set of rules contained in a <xref:System.Security.AccessControl.MutexSecurity> object. The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_0_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_0_1.cs)]"
  syntax:
    content: public System.Security.AccessControl.MutexRights MutexRights { get; }
    return:
      type: System.Security.AccessControl.MutexRights
      description: "Uma combinação bit a bit de <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> indicar os direitos de valores permitido ou negado pela regra de acesso."
  overload: System.Security.AccessControl.MutexAccessRule.MutexRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.MutexAccessRule
  isExternal: false
  name: MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
  nameWithType: MutexAccessRule.MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
  fullName: System.Security.AccessControl.MutexAccessRule.MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.MutexRights
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexRights
  nameWithType: MutexRights
  fullName: System.Security.AccessControl.MutexRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.MutexAccessRule
  isExternal: false
  name: MutexAccessRule(String,MutexRights,AccessControlType)
  nameWithType: MutexAccessRule.MutexAccessRule(String,MutexRights,AccessControlType)
  fullName: System.Security.AccessControl.MutexAccessRule.MutexAccessRule(String,MutexRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.MutexAccessRule.MutexRights
  parent: System.Security.AccessControl.MutexAccessRule
  isExternal: false
  name: MutexRights
  nameWithType: MutexAccessRule.MutexRights
  fullName: System.Security.AccessControl.MutexAccessRule.MutexRights
- uid: System.Security.AccessControl.MutexAccessRule.#ctor*
  parent: System.Security.AccessControl.MutexAccessRule
  isExternal: false
  name: MutexAccessRule
  nameWithType: MutexAccessRule.MutexAccessRule
- uid: System.Security.AccessControl.MutexAccessRule.MutexRights*
  parent: System.Security.AccessControl.MutexAccessRule
  isExternal: false
  name: MutexRights
  nameWithType: MutexAccessRule.MutexRights
