### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.SqlDataSource
  id: SqlDataSource
  children:
  - System.Web.UI.WebControls.SqlDataSource.#ctor
  - System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  - System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  - System.Web.UI.WebControls.SqlDataSource.CacheDuration
  - System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  - System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  - System.Web.UI.WebControls.SqlDataSource.ConnectionString
  - System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  - System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  - System.Web.UI.WebControls.SqlDataSource.Delete
  - System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  - System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  - System.Web.UI.WebControls.SqlDataSource.Deleted
  - System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  - System.Web.UI.WebControls.SqlDataSource.Deleting
  - System.Web.UI.WebControls.SqlDataSource.EnableCaching
  - System.Web.UI.WebControls.SqlDataSource.FilterExpression
  - System.Web.UI.WebControls.SqlDataSource.Filtering
  - System.Web.UI.WebControls.SqlDataSource.FilterParameters
  - System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  - System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  - System.Web.UI.WebControls.SqlDataSource.GetViewNames
  - System.Web.UI.WebControls.SqlDataSource.Insert
  - System.Web.UI.WebControls.SqlDataSource.InsertCommand
  - System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  - System.Web.UI.WebControls.SqlDataSource.Inserted
  - System.Web.UI.WebControls.SqlDataSource.Inserting
  - System.Web.UI.WebControls.SqlDataSource.InsertParameters
  - System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  - System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.SqlDataSource.ProviderName
  - System.Web.UI.WebControls.SqlDataSource.SaveViewState
  - System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  - System.Web.UI.WebControls.SqlDataSource.SelectCommand
  - System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  - System.Web.UI.WebControls.SqlDataSource.Selected
  - System.Web.UI.WebControls.SqlDataSource.Selecting
  - System.Web.UI.WebControls.SqlDataSource.SelectParameters
  - System.Web.UI.WebControls.SqlDataSource.SortParameterName
  - System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  - System.Web.UI.WebControls.SqlDataSource.TrackViewState
  - System.Web.UI.WebControls.SqlDataSource.Update
  - System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  - System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  - System.Web.UI.WebControls.SqlDataSource.Updated
  - System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  - System.Web.UI.WebControls.SqlDataSource.Updating
  langs:
  - csharp
  name: SqlDataSource
  nameWithType: SqlDataSource
  fullName: System.Web.UI.WebControls.SqlDataSource
  type: Class
  summary: "Represents an SQL database to data-bound controls."
  remarks: "In this topic:      -   [Introduction](#introduction)      -   [Data Connections](#data_connections)      -   [Performing Data Operations](#performing_data_operations)      -   [Data Provider](#data_provider)      -   [Caching](#caching)      -   [Additional Features](#additional_features)      -   [Data Source View](#data_source_view)      -   [Declarative Syntax](#declarative_syntax)      <a name=&quot;introduction&quot;></a>    ## Introduction    The SqlDataSource data source control represents data in an SQL relational database to data-bound controls. You can use the SqlDataSource control in conjunction with a data-bound control to retrieve data from a relational database and to display, edit, and sort data on a Web page with little or no code.      <a name=&quot;data_connections&quot;></a>    ## Data Connections    To connect to a database, you must set the <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property to a valid connection string. The SqlDataSource can support any SQL relational database that can be connected to using an ADO.NET provider, such as the `SqlClient`, `OleDb`, `Odbc`, or `OracleClient` provider. For information about how to secure connection strings, see [How To: Secure Connection Strings when Using Data Source Controls](~/add/includes/ajax-current-ext-md.md).       To retrieve data from an underlying database, set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property with an SQL query. If the database that the SqlDataSource is associated with supports stored procedures, you can set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property to the name of a stored procedure. The SQL query that you specify can also be a parameterized query. You can add <xref:System.Web.UI.WebControls.Parameter> objects that are associated with a parameterized query to the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> collection. For more information about parameterized SQL queries and their syntax, see [Using Parameters with Data Source Controls for Filtering](~/add/includes/ajax-current-ext-md.md).       The SqlDataSource control retrieves data whenever the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is called. This method provides programmatic access to the method that is specified by <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. The <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is automatically called by controls that are bound to the SqlDataSource when their <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method is called. If you set the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A> property of a data-bound control, the control automatically binds to data from the data source, as required. Setting the `DataSourceID` property is the recommended method for binding an <xref:System.Web.UI.WebControls.ObjectDataSource> control to a data-bound control. Alternatively, you can use the `DataSource` property, but then you must explicitly call the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the data-bound control. Some examples of data-bound controls that can use SqlDataSource are <xref:System.Web.UI.WebControls.DataGrid>, <xref:System.Web.UI.WebControls.DetailsView>, <xref:System.Web.UI.WebControls.DataList>, and <xref:System.Web.UI.WebControls.DropDownList>. You can call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method programmatically at any time to retrieve data from the underlying database.       In declarative and programmatic ASP.NET scenarios, you can set the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property of the data-bound control to the ID of the SqlDataSource control. You can also assign an instance of the SqlDataSource class to the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> property of the data-bound control. For more information about binding data-bound control to data source controls, see [ASP.NET Data Access Options](http://msdn.microsoft.com/en-us/a5ff235e-397f-4bbe-9bfe-2720b6e7ab9d).      <a name=&quot;performing_data_operations&quot;></a>    ## Performing Data Operations    Depending on the capabilities of the underlying database product and the configuration of the instance of the SqlDataSource class, you can perform data operations, such as updates, inserts, and deletes. To perform these data operations, set the appropriate command text and any associated parameters for the operation that you want to perform. For example, for an update operation, set the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property to an SQL string or the name of a stored procedure and add any required parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. The update is performed when the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method is called, either explicitly by your code or automatically by a data-bound control. The same general pattern is followed for <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> operations.       The SQL queries and commands that you use in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>, and <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> properties can be parameterized. This means that the query or command can use placeholders instead of literal values and bind the placeholders to application or user-defined variables. You can bind parameters in SQL queries to Session variables, values that are passed on the query string for a Web Forms page, the property values of other server controls, and more. For more information about how to use parameters in SQL queries with the SqlDataSource, see [Using Parameters with Data Source Controls for Filtering](../Topic/Using%20Parameters%20with%20Data%20Source%20Controls%20for%20Filtering.md) and [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  By default, if one of the parameters is `null` when you execute a `Select` command, no data will be returned and no exception will be thrown. You can change this behavior by setting the <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> property to `false`.      <a name=&quot;data_provider&quot;></a>    ## Data Provider    By default, the SqlDataSource control works with the .NET Framework Data Provider for SQL Server, but SqlDataSource is not Microsoft SQL Server–specific. You can connect the SqlDataSource control with any database product for which there is a managed ADO.NET provider. When used with the <xref:System.Data.OleDb?displayProperty=fullName> provider, the SqlDataSource can work with any OLE DB-compliant database. When used with the <xref:System.Data.Odbc?displayProperty=fullName> provider, the SqlDataSource can be used with any ODBC driver and database, including IBM DB2, MySQL, and PostgreSQL. When used with the <xref:System.Data.OracleClient?displayProperty=fullName> provider, the SqlDataSource can work with Oracle 8.1.7 databases and later. The list of allowable providers is registered in the `DbProviderFactories` section of the configuration file, either in the Machine.config or Web.config file. For more information, see [Selecting Data Using the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;caching&quot;></a>    ## Caching    If you display data on your page using a SqlDataSource control, you can increase the performance of the page by using the data caching capabilities of the data source control. Caching reduces the processing load on the database servers at the expense of memory on the Web server; in most cases, this is a good trade-off. The SqlDataSource automatically caches data when the <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> property is set to the number of seconds that the cache stores data before the cache entry is discarded. You can also specify a <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> and an optional <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> value.      <a name=&quot;additional_features&quot;></a>    ## Additional Features    The SqlDataSource provides additional capabilities, as listed in the following table.      |Capability|Requirements|   |----------------|------------------|   |Caching|Set the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value, the <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> property to `true`, and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> properties according to the caching behavior you want for your cached data.|   |Deleting|Set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> property to an SQL statement used to delete data. This statement is typically parameterized.|   |Filtering|Set the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value. Set the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property to a filtering expression used to filter the data when the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is called.|   |Inserting|Set the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> property to an SQL statement used to insert data. This statement is typically parameterized.|   |Paging|Not currently supported by the SqlDataSource, however some data-bound controls, such as <xref:System.Web.UI.WebControls.GridView>, support paging when you set the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value.|   |Selecting|Set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property to an SQL statement used to retrieve data.|   |Sorting|Set the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property to <xref:System.Web.UI.WebControls.SqlDataSourceMode>.|   |Updating|Set the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property to an SQL statement used to update data. This statement is typically parameterized.|      <a name=&quot;data_source_view&quot;></a>    ## Data Source View    As with all data source controls, the SqlDataSource control is associated with a data source view class. The SqlDataSource control has only one associated <xref:System.Web.UI.WebControls.SqlDataSourceView>, and it is always named `Table`.       There is no visual rendering of the SqlDataSource control; it is implemented as a control so that you can create it declaratively and, optionally, to allow it to participate in state management. As a result, the SqlDataSource does not support visual features, such as the ones that are provided by the <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> or <xref:System.Web.UI.DataSourceControl.SkinID%2A> property.      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:SqlDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       CancelSelectOnNullParameter=&quot;True|False&quot;       ConflictDetection=&quot;OverwriteChanges|CompareAllValues&quot;       ConnectionString=&quot;string&quot;       DataSourceMode=&quot;DataReader|DataSet&quot;       DeleteCommand=&quot;string&quot;       DeleteCommandType=&quot;Text|StoredProcedure&quot;       EnableCaching=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       FilterExpression=&quot;string&quot;       ID=&quot;string&quot;       InsertCommand=&quot;string&quot;       InsertCommandType=&quot;Text|StoredProcedure&quot;       OldValuesParameterFormatString=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDeleted=&quot;Deleted event handler&quot;       OnDeleting=&quot;Deleting event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnFiltering=&quot;Filtering event handler&quot;       OnInit=&quot;Init event handler&quot;       OnInserted=&quot;Inserted event handler&quot;       OnInserting=&quot;Inserting event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnSelected=&quot;Selected event handler&quot;       OnSelecting=&quot;Selecting event handler&quot;       OnUnload=&quot;Unload event handler&quot;       OnUpdated=&quot;Updated event handler&quot;       OnUpdating=&quot;Updating event handler&quot;       ProviderName=&quot;string|System.Data.Odbc|System.Data.OleDb|           System.Data.OracleClient|System.Data.SqlClient|           Microsoft.SqlServerCe.Client&quot;       runat=&quot;server&quot;       SelectCommand=&quot;string&quot;       SelectCommandType=&quot;Text|StoredProcedure&quot;       SkinID=&quot;string&quot;       SortParameterName=&quot;string&quot;       SqlCacheDependency=&quot;string&quot;       UpdateCommand=&quot;string&quot;       UpdateCommandType=&quot;Text|StoredProcedure&quot;       Visible=&quot;True|False&quot;   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </UpdateParameters>   </asp:SqlDataSource>   ```"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192424).  \n  \n This section contains four code examples:  \n  \n-   The first code example demonstrates how to display data from SQL Server in a <xref:System.Web.UI.WebControls.GridView> control using declarative syntax.  \n  \n-   The second code example demonstrates how to display data from an ODBC-compliant database in a <xref:System.Web.UI.WebControls.GridView> control using declarative syntax.  \n  \n-   The third code example demonstrates how to display and update data in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n-   The fourth code example demonstrates how to display and update data in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n    > [!NOTE]\n    >  These examples show how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example demonstrates how to use a SqlDataSource control declaratively to retrieve data from SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_1.aspx)]  \n  \n The following code example demonstrates how to use a SqlDataSource control declaratively to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is the name of the .NET Framework Data Provider for ODBC, which is <xref:System.Data.Odbc?displayProperty=fullName>.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_2.aspx)]  \n  \n The following code example demonstrates a common display and update scenario with the <xref:System.Web.UI.WebControls.GridView> control. As with the previous examples, data from the Northwind database is displayed in the <xref:System.Web.UI.WebControls.GridView> control. Additionally, because an <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is specified and the <xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A> property is set to `true`, you can edit and update the records with no additional code. The <xref:System.Web.UI.WebControls.GridView> control automatically handles adding parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method when the **Update** button in the <xref:System.Web.UI.WebControls.GridView> control is clicked.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_3.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_3.aspx)]  \n  \n The following code example demonstrates a common display and update scenario with the <xref:System.Web.UI.WebControls.DropDownList> and <xref:System.Web.UI.WebControls.TextBox> controls. The <xref:System.Web.UI.WebControls.DropDownList> control does not automatically add update parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection nor call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method, so you must do so. The update parameters are specified declaratively and you can add an event handler to perform the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> operation when an event is raised.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_4.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("SelectQuery")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class SqlDataSource : System.Web.UI.DataSourceControl
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource()
  nameWithType: SqlDataSource.SqlDataSource()
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> class."
  syntax:
    content: public SqlDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource(String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> class with the specified connection string and Select command."
  remarks: "Because different database products use different varieties of SQL, the syntax for `selectCommand` depends on the current ADO.NET provider being used, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. If the SQL string is a parameterized query or command, the placeholder of the parameter also depends on the ADO.NET provider being used. For example, if the provider is the <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the placeholder of the parameter is `&quot;@parameterName&quot;`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or the <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `&quot;?&quot;`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> value can be an SQL string or the name of a stored procedure, if the data source supports stored procedures."
  example:
  - "The following code example demonstrates how to create a <xref:System.Web.UI.WebControls.SqlDataSource> control using the SqlDataSource constructor. The example is unusual in that the <xref:System.Web.UI.WebControls.SqlDataSource> control is being used not on a Web Forms page, but in the implementation of a middle-tier object as a simple way for a business object to interact with a database. The example uses a connection string that is stored in the Web.config file.  \n  \n This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#3](~/add/codesnippet/csharp/m-system.web.ui.webcontr_142_1.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#3](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_142_1.vb)]"
  syntax:
    content: public SqlDataSource (string connectionString, string selectCommand);
    parameters:
    - id: connectionString
      type: System.String
      description: "The connection string used to connect to the underlying database."
    - id: selectCommand
      type: System.String
      description: "The SQL query used to retrieve data from the underlying database. If the SQL query is a parameterized SQL string, you might need to add <xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref> objects to the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> collection."
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource(String,String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> class with the specified connection string and Select command."
  remarks: "Because different database products use different varieties of SQL, the syntax of `selectCommand` depends on the current ADO.NET provider being used, which is identified by the `providerName` parameter. If the SQL string is a parameterized query or command, the placeholder of the parameter also depends on the ADO.NET provider being used. For example, if the provider is <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the placeholder of the parameter is `&quot;@parameterName&quot;`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or the <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `&quot;?&quot;`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).       The <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property can be an SQL string or the name of a stored procedure, if the data source supports stored procedures."
  syntax:
    content: public SqlDataSource (string providerName, string connectionString, string selectCommand);
    parameters:
    - id: providerName
      type: System.String
      description: "The name of the data provider that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> uses. If no provider is set, the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> uses the ADO.NET provider for Microsoft SQL Server, by default."
    - id: connectionString
      type: System.String
      description: "The connection string used to connect to the underlying database."
    - id: selectCommand
      type: System.String
      description: "The SQL query used to retrieve data from the underlying database. If the SQL query is a parameterized SQL string, you might need to add <xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref> objects to the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> collection."
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the length of time, in seconds, that the data source control caches data that is retrieved by the <xref:System.Web.UI.WebControls.SqlDataSource.Select*> method."
  remarks: "The <xref:System.Web.UI.WebControls.SqlDataSource> control supports data caching. While data is cached, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the cache rather than from the underlying database. When the cache expires, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the underlying database, and then caches the data again.       The <xref:System.Web.UI.WebControls.SqlDataSource> control automatically caches data when the <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> property is set to `true` and the CacheDuration property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before the cache entry is discarded. A value of 0 indicates an infinitely long cache.       The behavior of the cache is determined by a combination of the duration and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property. If the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the <xref:System.Web.UI.WebControls.SqlDataSource> caches data on the first data retrieval operation, holds it in memory for, at most, the amount of time that is specified by CacheDuration property. The data might be released before the duration time, if the memory is required. The cache is then refreshed during the next operation. If the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the data source control caches data on the first data retrieval operation, but resets the time window that it holds the cache for each subsequent operation. The cache expires, if there is no activity for a time that is equal to the CacheDuration value since the last <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> operation.       The <xref:System.Web.UI.WebControls.SqlDataSource> control can cache data only when it is in <xref:System.Web.UI.WebControls.SqlDataSourceMode> mode. A <xref:System.NotSupportedException> exception is thrown by the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method, if the <xref:System.Web.UI.WebControls.SqlDataSource> control is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value and caching is also enabled.      > [!IMPORTANT] >  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user&quot;s access to the data. If you expect more than one user to access the data, and you want each retrieval to the data to be verified by the security configurations for the database, do not use caching."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. The CacheDuration is set to 20 seconds and, because the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value by default, users of this page will see fresh data every 20 seconds.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_599_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_599_1.aspx)]"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "The number of seconds that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> caches the results of a <xref:System.Web.UI.WebControls.SqlDataSource.Select*> operation. The default is 0. The value cannot be negative."
  overload: System.Web.UI.WebControls.SqlDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the cache expiration behavior that, when combined with the duration, describes the behavior of the cache that the data source control uses."
  remarks: "The <xref:System.Web.UI.WebControls.SqlDataSource> control supports data caching. While data is cached, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the cache rather than from the underlying database. When the cache expires, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the underlying database, and then caches the data again.       The behavior of the cache is determined by a combination of the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> and CacheExpirationPolicy settings. If the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the <xref:System.Web.UI.WebControls.SqlDataSource> caches data on the first data retrieval operation, holds it in memory for the amount of time that is specified by the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> property, and then discards it after the time has lapsed. The cache is then refreshed during the next operation. If the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, the data source control caches data on the first data retrieval operation, but resets the time window that it holds the cache for each subsequent operation. The cache expires, if there is no activity for a time that is equal to the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> value since the last <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> operation.       The <xref:System.Web.UI.WebControls.SqlDataSource> control can cache data only when in the <xref:System.Web.UI.WebControls.SqlDataSourceMode> mode. A <xref:System.NotSupportedException> exception is thrown by the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method, if the <xref:System.Web.UI.WebControls.SqlDataSource> control is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value and caching is also enabled.      > [!IMPORTANT] >  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user&quot;s access to the data. If you expect more than one user to access the data, and you want each retrieval to the data to be verified by the security configurations for the database, do not use caching."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. Because the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, users will not see fresh data even though the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> value is 20 seconds. The cached data is refreshed only if there is no activity on the page for more than 20 seconds since the last page load.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_249_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_249_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "One of the <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;></xref> values. The default is the <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;></xref> value."
  overload: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a user-defined key dependency that is linked to all data cache objects that are created by the data source control. All cache objects are explicitly expired when the key is expired."
  remarks: "The <xref:System.Web.UI.WebControls.SqlDataSource> control supports data caching. While data is cached, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the cache rather than from the underlying database. When the cache expires, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the underlying database, and then caches the data again.       You can set the CacheKeyDependency property to create a dependency between all cache entries that are created by the <xref:System.Web.UI.WebControls.SqlDataSource> control and the key. You can programmatically expire all the cache entries at any time by expiring the key.       The <xref:System.Web.UI.WebControls.SqlDataSource> control can cache data only when in the <xref:System.Web.UI.WebControls.SqlDataSourceMode> mode. A <xref:System.NotSupportedException> exception is thrown by the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method, if the <xref:System.Web.UI.WebControls.SqlDataSource> control is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value and caching is also enabled.       A unique cache entry is created for every combination of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>, and <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> properties. Multiple <xref:System.Web.UI.WebControls.SqlDataSource> controls can use the same cache entries in scenarios where the controls load the same data from the same underlying database.      > [!IMPORTANT] >  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user&quot;s access to the data. If you expect more than one user to access the data, and you want each retrieval to the data to be verified by the security configurations for the database, do not use caching."
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "A key that identifies all cache objects created by the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>."
  overload: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  id: CancelSelectOnNullParameter
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
  fullName: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether a data retrieval operation is canceled when any parameter that is contained in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> collection evaluates to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  remarks: "The value of the CancelSelectOnNullParameter property is stored in view state."
  syntax:
    content: public virtual bool CancelSelectOnNullParameter { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a data retrieval operation is canceled when a parameter contained in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> collection evaluated to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  id: ConflictDetection
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the value indicating how the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control performs updates and deletes when data in a row in the underlying database changes during the time of the operation."
  remarks: "The ConflictDetection property determines whether parameters for old and new values are applied to the `Update` method. For example, if the command that is specified by the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property returns a <xref:System.Data.DataTable> object with the columns `Name` and `Number` and the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters are created for `Name` and `Number` for the `Update` method. If the ConflictDetection property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters are created for `Name`, `Number`, `original_Name`, and `original_Number`. (The exact name of the parameters for the original values depends on the <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> property.) The <xref:System.Web.UI.WebControls.SqlDataSource> control then determines if the `Update` method that is specified in the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property has parameters that match.       Concurrency control is a technique that data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data. For example, one client reads data and presents it to a user, while another client reads the same data, and presents it to a different user. If both users update the data and submit it to the data storage, some unexpected result might occur, because both clients might update different values for the same data. This is considered a conflict. By setting the ConflictDetection property to the <xref:System.Web.UI.ConflictOptions> value, your `Update` method can then compare the old and new values to the original data source to detect conflicts and handle them, as necessary.       The ConflictDetection property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control."
  syntax:
    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }
    return:
      type: System.Web.UI.ConflictOptions
      description: "One of the <xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref> values. The default is the <xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref> value."
  overload: System.Web.UI.WebControls.SqlDataSource.ConflictDetection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  id: ConnectionString
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
  fullName: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the ADO.NET provider–specific connection string that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control uses to connect to an underlying database."
  remarks: "The <xref:System.Web.UI.WebControls.SqlDataSource> control can be used with a variety of ADO.NET providers and the syntax of the connection string that is used to connect to an underlying data source is specific to the provider.       When you configure a <xref:System.Web.UI.WebControls.SqlDataSource> control, you set the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property to the type of database (the default is <xref:System.Data.SqlClient?displayProperty=fullName>), and you set the ConnectionString property to a connection string that includes information that is required in order to connect to the database. The contents of a connection string differ depending on what type of database the data source control is accessing. For example, the <xref:System.Web.UI.WebControls.SqlDataSource> control requires a server name, database (catalog) name, and information about how to authenticate the user when connecting to a SQL Server. For information about the contents of connection strings, see the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property for the <xref:System.Data.SqlClient.SqlConnection> class, <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> property for the <xref:System.Data.OracleClient.OracleConnection> class, <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> property for the <xref:System.Data.OleDb.OleDbConnection> class, or the <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> property for the <xref:System.Data.Odbc.OdbcConnection> class.       If you change the ConnectionString property, the <xref:System.Web.UI.IDataSource.DataSourceChanged> event is raised, causing any controls that are bound to the <xref:System.Web.UI.WebControls.SqlDataSource> control to rebind.      > [!IMPORTANT] >  For information about storing a connection string, see [How To: Secure Connection Strings when Using Data Source Controls](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the ConnectionString property to connect to a Microsoft SQL Server database and display the results of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property in a <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates a more complex scenario, where a <xref:System.Web.UI.WebControls.SqlDataSource> control is used to display and update data in a password-protected Microsoft Access database. In each case, the `connectionStrings` element of the Web.config file is shown first, followed by the ASP.NET page that contains the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n The following code example demonstrates how to set the ConnectionString property to connect to a SQL Server database and display the results of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_2.aspx)]  \n  \n The following code example demonstrates a more complex scenario than the preceding code example, where a <xref:System.Web.UI.WebControls.SqlDataSource> control is used to display and update data in a password-protected Access database. Because the <xref:System.Web.UI.WebControls.SqlDataSource> is used with Access, the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is set to the <xref:System.Data.OleDb> provider, and the ConnectionString property is set to an appropriate connection string for a UNC-shared Access database. A <xref:System.Web.UI.WebControls.GridView> control displays orders with shipment dates. You can update an order by checking the appropriate check box, and then clicking the **Update** button.  \n  \n> [!IMPORTANT]\n>  This example includes a password in plain text only for illustration purposes. In a production application, connection strings that include passwords should be encrypted. For more information, see [Protecting Connection Information](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_3.aspx)]  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_4.aspx)]"
  syntax:
    content: public virtual string ConnectionString { get; set; }
    return:
      type: System.String
      description: "A .NET Framework data provider–specific string that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> uses to connect to the SQL database that it represents. The default is an empty string (&quot;&quot;)."
  overload: System.Web.UI.WebControls.SqlDataSource.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  id: CreateDataSourceView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CreateDataSourceView(String)
  nameWithType: SqlDataSource.CreateDataSourceView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Creates a data source view object that is associated with the data source control."
  remarks: "Classes that derive from the <xref:System.Web.UI.WebControls.SqlDataSource> class can override the CreateDataSourceView method to return strongly typed data source view objects."
  syntax:
    content: protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "The name of the data source view."
    return:
      type: System.Web.UI.WebControls.SqlDataSourceView
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref> that is associated with the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>."
  overload: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  id: DataSourceMode
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the data retrieval mode that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control uses to fetch data."
  remarks: "The data retrieval mode identifies how a <xref:System.Web.UI.WebControls.SqlDataSource> control retrieves data from the underlying database.       When the DataSourceMode property is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value, data is loaded into a <xref:System.Data.DataSet> object and stored in memory on the server. This enables scenarios where user interface controls, such as <xref:System.Web.UI.WebControls.GridView>, offer sorting, filtering, and paging capabilities.       When the DataSourceMode property is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value, data is retrieved by a <xref:System.Data.IDataReader> object, which is a forward-only, read-only cursor. The specific type of the <xref:System.Data.IDataReader> object depends on the NET data provider that the <xref:System.Web.UI.WebControls.SqlDataSource> uses, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. By default, the <xref:System.Web.UI.WebControls.SqlDataSource> control uses the provider for Microsoft SQL Server, the <xref:System.Data.SqlClient?displayProperty=fullName>, and the data reader is a <xref:System.Data.SqlClient.SqlDataReader> object.       If you change the DataSourceMode property, the <xref:System.Web.UI.IDataSource.DataSourceChanged> event is raised, causing any controls that are bound to the <xref:System.Web.UI.WebControls.SqlDataSource> to rebind.       The value of the DataSourceMode property is stored in view state."
  example:
  - "The following code example demonstrates how to set the DataSourceMode property of the <xref:System.Web.UI.WebControls.SqlDataSource> control to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value for a scenario with a <xref:System.Web.UI.WebControls.ListBox> control that requires no sorting, paging, nor filtering.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_5_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_5_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceMode
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;></xref> values. The default is the  <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;></xref> value."
  overload: System.Web.UI.WebControls.SqlDataSource.DataSourceMode*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The DataSourceMode property is not one of the values defined in the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Delete
  id: Delete
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Delete()
  nameWithType: SqlDataSource.Delete()
  fullName: System.Web.UI.WebControls.SqlDataSource.Delete()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Performs a delete operation using the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*> SQL string and any parameters that are in the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters*> collection."
  remarks: "Before the delete operation is performed, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> event. You can handle this event to examine the values of the parameters and to perform any preprocessing before a delete operation.       After the operation completes, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Deleted> event. You can handle this event to examine any return values and error codes and to perform any post-processing.       The Delete method is provided for programmatic access to the `Delete` method. If the <xref:System.Web.UI.WebControls.SqlDataSource> control is associated with a data-bound control, the data-bound control automatically calls the **Delete** method.       The Delete method delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control. To perform the operation, the <xref:System.Web.UI.WebControls.SqlDataSourceView> builds a <xref:System.Data.Common.DbCommand> object using the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text and any associated <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> values, and then executes the <xref:System.Data.Common.DbCommand> against the underlying database."
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> property and call the Delete method when using data-bound controls, such as the <xref:System.Web.UI.WebControls.DropDownList> (unlike other controls, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call the Delete method on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private `OnDelete` event handler, which explicitly calls the Delete method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_3_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_3_1.aspx)]"
  syntax:
    content: public int Delete ();
    parameters: []
    return:
      type: System.Int32
      description: "A value that represents the number of rows deleted from the underlying database."
  overload: System.Web.UI.WebControls.SqlDataSource.Delete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> cannot establish a connection with the underlying data source."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  id: DeleteCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the SQL string that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control uses to delete data from the underlying database."
  remarks: "The DeleteCommand represents an SQL query or the name of a stored procedure, and is used by the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method.       Because different database products use different varieties of SQL, the syntax of the SQL string depends on the current ADO.NET provider being used, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. If the SQL string is a parameterized query or command, the syntax of the parameter also depends on the ADO.NET provider being used. For example, if the provider is the <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the syntax of the parameter is `&quot;@parameterName&quot;`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `&quot;?&quot;`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).       The DeleteCommand property can be an SQL string or the name of a stored procedure, if the database supports stored procedures.       The DeleteCommand property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.      > [!IMPORTANT] >  For security purposes, the DeleteCommand property is not stored in view state. Because it is possible to decode the contents of view state on the client, storing sensitive information about the database structure in view state could result in an information disclosure vulnerability."
  example:
  - "The following code example demonstrates how to set the DeleteCommand text to delete an order from the Northwind database Orders table. Data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> renders a **Delete** button automatically when the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`. Additionally, when the **Delete** button is clicked, the <xref:System.Web.UI.WebControls.GridView> control automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method. Finally, because this code example deletes data, an event handler is added to attempt to back up the database to disk before the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_45_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_45_1.aspx)]"
  syntax:
    content: public string DeleteCommand { get; set; }
    return:
      type: System.String
      description: "An SQL string that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> uses to delete data."
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  id: DeleteCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether the text in the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*> property is an SQL statement or the name of a stored procedure."
  remarks: "The DeleteCommandType property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control."
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref> values. The default is the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref> value."
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: SqlDataSource.Deleted
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when a delete operation has completed."
  remarks: "Handle the Deleted event to examine the values of output parameters after a delete operation has completed. The output parameters are available from the <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> object that is associated with the event.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the parameters collection that contains the parameters that are used by the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*> property from the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref> object that is associated with the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control."
  remarks: "If the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> property contains a parameterized SQL query, the DeleteParameters collection contains any <xref:System.Web.UI.WebControls.Parameter> objects that correspond to the parameter placeholders in the SQL string.      > [!NOTE] >  Make sure that no <xref:System.Web.UI.WebControls.BoundField> controls in the data-bound control that you bind to the <xref:System.Web.UI.WebControls.SqlDataSource> control have names that match any parameter names in the DeleteParameters collection. Parameters that have the same name as bound fields are excluded from the SQL command, and a &quot;parameter was not supplied&quot; error might result.       If the <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, the parameters are created for both the old and new values of the data. The parameters for the old values are named according to the <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> property.       Depending on the ADO.NET provider, the order of the parameters in the DeleteParameters collection might be important. The <xref:System.Data.OleDb?displayProperty=fullName> and <xref:System.Data.Odbc?displayProperty=fullName> providers associate the parameters in the collection according to the order in which the parameters appear in the parameterized SQL query. The <xref:System.Data.SqlClient?displayProperty=fullName> provider, which is the default ADO.NET provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, associates the parameters in the collection by matching the name of the parameter with the placeholder in the SQL query. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).       The DeleteParameters property retrieves the <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare DeleteParameters property and call the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method when using data-bound controls, such as <xref:System.Web.UI.WebControls.DropDownList> (unlike other controls, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private `OnDelete` event handler, which explicitly calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_121_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_121_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;></xref> that contains the parameters used by the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*> property."
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: SqlDataSource.Deleting
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs before a delete operation."
  remarks: "Handle the Deleting event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.SqlDataSource> control performs the delete operation.       The connection to the underlying data source is not yet open when the event handler delegate is called. Therefore, you cannot cancel the operation directly by calling the <xref:System.Data.Common.DbCommand.Cancel%2A> method on the <xref:System.Data.Common.DbCommand> object that is exposed by the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> object. You can, however, cancel the database operation by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> object to `true`.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates how to handle the Deleting event that is raised before a <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation occurs. Because this example deletes data from the Northwind database, an <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> handler is added to attempt to back up the database to disk before the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_101_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_101_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control has data caching enabled."
  remarks: "The <xref:System.Web.UI.WebControls.SqlDataSource> control supports data caching. While data is cached, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the cache rather than from the underlying database. When the cache expires, the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method retrieves data from the underlying database, and then caches the data again.       The <xref:System.Web.UI.WebControls.SqlDataSource> control automatically caches data when the EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> property is set to a value greater than 0, which indicates the number of seconds that the cache stores data before retrieving a fresh set.      > [!IMPORTANT] >  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user&quot;s access to the data. If you expect more than one user to access the data, and you want each retrieval to the data to be verified by the security configurations for the database, do not use caching."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. The EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> is set to 20 seconds. Because the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> field by default, users of this page will see fresh data every 20 seconds.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_591_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_591_1.aspx)]"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if data caching is enabled for the data source control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.SqlDataSource.EnableCaching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The EnableCaching property is set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> when caching is not supported by the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  id: FilterExpression
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a filtering expression that is applied when the <xref:System.Web.UI.WebControls.SqlDataSource.Select*> method is called."
  remarks: "The FilterExpression property value is a format string expression (a string that is processed by the <xref:System.String.Format%2A?displayProperty=fullName> method) that uses the values in the FilterExpression collection for any substitution parameters included in the string. The filter expression syntax is the same syntax that is accepted by the <xref:System.Data.DataView.RowFilter%2A> property, because the filter expression is applied to the <xref:System.Data.DataView.RowFilter%2A> property of the <xref:System.Data.DataView> object that is returned from executing the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method. For more information, see <xref:System.Data.DataColumn.Expression%2A>.       If you add parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection, you can also include format string placeholders (for example, `&quot;{0}&quot;)` in the expression to substitute for parameter values. The placeholders are replaced according to the index of the parameter in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. If an object in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection is `null`, the object will be replaced by an empty string.       You can include parameters in the FilterExpression property. If the parameter is a string or character type, enclose the parameter in single quotation marks. Quotation marks are not required, if the parameter is a numeric type. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection contains the parameters that are evaluated for the placeholders that are found in the FilterExpression property.       The <xref:System.Web.UI.WebControls.SqlDataSource> control supports filtering data only when in the <xref:System.Web.UI.WebControls.SqlDataSourceMode> mode.       The FilterExpression property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database and filter it using a FilterExpression string and the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. The FilterExpression property is applied any time the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the FilterExpression contains a placeholder for a filter parameter, which is contained in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the selection for the <xref:System.Web.UI.WebControls.DropDownList> control causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_89_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_89_1.aspx)]"
  syntax:
    content: public string FilterExpression { get; set; }
    return:
      type: System.String
      description: "A string that represents a filtering expression applied when data is retrieved using the <xref:System.Web.UI.WebControls.SqlDataSource.Select*> method."
  overload: System.Web.UI.WebControls.SqlDataSource.FilterExpression*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The FilterExpression property was set and the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> is in <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;></xref> mode."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Filtering
  id: Filtering
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Filtering
  nameWithType: SqlDataSource.Filtering
  fullName: System.Web.UI.WebControls.SqlDataSource.Filtering
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs before a filter operation."
  remarks: "Handle the Filtering event to perform validation operations on filter parameter values before the <xref:System.Web.UI.WebControls.SqlDataSource> control performs a filter operation. You can cancel the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> object to `true`. The event is raised only if the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property is set.       The Filtering event delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  id: FilterParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a collection of parameters that are associated with any parameter placeholders that are in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*> string."
  remarks: "The parameters in the FilterParameters collection are associated with any parameters that are specified in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property. The parameter placeholders that are specified in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property are matched by order to parameter objects in the FilterParameters collection when the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is called.       The FilterParameters property retrieves the <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database and filter it using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and FilterParameters properties. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control is applied anytime the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property contains a placeholder for a filter parameter, which is contained in the FilterParameters collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the <xref:System.Web.UI.WebControls.DropDownList> selection causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1207_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1207_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;></xref> that contains a set of parameters associated with any parameter placeholders found in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*> property."
  overload: System.Web.UI.WebControls.SqlDataSource.FilterParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  id: GetDbProviderFactory
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetDbProviderFactory()
  nameWithType: SqlDataSource.GetDbProviderFactory()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Returns the <xref href=&quot;System.Data.Common.DbProviderFactory&quot;></xref> object that is associated with the ADO.NET provider that is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName*> property."
  remarks: "The <xref:System.Data.Common.DbProviderFactory> property is used by the <xref:System.Web.UI.WebControls.SqlDataSource> control to create the correct ADO.NET connection, command, and parameter objects when interacting with a database."
  syntax:
    content: protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();
    parameters: []
    return:
      type: System.Data.Common.DbProviderFactory
      description: "A <xref href=&quot;System.Data.Common.DbProviderFactory&quot;></xref> that represents the identified ADO.NET provider; otherwise, and instance of the <xref href=&quot;System.Data.SqlClient&quot;></xref>, if no provider is set."
  overload: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: SqlDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the named data source view that is associated with the data source control."
  remarks: "The <xref:System.Web.UI.WebControls.SqlDataSource> control supports only one data source view. As with all data source view objects, the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the data source control defines its capabilities, performs all work that is necessary to retrieve data from the underlying database, and performs operations, such as sorting, inserting, deleting, and updating."
  syntax:
    content: protected override System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "The name of the view to retrieve. Because the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> supports only one view, `viewName` is ignored."
    return:
      type: System.Web.UI.DataSourceView
      description: "The <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref> named &quot;Table&quot; that is associated with the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>."
  overload: System.Web.UI.WebControls.SqlDataSource.GetView*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>viewName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or something other than `Table`."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: SqlDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a collection of names representing the list of view objects that are associated with the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control."
  remarks: "The <xref:System.Web.UI.WebControls.SqlDataSource> control supports only one view on its underlying data, named `&quot;Table&quot;`. The GetViewNames method returns a single-element collection of this one view name."
  syntax:
    content: protected override System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "An <xref:System.Collections.ICollection> that contains the names of the views associated with the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>."
  overload: System.Web.UI.WebControls.SqlDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Insert
  id: Insert
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Insert()
  nameWithType: SqlDataSource.Insert()
  fullName: System.Web.UI.WebControls.SqlDataSource.Insert()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Performs an insert operation using the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*> SQL string and any parameters that are in the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters*> collection."
  remarks: "Before the insert operation is performed, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event. You can handle this event to examine the values of the parameters and to perform any preprocessing before the Insert operation. To perform an insert operation, the <xref:System.Web.UI.WebControls.SqlDataSourceView> object builds an <xref:System.Data.Common.DbCommand> object using the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> text and any associated <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> properties, and then executes the <xref:System.Data.Common.DbCommand> object against the underlying database.       After the operation completes, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event. You can handle this event to examine any return values and error codes and to perform any post-processing.       The Insert method is provided for programmatic access to the `Insert` method. If the <xref:System.Web.UI.WebControls.SqlDataSource> control is associated with a data-bound control, the data-bound control automatically calls the `Insert` method.       The Insert method delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and then the <xref:System.Web.UI.WebControls.DropDownList> is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_101_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_101_1.aspx)]"
  syntax:
    content: public int Insert ();
    parameters: []
    return:
      type: System.Int32
      description: "A value that represents the number of rows inserted into the underlying database."
  overload: System.Web.UI.WebControls.SqlDataSource.Insert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> cannot establish a connection with the underlying data source."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  id: InsertCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the SQL string that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control uses to insert data into the underlying database."
  remarks: "The InsertCommand represents either an SQL query or the name of a stored procedure, and is used by the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method.       Because different database products use different varieties of SQL, the syntax of the SQL string depends on the current ADO.NET provider being used, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. If the SQL string is a parameterized query or command, the placeholder of the parameter also depends on the ADO.NET provider being used. For example, if the provider is the <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the placeholder of the parameter is `&quot;@parameterName&quot;`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `&quot;?&quot;`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).       The InsertCommand can be an SQL string or the name of a stored procedure, if the data source supports stored procedures.       This property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.      > [!IMPORTANT] >  For security purposes, the InsertCommand property is not stored is view state. Because it is possible to decode the contents of view state on the client, storing sensitive information about the database structure in view state could result in an information disclosure vulnerability.      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This section contains two code examples. The first code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The second code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row into the <xref:System.Web.UI.WebControls.GridView> control and as a form to insert new records.  \n  \n> [!NOTE]\n>  These examples show how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values into the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and the <xref:System.Web.UI.WebControls.DropDownList> control is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_805_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_805_1.aspx)]  \n  \n The following code example demonstrates how to retrieve data from SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> control and as a form to insert new records.  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_805_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_805_2.aspx)]"
  syntax:
    content: public string InsertCommand { get; set; }
    return:
      type: System.String
      description: "An SQL string that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> uses to insert data."
  overload: System.Web.UI.WebControls.SqlDataSource.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  id: InsertCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether the text in the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*> property is an SQL statement or the name of a stored procedure."
  remarks: "The InsertCommandType property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control."
  example:
  - "The following code example demonstrates how to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.GridView> control. It also demonstrates how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n The <xref:System.Web.UI.WebControls.GridView> control displays a set of data and the <xref:System.Web.UI.WebControls.DetailsView> displays the details for a particular row. If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. The stored procedure name is set in the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> property and identified as a stored procedure by setting the InsertCommandType property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value.  \n  \n After data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_948_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_948_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref> values. The default is the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref> value."
  overload: System.Web.UI.WebControls.SqlDataSource.InsertCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: SqlDataSource.Inserted
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when an insert operation has completed."
  remarks: "Handle the Inserted event to examine the values of output parameters after an insert operation has completed. The output parameters are available from the <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> object that is associated with the event.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the Inserted event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_73_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_73_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: SqlDataSource.Inserting
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs before an insert operation."
  remarks: "Handle the Inserting event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.SqlDataSource> control performs the insert operation. The connection to the underlying data source is not yet open when the event handler delegate is called. Therefore, you cannot cancel the operation directly by calling the <xref:System.Data.Common.DbCommand.Cancel%2A> method on the <xref:System.Data.Common.DbCommand> object that is exposed by the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> property. You can, however, cancel the database operation by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> object to `true`.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the `DataBind` method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_151_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_151_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the parameters collection that contains the parameters that are used by the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*> property from the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref> object that is associated with the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control."
  remarks: "The InsertParameters property retrieves the <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.       If the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> property contains a parameterized SQL query, the InsertParameters collection contains any <xref:System.Web.UI.WebControls.Parameter> objects that correspond to the parameter placeholders in the SQL string.       Depending on the ADO.NET provider, the order of the parameters in the InsertParameters collection might be important. The <xref:System.Data.OleDb?displayProperty=fullName> and <xref:System.Data.Odbc?displayProperty=fullName> providers associate the parameters in the collection according to the order that the parameters appear in the parameterized SQL query. The <xref:System.Data.SqlClient?displayProperty=fullName> provider, which is the default ADO.NET provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, associates the parameters in the collection by matching the name of the parameter with a placeholder alias in the SQL query. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and the <xref:System.Web.UI.WebControls.DropDownList> control is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_596_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_596_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;></xref> that contains the parameters used by the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*> property."
  overload: System.Web.UI.WebControls.SqlDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: SqlDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSource.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Loads the state of the properties in the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control that need to be persisted."
  remarks: "The LoadViewState method is used to load the previously saved view state of the <xref:System.Web.UI.WebControls.SqlDataSource> control."
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "An object that represents the state of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>."
  overload: System.Web.UI.WebControls.SqlDataSource.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  id: OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a format string to apply to the names of any parameters that are passed to the <xref:System.Web.UI.WebControls.SqlDataSource.Delete*> or <xref:System.Web.UI.WebControls.SqlDataSource.Update*> method."
  remarks: "The OldValuesParameterFormatString format string is applied only to primary keys, such as those that are identified by the `DataKeyNames` property of the associated data-bound control, or in delete and update scenarios where the <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value and a set of `oldValues` are passed to the corresponding data method. In this case, the format string is applied to each parameter name in the `oldValues` collection.       Two common scenarios where you might change the OldValuesParameterFormatString property are as follows:      -   To differentiate between old and new values in updates. When the <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value, parameters for both the original and new values are added to the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection. Without the formatting string, two parameters with the same name would be created for each data field. By changing the name of the original value parameter, you can compare the data to the original data source to detect conflicts and compare key values.      -   Some visual designers implement a particular naming scheme for original values and keys."
  syntax:
    content: public string OldValuesParameterFormatString { get; set; }
    return:
      type: System.String
      description: "A string that represents a format string applied to the names of any <code>oldValues</code> parameters passed to the <xref:System.Web.UI.WebControls.SqlDataSource.Delete*> or <xref:System.Web.UI.WebControls.SqlDataSource.Update*> methods. The default is &quot;{0}&quot;."
  overload: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: SqlDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Adds a <xref href=&quot;System.Web.UI.Page.LoadComplete&quot;></xref> event handler to the <xref href=&quot;System.Web.UI.Page&quot;></xref> control that contains the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control."
  remarks: "The event handler that is added by the <xref:System.Web.UI.WebControls.SqlDataSource> object updates the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> values. If the values are updated, the <xref:System.Web.UI.IDataSource.DataSourceChanged> event is raised, causing any controls that are bound to the <xref:System.Web.UI.WebControls.SqlDataSource> control to rebind."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Web.UI.WebControls.SqlDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName
  id: ProviderName
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
  fullName: System.Web.UI.WebControls.SqlDataSource.ProviderName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the name of the .NET Framework data provider that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control uses to connect to an underlying data source."
  remarks: "The .NET Framework includes the following data providers:      -   The <xref:System.Data.SqlClient?displayProperty=fullName> provider is the default .NET Framework Data Provider for SQL Server.      -   The <xref:System.Data.OleDb?displayProperty=fullName> provider is the .NET Framework Data Provider for OLE DB.      -   The <xref:System.Data.Odbc?displayProperty=fullName> provider is the .NET Framework Data Provider for ODBC.      -   The <xref:System.Data.OracleClient?displayProperty=fullName> provider is the .NET Framework Data Provider for Oracle.       The ProviderName property is never set to the name of an unmanaged ADO.NET provider, such as `MSDAORA`. For more information, see [Selecting Data Using the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).       If you change the ProviderName property, the <xref:System.Web.UI.IDataSource.DataSourceChanged> event is raised, causing any controls that are bound to the <xref:System.Web.UI.WebControls.SqlDataSource> to rebind.       A list of available providers is specified in the `DbProviderFactories` subsection of the `system.data` section of the Machine.config file."
  example:
  - "This section contains two code examples. The first code demonstrates how to connect to a SQL Server database using the default .NET Framework Data Provider for SQL Server for the <xref:System.Web.UI.WebControls.SqlDataSource> control, the <xref:System.Data.SqlClient?displayProperty=fullName>. The second code example demonstrates how to connect to an ODBC database using the .NET Framework Data Provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>.  \n  \n The following code example demonstrates how to connect to a SQL Server database using the default data provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, the <xref:System.Data.SqlClient?displayProperty=fullName>. Whenever the ProviderName property is not explicitly set, the default provider is used. The <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is provider-specific.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1309_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1309_1.aspx)]  \n  \n The following code example, which is functionally the same as the preceding code example, demonstrates how to connect to an ODBC database using the .NET Framework Data Provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>. The <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN) that is used to connect to the ODBC database.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1309_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1309_2.aspx)]"
  syntax:
    content: public virtual string ProviderName { get; set; }
    return:
      type: System.String
      description: "The name of the data provider that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> uses; otherwise, the ADO.NET provider for Microsoft SQL Server, if no provider is set. The default is the ADO.NET provider for Microsoft SQL Server."
  overload: System.Web.UI.WebControls.SqlDataSource.ProviderName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: SqlDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Saves the current view state of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control."
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "An object that contains the saved state of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>."
  overload: System.Web.UI.WebControls.SqlDataSource.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  id: Select(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Select(DataSourceSelectArguments)
  nameWithType: SqlDataSource.Select(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSource.Select(DataSourceSelectArguments)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Retrieves data from the underlying database by using the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*> SQL string and any parameters that are in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> collection."
  remarks: "The Select method is automatically called during the <xref:System.Web.UI.Control.PreRender> phase of the page life cycle. It is called by data-bound controls that have been attached to a <xref:System.Web.UI.WebControls.SqlDataSource> control through their <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property.       The <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> method returns a <xref:System.Data.DataView> object if the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value. The <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> method returns a <xref:System.Data.IDataReader> object if the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property is set to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value. Close the <xref:System.Data.IDataReader> object when you have finished reading the data.       Before the Select operation is performed, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> event. You can handle this event to examine the values of the parameters and to perform any processing before the Select operation.       After the Select operation completes, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Selected> event. You can handle this event to examine any return values and error codes and to perform any post-processing.       If the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property is set to <xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName> and caching is enabled, the <xref:System.Web.UI.WebControls.SqlDataSource> object retrieves data from and saves data to the cache during the Select operation. The cache is created, discarded, or refreshed based on the caching behavior that is specified by the combination of the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> properties.      > [!IMPORTANT] >  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user&quot;s access to the data. If you expect more than one user to access the data, and you want each retrieval of data to be verified by the security configurations for the database, do not use caching.       If the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> property is set to <xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName> and a <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property has been specified, the filter expression is evaluated with any supplied <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties and the resulting filter is applied to the list of data during the Select operation.       The Select method delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control. To perform a data retrieval operation, the <xref:System.Web.UI.WebControls.SqlDataSourceView> builds a <xref:System.Data.Common.DbCommand> object by using the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text and any associated <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> values, and then executes the <xref:System.Data.Common.DbCommand> against the underlying database.      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following examples show how to programmatically call the Select method and set values based on the result of the query. The following example shows the declarative code for the Web controls.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource.Select#1](~/add/codesnippet/csharp/475f4e1e-4832-4407-9121-_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#1](~/add/codesnippet/visualbasic/475f4e1e-4832-4407-9121-_1.aspx)]  \n  \n The following example shows how to programmatically call the Select method. The <xref:System.Web.UI.WebControls.SqlDataSource> control returns an integer. The value of the integer is used to set the text of a <xref:System.Web.UI.WebControls.Label> control and to determine whether to display a <xref:System.Web.UI.WebControls.HyperLink> control.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#2](~/add/codesnippet/visualbasic/475f4e1e-4832-4407-9121-_2.vb)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource.Select#2](~/add/codesnippet/csharp/475f4e1e-4832-4407-9121-_2.cs)]"
  syntax:
    content: public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);
    parameters:
    - id: arguments
      type: System.Web.UI.DataSourceSelectArguments
      description: "A <xref href=&quot;System.Web.UI.DataSourceSelectArguments&quot;></xref> object that is used to request operations on the data beyond basic data retrieval."
    return:
      type: System.Collections.IEnumerable
      description: "An <xref:System.Collections.IEnumerable> list of data rows."
  overload: System.Web.UI.WebControls.SqlDataSource.Select*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> object cannot establish a connection with the underlying data source."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  id: SelectCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the SQL string that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control uses to retrieve data from the underlying database."
  remarks: "The SelectCommand property represents an SQL query or the name of a stored procedure, and is used by the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method to retrieve data from a SQL Server database. If you use an asterisk (*) in the Select command to select all columns, and if you use automatic code generation to perform update or delete operations, make sure that no columns have spaces in their names.       Because different database products use different varieties of SQL, the syntax of the SQL string depends on the current ADO.NET provider being used, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. If the SQL string is a parameterized query or command, the placeholder of the parameter also depends on the ADO.NET provider being used. For example, if the provider is the <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the placeholder of the parameter is `&quot;@parameterName&quot;`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `&quot;?&quot;`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).       The SelectCommand property can be an SQL string or the name of a stored procedure, if the data source supports stored procedures.       The SelectCommand property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.      > [!IMPORTANT] >  For security purposes, the SelectCommand property is not stored is view state. Because it is possible to decode the contents of view state on the client, storing sensitive information about the database structure in view state could result in an information disclosure vulnerability.      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the SelectCommand text to a basic SQL query to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to set the SelectCommand text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n In both examples, there is no need to explicitly call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method because the data-bound controls that are attached to the data source control through the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property will automatically call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method during the <xref:System.Web.UI.Control.PreRender> phase.  \n  \n The following code example demonstrates how to set the SelectCommand text to a basic SQL query to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1253_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1253_1.aspx)]  \n  \n The following code example demonstrates how to set the SelectCommand text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control. The SelectCommand property can be an SQL query or the name of a stored procedure, if the data source supports stored procedures.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1253_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1253_2.aspx)]"
  syntax:
    content: public string SelectCommand { get; set; }
    return:
      type: System.String
      description: "An SQL string or the name of a stored procedure that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> uses to retrieve data."
  overload: System.Web.UI.WebControls.SqlDataSource.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  id: SelectCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether the text in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*> property is an SQL query or the name of a stored procedure."
  remarks: "The SelectCommandType property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control."
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text to the name of a stored procedure and the SelectCommandType property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value, in order to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_358_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_358_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref> values. The default is the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref> value."
  overload: System.Web.UI.WebControls.SqlDataSource.SelectCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: SqlDataSource.Selected
  fullName: System.Web.UI.WebControls.SqlDataSource.Selected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when a data retrieval operation has completed."
  remarks: "Handle the Selected event to examine the values of output parameters after a data retrieval operation has completed. The output parameters are available from the <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> object that is associated with the event.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: SqlDataSource.Selecting
  fullName: System.Web.UI.WebControls.SqlDataSource.Selecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs before a data retrieval operation."
  remarks: "Handle the Selecting event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.SqlDataSource> control performs the select operation. The select arguments are available from the <xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs> object that is associated with the event.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the parameters collection that contains the parameters that are used by the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*> property from the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref> object that is associated with the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control."
  remarks: "If the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property contains a parameterized SQL query, the SelectParameters collection contains any <xref:System.Web.UI.WebControls.Parameter> objects that correspond to the parameter placeholders in the SQL string.       Depending on the ADO.NET provider, the order of the parameters in the SelectParameters collection might be important. The <xref:System.Data.OleDb?displayProperty=fullName> and <xref:System.Data.Odbc?displayProperty=fullName> providers associate the parameters in the collection according to the order that the parameters appear in the parameterized SQL query. The <xref:System.Data.SqlClient?displayProperty=fullName> provider, which is the default ADO.NET provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, associates the parameters in the collection by matching the name of the parameter with a placeholder alias in the SQL query. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).       The SelectParameters property retrieves the <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server by setting the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property to an SQL query. The SQL query is parameterized and the placeholder in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property is matched to the <xref:System.Web.UI.WebControls.ControlParameter> object that is added to the SelectParameters collection. The <xref:System.Web.UI.WebControls.DropDownList> control, which the <xref:System.Web.UI.WebControls.ControlParameter> is bound to, acts as a filter for what is displayed in the <xref:System.Web.UI.WebControls.ListBox> control.  \n  \n For information about other types of parameters you can use, see the <xref:System.Web.UI.WebControls.Parameter> class overview.  \n  \n> [!NOTE]\n>  Because the parameter is used in a WHERE clause, the use of the SelectParameters property in the code example is functionally equivalent to using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1230_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1230_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;></xref> that contains the parameters used by the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*> property."
  overload: System.Web.UI.WebControls.SqlDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  id: SortParameterName
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the name of a stored procedure parameter that is used to sort retrieved data when data retrieval is performed using a stored procedure."
  remarks: "The <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> property is evaluated only when the SQL command that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> property is the name of a stored procedure. In this case, if the SortParameterName property is set, it contains the name of a parameter that is used to sort the results of the stored procedure.       If the <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> property is set, it is prepended to the <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> property."
  syntax:
    content: public string SortParameterName { get; set; }
    return:
      type: System.String
      description: "The name of a stored procedure parameter used to sort retrieved data when data retrieval is performed using a stored procedure."
  overload: System.Web.UI.WebControls.SqlDataSource.SortParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  id: SqlCacheDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a semicolon-delimited string that indicates which databases and tables to use for the Microsoft SQL Server cache dependency."
  remarks: "The <xref:System.Web.UI.WebControls.SqlDataSource> control supports an optional expiration policy based on the <xref:System.Web.Caching.SqlCacheDependency> object for the data cache (the service must be configured for the database server).       The SqlCacheDependency string identifies databases and tables according to the same format that is used by the `@ Page` directive, where the first part of the string is a connection string to a Microsoft SQL Server database, followed by a colon delimiter, and finally the name of the database table (for example, `&quot;connectionstring1:table1&quot;`). If the SqlCacheDependency property depends on more than one table, the connection string-and-table name pairs are separated by semicolons (for example, `&quot;connectionstring1:table1&quot;;connectionstring2:table2&quot;`).      > [!IMPORTANT] >  When you are using client impersonation under Microsoft Windows authentication, the data is cached when the first user accesses the data. If another user requests the same data, the data is retrieved from the cache. The data is not retrieved by making another call to the database to verify the user&quot;s access to the data. If you expect more than one user to access the data, and you want each retrieval to the data to be verified by the security configurations for the database, do not use caching."
  example:
  - "The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.SqlDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.SqlDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is refreshed by the <xref:System.Web.UI.WebControls.SqlDataSource> control the next time the database is polled.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_795_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_795_1.aspx)]"
  syntax:
    content: public virtual string SqlCacheDependency { get; set; }
    return:
      type: System.String
      description: "A string that indicates which databases and tables to use for the SQL Server cache dependency."
  overload: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: SqlDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Tracks view state changes to the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control so that the changes can be stored in the <xref href=&quot;System.Web.UI.StateBag&quot;></xref> object for the control."
  remarks: "The TrackViewState method is overridden to mark the starting point to begin tracking and saving changes to the control as part of the view state for the control."
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.SqlDataSource.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Update
  id: Update
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Update()
  nameWithType: SqlDataSource.Update()
  fullName: System.Web.UI.WebControls.SqlDataSource.Update()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Performs an update operation using the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*> SQL string and any parameters that are in the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters*> collection."
  remarks: "The Update method is automatically called by the <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.FormView> controls during postback if the data has been changed. For data that has been changed in other controls, the Update method can be explicitly called on postback during the <xref:System.Windows.Forms.Form.Load> event.       Before the Update operation is performed, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Updating> event. You can handle this event to examine the values of the parameters and to perform any preprocessing before an Update operation.       After the Update operation completes, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> method is called to raise the <xref:System.Web.UI.WebControls.SqlDataSource.Updated> event. You can handle this event to examine any return values and error codes and to perform any post-processing.       The Update method delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control. To perform an update operation, the <xref:System.Web.UI.WebControls.SqlDataSourceView> builds a <xref:System.Data.Common.DbCommand> object using the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> text and any associated <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> properties, and then executes the <xref:System.Data.Common.DbCommand> object against the underlying database.      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Updating> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The second code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is set with a parameterized SQL statement, and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the Update method explicitly.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_109_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_109_1.aspx)]  \n  \n The following code example demonstrates how to display data that is retrieved from a SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_109_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_109_2.aspx)]"
  syntax:
    content: public int Update ();
    parameters: []
    return:
      type: System.Int32
      description: "A value that represents the number of rows updated in the underlying database."
  overload: System.Web.UI.WebControls.SqlDataSource.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> cannot establish a connection with the underlying data source."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  id: UpdateCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the SQL string that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control uses to update data in the underlying database."
  remarks: "The UpdateCommand represents an SQL query or the name of a stored procedure, and is used by the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method.       Because different database products use different varieties of SQL, the syntax of the SQL string depends on the current ADO.NET provider being used, which is identified by the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property. If the SQL string is a parameterized query or command, the placeholder of the parameter also depends on the ADO.NET provider being used. For example, if the provider is the <xref:System.Data.SqlClient?displayProperty=fullName>, which is the default provider for the <xref:System.Web.UI.WebControls.SqlDataSource> class, the placeholder of the parameter is `&quot;@parameterName&quot;`. However, if the provider is set to the <xref:System.Data.Odbc?displayProperty=fullName> or <xref:System.Data.OleDb?displayProperty=fullName>, the placeholder of the parameter is `&quot;?&quot;`. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).       The UpdateCommand property can be an SQL string or the name of a stored procedure, if the data source supports stored procedures.       The UpdateCommand property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.      > [!IMPORTANT] >  For security purposes, the UpdateCommand property is not stored is view state. Because it is possible to decode the contents of view state on the client, storing sensitive information about the database structure in view state could result in an information disclosure vulnerability.      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the UpdateCommand property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a Microsoft SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control.  \n  \n The following code example demonstrates how to set the UpdateCommand property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection, inferring the parameters from the <xref:System.Web.UI.WebControls.BoundField> objects, and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method when the **Update** link on the editable <xref:System.Web.UI.WebControls.GridView> is selected. This example also includes some post-processing: after a record is updated, a notification e-mail message is sent.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_301_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_301_1.aspx)]  \n  \n The following code example, which is functionally identical to the preceding code example, demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> is set to the ADO.NET provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>, and the <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_301_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_301_2.aspx)]"
  syntax:
    content: public string UpdateCommand { get; set; }
    return:
      type: System.String
      description: "An SQL string that the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> uses to update data."
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  id: UpdateCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether the text in the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*> property is an SQL statement or the name of a stored procedure."
  remarks: "The UpdateCommandType property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control."
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "One of the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref> values. The default is the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref> value."
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: SqlDataSource.Updated
  fullName: System.Web.UI.WebControls.SqlDataSource.Updated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs when an update operation has completed."
  remarks: "Handle the Updated event to examine the values of output parameters after an update operation has completed. The output parameters are available from the <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> object that is associated with the event.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates how to display and update data that is retrieved from an ODBC database in a <xref:System.Web.UI.WebControls.GridView> control. After a record is successfully updated, the Updated event is handled by an event handler to perform a post-processing step where an e-mail notification is sent.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_103_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_103_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the parameters collection that contains the parameters that are used by the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*> property from the <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref> control that is associated with the <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref> control."
  remarks: "If the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property contains a parameterized SQL query, the UpdateParameters collection contains any <xref:System.Web.UI.WebControls.Parameter> objects that correspond to the parameter placeholders in the SQL string.       Parameter names might be affected by the <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> property, specifically if the name identifies a primary key, such as a key specified using the `DataKeyNames` property of the data-bound control, or in delete and update scenarios where the <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property is set to the <xref:System.Web.UI.ConflictOptions> value and a set of `oldValues` are passed to the corresponding data method. In this case, the format string is applied to each parameter name in the `oldValues` collection.       The order of the parameters in the UpdateParameters collection might be important, depending on the ADO.NET provider. The <xref:System.Data.OleDb?displayProperty=fullName> and <xref:System.Data.Odbc?displayProperty=fullName> providers associate the parameters in the collection according to the order that the parameters appear in the parameterized SQL query. The <xref:System.Data.SqlClient?displayProperty=fullName> provider, which is the default ADO.NET provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, associates the parameters in the collection by matching the name of the parameter with a placeholder alias in the SQL query. For more information about parameterized SQL queries and commands, see [Using Parameters with the SqlDataSource Control](~/add/includes/ajax-current-ext-md.md).       The UpdateParameters property retrieves the <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> property that is contained by the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> is set with a parameterized SQL statement and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the UpdateParameters collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method explicitly.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1200_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1200_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;></xref> that contains the parameters used by the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*> property."
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: SqlDataSource.Updating
  fullName: System.Web.UI.WebControls.SqlDataSource.Updating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Occurs before an update operation."
  remarks: "Handle the Updating event to perform additional initialization operations that are specific to your application, to validate the values of parameters, or to change the parameter values before the <xref:System.Web.UI.WebControls.SqlDataSource> control performs the update operation. The connection to the underlying data source is not yet open when the event handler delegate is called. Therefore, you cannot directly cancel the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> database operation by calling the <xref:System.Data.Common.DbCommand.Cancel%2A> method on the <xref:System.Data.Common.DbCommand> object that is exposed by the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> object. You can, however, cancel the database operation by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> to `true`.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).      > [!IMPORTANT] >  Values are inserted into parameters without validation, which is a potential security threat. Use the Updating event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_75_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_75_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataSourceControl
  isExternal: false
  name: System.Web.UI.DataSourceControl
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource()
  nameWithType: SqlDataSource.SqlDataSource()
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource()
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource(String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource(String,String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String,String)
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
  fullName: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
- uid: System.Web.UI.ConflictOptions
  parent: System.Web.UI
  isExternal: false
  name: ConflictOptions
  nameWithType: ConflictOptions
  fullName: System.Web.UI.ConflictOptions
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
  fullName: System.Web.UI.WebControls.SqlDataSource.ConnectionString
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CreateDataSourceView(String)
  nameWithType: SqlDataSource.CreateDataSourceView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(String)
- uid: System.Web.UI.WebControls.SqlDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceView
  nameWithType: SqlDataSourceView
  fullName: System.Web.UI.WebControls.SqlDataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSourceMode
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceMode
  nameWithType: SqlDataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSource.Delete
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Delete()
  nameWithType: SqlDataSource.Delete()
  fullName: System.Web.UI.WebControls.SqlDataSource.Delete()
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceCommandType
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandType
  nameWithType: SqlDataSourceCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Deleted
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Deleted
  nameWithType: SqlDataSource.Deleted
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleted
- uid: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceStatusEventHandler
  nameWithType: SqlDataSourceStatusEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.SqlDataSource.Deleting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Deleting
  nameWithType: SqlDataSource.Deleting
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleting
- uid: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandEventHandler
  nameWithType: SqlDataSourceCommandEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.SqlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterExpression
- uid: System.Web.UI.WebControls.SqlDataSource.Filtering
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Filtering
  nameWithType: SqlDataSource.Filtering
  fullName: System.Web.UI.WebControls.SqlDataSource.Filtering
- uid: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceFilteringEventHandler
  nameWithType: SqlDataSourceFilteringEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterParameters
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetDbProviderFactory()
  nameWithType: SqlDataSource.GetDbProviderFactory()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory()
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: SqlDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: SqlDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.SqlDataSource.Insert
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Insert()
  nameWithType: SqlDataSource.Insert()
  fullName: System.Web.UI.WebControls.SqlDataSource.Insert()
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommand
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Inserted
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Inserted
  nameWithType: SqlDataSource.Inserted
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserted
- uid: System.Web.UI.WebControls.SqlDataSource.Inserting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Inserting
  nameWithType: SqlDataSource.Inserting
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserting
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertParameters
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: SqlDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSource.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: SqlDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
  fullName: System.Web.UI.WebControls.SqlDataSource.ProviderName
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SaveViewState()
  nameWithType: SqlDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.SaveViewState()
- uid: System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Select(DataSourceSelectArguments)
  nameWithType: SqlDataSource.Select(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSource.Select(DataSourceSelectArguments)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.DataSourceSelectArguments
  parent: System.Web.UI
  isExternal: false
  name: DataSourceSelectArguments
  nameWithType: DataSourceSelectArguments
  fullName: System.Web.UI.DataSourceSelectArguments
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommand
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Selected
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Selected
  nameWithType: SqlDataSource.Selected
  fullName: System.Web.UI.WebControls.SqlDataSource.Selected
- uid: System.Web.UI.WebControls.SqlDataSource.Selecting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Selecting
  nameWithType: SqlDataSource.Selecting
  fullName: System.Web.UI.WebControls.SqlDataSource.Selecting
- uid: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceSelectingEventHandler
  nameWithType: SqlDataSourceSelectingEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectParameters
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.SqlDataSource.SortParameterName
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: TrackViewState()
  nameWithType: SqlDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.TrackViewState()
- uid: System.Web.UI.WebControls.SqlDataSource.Update
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Update()
  nameWithType: SqlDataSource.Update()
  fullName: System.Web.UI.WebControls.SqlDataSource.Update()
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Updated
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Updated
  nameWithType: SqlDataSource.Updated
  fullName: System.Web.UI.WebControls.SqlDataSource.Updated
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.SqlDataSource.Updating
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Updating
  nameWithType: SqlDataSource.Updating
  fullName: System.Web.UI.WebControls.SqlDataSource.Updating
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource
  nameWithType: SqlDataSource.SqlDataSource
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CreateDataSourceView
  nameWithType: SqlDataSource.CreateDataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSource.Delete*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Delete
  nameWithType: SqlDataSource.Delete
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetDbProviderFactory
  nameWithType: SqlDataSource.GetDbProviderFactory
- uid: System.Web.UI.WebControls.SqlDataSource.GetView*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetView
  nameWithType: SqlDataSource.GetView
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: SqlDataSource.GetViewNames
- uid: System.Web.UI.WebControls.SqlDataSource.Insert*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Insert
  nameWithType: SqlDataSource.Insert
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: LoadViewState
  nameWithType: SqlDataSource.LoadViewState
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OnInit
  nameWithType: SqlDataSource.OnInit
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SaveViewState
  nameWithType: SqlDataSource.SaveViewState
- uid: System.Web.UI.WebControls.SqlDataSource.Select*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Select
  nameWithType: SqlDataSource.Select
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: TrackViewState
  nameWithType: SqlDataSource.TrackViewState
- uid: System.Web.UI.WebControls.SqlDataSource.Update*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Update
  nameWithType: SqlDataSource.Update
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
