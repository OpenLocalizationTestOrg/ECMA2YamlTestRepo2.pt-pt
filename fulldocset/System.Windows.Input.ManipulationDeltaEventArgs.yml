### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ManipulationDeltaEventArgs
  id: ManipulationDeltaEventArgs
  children:
  - System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  - System.Windows.Input.ManipulationDeltaEventArgs.Complete
  - System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  - System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  - System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  - System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  - System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  - System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  - System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  langs:
  - csharp
  name: ManipulationDeltaEventArgs
  nameWithType: ManipulationDeltaEventArgs
  fullName: System.Windows.Input.ManipulationDeltaEventArgs
  type: Class
  summary: "Provides data for the <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;></xref> event."
  remarks: "The ManipulationDeltaEventArgs class contains data about changes in the position of a manipulation. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation. You use one of those properties to transform the manipulated object.       You can end a manipulation by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method or force the manipulation into inertia by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> method."
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: 'public sealed class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  id: Cancel
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Cancel()
  nameWithType: ManipulationDeltaEventArgs.Cancel()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Cancel()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Cancels the manipulation."
  remarks: "If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur. Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia."
  syntax:
    content: public bool Cancel ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the manipulation was successfully canceled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete
  id: Complete
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Complete()
  nameWithType: ManipulationDeltaEventArgs.Complete()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Complete()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Completes the manipulation without inertia."
  remarks: "You can call the Complete method to end the manipulation. For example, when an object reaches the edge of a window, you can call Complete to prevent the object from going off the screen."
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Complete*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  id: CumulativeManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets the cumulated changes of the current manipulation."
  remarks: "The CumulativeManipulation property contains the total changes that occurred for the current manipulation. You can use CumulativeManipulation to transform the manipulated object."
  syntax:
    content: public System.Windows.Input.ManipulationDelta CumulativeManipulation { get; }
    return:
      type: System.Windows.Input.ManipulationDelta
      description: "The cumulated changes of the current manipulation."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  id: DeltaManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets the most recent changes of the current manipulation."
  remarks: "The DeltaManipulation property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred. You can use this property to transform the manipulated object."
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the DeltaManipulation property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public System.Windows.Input.ManipulationDelta DeltaManipulation { get; }
    return:
      type: System.Windows.Input.ManipulationDelta
      description: "The most recent changes of the current manipulation."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "To be added."
    - id: genericTarget
      type: System.Object
      description: "To be added."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  id: IsInertial
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets a value that indicates whether the <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;></xref> event occurs during inertia."
  remarks: "You can use this method to determine whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurs during inertia or while the user has contact with the element that receives the <xref:System.Windows.UIElement.ManipulationDelta> event."
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public bool IsInertial { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;></xref> event occurs during inertia; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the event occurs while the user has contact with the <xref href=&quot;System.Windows.UIElement&quot;></xref>."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  id: ManipulationContainer
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets the container that defines the coordinates for the manipulation."
  syntax:
    content: public System.Windows.IInputElement ManipulationContainer { get; }
    return:
      type: System.Windows.IInputElement
      description: "The container that defines the coordinates for the manipulation."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  id: ManipulationOrigin
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets the point from which the manipulation originated."
  syntax:
    content: public System.Windows.Point ManipulationOrigin { get; }
    return:
      type: System.Windows.Point
      description: "The point from which the manipulation originated."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  id: Manipulators
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets a collection of objects that represents the touch contacts for the manipulation."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}
      description: "A collection of objects that represents the touch contacts for the manipulation."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  id: ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ReportBoundaryFeedback(ManipulationDelta)
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Specifies that the manipulation has gone beyond certain boundaries."
  remarks: "Use the ReportBoundaryFeedback method to indicate that an element has moved beyond a certain boundary.  For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window.  When you call ReportBoundaryFeedback, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs.  By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached.  You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior."
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event that calls the ReportBoundaryFeedback method when the user moves the element over the edge of its container.  To test this example, follow the steps in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md) and replace the code in step 5 with this code.  \n  \n [!code-cs[BasicManipulation#ReportBoundaryFeedback](~/add/codesnippet/csharp/basicmanipulation/reportboundaryfeedbackexample.xaml.cs#reportboundaryfeedback)]\n [!code-vb[BasicManipulation#ReportBoundaryFeedback](~/add/codesnippet/visualbasic/basicmanipulation/reportboundaryfeedbackexample.xaml.vb#reportboundaryfeedback)]"
  syntax:
    content: public void ReportBoundaryFeedback (System.Windows.Input.ManipulationDelta unusedManipulation);
    parameters:
    - id: unusedManipulation
      type: System.Windows.Input.ManipulationDelta
      description: "The portion of the manipulation that represents moving beyond the boundary."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>unusedManipulation</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  id: StartInertia
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: StartInertia()
  nameWithType: ManipulationDeltaEventArgs.StartInertia()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <xref href=&quot;System.Windows.UIElement.ManipulationInertiaStarting&quot;></xref> event."
  syntax:
    content: public void StartInertia ();
    parameters: []
  overload: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  id: Velocities
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets the rates of the most recent changes to the manipulation."
  syntax:
    content: public System.Windows.Input.ManipulationVelocities Velocities { get; }
    return:
      type: System.Windows.Input.ManipulationVelocities
      description: "The rates of the most recent changes to the manipulation."
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputEventArgs
  isExternal: false
  name: System.Windows.Input.InputEventArgs
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Cancel()
  nameWithType: ManipulationDeltaEventArgs.Cancel()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Cancel()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Complete()
  nameWithType: ManipulationDeltaEventArgs.Complete()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Complete()
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
- uid: System.Windows.Input.ManipulationDelta
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationDelta
  nameWithType: ManipulationDelta
  fullName: System.Windows.Input.ManipulationDelta
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<IManipulator>
  nameWithType: IEnumerable<IManipulator>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.IManipulator>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.IManipulator
    name: IManipulator
    nameWithType: IManipulator
    fullName: IManipulator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ReportBoundaryFeedback(ManipulationDelta)
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: StartInertia()
  nameWithType: ManipulationDeltaEventArgs.StartInertia()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia()
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
- uid: System.Windows.Input.ManipulationVelocities
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationVelocities
  nameWithType: ManipulationVelocities
  fullName: System.Windows.Input.ManipulationVelocities
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Cancel
  nameWithType: ManipulationDeltaEventArgs.Cancel
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Complete
  nameWithType: ManipulationDeltaEventArgs.Complete
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ReportBoundaryFeedback
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: StartInertia
  nameWithType: ManipulationDeltaEventArgs.StartInertia
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
