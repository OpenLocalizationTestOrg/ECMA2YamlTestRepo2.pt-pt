### YamlMime:ManagedReference
items:
- uid: System.Web.Hosting.HostingEnvironment
  id: HostingEnvironment
  children:
  - System.Web.Hosting.HostingEnvironment.#ctor
  - System.Web.Hosting.HostingEnvironment.ApplicationHost
  - System.Web.Hosting.HostingEnvironment.ApplicationID
  - System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath
  - System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath
  - System.Web.Hosting.HostingEnvironment.Cache
  - System.Web.Hosting.HostingEnvironment.DecrementBusyCount
  - System.Web.Hosting.HostingEnvironment.Impersonate
  - System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr)
  - System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr,System.String)
  - System.Web.Hosting.HostingEnvironment.InClientBuildManager
  - System.Web.Hosting.HostingEnvironment.IncrementBusyCount
  - System.Web.Hosting.HostingEnvironment.InitializationException
  - System.Web.Hosting.HostingEnvironment.InitializeLifetimeService
  - System.Web.Hosting.HostingEnvironment.InitiateShutdown
  - System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment
  - System.Web.Hosting.HostingEnvironment.IsHosted
  - System.Web.Hosting.HostingEnvironment.MapPath(System.String)
  - System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU
  - System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU
  - System.Web.Hosting.HostingEnvironment.MessageReceived
  - System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Action{System.Threading.CancellationToken})
  - System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  - System.Web.Hosting.HostingEnvironment.RegisterObject(System.Web.Hosting.IRegisteredObject)
  - System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)
  - System.Web.Hosting.HostingEnvironment.SetCultures
  - System.Web.Hosting.HostingEnvironment.SetCultures(System.String)
  - System.Web.Hosting.HostingEnvironment.ShutdownReason
  - System.Web.Hosting.HostingEnvironment.SiteName
  - System.Web.Hosting.HostingEnvironment.StopListening
  - System.Web.Hosting.HostingEnvironment.UnregisterObject(System.Web.Hosting.IRegisteredObject)
  - System.Web.Hosting.HostingEnvironment.VirtualPathProvider
  langs:
  - csharp
  name: HostingEnvironment
  nameWithType: HostingEnvironment
  fullName: System.Web.Hosting.HostingEnvironment
  type: Class
  summary: "Provides application-management functions and application services to a managed application within its application domain. This class cannot be inherited."
  remarks: "Each managed application domain contains a static instance of the HostingEnvironment class, which provides access to application-management functions and application services."
  example:
  - "The following code example is a webpage that displays the application information available from the HostingEnvironment object.  \n  \n [!code-vb[System.Web.Hosting.HostingEnvironment#1](~/add/codesnippet/visualbasic/t-system.web.hosting.hos_1.aspx)]\n [!code-cs[System.Web.Hosting.HostingEnvironment#1](~/add/codesnippet/csharp/t-system.web.hosting.hos_1.aspx)]"
  syntax:
    content: 'public sealed class HostingEnvironment : MarshalByRefObject'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.#ctor
  id: '#ctor'
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: HostingEnvironment()
  nameWithType: HostingEnvironment.HostingEnvironment()
  fullName: System.Web.Hosting.HostingEnvironment.HostingEnvironment()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Hosting.HostingEnvironment&quot;></xref> class."
  remarks: "The HostingEnvironment constructor initializes the <xref:System.Web.Hosting.HostingEnvironment> object. The HostingEnvironment constructor is called only once by the application&quot;s <xref:System.Web.Hosting.ApplicationManager> object. Calling the HostingEnvironment constructor more than once will cause an <xref:System.InvalidOperationException> exception to be thrown."
  syntax:
    content: public HostingEnvironment ();
    parameters: []
  overload: System.Web.Hosting.HostingEnvironment.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The HostingEnvironment constructor is called more than once."
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.ApplicationHost
  id: ApplicationHost
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: ApplicationHost
  nameWithType: HostingEnvironment.ApplicationHost
  fullName: System.Web.Hosting.HostingEnvironment.ApplicationHost
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "This property supports the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] infrastructure and is not intended to be used directly from your code."
  syntax:
    content: public static System.Web.Hosting.IApplicationHost ApplicationHost { get; }
    return:
      type: System.Web.Hosting.IApplicationHost
      description: "An object that contains information about the application host."
  overload: System.Web.Hosting.HostingEnvironment.ApplicationHost*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.ApplicationID
  id: ApplicationID
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: ApplicationID
  nameWithType: HostingEnvironment.ApplicationID
  fullName: System.Web.Hosting.HostingEnvironment.ApplicationID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets the unique identifier of the application."
  remarks: "The application must be running with <xref:System.Web.AspNetHostingPermissionLevel> set to high trust to access the ApplicationID property."
  syntax:
    content: public static string ApplicationID { get; }
    return:
      type: System.String
      description: "The unique identifier of the application."
  overload: System.Web.Hosting.HostingEnvironment.ApplicationID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath
  id: ApplicationPhysicalPath
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: ApplicationPhysicalPath
  nameWithType: HostingEnvironment.ApplicationPhysicalPath
  fullName: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets the physical path on disk to the application&quot;s directory."
  remarks: ''
  example:
  - "The following code example uses the ApplicationPhysicalPath property to construct a path to a data file in the application's App_Data directory. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#27](~/add/codesnippet/csharp/p-system.web.hosting.hos_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#27](~/add/codesnippet/visualbasic/p-system.web.hosting.hos_1.vb)]"
  syntax:
    content: public static string ApplicationPhysicalPath { get; }
    return:
      type: System.String
      description: "The physical path on disk to the application&quot;s directory."
  overload: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath
  id: ApplicationVirtualPath
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: ApplicationVirtualPath
  nameWithType: HostingEnvironment.ApplicationVirtualPath
  fullName: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets the root virtual path of the application."
  remarks: "The ApplicationVirtualPath property always returns &quot;`/&quot;` as the first character of the returned value. If the application is located in the root of the website, the return value is just &quot;`/&quot;`."
  syntax:
    content: public static string ApplicationVirtualPath { get; }
    return:
      type: System.String
      description: "The root virtual path of the application with no trailing slash (/)."
  overload: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.Cache
  id: Cache
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: Cache
  nameWithType: HostingEnvironment.Cache
  fullName: System.Web.Hosting.HostingEnvironment.Cache
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets the <xref href=&quot;System.Web.Caching.Cache&quot;></xref> instance for the current application."
  syntax:
    content: public static System.Web.Caching.Cache Cache { get; }
    return:
      type: System.Web.Caching.Cache
      description: "The current <xref href=&quot;System.Web.Caching.Cache&quot;></xref> instance."
  overload: System.Web.Hosting.HostingEnvironment.Cache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.DecrementBusyCount
  id: DecrementBusyCount
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: DecrementBusyCount()
  nameWithType: HostingEnvironment.DecrementBusyCount()
  fullName: System.Web.Hosting.HostingEnvironment.DecrementBusyCount()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Reduces the count of busy objects in the hosted environment by one."
  remarks: "When a busy registered object finishes its work, it calls the DecrementBusyCount method to signal the <xref:System.Web.Hosting.HostingEnvironment> object that it has completed processing and to reduce the count of busy objects by one.       If the busy count is greater than zero, the hosting application will not time out even if there are no pending requests.       There must be a call to the DecrementBusyCount method for each call to the <xref:System.Web.Hosting.HostingEnvironment.IncrementBusyCount%2A> method."
  syntax:
    content: public static void DecrementBusyCount ();
    parameters: []
  overload: System.Web.Hosting.HostingEnvironment.DecrementBusyCount*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.Impersonate
  id: Impersonate
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: Impersonate()
  nameWithType: HostingEnvironment.Impersonate()
  fullName: System.Web.Hosting.HostingEnvironment.Impersonate()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Impersonates the user represented by the application identity."
  syntax:
    content: public static IDisposable Impersonate ();
    parameters: []
    return:
      type: System.IDisposable
      description: "An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user&quot;s context."
  overload: System.Web.Hosting.HostingEnvironment.Impersonate*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The process cannot impersonate."
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr)
  id: Impersonate(System.IntPtr)
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: Impersonate(IntPtr)
  nameWithType: HostingEnvironment.Impersonate(IntPtr)
  fullName: System.Web.Hosting.HostingEnvironment.Impersonate(IntPtr)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Impersonates the user represented by the specified user token."
  syntax:
    content: public static IDisposable Impersonate (IntPtr token);
    parameters:
    - id: token
      type: System.IntPtr
      description: "The handle of a Windows account token."
    return:
      type: System.IDisposable
      description: "An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user&quot;s context."
  overload: System.Web.Hosting.HostingEnvironment.Impersonate*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The process cannot impersonate."
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr,System.String)
  id: Impersonate(System.IntPtr,System.String)
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: Impersonate(IntPtr,String)
  nameWithType: HostingEnvironment.Impersonate(IntPtr,String)
  fullName: System.Web.Hosting.HostingEnvironment.Impersonate(IntPtr,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Impersonates the user specified by the configuration settings for the specified virtual path, or the specified user token."
  remarks: "The Impersonate method impersonates the user that results after applying all  elements in the configuration settings affecting the specified virtual path. If an `identity` element is not specified for the virtual path, the Impersonate method impersonates the specified Windows account."
  syntax:
    content: public static IDisposable Impersonate (IntPtr userToken, string virtualPath);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "The handle of a Windows account token."
    - id: virtualPath
      type: System.String
      description: "The path to the requested resource."
    return:
      type: System.IDisposable
      description: "An <xref:System.IDisposable> object that represents the Windows user prior to impersonation; this object can be used to revert to the original user&quot;s context."
  overload: System.Web.Hosting.HostingEnvironment.Impersonate*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The process cannot impersonate."
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.InClientBuildManager
  id: InClientBuildManager
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: InClientBuildManager
  nameWithType: HostingEnvironment.InClientBuildManager
  fullName: System.Web.Hosting.HostingEnvironment.InClientBuildManager
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets a value that indicates whether the hosting environment has access to the ASP.NET build system."
  syntax:
    content: public static bool InClientBuildManager { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the application domain is the ASP.NET hosted application domain used in <xref uid=&quot;langword_csharp_ClientBuildManager&quot; name=&quot;ClientBuildManager&quot; href=&quot;&quot;></xref> scenarios; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Hosting.HostingEnvironment.InClientBuildManager*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.IncrementBusyCount
  id: IncrementBusyCount
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: IncrementBusyCount()
  nameWithType: HostingEnvironment.IncrementBusyCount()
  fullName: System.Web.Hosting.HostingEnvironment.IncrementBusyCount()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Increases the count of busy objects in the hosted environment by one."
  remarks: "Registered objects signal the <xref:System.Web.Hosting.HostingEnvironment> object that it is running and to increase the count of busy objects by one.       If the busy count is greater than zero, the hosting application will not time out even if there are no pending requests.       There must be a call to the <xref:System.Web.Hosting.HostingEnvironment.DecrementBusyCount%2A> method for each call to the IncrementBusyCount method."
  syntax:
    content: public static void IncrementBusyCount ();
    parameters: []
  overload: System.Web.Hosting.HostingEnvironment.IncrementBusyCount*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.InitializationException
  id: InitializationException
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: InitializationException
  nameWithType: HostingEnvironment.InitializationException
  fullName: System.Web.Hosting.HostingEnvironment.InitializationException
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets any exception thrown during initialization of the <xref href=&quot;System.Web.Hosting.HostingEnvironment&quot;></xref> object."
  syntax:
    content: public static Exception InitializationException { get; }
    return:
      type: System.Exception
      description: "The exception thrown during initialization of the <xref href=&quot;System.Web.Hosting.HostingEnvironment&quot;></xref> object. If no exception was thrown, returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Hosting.HostingEnvironment.InitializationException*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService
  id: InitializeLifetimeService
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: InitializeLifetimeService()
  nameWithType: HostingEnvironment.InitializeLifetimeService()
  fullName: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gives the <xref href=&quot;System.Web.Hosting.HostingEnvironment&quot;></xref> object an infinite lifetime by preventing a lease from being created."
  remarks: "This method overrides the <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> method in its base class. It always returns `null` and prevents a lease from being created that would limit the <xref:System.Web.Hosting.HostingEnvironment> object&quot;s lifetime."
  syntax:
    content: public override object InitializeLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.InitiateShutdown
  id: InitiateShutdown
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: InitiateShutdown()
  nameWithType: HostingEnvironment.InitiateShutdown()
  fullName: System.Web.Hosting.HostingEnvironment.InitiateShutdown()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Starts shutting down the web application associated with this host and removes registered objects from the system."
  remarks: "Use the InitiateShutdown method to stop a web application domain and remove any objects registered with the <xref:System.Web.Hosting.HostingEnvironment.RegisterObject%2A> method. This method returns immediately, before the shutdown is complete.       The <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method is called on each registered object with the passed parameter set to `false` to allow each registered object to shut down asynchronously. After waiting for the amount of time specified in the `shutdownTimeout` attribute of the  configuration element, the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method is called again with the passed parameter set to `true` for each registered object remaining.       Once all registered objects have finished shutting down, the <xref:System.Web.Hosting.HostingEnvironment> objects shuts down the application domain."
  syntax:
    content: public static void InitiateShutdown ();
    parameters: []
  overload: System.Web.Hosting.HostingEnvironment.InitiateShutdown*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment
  id: IsDevelopmentEnvironment
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: IsDevelopmentEnvironment
  nameWithType: HostingEnvironment.IsDevelopmentEnvironment
  fullName: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets a value that indicats whether the current application is in a development environment."
  syntax:
    content: public static bool IsDevelopmentEnvironment { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the application is in a development environment; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.IsHosted
  id: IsHosted
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: IsHosted
  nameWithType: HostingEnvironment.IsHosted
  fullName: System.Web.Hosting.HostingEnvironment.IsHosted
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets a value indicating whether the current application domain is being hosted by an <xref href=&quot;System.Web.Hosting.ApplicationManager&quot;></xref> object."
  syntax:
    content: public static bool IsHosted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the application domain is hosted by an <xref href=&quot;System.Web.Hosting.ApplicationManager&quot;></xref> object; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Hosting.HostingEnvironment.IsHosted*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.MapPath(System.String)
  id: MapPath(System.String)
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: MapPath(String)
  nameWithType: HostingEnvironment.MapPath(String)
  fullName: System.Web.Hosting.HostingEnvironment.MapPath(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Maps a virtual path to a physical path on the server."
  syntax:
    content: public static string MapPath (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "The virtual path (absolute or relative)."
    return:
      type: System.String
      description: "The physical path on the server specified by <code>virtualPath</code>."
  overload: System.Web.Hosting.HostingEnvironment.MapPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU
  id: MaxConcurrentRequestsPerCPU
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: MaxConcurrentRequestsPerCPU
  nameWithType: HostingEnvironment.MaxConcurrentRequestsPerCPU
  fullName: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets or sets the maximum concurrent requests per CPU."
  syntax:
    content: public static int MaxConcurrentRequestsPerCPU { get; set; }
    return:
      type: System.Int32
      description: "The maximum concurrent requests per CPU."
  overload: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU
  id: MaxConcurrentThreadsPerCPU
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: MaxConcurrentThreadsPerCPU
  nameWithType: HostingEnvironment.MaxConcurrentThreadsPerCPU
  fullName: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets or sets the maximum concurrent threads per CPU."
  syntax:
    content: public static int MaxConcurrentThreadsPerCPU { get; set; }
    return:
      type: System.Int32
      description: "The maximum concurrent threads per CPU."
  overload: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.MessageReceived
  id: MessageReceived
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: MessageReceived()
  nameWithType: HostingEnvironment.MessageReceived()
  fullName: System.Web.Hosting.HostingEnvironment.MessageReceived()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "This method supports the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] infrastructure and is not intended to be used directly from your code."
  syntax:
    content: public static void MessageReceived ();
    parameters: []
  overload: System.Web.Hosting.HostingEnvironment.MessageReceived*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Action{System.Threading.CancellationToken})
  id: QueueBackgroundWorkItem(System.Action{System.Threading.CancellationToken})
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: QueueBackgroundWorkItem(Action<CancellationToken>)
  nameWithType: HostingEnvironment.QueueBackgroundWorkItem(Action<CancellationToken>)
  fullName: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(Action<CancellationToken>)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "[Supported in the .NET Framework 4.5.2 and later versions]       Schedules a task which can run in the background, independent of any request."
  remarks: "Differs from a normal ThreadPool work item in that ASP.NET can keep track of how many work items registered through this API are currently running, and the ASP.NET runtime will try to delay AppDomain shutdown until these work items have finished executing. This API cannot be called outside of an ASP.NET-managed AppDomain. The provided CancellationToken will be signaled when the application is shutting down.       QueueBackgroundWorkItem takes a Task-returning callback; the work item will be considered finished when the callback returns."
  syntax:
    content: public static void QueueBackgroundWorkItem (Action<System.Threading.CancellationToken> workItem);
    parameters:
    - id: workItem
      type: System.Action{System.Threading.CancellationToken}
      description: "A unit of execution."
  overload: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  id: QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: QueueBackgroundWorkItem(Func<CancellationToken,Task>)
  nameWithType: HostingEnvironment.QueueBackgroundWorkItem(Func<CancellationToken,Task>)
  fullName: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(Func<CancellationToken,Task>)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "[Supported in the .NET Framework 4.5.2 and later versions]       Schedules a task which can run in the background, independent of any request."
  remarks: "Differs from a normal ThreadPool work item in that ASP.NET can keep track of how many work items registered through this API are currently running, and the ASP.NET runtime will try to delay AppDomain shutdown until these work items have finished executing. This API cannot be called outside of an ASP.NET-managed AppDomain. The provided CancellationToken will be signaled when the application is shutting down.       QueueBackgroundWorkItem takes a Task-returning callback; the work item will be considered finished when the returned Task transitions to a terminal state."
  syntax:
    content: public static void QueueBackgroundWorkItem (Func<System.Threading.CancellationToken,System.Threading.Tasks.Task> workItem);
    parameters:
    - id: workItem
      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
      description: "A unit of execution."
  overload: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.RegisterObject(System.Web.Hosting.IRegisteredObject)
  id: RegisterObject(System.Web.Hosting.IRegisteredObject)
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: RegisterObject(IRegisteredObject)
  nameWithType: HostingEnvironment.RegisterObject(IRegisteredObject)
  fullName: System.Web.Hosting.HostingEnvironment.RegisterObject(IRegisteredObject)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Places an object in the list of registered objects for the application."
  remarks: "The <xref:System.Web.Hosting.ApplicationManager> class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain. The RegisterObject method is used to register previously created objects with the hosting environment. Objects registered with the RegisterObject method must implement the <xref:System.Web.Hosting.IRegisteredObject> interface.       To use a registered object, follow these steps:      1.  Create a new instance of your registered object by calling the <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A?displayProperty=fullName> method.      2.  Call a type-specific method to initialize your new object. In the initialization method, call the RegisterObject method to add the object to the list of registered objects.      3.  Call the <xref:System.Web.Hosting.ApplicationManager.GetObject%2A?displayProperty=fullName> method to return the registered object when required.      4.  When you wish to stop your object, call the <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName> method. The <xref:System.Web.Hosting.ApplicationManager.StopObject%2A?displayProperty=fullName> method in turn calls the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName> method.      5.  In the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A?displayProperty=fullName> method, have your object call the <xref:System.Web.Hosting.HostingEnvironment.UnregisterObject%2A> method."
  example:
  - "The following code example is an implementation of a `Start` method for a registered object. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.IRegisteredObject> interface overview topic.  \n  \n [!code-cs[System.Web.Hosting.ApplicationManager#2](~/add/codesnippet/csharp/2fd0c065-ec76-48c8-bbb1-_1.cs)]\n [!code-vb[System.Web.Hosting.ApplicationManager#2](~/add/codesnippet/visualbasic/2fd0c065-ec76-48c8-bbb1-_1.vb)]"
  syntax:
    content: public static void RegisterObject (System.Web.Hosting.IRegisteredObject obj);
    parameters:
    - id: obj
      type: System.Web.Hosting.IRegisteredObject
      description: "The object to register."
  overload: System.Web.Hosting.HostingEnvironment.RegisterObject*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)
  id: RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: RegisterVirtualPathProvider(VirtualPathProvider)
  nameWithType: HostingEnvironment.RegisterVirtualPathProvider(VirtualPathProvider)
  fullName: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(VirtualPathProvider)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Registers a new <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;></xref> instance with the ASP.NET compilation system."
  remarks: "The RegisterVirtualPathProvider method adds the specified <xref:System.Web.Hosting.VirtualPathProvider> instance to the application&quot;s list of virtual-path providers.       For more information, see the <xref:System.Web.Hosting.VirtualPathProvider> class overview."
  example:
  - "The following code example is part of an application startup method that registers a custom <xref:System.Web.Hosting.VirtualPathProvider> instance with the compilation system. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-vb[System.Web.Hosting.VirtualPathProvider#11](~/add/codesnippet/visualbasic/6c4fefcc-d45a-4168-86ab-_1.vb)]\n [!code-cs[System.Web.Hosting.VirtualPathProvider#11](~/add/codesnippet/csharp/6c4fefcc-d45a-4168-86ab-_1.cs)]"
  syntax:
    content: public static void RegisterVirtualPathProvider (System.Web.Hosting.VirtualPathProvider virtualPathProvider);
    parameters:
    - id: virtualPathProvider
      type: System.Web.Hosting.VirtualPathProvider
      description: "The new <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;></xref> instance to add to the compilation system."
  overload: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.SetCultures
  id: SetCultures
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: SetCultures()
  nameWithType: HostingEnvironment.SetCultures()
  fullName: System.Web.Hosting.HostingEnvironment.SetCultures()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Sets the current thread to the culture specified in the application configuration file."
  remarks: "The SetCultures method sets the current thread to the culture specified in the [globalization Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7) element in the application&quot;s configuration file."
  syntax:
    content: public static IDisposable SetCultures ();
    parameters: []
    return:
      type: System.IDisposable
      description: "An <xref:System.IDisposable> object that represents the culture prior to changing; this object can be used to revert to the previous culture."
  overload: System.Web.Hosting.HostingEnvironment.SetCultures*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.SetCultures(System.String)
  id: SetCultures(System.String)
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: SetCultures(String)
  nameWithType: HostingEnvironment.SetCultures(String)
  fullName: System.Web.Hosting.HostingEnvironment.SetCultures(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Sets the current thread to the culture of the specified virtual path."
  remarks: "The SetCultures method sets the current thread to the culture that results after applying all  elements in the configuration files affecting the specified virtual path."
  syntax:
    content: public static IDisposable SetCultures (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "The path that contains the culture information."
    return:
      type: System.IDisposable
      description: "An <xref:System.IDisposable> object that represents the culture prior to changing; this object can be used to revert to the previous culture."
  overload: System.Web.Hosting.HostingEnvironment.SetCultures*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.ShutdownReason
  id: ShutdownReason
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: ShutdownReason
  nameWithType: HostingEnvironment.ShutdownReason
  fullName: System.Web.Hosting.HostingEnvironment.ShutdownReason
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Returns an enumerated value that indicates why the application terminated."
  syntax:
    content: public static System.Web.ApplicationShutdownReason ShutdownReason { get; }
    return:
      type: System.Web.ApplicationShutdownReason
      description: "One of the <xref href=&quot;System.Web.ApplicationShutdownReason&quot;></xref> values."
  overload: System.Web.Hosting.HostingEnvironment.ShutdownReason*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.SiteName
  id: SiteName
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: SiteName
  nameWithType: HostingEnvironment.SiteName
  fullName: System.Web.Hosting.HostingEnvironment.SiteName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets the name of the site."
  syntax:
    content: public static string SiteName { get; }
    return:
      type: System.String
      description: "The name of the site."
  overload: System.Web.Hosting.HostingEnvironment.SiteName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.StopListening
  id: StopListening
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: StopListening
  nameWithType: HostingEnvironment.StopListening
  fullName: System.Web.Hosting.HostingEnvironment.StopListening
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "[Supported in the .NET Framework 4.5.1 only]       Occurs when the worker process or application pool associated with this host has stopped listening for new requests and will eventually shut down."
  remarks: "When an application pool and its associated worker processes are being shut down by IIS, for example when an application pool has reached a scheduled recycle interval, IIS notifies the ASP.NET runtime that the application is shutting down and the worker process for the application pool stops listening for new requests. Applications that use long-running requests, for example [SignalR](http://go.microsoft.com/fwlink/?LinkID=285432) applications, can listen for the StopListening event and gracefully shut down their long-running operations when IIS has initiated the shutdown of an application pool and its associated worker processes.      > [!WARNING] >  There are several design considerations that a developer must consider when implementing the StopListening event:   >    >  1.  The StopListening event is only available for applications that are configured to use the IIS integrated pipeline.   > 2.  Developers must not throw errors from their StopListening implementations; throwing errors will have unpredictable results.   > 3.  Due to the concurrent nature of operations within ASP.NET, there is no guarantee that ASP.NET will call a StopListening event once it has been implemented by a developer.   > 4.  The StopListening event can execute concurrently with other <xref:System.Web.Hosting.IRegisteredObject> notifications.   > 5.  Developers need to be aware that ASP.NET may shut down the application domain while their StopListening event is executing and design their implementations to handle that possibility.   > 6.  StopListening event handlers must not block; blocking implementations will result in deadlocks, and IIS will terminate the worker process when the rapid fail protection interval is reached."
  syntax:
    content: public static event EventHandler StopListening;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.UnregisterObject(System.Web.Hosting.IRegisteredObject)
  id: UnregisterObject(System.Web.Hosting.IRegisteredObject)
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: UnregisterObject(IRegisteredObject)
  nameWithType: HostingEnvironment.UnregisterObject(IRegisteredObject)
  fullName: System.Web.Hosting.HostingEnvironment.UnregisterObject(IRegisteredObject)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Removes an object from the list of registered objects for the application."
  remarks: "The <xref:System.Web.Hosting.ApplicationManager> class enables methods outside the current application domain to create, manage, and destroy objects inside the current application domain. The UnregisterObject method is used to remove previously registered objects from the hosting environment."
  example:
  - "The following code example is the <xref:System.Web.Hosting.IRegisteredObject.Stop%2A> method for a registered object. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.IRegisteredObject> interface overview topic.  \n  \n [!code-cs[System.Web.Hosting.ApplicationManager#3](~/add/codesnippet/csharp/0c500c41-6bed-4c83-8364-_1.cs)]\n [!code-vb[System.Web.Hosting.ApplicationManager#3](~/add/codesnippet/visualbasic/0c500c41-6bed-4c83-8364-_1.vb)]"
  syntax:
    content: public static void UnregisterObject (System.Web.Hosting.IRegisteredObject obj);
    parameters:
    - id: obj
      type: System.Web.Hosting.IRegisteredObject
      description: "The object to remove."
  overload: System.Web.Hosting.HostingEnvironment.UnregisterObject*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.HostingEnvironment.VirtualPathProvider
  id: VirtualPathProvider
  parent: System.Web.Hosting.HostingEnvironment
  langs:
  - csharp
  name: VirtualPathProvider
  nameWithType: HostingEnvironment.VirtualPathProvider
  fullName: System.Web.Hosting.HostingEnvironment.VirtualPathProvider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets the virtual path provider for this application."
  remarks: "When more than one <xref:System.Web.Hosting.VirtualPathProvider> instance is registered, the <xref:System.Web.Hosting.HostingEnvironment> object manages the call chain. You cannot control the order in which virtual path providers are called."
  syntax:
    content: public static System.Web.Hosting.VirtualPathProvider VirtualPathProvider { get; }
    return:
      type: System.Web.Hosting.VirtualPathProvider
      description: "The <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;></xref> instance for this application."
  overload: System.Web.Hosting.HostingEnvironment.VirtualPathProvider*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.Hosting.HostingEnvironment.#ctor
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: HostingEnvironment()
  nameWithType: HostingEnvironment.HostingEnvironment()
  fullName: System.Web.Hosting.HostingEnvironment.HostingEnvironment()
- uid: System.Web.Hosting.HostingEnvironment.ApplicationHost
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: ApplicationHost
  nameWithType: HostingEnvironment.ApplicationHost
  fullName: System.Web.Hosting.HostingEnvironment.ApplicationHost
- uid: System.Web.Hosting.IApplicationHost
  parent: System.Web.Hosting
  isExternal: false
  name: IApplicationHost
  nameWithType: IApplicationHost
  fullName: System.Web.Hosting.IApplicationHost
- uid: System.Web.Hosting.HostingEnvironment.ApplicationID
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: ApplicationID
  nameWithType: HostingEnvironment.ApplicationID
  fullName: System.Web.Hosting.HostingEnvironment.ApplicationID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: ApplicationPhysicalPath
  nameWithType: HostingEnvironment.ApplicationPhysicalPath
  fullName: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath
- uid: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: ApplicationVirtualPath
  nameWithType: HostingEnvironment.ApplicationVirtualPath
  fullName: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath
- uid: System.Web.Hosting.HostingEnvironment.Cache
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: Cache
  nameWithType: HostingEnvironment.Cache
  fullName: System.Web.Hosting.HostingEnvironment.Cache
- uid: System.Web.Caching.Cache
  parent: System.Web.Caching
  isExternal: false
  name: Cache
  nameWithType: Cache
  fullName: System.Web.Caching.Cache
- uid: System.Web.Hosting.HostingEnvironment.DecrementBusyCount
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: DecrementBusyCount()
  nameWithType: HostingEnvironment.DecrementBusyCount()
  fullName: System.Web.Hosting.HostingEnvironment.DecrementBusyCount()
- uid: System.Web.Hosting.HostingEnvironment.Impersonate
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: Impersonate()
  nameWithType: HostingEnvironment.Impersonate()
  fullName: System.Web.Hosting.HostingEnvironment.Impersonate()
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr)
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: Impersonate(IntPtr)
  nameWithType: HostingEnvironment.Impersonate(IntPtr)
  fullName: System.Web.Hosting.HostingEnvironment.Impersonate(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Web.Hosting.HostingEnvironment.Impersonate(System.IntPtr,System.String)
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: Impersonate(IntPtr,String)
  nameWithType: HostingEnvironment.Impersonate(IntPtr,String)
  fullName: System.Web.Hosting.HostingEnvironment.Impersonate(IntPtr,String)
- uid: System.Web.Hosting.HostingEnvironment.InClientBuildManager
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: InClientBuildManager
  nameWithType: HostingEnvironment.InClientBuildManager
  fullName: System.Web.Hosting.HostingEnvironment.InClientBuildManager
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Hosting.HostingEnvironment.IncrementBusyCount
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: IncrementBusyCount()
  nameWithType: HostingEnvironment.IncrementBusyCount()
  fullName: System.Web.Hosting.HostingEnvironment.IncrementBusyCount()
- uid: System.Web.Hosting.HostingEnvironment.InitializationException
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: InitializationException
  nameWithType: HostingEnvironment.InitializationException
  fullName: System.Web.Hosting.HostingEnvironment.InitializationException
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: HostingEnvironment.InitializeLifetimeService()
  fullName: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Hosting.HostingEnvironment.InitiateShutdown
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: InitiateShutdown()
  nameWithType: HostingEnvironment.InitiateShutdown()
  fullName: System.Web.Hosting.HostingEnvironment.InitiateShutdown()
- uid: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: IsDevelopmentEnvironment
  nameWithType: HostingEnvironment.IsDevelopmentEnvironment
  fullName: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment
- uid: System.Web.Hosting.HostingEnvironment.IsHosted
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: IsHosted
  nameWithType: HostingEnvironment.IsHosted
  fullName: System.Web.Hosting.HostingEnvironment.IsHosted
- uid: System.Web.Hosting.HostingEnvironment.MapPath(System.String)
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: MapPath(String)
  nameWithType: HostingEnvironment.MapPath(String)
  fullName: System.Web.Hosting.HostingEnvironment.MapPath(String)
- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: MaxConcurrentRequestsPerCPU
  nameWithType: HostingEnvironment.MaxConcurrentRequestsPerCPU
  fullName: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: MaxConcurrentThreadsPerCPU
  nameWithType: HostingEnvironment.MaxConcurrentThreadsPerCPU
  fullName: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU
- uid: System.Web.Hosting.HostingEnvironment.MessageReceived
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: MessageReceived()
  nameWithType: HostingEnvironment.MessageReceived()
  fullName: System.Web.Hosting.HostingEnvironment.MessageReceived()
- uid: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Action{System.Threading.CancellationToken})
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: QueueBackgroundWorkItem(Action<CancellationToken>)
  nameWithType: HostingEnvironment.QueueBackgroundWorkItem(Action<CancellationToken>)
  fullName: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(Action<CancellationToken>)
- uid: System.Action{System.Threading.CancellationToken}
  parent: System
  isExternal: true
  name: Action<CancellationToken>
  nameWithType: Action<CancellationToken>
  fullName: System.Action<System.Threading.CancellationToken>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<System.Threading.CancellationToken>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: QueueBackgroundWorkItem(Func<CancellationToken,Task>)
  nameWithType: HostingEnvironment.QueueBackgroundWorkItem(Func<CancellationToken,Task>)
  fullName: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem(Func<CancellationToken,Task>)
- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<CancellationToken,Task>
  nameWithType: Func<CancellationToken,Task>
  fullName: System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.Hosting.HostingEnvironment.RegisterObject(System.Web.Hosting.IRegisteredObject)
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: RegisterObject(IRegisteredObject)
  nameWithType: HostingEnvironment.RegisterObject(IRegisteredObject)
  fullName: System.Web.Hosting.HostingEnvironment.RegisterObject(IRegisteredObject)
- uid: System.Web.Hosting.IRegisteredObject
  parent: System.Web.Hosting
  isExternal: false
  name: IRegisteredObject
  nameWithType: IRegisteredObject
  fullName: System.Web.Hosting.IRegisteredObject
- uid: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(System.Web.Hosting.VirtualPathProvider)
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: RegisterVirtualPathProvider(VirtualPathProvider)
  nameWithType: HostingEnvironment.RegisterVirtualPathProvider(VirtualPathProvider)
  fullName: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider(VirtualPathProvider)
- uid: System.Web.Hosting.VirtualPathProvider
  parent: System.Web.Hosting
  isExternal: false
  name: VirtualPathProvider
  nameWithType: VirtualPathProvider
  fullName: System.Web.Hosting.VirtualPathProvider
- uid: System.Web.Hosting.HostingEnvironment.SetCultures
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: SetCultures()
  nameWithType: HostingEnvironment.SetCultures()
  fullName: System.Web.Hosting.HostingEnvironment.SetCultures()
- uid: System.Web.Hosting.HostingEnvironment.SetCultures(System.String)
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: SetCultures(String)
  nameWithType: HostingEnvironment.SetCultures(String)
  fullName: System.Web.Hosting.HostingEnvironment.SetCultures(String)
- uid: System.Web.Hosting.HostingEnvironment.ShutdownReason
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: ShutdownReason
  nameWithType: HostingEnvironment.ShutdownReason
  fullName: System.Web.Hosting.HostingEnvironment.ShutdownReason
- uid: System.Web.ApplicationShutdownReason
  parent: System.Web
  isExternal: false
  name: ApplicationShutdownReason
  nameWithType: ApplicationShutdownReason
  fullName: System.Web.ApplicationShutdownReason
- uid: System.Web.Hosting.HostingEnvironment.SiteName
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: SiteName
  nameWithType: HostingEnvironment.SiteName
  fullName: System.Web.Hosting.HostingEnvironment.SiteName
- uid: System.Web.Hosting.HostingEnvironment.StopListening
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: StopListening
  nameWithType: HostingEnvironment.StopListening
  fullName: System.Web.Hosting.HostingEnvironment.StopListening
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.Hosting.HostingEnvironment.UnregisterObject(System.Web.Hosting.IRegisteredObject)
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: UnregisterObject(IRegisteredObject)
  nameWithType: HostingEnvironment.UnregisterObject(IRegisteredObject)
  fullName: System.Web.Hosting.HostingEnvironment.UnregisterObject(IRegisteredObject)
- uid: System.Web.Hosting.HostingEnvironment.VirtualPathProvider
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: VirtualPathProvider
  nameWithType: HostingEnvironment.VirtualPathProvider
  fullName: System.Web.Hosting.HostingEnvironment.VirtualPathProvider
- uid: System.Web.Hosting.HostingEnvironment.#ctor*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: HostingEnvironment
  nameWithType: HostingEnvironment.HostingEnvironment
- uid: System.Web.Hosting.HostingEnvironment.ApplicationHost*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: ApplicationHost
  nameWithType: HostingEnvironment.ApplicationHost
- uid: System.Web.Hosting.HostingEnvironment.ApplicationID*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: ApplicationID
  nameWithType: HostingEnvironment.ApplicationID
- uid: System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: ApplicationPhysicalPath
  nameWithType: HostingEnvironment.ApplicationPhysicalPath
- uid: System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: ApplicationVirtualPath
  nameWithType: HostingEnvironment.ApplicationVirtualPath
- uid: System.Web.Hosting.HostingEnvironment.Cache*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: Cache
  nameWithType: HostingEnvironment.Cache
- uid: System.Web.Hosting.HostingEnvironment.DecrementBusyCount*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: DecrementBusyCount
  nameWithType: HostingEnvironment.DecrementBusyCount
- uid: System.Web.Hosting.HostingEnvironment.Impersonate*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: Impersonate
  nameWithType: HostingEnvironment.Impersonate
- uid: System.Web.Hosting.HostingEnvironment.InClientBuildManager*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: InClientBuildManager
  nameWithType: HostingEnvironment.InClientBuildManager
- uid: System.Web.Hosting.HostingEnvironment.IncrementBusyCount*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: IncrementBusyCount
  nameWithType: HostingEnvironment.IncrementBusyCount
- uid: System.Web.Hosting.HostingEnvironment.InitializationException*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: InitializationException
  nameWithType: HostingEnvironment.InitializationException
- uid: System.Web.Hosting.HostingEnvironment.InitializeLifetimeService*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: InitializeLifetimeService
  nameWithType: HostingEnvironment.InitializeLifetimeService
- uid: System.Web.Hosting.HostingEnvironment.InitiateShutdown*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: InitiateShutdown
  nameWithType: HostingEnvironment.InitiateShutdown
- uid: System.Web.Hosting.HostingEnvironment.IsDevelopmentEnvironment*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: IsDevelopmentEnvironment
  nameWithType: HostingEnvironment.IsDevelopmentEnvironment
- uid: System.Web.Hosting.HostingEnvironment.IsHosted*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: IsHosted
  nameWithType: HostingEnvironment.IsHosted
- uid: System.Web.Hosting.HostingEnvironment.MapPath*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: MapPath
  nameWithType: HostingEnvironment.MapPath
- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentRequestsPerCPU*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: MaxConcurrentRequestsPerCPU
  nameWithType: HostingEnvironment.MaxConcurrentRequestsPerCPU
- uid: System.Web.Hosting.HostingEnvironment.MaxConcurrentThreadsPerCPU*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: MaxConcurrentThreadsPerCPU
  nameWithType: HostingEnvironment.MaxConcurrentThreadsPerCPU
- uid: System.Web.Hosting.HostingEnvironment.MessageReceived*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: MessageReceived
  nameWithType: HostingEnvironment.MessageReceived
- uid: System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: QueueBackgroundWorkItem
  nameWithType: HostingEnvironment.QueueBackgroundWorkItem
- uid: System.Web.Hosting.HostingEnvironment.RegisterObject*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: RegisterObject
  nameWithType: HostingEnvironment.RegisterObject
- uid: System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: RegisterVirtualPathProvider
  nameWithType: HostingEnvironment.RegisterVirtualPathProvider
- uid: System.Web.Hosting.HostingEnvironment.SetCultures*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: SetCultures
  nameWithType: HostingEnvironment.SetCultures
- uid: System.Web.Hosting.HostingEnvironment.ShutdownReason*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: ShutdownReason
  nameWithType: HostingEnvironment.ShutdownReason
- uid: System.Web.Hosting.HostingEnvironment.SiteName*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: SiteName
  nameWithType: HostingEnvironment.SiteName
- uid: System.Web.Hosting.HostingEnvironment.UnregisterObject*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: UnregisterObject
  nameWithType: HostingEnvironment.UnregisterObject
- uid: System.Web.Hosting.HostingEnvironment.VirtualPathProvider*
  parent: System.Web.Hosting.HostingEnvironment
  isExternal: false
  name: VirtualPathProvider
  nameWithType: HostingEnvironment.VirtualPathProvider
