### YamlMime:ManagedReference
items:
- uid: System.Web.HttpApplication
  id: HttpApplication
  children:
  - System.Web.HttpApplication.#ctor
  - System.Web.HttpApplication.AcquireRequestState
  - System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.Application
  - System.Web.HttpApplication.AuthenticateRequest
  - System.Web.HttpApplication.AuthorizeRequest
  - System.Web.HttpApplication.BeginRequest
  - System.Web.HttpApplication.CompleteRequest
  - System.Web.HttpApplication.Context
  - System.Web.HttpApplication.Dispose
  - System.Web.HttpApplication.Disposed
  - System.Web.HttpApplication.EndRequest
  - System.Web.HttpApplication.Error
  - System.Web.HttpApplication.Events
  - System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)
  - System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)
  - System.Web.HttpApplication.Init
  - System.Web.HttpApplication.LogRequest
  - System.Web.HttpApplication.MapRequestHandler
  - System.Web.HttpApplication.Modules
  - System.Web.HttpApplication.PostAcquireRequestState
  - System.Web.HttpApplication.PostAuthenticateRequest
  - System.Web.HttpApplication.PostAuthorizeRequest
  - System.Web.HttpApplication.PostLogRequest
  - System.Web.HttpApplication.PostMapRequestHandler
  - System.Web.HttpApplication.PostReleaseRequestState
  - System.Web.HttpApplication.PostRequestHandlerExecute
  - System.Web.HttpApplication.PostResolveRequestCache
  - System.Web.HttpApplication.PostUpdateRequestCache
  - System.Web.HttpApplication.PreRequestHandlerExecute
  - System.Web.HttpApplication.PreSendRequestContent
  - System.Web.HttpApplication.PreSendRequestHeaders
  - System.Web.HttpApplication.RegisterModule(System.Type)
  - System.Web.HttpApplication.ReleaseRequestState
  - System.Web.HttpApplication.Request
  - System.Web.HttpApplication.RequestCompleted
  - System.Web.HttpApplication.ResolveRequestCache
  - System.Web.HttpApplication.Response
  - System.Web.HttpApplication.Server
  - System.Web.HttpApplication.Session
  - System.Web.HttpApplication.Site
  - System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  - System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  - System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable
  - System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  - System.Web.HttpApplication.UpdateRequestCache
  - System.Web.HttpApplication.User
  langs:
  - csharp
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
  type: Class
  summary: "Define os métodos, propriedades e os eventos que são comuns a todos os objetos de aplicação numa aplicação ASP.NET. Esta classe é a classe base para as aplicações que são definidas pelo utilizador no ficheiro global. asax."
  remarks: "As instâncias da classe HttpApplication são criadas na infraestrutura do ASP.NET, não pelo utilizador diretamente. Uma instância da classe HttpApplication é utilizada para processar o número de pedidos no seu período de duração. No entanto, pode processar apenas um pedido de cada vez. Assim, as variáveis de membro podem ser utilizadas para armazenar dados por pedido.       Uma aplicação desencadeia eventos que podem ser processados por módulos personalizados que implementam o <xref:System.Web.IHttpModule>interface ou por código de processamento do evento que está definido no global. asax de ficheiros.</xref:System.Web.IHttpModule> Módulos personalizados que implementam o <xref:System.Web.IHttpModule>interface pode ser colocada na pasta App_Code ou um DLL na pasta Bin.</xref:System.Web.IHttpModule>       HttpApplication é apresentado no .NET Framework versão 3.5.  Para obter mais informações, consulte [versões e dependências](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando a executar no modo integrado do IIS 7.0, módulos personalizados na pasta Bin ou App_Code pasta são aplicadas a todos os pedidos no pipeline de pedido. Código de processamento de eventos no ficheiro global. asax só se aplica a pedidos que estão mapeados para um processador do ASP.NET.       Os eventos de aplicação são gerados pela seguinte ordem: 1.  <xref:System.Web.HttpApplication.BeginRequest>2.</xref:System.Web.HttpApplication.BeginRequest>  <xref:System.Web.HttpApplication.AuthenticateRequest>3.</xref:System.Web.HttpApplication.AuthenticateRequest>  <xref:System.Web.HttpApplication.PostAuthenticateRequest>4.</xref:System.Web.HttpApplication.PostAuthenticateRequest>  <xref:System.Web.HttpApplication.AuthorizeRequest>5.</xref:System.Web.HttpApplication.AuthorizeRequest>  <xref:System.Web.HttpApplication.PostAuthorizeRequest>6.</xref:System.Web.HttpApplication.PostAuthorizeRequest>  <xref:System.Web.HttpApplication.ResolveRequestCache>7.</xref:System.Web.HttpApplication.ResolveRequestCache>  <xref:System.Web.HttpApplication.PostResolveRequestCache>Depois do <xref:System.Web.HttpApplication.PostResolveRequestCache>eventos e antes do <xref:System.Web.HttpApplication.PostMapRequestHandler>evento, um processador de eventos (que é uma página que corresponda ao URL do pedido) é criado.</xref:System.Web.HttpApplication.PostMapRequestHandler> </xref:System.Web.HttpApplication.PostResolveRequestCache></xref:System.Web.HttpApplication.PostResolveRequestCache> Quando um servidor está em execução do IIS 7.0 no modo integrado do e em, pelo menos, versão do .NET Framework 3.0, o <xref:System.Web.HttpApplication.MapRequestHandler>o evento é gerado.</xref:System.Web.HttpApplication.MapRequestHandler> Quando um servidor que executa o IIS 7.0 no modo clássico ou uma versão anterior do IIS, este evento não pode ser processado.      8.  <xref:System.Web.HttpApplication.PostMapRequestHandler>9.</xref:System.Web.HttpApplication.PostMapRequestHandler> <xref:System.Web.HttpApplication.AcquireRequestState>10.</xref:System.Web.HttpApplication.AcquireRequestState> <xref:System.Web.HttpApplication.PostAcquireRequestState>11.</xref:System.Web.HttpApplication.PostAcquireRequestState> <xref:System.Web.HttpApplication.PreRequestHandlerExecute>O processador de eventos é executado.</xref:System.Web.HttpApplication.PreRequestHandlerExecute>      12. <xref:System.Web.HttpApplication.PostRequestHandlerExecute>13.</xref:System.Web.HttpApplication.PostRequestHandlerExecute> <xref:System.Web.HttpApplication.ReleaseRequestState>14.</xref:System.Web.HttpApplication.ReleaseRequestState> <xref:System.Web.HttpApplication.PostReleaseRequestState>Depois do <xref:System.Web.HttpApplication.PostReleaseRequestState>o evento é gerado, quaisquer filtros de resposta existente irão filtrar a saída.</xref:System.Web.HttpApplication.PostReleaseRequestState></xref:System.Web.HttpApplication.PostReleaseRequestState>      15. <xref:System.Web.HttpApplication.UpdateRequestCache>16.</xref:System.Web.HttpApplication.UpdateRequestCache> <xref:System.Web.HttpApplication.PostUpdateRequestCache>17.</xref:System.Web.HttpApplication.PostUpdateRequestCache> <xref:System.Web.HttpApplication.LogRequest>.</xref:System.Web.HttpApplication.LogRequest>           Este evento é suportado no modo integrado do IIS 7.0 e em, pelo menos, o .NET Framework 3.0 18. <xref:System.Web.HttpApplication.PostLogRequest>Este evento é suportado o modo integrado do IIS 7.0 e, pelo menos, o .NET Framework 3.0 19.</xref:System.Web.HttpApplication.PostLogRequest> <xref:System.Web.HttpApplication.EndRequest></xref:System.Web.HttpApplication.EndRequest>"
  example:
  - "The following two examples demonstrate how to use the HttpApplication class and its events. The first example demonstrates how to create a custom HTTP module and connect an event to it. The second example demonstrates how to modify the Web.config file.  \n  \n The following example demonstrates how to create a custom HTTP module and connect the <xref:System.Web.HttpApplication.AcquireRequestState> event to the HTTP module. HTTP modules intercept each request to Web application resources, thereby allowing you to filter client requests. Any HTTP module that subscribes to an HttpApplication event must implement the <xref:System.Web.IHttpModule> interface.  \n  \n [!code-cs[System.Web.HttpApplication1#1](~/add/codesnippet/csharp/t-system.web.httpapplica_1.cs)]\n [!code-vb[System.Web.HttpApplication1#1](~/add/codesnippet/visualbasic/t-system.web.httpapplica_1.vb)]  \n  \n Before an event in a custom HTTP module can occur, you must modify the configuration settings in the Web.config file to notify ASP.NET about the HTTP module. The following example shows the appropriate configuration setting in the `httpModules` section of the Web.config file. The following setting applies to IIS 7.0 Classic mode and to earlier versions of IIS.  \n  \n```c#  \n<configuration>  \n  <system.web>  \n    <httpModules>  \n      <add type=\"Samples.AspNet.CS.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      </httpModules>  \n  </system.web>  \n</configuration>  \n```  \n  \n```vb#  \n<configuration>  \n  <system.web>  \n    <httpModules>  \n      <add type=\"Samples.AspNet.VB.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      </httpModules>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following setting applies to IIS 7.0 Integrated mode.  \n  \n```c#  \n<configuration>  \n  <system.webServer>  \n    <modules>  \n      <add type=\"Samples.AspNet.CS.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      </modules>  \n  </system.webServer>  \n</configuration>  \n```  \n  \n```vb#  \n<configuration>  \n  <system.webServer>  \n    <modules>  \n      <add type=\"Samples.AspNet.VB.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      <modules>  \n  </system.webServer>  \n</configuration>  \n```"
  syntax:
    content: >-
      [System.ComponentModel.ToolboxItem(false)]

      public class HttpApplication : IDisposable, System.ComponentModel.IComponent, System.Web.IHttpAsyncHandler
  inheritance:
  - System.Object
  implements:
  - System.ComponentModel.IComponent
  - System.IDisposable
  - System.Web.IHttpAsyncHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.HttpApplication.#ctor
  id: '#ctor'
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: HttpApplication()
  nameWithType: HttpApplication.HttpApplication()
  fullName: System.Web.HttpApplication.HttpApplication()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.HttpApplication&quot;> </xref> classe."
  syntax:
    content: public HttpApplication ();
    parameters: []
  overload: System.Web.HttpApplication.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AcquireRequestState
  id: AcquireRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AcquireRequestState
  nameWithType: HttpApplication.AcquireRequestState
  fullName: System.Web.HttpApplication.AcquireRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o ASP.NET adquire o estado atual (por exemplo, o estado de sessão) que está associado ao pedido atual."
  remarks: "O evento AcquireRequestState é desencadeado depois do processador de eventos foi criado.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - For an example of handling the AcquireRequestState event, see the <xref:System.Web.HttpApplication> overview topic.
  syntax:
    content: public event EventHandler AcquireRequestState;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnAcquireRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnAcquireRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnAuthenticateRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnAuthenticateRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnAuthorizeRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnAuthorizeRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnBeginRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnBeginRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnBeginRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnBeginRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnEndRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnEndRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnEndRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnEndRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref> processadores de eventos para o pedido atual."
  remarks: "AddOnLogRequestAsync é apresentado no .NET Framework versão 3.5.  Para obter mais informações, consulte [versões e dependências](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void AddOnLogRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnLogRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref> processadores de eventos para o pedido atual."
  remarks: "AddOnMapRequestHandlerAsync é apresentado no .NET Framework versão 3.5.  Para obter mais informações, consulte [versões e dependências](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void AddOnMapRequestHandlerAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnMapRequestHandlerAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostAcquireRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostAcquireRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostAuthenticateRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostAuthenticateRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostAuthorizeRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref> à coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostAuthorizeRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref> processadores de eventos para o pedido atual."
  remarks: "AddOnPostLogRequestAsync é apresentado no .NET Framework versão 3.5.  Para obter mais informações, consulte [versões e dependências](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void AddOnPostLogRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostLogRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostMapRequestHandlerAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostMapRequestHandlerAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref> coleção."
  overload: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostReleaseRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostReleaseRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostRequestHandlerExecuteAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostRequestHandlerExecuteAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostResolveRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostResolveRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostUpdateRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPostUpdateRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do evento."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPreRequestHandlerExecuteAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnPreRequestHandlerExecuteAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref> coleção."
  overload: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnReleaseRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnReleaseRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref> processador de eventos para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnResolveRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref> processador de eventos para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnResolveRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnUpdateRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>."
    - id: eh
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Adiciona especificado <xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref> evento para a coleção de assíncrona <xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref> processadores de eventos para o pedido atual."
  syntax:
    content: public void AddOnUpdateRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "O <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> que inicia o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "O <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> que termina o processamento assíncrono do <xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>."
    - id: state
      type: System.Object
      description: "O Estado associado para adicionar o assíncrona <xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>."
  overload: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Application
  id: Application
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Application
  nameWithType: HttpApplication.Application
  fullName: System.Web.HttpApplication.Application
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém o estado atual de uma aplicação."
  remarks: "O estado atual de uma aplicação é composta por um dicionário de chave/valor de objetos de toda a aplicação que pode utilizar para armazenar objetos .NET Framework e valores escalares que estão relacionados com vários pedidos Web a partir de vários clientes."
  syntax:
    content: public System.Web.HttpApplicationState Application { get; }
    return:
      type: System.Web.HttpApplicationState
      description: "O <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> para o pedido atual."
  overload: System.Web.HttpApplication.Application*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AuthenticateRequest
  id: AuthenticateRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AuthenticateRequest
  nameWithType: HttpApplication.AuthenticateRequest
  fullName: System.Web.HttpApplication.AuthenticateRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando um módulo de segurança tem de estabelecer a identidade do utilizador."
  remarks: "O evento AuthenticateRequest indica que o mecanismo de autenticação configurado ter autenticado o pedido atual. Subscrever o evento AuthenticateRequest assegura que o pedido será autenticado antes do processamento o processador de módulo ou evento anexado.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler AuthenticateRequest;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AuthorizeRequest
  id: AuthorizeRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AuthorizeRequest
  nameWithType: HttpApplication.AuthorizeRequest
  fullName: System.Web.HttpApplication.AuthorizeRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando um módulo de segurança verificou a autorização de utilizador."
  remarks: "O evento AuthorizeRequest indica que o ASP.NET tem autorizado o pedido atual. Subscrever o evento AuthorizeRequest assegura que o pedido será autenticado e autorizado antes do processamento o processador de módulo ou evento anexado.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler AuthorizeRequest;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.BeginRequest
  id: BeginRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: BeginRequest
  nameWithType: HttpApplication.BeginRequest
  fullName: System.Web.HttpApplication.BeginRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre como o primeiro evento na cadeia de pipeline HTTP de execução quando o ASP.NET responde a um pedido."
  remarks: "O evento de BeginRequest sinalizar a criação de novo pedido de qualquer indicado. Este evento é desencadeado sempre e é sempre o primeiro evento ocorrer durante o processamento de um pedido.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler BeginRequest;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.CompleteRequest
  id: CompleteRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: CompleteRequest()
  nameWithType: HttpApplication.CompleteRequest()
  fullName: System.Web.HttpApplication.CompleteRequest()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Faz com que o ASP.NET ignorar todos os eventos e filtragem do HTTP cadeia de execução de pipeline e executar diretamente o <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref> eventos."
  syntax:
    content: public void CompleteRequest ();
    parameters: []
  overload: System.Web.HttpApplication.CompleteRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Context
  id: Context
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Context
  nameWithType: HttpApplication.Context
  fullName: System.Web.HttpApplication.Context
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém as informações de HTTP específicos sobre o pedido atual."
  syntax:
    content: public System.Web.HttpContext Context { get; }
    return:
      type: System.Web.HttpContext
      description: "O <xref href=&quot;System.Web.HttpContext&quot;> </xref> para o pedido atual."
  overload: System.Web.HttpApplication.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Dispose
  id: Dispose
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpApplication.Dispose()
  fullName: System.Web.HttpApplication.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Disposes o <xref href=&quot;System.Web.HttpApplication&quot;> </xref> instância."
  remarks: "O <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, <xref:System.Web.HttpApplication.Session%2A>, e <xref:System.Web.HttpApplication.Application%2A>Propriedades não estão disponíveis para utilização quando executa o método de Dispose.</xref:System.Web.HttpApplication.Application%2A> </xref:System.Web.HttpApplication.Session%2A> </xref:System.Web.HttpApplication.Response%2A> </xref:System.Web.HttpApplication.Request%2A>       As chamadas de método Dispose o <xref:System.Web.IHttpModule.Dispose%2A>método em cada um do registado <xref:System.Web.Configuration.SystemWebSectionGroup.HttpModules%2A>na instância da aplicação e gera o <xref:System.Web.HttpApplication.Disposed>eventos.</xref:System.Web.HttpApplication.Disposed> </xref:System.Web.Configuration.SystemWebSectionGroup.HttpModules%2A> </xref:System.Web.IHttpModule.Dispose%2A>"
  syntax:
    content: public virtual void Dispose ();
    parameters: []
  overload: System.Web.HttpApplication.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Disposed
  id: Disposed
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Disposed
  nameWithType: HttpApplication.Disposed
  fullName: System.Web.HttpApplication.Disposed
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando a aplicação é eliminada."
  remarks: "Quando cria um delegado eliminado, identifique o método que processa o evento. Para associar o evento com o processador de eventos, adicionar uma instância do Disposed delegado do evento. O processador de eventos é chamado sempre que o evento ocorre, a menos que remova o delegado eliminado.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler Disposed;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.EndRequest
  id: EndRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: EndRequest
  nameWithType: HttpApplication.EndRequest
  fullName: System.Web.HttpApplication.EndRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre como o último evento na cadeia de pipeline HTTP de execução quando o ASP.NET responde a um pedido."
  remarks: "O evento de EndRequest sempre é desencadeado quando o <xref:System.Web.HttpApplication.CompleteRequest%2A>método é denominado.</xref:System.Web.HttpApplication.CompleteRequest%2A>       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler EndRequest;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Error
  id: Error
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Error
  nameWithType: HttpApplication.Error
  fullName: System.Web.HttpApplication.Error
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando é emitida uma exceção não processada."
  remarks: "A exceção que desencadeia o evento de erro pode ser acedida por uma chamada para o <xref:System.Web.HttpServerUtility.GetLastError%2A>método.</xref:System.Web.HttpServerUtility.GetLastError%2A> Se a sua aplicação gerar a saída de erro personalizadas, suprimir a mensagem de erro predefinida que é gerada pelo ASP.NET por uma chamada para o <xref:System.Web.HttpServerUtility.ClearError%2A>método.</xref:System.Web.HttpServerUtility.ClearError%2A>      > [!NOTE] > Se a sua aplicação Web contém os XML Web services, não é possível utilizar o evento de erro para processamento de exceções global desses serviços. O processador HTTP para serviços Web de XML consome qualquer excepção que ocorre num serviço XML Web e converte-o a uma falha SOAP antes do erro que está a ser chamado. Para resolver exceções de serviço Web de XML, crie uma extensão SOAP para processar as exceções de serviço Web um processador de exceções global personalizadas.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler Error;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Events
  id: Events
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Events
  nameWithType: HttpApplication.Events
  fullName: System.Web.HttpApplication.Events
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém a lista de eventos delegado de processador que processam todos os eventos de aplicações."
  syntax:
    content: protected System.ComponentModel.EventHandlerList Events { get; }
    return:
      type: System.ComponentModel.EventHandlerList
      description: "Um <xref href=&quot;System.ComponentModel.EventHandlerList&quot;> </xref> que contém os nomes do delegado de processador de eventos."
  overload: System.Web.HttpApplication.Events*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)
  id: GetOutputCacheProviderName(System.Web.HttpContext)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: GetOutputCacheProviderName(HttpContext)
  nameWithType: HttpApplication.GetOutputCacheProviderName(HttpContext)
  fullName: System.Web.HttpApplication.GetOutputCacheProviderName(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém o nome do fornecedor de cache de saída predefinido que é configurado para um Web site."
  remarks: "Pode substituir este método e utilizá-la para devolver o nome de um fornecedor de cache de saída que está configurado para um Web site. ASP.NET obtém uma referência para o fornecedor com o nome e utiliza-o para armazenar dados em cache de saída para o pedido atualmente em execução.       Por predefinição, no ASP.NET, todas as respostas de HTTP, composto páginas e controlos de utilizam a cache de saída dentro da memória. Pode alterar o fornecedor de cache de saída predefinido que é utilizado para uma aplicação Web, especificando um nome de um fornecedor diferente para `defaultProvider`.       Além disso, pode selecionar fornecedores de cache de saída diferentes para controlos individuais e para pedidos individuais. É a forma mais fácil para escolher um fornecedor de cache de saída diferente para diferentes controlos de utilizador da Web para o fazer, por isso, de modo declarativo utilizando a nova `providerName` atributo na diretiva de página ou controlo, conforme mostrado no exemplo seguinte: ```   <%@ OutputCache Duration=&quot;60&quot; VaryByParam=&quot;None&quot;        providerName=&quot;DiskCache&quot; %>   ``` para especificar um fornecedor de cache de saída diferente para um pedido HTTP, pode ignorar este método no ficheiro global. asax para programaticamente especificar o fornecedor a utilizar para um pedido específico. Para obter mais informações, consulte [descrição geral de colocação em cache do ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to programmatically specify the cache provider named `DiskCache` for any HTTP request that goes to the Advanced.aspx page.  \n  \n [Visual Basic]  \n  \n```  \nPublic Overloads Overrides Sub GetOutputCacheProviderName(ByVal context _  \n        As HttpContext) As String   \n    If context.Request.Path.EndsWith(\"Advanced.aspx\") Then   \n        Return \"DiskCache\"   \n    Else   \n        Return MyBase.GetOutputCacheProviderName(context)   \n    End If   \nEnd Sub  \n```  \n  \n```c#  \npublic override string GetOutputCacheProviderName(HttpContext context)  \n{  \n    if (context.Request.Path.EndsWith(\"Advanced.aspx\"))  \n        return \"DiskCache\";  \n    else  \n        return base.GetOutputCacheProviderName(context);  \n}  \n```"
  syntax:
    content: public virtual string GetOutputCacheProviderName (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "Um <xref href=&quot;System.Web.HttpContext&quot;> </xref> que fornece as referências a objetos de servidor intrínseco que são utilizados para pedidos HTTP de serviço."
    return:
      type: System.String
      description: "O nome do fornecedor predefinido."
  overload: System.Web.HttpApplication.GetOutputCacheProviderName*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>context</code>é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou é uma cadeia vazia."
  platform:
  - net462
- uid: System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)
  id: GetVaryByCustomString(System.Web.HttpContext,System.String)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: GetVaryByCustomString(HttpContext,String)
  nameWithType: HttpApplication.GetVaryByCustomString(HttpContext,String)
  fullName: System.Web.HttpApplication.GetVaryByCustomString(HttpContext,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Fornece uma implementação de aplicação ao nível do <xref:System.Web.UI.PartialCachingAttribute.VaryByCustom*>propriedade.</xref:System.Web.UI.PartialCachingAttribute.VaryByCustom*>"
  remarks: 'Pode substituir GetVaryByCustomString para adicionar um novo método para calcular personalizado variam por valores que se baseiam o pedido atual. A implementação tem de chamar a classe base para valores personalizados que não reconhece. Para obter mais informações, consulte [como: versões de Cache de um cadeias de personalizado através da página](~/add/includes/ajax-current-ext-md.md).'
  syntax:
    content: public virtual string GetVaryByCustomString (System.Web.HttpContext context, string custom);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "Um <xref href=&quot;System.Web.HttpContext&quot;> </xref> objeto que contém informações sobre o pedido Web atual."
    - id: custom
      type: System.String
      description: "A cadeia personalizada que especifica qual resposta em cache é utilizada para responder ao pedido atual."
    return:
      type: System.String
      description: "Se o valor da <code> custom </code> parâmetro é <xref uid=&quot;langword_csharp_&quot;browser&quot;&quot; name=&quot;&quot;browser&quot;&quot; href=&quot;&quot;> </xref>, o browser <xref:System.Web.Configuration.HttpCapabilitiesBase.Type*>; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Web.Configuration.HttpCapabilitiesBase.Type*>"
  overload: System.Web.HttpApplication.GetVaryByCustomString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Init
  id: Init
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Init()
  nameWithType: HttpApplication.Init()
  fullName: System.Web.HttpApplication.Init()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Executa o código de inicialização personalizada depois de tem sido adicionados a todos os módulos de processador de eventos."
  remarks: "Uma classe derivada, pode substituir o método Init para adicionar o código de inicialização de uma única personalizada."
  syntax:
    content: public virtual void Init ();
    parameters: []
  overload: System.Web.HttpApplication.Init*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.LogRequest
  id: LogRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: LogRequest
  nameWithType: HttpApplication.LogRequest
  fullName: System.Web.HttpApplication.LogRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre antes de ASP.NET efetua qualquer registo para o pedido atual."
  remarks: "O evento de LogRequest é gerado, mesmo se ocorrer um erro. Pode fornecer um processador de eventos para o evento de LogRequest fornecer personalizada de registo para o pedido.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       LogRequest é apresentado no .NET Framework versão 3.5.  Para obter mais informações, consulte [versões e dependências](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to provide an event handler for the LogRequest event. The event handler also handles several other events. Therefore, the <xref:System.Web.HttpContext.CurrentNotification%2A> and <xref:System.Web.HttpContext.IsPostNotification%2A> properties are used to determine what code to run.  \n  \n [!code-cs[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/csharp/e-system.web.httpapplica_1.cs)]\n [!code-vb[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/visualbasic/e-system.web.httpapplica_1.vb)]"
  syntax:
    content: public event EventHandler LogRequest;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.MapRequestHandler
  id: MapRequestHandler
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: MapRequestHandler
  nameWithType: HttpApplication.MapRequestHandler
  fullName: System.Web.HttpApplication.MapRequestHandler
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o processador está selecionado para responder ao pedido."
  remarks: "O evento de MapRequestHandler é utilizado pela infraestrutura do ASP.NET para determinar o processador de pedidos para o pedido atual. Para obter mais informações, consulte [como: registar processadores de HTTP](~/add/includes/ajax-current-ext-md.md).       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       MapRequestHandler é apresentado no .NET Framework versão 3.5.  Para obter mais informações, consulte [versões e dependências](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event EventHandler MapRequestHandler;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Modules
  id: Modules
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Modules
  nameWithType: HttpApplication.Modules
  fullName: System.Web.HttpApplication.Modules
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém a coleção de módulos para a aplicação atual."
  syntax:
    content: public System.Web.HttpModuleCollection Modules { get; }
    return:
      type: System.Web.HttpModuleCollection
      description: "Um <xref href=&quot;System.Web.HttpModuleCollection&quot;> </xref> que contém os nomes dos módulos para a aplicação."
  overload: System.Web.HttpApplication.Modules*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostAcquireRequestState
  id: PostAcquireRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostAcquireRequestState
  nameWithType: HttpApplication.PostAcquireRequestState
  fullName: System.Web.HttpApplication.PostAcquireRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o estado de pedido (por exemplo, o estado de sessão) que está associado ao pedido atual foi obtido."
  remarks: "O evento PostAcquireRequestState é desencadeado depois do <xref:System.Web.HttpApplication.AcquireRequestState>evento ocorreu.</xref:System.Web.HttpApplication.AcquireRequestState> A funcionalidade que subscreve o <xref:System.Web.HttpApplication.AcquireRequestState>evento pode aceder aos dados que são processados pelo PostAcquireRequestState.</xref:System.Web.HttpApplication.AcquireRequestState>       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler PostAcquireRequestState;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostAuthenticateRequest
  id: PostAuthenticateRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostAuthenticateRequest
  nameWithType: HttpApplication.PostAuthenticateRequest
  fullName: System.Web.HttpApplication.PostAuthenticateRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando um módulo de segurança tem de estabelecer a identidade do utilizador."
  remarks: "O evento PostAuthenticateRequest é desencadeado depois do <xref:System.Web.HttpApplication.AuthenticateRequest>evento ocorreu.</xref:System.Web.HttpApplication.AuthenticateRequest> A funcionalidade que subscreve o evento PostAuthenticateRequest pode aceder a todos os dados que são processados pelo PostAuthenticateRequest.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler PostAuthenticateRequest;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostAuthorizeRequest
  id: PostAuthorizeRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostAuthorizeRequest
  nameWithType: HttpApplication.PostAuthorizeRequest
  fullName: System.Web.HttpApplication.PostAuthorizeRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o utilizador para o pedido atual tenha sido autorizado."
  remarks: "O evento PostAuthorizeRequest indica que o ASP.NET tem autorizado o pedido atual. Subscrever o evento PostAuthorizeRequest assegura autenticação e autorização do pedido antes do processamento do módulo ligado ou processador de eventos.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler PostAuthorizeRequest;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostLogRequest
  id: PostLogRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostLogRequest
  nameWithType: HttpApplication.PostLogRequest
  fullName: System.Web.HttpApplication.PostLogRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o ASP.NET terminou de processar todos os processadores de eventos para o <xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref> eventos."
  remarks: "Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       PostLogRequest é apresentado no .NET Framework versão 3.5.  Para obter mais informações, consulte [versões e dependências](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event EventHandler PostLogRequest;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostMapRequestHandler
  id: PostMapRequestHandler
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostMapRequestHandler
  nameWithType: HttpApplication.PostMapRequestHandler
  fullName: System.Web.HttpApplication.PostMapRequestHandler
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o ASP.NET tem mapeado o pedido atual para o processador de eventos adequado."
  remarks: 'Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  syntax:
    content: public event EventHandler PostMapRequestHandler;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostReleaseRequestState
  id: PostReleaseRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostReleaseRequestState
  nameWithType: HttpApplication.PostReleaseRequestState
  fullName: System.Web.HttpApplication.PostReleaseRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o ASP.NET concluiu a execução de que todos os pedem de processadores de eventos e o estado do pedido de dados que tenham sido armazenados."
  remarks: 'Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  syntax:
    content: public event EventHandler PostReleaseRequestState;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostRequestHandlerExecute
  id: PostRequestHandlerExecute
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostRequestHandlerExecute
  nameWithType: HttpApplication.PostRequestHandlerExecute
  fullName: System.Web.HttpApplication.PostRequestHandlerExecute
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o processador de eventos do ASP.NET (por exemplo, uma página ou um serviço Web de XML) de execução do é concluída."
  remarks: 'Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  syntax:
    content: public event EventHandler PostRequestHandlerExecute;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostResolveRequestCache
  id: PostResolveRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostResolveRequestCache
  nameWithType: HttpApplication.PostResolveRequestCache
  fullName: System.Web.HttpApplication.PostResolveRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o ASP.NET ignora a execução do processador de eventos atual e permite que um módulo de colocação em cache servir um pedido a partir da cache."
  remarks: 'Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  syntax:
    content: public event EventHandler PostResolveRequestCache;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostUpdateRequestCache
  id: PostUpdateRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostUpdateRequestCache
  nameWithType: HttpApplication.PostUpdateRequestCache
  fullName: System.Web.HttpApplication.PostUpdateRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o ASP.NET concluída módulos a colocação em cache e armazenar as respostas que são utilizadas para servir pedidos subsequentes da cache de atualização."
  remarks: "O evento PostUpdateRequestCache é desencadeado depois do <xref:System.Web.HttpApplication.UpdateRequestCache>evento ocorreu.</xref:System.Web.HttpApplication.UpdateRequestCache> Quando é gerado o PostUpdateRequestCache, ASP.NET concluiu o processamento de código e o conteúdo da cache está finalizado.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler PostUpdateRequestCache;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PreRequestHandlerExecute
  id: PreRequestHandlerExecute
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PreRequestHandlerExecute
  nameWithType: HttpApplication.PreRequestHandlerExecute
  fullName: System.Web.HttpApplication.PreRequestHandlerExecute
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre antes de ASP.NET começa a execução de um processador de eventos (por exemplo, uma página ou um serviço Web de XML)."
  remarks: 'Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  syntax:
    content: public event EventHandler PreRequestHandlerExecute;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PreSendRequestContent
  id: PreSendRequestContent
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PreSendRequestContent
  nameWithType: HttpApplication.PreSendRequestContent
  fullName: System.Web.HttpApplication.PreSendRequestContent
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre antes de ASP.NET envia conteúdo para o cliente."
  remarks: "O evento PreSendRequestContent ocorrerem várias vezes.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler PreSendRequestContent;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PreSendRequestHeaders
  id: PreSendRequestHeaders
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PreSendRequestHeaders
  nameWithType: HttpApplication.PreSendRequestHeaders
  fullName: System.Web.HttpApplication.PreSendRequestHeaders
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre antes de ASP.NET envia os cabeçalhos de HTTP para o cliente."
  remarks: 'Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  syntax:
    content: public event EventHandler PreSendRequestHeaders;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.RegisterModule(System.Type)
  id: RegisterModule(System.Type)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: RegisterModule(Type)
  nameWithType: HttpApplication.RegisterModule(Type)
  fullName: System.Web.HttpApplication.RegisterModule(Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Regista um módulo de aplicação."
  syntax:
    content: public static void RegisterModule (Type moduleType);
    parameters:
    - id: moduleType
      type: System.Type
      description: "O tipo de módulo."
  overload: System.Web.HttpApplication.RegisterModule*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.ReleaseRequestState
  id: ReleaseRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: ReleaseRequestState
  nameWithType: HttpApplication.ReleaseRequestState
  fullName: System.Web.HttpApplication.ReleaseRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre após a execução de todos os processadores de eventos de pedido ASP.NET. Este evento faz com que os módulos de estado guardar os dados de estado atual."
  remarks: "Quando o evento ReleaseRequestState é gerado, a aplicação foi concluída com o pedido e o ASP.NET está marcado para armazenar o estado do pedido.       Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  syntax:
    content: public event EventHandler ReleaseRequestState;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Request
  id: Request
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Request
  nameWithType: HttpApplication.Request
  fullName: System.Web.HttpApplication.Request
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém o objeto intrínseco de pedido para o pedido atual."
  syntax:
    content: public System.Web.HttpRequest Request { get; }
    return:
      type: System.Web.HttpRequest
      description: "O <xref href=&quot;System.Web.HttpRequest&quot;> </xref> objeto que a aplicação está a processar."
  overload: System.Web.HttpApplication.Request*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.HttpRequest&quot;></xref> object is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpApplication.RequestCompleted
  id: RequestCompleted
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: RequestCompleted
  nameWithType: HttpApplication.RequestCompleted
  fullName: System.Web.HttpApplication.RequestCompleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando os objetos geridos que estão associados com o pedido foram lançados."
  remarks: "RequestCompleted evento é chamado após todos os módulos geridos e os processadores no pipeline de ASP.NET foi chamados. Permite que módulos para limpar os recursos que após todos os módulos e geridas processadores tem executado. Utilize este evento se necessitar de uma hora específica explicitamente eliminar recursos geridos que criou durante um pedido."
  syntax:
    content: public event EventHandler RequestCompleted;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.ResolveRequestCache
  id: ResolveRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: ResolveRequestCache
  nameWithType: HttpApplication.ResolveRequestCache
  fullName: System.Web.HttpApplication.ResolveRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o ASP.NET terminar um evento de autorização para permitir que os módulos de colocação em cache servem pedidos da cache, ignorar a execução do processador de eventos (por exemplo, uma página ou um serviço Web de XML)."
  remarks: 'Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  syntax:
    content: public event EventHandler ResolveRequestCache;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Response
  id: Response
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Response
  nameWithType: HttpApplication.Response
  fullName: System.Web.HttpApplication.Response
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém o objeto intrínseco de resposta para o pedido atual."
  syntax:
    content: public System.Web.HttpResponse Response { get; }
    return:
      type: System.Web.HttpResponse
      description: "O <xref href=&quot;System.Web.HttpResponse&quot;> </xref> objeto que a aplicação está a processar."
  overload: System.Web.HttpApplication.Response*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.HttpResponse&quot;></xref> object is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpApplication.Server
  id: Server
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Server
  nameWithType: HttpApplication.Server
  fullName: System.Web.HttpApplication.Server
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém o objeto intrínseco de servidor para o pedido atual."
  syntax:
    content: public System.Web.HttpServerUtility Server { get; }
    return:
      type: System.Web.HttpServerUtility
      description: "O <xref href=&quot;System.Web.HttpServerUtility&quot;> </xref> objeto que a aplicação está a processar."
  overload: System.Web.HttpApplication.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Session
  id: Session
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Session
  nameWithType: HttpApplication.Session
  fullName: System.Web.HttpApplication.Session
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém o objeto de sessão intrínseca que fornece acesso aos dados de sessão."
  syntax:
    content: public System.Web.SessionState.HttpSessionState Session { get; }
    return:
      type: System.Web.SessionState.HttpSessionState
      description: "O <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref> objeto para a sessão atual."
  overload: System.Web.HttpApplication.Session*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;></xref> object is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpApplication.Site
  id: Site
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Site
  nameWithType: HttpApplication.Site
  fullName: System.Web.HttpApplication.Site
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém ou define uma interface de rede para um <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> implementação."
  syntax:
    content: public System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "Um <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> objeto que permite que um contentor gerir e comunicar com os respetivos componentes subordinado."
  overload: System.Web.HttpApplication.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  id: System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Inicia uma chamada assíncrona para o processador de eventos HTTP."
  syntax:
    content: IAsyncResult IHttpAsyncHandler.BeginProcessRequest (System.Web.HttpContext context, AsyncCallback cb, object extraData);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "Um <xref href=&quot;System.Web.HttpContext&quot;> </xref> que fornece as referências a objetos de servidor intrínseco que são utilizados para pedidos HTTP de serviço."
    - id: cb
      type: System.AsyncCallback
      description: "O <xref:System.AsyncCallback>chamar depois de concluída a chamada de método assíncronas.</xref:System.AsyncCallback> Se o `cb` parâmetro é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, o delegado não está a ser chamado."
    - id: extraData
      type: System.Object
      description: "Quaisquer dados adicionais, que é necessária para processar o pedido."
    return:
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>que contém informações sobre o estado do processo.</xref:System.IAsyncResult>"
  overload: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  id: System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Fornece um processo assíncrono <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref> método depois de concluído o processo."
  remarks: "Pode utilizar o método IHttpAsyncHandler.EndProcessRequest para emitir quaisquer exceções que são detetadas durante o processo de assíncrono."
  syntax:
    content: void IHttpAsyncHandler.EndProcessRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Um <xref:System.IAsyncResult>que contém informações sobre o estado do processo.</xref:System.IAsyncResult>"
  overload: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable
  id: System#Web#IHttpHandler#IsReusable
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpHandler.IsReusable
  nameWithType: HttpApplication.System.Web.IHttpHandler.IsReusable
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.IsReusable
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém um <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> valor que indica se o outro pedido pode utilizar o <xref href=&quot;System.Web.IHttpHandler&quot;> </xref> objeto."
  remarks: "Para definir explicitamente o `IsReusable` propriedade `true` ou `false`, forneça o código que substitui o `IsReusable` acessor de propriedade."
  syntax:
    content: bool System.Web.IHttpHandler.IsReusable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Web.IHttpHandler&quot;> </xref> objeto é reutilizáveis; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  id: System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpHandler.ProcessRequest(HttpContext)
  nameWithType: HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Permite o processamento de pedidos de HTTP Web por um processador HTTP personalizado que implementa o <xref href=&quot;System.Web.IHttpHandler&quot;> </xref> interface."
  remarks: "As classes que herdam a <xref:System.Web.IHttpModule>e <xref:System.Web.IHttpHandler>interfaces são fornecidas como uma referência a um <xref:System.Web.HttpContext>objeto para o atual pedido HTTP.</xref:System.Web.HttpContext> </xref:System.Web.IHttpHandler> </xref:System.Web.IHttpModule> O objeto fornece acesso para o intrínseco `Request`, `Response`, e `Server` objetos para o pedido."
  syntax:
    content: void IHttpHandler.ProcessRequest (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "Um <xref href=&quot;System.Web.HttpContext&quot;> </xref> que fornece referências aos objetos intrínsecos do servidor que são utilizados para pedidos HTTP de serviço."
  overload: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "Em todos os casos."
  platform:
  - net462
- uid: System.Web.HttpApplication.UpdateRequestCache
  id: UpdateRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: UpdateRequestCache
  nameWithType: HttpApplication.UpdateRequestCache
  fullName: System.Web.HttpApplication.UpdateRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ocorre quando o ASP.NET conclusão da execução de um processador de eventos para permitir que armazenam de módulos de colocação em cache as respostas que serão utilizadas para servir pedidos subsequentes da cache."
  remarks: 'Para obter mais informações sobre como lidar com eventos, consulte [NIB: consumir eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  syntax:
    content: public event EventHandler UpdateRequestCache;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.User
  id: User
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: User
  nameWithType: HttpApplication.User
  fullName: System.Web.HttpApplication.User
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Obtém o objeto intrínseco de utilizador para o pedido atual."
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "O <xref:System.Security.Principal.IPrincipal>objeto que representa o utilizador autenticado ou anónimo actual.</xref:System.Security.Principal.IPrincipal>"
  overload: System.Web.HttpApplication.User*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "O <xref:System.Security.Principal.IPrincipal>objeto é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Security.Principal.IPrincipal>"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.HttpApplication.#ctor
  parent: System.Web.HttpApplication
  isExternal: false
  name: HttpApplication()
  nameWithType: HttpApplication.HttpApplication()
  fullName: System.Web.HttpApplication.HttpApplication()
- uid: System.Web.HttpApplication.AcquireRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: AcquireRequestState
  nameWithType: HttpApplication.AcquireRequestState
  fullName: System.Web.HttpApplication.AcquireRequestState
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.BeginEventHandler
  parent: System.Web
  isExternal: false
  name: BeginEventHandler
  nameWithType: BeginEventHandler
  fullName: System.Web.BeginEventHandler
- uid: System.Web.EndEventHandler
  parent: System.Web
  isExternal: false
  name: EndEventHandler
  nameWithType: EndEventHandler
  fullName: System.Web.EndEventHandler
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.Application
  parent: System.Web.HttpApplication
  isExternal: false
  name: Application
  nameWithType: HttpApplication.Application
  fullName: System.Web.HttpApplication.Application
- uid: System.Web.HttpApplicationState
  parent: System.Web
  isExternal: false
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
- uid: System.Web.HttpApplication.AuthenticateRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: AuthenticateRequest
  nameWithType: HttpApplication.AuthenticateRequest
  fullName: System.Web.HttpApplication.AuthenticateRequest
- uid: System.Web.HttpApplication.AuthorizeRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: AuthorizeRequest
  nameWithType: HttpApplication.AuthorizeRequest
  fullName: System.Web.HttpApplication.AuthorizeRequest
- uid: System.Web.HttpApplication.BeginRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: BeginRequest
  nameWithType: HttpApplication.BeginRequest
  fullName: System.Web.HttpApplication.BeginRequest
- uid: System.Web.HttpApplication.CompleteRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: CompleteRequest()
  nameWithType: HttpApplication.CompleteRequest()
  fullName: System.Web.HttpApplication.CompleteRequest()
- uid: System.Web.HttpApplication.Context
  parent: System.Web.HttpApplication
  isExternal: false
  name: Context
  nameWithType: HttpApplication.Context
  fullName: System.Web.HttpApplication.Context
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.HttpApplication.Dispose
  parent: System.Web.HttpApplication
  isExternal: false
  name: Dispose()
  nameWithType: HttpApplication.Dispose()
  fullName: System.Web.HttpApplication.Dispose()
- uid: System.Web.HttpApplication.Disposed
  parent: System.Web.HttpApplication
  isExternal: false
  name: Disposed
  nameWithType: HttpApplication.Disposed
  fullName: System.Web.HttpApplication.Disposed
- uid: System.Web.HttpApplication.EndRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: EndRequest
  nameWithType: HttpApplication.EndRequest
  fullName: System.Web.HttpApplication.EndRequest
- uid: System.Web.HttpApplication.Error
  parent: System.Web.HttpApplication
  isExternal: false
  name: Error
  nameWithType: HttpApplication.Error
  fullName: System.Web.HttpApplication.Error
- uid: System.Web.HttpApplication.Events
  parent: System.Web.HttpApplication
  isExternal: false
  name: Events
  nameWithType: HttpApplication.Events
  fullName: System.Web.HttpApplication.Events
- uid: System.ComponentModel.EventHandlerList
  parent: System.ComponentModel
  isExternal: false
  name: EventHandlerList
  nameWithType: EventHandlerList
  fullName: System.ComponentModel.EventHandlerList
- uid: System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetOutputCacheProviderName(HttpContext)
  nameWithType: HttpApplication.GetOutputCacheProviderName(HttpContext)
  fullName: System.Web.HttpApplication.GetOutputCacheProviderName(HttpContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetVaryByCustomString(HttpContext,String)
  nameWithType: HttpApplication.GetVaryByCustomString(HttpContext,String)
  fullName: System.Web.HttpApplication.GetVaryByCustomString(HttpContext,String)
- uid: System.Web.HttpApplication.Init
  parent: System.Web.HttpApplication
  isExternal: false
  name: Init()
  nameWithType: HttpApplication.Init()
  fullName: System.Web.HttpApplication.Init()
- uid: System.Web.HttpApplication.LogRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: LogRequest
  nameWithType: HttpApplication.LogRequest
  fullName: System.Web.HttpApplication.LogRequest
- uid: System.Web.HttpApplication.MapRequestHandler
  parent: System.Web.HttpApplication
  isExternal: false
  name: MapRequestHandler
  nameWithType: HttpApplication.MapRequestHandler
  fullName: System.Web.HttpApplication.MapRequestHandler
- uid: System.Web.HttpApplication.Modules
  parent: System.Web.HttpApplication
  isExternal: false
  name: Modules
  nameWithType: HttpApplication.Modules
  fullName: System.Web.HttpApplication.Modules
- uid: System.Web.HttpModuleCollection
  parent: System.Web
  isExternal: false
  name: HttpModuleCollection
  nameWithType: HttpModuleCollection
  fullName: System.Web.HttpModuleCollection
- uid: System.Web.HttpApplication.PostAcquireRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostAcquireRequestState
  nameWithType: HttpApplication.PostAcquireRequestState
  fullName: System.Web.HttpApplication.PostAcquireRequestState
- uid: System.Web.HttpApplication.PostAuthenticateRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostAuthenticateRequest
  nameWithType: HttpApplication.PostAuthenticateRequest
  fullName: System.Web.HttpApplication.PostAuthenticateRequest
- uid: System.Web.HttpApplication.PostAuthorizeRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostAuthorizeRequest
  nameWithType: HttpApplication.PostAuthorizeRequest
  fullName: System.Web.HttpApplication.PostAuthorizeRequest
- uid: System.Web.HttpApplication.PostLogRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostLogRequest
  nameWithType: HttpApplication.PostLogRequest
  fullName: System.Web.HttpApplication.PostLogRequest
- uid: System.Web.HttpApplication.PostMapRequestHandler
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostMapRequestHandler
  nameWithType: HttpApplication.PostMapRequestHandler
  fullName: System.Web.HttpApplication.PostMapRequestHandler
- uid: System.Web.HttpApplication.PostReleaseRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostReleaseRequestState
  nameWithType: HttpApplication.PostReleaseRequestState
  fullName: System.Web.HttpApplication.PostReleaseRequestState
- uid: System.Web.HttpApplication.PostRequestHandlerExecute
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostRequestHandlerExecute
  nameWithType: HttpApplication.PostRequestHandlerExecute
  fullName: System.Web.HttpApplication.PostRequestHandlerExecute
- uid: System.Web.HttpApplication.PostResolveRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostResolveRequestCache
  nameWithType: HttpApplication.PostResolveRequestCache
  fullName: System.Web.HttpApplication.PostResolveRequestCache
- uid: System.Web.HttpApplication.PostUpdateRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostUpdateRequestCache
  nameWithType: HttpApplication.PostUpdateRequestCache
  fullName: System.Web.HttpApplication.PostUpdateRequestCache
- uid: System.Web.HttpApplication.PreRequestHandlerExecute
  parent: System.Web.HttpApplication
  isExternal: false
  name: PreRequestHandlerExecute
  nameWithType: HttpApplication.PreRequestHandlerExecute
  fullName: System.Web.HttpApplication.PreRequestHandlerExecute
- uid: System.Web.HttpApplication.PreSendRequestContent
  parent: System.Web.HttpApplication
  isExternal: false
  name: PreSendRequestContent
  nameWithType: HttpApplication.PreSendRequestContent
  fullName: System.Web.HttpApplication.PreSendRequestContent
- uid: System.Web.HttpApplication.PreSendRequestHeaders
  parent: System.Web.HttpApplication
  isExternal: false
  name: PreSendRequestHeaders
  nameWithType: HttpApplication.PreSendRequestHeaders
  fullName: System.Web.HttpApplication.PreSendRequestHeaders
- uid: System.Web.HttpApplication.RegisterModule(System.Type)
  parent: System.Web.HttpApplication
  isExternal: false
  name: RegisterModule(Type)
  nameWithType: HttpApplication.RegisterModule(Type)
  fullName: System.Web.HttpApplication.RegisterModule(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.HttpApplication.ReleaseRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: ReleaseRequestState
  nameWithType: HttpApplication.ReleaseRequestState
  fullName: System.Web.HttpApplication.ReleaseRequestState
- uid: System.Web.HttpApplication.Request
  parent: System.Web.HttpApplication
  isExternal: false
  name: Request
  nameWithType: HttpApplication.Request
  fullName: System.Web.HttpApplication.Request
- uid: System.Web.HttpRequest
  parent: System.Web
  isExternal: false
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: System.Web.HttpRequest
- uid: System.Web.HttpApplication.RequestCompleted
  parent: System.Web.HttpApplication
  isExternal: false
  name: RequestCompleted
  nameWithType: HttpApplication.RequestCompleted
  fullName: System.Web.HttpApplication.RequestCompleted
- uid: System.Web.HttpApplication.ResolveRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: ResolveRequestCache
  nameWithType: HttpApplication.ResolveRequestCache
  fullName: System.Web.HttpApplication.ResolveRequestCache
- uid: System.Web.HttpApplication.Response
  parent: System.Web.HttpApplication
  isExternal: false
  name: Response
  nameWithType: HttpApplication.Response
  fullName: System.Web.HttpApplication.Response
- uid: System.Web.HttpResponse
  parent: System.Web
  isExternal: false
  name: HttpResponse
  nameWithType: HttpResponse
  fullName: System.Web.HttpResponse
- uid: System.Web.HttpApplication.Server
  parent: System.Web.HttpApplication
  isExternal: false
  name: Server
  nameWithType: HttpApplication.Server
  fullName: System.Web.HttpApplication.Server
- uid: System.Web.HttpServerUtility
  parent: System.Web
  isExternal: false
  name: HttpServerUtility
  nameWithType: HttpServerUtility
  fullName: System.Web.HttpServerUtility
- uid: System.Web.HttpApplication.Session
  parent: System.Web.HttpApplication
  isExternal: false
  name: Session
  nameWithType: HttpApplication.Session
  fullName: System.Web.HttpApplication.Session
- uid: System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: false
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.HttpApplication.Site
  parent: System.Web.HttpApplication
  isExternal: false
  name: Site
  nameWithType: HttpApplication.Site
  fullName: System.Web.HttpApplication.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.IsReusable
  nameWithType: HttpApplication.System.Web.IHttpHandler.IsReusable
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.IsReusable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.ProcessRequest(HttpContext)
  nameWithType: HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
- uid: System.Web.HttpApplication.UpdateRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: UpdateRequestCache
  nameWithType: HttpApplication.UpdateRequestCache
  fullName: System.Web.HttpApplication.UpdateRequestCache
- uid: System.Web.HttpApplication.User
  parent: System.Web.HttpApplication
  isExternal: false
  name: User
  nameWithType: HttpApplication.User
  fullName: System.Web.HttpApplication.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.HttpApplication.#ctor*
  parent: System.Web.HttpApplication
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication.HttpApplication
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAcquireRequestStateAsync
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthenticateRequestAsync
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthorizeRequestAsync
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnBeginRequestAsync
  nameWithType: HttpApplication.AddOnBeginRequestAsync
- uid: System.Web.HttpApplication.AddOnEndRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnEndRequestAsync
  nameWithType: HttpApplication.AddOnEndRequestAsync
- uid: System.Web.HttpApplication.AddOnLogRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnLogRequestAsync
  nameWithType: HttpApplication.AddOnLogRequestAsync
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnMapRequestHandlerAsync
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAcquireRequestStateAsync
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthenticateRequestAsync
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthorizeRequestAsync
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostLogRequestAsync
  nameWithType: HttpApplication.AddOnPostLogRequestAsync
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostMapRequestHandlerAsync
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostReleaseRequestStateAsync
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostRequestHandlerExecuteAsync
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostResolveRequestCacheAsync
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostUpdateRequestCacheAsync
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPreRequestHandlerExecuteAsync
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnReleaseRequestStateAsync
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnResolveRequestCacheAsync
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnUpdateRequestCacheAsync
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync
- uid: System.Web.HttpApplication.Application*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Application
  nameWithType: HttpApplication.Application
- uid: System.Web.HttpApplication.CompleteRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: CompleteRequest
  nameWithType: HttpApplication.CompleteRequest
- uid: System.Web.HttpApplication.Context*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Context
  nameWithType: HttpApplication.Context
- uid: System.Web.HttpApplication.Dispose*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Dispose
  nameWithType: HttpApplication.Dispose
- uid: System.Web.HttpApplication.Events*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Events
  nameWithType: HttpApplication.Events
- uid: System.Web.HttpApplication.GetOutputCacheProviderName*
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetOutputCacheProviderName
  nameWithType: HttpApplication.GetOutputCacheProviderName
- uid: System.Web.HttpApplication.GetVaryByCustomString*
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetVaryByCustomString
  nameWithType: HttpApplication.GetVaryByCustomString
- uid: System.Web.HttpApplication.Init*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Init
  nameWithType: HttpApplication.Init
- uid: System.Web.HttpApplication.Modules*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Modules
  nameWithType: HttpApplication.Modules
- uid: System.Web.HttpApplication.RegisterModule*
  parent: System.Web.HttpApplication
  isExternal: false
  name: RegisterModule
  nameWithType: HttpApplication.RegisterModule
- uid: System.Web.HttpApplication.Request*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Request
  nameWithType: HttpApplication.Request
- uid: System.Web.HttpApplication.Response*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Response
  nameWithType: HttpApplication.Response
- uid: System.Web.HttpApplication.Server*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Server
  nameWithType: HttpApplication.Server
- uid: System.Web.HttpApplication.Session*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Session
  nameWithType: HttpApplication.Session
- uid: System.Web.HttpApplication.Site*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Site
  nameWithType: HttpApplication.Site
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.EndProcessRequest
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.IsReusable
  nameWithType: HttpApplication.System.Web.IHttpHandler.IsReusable
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.ProcessRequest
  nameWithType: HttpApplication.System.Web.IHttpHandler.ProcessRequest
- uid: System.Web.HttpApplication.User*
  parent: System.Web.HttpApplication
  isExternal: false
  name: User
  nameWithType: HttpApplication.User
