### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.ReplacementText
  id: ReplacementText
  children:
  - System.Speech.Recognition.ReplacementText.CountOfWords
  - System.Speech.Recognition.ReplacementText.DisplayAttributes
  - System.Speech.Recognition.ReplacementText.FirstWordIndex
  - System.Speech.Recognition.ReplacementText.Text
  langs:
  - csharp
  name: ReplacementText
  nameWithType: ReplacementText
  fullName: System.Speech.Recognition.ReplacementText
  type: Class
  summary: "Contém informações sobre um procedimento de normalização de reconhecimento de voz foi efetuada nos resultados de reconhecimento."
  remarks: "Normalização de reconhecimento de voz é a utilização de construções especiais ou os símbolos para expressar voz na escrita.       Por exemplo, suponha que se trata de texto reconhecido: &quot;quatro de Julho em doze um prazo de trinta PM, posso comprou a um ponto de seis kilograms de peixe para fourteen utilizados no compromisso e seis cents, no pike coloque mercado em seattle washington nove oito um dois dois&quot; Este é o mesmo texto após a normalização: &quot;4 de Julho às 12:31 PM, posso comprou a versão 1.6 kg de peixe para $14.06 , no mercado local pike em Seattle WA 98122&quot; neste exemplo, existem cinco substituições, cada um dos quais deverá ser descrita através de uma instância de ReplacementText.       Utilizar o objeto de ReplacementText, uma aplicação pode determinar:-a localização e o número de palavras substituído por normalização. Para obter mais informações, consulte <xref:System.Speech.Recognition.ReplacementText.FirstWordIndex%2A>ou <xref:System.Speech.Recognition.ReplacementText.CountOfWords%2A>.</xref:System.Speech.Recognition.ReplacementText.CountOfWords%2A> </xref:System.Speech.Recognition.ReplacementText.FirstWordIndex%2A>      -O texto substituído e os respetivos atributos de apresentação. Para obter mais informações, consulte <xref:System.Speech.Recognition.ReplacementText.Text%2A>e <xref:System.Speech.Recognition.ReplacementText.DisplayAttributes%2A>.</xref:System.Speech.Recognition.ReplacementText.DisplayAttributes%2A> </xref:System.Speech.Recognition.ReplacementText.Text%2A>       Instâncias de ReplacementText, normalmente, são obtidas membros do <xref:System.Collections.ObjectModel.Collection%601>objecto devolvido pelo <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A>propriedade no <xref:System.Speech.Recognition.RecognizedPhrase>(ou classes que herdam <xref:System.Speech.Recognition.RecognizedPhrase>, tais como <xref:System.Speech.Recognition.RecognitionResult>) quando texto devolvido foi normalizado.</xref:System.Speech.Recognition.RecognitionResult> </xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> </xref:System.Collections.ObjectModel.Collection%601>"
  example:
  - "The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \n  \n```c#  \ninternal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null && label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             \"  Recognizer currently at:   {0} mSec\\n\" +  \n                             \"  Audio Device currently at: {1} mSec\\n\",  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n  \n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(\"  Emulated input\\n\");  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               \"  Candidate Phrase at:       {0} mSec\\n\" +  \n                               \"  Phrase Length:             {1} mSec\\n\" +  \n                               \"  Input State Time:          {2}\\n\" +  \n                               \"  Input Format:              {3}\\n\",  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n  \n      label.Text += String.Format(\"  Confidence Level:          {0}\\n\", result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            \"  Recognizing Grammar:       {0}\\n\" +  \n                            \"  Recognizing Rule:          {1}\\n\",  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \"None\"),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \"None\"));  \n      }  \n  \n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(\"  Replacement text:\\n\");  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n  \n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += \" \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += \"  \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           \"      At index {0} for {1} words. Text: \\\"{2}\\\"\\n\",  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n  \n        }  \n        label.Text += String.Format(\"\\n\\n\");  \n      }  \n    }  \n  }    \n}  \n```"
  syntax:
    content: public class ReplacementText
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.ReplacementText.CountOfWords
  id: CountOfWords
  parent: System.Speech.Recognition.ReplacementText
  langs:
  - csharp
  name: CountOfWords
  nameWithType: ReplacementText.CountOfWords
  fullName: System.Speech.Recognition.ReplacementText.CountOfWords
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém o número de palavras reconhecidos substituído pelo procedimento de normalização de reconhecimento de voz."
  remarks: ''
  example:
  - "The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \n  \n```c#  \ninternal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null && label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             \"  Recognizer currently at:   {0} mSec\\n\" +  \n                             \"  Audio Device currently at: {1} mSec\\n\",  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n  \n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(\"  Emulated input\\n\");  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               \"  Candidate Phrase at:       {0} mSec\\n\" +  \n                               \"  Phrase Length:             {1} mSec\\n\" +  \n                               \"  Input State Time:          {2}\\n\" +  \n                               \"  Input Format:              {3}\\n\",  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n  \n      label.Text += String.Format(\"  Confidence Level:          {0}\\n\", result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            \"  Recognizing Grammar:       {0}\\n\" +  \n                            \"  Recognizing Rule:          {1}\\n\",  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \"None\"),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \"None\"));  \n      }  \n  \n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(\"  Replacement text:\\n\");  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n  \n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += \" \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += \"  \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           \"      At index {0} for {1} words. Text: \\\"{2}\\\"\\n\",  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n  \n        }  \n        label.Text += String.Format(\"\\n\\n\");  \n      }  \n    }  \n  }    \n}  \n```"
  syntax:
    content: public int CountOfWords { get; }
    return:
      type: System.Int32
      description: "Devolve o número de palavras reconhecidos substituído pelo procedimento de normalização de reconhecimento de voz."
  overload: System.Speech.Recognition.ReplacementText.CountOfWords*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.ReplacementText.DisplayAttributes
  id: DisplayAttributes
  parent: System.Speech.Recognition.ReplacementText
  langs:
  - csharp
  name: DisplayAttributes
  nameWithType: ReplacementText.DisplayAttributes
  fullName: System.Speech.Recognition.ReplacementText.DisplayAttributes
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém informações sobre os espaços à direita e à esquerda para o texto substituído pelo procedimento de normalização de reconhecimento de voz."
  remarks: ''
  example:
  - "The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \n  \n```c#  \ninternal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null && label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             \"  Recognizer currently at:   {0} mSec\\n\" +  \n                             \"  Audio Device currently at: {1} mSec\\n\",  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n  \n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(\"  Emulated input\\n\");  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               \"  Candidate Phrase at:       {0} mSec\\n\" +  \n                               \"  Phrase Length:             {1} mSec\\n\" +  \n                               \"  Input State Time:          {2}\\n\" +  \n                               \"  Input Format:              {3}\\n\",  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n  \n      label.Text += String.Format(\"  Confidence Level:          {0}\\n\", result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            \"  Recognizing Grammar:       {0}\\n\" +  \n                            \"  Recognizing Rule:          {1}\\n\",  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \"None\"),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \"None\"));  \n      }  \n  \n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(\"  Replacement text:\\n\");  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n  \n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += \" \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += \"  \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           \"      At index {0} for {1} words. Text: \\\"{2}\\\"\\n\",  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n  \n        }  \n        label.Text += String.Format(\"\\n\\n\");  \n      }  \n    }  \n  }    \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }
    return:
      type: System.Speech.Recognition.DisplayAttributes
      description: "Devolve um <xref href=&quot;System.Speech.Recognition.DisplayAttributes&quot;> </xref> objeto que especifica a utilização de espaço em branco para apresentar texto substituído por normalização."
  overload: System.Speech.Recognition.ReplacementText.DisplayAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.ReplacementText.FirstWordIndex
  id: FirstWordIndex
  parent: System.Speech.Recognition.ReplacementText
  langs:
  - csharp
  name: FirstWordIndex
  nameWithType: ReplacementText.FirstWordIndex
  fullName: System.Speech.Recognition.ReplacementText.FirstWordIndex
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém a localização da primeira palavra reconhecida substituída pelo procedimento de normalização de reconhecimento de voz."
  remarks: ''
  example:
  - "In the following example, information about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine is displayed to a user interface.  \n  \n```c#  \ninternal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null && label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             \"  Recognizer currently at:   {0} mSec\\n\" +  \n                             \"  Audio Device currently at: {1} mSec\\n\",  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n  \n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(\"  Emulated input\\n\");  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               \"  Candidate Phrase at:       {0} mSec\\n\" +  \n                               \"  Phrase Length:             {1} mSec\\n\" +  \n                               \"  Input State Time:          {2}\\n\" +  \n                               \"  Input Format:              {3}\\n\",  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n  \n      label.Text += String.Format(\"  Confidence Level:          {0}\\n\", result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            \"  Recognizing Grammar:       {0}\\n\" +  \n                            \"  Recognizing Rule:          {1}\\n\",  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \"None\"),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \"None\"));  \n      }  \n  \n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(\"  Replacement text:\\n\");  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n  \n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += \" \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += \"  \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           \"      At index {0} for {1} words. Text: \\\"{2}\\\"\\n\",  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n  \n        }  \n        label.Text += String.Format(\"\\n\\n\");  \n      }  \n    }  \n  }    \n}  \n```"
  syntax:
    content: public int FirstWordIndex { get; }
    return:
      type: System.Int32
      description: "Devolve a localização da primeira palavra reconhecida substituída pelo procedimento de normalização de reconhecimento de voz."
  overload: System.Speech.Recognition.ReplacementText.FirstWordIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.ReplacementText.Text
  id: Text
  parent: System.Speech.Recognition.ReplacementText
  langs:
  - csharp
  name: Text
  nameWithType: ReplacementText.Text
  fullName: System.Speech.Recognition.ReplacementText.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Obtém o texto reconhecido substituído pelo procedimento de normalização de reconhecimento de voz."
  remarks: ''
  example:
  - "The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \n  \n```c#  \ninternal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null && label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             \"  Recognizer currently at:   {0} mSec\\n\" +  \n                             \"  Audio Device currently at: {1} mSec\\n\",  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n  \n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(\"  Emulated input\\n\");  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               \"  Candidate Phrase at:       {0} mSec\\n\" +  \n                               \"  Phrase Length:             {1} mSec\\n\" +  \n                               \"  Input State Time:          {2}\\n\" +  \n                               \"  Input Format:              {3}\\n\",  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n  \n      label.Text += String.Format(\"  Confidence Level:          {0}\\n\", result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            \"  Recognizing Grammar:       {0}\\n\" +  \n                            \"  Recognizing Rule:          {1}\\n\",  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \"None\"),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \"None\"));  \n      }  \n  \n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(\"  Replacement text:\\n\");  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n  \n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += \" \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += \"  \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           \"      At index {0} for {1} words. Text: \\\"{2}\\\"\\n\",  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n  \n        }  \n        label.Text += String.Format(\"\\n\\n\");  \n      }  \n    }  \n  }    \n}  \n```"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: "Devolve o texto reconhecido substituído pelo procedimento de normalização de reconhecimento de voz."
  overload: System.Speech.Recognition.ReplacementText.Text*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.ReplacementText.CountOfWords
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: CountOfWords
  nameWithType: ReplacementText.CountOfWords
  fullName: System.Speech.Recognition.ReplacementText.CountOfWords
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.ReplacementText.DisplayAttributes
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: DisplayAttributes
  nameWithType: ReplacementText.DisplayAttributes
  fullName: System.Speech.Recognition.ReplacementText.DisplayAttributes
- uid: System.Speech.Recognition.DisplayAttributes
  parent: System.Speech.Recognition
  isExternal: false
  name: DisplayAttributes
  nameWithType: DisplayAttributes
  fullName: System.Speech.Recognition.DisplayAttributes
- uid: System.Speech.Recognition.ReplacementText.FirstWordIndex
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: FirstWordIndex
  nameWithType: ReplacementText.FirstWordIndex
  fullName: System.Speech.Recognition.ReplacementText.FirstWordIndex
- uid: System.Speech.Recognition.ReplacementText.Text
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: Text
  nameWithType: ReplacementText.Text
  fullName: System.Speech.Recognition.ReplacementText.Text
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.ReplacementText.CountOfWords*
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: CountOfWords
  nameWithType: ReplacementText.CountOfWords
- uid: System.Speech.Recognition.ReplacementText.DisplayAttributes*
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: DisplayAttributes
  nameWithType: ReplacementText.DisplayAttributes
- uid: System.Speech.Recognition.ReplacementText.FirstWordIndex*
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: FirstWordIndex
  nameWithType: ReplacementText.FirstWordIndex
- uid: System.Speech.Recognition.ReplacementText.Text*
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: Text
  nameWithType: ReplacementText.Text
