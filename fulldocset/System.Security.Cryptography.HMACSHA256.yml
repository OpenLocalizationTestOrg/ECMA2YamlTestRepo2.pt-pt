### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA256
  id: HMACSHA256
  children:
  - System.Security.Cryptography.HMACSHA256.#ctor
  - System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  langs:
  - csharp
  name: HMACSHA256
  nameWithType: HMACSHA256
  fullName: System.Security.Cryptography.HMACSHA256
  type: Class
  summary: "Computes a Hash-based Message Authentication Code (HMAC) by using the <xref href=&quot;System.Security.Cryptography.SHA256&quot;></xref> hash function."
  remarks: "HMACSHA256 is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 256 bits in length.       An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.       Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.       HMACSHA256 accepts keys of any size, and produces a hash sequence 256 bits in length."
  example:
  - "The following example shows how to sign a file by using the HMACSHA256 object and then how to verify the file.  \n  \n [!code-cs[HMACSHA256#1](~/add/codesnippet/csharp/t-system.security.crypto_55_1.cs)]\n [!code-cpp[HMACSHA256#1](~/add/codesnippet/cpp/t-system.security.crypto_55_1.cpp)]\n [!code-vb[HMACSHA256#1](~/add/codesnippet/visualbasic/t-system.security.crypto_55_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA256 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA256.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HMACSHA256()
  nameWithType: HMACSHA256.HMACSHA256()
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref> class with a randomly generated key."
  remarks: "<xref:System.Security.Cryptography.HMACSHA256> is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 256 bits in length.       This constructor uses a 64-byte, randomly generated key."
  syntax:
    content: public HMACSHA256 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA256.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HMACSHA256(Byte[])
  nameWithType: HMACSHA256.HMACSHA256(Byte[])
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref> class with the specified key data."
  remarks: "<xref:System.Security.Cryptography.HMACSHA256> is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 256 bits in length."
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA256> class.
  syntax:
    content: public HMACSHA256 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "The secret key for <xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref> encryption. The key can be any length. However, the recommended size is 64 bytes. If the key is more than 64 bytes long, it is hashed (using SHA-256) to derive a 64-byte key. If it is less than 64 bytes long, it is padded to 64 bytes."
  overload: System.Security.Cryptography.HMACSHA256.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA256.#ctor
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256()
  nameWithType: HMACSHA256.HMACSHA256()
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256()
- uid: System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256(Byte[])
  nameWithType: HMACSHA256.HMACSHA256(Byte[])
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA256.#ctor*
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256
  nameWithType: HMACSHA256.HMACSHA256
