### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherOperation
  id: DispatcherOperation
  children:
  - System.Windows.Threading.DispatcherOperation.Abort
  - System.Windows.Threading.DispatcherOperation.Aborted
  - System.Windows.Threading.DispatcherOperation.Completed
  - System.Windows.Threading.DispatcherOperation.Dispatcher
  - System.Windows.Threading.DispatcherOperation.GetAwaiter
  - System.Windows.Threading.DispatcherOperation.InvokeDelegateCore
  - System.Windows.Threading.DispatcherOperation.Priority
  - System.Windows.Threading.DispatcherOperation.Result
  - System.Windows.Threading.DispatcherOperation.Status
  - System.Windows.Threading.DispatcherOperation.Task
  - System.Windows.Threading.DispatcherOperation.Wait
  - System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)
  langs:
  - csharp
  name: DispatcherOperation
  nameWithType: DispatcherOperation
  fullName: System.Windows.Threading.DispatcherOperation
  type: Class
  summary: "Represents an object that is used to interact with an operation that has been posted to the <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref> queue."
  remarks: "<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a DispatcherOperation object when it is called.       The DispatcherOperation object can be used to interact with the delegate on the <xref:System.Windows.Threading.Dispatcher> queue, such as changing the priority of the operation or aborting the operation.       To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.       The DispatcherOperation is not an exception handling boundary. This means that exceptions are handled by the <xref:System.Windows.Threading.Dispatcher> and are not preserved by the operation."
  syntax:
    content: public class DispatcherOperation
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.Abort
  id: Abort
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: Abort()
  nameWithType: DispatcherOperation.Abort()
  fullName: System.Windows.Threading.DispatcherOperation.Abort()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Aborts the operation."
  remarks: "If an operation is already in progress, this method will return `false`.       When an operation is aborted, the <xref:System.Windows.Threading.DispatcherOperation.Status%2A> of the <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus> and the <xref:System.Windows.Threading.DispatcherOperation.Aborted> event is raised."
  syntax:
    content: public bool Abort ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the operation was aborted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Threading.DispatcherOperation.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.Aborted
  id: Aborted
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: Aborted
  nameWithType: DispatcherOperation.Aborted
  fullName: System.Windows.Threading.DispatcherOperation.Aborted
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Occurs when the operation is aborted."
  syntax:
    content: public event EventHandler Aborted;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.Completed
  id: Completed
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: Completed
  nameWithType: DispatcherOperation.Completed
  fullName: System.Windows.Threading.DispatcherOperation.Completed
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Occurs when the operation has completed."
  syntax:
    content: public event EventHandler Completed;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherOperation.Dispatcher
  fullName: System.Windows.Threading.DispatcherOperation.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Gets the <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref> that the operation was posted to."
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "The dispatcher."
  overload: System.Windows.Threading.DispatcherOperation.Dispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.GetAwaiter
  id: GetAwaiter
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: GetAwaiter()
  nameWithType: DispatcherOperation.GetAwaiter()
  fullName: System.Windows.Threading.DispatcherOperation.GetAwaiter()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Returns an object that is notified when the asynchronous operation is finished."
  syntax:
    content: public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();
    parameters: []
    return:
      type: System.Runtime.CompilerServices.TaskAwaiter
      description: "An object that is notified when the asynchronous operation is finished."
  overload: System.Windows.Threading.DispatcherOperation.GetAwaiter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore
  id: InvokeDelegateCore
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: InvokeDelegateCore()
  nameWithType: DispatcherOperation.InvokeDelegateCore()
  fullName: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Begins the operation that is associated with this <xref href=&quot;System.Windows.Threading.DispatcherOperation&quot;></xref>."
  syntax:
    content: protected virtual object InvokeDelegateCore ();
    parameters: []
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> in all cases."
  overload: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.Priority
  id: Priority
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: Priority
  nameWithType: DispatcherOperation.Priority
  fullName: System.Windows.Threading.DispatcherOperation.Priority
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Gets or sets the priority of the operation in the <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref> queue."
  syntax:
    content: public System.Windows.Threading.DispatcherPriority Priority { get; set; }
    return:
      type: System.Windows.Threading.DispatcherPriority
      description: "The priority of the delegate on the queue."
  overload: System.Windows.Threading.DispatcherOperation.Priority*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.Result
  id: Result
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: Result
  nameWithType: DispatcherOperation.Result
  fullName: System.Windows.Threading.DispatcherOperation.Result
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Gets the result of the operation after it has completed."
  syntax:
    content: public object Result { get; }
    return:
      type: System.Object
      description: "The result of the operation -or- <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the operation has not completed."
  overload: System.Windows.Threading.DispatcherOperation.Result*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.Status
  id: Status
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: Status
  nameWithType: DispatcherOperation.Status
  fullName: System.Windows.Threading.DispatcherOperation.Status
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Gets the current status of the operation.."
  remarks: "The stages of a <xref:System.Windows.Threading.DispatcherOperation> are <xref:System.Windows.Threading.DispatcherOperationStatus>, <xref:System.Windows.Threading.DispatcherOperationStatus>, and <xref:System.Windows.Threading.DispatcherOperationStatus>.  At any point before the operation has completed, the status can be set to <xref:System.Windows.Threading.DispatcherOperationStatus>."
  syntax:
    content: public System.Windows.Threading.DispatcherOperationStatus Status { get; }
    return:
      type: System.Windows.Threading.DispatcherOperationStatus
      description: "The status of the operation."
  overload: System.Windows.Threading.DispatcherOperation.Status*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.Task
  id: Task
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: Task
  nameWithType: DispatcherOperation.Task
  fullName: System.Windows.Threading.DispatcherOperation.Task
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Gets a &lt;xref:System.Threading.Tasks.Task%601&gt; that represents the current operation."
  syntax:
    content: public System.Threading.Tasks.Task Task { get; }
    return:
      type: System.Threading.Tasks.Task
      description: "An object that represents the current operation."
  overload: System.Windows.Threading.DispatcherOperation.Task*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.Wait
  id: Wait
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: Wait()
  nameWithType: DispatcherOperation.Wait()
  fullName: System.Windows.Threading.DispatcherOperation.Wait()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Waits for the operation to complete"
  remarks: "To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property."
  syntax:
    content: public System.Windows.Threading.DispatcherOperationStatus Wait ();
    parameters: []
    return:
      type: System.Windows.Threading.DispatcherOperationStatus
      description: "The status of the operation."
  overload: System.Windows.Threading.DispatcherOperation.Wait*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Windows.Threading.DispatcherOperation.Status*> is equal to <xref href=&quot;System.Windows.Threading.DispatcherOperationStatus&quot;></xref>.  This can occur when waiting for an operation that is already executing on the same thread."
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Windows.Threading.DispatcherOperation
  langs:
  - csharp
  name: Wait(TimeSpan)
  nameWithType: DispatcherOperation.Wait(TimeSpan)
  fullName: System.Windows.Threading.DispatcherOperation.Wait(TimeSpan)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Waits for the operation to complete in the specified period of time."
  remarks: "To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property."
  syntax:
    content: public System.Windows.Threading.DispatcherOperationStatus Wait (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "The maximum period of time to wait."
    return:
      type: System.Windows.Threading.DispatcherOperationStatus
      description: "The status of the operation."
  overload: System.Windows.Threading.DispatcherOperation.Wait*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Windows.Threading.DispatcherOperation.Status*> is equal to <xref href=&quot;System.Windows.Threading.DispatcherOperationStatus&quot;></xref>.  This can occur when waiting for an operation that is already executing on the same thread."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Threading.DispatcherOperation.Abort
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Abort()
  nameWithType: DispatcherOperation.Abort()
  fullName: System.Windows.Threading.DispatcherOperation.Abort()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherOperation.Aborted
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Aborted
  nameWithType: DispatcherOperation.Aborted
  fullName: System.Windows.Threading.DispatcherOperation.Aborted
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Threading.DispatcherOperation.Completed
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Completed
  nameWithType: DispatcherOperation.Completed
  fullName: System.Windows.Threading.DispatcherOperation.Completed
- uid: System.Windows.Threading.DispatcherOperation.Dispatcher
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherOperation.Dispatcher
  fullName: System.Windows.Threading.DispatcherOperation.Dispatcher
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherOperation.GetAwaiter
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: GetAwaiter()
  nameWithType: DispatcherOperation.GetAwaiter()
  fullName: System.Windows.Threading.DispatcherOperation.GetAwaiter()
- uid: System.Runtime.CompilerServices.TaskAwaiter
  parent: System.Runtime.CompilerServices
  isExternal: true
  name: TaskAwaiter
  nameWithType: TaskAwaiter
  fullName: System.Runtime.CompilerServices.TaskAwaiter
- uid: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: InvokeDelegateCore()
  nameWithType: DispatcherOperation.InvokeDelegateCore()
  fullName: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore()
- uid: System.Windows.Threading.DispatcherOperation.Priority
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Priority
  nameWithType: DispatcherOperation.Priority
  fullName: System.Windows.Threading.DispatcherOperation.Priority
- uid: System.Windows.Threading.DispatcherPriority
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherPriority
  nameWithType: DispatcherPriority
  fullName: System.Windows.Threading.DispatcherPriority
- uid: System.Windows.Threading.DispatcherOperation.Result
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Result
  nameWithType: DispatcherOperation.Result
  fullName: System.Windows.Threading.DispatcherOperation.Result
- uid: System.Windows.Threading.DispatcherOperation.Status
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Status
  nameWithType: DispatcherOperation.Status
  fullName: System.Windows.Threading.DispatcherOperation.Status
- uid: System.Windows.Threading.DispatcherOperationStatus
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherOperationStatus
  nameWithType: DispatcherOperationStatus
  fullName: System.Windows.Threading.DispatcherOperationStatus
- uid: System.Windows.Threading.DispatcherOperation.Task
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Task
  nameWithType: DispatcherOperation.Task
  fullName: System.Windows.Threading.DispatcherOperation.Task
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Windows.Threading.DispatcherOperation.Wait
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Wait()
  nameWithType: DispatcherOperation.Wait()
  fullName: System.Windows.Threading.DispatcherOperation.Wait()
- uid: System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Wait(TimeSpan)
  nameWithType: DispatcherOperation.Wait(TimeSpan)
  fullName: System.Windows.Threading.DispatcherOperation.Wait(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Windows.Threading.DispatcherOperation.Abort*
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Abort
  nameWithType: DispatcherOperation.Abort
- uid: System.Windows.Threading.DispatcherOperation.Dispatcher*
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherOperation.Dispatcher
- uid: System.Windows.Threading.DispatcherOperation.GetAwaiter*
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: GetAwaiter
  nameWithType: DispatcherOperation.GetAwaiter
- uid: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore*
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: InvokeDelegateCore
  nameWithType: DispatcherOperation.InvokeDelegateCore
- uid: System.Windows.Threading.DispatcherOperation.Priority*
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Priority
  nameWithType: DispatcherOperation.Priority
- uid: System.Windows.Threading.DispatcherOperation.Result*
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Result
  nameWithType: DispatcherOperation.Result
- uid: System.Windows.Threading.DispatcherOperation.Status*
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Status
  nameWithType: DispatcherOperation.Status
- uid: System.Windows.Threading.DispatcherOperation.Task*
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Task
  nameWithType: DispatcherOperation.Task
- uid: System.Windows.Threading.DispatcherOperation.Wait*
  parent: System.Windows.Threading.DispatcherOperation
  isExternal: false
  name: Wait
  nameWithType: DispatcherOperation.Wait
