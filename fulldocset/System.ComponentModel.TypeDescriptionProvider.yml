### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeDescriptionProvider
  id: TypeDescriptionProvider
  children:
  - System.ComponentModel.TypeDescriptionProvider.#ctor
  - System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  - System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  langs:
  - csharp
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
  type: Class
  summary: "Provides supplemental metadata to the <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;></xref>."
  remarks: "The TypeDescriptionProvider class dynamically extends the type information associated with a type or object by adding, modifying, or hiding characteristics such as attributes, properties, and events. There can be multiple type description provider classes that offer metadata to a single <xref:System.ComponentModel.TypeDescriptor>.       There are two ways to associate a TypeDescriptionProvider with a <xref:System.ComponentModel.TypeDescriptor>:      -   At design time, when the target class can be assigned the appropriate <xref:System.ComponentModel.TypeDescriptionProviderAttribute> tag.      -   At run time, when one of the <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> methods of the <xref:System.ComponentModel.TypeDescriptor> class can be called. These overloaded methods require either the target object or its class type.       The TypeDescriptionProvider class relies on a parent object of the same type, supplied during construction. This allows classes that derive from <xref:System.ComponentModel.CustomTypeDescriptor> to selectively override methods.       Instances of TypeDescriptionProvider are only built upon demand, minimizing the impact of custom type information on performance.       This class cannot be inherited."
  syntax:
    content: public abstract class TypeDescriptionProvider
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: TypeDescriptionProvider()
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider()
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> class."
  remarks: "This constructor is equivalent to calling the other <xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29> constructor with a parameter value that is `null`."
  syntax:
    content: protected TypeDescriptionProvider ();
    parameters: []
  overload: System.ComponentModel.TypeDescriptionProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  id: '#ctor(System.ComponentModel.TypeDescriptionProvider)'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: TypeDescriptionProvider(TypeDescriptionProvider)
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> class using a parent type description provider."
  remarks: "If the `parent` parameter is `null`, all <xref:System.ComponentModel.TypeDescriptionProvider> methods will return default values. Otherwise, all <xref:System.ComponentModel.TypeDescriptionProvider> methods will delegate to the methods of `parent`.       The following table shows the default return values for <xref:System.ComponentModel.TypeDescriptionProvider> methods.      |Method|Default return value|   |------------|--------------------------|   |<xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>|`null`|   |<xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>|A newly created object through a call to the <xref:System.Activator.CreateInstance%2A> method.|   |<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>|A default instance of a <xref:System.ComponentModel.CustomTypeDescriptor> class.|   |<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>|A default instance of a <xref:System.ComponentModel.CustomTypeDescriptor> class.|   |<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>|The `objectType` first parameter.|"
  syntax:
    content: protected TypeDescriptionProvider (System.ComponentModel.TypeDescriptionProvider parent);
    parameters:
    - id: parent
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The parent type description provider."
  overload: System.ComponentModel.TypeDescriptionProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Creates an object that can substitute for another data type."
  remarks: "The <xref:System.IServiceProvider> specified by the `provider` parameter is passed in by the <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=fullName> method of the <xref:System.ComponentModel.TypeDescriptor> class. If `provider` is not `null`, the service provider can be used by the type description provider to obtain additional context about the creation call.       The CreateInstance method is `virtual` and, by default, returns the result of the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method if `provider` is `null`. If `provider` is `null`, this method will invoke the CreateInstance method of the parent provider."
  syntax:
    content: public virtual object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "An optional service provider."
    - id: objectType
      type: System.Type
      description: "The type of object to create. This parameter is never <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: argTypes
      type: System.Type[]
      description: "An optional array of types that represent the parameter types to be passed to the object&quot;s constructor. This array can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or of zero length."
    - id: args
      type: System.Object[]
      description: "An optional array of parameter values to pass to the object&quot;s constructor."
    return:
      type: System.Object
      description: "The substitute <xref:System.Object>."
  overload: System.ComponentModel.TypeDescriptionProvider.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  id: GetCache(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetCache(Object)
  nameWithType: TypeDescriptionProvider.GetCache(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a per-object cache, accessed as an <xref:System.Collections.IDictionary> of key/value pairs."
  remarks: "A <xref:System.ComponentModel.TypeDescriptor> may need to perform complex operations on collections of metadata. Because types are not unloaded for the life of a domain, the <xref:System.ComponentModel.TypeDescriptor> class will automatically cache the results of these operations based on type. However, some operations use live object instances. These operations cannot be cached within the <xref:System.ComponentModel.TypeDescriptor> class because caching them would prevent the object from being garbage collected. Instead, the <xref:System.ComponentModel.TypeDescriptor> class allows for a per-object cache, accessed as an <xref:System.Collections.IDictionary> of key/value pairs, to exist on an object. The GetCache method returns an instance of this cache. The GetCache method will return `null` if there is no supported cache for an object.       The default <xref:System.ComponentModel.TypeDescriptionProvider> used by <xref:System.ComponentModel.TypeDescriptor> examines the object to see if it is a sited component that implements the <xref:System.ComponentModel.Design.IDictionaryService> interface. If the object is, it uses the dictionary service to store the object&quot;s cache. Otherwise, the object it returns `null`. Other type description providers may provide their own implementation here. For example, dependency objects can just attach a property of type <xref:System.Collections.IDictionary>."
  syntax:
    content: public virtual System.Collections.IDictionary GetCache (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "The object for which to get the cache."
    return:
      type: System.Collections.IDictionary
      description: "An <xref:System.Collections.IDictionary> if the provided object supports caching; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.TypeDescriptionProvider.GetCache*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  id: GetExtendedTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetExtendedTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets an extended custom type descriptor for the given object."
  remarks: "An extended type descriptor is a custom type descriptor that offers properties that other objects have added to this object, but that are not actually defined on the object. For example, in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] component model, objects that implement the <xref:System.ComponentModel.IExtenderProvider> interface can attach properties to other objects that reside in the same logical container. The overloaded <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> methods do not return a type descriptor that provides these extra extended properties. The GetExtendedTypeDescriptor method returns the set of these extended properties. The <xref:System.ComponentModel.TypeDescriptor> will automatically merge the results of these two property collections. While the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] component model supports only extended properties, GetExtendedTypeDescriptor can be used for extended attributes as well as events, if the type description provider supports it.       GetExtendedTypeDescriptor is `virtual` and, by default, returns a custom type descriptor that returns empty results if no parent provider was passed. If a parent provider was passed, this method will invoke the parent provider&quot;s GetExtendedTypeDescriptor method."
  syntax:
    content: public virtual System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "The object for which to get the extended type descriptor."
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "An <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;></xref> that can provide extended metadata for the object."
  overload: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  id: GetExtenderProviders(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetExtenderProviders(Object)
  nameWithType: TypeDescriptionProvider.GetExtenderProviders(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the extender providers for the specified object."
  syntax:
    content: protected virtual System.ComponentModel.IExtenderProvider[] GetExtenderProviders (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "The object to get extender providers for."
    return:
      type: System.ComponentModel.IExtenderProvider[]
      description: "An array of extender providers for <code>instance</code>."
  overload: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptionProvider.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the name of the specified component, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the component has no name."
  syntax:
    content: public virtual string GetFullComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "The specified component."
    return:
      type: System.String
      description: "The name of the specified component."
  overload: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Performs normal reflection against the given object."
  remarks: "The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method. If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.       Use this method overload if you have called a type descriptor member that uses an instance instead of a type."
  syntax:
    content: public Type GetReflectionType (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "An instance of the type (should not be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>)."
    return:
      type: System.Type
      description: "The type of reflection for this <code>instance</code>."
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Performs normal reflection against a type."
  remarks: "The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method. If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.       Use this method overload if you have called a type descriptor member that uses a type instead of an instance."
  syntax:
    content: public Type GetReflectionType (Type objectType);
    parameters:
    - id: objectType
      type: System.Type
      description: "The type of object for which to retrieve the <xref href=&quot;System.Reflection.IReflect&quot;></xref>."
    return:
      type: System.Type
      description: "The type of reflection for this <code>objectType</code>."
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>objectType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  id: GetReflectionType(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Type,Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Performs normal reflection against the given object with the given type."
  remarks: "The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method. If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object."
  syntax:
    content: public virtual Type GetReflectionType (Type objectType, object instance);
    parameters:
    - id: objectType
      type: System.Type
      description: "The type of object for which to retrieve the <xref href=&quot;System.Reflection.IReflect&quot;></xref>."
    - id: instance
      type: System.Object
      description: "An instance of the type. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Type
      description: "The type of reflection for this <code>objectType</code>."
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  id: GetRuntimeType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetRuntimeType(Type)
  nameWithType: TypeDescriptionProvider.GetRuntimeType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Converts a reflection type into a runtime type."
  remarks: "The GetRuntimeType method reverses the<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method to convert a reflection type back into a runtime type. Using the GetRuntimeType method is preferred over using the <xref:System.Type.UnderlyingSystemType%2A> property, which was used in earlier versions to return the runtime type."
  syntax:
    content: public virtual Type GetRuntimeType (Type reflectionType);
    parameters:
    - id: reflectionType
      type: System.Type
      description: "The type to convert to its runtime equivalent."
    return:
      type: System.Type
      description: "A <xref:System.Type> that represents the runtime equivalent of <code>reflectionType</code>."
  overload: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reflectionType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  id: GetTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a custom type descriptor for the given object."
  syntax:
    content: public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "An instance of the type. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no instance was passed to the <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;></xref>."
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "An <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;></xref> that can provide metadata for the type."
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  id: GetTypeDescriptor(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Type)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a custom type descriptor for the given type."
  syntax:
    content: public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType);
    parameters:
    - id: objectType
      type: System.Type
      description: "The type of object for which to retrieve the type descriptor."
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "An <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;></xref> that can provide metadata for the type."
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  id: GetTypeDescriptor(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Type,Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a custom type descriptor for the given type and object."
  remarks: "This method is prototyped as `virtual` and, by default, returns an empty descriptor if no parent provider was passed. If a parent provider was passed, this method will invoke the parent provider&quot;s GetTypeDescriptor method."
  syntax:
    content: public virtual System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType, object instance);
    parameters:
    - id: objectType
      type: System.Type
      description: "The type of object for which to retrieve the type descriptor."
    - id: instance
      type: System.Object
      description: "An instance of the type. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if no instance was passed to the <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;></xref>."
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "An <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;></xref> that can provide metadata for the type."
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  id: IsSupportedType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: IsSupportedType(Type)
  nameWithType: TypeDescriptionProvider.IsSupportedType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers."
  syntax:
    content: public virtual bool IsSupportedType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The type to test for compatibility."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>type</code> is compatible with the type description and its chain of type description providers; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.TypeDescriptionProvider.IsSupportedType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider()
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider()
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider(TypeDescriptionProvider)
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetCache(Object)
  nameWithType: TypeDescriptionProvider.GetCache(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(Object)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtendedTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
- uid: System.ComponentModel.ICustomTypeDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: ICustomTypeDescriptor
  nameWithType: ICustomTypeDescriptor
  fullName: System.ComponentModel.ICustomTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtenderProviders(Object)
  nameWithType: TypeDescriptionProvider.GetExtenderProviders(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(Object)
- uid: System.ComponentModel.IExtenderProvider[]
  parent: System.ComponentModel
  isExternal: false
  name: IExtenderProvider
  nameWithType: IExtenderProvider
  fullName: System.ComponentModel.IExtenderProvider[]
  spec.csharp:
  - uid: System.ComponentModel.IExtenderProvider
    name: IExtenderProvider
    nameWithType: IExtenderProvider
    fullName: IExtenderProvider[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptionProvider.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Type,Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type,Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetRuntimeType(Type)
  nameWithType: TypeDescriptionProvider.GetRuntimeType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Type)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Type,Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: IsSupportedType(Type)
  nameWithType: TypeDescriptionProvider.IsSupportedType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: CreateInstance
  nameWithType: TypeDescriptionProvider.CreateInstance
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetCache
  nameWithType: TypeDescriptionProvider.GetCache
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtendedTypeDescriptor
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtenderProviders
  nameWithType: TypeDescriptionProvider.GetExtenderProviders
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetFullComponentName
  nameWithType: TypeDescriptionProvider.GetFullComponentName
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType
  nameWithType: TypeDescriptionProvider.GetReflectionType
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetRuntimeType
  nameWithType: TypeDescriptionProvider.GetRuntimeType
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: IsSupportedType
  nameWithType: TypeDescriptionProvider.IsSupportedType
