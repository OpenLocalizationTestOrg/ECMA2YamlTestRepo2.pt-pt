### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeDescriptionProvider
  id: TypeDescriptionProvider
  children:
  - System.ComponentModel.TypeDescriptionProvider.#ctor
  - System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  - System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  langs:
  - csharp
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
  type: Class
  summary: "Fornece suplementares metadados para o <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>."
  remarks: "A classe de TypeDescriptionProvider dinamicamente expande as informações de tipo associadas a um tipo ou o objeto, adicionar, modificar ou ocultar características como atributos, propriedades e os eventos. Podem existir vários tipo Descrição classes de fornecedor que oferecem metadados para um único <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor>       Existem duas formas para associar um TypeDescriptionProvider com um <xref:System.ComponentModel.TypeDescriptor>: - no momento da conceção, quando a classe de destino pode ser atribuída a adequado <xref:System.ComponentModel.TypeDescriptionProviderAttribute>tag.</xref:System.ComponentModel.TypeDescriptionProviderAttribute> </xref:System.ComponentModel.TypeDescriptor>      -At executar tempo, quando um do <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>métodos do <xref:System.ComponentModel.TypeDescriptor>classe pode ser chamada.</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> Estes métodos sobrecarregados requerem o objeto de destino ou o tipo de classe.       A classe de TypeDescriptionProvider depende do objeto principal do mesmo tipo, fornecido durante a construção. Isto permite que as classes que derivem de <xref:System.ComponentModel.CustomTypeDescriptor>seletivamente substituir métodos.</xref:System.ComponentModel.CustomTypeDescriptor>       Instâncias de TypeDescriptionProvider apenas são criadas após a pedido, minimizar o impacto das informações de tipo personalizado no desempenho.       Esta classe não pode ser herdada."
  syntax:
    content: public abstract class TypeDescriptionProvider
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: TypeDescriptionProvider()
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider()
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> classe."
  remarks: "Este construtor é equivalente a chamar outros <xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29>construtor com um valor de parâmetro que é `null`.</xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29>"
  syntax:
    content: protected TypeDescriptionProvider ();
    parameters: []
  overload: System.ComponentModel.TypeDescriptionProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  id: '#ctor(System.ComponentModel.TypeDescriptionProvider)'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: TypeDescriptionProvider(TypeDescriptionProvider)
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> utilizando um fornecedor de descrição do tipo de principal de classe."
  remarks: "Se o `parent` parâmetro é `null`, todos os <xref:System.ComponentModel.TypeDescriptionProvider>métodos irão devolver valores predefinidos.</xref:System.ComponentModel.TypeDescriptionProvider> Caso contrário, todos os <xref:System.ComponentModel.TypeDescriptionProvider>métodos irão delegar para os métodos de `parent`.</xref:System.ComponentModel.TypeDescriptionProvider>       A tabela seguinte mostra os valores de retorno predefinidos para <xref:System.ComponentModel.TypeDescriptionProvider>métodos.</xref:System.ComponentModel.TypeDescriptionProvider>      | Método | Valor de retorno predefinido |   |------------|--------------------------|   | <xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>| `null`|   | <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>| Um objeto criado recentemente através de uma chamada ao método <xref:System.Activator.CreateInstance%2A>. |   | <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>| Uma instância predefinida de uma classe de <xref:System.ComponentModel.CustomTypeDescriptor>. |   | <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>| Uma instância predefinida de uma classe de <xref:System.ComponentModel.CustomTypeDescriptor>. |   | <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>| O `objectType` primeiro parâmetro. |</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> </xref:System.ComponentModel.CustomTypeDescriptor> </xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.CustomTypeDescriptor> </xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> </xref:System.Activator.CreateInstance%2A> </xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>"
  syntax:
    content: protected TypeDescriptionProvider (System.ComponentModel.TypeDescriptionProvider parent);
    parameters:
    - id: parent
      type: System.ComponentModel.TypeDescriptionProvider
      description: "O fornecedor de descrição do tipo de principal."
  overload: System.ComponentModel.TypeDescriptionProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Cria um objeto que pode substituir a outro tipo de dados."
  remarks: "O <xref:System.IServiceProvider>especificada pelo `provider` parâmetro seja transmitido pelo <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=fullName>método de <xref:System.ComponentModel.TypeDescriptor>classe.</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=fullName> </xref:System.IServiceProvider> Se `provider` não é `null`, o fornecedor de serviço pode ser utilizado pelo fornecedor de descrição de tipo para obter o contexto adicional sobre a criação de chamada.       O método de CreateInstance `virtual` e, por predefinição, devolve o resultado do <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>método se `provider` é `null`.</xref:System.Activator.CreateInstance%2A?displayProperty=fullName> Se `provider` é `null`, este método irá invocar o método de CreateInstance do fornecedor principal."
  syntax:
    content: public virtual object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "Um fornecedor de serviço opcional."
    - id: objectType
      type: System.Type
      description: "O tipo de objeto a criar. Este parâmetro é nunca <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: argTypes
      type: System.Type[]
      description: "Uma matriz opcional de tipos que representam os tipos de parâmetro a ser transmitido ao construtor do objeto. Esta matriz pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou de comprimento zero."
    - id: args
      type: System.Object[]
      description: "Uma matriz opcional de valores de parâmetros a transmitir ao construtor do objeto."
    return:
      type: System.Object
      description: "Substitui <xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptionProvider.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  id: GetCache(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetCache(Object)
  nameWithType: TypeDescriptionProvider.GetCache(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém uma cache por objeto, acessível como um <xref:System.Collections.IDictionary>de pares chave/valor.</xref:System.Collections.IDictionary>"
  remarks: "A <xref:System.ComponentModel.TypeDescriptor>poderá ter de efetuar operações complexas em coleções de metadados.</xref:System.ComponentModel.TypeDescriptor> Porque os tipos não são descarregados de vida de um domínio, o <xref:System.ComponentModel.TypeDescriptor>classe será automaticamente os resultados destas operações com base no tipo de cache.</xref:System.ComponentModel.TypeDescriptor> No entanto, algumas operações utilizam instâncias de objetos em direto. Estas operações não podem ser colocadas em cache dentro da <xref:System.ComponentModel.TypeDescriptor>classe porque a colocação em cache-los seria impedir que o objeto que está a ser recolhidos.</xref:System.ComponentModel.TypeDescriptor> Em vez disso, o <xref:System.ComponentModel.TypeDescriptor>classe permite a uma cache por objeto, acedida como um <xref:System.Collections.IDictionary>de pares chave/valor, para existir um objeto.</xref:System.Collections.IDictionary> </xref:System.ComponentModel.TypeDescriptor> O método de GetCache devolve uma instância desta cache. O método GetCache irá devolver `null` se não houver nenhuma cache suportada para um objeto.       A predefinição <xref:System.ComponentModel.TypeDescriptionProvider>utilizado pelo <xref:System.ComponentModel.TypeDescriptor>examina o objeto para ver se é um componente sited que implementa o <xref:System.ComponentModel.Design.IDictionaryService>interface.</xref:System.ComponentModel.Design.IDictionaryService> </xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeDescriptionProvider> Se o objeto, utiliza o serviço de dicionário para armazenar a cache do objeto. Caso contrário, o objeto devolve `null`. Outros fornecedores de descrição do tipo poderão fornecer as seus próprios implementação aqui. Por exemplo, os objetos de dependência apenas podem anexar uma propriedade do tipo <xref:System.Collections.IDictionary>.</xref:System.Collections.IDictionary>"
  syntax:
    content: public virtual System.Collections.IDictionary GetCache (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "O objeto para o qual obter a cache."
    return:
      type: System.Collections.IDictionary
      description: "Um <xref:System.Collections.IDictionary>se o objeto fornecido suporta a colocação em cache; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IDictionary>"
  overload: System.ComponentModel.TypeDescriptionProvider.GetCache*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  id: GetExtendedTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetExtendedTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um descritor de tipo personalizado expandido para o objeto fornecido."
  remarks: "Um descritor de tipo expandido é um descritor de tipo personalizado que oferece propriedades que outros objetos adicionados a este objeto, mas que não são realmente definidas no objeto. Por exemplo, no [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] objetos de modelo do componente, que implementa o <xref:System.ComponentModel.IExtenderProvider>interface pode anexar propriedades outros objetos que residem no mesmo contentor lógico.</xref:System.ComponentModel.IExtenderProvider> O sobrecarregado <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>métodos não devolver um descritor de tipo que fornece estas propriedades extra expandidas.</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> O método GetExtendedTypeDescriptor devolve o conjunto destas propriedades expandidas. O <xref:System.ComponentModel.TypeDescriptor>intercalará automaticamente os resultados destas coleções de duas propriedade.</xref:System.ComponentModel.TypeDescriptor> Enquanto o [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] modelo de componentes suporta apenas as propriedades expandidas, GetExtendedTypeDescriptor pode ser utilizado para atributos expandidos, bem como eventos, se o fornecedor de descrições de tipo suportar.       É GetExtendedTypeDescriptor `virtual` e, por predefinição, devolve um descritor de tipo personalizado que devolve resultados vazios se nenhum fornecedor de principal foi transmitido. Se foi transmitido um fornecedor de principal, este método irá invocar o método de GetExtendedTypeDescriptor o fornecedor principal."
  syntax:
    content: public virtual System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "O objeto para o qual pretende obter o descritor de tipo expandido."
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref> que pode fornecer metadados expandido para o objeto."
  overload: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  id: GetExtenderProviders(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetExtenderProviders(Object)
  nameWithType: TypeDescriptionProvider.GetExtenderProviders(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém os fornecedores de extensão para o objeto especificado."
  syntax:
    content: protected virtual System.ComponentModel.IExtenderProvider[] GetExtenderProviders (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "O objeto obter fornecedores de extensão para."
    return:
      type: System.ComponentModel.IExtenderProvider[]
      description: "Uma matriz de fornecedores de extensão para <code> instance </code>."
  overload: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptionProvider.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém o nome do componente especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o componente não tem nome."
  syntax:
    content: public virtual string GetFullComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "O componente especificado."
    return:
      type: System.String
      description: "O nome do componente especificado."
  overload: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Executa reflexão normal contra o objeto fornecido."
  remarks: "O <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>método é uma versão de nível inferior do <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>método.</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> Se nenhum descritor de tipo personalizado pode estar localizado para um objeto, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>é chamado para efetuar a reflexão normal contra o objeto.</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>       Utilize esta sobrecarga de método se tiver chamar um membro de descritor de tipo que utiliza uma instância em vez de um tipo."
  syntax:
    content: public Type GetReflectionType (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "Uma instância do tipo (não deve ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>)."
    return:
      type: System.Type
      description: "O tipo de reflexão para este <code> instance </code>."
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Executa reflexão normal em relação a um tipo."
  remarks: "O <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>método é uma versão de nível inferior do <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>método.</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> Se nenhum descritor de tipo personalizado pode estar localizado para um objeto, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>é chamado para efetuar a reflexão normal contra o objeto.</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>       Utilize esta sobrecarga de método se tiver de chamar um membro de descritor de tipo que utiliza um tipo em vez de uma instância."
  syntax:
    content: public Type GetReflectionType (Type objectType);
    parameters:
    - id: objectType
      type: System.Type
      description: "O tipo de objeto para o qual pretende obter o <xref href=&quot;System.Reflection.IReflect&quot;> </xref>."
    return:
      type: System.Type
      description: "O tipo de reflexão para este <code> objectType </code>."
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>objectType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  id: GetReflectionType(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Type,Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Executa reflexão normal contra o objeto fornecido com o tipo especificado."
  remarks: "O <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>método é uma versão de nível inferior do <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>método.</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> Se nenhum descritor de tipo personalizado pode estar localizado para um objeto, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>é chamado para efetuar a reflexão normal contra o objeto.</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>"
  syntax:
    content: public virtual Type GetReflectionType (Type objectType, object instance);
    parameters:
    - id: objectType
      type: System.Type
      description: "O tipo de objeto para o qual pretende obter o <xref href=&quot;System.Reflection.IReflect&quot;> </xref>."
    - id: instance
      type: System.Object
      description: "Uma instância do tipo. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Type
      description: "O tipo de reflexão para este <code> objectType </code>."
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  id: GetRuntimeType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetRuntimeType(Type)
  nameWithType: TypeDescriptionProvider.GetRuntimeType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Converte um tipo de reflexão um tipo de tempo de execução."
  remarks: "O método GetRuntimeType Inverte a<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> método para converter um tipo de reflexão novamente para um tipo de tempo de execução.</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> Utilizando o método GetRuntimeType é preferencial relativamente à utilização de <xref:System.Type.UnderlyingSystemType%2A>propriedade, o que foi utilizada em versões anteriores para devolver o tipo de tempo de execução.</xref:System.Type.UnderlyingSystemType%2A>"
  syntax:
    content: public virtual Type GetRuntimeType (Type reflectionType);
    parameters:
    - id: reflectionType
      type: System.Type
      description: "O tipo para converter para o tempo de execução equivalente."
    return:
      type: System.Type
      description: "A <xref:System.Type>que representa o equivalente ao tempo de execução de <code> reflectionType </code>.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reflectionType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  id: GetTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um descritor de tipo personalizado para o objeto fornecido."
  syntax:
    content: public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "Uma instância do tipo. Pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se nenhuma instância foi transmitida para o <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>."
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref> que pode fornecer os metadados para o tipo."
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  id: GetTypeDescriptor(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Type)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um descritor de tipo personalizado para o tipo especificado."
  syntax:
    content: public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType);
    parameters:
    - id: objectType
      type: System.Type
      description: "O tipo de objeto para o qual pretende obter o descritor de tipo."
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref> que pode fornecer os metadados para o tipo."
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  id: GetTypeDescriptor(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Type,Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um descritor de tipo personalizado para o tipo indicado e um objeto."
  remarks: "Este método é prototyped como `virtual` e, por predefinição, devolve um descritor vazio se nenhum fornecedor de principal foi transmitido. Se foi transmitido um fornecedor de principal, este método irá invocar o método de GetTypeDescriptor o fornecedor principal."
  syntax:
    content: public virtual System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType, object instance);
    parameters:
    - id: objectType
      type: System.Type
      description: "O tipo de objeto para o qual pretende obter o descritor de tipo."
    - id: instance
      type: System.Object
      description: "Uma instância do tipo. Pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se nenhuma instância foi transmitida para o <xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>."
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "Um <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref> que pode fornecer os metadados para o tipo."
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  id: IsSupportedType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: IsSupportedType(Type)
  nameWithType: TypeDescriptionProvider.IsSupportedType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um valor que indica se o tipo especificado é compatível com a descrição do tipo e a respetiva cadeia de fornecedores de descrição de tipo."
  syntax:
    content: public virtual bool IsSupportedType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo de teste de compatibilidade."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> type </code> é compatível com a descrição do tipo e a respetiva cadeia de fornecedores de descrição do tipo; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeDescriptionProvider.IsSupportedType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider()
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider()
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider(TypeDescriptionProvider)
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetCache(Object)
  nameWithType: TypeDescriptionProvider.GetCache(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(Object)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtendedTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
- uid: System.ComponentModel.ICustomTypeDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: ICustomTypeDescriptor
  nameWithType: ICustomTypeDescriptor
  fullName: System.ComponentModel.ICustomTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtenderProviders(Object)
  nameWithType: TypeDescriptionProvider.GetExtenderProviders(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(Object)
- uid: System.ComponentModel.IExtenderProvider[]
  parent: System.ComponentModel
  isExternal: false
  name: IExtenderProvider
  nameWithType: IExtenderProvider
  fullName: System.ComponentModel.IExtenderProvider[]
  spec.csharp:
  - uid: System.ComponentModel.IExtenderProvider
    name: IExtenderProvider
    nameWithType: IExtenderProvider
    fullName: IExtenderProvider[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptionProvider.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Type,Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type,Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetRuntimeType(Type)
  nameWithType: TypeDescriptionProvider.GetRuntimeType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Type)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Type,Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: IsSupportedType(Type)
  nameWithType: TypeDescriptionProvider.IsSupportedType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: CreateInstance
  nameWithType: TypeDescriptionProvider.CreateInstance
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetCache
  nameWithType: TypeDescriptionProvider.GetCache
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtendedTypeDescriptor
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtenderProviders
  nameWithType: TypeDescriptionProvider.GetExtenderProviders
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetFullComponentName
  nameWithType: TypeDescriptionProvider.GetFullComponentName
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType
  nameWithType: TypeDescriptionProvider.GetReflectionType
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetRuntimeType
  nameWithType: TypeDescriptionProvider.GetRuntimeType
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: IsSupportedType
  nameWithType: TypeDescriptionProvider.IsSupportedType
