### YamlMime:ManagedReference
items:
- uid: System.Configuration.ConfigurationManager
  id: ConfigurationManager
  children:
  - System.Configuration.ConfigurationManager.AppSettings
  - System.Configuration.ConfigurationManager.ConnectionStrings
  - System.Configuration.ConfigurationManager.GetSection(System.String)
  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  - System.Configuration.ConfigurationManager.OpenMachineConfiguration
  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  - System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  - System.Configuration.ConfigurationManager.RefreshSection(System.String)
  langs:
  - csharp
  name: ConfigurationManager
  nameWithType: ConfigurationManager
  fullName: System.Configuration.ConfigurationManager
  type: Class
  summary: "Fornece acesso aos ficheiros de configuração para as aplicações cliente. Esta classe não pode ser herdada."
  remarks: "A classe ConfigurationManager permite-lhe acesso máquina, aplicações e informações de configuração do utilizador. Esta classe substitui o <xref:System.Configuration.ConfigurationSettings>classe, que é preterido.</xref:System.Configuration.ConfigurationSettings> Para aplicações web, utilize a <xref:System.Web.Configuration.WebConfigurationManager>classe.</xref:System.Web.Configuration.WebConfigurationManager>       Para utilizar a classe ConfigurationManager, o projeto tem de referenciar o `System.Configuration` assemblagem. Por predefinição, alguns modelos de projeto, como a aplicação de consola, não faça referência a esta assemblagem para manualmente tem de referenciá-lo.      > [!NOTE] > O nome e a localização do ficheiro de configuração de aplicação dependem do anfitrião da aplicação. Para obter mais informações, consulte [NIB: os ficheiros de configuração de aplicação](http://msdn.microsoft.com/en-us/0d05b1b8-b18b-43d8-bb3c-526ff0c44fe0).       Pode utilizar o incorporado <xref:System.Configuration>tipos ou derivá-los para lidar com informações de configuração.</xref:System.Configuration> Ao utilizar estes tipos, pode trabalhar diretamente com as informações de configuração e pode expandir a ficheiros de configuração para incluir informações personalizadas.       A classe ConfigurationManager inclui os membros que lhe permite executar as seguintes tarefas:-uma secção de leitura a partir de um ficheiro de configuração. Para aceder a informações de configuração, chame o <xref:System.Configuration.ConfigurationManager.GetSection%2A>método.</xref:System.Configuration.ConfigurationManager.GetSection%2A> Para alguns secções como `appSettings` e `connectionStrings`, utilize o <xref:System.Configuration.ConfigurationManager.AppSettings%2A>e <xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A>classes.</xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A> </xref:System.Configuration.ConfigurationManager.AppSettings%2A> Estes membros executar operações só de leitura, utilizar uma única instância em cache da configuração e são testes em consideração.      -Ler e escrever ficheiros de configuração como um todo. A aplicação pode ler e escrever as definições de configuração a qualquer nível, por si ou para outras aplicações ou computadores, localmente ou remotamente. Utilize um dos métodos fornecidos pela classe ConfigurationManager para abrir um ficheiro de configuração, tais como SampleApp.exe.config. Estes métodos de devolvem um <xref:System.Configuration.Configuration>objeto que por sua vez expõe métodos e propriedades que pode utilizar para trabalhar com os ficheiros de configuração associados.</xref:System.Configuration.Configuration> Os métodos de efetuar a leitura ou operações de escrita e criar os dados de configuração sempre que um ficheiro é escrito.      -Suporta tarefas de configuração. Os seguintes tipos são utilizados para suportar várias tarefas de configuração:- <xref:System.Configuration.SectionInformation>- <xref:System.Configuration.PropertyInformation>- <xref:System.Configuration.PropertyInformationCollection>- <xref:System.Configuration.ElementInformation>- <xref:System.Configuration.ContextInformation>- <xref:System.Configuration.ConfigurationSectionGroup>- <xref:System.Configuration.ConfigurationSectionGroupCollection>para além de trabalhar com as informações de configuração existente, pode criar e trabalhar com os elementos de configuração personalizada ao alargar os tipos de configuração incorporada, como o <xref:System.Configuration.ConfigurationElement>, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, e <xref:System.Configuration.ConfigurationSection>classes.</xref:System.Configuration.ConfigurationSection> </xref:System.Configuration.ConfigurationProperty> </xref:System.Configuration.ConfigurationElementCollection> </xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ConfigurationSectionGroupCollection> </xref:System.Configuration.ConfigurationSectionGroup> </xref:System.Configuration.ContextInformation> </xref:System.Configuration.ElementInformation> </xref:System.Configuration.PropertyInformationCollection> </xref:System.Configuration.PropertyInformation> </xref:System.Configuration.SectionInformation> Para obter um exemplo de como expandir um tipo de configuração incorporada através de programação, consulte <xref:System.Configuration.ConfigurationSection>.</xref:System.Configuration.ConfigurationSection> Para obter um exemplo de como expandir um tipo de configuração incorporado que utiliza o modelo baseado em atributos, consulte <xref:System.Configuration.ConfigurationElement>.</xref:System.Configuration.ConfigurationElement>"
  example:
  - "The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(\"Setting1\");  \n            ReadSetting(\"NotValid\");  \n            AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\");  \n            AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\");  \n            ReadAllSettings();  \n        }  \n  \n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n  \n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(\"AppSettings is empty.\");  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? \"Not Found\";  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error writing app settings\");  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nModule Module1  \n  \n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(\"Setting1\")  \n        ReadSetting(\"NotValid\")  \n        AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\")  \n        AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\")  \n        ReadAllSettings()  \n    End Sub  \n  \n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n  \n            If appSettings.Count = 0 Then  \n                Console.WriteLine(\"AppSettings is empty.\")  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = \"Not found\"  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error writing app settings\")  \n        End Try  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config file as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n  <appSettings>  \n    <add key=\"Setting1\" value=\"May 5, 2014\"/>  \n    <add key=\"Setting2\" value=\"May 6, 2014\"/>  \n  </appSettings>  \n</configuration>  \n```  \n  \n The following example shows how to use a connection string to read data from a database.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n  \n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[\"WingtipToys\"].ConnectionString;  \n            string queryString = \"SELECT Id, ProductName FROM dbo.Products;\";  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(\"{0}, {1}\", reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n  \n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n  \n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(\"WingtipToys\").ConnectionString  \n        Dim queryString = \"SELECT Id, ProductName FROM dbo.Products;\"  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n  \n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(\"{0}, {1}\", reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <connectionStrings>  \n      <add name=\"WingtipToys\" connectionString=\"Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\" />  \n    </connectionStrings>  \n</configuration>  \n```"
  syntax:
    content: public static class ConfigurationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.AppSettings
  id: AppSettings
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
  fullName: System.Configuration.ConfigurationManager.AppSettings
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém o <xref href=&quot;System.Configuration.AppSettingsSection&quot;> </xref> dados para a atual configuração da aplicação predefinido."
  remarks: "A <xref:System.Configuration.AppSettingsSection>objeto contém os conteúdos do ficheiro de configuração `appSettings` secção.</xref:System.Configuration.AppSettingsSection>"
  example:
  - "The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(\"Setting1\");  \n            ReadSetting(\"NotValid\");  \n            AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\");  \n            AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\");  \n            ReadAllSettings();  \n        }  \n  \n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n  \n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(\"AppSettings is empty.\");  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? \"Not Found\";  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error writing app settings\");  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nModule Module1  \n  \n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(\"Setting1\")  \n        ReadSetting(\"NotValid\")  \n        AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\")  \n        AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\")  \n        ReadAllSettings()  \n    End Sub  \n  \n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n  \n            If appSettings.Count = 0 Then  \n                Console.WriteLine(\"AppSettings is empty.\")  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = \"Not found\"  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error writing app settings\")  \n        End Try  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config file as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n  <appSettings>  \n    <add key=\"Setting1\" value=\"May 5, 2014\"/>  \n    <add key=\"Setting2\" value=\"May 6, 2014\"/>  \n  </appSettings>  \n</configuration>  \n```"
  syntax:
    content: public static System.Collections.Specialized.NameValueCollection AppSettings { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "Devolve um <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> objeto que contém o conteúdo a <xref href=&quot;System.Configuration.AppSettingsSection&quot;> </xref> objeto para a atual configuração da aplicação predefinido."
  overload: System.Configuration.ConfigurationManager.AppSettings*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Não foi possível obter um <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> objeto com os dados de definições de aplicação."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.ConnectionStrings
  id: ConnectionStrings
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
  fullName: System.Configuration.ConfigurationManager.ConnectionStrings
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém o <xref href=&quot;System.Configuration.ConnectionStringsSection&quot;> </xref> dados para a atual configuração da aplicação predefinido."
  remarks: "A <xref:System.Configuration.ConnectionStringsSection>objeto contém os conteúdos do ficheiro de configuração `connectionStrings` secção.</xref:System.Configuration.ConnectionStringsSection>"
  example:
  - "The following example shows how to use a connection string to read data from a database.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n  \n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[\"WingtipToys\"].ConnectionString;  \n            string queryString = \"SELECT Id, ProductName FROM dbo.Products;\";  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(\"{0}, {1}\", reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n  \n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n  \n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(\"WingtipToys\").ConnectionString  \n        Dim queryString = \"SELECT Id, ProductName FROM dbo.Products;\"  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n  \n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(\"{0}, {1}\", reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <connectionStrings>  \n      <add name=\"WingtipToys\" connectionString=\"Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\" />  \n    </connectionStrings>  \n</configuration>  \n```"
  syntax:
    content: public static System.Configuration.ConnectionStringSettingsCollection ConnectionStrings { get; }
    return:
      type: System.Configuration.ConnectionStringSettingsCollection
      description: "Devolve um <xref href=&quot;System.Configuration.ConnectionStringSettingsCollection&quot;> </xref> objeto que contém o conteúdo a <xref href=&quot;System.Configuration.ConnectionStringsSection&quot;> </xref> objeto para a atual configuração da aplicação predefinido."
  overload: System.Configuration.ConfigurationManager.ConnectionStrings*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Não foi possível obter um <xref href=&quot;System.Configuration.ConnectionStringSettingsCollection&quot;> </xref> objeto."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.GetSection(System.String)
  id: GetSection(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: GetSection(String)
  nameWithType: ConfigurationManager.GetSection(String)
  fullName: System.Configuration.ConfigurationManager.GetSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Obtém uma secção de configuração especificado para a atual configuração da aplicação predefinido."
  remarks: "Para aplicações de cliente, este método obtém um ficheiro de configuração obtido através da intercalação do ficheiro de configuração da aplicação, o ficheiro de configuração de utilizador local e o ficheiro de configuração de roaming.       O método GetSection acede a informações de configuração de tempo de execução que não é possível alterar. Para alterar a configuração, pode utilizar o <xref:System.Configuration.Configuration.GetSection%2A>método no ficheiro de configuração obter utilizando um dos seguintes métodos abra:- <xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A></xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A> </xref:System.Configuration.Configuration.GetSection%2A>"
  example:
  - "The following example shows how to use the GetSection method. The example is part of a larger example that is provided for the <xref:System.Configuration.ConfigurationManager> class.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_14_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_14_1.vb)]"
  syntax:
    content: public static object GetSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "O caminho da secção de configuração e o nome."
    return:
      type: System.Object
      description: "Especificado <xref href=&quot;System.Configuration.ConfigurationSection&quot;> </xref> objeto, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se a secção não existe."
  overload: System.Configuration.ConfigurationManager.GetSection*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Não foi possível carregar um ficheiro de configuração."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  id: OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenExeConfiguration(ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Abre o ficheiro de configuração para a aplicação atual como um <xref href=&quot;System.Configuration.Configuration&quot;> </xref> objeto."
  remarks: "As aplicações cliente utilizam uma configuração global que se aplica a todos os utilizadores, configurações separadas que se aplicam a utilizadores individuais e configurações que se aplicam aos utilizadores de roaming. O `userLevel` parâmetro determina a localização do ficheiro de configuração que está a ser aberto por que indica não se tem nenhum nível de utilizador (o ficheiro de configuração está no mesmo diretório que a aplicação) ou tem um nível de utilizador (o ficheiro de configuração está a ser um caminho de definições de aplicação determinado pelo nível de utilizador).       Especifique a configuração a obter através da transmissão de um dos seguintes valores para `userLevel`: - para obter o <xref:System.Configuration.Configuration>do conjunto de objetos que se aplica a todos os utilizadores, `userLevel` para <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>      -Para obter local <xref:System.Configuration.Configuration>do conjunto de objetos que se aplica ao utilizador atual, `userLevel` para <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>      -Para obter o roaming <xref:System.Configuration.Configuration>do conjunto de objetos que se aplica ao utilizador atual, `userLevel` para <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>          > [!NOTE] > Para obter o <xref:System.Configuration.Configuration>do objeto para um recurso, o seu código tem de ter permissões em todos os ficheiros de configuração da qual herda as definições de leitura.</xref:System.Configuration.Configuration> Para atualizar um ficheiro de configuração, o código adicionalmente tem de ter permissões de escrita para o ficheiro de configuração e o diretório no qual existe."
  example:
  - "The following code example shows how to use the OpenExeConfiguration method.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#5](~/add/codesnippet/csharp/3eb7bc6f-f763-4df6-a789-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#5](~/add/codesnippet/visualbasic/3eb7bc6f-f763-4df6-a789-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenExeConfiguration (System.Configuration.ConfigurationUserLevel userLevel);
    parameters:
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "O <xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> para o qual está a abrir a configuração."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Não foi possível carregar um ficheiro de configuração."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  id: OpenExeConfiguration(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenExeConfiguration(String)
  nameWithType: ConfigurationManager.OpenExeConfiguration(String)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Abre o ficheiro de configuração de cliente especificado como um <xref href=&quot;System.Configuration.Configuration&quot;> </xref> objeto."
  remarks: "As aplicações cliente utilizam uma configuração global que se aplica a todos os utilizadores, configurações separadas que se aplicam a utilizadores individuais e configurações que se aplicam aos utilizadores de roaming. O `userLevel` valor determina a localização do ficheiro de configuração a ser aberto. Indica não se tem nenhum nível de utilizador (o ficheiro de configuração está no mesmo diretório que a aplicação) ou tem um nível de utilizador (o ficheiro de configuração é um caminho de definições de aplicação determinado pelo tipo de nível de utilizador.).       Esta sobrecarga de método ao chamar é equivalente ao chamar o <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29>sobrecarga com o `preLoad` parâmetro definido como `false`.</xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29>"
  example:
  - "The following code example shows how to use the OpenExeConfiguration method.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#6](~/add/codesnippet/csharp/m-system.configuration.c_28_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#6](~/add/codesnippet/visualbasic/m-system.configuration.c_28_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenExeConfiguration (string exePath);
    parameters:
    - id: exePath
      type: System.String
      description: "O caminho do ficheiro executável (. exe)."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Não foi possível carregar um ficheiro de configuração."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration
  id: OpenMachineConfiguration
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMachineConfiguration()
  nameWithType: ConfigurationManager.OpenMachineConfiguration()
  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Abre o ficheiro de configuração da máquina no computador atual como um <xref href=&quot;System.Configuration.Configuration&quot;> </xref> objeto."
  remarks: "Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \n  \n *%windir%*\\Microsoft.NET\\Framework\\\\*version*\\config  \n  \n> [!NOTE]\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer."
  example:
  - "The following code example shows how to use the OpenMachineConfiguration method to obtain all sections that are contained in the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/m-system.configuration.c_32_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/m-system.configuration.c_32_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMachineConfiguration ();
    parameters: []
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenMachineConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Não foi possível carregar um ficheiro de configuração."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Abre o ficheiro de configuração de cliente especificado como um <xref href=&quot;System.Configuration.Configuration&quot;> </xref> objeto que utiliza o nível de utilizador e de mapeamento de ficheiro especificado."
  remarks: "O <xref:System.Configuration.ConfigurationUserLevel>objeto determina a localização do ficheiro de configuração a ser aberto.</xref:System.Configuration.ConfigurationUserLevel> Indica se o ficheiro não tem nenhum nível de utilizador (o ficheiro de configuração está no mesmo diretório que a aplicação) ou tem um nível de utilizador (o ficheiro de configuração está a ser um caminho de definições de aplicação determinado pelo `userLevel`).      > [!NOTE] > Para obter o <xref:System.Configuration.Configuration>do objeto para um recurso, o seu código tem de ter permissões em todos os ficheiros de configuração da qual herda as definições de leitura.</xref:System.Configuration.Configuration> Para atualizar um ficheiro de configuração, o código adicionalmente tem de ter permissões de escrita para o ficheiro de configuração e o diretório no qual existe."
  example:
  - "The following code example shows how to use the OpenMappedExeConfiguration method to obtain all sections that are contained by the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#9](~/add/codesnippet/csharp/3a231caa-8bb5-4e8b-a7ef-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#9](~/add/codesnippet/visualbasic/3a231caa-8bb5-4e8b-a7ef-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel);
    parameters:
    - id: fileMap
      type: System.Configuration.ExeConfigurationFileMap
      description: "Um <xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> objeto que referencia o ficheiro de configuração para utilizar em vez do ficheiro de configuração de predefinido de aplicação."
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "O <xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> objeto para o qual está a abrir a configuração."
    return:
      type: System.Configuration.Configuration
      description: "O objeto de configuração."
  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Não foi possível carregar um ficheiro de configuração."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Abre o ficheiro de configuração de cliente especificado como um <xref href=&quot;System.Configuration.Configuration&quot;> </xref> objeto que utiliza o mapeamento de ficheiro especificado, o nível de utilizador e a opção pré-carregamento."
  remarks: "O <xref:System.Configuration.ConfigurationUserLevel>objeto determina a localização do ficheiro de configuração que está a ser aberto.</xref:System.Configuration.ConfigurationUserLevel> Indica se o ficheiro não tem nenhum nível de utilizador (o ficheiro de configuração está no mesmo diretório que a aplicação) ou tem um nível de utilizador (o ficheiro de configuração está a ser um caminho de definições de aplicação que é determinado pelo `userLevel`).      > [!NOTE] > Para obter o <xref:System.Configuration.Configuration>do objeto para um recurso, o seu código tem de ter permissões em todos os ficheiros de configuração da qual herda as definições de leitura.</xref:System.Configuration.Configuration> Para atualizar um ficheiro de configuração, o código adicionalmente tem de ter permissões de escrita para o ficheiro de configuração e o diretório no qual existe.       Para obter um exemplo de código, consulte o <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>de sobrecarga.</xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel, bool preLoad);
    parameters:
    - id: fileMap
      type: System.Configuration.ExeConfigurationFileMap
      description: "Um <xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> objeto que referencia o ficheiro de configuração a utilizar em vez do ficheiro de configuração de aplicação predefinido."
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "O <xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> objeto para o qual está a abrir a configuração."
    - id: preLoad
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>pré-carregar todos os grupos de secção e secções; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Configuration.Configuration
      description: "O objeto de configuração."
  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Não foi possível carregar um ficheiro de configuração."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  id: OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedMachineConfiguration(ConfigurationFileMap)
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Abre o ficheiro de configuração de máquina como um <xref href=&quot;System.Configuration.Configuration&quot;> </xref> objeto que utiliza o mapeamento de ficheiro especificado."
  remarks: "Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \n  \n *%windir%*\\Microsoft.NET\\Framework\\\\*version*\\config  \n  \n> [!NOTE]\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer."
  example:
  - "The following code example shows how to use the OpenMappedMachineConfiguration method to obtain all sections in the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/b514431f-be81-4b1e-b58c-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/b514431f-be81-4b1e-b58c-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedMachineConfiguration (System.Configuration.ConfigurationFileMap fileMap);
    parameters:
    - id: fileMap
      type: System.Configuration.ConfigurationFileMap
      description: "Um <xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> objeto que referencia o ficheiro de configuração para utilizar em vez do ficheiro de configuração de predefinido de aplicação."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Não foi possível carregar um ficheiro de configuração."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)
  id: RefreshSection(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: RefreshSection(String)
  nameWithType: ConfigurationManager.RefreshSection(String)
  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Atualiza a secção denominada da próxima vez que é obtido será possível lê-lo a partir do disco."
  remarks: "Este método invalida cache para a secção de configuração especificado, sem afetar outras secções."
  example:
  - "The following code example shows how to use the RefreshSection method to refresh the application settings configuration section.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_34_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_34_1.vb)]"
  syntax:
    content: public static void RefreshSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "O nome de secção de configuração ou o nome de caminho e a secção de configuração da secção para atualizar."
  overload: System.Configuration.ConfigurationManager.RefreshSection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Configuration.ConfigurationManager.AppSettings
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
  fullName: System.Configuration.ConfigurationManager.AppSettings
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.ConfigurationManager.ConnectionStrings
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
  fullName: System.Configuration.ConfigurationManager.ConnectionStrings
- uid: System.Configuration.ConnectionStringSettingsCollection
  parent: System.Configuration
  isExternal: false
  name: ConnectionStringSettingsCollection
  nameWithType: ConnectionStringSettingsCollection
  fullName: System.Configuration.ConnectionStringSettingsCollection
- uid: System.Configuration.ConfigurationManager.GetSection(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: GetSection(String)
  nameWithType: ConfigurationManager.GetSection(String)
  fullName: System.Configuration.ConfigurationManager.GetSection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration(ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
- uid: System.Configuration.Configuration
  parent: System.Configuration
  isExternal: false
  name: Configuration
  nameWithType: Configuration
  fullName: System.Configuration.Configuration
- uid: System.Configuration.ConfigurationUserLevel
  parent: System.Configuration
  isExternal: false
  name: ConfigurationUserLevel
  nameWithType: ConfigurationUserLevel
  fullName: System.Configuration.ConfigurationUserLevel
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration(String)
  nameWithType: ConfigurationManager.OpenExeConfiguration(String)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMachineConfiguration()
  nameWithType: ConfigurationManager.OpenMachineConfiguration()
  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
- uid: System.Configuration.ExeConfigurationFileMap
  parent: System.Configuration
  isExternal: false
  name: ExeConfigurationFileMap
  nameWithType: ExeConfigurationFileMap
  fullName: System.Configuration.ExeConfigurationFileMap
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedMachineConfiguration(ConfigurationFileMap)
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
- uid: System.Configuration.ConfigurationFileMap
  parent: System.Configuration
  isExternal: false
  name: ConfigurationFileMap
  nameWithType: ConfigurationFileMap
  fullName: System.Configuration.ConfigurationFileMap
- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: RefreshSection(String)
  nameWithType: ConfigurationManager.RefreshSection(String)
  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)
- uid: System.Configuration.ConfigurationManager.AppSettings*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
- uid: System.Configuration.ConfigurationManager.ConnectionStrings*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
- uid: System.Configuration.ConfigurationManager.GetSection*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: GetSection
  nameWithType: ConfigurationManager.GetSection
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration
  nameWithType: ConfigurationManager.OpenExeConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMachineConfiguration
  nameWithType: ConfigurationManager.OpenMachineConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedMachineConfiguration
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration
- uid: System.Configuration.ConfigurationManager.RefreshSection*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: RefreshSection
  nameWithType: ConfigurationManager.RefreshSection
