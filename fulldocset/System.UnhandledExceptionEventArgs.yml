### YamlMime:ManagedReference
items:
- uid: System.UnhandledExceptionEventArgs
  id: UnhandledExceptionEventArgs
  children:
  - System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  - System.UnhandledExceptionEventArgs.ExceptionObject
  - System.UnhandledExceptionEventArgs.IsTerminating
  langs:
  - csharp
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs
  fullName: System.UnhandledExceptionEventArgs
  type: Class
  summary: "Disponibiliza dados para o evento que é gerado quando existe uma exceção que não é processada em qualquer domínio de aplicação."
  remarks: "UnhandledExceptionEventArgs fornece acesso para o objeto de exceção e um sinalizador que indica se o tempo de execução de idioma comum está a terminar. O UnhandledExceptionEventArgs é um dos parâmetros transmitidos <xref:System.UnhandledExceptionEventHandler>para o <xref:System.AppDomain.UnhandledException?displayProperty=fullName>eventos.</xref:System.AppDomain.UnhandledException?displayProperty=fullName> </xref:System.UnhandledExceptionEventHandler>       Para obter mais informações sobre os delegados do processador de eventos, consulte [eventos](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class UnhandledExceptionEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  id: '#ctor(System.Object,System.Boolean)'
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "Inicializa uma nova instância do <xref href=&quot;System.UnhandledExceptionEventArgs&quot;> </xref> classe com o objeto de exceção e um sinalizador de terminação de tempo de execução de idioma comum."
  syntax:
    content: public UnhandledExceptionEventArgs (object exception, bool isTerminating);
    parameters:
    - id: exception
      type: System.Object
      description: "A exceção que não é processada."
    - id: isTerminating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se está a terminar o tempo de execução; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.UnhandledExceptionEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  id: ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Obtém o objeto de exceção não processada."
  remarks: "Esta propriedade devolve um objeto do tipo <xref:System.Object>em vez de um derivado de <xref:System.Exception>.</xref:System.Exception> </xref:System.Object> Embora a especificação de linguagem comuns requer que todos os tipos de exceção derivam <xref:System.Exception>, é possível para métodos emitir exceções com objetos não derivadas de <xref:System.Exception>.</xref:System.Exception> </xref:System.Exception> Para fazer o seguinte procedimento para trabalhar com esta exceção:-aplicar o <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>atributo com um <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName>valor `true` para a assemblagem que contém o processador de eventos.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> </xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> Isto encapsula num wrapper a todas as exceções não derivadas de <xref:System.Exception>classe num <xref:System.Runtime.CompilerServices.RuntimeWrappedException>objeto.</xref:System.Runtime.CompilerServices.RuntimeWrappedException> </xref:System.Exception> Pode, em seguida, em segurança convertido (em c#) ou converter (em Visual Basic) o objeto devolvido por esta propriedade para um <xref:System.Exception>de objeto e obter o objeto de exceção original no <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName>propriedade.</xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> </xref:System.Exception> Tenha em atenção que alguns compilers, tais como compilers c# e Visual Basic, aplicam automaticamente este atributo.      -Converta o objecto devolvido por esta propriedade para um <xref:System.Exception>objeto.</xref:System.Exception>"
  example:
  - "The following example demonstrates the <xref:System.AppDomain.UnhandledException> event. It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a **try/catch** block. The second is unhandled and invokes the `MyHandle` routine before the application terminates.  \n  \n [!code-cs[AppDomain_UnhandledException#1](~/add/codesnippet/csharp/p-system.unhandledexcept_1.cs)]\n [!code-vb[AppDomain_UnhandledException#1](~/add/codesnippet/visualbasic/p-system.unhandledexcept_1.vb)]\n [!code-cpp[AppDomain_UnhandledException#1](~/add/codesnippet/cpp/p-system.unhandledexcept_1.cpp)]"
  syntax:
    content: public object ExceptionObject { get; }
    return:
      type: System.Object
      description: "O objeto de exceção não processada."
  overload: System.UnhandledExceptionEventArgs.ExceptionObject*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  id: IsTerminating
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Indica se o tempo de execução de idioma comum está a terminar."
  remarks: "A partir do .NET Framework versão 2.0, esta propriedade devolve `true` para a maioria dos não processada exceções, a menos que um sinalizador de compatibilidade de aplicação é utilizado para reverter para o comportamento das versões 1.0 e 1.1. O motivo é que mais exceções não processadas threads, incluindo os threads de conjunto de threads, são permitidas para continuar naturalmente, que normalmente resulta na terminação da aplicação. Para obter mais informações, incluindo uma lista de cenários em que o tempo de execução não terminar, consulte [exceções geridos Threads](~/add/includes/ajax-current-ext-md.md).      ## Informações de versão, o seguinte procedimento aplica-se para as versões do .NET Framework 1.0 e 1.1: Esta propriedade devolve `true` quando uma exceção é recebida no, mas não é processada pelo thread principal de uma aplicação. Esta propriedade devolve também `true` se a um thread não gerido está a executar o código gerido e recebe uma exceção não processada. Por fim, esta propriedade devolve `false` para threads de conjunto de thread e threads geridos criadas por uma aplicação, porque as versões 1.0 e 1.1 detetar exceções não processadas nessas threads e ignorá-las."
  syntax:
    content: public bool IsTerminating { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se está a terminar o tempo de execução; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.UnhandledExceptionEventArgs.IsTerminating*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
- uid: System.UnhandledExceptionEventArgs.#ctor*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs
- uid: System.UnhandledExceptionEventArgs.ExceptionObject*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
