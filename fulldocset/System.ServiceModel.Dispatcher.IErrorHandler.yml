### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "Permite que um implementador controlar a mensagem de falha devolvida ao autor da chamada e, opcionalmente, executar como o registo de processamento de erros personalizados."
  remarks: "Para controlar explicitamente o comportamento da aplicação quando é emitida uma exceção, implementa a interface IErrorHandler e adicioná-la para o <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>propriedade.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> IErrorHandler permite-lhe explicitamente controlar a falha SOAP gerada, decida se pretende enviá-lo novamente para o cliente e executar tarefas associadas, como o registo. Os processadores de erro são denominados pela ordem em que foram adicionados para o <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>propriedade.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Implementar o <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>método para controlar a mensagem de falha que é devolvida ao cliente.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>       Implementar o <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>método para se certificar comportamentos relacionados com o erro, incluindo o erro de registo, assuring um falhar rápido, encerrar a aplicação e assim sucessivamente.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>      > [!NOTE] > Porque o <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>método pode ser chamado a partir de vários locais diferentes existem sem garantias efetuadas sobre qual thread o método é chamado.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Não dependem <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>método que está a ser chamado num thread a operação.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Todos os <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementações denominam-se em primeiro lugar, antes de enviar uma mensagem de resposta.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Quando todos os <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementações ter sido chamadas e devolver e se `fault` é não -`null`, é enviado para o cliente, de acordo com o contrato.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Se `fault` é `null` depois de tem sido chamadas todas as implementações, a mensagem de resposta é controlada pelo <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>valor da propriedade.</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>      > [!NOTE] > Exceções podem ocorrer após todos os <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementações são denominadas e é entregar uma mensagem de resposta para o canal.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Se ocorrer uma excepção de canal (por exemplo, dificuldade em serialização da mensagem) IErrorHandler objetos são notificados. Neste caso, ainda Certifique-se de que o ambiente de desenvolvimento intercete e apresenta essas exceções para si ou faz com que a utilização de rastreio para detetar o problema. Para mais informações sobre o rastreio, consulte [rastreio utilizando a resolver problemas da aplicação](~/add/includes/ajax-current-ext-md.md).       Depois da mensagem de resposta foi enviada, todos os <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>implementações são denominadas pela mesma ordem.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Normalmente, uma implementação de IErrorHandler é adicionada ao <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>propriedade de serviço (e o cliente no caso de comunicações duplex).</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Pode adicionar o IErrorHandler para o tempo de execução, implementando um comportamento (ou um <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>, ou <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>objeto) e utiliza o comportamento programaticamente, um ficheiro de configuração ou com um atributo personalizado para anexar o IErrorHandler.</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>       Para obter mais informações sobre como utilizar comportamentos para modificar o tempo de execução, consulte [configurar e expandir o tempo de execução com comportamentos](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Permite o processamento relacionado com o erro e devolve um valor que indica se o distribuidor interrompe a sessão e o contexto de instância em determinados casos."
  remarks: "Utilize o método HandleError para implementar relacionados com o erro comportamentos, como o registo, as notificações do sistema, a encerrar a aplicação e assim sucessivamente, de erro e devolver um valor que especifica se a exceção foi processada adequadamente.      > [!NOTE] > Porque o método HandleError pode ser chamado de vários locais diferentes existem sem garantias efetuadas sobre qual thread o método é chamado. Não dependem do método HandleError a ser chamado num thread a operação.       Todos os <xref:System.ServiceModel.Dispatcher.IErrorHandler>implementações são denominadas.</xref:System.ServiceModel.Dispatcher.IErrorHandler> Por predefinição (quando o valor de retorno é `false`), se existir uma exceção, o dispatcher interrompe qualquer sessão e interrompe a <xref:System.ServiceModel.InstanceContext>se <xref:System.ServiceModel.InstanceContextMode>está tudo o que não sejam <xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContext>  A exceção, em seguida, é considerada não processada e qualquer Estado é considerado danificado.       Devolver `true` de HandleError para evitar este comportamento predefinido. Se qualquer processador de erros devolve `true` dá instruções ao [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] que é seguro continuar a utilizar o Estado associado o pedidos falhados.       Se nenhuma rotina de tratamento de erro devolve `true` do HandleError método é considerada a exceção não processada e a resposta de predefinição aplica-se, poderá impedir fazerem uma abortada <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>e o canal ao comunicar um canal de sessão ou a <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>propriedade não está definida como <xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>.</xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext?displayProperty=fullName>       O `error` parâmetro nunca é `null` e contém o objeto de exceção foi emitido."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "A exceção iniciada durante o processamento."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] não deve abortar a sessão (se existir um) e a instância de contexto se o contexto de instância não é <xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Permite a criação de um personalizado &lt;xref:System.ServiceModel.FaultException%601&gt; que é devolvido a partir de uma excepção durante um método de serviço."
  remarks: "Implemente o método de ProvideFault para criar uma mensagem de falha personalizada que é devolvida ao cliente.  O método ProvideFault será chamado sempre exceções que deixe de operações, exceto quando o tempo de execução do WCF reconhece a exceção fatal especialmente como e rethrows a exceção de si próprio. Quando todas as implementações de ProvideFault tem sido chamadas, a mensagem de falha é enviada para o cliente (se `fault` é não -`null`). Se o `fault` parâmetro é `null` o índice de falhas predefinida é enviada para o cliente.      > [!NOTE] > A mensagem de entrada que causou o erro de processamento está disponível durante este método do <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>propriedade.</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>      > [!NOTE] > Porque o método ProvideFault pode ser chamado de vários locais diferentes existem sem garantias efetuadas sobre qual thread o método é chamado. Não dependem do método ProvideFault a ser chamado num thread a operação."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "O <xref:System.Exception>objeto emitido durante a operação de serviço.</xref:System.Exception>"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "A versão SOAP da mensagem."
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "O &lt;xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt; objeto é devolvido para o cliente ou serviço, no caso de duplex."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
