### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyBinding
  id: KeyBinding
  children:
  - System.Windows.Input.KeyBinding.#ctor
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyBinding.CreateInstanceCore
  - System.Windows.Input.KeyBinding.Gesture
  - System.Windows.Input.KeyBinding.Key
  - System.Windows.Input.KeyBinding.KeyProperty
  - System.Windows.Input.KeyBinding.Modifiers
  - System.Windows.Input.KeyBinding.ModifiersProperty
  langs:
  - csharp
  name: KeyBinding
  nameWithType: KeyBinding
  fullName: System.Windows.Input.KeyBinding
  type: Class
  summary: "Binds a <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref> to a <xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref> (or another  <xref:System.Windows.Input.ICommand> implementation)."
  remarks: "A KeyBinding associates a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>. <xref:System.Windows.Input.RoutedCommand> is the primary implementation of the <xref:System.Windows.Input.ICommand> interface for the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] commanding system .  In general, when the <xref:System.Windows.Input.KeyGesture> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> value.  For more information on commanding, see the [Commanding Overview](~/add/includes/ajax-current-ext-md.md).       With the exception of the function keys and the numeric keypad keys, a valid <xref:System.Windows.Input.KeyGesture> must contain exactly one <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  Function keys and numeric keypad keys do not require a modifier key in order to be a valid <xref:System.Windows.Input.KeyGesture>. It is possible to specify an invalid <xref:System.Windows.Input.KeyGesture> and a KeyBinding with an invalid associated gesture, either through [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] or code. For instance, there is no validation that prevents creating and binding a <xref:System.Windows.Input.KeyGesture> that contains only a nonfunction key, or only modifiers but no key. Such a KeyBinding will never attempt to invoke its associated command.       When defining a KeyBinding in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a KeyBinding in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the KeyBinding element, which enables a syntax to specify keys and modifiers as a single string, for example &quot;CTRL+P&quot;. The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the KeyBinding element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture&quot;s modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.       A KeyBinding can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> on the <xref:System.Windows.Input.CommandManager> class. The most typical way to define a KeyBinding is within the control template, setting the <xref:System.Windows.UIElement.InputBindings%2A> property in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] by declaring one or more <xref:System.Windows.Input.MouseBinding> or KeyBinding elements."
  example:
  - "The following example creates a KeyBinding and adds it to the <xref:System.Windows.Input.InputBindingCollection> of the root window.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerkeybindingcodebehind)]"
  syntax:
    content: 'public class KeyBinding : System.Windows.Input.InputBinding'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  - System.Windows.Input.InputBinding
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.Command
  - System.Windows.Input.InputBinding.CommandParameter
  - System.Windows.Input.InputBinding.CommandParameterProperty
  - System.Windows.Input.InputBinding.CommandProperty
  - System.Windows.Input.InputBinding.CommandTarget
  - System.Windows.Input.InputBinding.CommandTargetProperty
  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref> class."
  syntax:
    content: public KeyBinding ();
    parameters: []
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref> class using the specified <xref:System.Windows.Input.ICommand> and <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "The command to associate with `gesture`."
    - id: gesture
      type: System.Windows.Input.KeyGesture
      description: "The key combination to associate with `command`."
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>command</code> or <code>gesture</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref> class using the specified <xref:System.Windows.Input.ICommand> and the specified <xref href=&quot;System.Windows.Input.Key&quot;></xref> and <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref> which will be converted into a <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "The command to invoke."
    - id: key
      type: System.Windows.Input.Key
      description: "The key to be associated with `command`."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "The modifiers to be associated with `command`."
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Creates an instance of a <xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>."
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "The new object."
  overload: System.Windows.Input.KeyBinding.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Gesture
  id: Gesture
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets or sets the gesture associated with this <xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>."
  remarks: "With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>."
  example:
  - "The following example shows how to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand> using a <xref:System.Windows.Input.KeyBinding> (the markup and code examples specify different keys but are otherwise equivalent).  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public override System.Windows.Input.InputGesture Gesture { get; set; }
    return:
      type: System.Windows.Input.InputGesture
      description: "The key sequence. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Input.KeyBinding.Gesture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "the value <code>gesture</code> is being set to is not a <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Key
  id: Key
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets or sets the <xref href=&quot;System.Windows.Input.Key&quot;></xref> of the <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref> associated with this <xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>."
  remarks: "With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.       When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example &quot;CTRL+P&quot;. The second way is to define the Key attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the Key, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a Key set last will overwrite just the Key component of a preceding Gesture but leave the Gesture&quot;s modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization."
  syntax:
    content: public System.Windows.Input.Key Key { get; set; }
    return:
      type: System.Windows.Input.Key
      description: "The key part of the <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>. The default value is <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  overload: System.Windows.Input.KeyBinding.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.KeyProperty
  id: KeyProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifies the <xref:System.Windows.Input.KeyBinding.Key*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty KeyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets or sets the <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref> of the <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref> associated with this <xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>."
  remarks: "With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.       When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example &quot;CTRL+P&quot;. The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the Modifiers attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, Modifiers, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture&quot;s modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.      <a name=&quot;xamlAttributeUsage_Modifiers&quot;></a>    ## XAML Attribute Usage      ```   <object Modifiers=&quot;oneOrMoreModifierKeys&quot;/>      ```      <a name=&quot;xamlValues_Modifiers&quot;></a>    ## XAML Values    *oneOrMoreModifierKeys*    One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a &quot;+&quot; character."
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; set; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "The modifier keys of the <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>.  The default value is <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>."
  overload: System.Windows.Input.KeyBinding.Modifiers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  id: ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifies the <xref:System.Windows.Input.KeyBinding.Modifiers*> dependency property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty ModifiersProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputBinding
  isExternal: false
  name: System.Windows.Input.InputBinding
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Input.KeyBinding.#ctor
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.KeyGesture
  parent: System.Windows.Input
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
- uid: System.Windows.Freezable
  parent: System.Windows
  isExternal: false
  name: Freezable
  nameWithType: Freezable
  fullName: System.Windows.Freezable
- uid: System.Windows.Input.KeyBinding.Gesture
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
- uid: System.Windows.Input.InputGesture
  parent: System.Windows.Input
  isExternal: false
  name: InputGesture
  nameWithType: InputGesture
  fullName: System.Windows.Input.InputGesture
- uid: System.Windows.Input.KeyBinding.Key
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.KeyProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.KeyBinding.Modifiers
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
- uid: System.Windows.Input.KeyBinding.#ctor*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding
  nameWithType: KeyBinding.KeyBinding
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore
  nameWithType: KeyBinding.CreateInstanceCore
- uid: System.Windows.Input.KeyBinding.Gesture*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
- uid: System.Windows.Input.KeyBinding.Key*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.Modifiers*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
