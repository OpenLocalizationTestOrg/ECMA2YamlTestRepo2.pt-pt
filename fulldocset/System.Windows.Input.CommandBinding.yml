### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.CommandBinding
  id: CommandBinding
  children:
  - System.Windows.Input.CommandBinding.#ctor
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandBinding.CanExecute
  - System.Windows.Input.CommandBinding.Command
  - System.Windows.Input.CommandBinding.Executed
  - System.Windows.Input.CommandBinding.PreviewCanExecute
  - System.Windows.Input.CommandBinding.PreviewExecuted
  langs:
  - csharp
  name: CommandBinding
  nameWithType: CommandBinding
  fullName: System.Windows.Input.CommandBinding
  type: Class
  summary: "Binds a <xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref> to the event handlers that implement the command."
  remarks: "A CommandBinding associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.       When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.  If the command target has a CommandBinding for the command, the appropriate handlers are called.  If the command target does not have a CommandBinding for the command, the events are routed through the element tree until an element that has a CommandBinding is found.       A CommandBinding has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>.  This is because a CommandBinding binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called."
  syntax:
    content: public class CommandBinding
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref> class."
  syntax:
    content: public CommandBinding ();
    parameters: []
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  id: '#ctor(System.Windows.Input.ICommand)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref> class by using the specified <xref:System.Windows.Input.ICommand>."
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "The command to base the new <xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref> on."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref> class by using the specified <xref:System.Windows.Input.ICommand> and the specified <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;></xref> event handler."
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "The command to base the new <xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref> on."
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "The handler for the <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;></xref> event on the new <xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref> class by using the specified <xref:System.Windows.Input.ICommand> and the specified <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;></xref> and <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;></xref> event handlers."
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "The command to base the new <xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref> on."
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "The handler for the <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;></xref> event on the new <xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>."
    - id: canExecute
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "The handler for the <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;></xref> event on the new <xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.CanExecute
  id: CanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Occurs when the command associated with this <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref> initiates a check to determine whether the command can be executed on the command target."
  remarks: "When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.  If the event is not handled, the CanExecute event is raised.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the CanExecute handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the CanExecute event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.      <a name=&quot;routedEventInfo_CanExecute&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>."
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Command
  id: Command
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets or sets the <xref:System.Windows.Input.ICommand> associated with this <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: "The command associated with this binding."
  overload: System.Windows.Input.CommandBinding.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Executed
  id: Executed
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Occurs when the command associated with this <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref> executes."
  remarks: "When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the Executed event is raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the Executed handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the Executed event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.      <a name=&quot;routedEventInfo_Executed&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|   |Routing strategy|Bubbling|   |Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>."
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler Executed;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  id: PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Occurs when the command associated with this <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref> initiates a check to determine whether the command can be executed on the current command target."
  remarks: "When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the PreviewCanExecute event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command. Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.      <a name=&quot;routedEventInfo_PreviewCanExecute&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>."
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  id: PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Occurs when the command associated with this <xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref> executes."
  remarks: "When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the PreviewExecuted event on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the PreviewExecuted handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the PreviewExecuted event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.      <a name=&quot;routedEventInfo_PreviewExecuted&quot;></a>    ## Routed Event Information      |||   |-|-|   |Identifier field|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|   |Routing strategy|Tunneling|   |Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>."
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Input.CommandBinding.#ctor
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
- uid: System.Windows.Input.ExecutedRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: ExecutedRoutedEventHandler
  nameWithType: ExecutedRoutedEventHandler
  fullName: System.Windows.Input.ExecutedRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
- uid: System.Windows.Input.CanExecuteRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: CanExecuteRoutedEventHandler
  nameWithType: CanExecuteRoutedEventHandler
  fullName: System.Windows.Input.CanExecuteRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.CanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
- uid: System.Windows.Input.CommandBinding.Command
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
- uid: System.Windows.Input.CommandBinding.Executed
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
- uid: System.Windows.Input.CommandBinding.#ctor*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding
  nameWithType: CommandBinding.CommandBinding
- uid: System.Windows.Input.CommandBinding.Command*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
