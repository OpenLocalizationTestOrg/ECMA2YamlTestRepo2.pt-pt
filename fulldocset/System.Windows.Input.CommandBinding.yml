### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.CommandBinding
  id: CommandBinding
  children:
  - System.Windows.Input.CommandBinding.#ctor
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandBinding.CanExecute
  - System.Windows.Input.CommandBinding.Command
  - System.Windows.Input.CommandBinding.Executed
  - System.Windows.Input.CommandBinding.PreviewCanExecute
  - System.Windows.Input.CommandBinding.PreviewExecuted
  langs:
  - csharp
  name: CommandBinding
  nameWithType: CommandBinding
  fullName: System.Windows.Input.CommandBinding
  type: Class
  summary: "Associa um <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> para os processadores de eventos que implementem o comando."
  remarks: "Um CommandBinding associa um comando com o <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> e <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> eventos que implementam e determinam o estado do comando.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.PreviewExecuted>       Quando o <xref:System.Windows.Input.RoutedCommand.Execute%2A>ou <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>método de um <xref:System.Windows.Input.RoutedCommand>denomina-se, o <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> ou <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> eventos são gerados no destino do comando.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand.Execute%2A>  Se o destino do comando tem um CommandBinding para o comando, são denominados os processadores adequados.  Se o destino de comando não tem um CommandBinding para o comando, os eventos são encaminhados através da árvore de elemento até é encontrado um elemento que tenha um CommandBinding.       Um CommandBinding limitou utilização com um <xref:System.Windows.Input.ICommand>que não um<xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand>  Isto acontece porque uma CommandBinding vincula o comando para o <xref:System.Windows.Input.ExecutedRoutedEventHandler>e <xref:System.Windows.Input.CanExecuteRoutedEventHandler>que escutam a <xref:System.Windows.Input.CommandManager.Executed>e <xref:System.Windows.Input.CommandManager.CanExecute>os eventos que são encaminhados é desencadeado quando o <xref:System.Windows.Input.RoutedCommand.Execute%2A>e <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>método do <xref:System.Windows.Input.RoutedCommand>são denominados.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand.Execute%2A> </xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.ExecutedRoutedEventHandler>"
  syntax:
    content: public class CommandBinding
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> classe."
  syntax:
    content: public CommandBinding ();
    parameters: []
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  id: '#ctor(System.Windows.Input.ICommand)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> classe utilizando o <xref:System.Windows.Input.ICommand>.</xref:System.Windows.Input.ICommand> especificado"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "O comando para basear o novo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> no."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> classe utilizando especificado <xref:System.Windows.Input.ICommand>e especificado <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> processador de eventos.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "O comando para basear o novo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> no."
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "O processador para o <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> eventos no novo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> classe utilizando especificado <xref:System.Windows.Input.ICommand>e especificado <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> e <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;> </xref> processadores de eventos.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "O comando para basear o novo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> no."
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "O processador para o <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> eventos no novo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>."
    - id: canExecute
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "O processador para o <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;> </xref> eventos no novo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.CanExecute
  id: CanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Ocorre quando o comando associada a este <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> inicia uma verificação para determinar se o comando pode ser executado no destino do comando."
  remarks: "Quando o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>método num <xref:System.Windows.Input.RoutedCommand>denomina-se, o <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>o evento é gerado no destino do comando.</xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A>  Se o evento não é processado, o evento de CanExecute é gerado.  Se o comando de destino tem um <xref:System.Windows.Input.CommandBinding>para o comando, para que o processador de CanExecute <xref:System.Windows.Input.CommandBinding>é chamado.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Se o destino de comando não tem um <xref:System.Windows.Input.CommandBinding>para o comando, bolhas de eventos CanExecute até a árvore de elemento procurar um elemento que tenha um <xref:System.Windows.Input.CommandBinding>associado ao comando.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>      <a name=&quot;routedEventInfo_CanExecute&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.Input.CommandManager.CanExecuteEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.</xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.CommandManager.CanExecuteEvent>"
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Command
  id: Command
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Obtém ou define o <xref:System.Windows.Input.ICommand>associada a este <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref>.</xref:System.Windows.Input.ICommand>"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: "O comando associado a este enlace."
  overload: System.Windows.Input.CommandBinding.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Executed
  id: Executed
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Ocorre quando o comando associada a este <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> executa."
  remarks: "Quando um <xref:System.Windows.Input.RoutedCommand>executa, gera o <xref:System.Windows.Input.CommandBinding.PreviewExecuted>eventos no destino do comando.</xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.RoutedCommand>  Se o <xref:System.Windows.Input.CommandBinding.PreviewExecuted>evento não está a ser processado, o evento de executados é gerado no destino do comando.</xref:System.Windows.Input.CommandBinding.PreviewExecuted>  Se o comando de destino tem um <xref:System.Windows.Input.CommandBinding>para o comando específico, para que o processador de executados <xref:System.Windows.Input.CommandBinding>é chamado.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Se o destino de comando não tem um <xref:System.Windows.Input.CommandBinding>para esse comando específico do evento executados bolhas cima na árvore de elemento procurar um elemento que tenha um <xref:System.Windows.Input.CommandBinding>associado ao comando.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Se um <xref:System.Windows.Input.CommandBinding>não for encontrado, o comando não é processado.</xref:System.Windows.Input.CommandBinding>      <a name=&quot;routedEventInfo_Executed&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.Input.CommandManager.ExecutedEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.</xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.CommandManager.ExecutedEvent>"
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler Executed;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  id: PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Ocorre quando o comando associada a este <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> inicia uma verificação para determinar se o comando pode ser executado no destino do comando atual."
  remarks: "Quando o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>método num <xref:System.Windows.Input.RoutedCommand>é chamado PreviewCanExecute o evento é gerado no destino do comando, se o comando de destino tem um <xref:System.Windows.Input.CommandBinding>para o comando.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Em seguida, a <xref:System.Windows.Input.CommandBinding.CanExecute>processador para que <xref:System.Windows.Input.CommandBinding>é chamado.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.CanExecute>  Se o destino de comando não tem um <xref:System.Windows.Input.CommandBinding>para o comando, o <xref:System.Windows.Input.CommandBinding.CanExecute>bolhas de eventos de segurança a árvore de elemento procurar um elemento que tenha um <xref:System.Windows.Input.CommandBinding>associado ao comando.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding>  Se o evento não é processado, o <xref:System.Windows.Input.CommandBinding.CanExecute>o evento é gerado.</xref:System.Windows.Input.CommandBinding.CanExecute>      <a name=&quot;routedEventInfo_PreviewCanExecute&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.Input.CommandBinding.CanExecute>.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  id: PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Ocorre quando o comando associada a este <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> executa."
  remarks: "Quando um <xref:System.Windows.Input.RoutedCommand>executa, gera o evento de PreviewExecuted no destino do comando.</xref:System.Windows.Input.RoutedCommand>  Se o comando de destino tem um <xref:System.Windows.Input.CommandBinding>para o comando de PreviewExecuted processador para que <xref:System.Windows.Input.CommandBinding>é chamado.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Se o destino de comando não tem um <xref:System.Windows.Input.CommandBinding>para o comando túneis de evento PreviewExecuted pendente a árvore de elemento procurar um elemento que tenha um <xref:System.Windows.Input.CommandBinding>associado ao comando.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Se o evento de pré-visualização não é processado, o <xref:System.Windows.Input.CommandBinding.Executed>o evento é gerado no destino de comando.</xref:System.Windows.Input.CommandBinding.Executed>      <a name=&quot;routedEventInfo_PreviewExecuted&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.Input.CommandBinding.Executed>.</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Input.CommandBinding.#ctor
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
- uid: System.Windows.Input.ExecutedRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: ExecutedRoutedEventHandler
  nameWithType: ExecutedRoutedEventHandler
  fullName: System.Windows.Input.ExecutedRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
- uid: System.Windows.Input.CanExecuteRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: CanExecuteRoutedEventHandler
  nameWithType: CanExecuteRoutedEventHandler
  fullName: System.Windows.Input.CanExecuteRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.CanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
- uid: System.Windows.Input.CommandBinding.Command
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
- uid: System.Windows.Input.CommandBinding.Executed
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
- uid: System.Windows.Input.CommandBinding.#ctor*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding
  nameWithType: CommandBinding.CommandBinding
- uid: System.Windows.Input.CommandBinding.Command*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
