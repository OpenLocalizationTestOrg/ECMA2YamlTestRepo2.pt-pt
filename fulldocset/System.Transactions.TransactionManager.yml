### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionManager
  id: TransactionManager
  children:
  - System.Transactions.TransactionManager.DefaultTimeout
  - System.Transactions.TransactionManager.DistributedTransactionStarted
  - System.Transactions.TransactionManager.HostCurrentCallback
  - System.Transactions.TransactionManager.MaximumTimeout
  - System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  - System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  langs:
  - csharp
  name: TransactionManager
  nameWithType: TransactionManager
  fullName: System.Transactions.TransactionManager
  type: Class
  summary: "Contains methods used for transaction management. This class cannot be inherited."
  remarks: "This class contains static properties and methods used to obtain information about the default transaction options. It also contains several static methods used for recovery of a durable resource when the durable resource fails. No special action is required of a durable resource if the Microsoft Distributed Transaction Coordinator (MSDTC) fails."
  syntax:
    content: public static class TransactionManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DefaultTimeout
  id: DefaultTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Gets the default timeout interval for new transactions."
  remarks: "The timeout interval of a transaction is the time within which the transaction must be completed. If the transaction manager has not heard from all transaction participants within the timeout interval, it aborts the transaction.       This value can be set in the `DefaultSettingsSection` of the config file."
  syntax:
    content: public static TimeSpan DefaultTimeout { get; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> value that specifies the timeout interval for new transactions."
  overload: System.Transactions.TransactionManager.DefaultTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  id: DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
  type: Event
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Indicates that a distributed transaction has started."
  remarks: "**Caution** Signing up for this event degrades the performance of all distributed transactions. Local transactions are not monitored as performance is affected even more.       **Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."
  syntax:
    content: public static event System.Transactions.TransactionStartedEventHandler DistributedTransactionStarted;
    return:
      type: System.Transactions.TransactionStartedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  id: HostCurrentCallback
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Gets or sets a custom transaction factory."
  remarks: '**Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.'
  syntax:
    content: public static System.Transactions.HostCurrentTransactionCallback HostCurrentCallback { get; set; }
    return:
      type: System.Transactions.HostCurrentTransactionCallback
      description: "A <xref href=&quot;System.Transactions.HostCurrentTransactionCallback&quot;></xref> that contains a custom transaction factory."
  overload: System.Transactions.TransactionManager.HostCurrentCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.MaximumTimeout
  id: MaximumTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Gets the default maximum timeout interval for new transactions."
  remarks: "For an explanation of the timeout interval, see the documentation for the <xref:System.Transactions.TransactionManager.DefaultTimeout%2A> property.       This value can be set in the `MachineSettingsSection` of the config file."
  syntax:
    content: public static TimeSpan MaximumTimeout { get; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> value that specifies the maximum timeout interval that is allowed when creating new transactions."
  overload: System.Transactions.TransactionManager.MaximumTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  id: RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Notifies the transaction manager that a resource manager recovering from failure has finished reenlisting in all unresolved transactions."
  remarks: "All durable resource managers should do recovery when they first start up by calling the <xref:System.Transactions.TransactionManager.Reenlist%2A> method for each outstanding transaction.  Only when all of the reenlistments are done should the resource manager call RecoveryComplete.       For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).       **Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."
  syntax:
    content: public static void RecoveryComplete (Guid resourceManagerIdentifier);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "A <xref:System.Guid> that uniquely identifies the resource to be recovered from."
  overload: System.Transactions.TransactionManager.RecoveryComplete*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>resourceManagerIdentifier</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  id: Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Reenlists a durable participant in a transaction."
  remarks: "A resource manager facilitates resolution of durable enlistments in a transaction by reenlisting the transaction participant after resource failure.       The `resourceManagerIdentifier` parameter is used to consistently label the participant of a transaction in the event of a resource failure.  When calling the Reenlist method, the resource manager must provide the same `resourceManagerIdentifier` as it used when it originally called the <xref:System.Transactions.Transaction.EnlistDurable%2A> method during enlistment, or a <xref:System.Transactions.TransactionException> is thrown.       When a participant is reenlisted using this method, the phase 2 methods of <xref:System.Transactions.IEnlistmentNotification> that correspond to the transaction&quot;s outcome (that is, <xref:System.Transactions.IEnlistmentNotification.Commit%2A> , <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> or <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> ) are called as appropriate.       After the participants are successfully reenlisted, you should then call <xref:System.Transactions.TransactionManager.RecoveryComplete%2A> to complete the recovery.       You should only call this method when a resource manager restarts from failure. In addition, you should only reenlist unresolved transactions logged by a resource manager during the initial Prepare phase of a two-phase commit. Any attempt to call this method at invalid times can produce erroneous results.       If the transaction manager fails, and your resource manager performs recovery only a short time after you called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method on an enlistment in phase 1 of the Two-Phase Commit protocol, your resource manager might either receive the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> callback.       For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).       **Note** This method uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."
  syntax:
    content: public static System.Transactions.Enlistment Reenlist (Guid resourceManagerIdentifier, byte[] recoveryInformation, System.Transactions.IEnlistmentNotification enlistmentNotification);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "A <xref:System.Guid> that uniquely identifies the resource manager."
    - id: recoveryInformation
      type: System.Byte[]
      description: "Contains additional information of recovery information."
    - id: enlistmentNotification
      type: System.Transactions.IEnlistmentNotification
      description: "A resource object that implements <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;></xref> to receive notifications."
    return:
      type: System.Transactions.Enlistment
      description: "An <xref href=&quot;System.Transactions.Enlistment&quot;></xref> that describes the enlistment."
  overload: System.Transactions.TransactionManager.Reenlist*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>recoveryInformation</code> is invalid.       -or-       Transaction Manager information in <code>recoveryInformation</code> does not match the configured transaction manager.       -or-       <code>RecoveryInformation</code> is not recognized by <xref href=&quot;System.Transactions&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Transactions.TransactionManager.RecoveryComplete*> has already been called for the specified <code>resourceManagerIdentifier</code>. The reenlistment is rejected."
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "The <code>resourceManagerIdentifier</code> does not match the content of the specified recovery information in <code>recoveryInformation</code>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.TransactionManager.DefaultTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
- uid: System.Transactions.TransactionStartedEventHandler
  parent: System.Transactions
  isExternal: false
  name: TransactionStartedEventHandler
  nameWithType: TransactionStartedEventHandler
  fullName: System.Transactions.TransactionStartedEventHandler
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
- uid: System.Transactions.HostCurrentTransactionCallback
  parent: System.Transactions
  isExternal: false
  name: HostCurrentTransactionCallback
  nameWithType: HostCurrentTransactionCallback
  fullName: System.Transactions.HostCurrentTransactionCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.IEnlistmentNotification
  parent: System.Transactions
  isExternal: false
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
- uid: System.Transactions.TransactionManager.DefaultTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
- uid: System.Transactions.TransactionManager.HostCurrentCallback*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete
  nameWithType: TransactionManager.RecoveryComplete
- uid: System.Transactions.TransactionManager.Reenlist*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist
  nameWithType: TransactionManager.Reenlist
