### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.ListDictionary
  id: ListDictionary
  children:
  - System.Collections.Specialized.ListDictionary.#ctor
  - System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  - System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  - System.Collections.Specialized.ListDictionary.Clear
  - System.Collections.Specialized.ListDictionary.Contains(System.Object)
  - System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.ListDictionary.Count
  - System.Collections.Specialized.ListDictionary.GetEnumerator
  - System.Collections.Specialized.ListDictionary.IsFixedSize
  - System.Collections.Specialized.ListDictionary.IsReadOnly
  - System.Collections.Specialized.ListDictionary.IsSynchronized
  - System.Collections.Specialized.ListDictionary.Item(System.Object)
  - System.Collections.Specialized.ListDictionary.Keys
  - System.Collections.Specialized.ListDictionary.Remove(System.Object)
  - System.Collections.Specialized.ListDictionary.SyncRoot
  - System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Specialized.ListDictionary.Values
  langs:
  - csharp
  name: ListDictionary
  nameWithType: ListDictionary
  fullName: System.Collections.Specialized.ListDictionary
  type: Class
  summary: "Implementa <xref uid=&quot;langword_csharp_IDictionary&quot; name=&quot;IDictionary&quot; href=&quot;&quot;> </xref> utilizando uma lista singly ligada. Recomendado para coleções que incluem, normalmente, menos de 10 itens."
  remarks: "Esta é uma implementação simple de <xref:System.Collections.IDictionary>utilizando uma lista singly ligada.</xref:System.Collections.IDictionary> É mais pequenas e mais rápida do que um <xref:System.Collections.Hashtable>se o número de elementos é 10 ou menor.</xref:System.Collections.Hashtable> Isto não deve ser utilizado se o desempenho é importante para grandes quantidades de elementos.       Itens de um ListDictionary não estão por qualquer ordem garantida; não deve depender de código na ordem atual. O ListDictionary está implementado para obtenção codificada rápida; a ordem interna real de itens é dependente de implementação e foi alterado nas versões futuras do produto.       Os membros, tais como <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>, <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, e <xref:System.Collections.Specialized.ListDictionary.Contains%2A>são Nã (`n`) operações, onde `n` é <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A> </xref:System.Collections.Specialized.ListDictionary.Contains%2A> </xref:System.Collections.Specialized.ListDictionary.Remove%2A> </xref:System.Collections.Specialized.ListDictionary.Add%2A> </xref:System.Collections.Specialized.ListDictionary.Item%2A>       Não pode ser uma chave `null`, mas pode um valor.       O `foreach` declaração do Estado de linguagem c# (`for each` no Visual Basic) devolve um objeto do tipo de elementos na colecção. Uma vez que cada elemento do ListDictionary um par chave/valor, o tipo de elemento não é o tipo de chave ou o tipo do valor. Em vez disso, o tipo de elemento é <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Por exemplo: [!code-cs [System.Collections.Specialized.ListDictionary2#3](~/add/codesnippet/csharp/t-system.collections.spe_9_1.cs)][!code-cpp[System.Collections.Specialized.ListDictionary2#3](~/add/codesnippet/cpp/t-system.collections.spe_9_1.cpp)][!code-vb[System.Collections.Specialized.ListDictionary2#3](~/add/codesnippet/visualbasic/t-system.collections.spe_9_1.vb) ] o `foreach` instrução é um wrapper em torno do enumerador, que apenas lhe permite ler, escrever não à coleção.    "
  example:
  - "The following code example demonstrates several of the properties and methods of ListDictionary.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/cpp/t-system.collections.spe_9_2.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/csharp/t-system.collections.spe_9_2.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/visualbasic/t-system.collections.spe_9_2.vb)]"
  syntax:
    content: 'public class ListDictionary : System.Collections.IDictionary'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: ListDictionary()
  nameWithType: ListDictionary.ListDictionary()
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Cria um vazio <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> utilizando o comparador predefinido."
  remarks: "O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Specialized.ListDictionary>tem de ser exclusivo.</xref:System.Collections.Specialized.ListDictionary> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Este construtor é uma operação de O(1)."
  example:
  - "The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/cpp/m-system.collections.spe_8_1.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/csharp/m-system.collections.spe_8_1.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/visualbasic/m-system.collections.spe_8_1.vb)]"
  syntax:
    content: public ListDictionary ();
    parameters: []
  overload: System.Collections.Specialized.ListDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: ListDictionary(IComparer)
  nameWithType: ListDictionary.ListDictionary(IComparer)
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary(IComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Cria um vazio <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> utilizando o comparador especificado."
  remarks: "O comparador determina se duas chaves são iguais. Cada chave num <xref:System.Collections.Specialized.ListDictionary>tem de ser exclusivo.</xref:System.Collections.Specialized.ListDictionary> O comparador predefinido é a implementação da chave de <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       O comparador personalizado permite tais cenários como efetuar pesquisas com cadeias sensível.       Este construtor é uma operação de O(1)."
  syntax:
    content: public ListDictionary (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>a utilizar para determinar se duas chaves são iguais.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o comparador predefinido, que é a implementação de cada chave de &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Specialized.ListDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: ListDictionary.Add(Object,Object)
  fullName: System.Collections.Specialized.ListDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Adiciona uma entrada com o nome da chave e valor para o <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  remarks: "Um objeto que tem não correlação entre o estado e o respetivo valor de código hash não normalmente deve ser utilizado como a chave. Por exemplo, os objetos de cadeia são melhores do que os objetos de StringBuilder para utilização como chaves.       Também pode utilizar o <xref:System.Collections.Specialized.ListDictionary.Item%2A>para adicionar novos elementos, definindo o valor de uma chave que não existe propriedade no <xref:System.Collections.Specialized.ListDictionary>; por exemplo, `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Collections.Specialized.ListDictionary.Item%2A> No entanto, se a chave especificada já existe no <xref:System.Collections.Specialized.ListDictionary>, definição de <xref:System.Collections.Specialized.ListDictionary.Item%2A>propriedade substitui o valor antigo.</xref:System.Collections.Specialized.ListDictionary.Item%2A> </xref:System.Collections.Specialized.ListDictionary> Em contrapartida, o método Add não modificar elementos existentes.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A>"
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_26_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_26_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_26_1.cs)]"
  syntax:
    content: public void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "A chave da entrada de adicionar."
    - id: value
      type: System.Object
      description: "O valor da entrada de adicionar. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Já existe uma entrada com a mesma chave no <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Clear()
  nameWithType: ListDictionary.Clear()
  fullName: System.Collections.Specialized.ListDictionary.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Remove todas as entradas do <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  remarks: "<xref:System.Collections.Specialized.ListDictionary.Count%2A>está definido como zero e também são lançadas as referências a outros objetos de elementos da coleção.</xref:System.Collections.Specialized.ListDictionary.Count%2A>       Este método é uma operação de O(1)."
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_43_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_43_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_43_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Specialized.ListDictionary.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ListDictionary.Contains(Object)
  fullName: System.Collections.Specialized.ListDictionary.Contains(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Determina se o <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> contém uma chave específica."
  remarks: "Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `key` para determinar se `item` existe.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example searches for an element in a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Contains#1](~/add/codesnippet/cpp/m-system.collections.spe_22_1.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Contains#1](~/add/codesnippet/csharp/m-system.collections.spe_22_1.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Contains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_22_1.vb)]"
  syntax:
    content: public bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave para localizar no <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> contém uma entrada com especificado chave; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ListDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.ListDictionary.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Copia o <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> entradas para um unidimensional <xref:System.Array>instância no índice especificado.</xref:System.Array>"
  remarks: "Os elementos são copiados para o <xref:System.Array>pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Array>       Para copiar apenas as chaves no <xref:System.Collections.Specialized.ListDictionary>, utilize `ListDictionary.Keys.CopyTo`.</xref:System.Collections.Specialized.ListDictionary>       Para copiar apenas os valores existentes no <xref:System.Collections.Specialized.ListDictionary>, utilize `ListDictionary.Values.CopyTo`.</xref:System.Collections.Specialized.ListDictionary>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A>"
  example:
  - "The following code example copies the elements of a <xref:System.Collections.Specialized.ListDictionary> to an array.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/add/codesnippet/cpp/9aabfe2b-669c-468b-9ada-_1.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary_CopyTo#1](~/add/codesnippet/csharp/9aabfe2b-669c-468b-9ada-_1.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary_CopyTo#1](~/add/codesnippet/visualbasic/9aabfe2b-669c-468b-9ada-_1.vb)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "O unidimensional <xref:System.Array>que é o destino de <xref:System.Collections.DictionaryEntry>objetos copiados <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> O <xref:System.Array>tem de ter a indexação com base em zero.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "O índice baseado em zero `array` em que copiar começa."
  overload: System.Collections.Specialized.ListDictionary.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       - ou - o número de elementos na origem de <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> é superior ao espaço disponível desde o <code>index</code> ao fim do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da origem de <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> não pode ser convertido automaticamente para o tipo de destino <code> array </code>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Count
  id: Count
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Count
  nameWithType: ListDictionary.Count
  fullName: System.Collections.Specialized.ListDictionary.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém o número de pares chave/valor contidas no <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  remarks: "Obter o valor desta propriedade é uma operação de O(1)."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_2_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_2_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_2_1.cs)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "O número de pares chave/valor contidas no <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ListDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Devolve um <xref:System.Collections.IDictionaryEnumerator>que itera através de <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "O `foreach` declaração do Estado de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Por conseguinte, utilizando `foreach` recomenda-se, em vez de manipular diretamente o enumerador.       Enumeradores podem ser utilizados para ler os dados da coleção, mas não pode ser utilizados para modificar a colecção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento da coleção. <xref:System.Collections.IEnumerator.Reset%2A>também oferece o enumerador novamente para nesta posição.</xref:System.Collections.IEnumerator.Reset%2A>  Nesta posição <xref:System.Collections.IEnumerator.Current%2A>não está definido.</xref:System.Collections.IEnumerator.Current%2A> Por conseguinte, tem de chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção de antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Devolve o mesmo objeto até ser <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>transmite o fim da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>devolve `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nesta posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também devolvem `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A>devolvido `false`, <xref:System.Collections.IEnumerator.Current%2A>não está definido.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Para definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção, pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permanece inalterada. Caso sejam feitas alterações à coleção, como adicionar, modificar ou eliminar elementos, o enumerador está irrevogavelmente inválido e o respetivo comportamento não está definido.       O enumerador não tem acesso exclusivo à coleção; Por conseguinte, a enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread.  Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda.  Para permitir a coleção ser acedido por vários threads para ler e escrever, tem de implementar a seus próprios sincronização.       Este método é uma operação de O(1)."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/m-system.collections.spe_6_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/m-system.collections.spe_6_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/m-system.collections.spe_6_1.cs)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Specialized.ListDictionary.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ListDictionary.IsFixedSize
  fullName: System.Collections.Specialized.ListDictionary.IsFixedSize
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> tem um tamanho fixo."
  remarks: "<xref:System.Collections.Specialized.ListDictionary>implementa a propriedade IsFixedSize porque é necessário pelo <xref:System.Collections.IDictionary?displayProperty=fullName>interface.</xref:System.Collections.IDictionary?displayProperty=fullName></xref:System.Collections.Specialized.ListDictionary>       Uma coleção com um tamanho fixo não permite a adição ou remoção de elementos depois da coleção é criada, mas permite a modificação de elementos existentes.       Uma coleção com um tamanho fixo é simplesmente uma coleção com um wrapper que impede a adição e remoção de elementos; Por conseguinte, caso sejam feitas alterações para a colecção subjacente, incluindo a adição ou remoção de elementos, a coleção de tamanho fixo reflete essas alterações.       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "Esta propriedade devolve sempre <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ListDictionary.IsReadOnly
  fullName: System.Collections.Specialized.ListDictionary.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> é só de leitura."
  remarks: "<xref:System.Collections.Specialized.ListDictionary>implementa a propriedade IsReadOnly porque é necessário pelo <xref:System.Collections.IDictionary?displayProperty=fullName>interface.</xref:System.Collections.IDictionary?displayProperty=fullName></xref:System.Collections.Specialized.ListDictionary>       Uma coleção que é só de leitura não permite a adição, remoção ou modificação de elementos depois de criar a coleção.       Uma coleção que é só de leitura é simplesmente uma coleção com um wrapper que impede a modificar a coleção; Por conseguinte, caso sejam feitas alterações para a colecção subjacente, a coleção só de leitura reflete essas alterações.       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Esta propriedade devolve sempre <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ListDictionary.IsSynchronized
  fullName: System.Collections.Specialized.ListDictionary.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> é sincronizado (seguros para threads)."
  remarks: "<xref:System.Collections.Specialized.ListDictionary>implementa a propriedade IsSynchronized porque é necessário pelo <xref:System.Collections.ICollection?displayProperty=fullName>interface.</xref:System.Collections.ICollection?displayProperty=fullName></xref:System.Collections.Specialized.ListDictionary>       Classes derivadas podem indique uma versão sincronizada a <xref:System.Collections.Specialized.ListDictionary>utilizando o <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A>propriedade.</xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> </xref:System.Collections.Specialized.ListDictionary>       Enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cs[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/csharp/p-system.collections.spe_6_1.cs)]\n [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/cpp/p-system.collections.spe_6_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_6_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Esta propriedade devolve sempre <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Item(Object)
  nameWithType: ListDictionary.Item(Object)
  fullName: System.Collections.Specialized.ListDictionary.Item(Object)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém ou define o valor associado à chave especificada."
  remarks: "Esta propriedade fornece a capacidade de aceder um elemento específico da coleção, utilizando a seguinte sintaxe: `myCollection[key]`.       Também pode utilizar a propriedade do Item para adicionar novos elementos definindo o valor de uma chave que não existe no <xref:System.Collections.Specialized.ListDictionary>; por exemplo, `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Specialized.ListDictionary> No entanto, se a chave especificada já existe no <xref:System.Collections.Specialized.ListDictionary>, definir a propriedade do Item substitui o valor antigo.</xref:System.Collections.Specialized.ListDictionary> Em contrapartida, o <xref:System.Collections.Specialized.ListDictionary.Add%2A>método não modifica os elementos existentes.</xref:System.Collections.Specialized.ListDictionary.Add%2A>       Não pode ser uma chave `null`, mas pode um valor. Para distinguir entre `null` que é devolvido porque a chave especificada não é encontrada e `null` que é devolvido porque o valor da chave especificada é `null`, utilize o <xref:System.Collections.Specialized.ListDictionary.Contains%2A>método para determinar se a chave existe na lista.</xref:System.Collections.Specialized.ListDictionary.Contains%2A>       A linguagem c# utiliza a palavra-chave para definir os indexadores em vez de implementar a propriedade do Item. Visual Basic implementa Item como uma propriedade predefinida, que fornece a mesma funcionalidade de indexação.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A>"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_11_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_11_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_11_1.cs)]"
  syntax:
    content: public object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "A chave cujo valor obter ou definir."
    return:
      type: System.Object
      description: "O valor associado à chave especificada. Se a chave especificada não é encontrada, a tentar obter devolve <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, e a tentar definir-cria uma nova entrada utilizando a chave especificada."
  overload: System.Collections.Specialized.ListDictionary.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Keys
  nameWithType: ListDictionary.Keys
  fullName: System.Collections.Specialized.ListDictionary.Keys
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um <xref:System.Collections.ICollection>que contém as chaves no <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "A ordem dos valores existentes no <xref:System.Collections.ICollection>não foi especificado, mas não os valores associados na mesma ordem o <xref:System.Collections.ICollection>devolvido pelo <xref:System.Collections.Specialized.ListDictionary.Values%2A>método.</xref:System.Collections.Specialized.ListDictionary.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       O devolvido <xref:System.Collections.ICollection>não é uma cópia estática; em vez disso, <xref:System.Collections.ICollection>refere-se novamente as chaves de original <xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Por conseguinte, é alterado para <xref:System.Collections.Specialized.ListDictionary>continuar a ser refletida no <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Specialized.ListDictionary>       Obter o valor desta propriedade é uma operação de O(1)."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_28_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_28_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_28_1.cs)]"
  syntax:
    content: public System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>que contém as chaves no <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Specialized.ListDictionary.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ListDictionary.Remove(Object)
  fullName: System.Collections.Specialized.ListDictionary.Remove(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Remove a entrada com o nome da chave do <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  remarks: "Se o <xref:System.Collections.Specialized.ListDictionary>não contém um elemento com a chave especificada, o <xref:System.Collections.Specialized.ListDictionary>permanece inalterada.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Collections.Specialized.ListDictionary> Sem exceção é emitida.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A>"
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_21_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_21_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_21_1.cs)]"
  syntax:
    content: public void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave de entrada para remover."
  overload: System.Collections.Specialized.ListDictionary.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ListDictionary.SyncRoot
  fullName: System.Collections.Specialized.ListDictionary.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um objeto que pode ser utilizado para sincronizar acesso para o <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  remarks: "Classes derivadas podem fornecer os seus próprios versão sincronizado do <xref:System.Collections.Specialized.ListDictionary>utilizando a propriedade SyncRoot.</xref:System.Collections.Specialized.ListDictionary> O código de sincronização tem de efetuar operações em SyncRoot do <xref:System.Collections.Specialized.ListDictionary>, não diretamente no <xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Collections.Specialized.ListDictionary> Isto assegura um funcionamento correto de coleções que são derivadas de outros objetos. Especificamente, mantém sincronização adequada com outros threads que podem ser simultaneamente modificar o <xref:System.Collections.Specialized.ListDictionary>objeto.</xref:System.Collections.Specialized.ListDictionary>       Enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cs[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/csharp/p-system.collections.spe_1_1.cs)]\n [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/cpp/p-system.collections.spe_1_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "Um objeto que pode ser utilizado para sincronizar acesso para o <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ListDictionary.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Devolve um <xref:System.Collections.IEnumerator>que itera através de <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "O `foreach` declaração do Estado de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Por conseguinte, utilizando `foreach` recomenda-se, em vez de manipular diretamente o enumerador.       Enumeradores podem ser utilizados para ler os dados da coleção, mas não pode ser utilizados para modificar a colecção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento da coleção. <xref:System.Collections.IEnumerator.Reset%2A>também oferece o enumerador novamente para nesta posição.</xref:System.Collections.IEnumerator.Reset%2A> AT isto posicionar, chamar <xref:System.Collections.IEnumerator.Current%2A>emite uma exceção.</xref:System.Collections.IEnumerator.Current%2A> Por conseguinte, tem de chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção de antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Devolve o mesmo objeto até ser <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>transmite o fim da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>devolve `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nesta posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também devolvem `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A>devolvido `false`, chamar <xref:System.Collections.IEnumerator.Current%2A>emite uma exceção.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Para definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção, pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permanece inalterada. Caso sejam feitas alterações à coleção, tais como adicionar, modificar ou eliminar elementos, o enumerador irrevogavelmente é invalidado e a próxima chamada ou <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A>emitir um <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se a coleção é modificada entre <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>devolve o elemento que está definido, mesmo que o enumerador já é invalidado.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       O enumerador não tem acesso exclusivo à coleção; Por conseguinte, a enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads.       Este método é uma operação de O(1)."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/98b866c7-b98f-4af5-b9e4-_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/98b866c7-b98f-4af5-b9e4-_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/98b866c7-b98f-4af5-b9e4-_1.cs)]"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Values
  id: Values
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Values
  nameWithType: ListDictionary.Values
  fullName: System.Collections.Specialized.ListDictionary.Values
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Obtém um <xref:System.Collections.ICollection>que contém os valores existentes no <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "A ordem dos valores existentes no <xref:System.Collections.ICollection>não foi especificado, mas é a mesma ordem como as chaves associadas no <xref:System.Collections.ICollection>devolvido pelo <xref:System.Collections.Specialized.ListDictionary.Keys%2A>método.</xref:System.Collections.Specialized.ListDictionary.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       O devolvido <xref:System.Collections.ICollection>não é uma cópia estática; em vez disso, <xref:System.Collections.ICollection>refere-se novamente para os valores existentes na original <xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Por conseguinte, é alterado para <xref:System.Collections.Specialized.ListDictionary>continuar a ser refletida no <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Specialized.ListDictionary>       Obter o valor desta propriedade é uma operação de O(1)."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_26_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_26_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_26_1.cs)]"
  syntax:
    content: public System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>que contém os valores existentes no <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Specialized.ListDictionary.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.Specialized.ListDictionary.#ctor
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: ListDictionary()
  nameWithType: ListDictionary.ListDictionary()
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary()
- uid: System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: ListDictionary(IComparer)
  nameWithType: ListDictionary.ListDictionary(IComparer)
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Add(Object,Object)
  nameWithType: ListDictionary.Add(Object,Object)
  fullName: System.Collections.Specialized.ListDictionary.Add(Object,Object)
- uid: System.Collections.Specialized.ListDictionary.Clear
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Clear()
  nameWithType: ListDictionary.Clear()
  fullName: System.Collections.Specialized.ListDictionary.Clear()
- uid: System.Collections.Specialized.ListDictionary.Contains(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Contains(Object)
  nameWithType: ListDictionary.Contains(Object)
  fullName: System.Collections.Specialized.ListDictionary.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ListDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.ListDictionary.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Specialized.ListDictionary.Count
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Count
  nameWithType: ListDictionary.Count
  fullName: System.Collections.Specialized.ListDictionary.Count
- uid: System.Collections.Specialized.ListDictionary.GetEnumerator
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: ListDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.ListDictionary.IsFixedSize
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: ListDictionary.IsFixedSize
  fullName: System.Collections.Specialized.ListDictionary.IsFixedSize
- uid: System.Collections.Specialized.ListDictionary.IsReadOnly
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: ListDictionary.IsReadOnly
  fullName: System.Collections.Specialized.ListDictionary.IsReadOnly
- uid: System.Collections.Specialized.ListDictionary.IsSynchronized
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: ListDictionary.IsSynchronized
  fullName: System.Collections.Specialized.ListDictionary.IsSynchronized
- uid: System.Collections.Specialized.ListDictionary.Item(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Item(Object)
  nameWithType: ListDictionary.Item(Object)
  fullName: System.Collections.Specialized.ListDictionary.Item(Object)
- uid: System.Collections.Specialized.ListDictionary.Keys
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Keys
  nameWithType: ListDictionary.Keys
  fullName: System.Collections.Specialized.ListDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Specialized.ListDictionary.Remove(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Remove(Object)
  nameWithType: ListDictionary.Remove(Object)
  fullName: System.Collections.Specialized.ListDictionary.Remove(Object)
- uid: System.Collections.Specialized.ListDictionary.SyncRoot
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: ListDictionary.SyncRoot
  fullName: System.Collections.Specialized.ListDictionary.SyncRoot
- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ListDictionary.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Specialized.ListDictionary.Values
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Values
  nameWithType: ListDictionary.Values
  fullName: System.Collections.Specialized.ListDictionary.Values
- uid: System.Collections.Specialized.ListDictionary.#ctor*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: ListDictionary
  nameWithType: ListDictionary.ListDictionary
- uid: System.Collections.Specialized.ListDictionary.Add*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Add
  nameWithType: ListDictionary.Add
- uid: System.Collections.Specialized.ListDictionary.Clear*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Clear
  nameWithType: ListDictionary.Clear
- uid: System.Collections.Specialized.ListDictionary.Contains*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Contains
  nameWithType: ListDictionary.Contains
- uid: System.Collections.Specialized.ListDictionary.CopyTo*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: CopyTo
  nameWithType: ListDictionary.CopyTo
- uid: System.Collections.Specialized.ListDictionary.Count*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Count
  nameWithType: ListDictionary.Count
- uid: System.Collections.Specialized.ListDictionary.GetEnumerator*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: GetEnumerator
  nameWithType: ListDictionary.GetEnumerator
- uid: System.Collections.Specialized.ListDictionary.IsFixedSize*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: ListDictionary.IsFixedSize
- uid: System.Collections.Specialized.ListDictionary.IsReadOnly*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: ListDictionary.IsReadOnly
- uid: System.Collections.Specialized.ListDictionary.IsSynchronized*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: ListDictionary.IsSynchronized
- uid: System.Collections.Specialized.ListDictionary.Item*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Item
  nameWithType: ListDictionary.Item
- uid: System.Collections.Specialized.ListDictionary.Keys*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Keys
  nameWithType: ListDictionary.Keys
- uid: System.Collections.Specialized.ListDictionary.Remove*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Remove
  nameWithType: ListDictionary.Remove
- uid: System.Collections.Specialized.ListDictionary.SyncRoot*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: ListDictionary.SyncRoot
- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ListDictionary.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Specialized.ListDictionary.Values*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Values
  nameWithType: ListDictionary.Values
