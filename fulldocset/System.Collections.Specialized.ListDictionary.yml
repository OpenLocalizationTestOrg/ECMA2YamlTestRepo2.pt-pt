### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.ListDictionary
  id: ListDictionary
  children:
  - System.Collections.Specialized.ListDictionary.#ctor
  - System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  - System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  - System.Collections.Specialized.ListDictionary.Clear
  - System.Collections.Specialized.ListDictionary.Contains(System.Object)
  - System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.ListDictionary.Count
  - System.Collections.Specialized.ListDictionary.GetEnumerator
  - System.Collections.Specialized.ListDictionary.IsFixedSize
  - System.Collections.Specialized.ListDictionary.IsReadOnly
  - System.Collections.Specialized.ListDictionary.IsSynchronized
  - System.Collections.Specialized.ListDictionary.Item(System.Object)
  - System.Collections.Specialized.ListDictionary.Keys
  - System.Collections.Specialized.ListDictionary.Remove(System.Object)
  - System.Collections.Specialized.ListDictionary.SyncRoot
  - System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Specialized.ListDictionary.Values
  langs:
  - csharp
  name: ListDictionary
  nameWithType: ListDictionary
  fullName: System.Collections.Specialized.ListDictionary
  type: Class
  summary: "Implements <xref uid=&quot;langword_csharp_IDictionary&quot; name=&quot;IDictionary&quot; href=&quot;&quot;></xref> using a singly linked list. Recommended for collections that typically include fewer than 10 items."
  remarks: "This is a simple implementation of <xref:System.Collections.IDictionary> using a singly linked list. It is smaller and faster than a <xref:System.Collections.Hashtable> if the number of elements is 10 or less. This should not be used if performance is important for large numbers of elements.       Items in a ListDictionary are not in any guaranteed order; code should not depend on the current order. The ListDictionary is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product.       Members, such as <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>, <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, and <xref:System.Collections.Specialized.ListDictionary.Contains%2A> are O(`n`) operations, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.       A key cannot be `null`, but a value can.       The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the ListDictionary is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:       [!code-cs[System.Collections.Specialized.ListDictionary2#3](~/add/codesnippet/csharp/t-system.collections.spe_9_1.cs)]  [!code-cpp[System.Collections.Specialized.ListDictionary2#3](~/add/codesnippet/cpp/t-system.collections.spe_9_1.cpp)]  [!code-vb[System.Collections.Specialized.ListDictionary2#3](~/add/codesnippet/visualbasic/t-system.collections.spe_9_1.vb)]       The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection."
  example:
  - "The following code example demonstrates several of the properties and methods of ListDictionary.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/cpp/t-system.collections.spe_9_2.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/csharp/t-system.collections.spe_9_2.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/visualbasic/t-system.collections.spe_9_2.vb)]"
  syntax:
    content: 'public class ListDictionary : System.Collections.IDictionary'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: ListDictionary()
  nameWithType: ListDictionary.ListDictionary()
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Creates an empty <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref> using the default comparer."
  remarks: "The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique. The default comparer is the key&quot;s implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       This constructor is an O(1) operation."
  example:
  - "The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/cpp/m-system.collections.spe_8_1.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/csharp/m-system.collections.spe_8_1.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/visualbasic/m-system.collections.spe_8_1.vb)]"
  syntax:
    content: public ListDictionary ();
    parameters: []
  overload: System.Collections.Specialized.ListDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: ListDictionary(IComparer)
  nameWithType: ListDictionary.ListDictionary(IComparer)
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary(IComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Creates an empty <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref> using the specified comparer."
  remarks: "The comparer determines whether two keys are equal. Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique. The default comparer is the key&quot;s implementation of <xref:System.Object.Equals%2A?displayProperty=fullName>.       The custom comparer enables such scenarios as doing lookups with case-insensitive strings.       This constructor is an O(1) operation."
  syntax:
    content: public ListDictionary (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "The <xref:System.Collections.IComparer> to use to determine whether two keys are equal.       -or-       <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> to use the default comparer, which is each key&quot;s implementation of &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Specialized.ListDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: ListDictionary.Add(Object,Object)
  fullName: System.Collections.Specialized.ListDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Adds an entry with the specified key and value into the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  remarks: "An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, String objects are better than StringBuilder objects for use as keys.       You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection[&quot;myNonexistentKey&quot;] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value. In contrast, the Add method does not modify existing elements.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>."
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_26_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_26_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_26_1.cs)]"
  syntax:
    content: public void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the entry to add."
    - id: value
      type: System.Object
      description: "The value of the entry to add. The value can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An entry with the same key already exists in the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Clear()
  nameWithType: ListDictionary.Clear()
  fullName: System.Collections.Specialized.ListDictionary.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Removes all entries from the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  remarks: "<xref:System.Collections.Specialized.ListDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.       This method is an O(1) operation."
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_43_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_43_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_43_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Specialized.ListDictionary.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ListDictionary.Contains(Object)
  fullName: System.Collections.Specialized.ListDictionary.Contains(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Determines whether the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref> contains a specific key."
  remarks: "This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.       Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection."
  example:
  - "The following code example searches for an element in a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Contains#1](~/add/codesnippet/cpp/m-system.collections.spe_22_1.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Contains#1](~/add/codesnippet/csharp/m-system.collections.spe_22_1.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Contains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_22_1.vb)]"
  syntax:
    content: public bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "The key to locate in the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref> contains an entry with the specified key; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ListDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.ListDictionary.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Copies the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref> entries to a one-dimensional <xref:System.Array> instance at the specified index."
  remarks: "The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.ListDictionary>.       To copy only the keys in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Keys.CopyTo`.       To copy only the values in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Values.CopyTo`.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>."
  example:
  - "The following code example copies the elements of a <xref:System.Collections.Specialized.ListDictionary> to an array.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/add/codesnippet/cpp/9aabfe2b-669c-468b-9ada-_1.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary_CopyTo#1](~/add/codesnippet/csharp/9aabfe2b-669c-468b-9ada-_1.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary_CopyTo#1](~/add/codesnippet/visualbasic/9aabfe2b-669c-468b-9ada-_1.vb)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "The one-dimensional <xref:System.Array> that is the destination of the <xref:System.Collections.DictionaryEntry> objects copied from <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>. The <xref:System.Array> must have zero-based indexing."
    - id: index
      type: System.Int32
      description: "The zero-based index in `array` at which copying begins."
  overload: System.Collections.Specialized.ListDictionary.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.       -or-       The number of elements in the source <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "The type of the source <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref> cannot be cast automatically to the type of the destination <code>array</code>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Count
  id: Count
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Count
  nameWithType: ListDictionary.Count
  fullName: System.Collections.Specialized.ListDictionary.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Gets the number of key/value pairs contained in the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  remarks: "Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_2_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_2_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_2_1.cs)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "The number of key/value pairs contained in the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ListDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Returns an <xref:System.Collections.IDictionaryEnumerator> that iterates through the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  remarks: "The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.       This method is an O(1) operation."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/m-system.collections.spe_6_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/m-system.collections.spe_6_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/m-system.collections.spe_6_1.cs)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ListDictionary.IsFixedSize
  fullName: System.Collections.Specialized.ListDictionary.IsFixedSize
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Gets a value indicating whether the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref> has a fixed size."
  remarks: "<xref:System.Collections.Specialized.ListDictionary> implements the IsFixedSize property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.       A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.       A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.       Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "This property always returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ListDictionary.IsReadOnly
  fullName: System.Collections.Specialized.ListDictionary.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Gets a value indicating whether the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref> is read-only."
  remarks: "<xref:System.Collections.Specialized.ListDictionary> implements the IsReadOnly property because it is required by the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.       A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.       A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.       Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "This property always returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ListDictionary.IsSynchronized
  fullName: System.Collections.Specialized.ListDictionary.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Gets a value indicating whether the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref> is synchronized (thread safe)."
  remarks: "<xref:System.Collections.Specialized.ListDictionary> implements the IsSynchronized property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.       Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cs[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/csharp/p-system.collections.spe_6_1.cs)]\n [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/cpp/p-system.collections.spe_6_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_6_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "This property always returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Item(Object)
  nameWithType: ListDictionary.Item(Object)
  fullName: System.Collections.Specialized.ListDictionary.Item(Object)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Gets or sets the value associated with the specified key."
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.       You can also use the Item property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection[&quot;myNonexistentKey&quot;] = myValue`. However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the Item property overwrites the old value. In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.       A key cannot be `null`, but a value can. To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.ListDictionary.Contains%2A> method to determine if the key exists in the list.       The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_11_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_11_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_11_1.cs)]"
  syntax:
    content: public object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "The key whose value to get or set."
    return:
      type: System.Object
      description: "The value associated with the specified key. If the specified key is not found, attempting to get it returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, and attempting to set it creates a new entry using the specified key."
  overload: System.Collections.Specialized.ListDictionary.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Keys
  nameWithType: ListDictionary.Keys
  fullName: System.Collections.Specialized.ListDictionary.Keys
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Gets an <xref:System.Collections.ICollection> containing the keys in the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  remarks: "The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Values%2A> method.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.ListDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_28_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_28_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_28_1.cs)]"
  syntax:
    content: public System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "An <xref:System.Collections.ICollection> containing the keys in the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ListDictionary.Remove(Object)
  fullName: System.Collections.Specialized.ListDictionary.Remove(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Removes the entry with the specified key from the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  remarks: "If the <xref:System.Collections.Specialized.ListDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.ListDictionary> remains unchanged. No exception is thrown.       This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>."
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_21_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_21_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_21_1.cs)]"
  syntax:
    content: public void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "The key of the entry to remove."
  overload: System.Collections.Specialized.ListDictionary.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ListDictionary.SyncRoot
  fullName: System.Collections.Specialized.ListDictionary.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Gets an object that can be used to synchronize access to the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  remarks: "Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.Specialized.ListDictionary>, not directly on the <xref:System.Collections.Specialized.ListDictionary>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.ListDictionary> object.       Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cs[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/csharp/p-system.collections.spe_1_1.cs)]\n [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/cpp/p-system.collections.spe_1_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "An object that can be used to synchronize access to the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ListDictionary.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Returns an <xref:System.Collections.IEnumerator> that iterates through the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  remarks: "The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.       Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.       Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.       <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.       If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.       An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.       The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.       This method is an O(1) operation."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/98b866c7-b98f-4af5-b9e4-_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/98b866c7-b98f-4af5-b9e4-_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/98b866c7-b98f-4af5-b9e4-_1.cs)]"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Values
  id: Values
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Values
  nameWithType: ListDictionary.Values
  fullName: System.Collections.Specialized.ListDictionary.Values
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Gets an <xref:System.Collections.ICollection> containing the values in the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  remarks: "The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Keys%2A> method.       The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.ListDictionary>. Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.       Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_26_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_26_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_26_1.cs)]"
  syntax:
    content: public System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "An <xref:System.Collections.ICollection> containing the values in the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>."
  overload: System.Collections.Specialized.ListDictionary.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.Specialized.ListDictionary.#ctor
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: ListDictionary()
  nameWithType: ListDictionary.ListDictionary()
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary()
- uid: System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: ListDictionary(IComparer)
  nameWithType: ListDictionary.ListDictionary(IComparer)
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Add(Object,Object)
  nameWithType: ListDictionary.Add(Object,Object)
  fullName: System.Collections.Specialized.ListDictionary.Add(Object,Object)
- uid: System.Collections.Specialized.ListDictionary.Clear
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Clear()
  nameWithType: ListDictionary.Clear()
  fullName: System.Collections.Specialized.ListDictionary.Clear()
- uid: System.Collections.Specialized.ListDictionary.Contains(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Contains(Object)
  nameWithType: ListDictionary.Contains(Object)
  fullName: System.Collections.Specialized.ListDictionary.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ListDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.ListDictionary.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Specialized.ListDictionary.Count
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Count
  nameWithType: ListDictionary.Count
  fullName: System.Collections.Specialized.ListDictionary.Count
- uid: System.Collections.Specialized.ListDictionary.GetEnumerator
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: ListDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.ListDictionary.IsFixedSize
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: ListDictionary.IsFixedSize
  fullName: System.Collections.Specialized.ListDictionary.IsFixedSize
- uid: System.Collections.Specialized.ListDictionary.IsReadOnly
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: ListDictionary.IsReadOnly
  fullName: System.Collections.Specialized.ListDictionary.IsReadOnly
- uid: System.Collections.Specialized.ListDictionary.IsSynchronized
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: ListDictionary.IsSynchronized
  fullName: System.Collections.Specialized.ListDictionary.IsSynchronized
- uid: System.Collections.Specialized.ListDictionary.Item(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Item(Object)
  nameWithType: ListDictionary.Item(Object)
  fullName: System.Collections.Specialized.ListDictionary.Item(Object)
- uid: System.Collections.Specialized.ListDictionary.Keys
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Keys
  nameWithType: ListDictionary.Keys
  fullName: System.Collections.Specialized.ListDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Specialized.ListDictionary.Remove(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Remove(Object)
  nameWithType: ListDictionary.Remove(Object)
  fullName: System.Collections.Specialized.ListDictionary.Remove(Object)
- uid: System.Collections.Specialized.ListDictionary.SyncRoot
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: ListDictionary.SyncRoot
  fullName: System.Collections.Specialized.ListDictionary.SyncRoot
- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ListDictionary.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Specialized.ListDictionary.Values
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Values
  nameWithType: ListDictionary.Values
  fullName: System.Collections.Specialized.ListDictionary.Values
- uid: System.Collections.Specialized.ListDictionary.#ctor*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: ListDictionary
  nameWithType: ListDictionary.ListDictionary
- uid: System.Collections.Specialized.ListDictionary.Add*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Add
  nameWithType: ListDictionary.Add
- uid: System.Collections.Specialized.ListDictionary.Clear*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Clear
  nameWithType: ListDictionary.Clear
- uid: System.Collections.Specialized.ListDictionary.Contains*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Contains
  nameWithType: ListDictionary.Contains
- uid: System.Collections.Specialized.ListDictionary.CopyTo*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: CopyTo
  nameWithType: ListDictionary.CopyTo
- uid: System.Collections.Specialized.ListDictionary.Count*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Count
  nameWithType: ListDictionary.Count
- uid: System.Collections.Specialized.ListDictionary.GetEnumerator*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: GetEnumerator
  nameWithType: ListDictionary.GetEnumerator
- uid: System.Collections.Specialized.ListDictionary.IsFixedSize*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: ListDictionary.IsFixedSize
- uid: System.Collections.Specialized.ListDictionary.IsReadOnly*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: ListDictionary.IsReadOnly
- uid: System.Collections.Specialized.ListDictionary.IsSynchronized*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: ListDictionary.IsSynchronized
- uid: System.Collections.Specialized.ListDictionary.Item*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Item
  nameWithType: ListDictionary.Item
- uid: System.Collections.Specialized.ListDictionary.Keys*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Keys
  nameWithType: ListDictionary.Keys
- uid: System.Collections.Specialized.ListDictionary.Remove*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Remove
  nameWithType: ListDictionary.Remove
- uid: System.Collections.Specialized.ListDictionary.SyncRoot*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: ListDictionary.SyncRoot
- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ListDictionary.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Specialized.ListDictionary.Values*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Values
  nameWithType: ListDictionary.Values
