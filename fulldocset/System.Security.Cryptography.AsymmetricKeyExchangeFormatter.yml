### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  id: AsymmetricKeyExchangeFormatter
  children:
  - System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor
  - System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  - System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  - System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters
  - System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  langs:
  - csharp
  name: AsymmetricKeyExchangeFormatter
  nameWithType: AsymmetricKeyExchangeFormatter
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  type: Class
  summary: "Represents the base class from which all asymmetric key exchange formatters derive."
  remarks: "Asymmetric key exchange formatters encrypt key exchange data.       Key exchange allows a sender to create secret information, such as random data that can be used as a key in a symmetric encryption algorithm, and use encryption to send it to the intended recipient.      > [!CAUTION] >  It is highly recommended that you not attempt to create your own key exchange method from the basic functionality provided, because many details of the operation must be performed carefully in order for the key exchange to be successful."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class AsymmetricKeyExchangeFormatter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  langs:
  - csharp
  name: AsymmetricKeyExchangeFormatter()
  nameWithType: AsymmetricKeyExchangeFormatter.AsymmetricKeyExchangeFormatter()
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.AsymmetricKeyExchangeFormatter()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of <xref href=&quot;System.Security.Cryptography.AsymmetricKeyExchangeFormatter&quot;></xref>."
  remarks: "You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.       Use <xref:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey%2A> to set the key before calling <xref:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange%2A>."
  syntax:
    content: protected AsymmetricKeyExchangeFormatter ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  id: CreateKeyExchange(System.Byte[])
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  langs:
  - csharp
  name: CreateKeyExchange(Byte[])
  nameWithType: AsymmetricKeyExchangeFormatter.CreateKeyExchange(Byte[])
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, creates the encrypted key exchange data from the specified input data."
  remarks: "This data can only be interpreted by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information."
  syntax:
    content: public abstract byte[] CreateKeyExchange (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: "The secret information to be passed in the key exchange."
    return:
      type: System.Byte[]
      description: "The encrypted key exchange data to be sent to the intended recipient."
  overload: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  id: CreateKeyExchange(System.Byte[],System.Type)
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  langs:
  - csharp
  name: CreateKeyExchange(Byte[],Type)
  nameWithType: AsymmetricKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, creates the encrypted key exchange data from the specified input data."
  remarks: "This data can only be interpreted by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information."
  syntax:
    content: public abstract byte[] CreateKeyExchange (byte[] data, Type symAlgType);
    parameters:
    - id: data
      type: System.Byte[]
      description: "The secret information to be passed in the key exchange."
    - id: symAlgType
      type: System.Type
      description: "This parameter is not used in the current version."
    return:
      type: System.Byte[]
      description: "The encrypted key exchange data to be sent to the intended recipient."
  overload: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters
  id: Parameters
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  langs:
  - csharp
  name: Parameters
  nameWithType: AsymmetricKeyExchangeFormatter.Parameters
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, gets the parameters for the asymmetric key exchange."
  syntax:
    content: public abstract string Parameters { get; }
    return:
      type: System.String
      description: "A string in XML format containing the parameters of the asymmetric key exchange operation."
  overload: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  langs:
  - csharp
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: AsymmetricKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "When overridden in a derived class, sets the public key to use for encrypting the secret information."
  remarks: "You must set a key before calling a <xref:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange%2A> implementation."
  syntax:
    content: public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);
    parameters:
    - id: key
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "The instance of the implementation of <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref> that holds the public key."
  overload: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: AsymmetricKeyExchangeFormatter()
  nameWithType: AsymmetricKeyExchangeFormatter.AsymmetricKeyExchangeFormatter()
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.AsymmetricKeyExchangeFormatter()
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange(Byte[])
  nameWithType: AsymmetricKeyExchangeFormatter.CreateKeyExchange(Byte[])
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange(Byte[],Type)
  nameWithType: AsymmetricKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: Parameters
  nameWithType: AsymmetricKeyExchangeFormatter.Parameters
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: AsymmetricKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor*
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: AsymmetricKeyExchangeFormatter
  nameWithType: AsymmetricKeyExchangeFormatter.AsymmetricKeyExchangeFormatter
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange*
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange
  nameWithType: AsymmetricKeyExchangeFormatter.CreateKeyExchange
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters*
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: Parameters
  nameWithType: AsymmetricKeyExchangeFormatter.Parameters
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey*
  parent: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: SetKey
  nameWithType: AsymmetricKeyExchangeFormatter.SetKey
