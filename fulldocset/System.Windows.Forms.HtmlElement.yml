### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.HtmlElement
  id: HtmlElement
  children:
  - System.Windows.Forms.HtmlElement.All
  - System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlElement.CanHaveChildren
  - System.Windows.Forms.HtmlElement.Children
  - System.Windows.Forms.HtmlElement.Click
  - System.Windows.Forms.HtmlElement.ClientRectangle
  - System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlElement.Document
  - System.Windows.Forms.HtmlElement.DomElement
  - System.Windows.Forms.HtmlElement.DoubleClick
  - System.Windows.Forms.HtmlElement.Drag
  - System.Windows.Forms.HtmlElement.DragEnd
  - System.Windows.Forms.HtmlElement.DragLeave
  - System.Windows.Forms.HtmlElement.DragOver
  - System.Windows.Forms.HtmlElement.Enabled
  - System.Windows.Forms.HtmlElement.Equals(System.Object)
  - System.Windows.Forms.HtmlElement.FirstChild
  - System.Windows.Forms.HtmlElement.Focus
  - System.Windows.Forms.HtmlElement.Focusing
  - System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  - System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  - System.Windows.Forms.HtmlElement.GetHashCode
  - System.Windows.Forms.HtmlElement.GotFocus
  - System.Windows.Forms.HtmlElement.Id
  - System.Windows.Forms.HtmlElement.InnerHtml
  - System.Windows.Forms.HtmlElement.InnerText
  - System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  - System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  - System.Windows.Forms.HtmlElement.KeyDown
  - System.Windows.Forms.HtmlElement.KeyPress
  - System.Windows.Forms.HtmlElement.KeyUp
  - System.Windows.Forms.HtmlElement.LosingFocus
  - System.Windows.Forms.HtmlElement.LostFocus
  - System.Windows.Forms.HtmlElement.MouseDown
  - System.Windows.Forms.HtmlElement.MouseEnter
  - System.Windows.Forms.HtmlElement.MouseLeave
  - System.Windows.Forms.HtmlElement.MouseMove
  - System.Windows.Forms.HtmlElement.MouseOver
  - System.Windows.Forms.HtmlElement.MouseUp
  - System.Windows.Forms.HtmlElement.Name
  - System.Windows.Forms.HtmlElement.NextSibling
  - System.Windows.Forms.HtmlElement.OffsetParent
  - System.Windows.Forms.HtmlElement.OffsetRectangle
  - System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.OuterHtml
  - System.Windows.Forms.HtmlElement.OuterText
  - System.Windows.Forms.HtmlElement.Parent
  - System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  - System.Windows.Forms.HtmlElement.RemoveFocus
  - System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  - System.Windows.Forms.HtmlElement.ScrollLeft
  - System.Windows.Forms.HtmlElement.ScrollRectangle
  - System.Windows.Forms.HtmlElement.ScrollTop
  - System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  - System.Windows.Forms.HtmlElement.Style
  - System.Windows.Forms.HtmlElement.TabIndex
  - System.Windows.Forms.HtmlElement.TagName
  langs:
  - csharp
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
  type: Class
  summary: "Represents an HTML element inside of a Web page."
  remarks: "HtmlElement represents any possible type of element in an HTML document, such as `BODY`, `TABLE`, and `FORM`, among others. The class exposes the most common properties you can expect to find on all elements.       Most elements can have *child elements*: other HTML elements that are placed underneath them. Use the <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> property to test whether a given element has children, and the <xref:System.Windows.Forms.HtmlElement.Children%2A> collection to iterate through them. The <xref:System.Windows.Forms.HtmlElement.Parent%2A> property returns the HtmlElement in which the current element is nested.       You often need access to attributes, properties, and methods on the underlying element that are not directly exposed by HtmlElement, such as the `SRC` attribute on an `IMG` element or the `Submit` method on a `FORM`. The <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> and <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> methods enable you to retrieve and alter any attribute or property on a specific element, while <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> provides access to any methods not exposed in the managed Document Object Model (DOM). If your application has unmanaged code permission, you can also access unexposed properties and methods with the <xref:System.Windows.Forms.HtmlElement.DomElement%2A> attribute.       Use the <xref:System.Windows.Forms.HtmlElement.TagName%2A> property to test whether an element is of a specific type.       Any HTML document can be modified at run time. You can create new HtmlElement objects with the <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> method of <xref:System.Windows.Forms.HtmlDocument>, and add them to another element using the <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> or <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> methods. You can also create the elements as HTML tags and assign them to an existing element&quot;s <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> property."
  example:
  - "The following code example shows how to examine an arbitrary HTML document and derive a string describing the HTML elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. This code example requires that your application hosts a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public sealed class HtmlElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.All
  id: All
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: All
  nameWithType: HtmlElement.All
  fullName: System.Windows.Forms.HtmlElement.All
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets an <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;></xref> of all elements underneath the current element."
  remarks: "To access only those elements which have the current element as their direct parent, use the <xref:System.Windows.Forms.HtmlElement.Children%2A> collection instead.       Elements in this collection will not necessarily be returned in source order."
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection All { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "A collection of all elements that are direct or indirect children of the current element. If the current element is a `TABLE`, for example, All will return every `TH`, `TR`, and `TD` element within the table, as well as any other elements, such as `DIV` and `SPAN` elements, contained within the cells."
  overload: System.Windows.Forms.HtmlElement.All*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  id: AppendChild(System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: AppendChild(HtmlElement)
  nameWithType: HtmlElement.AppendChild(HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.AppendChild(HtmlElement)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Adds an element to another element&quot;s subtree."
  remarks: "The HTML Document Object Model (DOM) enables you to alter the run-time contents of an HTML file in a number of ways. Use AppendChild to add new elements to an existing document, or to move an element on the page.       If an element has already been parented, appending an element to another element will automatically remove that element from its previous parent.       Any additions made to a document at run-time using AppendChild will not be persisted when you call the <xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A> method on the <xref:System.Windows.Forms.WebBrowser> control."
  example:
  - "The following code example creates a new hyperlink using the <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> method and adds it to end of a page using `AppendChild` on the `BODY` element. The example requires that your application contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);
    parameters:
    - id: newElement
      type: System.Windows.Forms.HtmlElement
      description: "The <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref> to append to this location in the tree."
    return:
      type: System.Windows.Forms.HtmlElement
      description: "The element after it has been added to the tree."
  overload: System.Windows.Forms.HtmlElement.AppendChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  id: AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.AttachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Adds an event handler for a named event on the HTML Document Object Model (DOM)."
  remarks: "The Managed Document Object Model (DOM) exposes only a select number of events. Most of the unexposed events are only defined for specific types of elements; such as the `submit` event, which is valid only on `FORM` elements. Use AttachEventHandler to add an event handler to these unexposed events.       You should not attach an event to the document or one of its objects until the document has completed loading. The earliest you should call this method is in the <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> event of the <xref:System.Windows.Forms.WebBrowser> control.       For more information about the available unmanaged events, see [Accessing Unexposed Members on the Managed HTML Document Object Model](~/add/includes/ajax-current-ext-md.md) and the IHTMLElement interfaces: [IHTMLElement](http://go.microsoft.com/fwlink/?LinkId=104876), [IHTMLElement2](http://go.microsoft.com/fwlink/?LinkId=104877), [IHTMLElement3](http://go.microsoft.com/fwlink/?LinkId=104878), [IHTMLElement4](http://go.microsoft.com/fwlink/?LinkId=104879)."
  syntax:
    content: public void AttachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "The name of the event you want to handle."
    - id: eventHandler
      type: System.EventHandler
      description: "The managed code that handles the event."
  overload: System.Windows.Forms.HtmlElement.AttachEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren
  id: CanHaveChildren
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
  fullName: System.Windows.Forms.HtmlElement.CanHaveChildren
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether this element can have child elements."
  remarks: "Some elements, such as `IMG` and `SCRIPT`, cannot have any children. Use this property before you call <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> or <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> on an arbitrary element."
  example:
  - "The following code example handles the <xref:System.Windows.Forms.HtmlElement.Click> event on <xref:System.Windows.Forms.HtmlDocument>. If an element was not previous selected using a mouse click, the code assigns the element to a private class variable named `MoveElement`. If an element was selected, the code attempts to append it to the element that was just clicked. This code example requires that your application hosts a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, and that you have already added an event handler for the <xref:System.Windows.Forms.HtmlElement.Click> event on <xref:System.Windows.Forms.HtmlDocument>.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#2](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#2)]\n [!code-cs[System.Windows.Forms.HtmlElement#2](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#2)]"
  syntax:
    content: public bool CanHaveChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if element can have child elements; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlElement.CanHaveChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Children
  id: Children
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Children
  nameWithType: HtmlElement.Children
  fullName: System.Windows.Forms.HtmlElement.Children
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets an <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;></xref> of all children of the current element."
  remarks: "Many of the elements inside of an HTML file can have other HTML elements underneath them. The Children collection provides a simple mechanism for exploring the tree structure of a document.       Children only exposes elements whose direct parent is the current element. If you have an <xref:System.Windows.Forms.HtmlElement> for a `TABLE` element, Children will give you all of the `TR` (row) elements inside of the `TABLE`. To retrieve the `TD` (cell) elements contained inside of the `TR` elements, you will need to use either the Children collection on each individual `TR` element, or use the <xref:System.Windows.Forms.HtmlElement.All%2A> collection on <xref:System.Windows.Forms.HtmlElement>.       Elements in this collection are not guaranteed to be in source order.       If <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> is `false`, `Children` will always be empty."
  example:
  - "The following code example examines an arbitrary HTML document and derive a string describing the elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. It does this by searching the `Children` collection of all elements recursively, starting with the HTML element at the top of the document. This code example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection Children { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "A collection of all <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref> objects that have the current element as a parent."
  overload: System.Windows.Forms.HtmlElement.Children*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Click
  id: Click
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Click
  nameWithType: HtmlElement.Click
  fullName: System.Windows.Forms.HtmlElement.Click
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user clicks on the element with the left mouse button."
  remarks: "You can cancel the default action for a Click event on an element by setting the <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       A Click event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       If the user clicks on an element that does not currently have input focus, the Click event will occur after the <xref:System.Windows.Forms.HtmlElement.Focusing> event, but before the <xref:System.Windows.Forms.HtmlElement.LostFocus> event for that element.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Click event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Click event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#432](~/add/codesnippet/csharp/e-system.windows.forms.h_5_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#432](~/add/codesnippet/visualbasic/e-system.windows.forms.h_5_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Click;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ClientRectangle
  id: ClientRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
  fullName: System.Windows.Forms.HtmlElement.ClientRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the bounds of the client area of the element in the HTML document."
  remarks: "ClientRectangle will return position data only for elements that have been assigned an explicit height and width, or elements that use absolute positioning. A document is absolutely positioned if its position style is set to `absolute`, after which it can be positioned at any coordinate on the HTML page."
  example:
  - "Assume you have loaded the following HTML page into a hosted instance of the <xref:System.Windows.Forms.WebBrowser> control.  \n  \n```  \n<HTML>  \n  \n    <BODY>  \n  \n        <DIV id=\"div1\" style=\"position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;\">  \n            Edit this text.  \n        </DIV>  \n  \n    </BODY>  \n  \n</HTML>  \n```  \n  \n The following code example demonstrates retrieving this element and expanding its dimensions if the client area is less than 400 pixels wide by 50 pixels high, and also sets the `DIV` to the `contentEditable` state so that the user can input text.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#3](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#3)]\n [!code-cs[System.Windows.Forms.HtmlElement#3](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#3)]"
  syntax:
    content: public System.Drawing.Rectangle ClientRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "The client area occupied by the element, minus any area taken by borders and scroll bars. To obtain the position and dimensions of the element inclusive of its adornments, use <xref:System.Windows.Forms.HtmlElement.OffsetRectangle*> instead."
  overload: System.Windows.Forms.HtmlElement.ClientRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  id: DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.DetachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Removes an event handler from a named event on the HTML Document Object Model (DOM)."
  syntax:
    content: public void DetachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "The name of the event you want to handle."
    - id: eventHandler
      type: System.EventHandler
      description: "The managed code that handles the event."
  overload: System.Windows.Forms.HtmlElement.DetachEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Document
  id: Document
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Document
  nameWithType: HtmlElement.Document
  fullName: System.Windows.Forms.HtmlElement.Document
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the <xref href=&quot;System.Windows.Forms.HtmlDocument&quot;></xref> to which this element belongs."
  remarks: "Some HTML pages can host frames using the `FRAMESET` tags. In this case, each individual `FRAME` element will contain its own instance of <xref:System.Windows.Forms.HtmlDocument>. This property is most useful when you have received a reference to an element in an event handler from the <xref:System.Windows.Forms.HtmlElementEventArgs>, and need to perform some action on the document in which the element resides."
  syntax:
    content: public System.Windows.Forms.HtmlDocument Document { get; }
    return:
      type: System.Windows.Forms.HtmlDocument
      description: "The parent document of this element."
  overload: System.Windows.Forms.HtmlElement.Document*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DomElement
  id: DomElement
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DomElement
  nameWithType: HtmlElement.DomElement
  fullName: System.Windows.Forms.HtmlElement.DomElement
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets an unmanaged interface pointer for this element."
  remarks: "<xref:System.Windows.Forms.HtmlElement> is a wrapper for the Internet Explorer Document Object Model (DOM), which is written using the Component Object Model (COM). If you need to access unexposed properties or methods on the underlying COM interfaces, such as `IHTMLElement`, you can use this object to query for them.       In order to use the unmanaged interfaces, you will need to import the MSHTML library (mshtml.dll) into your application. However, you can also execute unexposed properties and methods using the `Invoke` method."
  example:
  - "The following code example uses unmanaged interfaces to take the currently selected text and convert it into a hyperlink, with the URL chosen by the user. This code was written under the assumption that your form has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, and that you have added the unmanaged MSHTML library as a reference to your project.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#4](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#4)]\n [!code-cs[System.Windows.Forms.HtmlElement#4](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#4)]"
  syntax:
    content: public object DomElement { get; }
    return:
      type: System.Object
      description: "The COM `IUnknown` pointer for the element, which you can cast to one of the HTML element interfaces, such as `IHTMLElement`."
  overload: System.Windows.Forms.HtmlElement.DomElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DoubleClick
  id: DoubleClick
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DoubleClick
  nameWithType: HtmlElement.DoubleClick
  fullName: System.Windows.Forms.HtmlElement.DoubleClick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user clicks the left mouse button over an element twice, in rapid succession."
  remarks: "A double-click is determined by the mouse settings of the user&quot;s operating system. The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.       You can cancel the default action for a DoubleClick event on an element by setting the <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       A DoubleClick event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DoubleClick event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#433](~/add/codesnippet/csharp/e-system.windows.forms.h_26_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#433](~/add/codesnippet/visualbasic/e-system.windows.forms.h_26_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Drag
  id: Drag
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Drag
  nameWithType: HtmlElement.Drag
  fullName: System.Windows.Forms.HtmlElement.Drag
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user drags text to various locations."
  remarks: "This event occurs when text is dragged to the following locations:      -   Within or between HTML pages hosted in the <xref:System.Windows.Forms.WebBrowser> control or Internet Explorer      -   To another application      -   To the Windows desktop       You can cancel the default action for a Drag event on an element by setting the <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       A Drag event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Drag event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Drag event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#434](~/add/codesnippet/csharp/e-system.windows.forms.h_11_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#434](~/add/codesnippet/visualbasic/e-system.windows.forms.h_11_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Drag;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragEnd
  id: DragEnd
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragEnd
  nameWithType: HtmlElement.DragEnd
  fullName: System.Windows.Forms.HtmlElement.DragEnd
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when a user finishes a drag operation."
  remarks: "You can cancel the default action for a DragEnd event on an element by setting the <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       A DragEnd event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragEnd event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragEnd event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#435](~/add/codesnippet/csharp/e-system.windows.forms.h_35_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#435](~/add/codesnippet/visualbasic/e-system.windows.forms.h_35_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragEnd;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragLeave
  id: DragLeave
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: HtmlElement.DragLeave
  fullName: System.Windows.Forms.HtmlElement.DragLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user is no longer dragging an item over this element."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#436](~/add/codesnippet/csharp/e-system.windows.forms.h_21_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#436](~/add/codesnippet/visualbasic/e-system.windows.forms.h_21_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragOver
  id: DragOver
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragOver
  nameWithType: HtmlElement.DragOver
  fullName: System.Windows.Forms.HtmlElement.DragOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user drags text over the element."
  remarks: "You can cancel the default action for a DragOver event on an element by setting the <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       A DragOver event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#437](~/add/codesnippet/csharp/e-system.windows.forms.h_31_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#437](~/add/codesnippet/visualbasic/e-system.windows.forms.h_31_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Enabled
  id: Enabled
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Enabled
  nameWithType: HtmlElement.Enabled
  fullName: System.Windows.Forms.HtmlElement.Enabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets whether the user can input data into this element."
  remarks: "For `FORM` elements such as text boxes and radio buttons, setting Enabled to `false` will prevent the user from using these form fields. For other elements, such as `DIV` or `SPAN`, setting Enabled to `false` will cause all text within the element to appear shaded; however, the text will still be selectable. To cancel selection, add an event handler for the unexposed `onselectstart` event using the <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A> method."
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the element allows user input; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlElement.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: HtmlElement.Equals(Object)
  fullName: System.Windows.Forms.HtmlElement.Equals(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Tests if the supplied object is equal to the current element."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to test for equality."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>obj</code> is an <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlElement.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.FirstChild
  id: FirstChild
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
  fullName: System.Windows.Forms.HtmlElement.FirstChild
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the next element below this element in the document tree."
  remarks: "Use FirstChild in conjunction with <xref:System.Windows.Forms.HtmlElement.NextSibling%2A> to walk the document tree for an HTML document."
  syntax:
    content: public System.Windows.Forms.HtmlElement FirstChild { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "An <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref> representing the first element contained underneath the current element, in source order."
  overload: System.Windows.Forms.HtmlElement.FirstChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Focus
  id: Focus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Focus()
  nameWithType: HtmlElement.Focus()
  fullName: System.Windows.Forms.HtmlElement.Focus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Puts user input focus on the current element."
  remarks: "Setting the focus on an element both gives that element focus and makes it the active element; for example, the element that has focus will be returned by the <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> property of <xref:System.Windows.Forms.HtmlDocument>.       Any key strokes entered by a user after Focus has been called will be sent to that element."
  syntax:
    content: public void Focus ();
    parameters: []
  overload: System.Windows.Forms.HtmlElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Focusing
  id: Focusing
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Focusing
  nameWithType: HtmlElement.Focusing
  fullName: System.Windows.Forms.HtmlElement.Focusing
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the element first receives user input focus."
  remarks: "An element that had focus before the user switched to another application using the taskbar or the ALT+TAB keys will receive the Focusing and <xref:System.Windows.Forms.HtmlElement.GotFocus> events again when the user switches back to your application.       You cannot cancel the default behavior of this event. To remove focus from an element, call <xref:System.Windows.Forms.HtmlElement.Focus%2A> on a different element from within the <xref:System.Windows.Forms.HtmlElement.GotFocus> event.       A Focusing event on an element will also occur on that element&quot;s parents and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Focusing event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Focusing event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#438](~/add/codesnippet/csharp/e-system.windows.forms.h_10_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#438](~/add/codesnippet/visualbasic/e-system.windows.forms.h_10_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Focusing;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetAttribute(String)
  nameWithType: HtmlElement.GetAttribute(String)
  fullName: System.Windows.Forms.HtmlElement.GetAttribute(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the value of the named attribute on the element."
  remarks: "An attribute in HTML is any valid name/value pair for that element. <xref:System.Windows.Forms.HtmlElement> exposes only those attributes that are common to all elements, leaving out those that only apply to certain types of elements; `SRC` is a predefined attribute for the `IMG` tag, for example, but not for the `DIV` tag. Use GetAttribute and <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> to manipulate attributes not exposed on the managed Document Object Model (DOM).       GetAttribute and <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> are case-insensitive."
  example:
  - "The following code example retrieves all of the `META` tags within an HTML document, using GetAttribute to find the `META` tag with the name `Description`. The example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/visualbasic/HtmlDocumentProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/csharp/HtmlDocumentProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public string GetAttribute (string attributeName);
    parameters:
    - id: attributeName
      type: System.String
      description: "The name of the attribute. This argument is case-insensitive."
    return:
      type: System.String
      description: "The value of this attribute on the element, as a <xref:System.String> value. If the specified attribute does not exist on this element, returns an empty string."
  overload: System.Windows.Forms.HtmlElement.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: HtmlElement.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlElement.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves a collection of elements represented in HTML by the specified `HTML` tag."
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);
    parameters:
    - id: tagName
      type: System.String
      description: "The name of the tag whose <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref> objects you wish to retrieve."
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "An <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;></xref> containing all elements whose `HTML` tag name is equal to <code>tagName</code>."
  overload: System.Windows.Forms.HtmlElement.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetHashCode
  id: GetHashCode
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: HtmlElement.GetHashCode()
  fullName: System.Windows.Forms.HtmlElement.GetHashCode()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Serves as a hash function for a particular type."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "A hash code for the current <xref:System.Object>."
  overload: System.Windows.Forms.HtmlElement.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GotFocus
  id: GotFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: HtmlElement.GotFocus
  fullName: System.Windows.Forms.HtmlElement.GotFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the element has received user input focus."
  remarks: "You can neither cancel this event&quot;s default behavior, nor prevent it from bubbling. To remove focus from an element, call <xref:System.Windows.Forms.HtmlElement.Focus%2A> on a different element from within the GotFocus event.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "Save the following HTML code into a file, and load the file into a <xref:System.Windows.Forms.WebBrowser> control in a Windows Forms project.  \n  \n```  \n<HTML>  \n    <BODY>  \n        <FORM name=\"form1\">  \n            <INPUT type=\"text\" size=20 name=\"text1\">  \n            <INPUT type=\"text\" size=20 name=\"text2\">  \n            <INPUT type=\"text\" size=20 name=\"text3\">  \n        </FORM>  \n    </BODY>  \n</HTML>  \n```  \n  \n The following code example prevents the next `INPUT` element in the tab order from receiving user input focus if the previous element contains less than five characters. The example requires that the previously mentioned HTML file is loaded into an instance of the <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#15](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#15)]\n [!code-cs[System.Windows.Forms.HtmlElement#15](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#15)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler GotFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Id
  id: Id
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Id
  nameWithType: HtmlElement.Id
  fullName: System.Windows.Forms.HtmlElement.Id
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a label by which to identify the element."
  remarks: "Id must be unique; you cannot have two elements with the same Id inside of the same document. Use the <xref:System.Windows.Forms.HtmlElement.Name%2A> property to give the same identifier to a group of logically related elements."
  syntax:
    content: public string Id { get; set; }
    return:
      type: System.String
      description: "The unique identifier for the element."
  overload: System.Windows.Forms.HtmlElement.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InnerHtml
  id: InnerHtml
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
  fullName: System.Windows.Forms.HtmlElement.InnerHtml
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the HTML markup underneath this element."
  remarks: "There are several ways to add new elements to an existing HTML page, such as the <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> and <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> methods. Using InnerHtml is often the fastest way to add new content when you have to set many attributes or styles on your new elements.       InnerHtml differs from <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> in that InnerHtml will not include the HTML that represents the object you are calling. See <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> for more information about the difference between these two properties.       Setting InnerHtml destroys any children previously appended to the element. If you retrieve an element from the DOM and then assign new HTML to its parents&quot; InnerHtml property, your reference to that element will be useless, and its behavior when it calls its properties and methods is undefined.       For some elements, setting InnerHtml is not a valid operation. Some HTML tags have no closing tag, such as the `IMG` tag, and therefore cannot contain nested elements. Some tags, such as the `SCRIPT` tag, can only contain text content; setting InnerHtml will result in an error. For both types of tags, the <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> property will return `false`. However, you also cannot set InnerHtml on `TABLE` and `TR` elements, as assigning malformed HTML to these elements could corrupt the rendering of the document. Use <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> or the `insertRow` and `insertCell` methods on the unmanaged `IHTMLTable` interface to add rows and cells to a `TABLE`.       If you need only to assign text to an element and not HTML markup, use the <xref:System.Windows.Forms.HtmlElement.InnerText%2A> property instead.       Assigning a value to InnerHtml will destroy any text values previously assigned using <xref:System.Windows.Forms.HtmlElement.InnerText%2A>."
  syntax:
    content: public string InnerHtml { get; set; }
    return:
      type: System.String
      description: "The HTML markup that defines the child elements of the current element."
  overload: System.Windows.Forms.HtmlElement.InnerHtml*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Creating child elements on this element is not allowed."
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InnerText
  id: InnerText
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InnerText
  nameWithType: HtmlElement.InnerText
  fullName: System.Windows.Forms.HtmlElement.InnerText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the text assigned to the element."
  remarks: "If you attempt to assign HTML to an element with InnerText, the HTML code will display as literals in the document, just as if you were viewing HTML within a text file. If you assign HTML to an element using the <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> property, InnerText will return all of the text in that HTML with the markup removed.       Assigning a value to InnerText will destroy any child elements that belong to the element."
  example:
  - "The following code creates a new hyperlink using <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>, and assigns text to the link using the InnerText property.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public string InnerText { get; set; }
    return:
      type: System.String
      description: "The element&quot;s text, absent any HTML markup. If the element contains child elements, only the text in those child elements will be preserved."
  overload: System.Windows.Forms.HtmlElement.InnerText*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The specified element cannot contain text (for example, an `IMG` element)."
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  id: InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  nameWithType: HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Insert a new element into the Document Object Model (DOM)."
  remarks: "Do not call this method until after the <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> event on the <xref:System.Windows.Forms.WebBrowser> control has occurred. Calling this method before then can result in an exception, as the document will not have finished loading.       Whether a value of <xref:System.Windows.Forms.HtmlElementInsertionOrientation> is valid will depend on the type of the element. For example, <xref:System.Windows.Forms.HtmlElementInsertionOrientation> is valid if the element is a `DIV`, but not if it is a `SCRIPT` or `IMG` element, neither of which can contain child elements."
  example:
  - "The following code example inserts a `DIV` element into the top of every page that users view outside of the ADatum.com server. The example requires that your form contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`. Your sample must also import the namespace <xref:System.Text.RegularExpressions>.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#9](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#9)]\n [!code-cs[System.Windows.Forms.HtmlElement#9](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#9)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);
    parameters:
    - id: orient
      type: System.Windows.Forms.HtmlElementInsertionOrientation
      description: "Where to insert this element in relation to the current element."
    - id: newElement
      type: System.Windows.Forms.HtmlElement
      description: "The new element to insert."
    return:
      type: System.Windows.Forms.HtmlElement
      description: "The <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref> that was just inserted. If insertion failed, this will return <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlElement.InsertAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  id: InvokeMember(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InvokeMember(String)
  nameWithType: HtmlElement.InvokeMember(String)
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executes an unexposed method on the underlying DOM element of this element."
  remarks: "This method can be used to call methods from the Document Object Model (DOM) that do not have equivalents in managed code. Use this version of InvokeMember to execute unexposed methods that take no arguments. For an example, see <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>."
  syntax:
    content: public object InvokeMember (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: "The name of the property or method to invoke."
    return:
      type: System.Object
      description: "The element returned by this method, represented as an <xref:System.Object>. If this <xref:System.Object> is another HTML element, and you have a reference to the unmanaged MSHTML library added to your project, you can cast it to its appropriate unmanaged interface."
  overload: System.Windows.Forms.HtmlElement.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  id: InvokeMember(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InvokeMember(String,Object[])
  nameWithType: HtmlElement.InvokeMember(String,Object[])
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String,Object[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Executes a function defined in the current HTML page by a scripting language."
  remarks: "This method can be used to call methods from the Document Object Model (DOM) that do not have equivalents in managed code. All arguments supplied to InvokeMember will be converted to Win32 `VARIANT` data types before they are passed to the named scripting function."
  example:
  - "The following code example gets a `TABLE` called `dataTable` and uses the unexposed `moveRow` method to move a row from the end of the table to the beginning.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#11](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#11)]\n [!code-cs[System.Windows.Forms.HtmlElement#11](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#11)]"
  syntax:
    content: public object InvokeMember (string methodName, object[] parameter);
    parameters:
    - id: methodName
      type: System.String
      description: "The name of the property or method to invoke."
    - id: parameter
      type: System.Object[]
      description: "A list of parameters to pass."
    return:
      type: System.Object
      description: "The element returned by the function, represented as an <xref:System.Object>. If this <xref:System.Object> is another HTML element, and you have a reference to the unmanaged MSHTML library added to your project, you can cast it to its appropriate unmanaged interface."
  overload: System.Windows.Forms.HtmlElement.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyDown
  id: KeyDown
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: HtmlElement.KeyDown
  fullName: System.Windows.Forms.HtmlElement.KeyDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user presses a key on the keyboard."
  remarks: "KeyDown occurs before <xref:System.Windows.Forms.HtmlElement.KeyPress>, which in turns occurs before <xref:System.Windows.Forms.HtmlElement.KeyUp>.       You can cancel the default action for a KeyDown event on an element by setting the <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       A KeyDown event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#442](~/add/codesnippet/csharp/e-system.windows.forms.h_1_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#442](~/add/codesnippet/visualbasic/e-system.windows.forms.h_1_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyPress
  id: KeyPress
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyPress
  nameWithType: HtmlElement.KeyPress
  fullName: System.Windows.Forms.HtmlElement.KeyPress
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user presses and releases a key on the keyboard."
  remarks: "KeyPress occurs after <xref:System.Windows.Forms.HtmlElement.KeyDown> and before <xref:System.Windows.Forms.HtmlElement.KeyUp>.       You can cancel the default action for a KeyPress event on an element by setting the <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       A KeyPress event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyPress event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyPress event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#443](~/add/codesnippet/csharp/e-system.windows.forms.h_16_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#443](~/add/codesnippet/visualbasic/e-system.windows.forms.h_16_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyPress;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyUp
  id: KeyUp
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: HtmlElement.KeyUp
  fullName: System.Windows.Forms.HtmlElement.KeyUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user releases a key on the keyboard."
  remarks: "KeyUp occurs after <xref:System.Windows.Forms.HtmlElement.KeyPress>, which occurs after <xref:System.Windows.Forms.HtmlElement.KeyDown>.       You cannot cancel this event.       A KeyUp event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#444](~/add/codesnippet/csharp/e-system.windows.forms.h_3_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#444](~/add/codesnippet/visualbasic/e-system.windows.forms.h_3_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.LosingFocus
  id: LosingFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: LosingFocus
  nameWithType: HtmlElement.LosingFocus
  fullName: System.Windows.Forms.HtmlElement.LosingFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the element is losing user input focus."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LosingFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the LosingFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#440](~/add/codesnippet/csharp/e-system.windows.forms.h_12_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#440](~/add/codesnippet/visualbasic/e-system.windows.forms.h_12_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.LostFocus
  id: LostFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: HtmlElement.LostFocus
  fullName: System.Windows.Forms.HtmlElement.LostFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the element has lost user input focus."
  remarks: "An element will no longer receive key stroke events after LostFocus occurs until it is given focus again, either by the user selecting it on the page or by the application calling the <xref:System.Windows.Forms.HtmlElement.Focus%2A> method on that element.       You cannot cancel this event.       An LostFocus event on an element will also occur on that element&quot;s parents and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LostFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the LostFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#441](~/add/codesnippet/csharp/e-system.windows.forms.h_0_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#441](~/add/codesnippet/visualbasic/e-system.windows.forms.h_0_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LostFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseDown
  id: MouseDown
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: HtmlElement.MouseDown
  fullName: System.Windows.Forms.HtmlElement.MouseDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user presses a mouse button."
  remarks: "You can cancel the default action for a MouseDown event on an element by setting the <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       A MouseDown event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#446](~/add/codesnippet/csharp/e-system.windows.forms.h_32_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#446](~/add/codesnippet/visualbasic/e-system.windows.forms.h_32_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: HtmlElement.MouseEnter
  fullName: System.Windows.Forms.HtmlElement.MouseEnter
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user first moves the mouse cursor over the current element."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseEnter event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseEnter event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#449](~/add/codesnippet/csharp/e-system.windows.forms.h_28_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#449](~/add/codesnippet/visualbasic/e-system.windows.forms.h_28_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: HtmlElement.MouseLeave
  fullName: System.Windows.Forms.HtmlElement.MouseLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user moves the mouse cursor off of the current element."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#450](~/add/codesnippet/csharp/e-system.windows.forms.h_33_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#450](~/add/codesnippet/visualbasic/e-system.windows.forms.h_33_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseMove
  id: MouseMove
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: HtmlElement.MouseMove
  fullName: System.Windows.Forms.HtmlElement.MouseMove
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user moves the mouse cursor across the element."
  remarks: "You cannot cancel this event.       A MouseMove event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseMove event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseMove event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#445](~/add/codesnippet/csharp/e-system.windows.forms.h_15_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#445](~/add/codesnippet/visualbasic/e-system.windows.forms.h_15_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseMove;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseOver
  id: MouseOver
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseOver
  nameWithType: HtmlElement.MouseOver
  fullName: System.Windows.Forms.HtmlElement.MouseOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the mouse cursor enters the bounds of the element."
  remarks: "You can cancel the default action for a MouseOver event on an element by setting the <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       A MouseOver event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#447](~/add/codesnippet/csharp/e-system.windows.forms.h_29_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#447](~/add/codesnippet/visualbasic/e-system.windows.forms.h_29_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseUp
  id: MouseUp
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: HtmlElement.MouseUp
  fullName: System.Windows.Forms.HtmlElement.MouseUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the user releases a mouse button."
  remarks: "You can cancel the default action for a MouseUp event on an element by setting the <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       A MouseUp event on an element will also occur on that element&quot;s parent elements and on the <xref:System.Windows.Forms.HtmlDocument> class itself, unless you set the <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> property of the <xref:System.Windows.Forms.HtmlElementEventArgs> class to `true`.       For more information about the difference between canceling event bubbling and canceling the default action on an event, see [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#448](~/add/codesnippet/csharp/e-system.windows.forms.h_17_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#448](~/add/codesnippet/visualbasic/e-system.windows.forms.h_17_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Name
  id: Name
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Name
  nameWithType: HtmlElement.Name
  fullName: System.Windows.Forms.HtmlElement.Name
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the name of the element."
  remarks: "Use the Name property to retrieve elements from a document using the <xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A> method on the <xref:System.Windows.Forms.HtmlElement.All%2A> property of <xref:System.Windows.Forms.HtmlDocument>.       When applied to `INPUT` elements, Name defines the variable name for that element&quot;s data when its form is submitted to the server."
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String> representing the element&quot;s name."
  overload: System.Windows.Forms.HtmlElement.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.NextSibling
  id: NextSibling
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
  fullName: System.Windows.Forms.HtmlElement.NextSibling
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the next element at the same level as this element in the document tree."
  remarks: "Use NextSibling in conjunction with <xref:System.Windows.Forms.HtmlElement.FirstChild%2A> to walk the document tree for an HTML element."
  syntax:
    content: public System.Windows.Forms.HtmlElement NextSibling { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "An <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref> representing the element to the right of the current element."
  overload: System.Windows.Forms.HtmlElement.NextSibling*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OffsetParent
  id: OffsetParent
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
  fullName: System.Windows.Forms.HtmlElement.OffsetParent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the element from which <xref:System.Windows.Forms.HtmlElement.OffsetRectangle*> is calculated."
  remarks: "Elements can be positioned on an HTML page in one of three ways: default flow positioning; relative positioning, in which the element is offset by a fixed amount relative to its parent; and absolute positioning, in which the element is given a fixed coordinate position relative to the upper-left corner of the document.       When a document&quot;s elements use relative or absolute positioning, you can use `OffsetParent` to calculate an element&quot;s coordinate position in the client area.       For more information about element positioning in HTML, see [About Element Positioning](http://msdn.microsoft.com/library/ms533005.aspx)."
  example:
  - "The following code example shows how OffsetParent and <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> differ for `span1`, `span2` and `span3`:  \n  \n```  \n<HTML>  \n    <BODY id=\"documentBody\">  \n  \n        <DIV id=\"div1\">  \n            <SPAN id=\"span1\">Placeholder text 1.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div2\" style=\"position:relative;top:100px;left:100px;\">  \n            <SPAN id=\"span2\">Placeholder text 2.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div3\" style=\"position:absolute;top:200px;left:200px;\">  \n            <DIV id=\"div4\" style=\"position:relative;top:100px;left:100px;\">  \n                <SPAN id=\"span3\">Placeholder text 3.</SPAN>  \n            </DIV>  \n        </DIV>  \n  \n    </BODY>  \n</HTML>  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement OffsetParent { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "The element from which the offsets are calculated.       If an element&quot;s parent or another element in the element&quot;s hierarchy uses relative or absolute positioning, <xref uid=&quot;langword_csharp_OffsetParent&quot; name=&quot;OffsetParent&quot; href=&quot;&quot;></xref> will be the first relatively or absolutely positioned element in which the current element is nested. If none of the elements above the current element are absolutely or relatively positioned, <xref uid=&quot;langword_csharp_OffsetParent&quot; name=&quot;OffsetParent&quot; href=&quot;&quot;></xref> will be the `BODY` tag of the document."
  overload: System.Windows.Forms.HtmlElement.OffsetParent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle
  id: OffsetRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
  fullName: System.Windows.Forms.HtmlElement.OffsetRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the location of an element relative to its parent."
  remarks: "Elements can be positioned on an HTML page in one of three ways:      -   Default flow positioning.      -   Relative positioning, in which the element is offset by a fixed amount relative to its parent.      -   Absolute positioning, in which the element is given a fixed coordinate position relative to the upper-left corner of the document.       For more information about element positioning in HTML, see [About Element Positioning](http://msdn.microsoft.com/library/ms533005.aspx)."
  example:
  - "The following code example shows how <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> and OffsetRectangle differ for `span1`, `span2` and `span3`:  \n  \n```  \n<HTML>  \n    <BODY id=\"documentBody\">  \n  \n        <DIV id=\"div1\">  \n            <SPAN id=\"span1\">Placeholder text 1.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div2\" style=\"position:relative;top:100px;left:100px;\">  \n            <SPAN id=\"span2\">Placeholder text 2.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div3\" style=\"position:absolute;top:200px;left:200px;\">  \n            <DIV id=\"div4\" style=\"position:relative;top:100px;left:100px;\">  \n                <SPAN id=\"span3\">Placeholder text 3.</SPAN>  \n            </DIV>  \n        </DIV>  \n  \n    </BODY>  \n</HTML>  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Drawing.Rectangle OffsetRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "The x- and y-coordinate positions of the element, and its width and its height, in relation to its parent.       If an element&quot;s parent is relatively or absolutely positioned, OffsetRectangle will return the offset of the parent element. If the element itself is relatively positioned with respect to its parent, OffsetRectangle will return the offset from its parent."
  overload: System.Windows.Forms.HtmlElement.OffsetRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  id: op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: op_Equality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Equality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Equality(HtmlElement,HtmlElement)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Compares two elements for equality."
  remarks: "The equality operator tests the `IUnknown` pointers of the underlying COM objects wrapped by the supplied <xref:System.Windows.Forms.HtmlElement> classes."
  syntax:
    content: public static bool op_Equality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlElement
      description: "The first <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>."
    - id: right
      type: System.Windows.Forms.HtmlElement
      description: "The second <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if both parameters are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, or if both elements have the same underlying COM interface; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlElement.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  id: op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: op_Inequality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Compares two <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref> objects for inequality."
  syntax:
    content: public static bool op_Inequality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlElement
      description: "The first <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>."
    - id: right
      type: System.Windows.Forms.HtmlElement
      description: "The second <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> is only one element is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, or the two objects are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlElement.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OuterHtml
  id: OuterHtml
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
  fullName: System.Windows.Forms.HtmlElement.OuterHtml
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the current element&quot;s HTML code."
  remarks: "Whereas <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> will return all HTML contained in the current element excluding the current element&quot;s surrounding tags, OuterHtml includes the current element&quot;s tag as well as the HTML that tag contains, for example:       `<HTML>`       `<BODY>`       `<DIV id=&quot;div1&quot;>`       `Hello`       `<DIV id=&quot;div2&quot;>`       `World`       `<DIV id=&quot;div3&quot;>`       `How are you?`       `</DIV>`       `</DIV>`       `</DIV>`       `</BODY>`       `</HTML>`       In this example, calling OuterHtml on `div2` will return:       `<DIV id=&quot;div2&quot;>`       `World`       `<DIV id=&quot;div3&quot;>`       `How are you?`       `</DIV>`       `</DIV>`       Calling <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> will return:       `World`       `<DIV id=&quot;div3&quot;>`       `How are you?`       `</DIV>`       If you assign a new value to OuterHtml, the current element reference will become invalid; it will not reflect the name, properties and child content of the HTML you have just assigned."
  syntax:
    content: public string OuterHtml { get; set; }
    return:
      type: System.String
      description: "The HTML code for the current element and its children."
  overload: System.Windows.Forms.HtmlElement.OuterHtml*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OuterText
  id: OuterText
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OuterText
  nameWithType: HtmlElement.OuterText
  fullName: System.Windows.Forms.HtmlElement.OuterText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the current element&quot;s text."
  remarks: "If you attempt to assign HTML to an element with OuterText, the HTML code will display as literals in the document, just as if you were viewing HTML within a text file. If you assign HTML to an element using the <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> property, OuterText will return all of the text in that HTML with the markup removed.       Assigning a value to OuterText will destroy any child elements that belong to the element."
  syntax:
    content: public string OuterText { get; set; }
    return:
      type: System.String
      description: "The text inside the current element, and in the element&quot;s children."
  overload: System.Windows.Forms.HtmlElement.OuterText*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "You cannot set text outside of this element."
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Parent
  id: Parent
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Parent
  nameWithType: HtmlElement.Parent
  fullName: System.Windows.Forms.HtmlElement.Parent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the current element&quot;s parent element."
  remarks: "The Parent property enables discovery of an element&quot;s context. It is most useful inside of event handlers such as <xref:System.Windows.Forms.HtmlElement.Click>, which can fire for any element anywhere in the document&quot;s object hierarchy.       The Parent property of the HTML element (the top of an HTML document) points back to itself. If you call Parent inside a loop, verify that the loop&quot;s break condition compares the type of the current element and the type of the `Parent` property, or else your code may execute an infinite loop."
  example:
  - "The following code example finds all of the `IMG` tags in a document, and uses the Parent property to test whether the `IMG` is hyperlinked to another page; if it is, the code assigns the URL to the `ALT` attribute of the `IMG` tag, so that users can mouse over the image to see where it will take them.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement Parent { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "The element above the current element in the HTML document&quot;s hierarchy."
  overload: System.Windows.Forms.HtmlElement.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  id: RaiseEvent(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: RaiseEvent(String)
  nameWithType: HtmlElement.RaiseEvent(String)
  fullName: System.Windows.Forms.HtmlElement.RaiseEvent(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Causes the named event to call all registered event handlers."
  remarks: "This method is used to access HTML Document Object Model (DOM) events. It directly calls the [IHTMLElement3::fireEvent](http://go.microsoft.com/fwlink/?LinkId=103189) method. For more information about how to use the DOM through the <xref:System.Windows.Forms.HtmlElement> class, see [Accessing Unexposed Members on the Managed HTML Document Object Model](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void RaiseEvent (string eventName);
    parameters:
    - id: eventName
      type: System.String
      description: "The name of the event to raise."
  overload: System.Windows.Forms.HtmlElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.RemoveFocus
  id: RemoveFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: RemoveFocus()
  nameWithType: HtmlElement.RemoveFocus()
  fullName: System.Windows.Forms.HtmlElement.RemoveFocus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Removes focus from the current element, if that element has focus."
  remarks: "Calling this method raises the <xref:System.Windows.Forms.HtmlElement.LostFocus> event for the element.       When focus is cleared from an element using this method, it is given to the document containing the element, not to the next element in the tab order."
  syntax:
    content: public void RemoveFocus ();
    parameters: []
  overload: System.Windows.Forms.HtmlElement.RemoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  id: ScrollIntoView(System.Boolean)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollIntoView(Boolean)
  nameWithType: HtmlElement.ScrollIntoView(Boolean)
  fullName: System.Windows.Forms.HtmlElement.ScrollIntoView(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Scrolls through the document containing this element until the top or bottom edge of this element is aligned with the document&quot;s window."
  remarks: ''
  example:
  - "The following code example finds an element by name and scrolls through the page so that the top of the element is aligned with the top of the visible page.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#12](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#12)]\n [!code-cs[System.Windows.Forms.HtmlElement#12](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#12)]"
  syntax:
    content: public void ScrollIntoView (bool alignWithTop);
    parameters:
    - id: alignWithTop
      type: System.Boolean
      description: "If <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, the top of the object will be displayed at the top of the window. If <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>, the bottom of the object will be displayed at the bottom of the window."
  overload: System.Windows.Forms.HtmlElement.ScrollIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollLeft
  id: ScrollLeft
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
  fullName: System.Windows.Forms.HtmlElement.ScrollLeft
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the distance between the edge of the element and the left edge of its content."
  remarks: "The full dimensions of the scroll area are available using <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; `ScrollLeft` and <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> are exposed independently because these are the only two properties of the scroll area that developers can set."
  syntax:
    content: public int ScrollLeft { get; set; }
    return:
      type: System.Int32
      description: "The distance, in pixels, between the left edge of the element and the left edge of its content."
  overload: System.Windows.Forms.HtmlElement.ScrollLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle
  id: ScrollRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
  fullName: System.Windows.Forms.HtmlElement.ScrollRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the dimensions of an element&quot;s scrollable region."
  remarks: "An element will have a scrollable region if its content exceeds the size of its dimensions, unless the overflow style on the element forbids rendering scrollbars.       You cannot modify the size of the scroll area directly, but you can modify the distance between the edges of the scroll area and the edges of the element. Use the <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> and <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> properties to achieve this."
  syntax:
    content: public System.Drawing.Rectangle ScrollRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "The size and coordinate location of the scrollable area of an element."
  overload: System.Windows.Forms.HtmlElement.ScrollRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollTop
  id: ScrollTop
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
  fullName: System.Windows.Forms.HtmlElement.ScrollTop
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the distance between the edge of the element and the top edge of its content."
  remarks: "The full dimensions of the scroll area are available using <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> and `ScrollTop` are exposed independently because these are the only two properties of the scroll area that developers can set."
  syntax:
    content: public int ScrollTop { get; set; }
    return:
      type: System.Int32
      description: "The distance, in pixels, between the top edge of the element and the top edge of its content."
  overload: System.Windows.Forms.HtmlElement.ScrollTop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: SetAttribute(String,String)
  nameWithType: HtmlElement.SetAttribute(String,String)
  fullName: System.Windows.Forms.HtmlElement.SetAttribute(String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets the value of the named attribute on the element."
  remarks: "An attribute in HTML is any valid name-value pair for that element. <xref:System.Windows.Forms.HtmlElement> exposes only those attributes that are common to all elements, leaving out those that only apply to certain types of elements; `SRC` is a predefined attribute for the `IMG` tag, for example, but not for the `DIV` tag. Use <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> and SetAttribute to manipulate attributes not exposed on the managed Document Object Model (DOM).       If `attributeName` is not a defined attribute on an element, SetAttribute will define it on the element as a new attribute.       <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> and SetAttribute are case-insensitive.       To set the `class` attribute on an <xref:System.Windows.Forms.HtmlElement> , you must refer to the attribute as `className` when specifying the first argument to SetAttribute"
  example:
  - "The following code example adds a new `IMG` element to the current document, using SetAttribute to set the `SRC` attribute for the image.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#13](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#13)]\n [!code-cs[System.Windows.Forms.HtmlElement#13](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#13)]"
  syntax:
    content: public void SetAttribute (string attributeName, string value);
    parameters:
    - id: attributeName
      type: System.String
      description: "The name of the attribute to set."
    - id: value
      type: System.String
      description: "The new value of this attribute."
  overload: System.Windows.Forms.HtmlElement.SetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Style
  id: Style
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Style
  nameWithType: HtmlElement.Style
  fullName: System.Windows.Forms.HtmlElement.Style
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a semicolon-delimited list of styles for the current element."
  remarks: "The HTML Document Object Model (DOM) uses styles as defined in the World Wide Web Consortiums Cascading Style Sheets specification to control the display of an element. Styles in the Style property take the form of colon-delimited name-value pairs, with each pair separated by a semicolon, as follows:       `style-name1:value1;...;[style-nameN:valueN;]`       To set the font for a `DIV` element to 14-point Times New Roman bold, for example, you would assign the following string:       `font-face:Times New Roman;font-size:14px;font-weight:bold;`       For a full list of all available styles in the HTML DOM, see [STYLE Attribute](http://msdn.microsoft.com/library/ms534651.aspx)."
  syntax:
    content: public string Style { get; set; }
    return:
      type: System.String
      description: "A string consisting of all of the element&quot;s styles"
  overload: System.Windows.Forms.HtmlElement.Style*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.TabIndex
  id: TabIndex
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
  fullName: System.Windows.Forms.HtmlElement.TabIndex
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the location of this element in the tab order."
  remarks: "TabIndex determines which element in an HTML document will next receive focus when the user presses the TAB key. By default, the only elements included in the tab order are `INPUT` elements, the `SELECT` control, and any element whose `contentEditable` property is set to `true`. You can include any HTML element in the tab order, such as a `DIV`, by assigning it an explicit TabIndex.       Valid values for TabIndex range from -32767 to 32767."
  syntax:
    content: public short TabIndex { get; set; }
    return:
      type: System.Int16
      description: "The numeric index of the element in the tab order."
  overload: System.Windows.Forms.HtmlElement.TabIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.TagName
  id: TagName
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: TagName
  nameWithType: HtmlElement.TagName
  fullName: System.Windows.Forms.HtmlElement.TagName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the name of the HTML tag."
  remarks: "Many elements in the HTML Document Object Model have attributes, properties, and methods that are unique to those elements; such as the `HREF` attribute on the `A` element, or the `Submit` method on `FORM`. Use TagName when you have an element of a potentially arbitrary type, and need to perform a type-specific operation."
  example:
  - "The following code example finds all of the `IMG` tags in a document, and uses the `TagName` property to test whether the `IMG` is hyperlinked to another page; if it is, the code assigns the URL to the `ALT` attribute of the `IMG` tag, so that users can mouse over the image to see where it will take them.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public string TagName { get; }
    return:
      type: System.String
      description: "The name used to create this element using HTML markup."
  overload: System.Windows.Forms.HtmlElement.TagName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Windows.Forms.HtmlElement.All
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: All
  nameWithType: HtmlElement.All
  fullName: System.Windows.Forms.HtmlElement.All
- uid: System.Windows.Forms.HtmlElementCollection
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementCollection
  nameWithType: HtmlElementCollection
  fullName: System.Windows.Forms.HtmlElementCollection
- uid: System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AppendChild(HtmlElement)
  nameWithType: HtmlElement.AppendChild(HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.AppendChild(HtmlElement)
- uid: System.Windows.Forms.HtmlElement
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.AttachEventHandler(String,EventHandler)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
  fullName: System.Windows.Forms.HtmlElement.CanHaveChildren
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.HtmlElement.Children
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Children
  nameWithType: HtmlElement.Children
  fullName: System.Windows.Forms.HtmlElement.Children
- uid: System.Windows.Forms.HtmlElement.Click
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Click
  nameWithType: HtmlElement.Click
  fullName: System.Windows.Forms.HtmlElement.Click
- uid: System.Windows.Forms.HtmlElementEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementEventHandler
  nameWithType: HtmlElementEventHandler
  fullName: System.Windows.Forms.HtmlElementEventHandler
- uid: System.Windows.Forms.HtmlElement.ClientRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
  fullName: System.Windows.Forms.HtmlElement.ClientRectangle
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.DetachEventHandler(String,EventHandler)
- uid: System.Windows.Forms.HtmlElement.Document
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Document
  nameWithType: HtmlElement.Document
  fullName: System.Windows.Forms.HtmlElement.Document
- uid: System.Windows.Forms.HtmlDocument
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlDocument
  nameWithType: HtmlDocument
  fullName: System.Windows.Forms.HtmlDocument
- uid: System.Windows.Forms.HtmlElement.DomElement
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DomElement
  nameWithType: HtmlElement.DomElement
  fullName: System.Windows.Forms.HtmlElement.DomElement
- uid: System.Windows.Forms.HtmlElement.DoubleClick
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DoubleClick
  nameWithType: HtmlElement.DoubleClick
  fullName: System.Windows.Forms.HtmlElement.DoubleClick
- uid: System.Windows.Forms.HtmlElement.Drag
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Drag
  nameWithType: HtmlElement.Drag
  fullName: System.Windows.Forms.HtmlElement.Drag
- uid: System.Windows.Forms.HtmlElement.DragEnd
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragEnd
  nameWithType: HtmlElement.DragEnd
  fullName: System.Windows.Forms.HtmlElement.DragEnd
- uid: System.Windows.Forms.HtmlElement.DragLeave
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragLeave
  nameWithType: HtmlElement.DragLeave
  fullName: System.Windows.Forms.HtmlElement.DragLeave
- uid: System.Windows.Forms.HtmlElement.DragOver
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragOver
  nameWithType: HtmlElement.DragOver
  fullName: System.Windows.Forms.HtmlElement.DragOver
- uid: System.Windows.Forms.HtmlElement.Enabled
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Enabled
  nameWithType: HtmlElement.Enabled
  fullName: System.Windows.Forms.HtmlElement.Enabled
- uid: System.Windows.Forms.HtmlElement.Equals(System.Object)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Equals(Object)
  nameWithType: HtmlElement.Equals(Object)
  fullName: System.Windows.Forms.HtmlElement.Equals(Object)
- uid: System.Windows.Forms.HtmlElement.FirstChild
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
  fullName: System.Windows.Forms.HtmlElement.FirstChild
- uid: System.Windows.Forms.HtmlElement.Focus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focus()
  nameWithType: HtmlElement.Focus()
  fullName: System.Windows.Forms.HtmlElement.Focus()
- uid: System.Windows.Forms.HtmlElement.Focusing
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focusing
  nameWithType: HtmlElement.Focusing
  fullName: System.Windows.Forms.HtmlElement.Focusing
- uid: System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetAttribute(String)
  nameWithType: HtmlElement.GetAttribute(String)
  fullName: System.Windows.Forms.HtmlElement.GetAttribute(String)
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: HtmlElement.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlElement.GetElementsByTagName(String)
- uid: System.Windows.Forms.HtmlElement.GetHashCode
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetHashCode()
  nameWithType: HtmlElement.GetHashCode()
  fullName: System.Windows.Forms.HtmlElement.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.HtmlElement.GotFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GotFocus
  nameWithType: HtmlElement.GotFocus
  fullName: System.Windows.Forms.HtmlElement.GotFocus
- uid: System.Windows.Forms.HtmlElement.Id
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Id
  nameWithType: HtmlElement.Id
  fullName: System.Windows.Forms.HtmlElement.Id
- uid: System.Windows.Forms.HtmlElement.InnerHtml
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
  fullName: System.Windows.Forms.HtmlElement.InnerHtml
- uid: System.Windows.Forms.HtmlElement.InnerText
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerText
  nameWithType: HtmlElement.InnerText
  fullName: System.Windows.Forms.HtmlElement.InnerText
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  nameWithType: HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
- uid: System.Windows.Forms.HtmlElementInsertionOrientation
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementInsertionOrientation
  nameWithType: HtmlElementInsertionOrientation
  fullName: System.Windows.Forms.HtmlElementInsertionOrientation
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember(String)
  nameWithType: HtmlElement.InvokeMember(String)
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String)
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember(String,Object[])
  nameWithType: HtmlElement.InvokeMember(String,Object[])
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.HtmlElement.KeyDown
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyDown
  nameWithType: HtmlElement.KeyDown
  fullName: System.Windows.Forms.HtmlElement.KeyDown
- uid: System.Windows.Forms.HtmlElement.KeyPress
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyPress
  nameWithType: HtmlElement.KeyPress
  fullName: System.Windows.Forms.HtmlElement.KeyPress
- uid: System.Windows.Forms.HtmlElement.KeyUp
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyUp
  nameWithType: HtmlElement.KeyUp
  fullName: System.Windows.Forms.HtmlElement.KeyUp
- uid: System.Windows.Forms.HtmlElement.LosingFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: LosingFocus
  nameWithType: HtmlElement.LosingFocus
  fullName: System.Windows.Forms.HtmlElement.LosingFocus
- uid: System.Windows.Forms.HtmlElement.LostFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: LostFocus
  nameWithType: HtmlElement.LostFocus
  fullName: System.Windows.Forms.HtmlElement.LostFocus
- uid: System.Windows.Forms.HtmlElement.MouseDown
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseDown
  nameWithType: HtmlElement.MouseDown
  fullName: System.Windows.Forms.HtmlElement.MouseDown
- uid: System.Windows.Forms.HtmlElement.MouseEnter
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseEnter
  nameWithType: HtmlElement.MouseEnter
  fullName: System.Windows.Forms.HtmlElement.MouseEnter
- uid: System.Windows.Forms.HtmlElement.MouseLeave
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseLeave
  nameWithType: HtmlElement.MouseLeave
  fullName: System.Windows.Forms.HtmlElement.MouseLeave
- uid: System.Windows.Forms.HtmlElement.MouseMove
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseMove
  nameWithType: HtmlElement.MouseMove
  fullName: System.Windows.Forms.HtmlElement.MouseMove
- uid: System.Windows.Forms.HtmlElement.MouseOver
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseOver
  nameWithType: HtmlElement.MouseOver
  fullName: System.Windows.Forms.HtmlElement.MouseOver
- uid: System.Windows.Forms.HtmlElement.MouseUp
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseUp
  nameWithType: HtmlElement.MouseUp
  fullName: System.Windows.Forms.HtmlElement.MouseUp
- uid: System.Windows.Forms.HtmlElement.Name
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Name
  nameWithType: HtmlElement.Name
  fullName: System.Windows.Forms.HtmlElement.Name
- uid: System.Windows.Forms.HtmlElement.NextSibling
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
  fullName: System.Windows.Forms.HtmlElement.NextSibling
- uid: System.Windows.Forms.HtmlElement.OffsetParent
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
  fullName: System.Windows.Forms.HtmlElement.OffsetParent
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
  fullName: System.Windows.Forms.HtmlElement.OffsetRectangle
- uid: System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Equality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Equality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Equality(HtmlElement,HtmlElement)
- uid: System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Inequality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Inequality(HtmlElement,HtmlElement)
- uid: System.Windows.Forms.HtmlElement.OuterHtml
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
  fullName: System.Windows.Forms.HtmlElement.OuterHtml
- uid: System.Windows.Forms.HtmlElement.OuterText
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterText
  nameWithType: HtmlElement.OuterText
  fullName: System.Windows.Forms.HtmlElement.OuterText
- uid: System.Windows.Forms.HtmlElement.Parent
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Parent
  nameWithType: HtmlElement.Parent
  fullName: System.Windows.Forms.HtmlElement.Parent
- uid: System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RaiseEvent(String)
  nameWithType: HtmlElement.RaiseEvent(String)
  fullName: System.Windows.Forms.HtmlElement.RaiseEvent(String)
- uid: System.Windows.Forms.HtmlElement.RemoveFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RemoveFocus()
  nameWithType: HtmlElement.RemoveFocus()
  fullName: System.Windows.Forms.HtmlElement.RemoveFocus()
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollIntoView(Boolean)
  nameWithType: HtmlElement.ScrollIntoView(Boolean)
  fullName: System.Windows.Forms.HtmlElement.ScrollIntoView(Boolean)
- uid: System.Windows.Forms.HtmlElement.ScrollLeft
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
  fullName: System.Windows.Forms.HtmlElement.ScrollLeft
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
  fullName: System.Windows.Forms.HtmlElement.ScrollRectangle
- uid: System.Windows.Forms.HtmlElement.ScrollTop
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
  fullName: System.Windows.Forms.HtmlElement.ScrollTop
- uid: System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: SetAttribute(String,String)
  nameWithType: HtmlElement.SetAttribute(String,String)
  fullName: System.Windows.Forms.HtmlElement.SetAttribute(String,String)
- uid: System.Windows.Forms.HtmlElement.Style
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Style
  nameWithType: HtmlElement.Style
  fullName: System.Windows.Forms.HtmlElement.Style
- uid: System.Windows.Forms.HtmlElement.TabIndex
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
  fullName: System.Windows.Forms.HtmlElement.TabIndex
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Windows.Forms.HtmlElement.TagName
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TagName
  nameWithType: HtmlElement.TagName
  fullName: System.Windows.Forms.HtmlElement.TagName
- uid: System.Windows.Forms.HtmlElement.All*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: All
  nameWithType: HtmlElement.All
- uid: System.Windows.Forms.HtmlElement.AppendChild*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AppendChild
  nameWithType: HtmlElement.AppendChild
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AttachEventHandler
  nameWithType: HtmlElement.AttachEventHandler
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
- uid: System.Windows.Forms.HtmlElement.Children*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Children
  nameWithType: HtmlElement.Children
- uid: System.Windows.Forms.HtmlElement.ClientRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DetachEventHandler
  nameWithType: HtmlElement.DetachEventHandler
- uid: System.Windows.Forms.HtmlElement.Document*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Document
  nameWithType: HtmlElement.Document
- uid: System.Windows.Forms.HtmlElement.DomElement*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DomElement
  nameWithType: HtmlElement.DomElement
- uid: System.Windows.Forms.HtmlElement.Enabled*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Enabled
  nameWithType: HtmlElement.Enabled
- uid: System.Windows.Forms.HtmlElement.Equals*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Equals
  nameWithType: HtmlElement.Equals
- uid: System.Windows.Forms.HtmlElement.FirstChild*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
- uid: System.Windows.Forms.HtmlElement.Focus*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focus
  nameWithType: HtmlElement.Focus
- uid: System.Windows.Forms.HtmlElement.GetAttribute*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetAttribute
  nameWithType: HtmlElement.GetAttribute
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetElementsByTagName
  nameWithType: HtmlElement.GetElementsByTagName
- uid: System.Windows.Forms.HtmlElement.GetHashCode*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetHashCode
  nameWithType: HtmlElement.GetHashCode
- uid: System.Windows.Forms.HtmlElement.Id*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Id
  nameWithType: HtmlElement.Id
- uid: System.Windows.Forms.HtmlElement.InnerHtml*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
- uid: System.Windows.Forms.HtmlElement.InnerText*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerText
  nameWithType: HtmlElement.InnerText
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InsertAdjacentElement
  nameWithType: HtmlElement.InsertAdjacentElement
- uid: System.Windows.Forms.HtmlElement.InvokeMember*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember
  nameWithType: HtmlElement.InvokeMember
- uid: System.Windows.Forms.HtmlElement.Name*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Name
  nameWithType: HtmlElement.Name
- uid: System.Windows.Forms.HtmlElement.NextSibling*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
- uid: System.Windows.Forms.HtmlElement.OffsetParent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
- uid: System.Windows.Forms.HtmlElement.op_Equality*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Equality
  nameWithType: HtmlElement.op_Equality
- uid: System.Windows.Forms.HtmlElement.op_Inequality*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Inequality
  nameWithType: HtmlElement.op_Inequality
- uid: System.Windows.Forms.HtmlElement.OuterHtml*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
- uid: System.Windows.Forms.HtmlElement.OuterText*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterText
  nameWithType: HtmlElement.OuterText
- uid: System.Windows.Forms.HtmlElement.Parent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Parent
  nameWithType: HtmlElement.Parent
- uid: System.Windows.Forms.HtmlElement.RaiseEvent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RaiseEvent
  nameWithType: HtmlElement.RaiseEvent
- uid: System.Windows.Forms.HtmlElement.RemoveFocus*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RemoveFocus
  nameWithType: HtmlElement.RemoveFocus
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollIntoView
  nameWithType: HtmlElement.ScrollIntoView
- uid: System.Windows.Forms.HtmlElement.ScrollLeft*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
- uid: System.Windows.Forms.HtmlElement.ScrollTop*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
- uid: System.Windows.Forms.HtmlElement.SetAttribute*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: SetAttribute
  nameWithType: HtmlElement.SetAttribute
- uid: System.Windows.Forms.HtmlElement.Style*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Style
  nameWithType: HtmlElement.Style
- uid: System.Windows.Forms.HtmlElement.TabIndex*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
- uid: System.Windows.Forms.HtmlElement.TagName*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TagName
  nameWithType: HtmlElement.TagName
