### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ConsoleTraceListener
  id: ConsoleTraceListener
  children:
  - System.Diagnostics.ConsoleTraceListener.#ctor
  - System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)
  - System.Diagnostics.ConsoleTraceListener.Close
  langs:
  - csharp
  name: ConsoleTraceListener
  nameWithType: ConsoleTraceListener
  fullName: System.Diagnostics.ConsoleTraceListener
  type: Class
  summary: "Direciona rastreio ou depuração de saída para a saída padrão ou a sequência de erro padrão."
  remarks: "Use the ConsoleTraceListener class to write trace and debugging messages to the console. You can initialize a ConsoleTraceListener object to write trace messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream or to the <xref:System.Console.Error%2A?displayProperty=fullName> stream.  \n  \n> [!IMPORTANT]\n>  <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a`try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \n  \n When trace and debugging output is enabled, the ConsoleTraceListener messages are written to the specified <xref:System.Console?displayProperty=fullName> stream, which is similar to the way messages are written with the <xref:System.Console.Write%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName> methods. In a console application, the <xref:System.Console?displayProperty=fullName> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <xref:System.IO.TextWriter?displayProperty=fullName> instance.  \n  \n> [!NOTE]\n>  If the console does not exist, as in a Windows-based application, messages written to the console are not displayed.  \n  \n Add a ConsoleTraceListener object to the appropriate <xref:System.Diagnostics.Trace.Listeners%2A> collection if you want messages written through <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, or <xref:System.Diagnostics.Debug> to be written to the console. In addition, you can write messages directly to the console using the <xref:System.Diagnostics.Trace.Write%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> methods.  \n  \n> [!NOTE]\n>  The <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes share the same <xref:System.Diagnostics.TraceListenerCollection> collection, accessed through their respective `Listeners` properties. If you add a ConsoleTraceListener object to the collection using one of these classes, the other class automatically uses the same listener.  \n  \n Most compilers enable trace and debug output through conditional compilation flags. If you do not enable tracing or debugging, the messages written through the <xref:System.Diagnostics.Debug?displayProperty=fullName> and <xref:System.Diagnostics.Trace?displayProperty=fullName> classes are effectively ignored. The syntax to enable trace and debug output is compiler specific; if you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \n  \n-   To enable debugging in C#, add the **/d:DEBUG**flag to the compiler command line when you compile your code, or you can add **#define DEBUG** to the top of your file. In Visual Basic, add the **/d:DEBUG=True** flag to the compiler command line.  \n  \n-   To enable tracing in C#, add the **/d:TRACE** flag to the compiler command line when you compile your code, or add **#define TRACE** to the top of your file. In Visual Basic, add the **/d:TRACE=True** flag to the compiler command line.  \n  \n You can add a ConsoleTraceListener object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection in your code, or you can add a ConsoleTraceListener object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection through the application configuration file. Add the ConsoleTraceListener object in your code to write messages for a specific code section or execution path. Add the ConsoleTraceListener object in your application configuration file to direct all trace and debug messages to the console while the application executes.  \n  \n To write trace and debug messages to the console for a specific section of code, initialize a ConsoleTraceListener object and add it to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. Instrument the section of code that contains messages using the <xref:System.Diagnostics.Trace> or <xref:System.Diagnostics.Debug> classes. At the end of the code section, remove the ConsoleTraceListener object from the <xref:System.Diagnostics.Trace.Listeners%2A> collection, and call the <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> method on the ConsoleTraceListener.  \n  \n To direct all trace and debug messages to the console while the application executes, add a ConsoleTraceListener object to the application configuration file. Edit the configuration file that corresponds to the name of your application, or the app.config file in a [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] project. In this file, insert an element for a ConsoleTraceListener.  \n  \n The following example adds a ConsoleTraceListener object named `configConsoleListener` to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"false\" indentsize=\"4\">  \n      <listeners>  \n        <add name=\"configConsoleListener\"            type=\"System.Diagnostics.ConsoleTraceListener\" />  \n      </listeners>  \n    </trace>  \n  </system.diagnostics>  \n </configuration>  \n```  \n  \n For details about adding trace listeners in the application configuration file, see [\\&lt;listeners\\&gt;](../Topic/%3Clisteners%3E%20Element%20for%20%3Ctrace%3E.md)."
  example:
  - "The following code example implements a console application consisting of a class with two public methods.  \n  \n The `Main` method examines the command-line arguments and determines if trace output should be directed to the standard error stream or the standard output stream. `Main` creates and initializes a ConsoleTraceListener object for the specified <xref:System.Console> output stream, and adds this object to the trace listener collection. It then calls the `WriteEnvironmentInfoToTrace` method, which writes details about the executing environment and the trace listener configuration to the trace output.  \n  \n When the example application runs, the environment and trace configuration details are written to the specified console output stream through the ConsoleTraceListener object.  \n  \n [!code-cs[Diagnostics_ConsoleTraceListener#1](~/add/codesnippet/csharp/t-system.diagnostics.con_1.cs)]\n [!code-vb[Diagnostics_ConsoleTraceListener#1](~/add/codesnippet/visualbasic/t-system.diagnostics.con_1.vb)]"
  syntax:
    content: 'public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  - System.Diagnostics.TextWriterTraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)
  - System.Diagnostics.TextWriterTraceListener.Flush
  - System.Diagnostics.TextWriterTraceListener.Write(System.String)
  - System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)
  - System.Diagnostics.TextWriterTraceListener.Writer
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.ConsoleTraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.ConsoleTraceListener
  langs:
  - csharp
  name: ConsoleTraceListener()
  nameWithType: ConsoleTraceListener.ConsoleTraceListener()
  fullName: System.Diagnostics.ConsoleTraceListener.ConsoleTraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.ConsoleTraceListener&quot;> </xref> classe com resultados de rastreio escrito no fluxo de saída padrão."
  remarks: "Este construtor inicializa um <xref:System.Diagnostics.ConsoleTraceListener>objeto escrever mensagens para o <xref:System.Console.Out%2A?displayProperty=fullName>stream.</xref:System.Console.Out%2A?displayProperty=fullName> </xref:System.Diagnostics.ConsoleTraceListener> O <xref:System.Diagnostics.TraceListener.Name%2A>propriedade é inicializada para uma cadeia vazia (&quot;&quot;).</xref:System.Diagnostics.TraceListener.Name%2A>"
  example:
  - "The following code example initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream and adds it to the trace listener collection. This code example is part of a larger example provided for the <xref:System.Diagnostics.ConsoleTraceListener> class.  \n  \n [!code-cs[Diagnostics_ConsoleTraceListener#2](~/add/codesnippet/csharp/m-system.diagnostics.con_1_1.cs)]\n [!code-vb[Diagnostics_ConsoleTraceListener#2](~/add/codesnippet/visualbasic/m-system.diagnostics.con_1_1.vb)]"
  syntax:
    content: public ConsoleTraceListener ();
    parameters: []
  overload: System.Diagnostics.ConsoleTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Diagnostics.ConsoleTraceListener
  langs:
  - csharp
  name: ConsoleTraceListener(Boolean)
  nameWithType: ConsoleTraceListener.ConsoleTraceListener(Boolean)
  fullName: System.Diagnostics.ConsoleTraceListener.ConsoleTraceListener(Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.ConsoleTraceListener&quot;> </xref> classe com uma opção para escrever a saída de rastreio para o fluxo de saída padrão ou a sequência de erro padrão."
  remarks: "Este construtor inicializa um <xref:System.Diagnostics.ConsoleTraceListener>objeto para escrever mensagens para um o <xref:System.Console.Out%2A?displayProperty=fullName>ou <xref:System.Console.Error%2A?displayProperty=fullName>fluxo.</xref:System.Console.Error%2A?displayProperty=fullName> </xref:System.Console.Out%2A?displayProperty=fullName> </xref:System.Diagnostics.ConsoleTraceListener> O <xref:System.Diagnostics.TraceListener.Name%2A>propriedade é inicializada para uma cadeia vazia (&quot;&quot;).</xref:System.Diagnostics.TraceListener.Name%2A>"
  example:
  - "The following code example initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream and adds it to the trace listener collection. This code example is part of a larger example provided for the <xref:System.Diagnostics.ConsoleTraceListener> class.  \n  \n [!code-cs[Diagnostics_ConsoleTraceListener#2](~/add/codesnippet/csharp/m-system.diagnostics.con_0_1.cs)]\n [!code-vb[Diagnostics_ConsoleTraceListener#2](~/add/codesnippet/visualbasic/m-system.diagnostics.con_0_1.vb)]"
  syntax:
    content: public ConsoleTraceListener (bool useErrorStream);
    parameters:
    - id: useErrorStream
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>escrever o rastreio e a depuração de saída para a sequência de erro padrão; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> escrever rastreio e a depuração de saída no fluxo de saída padrão."
  overload: System.Diagnostics.ConsoleTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ConsoleTraceListener.Close
  id: Close
  parent: System.Diagnostics.ConsoleTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: ConsoleTraceListener.Close()
  fullName: System.Diagnostics.ConsoleTraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Fecha a saída para o fluxo especificado para este serviço de escuta de rastreio."
  remarks: "O fluxo especificado para este <xref:System.Diagnostics.ConsoleTraceListener>instância (ou o <xref:System.Console.Out%2A?displayProperty=fullName>fluxo ou <xref:System.Console.Error%2A?displayProperty=fullName>fluxo) está fechado.</xref:System.Console.Error%2A?displayProperty=fullName> </xref:System.Console.Out%2A?displayProperty=fullName> </xref:System.Diagnostics.ConsoleTraceListener>"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Diagnostics.ConsoleTraceListener.Close*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.TextWriterTraceListener
  isExternal: false
  name: System.Diagnostics.TextWriterTraceListener
- uid: System.Diagnostics.ConsoleTraceListener.#ctor
  parent: System.Diagnostics.ConsoleTraceListener
  isExternal: false
  name: ConsoleTraceListener()
  nameWithType: ConsoleTraceListener.ConsoleTraceListener()
  fullName: System.Diagnostics.ConsoleTraceListener.ConsoleTraceListener()
- uid: System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)
  parent: System.Diagnostics.ConsoleTraceListener
  isExternal: false
  name: ConsoleTraceListener(Boolean)
  nameWithType: ConsoleTraceListener.ConsoleTraceListener(Boolean)
  fullName: System.Diagnostics.ConsoleTraceListener.ConsoleTraceListener(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.ConsoleTraceListener.Close
  parent: System.Diagnostics.ConsoleTraceListener
  isExternal: false
  name: Close()
  nameWithType: ConsoleTraceListener.Close()
  fullName: System.Diagnostics.ConsoleTraceListener.Close()
- uid: System.Diagnostics.ConsoleTraceListener.#ctor*
  parent: System.Diagnostics.ConsoleTraceListener
  isExternal: false
  name: ConsoleTraceListener
  nameWithType: ConsoleTraceListener.ConsoleTraceListener
- uid: System.Diagnostics.ConsoleTraceListener.Close*
  parent: System.Diagnostics.ConsoleTraceListener
  isExternal: false
  name: Close
  nameWithType: ConsoleTraceListener.Close
