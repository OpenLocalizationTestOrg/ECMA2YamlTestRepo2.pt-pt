### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ProcessModule
  id: ProcessModule
  children:
  - System.Diagnostics.ProcessModule.BaseAddress
  - System.Diagnostics.ProcessModule.EntryPointAddress
  - System.Diagnostics.ProcessModule.FileName
  - System.Diagnostics.ProcessModule.FileVersionInfo
  - System.Diagnostics.ProcessModule.ModuleMemorySize
  - System.Diagnostics.ProcessModule.ModuleName
  - System.Diagnostics.ProcessModule.ToString
  langs:
  - csharp
  name: ProcessModule
  nameWithType: ProcessModule
  fullName: System.Diagnostics.ProcessModule
  type: Class
  summary: "Represents a.dll or .exe file that is loaded into a particular process."
  remarks: "A module is an executable file or a dynamic link library (DLL). Each process consists of one or more modules. You can use this class to get information about the module.      > [!IMPORTANT] >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."
  example:
  - "The following code sample demonstrates how to use the ProcessModule class to get and display information about all the modules that are used by the Notepad.exe application.  \n  \n [!code-cpp[ProcessModule#1](~/add/codesnippet/cpp/t-system.diagnostics.pro_0_1.cpp)]\n [!code-cs[ProcessModule#1](~/add/codesnippet/csharp/t-system.diagnostics.pro_0_1.cs)]\n [!code-vb[ProcessModule#1](~/add/codesnippet/visualbasic/t-system.diagnostics.pro_0_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Diagnostics.Design.ProcessModuleDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class ProcessModule : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.BaseAddress
  id: BaseAddress
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: BaseAddress
  nameWithType: ProcessModule.BaseAddress
  fullName: System.Diagnostics.ProcessModule.BaseAddress
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the memory address where the module was loaded."
  remarks: ''
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and  BaseAddress properties are used to display the module name and the memory address where each module was loaded.  \n  \n [!code-cpp[ProcessModule_BaseAddress#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_30_1.cpp)]\n [!code-vb[ProcessModule_BaseAddress#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_30_1.vb)]\n [!code-cs[ProcessModule_BaseAddress#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_30_1.cs)]"
  syntax:
    content: public IntPtr BaseAddress { get; }
    return:
      type: System.IntPtr
      description: "The load address of the module."
  overload: System.Diagnostics.ProcessModule.BaseAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.EntryPointAddress
  id: EntryPointAddress
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: EntryPointAddress
  nameWithType: ProcessModule.EntryPointAddress
  fullName: System.Diagnostics.ProcessModule.EntryPointAddress
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the memory address for the function that runs when the system loads and runs the module."
  remarks: "The module&quot;s entry point is the location of the function that is called during process startup, thread startup, process shutdown, and thread shutdown. While the entry point is not the address of the DllMain function, it should be close enough for most purposes.      > [!NOTE] >  Due to changes in the way that Windows loads assemblies, EntryPointAddress will always return 0 on [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)] or [!INCLUDE[win81](~/add/includes/ajax-current-ext-md.md)] and should not be relied on for those platforms."
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and EntryPointAddress properties are used to display the name and the entry point address for each module.  \n  \n [!code-cpp[ProcessModule_EntryPoint#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_4_1.cpp)]\n [!code-cs[ProcessModule_EntryPoint#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_4_1.cs)]\n [!code-vb[ProcessModule_EntryPoint#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_4_1.vb)]"
  syntax:
    content: public IntPtr EntryPointAddress { get; }
    return:
      type: System.IntPtr
      description: "The entry point of the module."
  overload: System.Diagnostics.ProcessModule.EntryPointAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.FileName
  id: FileName
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: FileName
  nameWithType: ProcessModule.FileName
  fullName: System.Diagnostics.ProcessModule.FileName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the full path to the module."
  remarks: "If the file name is longer than the maximum number of characters allowed, the file name is truncated."
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and FileName properties are used to display the module name and the full path information for each module.  \n  \n [!code-cs[ProcessModule_FileName#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_5_1.cs)]\n [!code-cpp[ProcessModule_FileName#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_5_1.cpp)]\n [!code-vb[ProcessModule_FileName#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_5_1.vb)]"
  syntax:
    content: public string FileName { get; }
    return:
      type: System.String
      description: "The fully qualified path that defines the location of the module."
  overload: System.Diagnostics.ProcessModule.FileName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.FileVersionInfo
  id: FileVersionInfo
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: FileVersionInfo
  nameWithType: ProcessModule.FileVersionInfo
  fullName: System.Diagnostics.ProcessModule.FileVersionInfo
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets version information about the module."
  remarks: ''
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and FileVersionInfo properties are used to display the module name and the file version information for each module.  \n  \n [!code-cs[ProcessModule_FileVersionInfo#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_1_1.cs)]\n [!code-cpp[ProcessModule_FileVersionInfo#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_1_1.cpp)]\n [!code-vb[ProcessModule_FileVersionInfo#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_1_1.vb)]"
  syntax:
    content: public System.Diagnostics.FileVersionInfo FileVersionInfo { get; }
    return:
      type: System.Diagnostics.FileVersionInfo
      description: "A <xref href=&quot;System.Diagnostics.FileVersionInfo&quot;></xref> that contains the module&quot;s version information."
  overload: System.Diagnostics.ProcessModule.FileVersionInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.ModuleMemorySize
  id: ModuleMemorySize
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: ModuleMemorySize
  nameWithType: ProcessModule.ModuleMemorySize
  fullName: System.Diagnostics.ProcessModule.ModuleMemorySize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the amount of memory that is required to load the module."
  remarks: "ModuleMemorySize does not include any additional memory allocations that the module makes once it is running; it includes only the size of the static code and data in the module file."
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The <xref:System.Diagnostics.ProcessModule.ModuleName%2A> and ModuleMemorySize properties are used to display the module name and the amount of memory needed for each module.  \n  \n [!code-vb[ProcessModule_ModuleMemorySize#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_16_1.vb)]\n [!code-cs[ProcessModule_ModuleMemorySize#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_16_1.cs)]\n [!code-cpp[ProcessModule_ModuleMemorySize#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_16_1.cpp)]"
  syntax:
    content: public int ModuleMemorySize { get; }
    return:
      type: System.Int32
      description: "The size, in bytes, of the memory that the module occupies."
  overload: System.Diagnostics.ProcessModule.ModuleMemorySize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.ModuleName
  id: ModuleName
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: ModuleName
  nameWithType: ProcessModule.ModuleName
  fullName: System.Diagnostics.ProcessModule.ModuleName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the name of the process module."
  remarks: "If the name is longer than the maximum number of characters allowed, it is truncated."
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The ModuleName property is used to display the name of each module.  \n  \n [!code-vb[ProcessModule_ModuleName#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_8_1.vb)]\n [!code-cs[ProcessModule_ModuleName#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_8_1.cs)]\n [!code-cpp[ProcessModule_ModuleName#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_8_1.cpp)]"
  syntax:
    content: public string ModuleName { get; }
    return:
      type: System.String
      description: "The name of the module."
  overload: System.Diagnostics.ProcessModule.ModuleName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessModule.ToString
  id: ToString
  parent: System.Diagnostics.ProcessModule
  langs:
  - csharp
  name: ToString()
  nameWithType: ProcessModule.ToString()
  fullName: System.Diagnostics.ProcessModule.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Converts the name of the module to a string."
  remarks: ''
  example:
  - "The following code example creates a new process for the Notepad.exe application. The code iterates through the <xref:System.Diagnostics.ProcessModuleCollection> class to obtain a <xref:System.Diagnostics.ProcessModule> object for each module in the collection. The ToString method is used to display the name for each module.  \n  \n [!code-cs[ProcessModule_ToString#1](~/add/codesnippet/csharp/m-system.diagnostics.pro_5_1.cs)]\n [!code-vb[ProcessModule_ToString#1](~/add/codesnippet/visualbasic/m-system.diagnostics.pro_5_1.vb)]\n [!code-cpp[ProcessModule_ToString#1](~/add/codesnippet/cpp/m-system.diagnostics.pro_5_1.cpp)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "The value of the <xref:System.Diagnostics.ProcessModule.ModuleName*> property."
  overload: System.Diagnostics.ProcessModule.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.Diagnostics.ProcessModule.BaseAddress
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: BaseAddress
  nameWithType: ProcessModule.BaseAddress
  fullName: System.Diagnostics.ProcessModule.BaseAddress
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.ProcessModule.EntryPointAddress
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: EntryPointAddress
  nameWithType: ProcessModule.EntryPointAddress
  fullName: System.Diagnostics.ProcessModule.EntryPointAddress
- uid: System.Diagnostics.ProcessModule.FileName
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: FileName
  nameWithType: ProcessModule.FileName
  fullName: System.Diagnostics.ProcessModule.FileName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.ProcessModule.FileVersionInfo
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: FileVersionInfo
  nameWithType: ProcessModule.FileVersionInfo
  fullName: System.Diagnostics.ProcessModule.FileVersionInfo
- uid: System.Diagnostics.FileVersionInfo
  parent: System.Diagnostics
  isExternal: false
  name: FileVersionInfo
  nameWithType: FileVersionInfo
  fullName: System.Diagnostics.FileVersionInfo
- uid: System.Diagnostics.ProcessModule.ModuleMemorySize
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ModuleMemorySize
  nameWithType: ProcessModule.ModuleMemorySize
  fullName: System.Diagnostics.ProcessModule.ModuleMemorySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.ProcessModule.ModuleName
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ModuleName
  nameWithType: ProcessModule.ModuleName
  fullName: System.Diagnostics.ProcessModule.ModuleName
- uid: System.Diagnostics.ProcessModule.ToString
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ToString()
  nameWithType: ProcessModule.ToString()
  fullName: System.Diagnostics.ProcessModule.ToString()
- uid: System.Diagnostics.ProcessModule.BaseAddress*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: BaseAddress
  nameWithType: ProcessModule.BaseAddress
- uid: System.Diagnostics.ProcessModule.EntryPointAddress*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: EntryPointAddress
  nameWithType: ProcessModule.EntryPointAddress
- uid: System.Diagnostics.ProcessModule.FileName*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: FileName
  nameWithType: ProcessModule.FileName
- uid: System.Diagnostics.ProcessModule.FileVersionInfo*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: FileVersionInfo
  nameWithType: ProcessModule.FileVersionInfo
- uid: System.Diagnostics.ProcessModule.ModuleMemorySize*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ModuleMemorySize
  nameWithType: ProcessModule.ModuleMemorySize
- uid: System.Diagnostics.ProcessModule.ModuleName*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ModuleName
  nameWithType: ProcessModule.ModuleName
- uid: System.Diagnostics.ProcessModule.ToString*
  parent: System.Diagnostics.ProcessModule
  isExternal: false
  name: ToString
  nameWithType: ProcessModule.ToString
