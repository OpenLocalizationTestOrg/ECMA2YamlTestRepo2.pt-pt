### YamlMime:ManagedReference
items:
- uid: System.Workflow.ComponentModel.ThrowActivity
  id: ThrowActivity
  children:
  - System.Workflow.ComponentModel.ThrowActivity.#ctor
  - System.Workflow.ComponentModel.ThrowActivity.#ctor(System.String)
  - System.Workflow.ComponentModel.ThrowActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.ThrowActivity.Fault
  - System.Workflow.ComponentModel.ThrowActivity.FaultProperty
  - System.Workflow.ComponentModel.ThrowActivity.FaultType
  - System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty
  - System.Workflow.ComponentModel.ThrowActivity.Initialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)
  - System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription
  - System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)
  - System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)
  langs:
  - csharp
  name: ThrowActivity
  nameWithType: ThrowActivity
  fullName: System.Workflow.ComponentModel.ThrowActivity
  type: Class
  summary: "Modelos de gerar uma exceção. Esta classe não pode ser herdada."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]O objetivo de ThrowActivity é permitir que declarativa modelação de gerar uma exceção. O ThrowActivity é funcionalmente equivalente a um <xref:System.Workflow.Activities.CodeActivity>atividade cujo código junto processador emite a exceção indicada.</xref:System.Workflow.Activities.CodeActivity>"
  example:
  - "The following code shows the use of a single throw activity in a workflow to implement exception handling. This code example is part of the Throw SDK sample and is from the ThrowWorkflow.cs file. For more information, see [Using Throw](http://msdn.microsoft.com/en-us/aa5b9546-ec95-4e43-8337-20e26f8d71cc).  \n  \n [!code-cs[WF_Samples#178](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#178)]\n [!code-vb[WF_Samples#178](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#178)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer(typeof(System.Workflow.ComponentModel.Design.ThrowDesigner), typeof(System.ComponentModel.Design.IDesigner))]

      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.ComponentModel.Design.ActivityToolboxItem))]

      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.ComponentModel.ThrowActivity), "Resources.Throw.png")]

      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public sealed class ThrowActivity : System.Workflow.ComponentModel.Activity, System.Workflow.ComponentModel.Design.ITypeFilterProvider, System.Workflow.ComponentModel.IDynamicPropertyTypeProvider
  inheritance:
  - System.Object
  - System.Workflow.ComponentModel.DependencyObject
  - System.Workflow.ComponentModel.Activity
  implements:
  - System.Workflow.ComponentModel.Design.ITypeFilterProvider
  - System.Workflow.ComponentModel.IDynamicPropertyTypeProvider
  inheritedMembers:
  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty
  - System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.Activity.Canceling
  - System.Workflow.ComponentModel.Activity.CancelingEvent
  - System.Workflow.ComponentModel.Activity.Clone
  - System.Workflow.ComponentModel.Activity.Closed
  - System.Workflow.ComponentModel.Activity.ClosedEvent
  - System.Workflow.ComponentModel.Activity.Compensating
  - System.Workflow.ComponentModel.Activity.CompensatingEvent
  - System.Workflow.ComponentModel.Activity.Description
  - System.Workflow.ComponentModel.Activity.Enabled
  - System.Workflow.ComponentModel.Activity.Executing
  - System.Workflow.ComponentModel.Activity.ExecutingEvent
  - System.Workflow.ComponentModel.Activity.ExecutionResult
  - System.Workflow.ComponentModel.Activity.ExecutionStatus
  - System.Workflow.ComponentModel.Activity.Faulting
  - System.Workflow.ComponentModel.Activity.FaultingEvent
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)
  - System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)
  - System.Workflow.ComponentModel.Activity.IsDynamicActivity
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.Name
  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Parent
  - System.Workflow.ComponentModel.Activity.QualifiedName
  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)
  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)
  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.StatusChanged
  - System.Workflow.ComponentModel.Activity.StatusChangedEvent
  - System.Workflow.ComponentModel.Activity.ToString
  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)
  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)
  - System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId
  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.DesignMode
  - System.Workflow.ComponentModel.DependencyObject.Dispose
  - System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)
  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)
  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties
  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)
  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject
  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)
  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.Site
  - System.Workflow.ComponentModel.DependencyObject.UserData
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.#ctor
  id: '#ctor'
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: ThrowActivity()
  nameWithType: ThrowActivity.ThrowActivity()
  fullName: System.Workflow.ComponentModel.ThrowActivity.ThrowActivity()
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Workflow.ComponentModel.ThrowActivity&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following code shows the use of a single throw activity in a workflow to implement exception handling. This example includes invoking the constructor. This code example is part of the Throw SDK sample and is from the ThrowWorkflow.cs file. For more information, see [Using Throw](http://msdn.microsoft.com/en-us/aa5b9546-ec95-4e43-8337-20e26f8d71cc).  \n  \n [!code-cs[WF_Samples#178](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#178)]\n [!code-vb[WF_Samples#178](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#178)]"
  syntax:
    content: public ThrowActivity ();
    parameters: []
  overload: System.Workflow.ComponentModel.ThrowActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: ThrowActivity(String)
  nameWithType: ThrowActivity.ThrowActivity(String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.ThrowActivity(String)
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Workflow.ComponentModel.ThrowActivity&quot;> </xref> classe e inicializa o respetivo nome."
  syntax:
    content: public ThrowActivity (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome definido pelo utilizador da atividade."
  overload: System.Workflow.ComponentModel.ThrowActivity.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identifier</code>é uma referência nula (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic)."
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: Execute(ActivityExecutionContext)
  nameWithType: ThrowActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.ThrowActivity.Execute(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: protected override sealed System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "A adicionar."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "A adicionar."
  overload: System.Workflow.ComponentModel.ThrowActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.Fault
  id: Fault
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: Fault
  nameWithType: ThrowActivity.Fault
  fullName: System.Workflow.ComponentModel.ThrowActivity.Fault
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Obtém ou define o objecto de exceção que deve ser emitido pelo <xref href=&quot;System.Workflow.ComponentModel.ThrowActivity&quot;> </xref>."
  remarks: "Aceder indiretamente cada propriedade pública e o evento deste tipo, a resolução de uma propriedade de dependência correspondente. Esta propriedade de dependência é campo estático público com o nome `XProperty` ou `XEvent`, em que X é a propriedade correspondente."
  syntax:
    content: public Exception Fault { get; set; }
    return:
      type: System.Exception
      description: "O <xref:System.Exception>associados a esta instância.</xref:System.Exception>"
  overload: System.Workflow.ComponentModel.ThrowActivity.Fault*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultProperty
  id: FaultProperty
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: FaultProperty
  nameWithType: ThrowActivity.FaultProperty
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultProperty
  type: Field
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "O <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;> </xref> que representa o <xref:System.Workflow.ComponentModel.ThrowActivity.Fault*>propriedade para esta instância.</xref:System.Workflow.ComponentModel.ThrowActivity.Fault*>"
  remarks: '[!INCLUDE[DependencyPropertyRemark](~/add/includes/dependencypropertyremark-md.md)]'
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty FaultProperty;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultType
  id: FaultType
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: FaultType
  nameWithType: ThrowActivity.FaultType
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultType
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Obtém ou define o tipo de exceção que deve ser emitida pelo <xref href=&quot;System.Workflow.ComponentModel.ThrowActivity&quot;> </xref>."
  remarks: ''
  example:
  - "The following code shows the usage of a single throw activity within a workflow to implement exception handling. This example shows setting the FaultType to `null`. This code example is part of the Throw SDK sample and is from the ThrowWorkflow.cs file. For more information, see [Using Throw](http://msdn.microsoft.com/en-us/aa5b9546-ec95-4e43-8337-20e26f8d71cc).  \n  \n [!code-cs[WF_Samples#178](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#178)]\n [!code-vb[WF_Samples#178](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#178)]"
  syntax:
    content: public Type FaultType { get; set; }
    return:
      type: System.Type
      description: "O tipo que representa o índice de falhas associado a esta instância."
  overload: System.Workflow.ComponentModel.ThrowActivity.FaultType*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty
  id: FaultTypeProperty
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: FaultTypeProperty
  nameWithType: ThrowActivity.FaultTypeProperty
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty
  type: Field
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "O <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;> </xref> que representa o <xref:System.Workflow.ComponentModel.ThrowActivity.FaultType*>propriedade para esta instância.</xref:System.Workflow.ComponentModel.ThrowActivity.FaultType*>"
  remarks: "Aceder indiretamente cada propriedade pública e o evento deste tipo, a resolução de uma propriedade de dependência correspondente. Esta propriedade de dependência é campo estático público com o nome `XProperty` ou `XEvent`, em que X é a propriedade correspondente.       [!INCLUDE[DependencyPropertyRemark](~/add/includes/dependencypropertyremark-md.md)]"
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty FaultTypeProperty;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.Initialize(System.IServiceProvider)
  id: Initialize(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: Initialize(IServiceProvider)
  nameWithType: ThrowActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.ComponentModel.ThrowActivity.Initialize(IServiceProvider)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: protected override void Initialize (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "A adicionar."
  overload: System.Workflow.ComponentModel.ThrowActivity.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)
  id: System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)
  isEii: true
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Devolve um valor que indica se especificado <xref:System.Type>pode ser filtrada.</xref:System.Type>"
  syntax:
    content: bool ITypeFilterProvider.CanFilterType (Type type, bool throwOnError);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>verificar a existência de filtragem</xref:System.Type>"
    - id: throwOnError
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para acionar uma excepção quando o <xref:System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType*>é processada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType*>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o tipo especificado pode ser filtrado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription
  id: System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription
  isEii: true
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Obtém a descrição para o filtro a apresentar na caixa de diálogo do browser de classe."
  syntax:
    content: string System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription { get; }
    return:
      type: System.String
      description: "A <xref:System.String>que contém a descrição do filtro.</xref:System.String>"
  overload: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)
  id: System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)
  isEii: true
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Devolve o tipo de acesso para a propriedade especificada."
  remarks: "Utilizada no momento da compilação para confirmar se as propriedades estão vinculadas corretamente entre si. Sem esta interface são inferidas a estas informações diretamente a partir de getter/setters de propriedade."
  syntax:
    content: System.Workflow.ComponentModel.Compiler.AccessTypes IDynamicPropertyTypeProvider.GetAccessType (IServiceProvider serviceProvider, string propertyName);
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
      description: "Um objeto que implementa <xref:System.IServiceProvider>para fornecer acesso aos serviços de tempo de design se forem necessárias.</xref:System.IServiceProvider>"
    - id: propertyName
      type: System.String
      description: "O nome da propriedade."
    return:
      type: System.Workflow.ComponentModel.Compiler.AccessTypes
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Compiler.AccessTypes&quot;> </xref> valor de enumeração que indica o nível de acesso da propriedade."
  overload: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)
  id: System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)
  isEii: true
  parent: System.Workflow.ComponentModel.ThrowActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "Devolve o <xref:System.Type>da propriedade especificada.</xref:System.Type>"
  remarks: "Utilizada no momento da compilação para confirmar se as propriedades estão vinculadas corretamente entre si."
  syntax:
    content: Type IDynamicPropertyTypeProvider.GetPropertyType (IServiceProvider serviceProvider, string propertyName);
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
      description: "Um objeto que implementa <xref:System.IServiceProvider>para fornecer acesso aos serviços de tempo de design se forem necessárias.</xref:System.IServiceProvider>"
    - id: propertyName
      type: System.String
      description: "O nome da propriedade."
    return:
      type: System.Type
      description: "O <xref:System.Type>para a propriedade cujo nome é transmitido como o <code> propertyName  </code>parâmetro.</xref:System.Type>"
  overload: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.ComponentModel.Activity
  isExternal: false
  name: System.Workflow.ComponentModel.Activity
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.ComponentModel.ThrowActivity.#ctor
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: ThrowActivity()
  nameWithType: ThrowActivity.ThrowActivity()
  fullName: System.Workflow.ComponentModel.ThrowActivity.ThrowActivity()
- uid: System.Workflow.ComponentModel.ThrowActivity.#ctor(System.String)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: ThrowActivity(String)
  nameWithType: ThrowActivity.ThrowActivity(String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.ThrowActivity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.ComponentModel.ThrowActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Execute(ActivityExecutionContext)
  nameWithType: ThrowActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.ThrowActivity.Execute(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.ActivityExecutionStatus
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatus
  nameWithType: ActivityExecutionStatus
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus
- uid: System.Workflow.ComponentModel.ActivityExecutionContext
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionContext
  nameWithType: ActivityExecutionContext
  fullName: System.Workflow.ComponentModel.ActivityExecutionContext
- uid: System.Workflow.ComponentModel.ThrowActivity.Fault
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Fault
  nameWithType: ThrowActivity.Fault
  fullName: System.Workflow.ComponentModel.ThrowActivity.Fault
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultProperty
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: FaultProperty
  nameWithType: ThrowActivity.FaultProperty
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultProperty
- uid: System.Workflow.ComponentModel.DependencyProperty
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Workflow.ComponentModel.DependencyProperty
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultType
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: FaultType
  nameWithType: ThrowActivity.FaultType
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: FaultTypeProperty
  nameWithType: ThrowActivity.FaultTypeProperty
  fullName: System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty
- uid: System.Workflow.ComponentModel.ThrowActivity.Initialize(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Initialize(IServiceProvider)
  nameWithType: ThrowActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.ComponentModel.ThrowActivity.Initialize(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider,String)
- uid: System.Workflow.ComponentModel.Compiler.AccessTypes
  parent: System.Workflow.ComponentModel.Compiler
  isExternal: false
  name: AccessTypes
  nameWithType: AccessTypes
  fullName: System.Workflow.ComponentModel.Compiler.AccessTypes
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
  fullName: System.Workflow.ComponentModel.ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider,String)
- uid: System.Workflow.ComponentModel.ThrowActivity.#ctor*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: ThrowActivity
  nameWithType: ThrowActivity.ThrowActivity
- uid: System.Workflow.ComponentModel.ThrowActivity.Execute*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Execute
  nameWithType: ThrowActivity.Execute
- uid: System.Workflow.ComponentModel.ThrowActivity.Fault*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Fault
  nameWithType: ThrowActivity.Fault
- uid: System.Workflow.ComponentModel.ThrowActivity.FaultType*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: FaultType
  nameWithType: ThrowActivity.FaultType
- uid: System.Workflow.ComponentModel.ThrowActivity.Initialize*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: Initialize
  nameWithType: ThrowActivity.Initialize
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType
- uid: System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType*
  parent: System.Workflow.ComponentModel.ThrowActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType
  nameWithType: ThrowActivity.System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType
