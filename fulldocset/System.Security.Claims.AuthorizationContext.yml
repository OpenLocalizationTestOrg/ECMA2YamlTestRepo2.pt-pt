### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.AuthorizationContext
  id: AuthorizationContext
  children:
  - System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.Collections.ObjectModel.Collection{System.Security.Claims.Claim},System.Collections.ObjectModel.Collection{System.Security.Claims.Claim})
  - System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String)
  - System.Security.Claims.AuthorizationContext.Action
  - System.Security.Claims.AuthorizationContext.Principal
  - System.Security.Claims.AuthorizationContext.Resource
  langs:
  - csharp
  name: AuthorizationContext
  nameWithType: AuthorizationContext
  fullName: System.Security.Claims.AuthorizationContext
  type: Class
  summary: "Fornece informações de contexto de um evento de autorização. Isto inclui o principal que representa o autor da chamada, o recurso que está a ser pedido e a ação que está a ser efetuada."
  remarks: "A classe de AuthorizationContext representa o contexto que é utilizado por um Gestor de autorização de afirmações, uma implementação do <xref:System.Security.Claims.ClaimsAuthorizationManager>classe, para determinar se um principal (assunto) deve estar autorizado a efetuar uma ação especificada num recursos específico.</xref:System.Security.Claims.ClaimsAuthorizationManager> O Gestor de autorização de afirmações avalia o contexto de autorização no <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>método e o nega ou concede acesso com base nas afirmações apresentado pelo principal.</xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>       O <xref:System.Security.Claims.AuthorizationContext.Principal%2A>propriedade contém o principal para o qual está a ser pedida autorização, o <xref:System.Security.Claims.AuthorizationContext.Resource%2A>propriedade contém recursos no qual está a ser autorizado o principal, e o <xref:System.Security.Claims.AuthorizationContext.Action%2A>propriedade contém as ações que o principal de que pretende executar no recurso.</xref:System.Security.Claims.AuthorizationContext.Action%2A> </xref:System.Security.Claims.AuthorizationContext.Resource%2A> </xref:System.Security.Claims.AuthorizationContext.Principal%2A> O recurso e a ação são representados como um conjunto de afirmações; No entanto, na maioria dos casos, cada coleção contém uma afirmação única."
  example:
  - "The code example that is used in the AuthorizationContext topic is taken from the `Claims Based Authorization` sample. This sample provides a custom claims authorization manager that can authorize subjects based on a policy that is specified in configuration. This custom manager consists of three basic components: a class derived from <xref:System.Security.Claims.ClaimsAuthorizationManager> that implements the manager, the `ResourceAction` class that pairs a resource and an action, and a policy reader that reads and compiles policy that is specified in the configuration file. This compiled policy can then be used by the claims authorization manager to evaluate a principal in order to authorize access to resources. Not all elements are shown for the sake of brevity. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code shows the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> method for the custom claims authorization manager. A function that evaluates the principal based on the resource and action specified in the AuthorizationContext is invoked. This function returns either `true` or `false`, which either grants or denies access to the principal.  \n  \n [!code-cs[WifClaimsBasedAuthorization#3](~/add/codesnippet/csharp/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  \n[!code-cs[WifClaimsBasedAuthorization#5](~/add/codesnippet/csharp/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  \n  \n The following XML shows an example of the authorization policy that was specified in configuration. In the first policy, the principal must possess one of the specified claims in order to perform the specified action on the specified resource. In the second policy, the principal must possess both claims to be able to perform the specified action on the specified resource. In all others, the principal is automatically granted access regardless of the claims it possesses.  \n  \n```xml  \n<system.identityModel>  \n  <identityConfiguration>  \n    <claimsAuthorizationManager type=\"ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary\">  \n      <policy resource=\"http://localhost:28491/Developers.aspx\" action=\"GET\">  \n        <or>  \n          <claim claimType=\"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\" claimValue=\"developer\" />  \n          <claim claimType=\"http://schemas.xmlsoap.org/claims/Group\" claimValue=\"Administrator\" />  \n        </or>  \n      </policy>  \n      <policy resource=\"http://localhost:28491/Administrators.aspx\" action=\"GET\">  \n        <and>  \n          <claim claimType=\"http://schemas.xmlsoap.org/claims/Group\" claimValue=\"Administrator\" />  \n          <claim claimType=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country\" claimValue=\"USA\" />  \n        </and>  \n      </policy>  \n      <policy resource=\"http://localhost:28491/Default.aspx\" action=\"GET\">  \n      </policy>  \n      <policy resource=\"http://localhost:28491/\" action=\"GET\">  \n      </policy>  \n      <policy resource=\"http://localhost:28491/Claims.aspx\" action=\"GET\">  \n      </policy>  \n    </claimsAuthorizationManager>  \n  \n    ...  \n  \n  </identityConfiguration>  \n</system.identityModel>  \n```"
  syntax:
    content: public class AuthorizationContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.Collections.ObjectModel.Collection{System.Security.Claims.Claim},System.Collections.ObjectModel.Collection{System.Security.Claims.Claim})
  id: '#ctor(System.Security.Claims.ClaimsPrincipal,System.Collections.ObjectModel.Collection{System.Security.Claims.Claim},System.Collections.ObjectModel.Collection{System.Security.Claims.Claim})'
  parent: System.Security.Claims.AuthorizationContext
  langs:
  - csharp
  name: AuthorizationContext(ClaimsPrincipal,Collection<Claim>,Collection<Claim>)
  nameWithType: AuthorizationContext.AuthorizationContext(ClaimsPrincipal,Collection<Claim>,Collection<Claim>)
  fullName: System.Security.Claims.AuthorizationContext.AuthorizationContext(ClaimsPrincipal,Collection<Claim>,Collection<Claim>)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.Security.Claims
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Claims.AuthorizationContext&quot;> </xref> classe com o principal especificado, afirmações de recurso e afirmações de ação."
  syntax:
    content: public AuthorizationContext (System.Security.Claims.ClaimsPrincipal principal, System.Collections.ObjectModel.Collection<System.Security.Claims.Claim> resource, System.Collections.ObjectModel.Collection<System.Security.Claims.Claim> action);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "O principal para o qual autorização é verificado."
    - id: resource
      type: System.Collections.ObjectModel.Collection{System.Security.Claims.Claim}
      description: "Uma coleção de afirmações que representa o recurso para o qual é possível autorizar o principal. A colecção contém, normalmente, um único elemento."
    - id: action
      type: System.Collections.ObjectModel.Collection{System.Security.Claims.Claim}
      description: "Uma coleção de afirmações que representa a ação ser executada no recurso. A colecção contém, normalmente, um único elemento."
  overload: System.Security.Claims.AuthorizationContext.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>principal</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>resource</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>action</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String)
  id: '#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String)'
  parent: System.Security.Claims.AuthorizationContext
  langs:
  - csharp
  name: AuthorizationContext(ClaimsPrincipal,String,String)
  nameWithType: AuthorizationContext.AuthorizationContext(ClaimsPrincipal,String,String)
  fullName: System.Security.Claims.AuthorizationContext.AuthorizationContext(ClaimsPrincipal,String,String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.Security.Claims
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Claims.AuthorizationContext&quot;> </xref> classe com o principal especificado, o nome do recurso e o nome de ação."
  remarks: "O <xref:System.Security.Claims.AuthorizationContext.Action%2A>propriedade é inicializada para conter uma afirmação de nome (<xref:System.Security.Claims.ClaimTypes.Name?displayProperty=fullName>) que tem o valor especificado pelo `action` parâmetro.</xref:System.Security.Claims.ClaimTypes.Name?displayProperty=fullName> </xref:System.Security.Claims.AuthorizationContext.Action%2A> O <xref:System.Security.Claims.AuthorizationContext.Resource%2A>propriedade é inicializada para conter uma afirmação de nome que tem o valor especificado pelo `resource` parâmetro.</xref:System.Security.Claims.AuthorizationContext.Resource%2A>"
  syntax:
    content: public AuthorizationContext (System.Security.Claims.ClaimsPrincipal principal, string resource, string action);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "O principal para o qual autorização é verificado."
    - id: resource
      type: System.String
      description: "O recurso para o qual é possível autorizar o principal. O recurso está especificado como o valor de uma afirmação de nome."
    - id: action
      type: System.String
      description: "A ação a ser efetuada no recurso. A ação está especificada como o valor de uma afirmação de nome."
  overload: System.Security.Claims.AuthorizationContext.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>principal</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>resource</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>action</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.AuthorizationContext.Action
  id: Action
  parent: System.Security.Claims.AuthorizationContext
  langs:
  - csharp
  name: Action
  nameWithType: AuthorizationContext.Action
  fullName: System.Security.Claims.AuthorizationContext.Action
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.Security.Claims
  summary: "Obtém a ação para o qual é possível autorizar o principal."
  remarks: "A colecção contém, normalmente, um único elemento."
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Security.Claims.Claim> Action { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Security.Claims.Claim}
      description: "Uma coleção de afirmações que representa as ações relevantes para o pedido."
  overload: System.Security.Claims.AuthorizationContext.Action*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.AuthorizationContext.Principal
  id: Principal
  parent: System.Security.Claims.AuthorizationContext
  langs:
  - csharp
  name: Principal
  nameWithType: AuthorizationContext.Principal
  fullName: System.Security.Claims.AuthorizationContext.Principal
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.Security.Claims
  summary: "Obtém o principal (assunto) para que autorização está a ser pedida."
  syntax:
    content: public System.Security.Claims.ClaimsPrincipal Principal { get; }
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "O principal para o qual está a ser pedida autorização."
  overload: System.Security.Claims.AuthorizationContext.Principal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.AuthorizationContext.Resource
  id: Resource
  parent: System.Security.Claims.AuthorizationContext
  langs:
  - csharp
  name: Resource
  nameWithType: AuthorizationContext.Resource
  fullName: System.Security.Claims.AuthorizationContext.Resource
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.Security.Claims
  summary: "Obtém o recurso no qual o principal está ser autorizado."
  remarks: "A colecção contém, normalmente, um único elemento."
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Security.Claims.Claim> Resource { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Security.Claims.Claim}
      description: "Uma coleção de afirmações que representa o recurso."
  overload: System.Security.Claims.AuthorizationContext.Resource*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.Collections.ObjectModel.Collection{System.Security.Claims.Claim},System.Collections.ObjectModel.Collection{System.Security.Claims.Claim})
  parent: System.Security.Claims.AuthorizationContext
  isExternal: false
  name: AuthorizationContext(ClaimsPrincipal,Collection<Claim>,Collection<Claim>)
  nameWithType: AuthorizationContext.AuthorizationContext(ClaimsPrincipal,Collection<Claim>,Collection<Claim>)
  fullName: System.Security.Claims.AuthorizationContext.AuthorizationContext(ClaimsPrincipal,Collection<Claim>,Collection<Claim>)
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.Collections.ObjectModel.Collection{System.Security.Claims.Claim}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Claim>
  nameWithType: Collection<Claim>
  fullName: System.Collections.ObjectModel.Collection<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.AuthorizationContext.#ctor(System.Security.Claims.ClaimsPrincipal,System.String,System.String)
  parent: System.Security.Claims.AuthorizationContext
  isExternal: false
  name: AuthorizationContext(ClaimsPrincipal,String,String)
  nameWithType: AuthorizationContext.AuthorizationContext(ClaimsPrincipal,String,String)
  fullName: System.Security.Claims.AuthorizationContext.AuthorizationContext(ClaimsPrincipal,String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.AuthorizationContext.Action
  parent: System.Security.Claims.AuthorizationContext
  isExternal: false
  name: Action
  nameWithType: AuthorizationContext.Action
  fullName: System.Security.Claims.AuthorizationContext.Action
- uid: System.Security.Claims.AuthorizationContext.Principal
  parent: System.Security.Claims.AuthorizationContext
  isExternal: false
  name: Principal
  nameWithType: AuthorizationContext.Principal
  fullName: System.Security.Claims.AuthorizationContext.Principal
- uid: System.Security.Claims.AuthorizationContext.Resource
  parent: System.Security.Claims.AuthorizationContext
  isExternal: false
  name: Resource
  nameWithType: AuthorizationContext.Resource
  fullName: System.Security.Claims.AuthorizationContext.Resource
- uid: System.Security.Claims.AuthorizationContext.#ctor*
  parent: System.Security.Claims.AuthorizationContext
  isExternal: false
  name: AuthorizationContext
  nameWithType: AuthorizationContext.AuthorizationContext
- uid: System.Security.Claims.AuthorizationContext.Action*
  parent: System.Security.Claims.AuthorizationContext
  isExternal: false
  name: Action
  nameWithType: AuthorizationContext.Action
- uid: System.Security.Claims.AuthorizationContext.Principal*
  parent: System.Security.Claims.AuthorizationContext
  isExternal: false
  name: Principal
  nameWithType: AuthorizationContext.Principal
- uid: System.Security.Claims.AuthorizationContext.Resource*
  parent: System.Security.Claims.AuthorizationContext
  isExternal: false
  name: Resource
  nameWithType: AuthorizationContext.Resource
