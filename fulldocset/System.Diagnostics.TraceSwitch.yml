### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.TraceSwitch
  id: TraceSwitch
  children:
  - System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)
  - System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.TraceSwitch.Level
  - System.Diagnostics.TraceSwitch.OnSwitchSettingChanged
  - System.Diagnostics.TraceSwitch.OnValueChanged
  - System.Diagnostics.TraceSwitch.TraceError
  - System.Diagnostics.TraceSwitch.TraceInfo
  - System.Diagnostics.TraceSwitch.TraceVerbose
  - System.Diagnostics.TraceSwitch.TraceWarning
  langs:
  - csharp
  name: TraceSwitch
  nameWithType: TraceSwitch
  fullName: System.Diagnostics.TraceSwitch
  type: Class
  summary: "Provides a multilevel switch to control tracing and debug output without recompiling your code."
  remarks: "You can use a trace switch to filter out messages based on their importance. The TraceSwitch class provides the <xref:System.Diagnostics.TraceSwitch.TraceError%2A>, <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>, <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>, and <xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A> properties to test the level of the switch. The <xref:System.Diagnostics.TraceSwitch.Level%2A> property gets or sets the switch&quot;s <xref:System.Diagnostics.TraceLevel>.       You can set the level of a TraceSwitch through the application configuration file and then use the configured TraceSwitch level in your application. Alternately, you can create a TraceSwitch in your code and set the level directly to instrument a specific section of code.       To configure a TraceSwitch, edit the   for your application. In this file, you can add or remove a switch, set a switch&quot;s value, or clear all the switches previously set by the application. The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <switches>         <add name=&quot;mySwitch&quot; value=&quot;1&quot; />       </switches>     </system.diagnostics>   </configuration>   ```       This configuration section defines a TraceSwitch with the <xref:System.Diagnostics.Switch.DisplayName%2A> set to `mySwitch`, and the <xref:System.Diagnostics.TraceSwitch.Level%2A> set to 1, which corresponds to the enumeration value <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.      > [!NOTE] >  In the .NET Framework version 2.0, you can use text to specify the value for a switch. For example, `true` for a <xref:System.Diagnostics.BooleanSwitch> or the text representing an enumeration value, such as `Error` for a TraceSwitch. The line `<add name=&quot;mySwitch&quot; value=&quot;Error&quot; />` is equivalent to `<add name=&quot;mySwitch&quot; value=&quot;1&quot; />`.       In your application, you can use the configured switch level by creating a TraceSwitch with the same name, as shown in the following example:       [!code-vb[Classic TraceSwitch.TraceError Example#3](~/add/codesnippet/visualbasic/t-system.diagnostics.tra_0_1.vb)]  [!code-cpp[Classic TraceSwitch.TraceError Example#3](~/add/codesnippet/cpp/t-system.diagnostics.tra_0_1.cpp)]  [!code-cs[Classic TraceSwitch.TraceError Example#3](~/add/codesnippet/csharp/t-system.diagnostics.tra_0_1.cs)]       By default, the switch <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set using the value specified in the configuration file. If the <xref:System.Diagnostics.TraceSwitch.%23ctor%2A> constructor cannot find initial switch settings in the configuration file, the <xref:System.Diagnostics.TraceSwitch.Level%2A> of the new switch defaults to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.       You must enable tracing or debugging to use a switch. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.      -   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.      -   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.      > [!NOTE] >  These debug and trace compiler switches are not required when using the TraceSwitch class in isolation. They are only required in conjunction with <xref:System.Diagnostics.Trace> or <xref:System.Diagnostics.Debug> methods that are conditionally compiled.       For more information on instrumenting your application, see <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace>. For more information about configuring and using trace switches, see [Trace Switches](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] >  To improve performance, you can make TraceSwitch members `static` in your class."
  example:
  - "The following code example creates a new TraceSwitch and uses the switch to determine whether to print error messages. The switch is created at the class level. `MyMethod` writes the first error message if the <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName> or higher. However, `MyMethod` does not write the second error message if the <xref:System.Diagnostics.TraceSwitch.Level%2A> is less than <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.  \n  \n [!code-cs[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/csharp/t-system.diagnostics.tra_0_2.cs)]\n [!code-cpp[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/cpp/t-system.diagnostics.tra_0_2.cpp)]\n [!code-vb[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.tra_0_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.SwitchLevel(typeof(System.Diagnostics.TraceLevel))]

      public class TraceSwitch : System.Diagnostics.Switch
  inheritance:
  - System.Object
  - System.Diagnostics.Switch
  implements: []
  inheritedMembers:
  - System.Diagnostics.Switch.Attributes
  - System.Diagnostics.Switch.Description
  - System.Diagnostics.Switch.DisplayName
  - System.Diagnostics.Switch.GetSupportedAttributes
  - System.Diagnostics.Switch.SwitchSetting
  - System.Diagnostics.Switch.Value
  platform:
  - net462
- uid: System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  name: TraceSwitch(String,String)
  nameWithType: TraceSwitch.TraceSwitch(String,String)
  fullName: System.Diagnostics.TraceSwitch.TraceSwitch(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.TraceSwitch&quot;></xref> class, using the specified display name and description."
  remarks: "To set the level of your <xref:System.Diagnostics.TraceSwitch>, edit the configuration file that corresponds to the name of your application. In this file, you can add a switch and set its value, remove a switch, or clear all the switches previously set by the application. The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <switches>         <add name=&quot;mySwitch&quot; value=&quot;1&quot; />       </switches>     </system.diagnostics>   </configuration>   ```      > [!NOTE] >  In the .NET Framework version 2.0, you can use text to specify the value for a switch. For example, `true` for a <xref:System.Diagnostics.BooleanSwitch> or the text representing an enumeration value, such as `Error` for a <xref:System.Diagnostics.TraceSwitch>. The line `<add name=&quot;mySwitch&quot; value=&quot;Error&quot; />` is equivalent to `<add name=&quot;mySwitch&quot; value=&quot;1&quot; />`.       In your application, you can use the configured switch level by creating a <xref:System.Diagnostics.TraceSwitch> with the same name, as shown in the following example:       [!code-vb[Classic TraceSwitch.TraceError Example#3](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_27_1.vb)]  [!code-cpp[Classic TraceSwitch.TraceError Example#3](~/add/codesnippet/cpp/m-system.diagnostics.tra_27_1.cpp)]  [!code-cs[Classic TraceSwitch.TraceError Example#3](~/add/codesnippet/csharp/m-system.diagnostics.tra_27_1.cs)]       When the <xref:System.Diagnostics.TraceSwitch.%23ctor%2A> constructor cannot find initial switch settings in the configuration file, the <xref:System.Diagnostics.TraceSwitch.Level%2A> property of the new switch is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.       The <xref:System.Diagnostics.TraceSwitch> class provides the <xref:System.Diagnostics.TraceSwitch.TraceError%2A>, <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>, <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>, and <xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A> properties to test the <xref:System.Diagnostics.TraceSwitch.Level%2A> of the switch. The <xref:System.Diagnostics.TraceSwitch.Level%2A> property gets or sets the switch&quot;s <xref:System.Diagnostics.TraceLevel>.      > [!NOTE] >  To improve performance, you can make <xref:System.Diagnostics.TraceSwitch> members `static` in your class."
  example:
  - "The following code example creates a new <xref:System.Diagnostics.TraceSwitch> and uses the switch to determine whether to print error messages. The switch is created at the class level. `MyMethod` writes the first error message if the <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName> or higher. However, `MyMethod` does not write the second error message if the <xref:System.Diagnostics.TraceSwitch.Level%2A> is less than <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.  \n  \n [!code-cs[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_27_2.cs)]\n [!code-cpp[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_27_2.cpp)]\n [!code-vb[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_27_2.vb)]"
  syntax:
    content: public TraceSwitch (string displayName, string description);
    parameters:
    - id: displayName
      type: System.String
      description: "The name to display on a user interface."
    - id: description
      type: System.String
      description: "The description of the switch."
  overload: System.Diagnostics.TraceSwitch.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  name: TraceSwitch(String,String,String)
  nameWithType: TraceSwitch.TraceSwitch(String,String,String)
  fullName: System.Diagnostics.TraceSwitch.TraceSwitch(String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.TraceSwitch&quot;></xref> class, using the specified display name, description, and default value for the switch."
  remarks: "The `displayName` parameter is used to set the value of the <xref:System.Diagnostics.Switch.DisplayName%2A> property, the `description` parameter is use to set the value of the <xref:System.Diagnostics.Switch.Description%2A> property, and the `defaultSwitchValue` parameter is saved as a field and used to initialize the <xref:System.Diagnostics.Switch.Value%2A> property on first reference. See the <xref:System.Diagnostics.TraceSwitch.%23ctor%28System.String%2CSystem.String%29> constructor for more information and a code example."
  syntax:
    content: public TraceSwitch (string displayName, string description, string defaultSwitchValue);
    parameters:
    - id: displayName
      type: System.String
      description: "The name to display on a user interface."
    - id: description
      type: System.String
      description: "The description of the switch."
    - id: defaultSwitchValue
      type: System.String
      description: "The default value of the switch."
  overload: System.Diagnostics.TraceSwitch.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceSwitch.Level
  id: Level
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  name: Level
  nameWithType: TraceSwitch.Level
  fullName: System.Diagnostics.TraceSwitch.Level
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets the trace level that determines the messages the switch allows."
  remarks: "To set the level of your <xref:System.Diagnostics.TraceSwitch>, edit the configuration file that corresponds to the name of your application. In this file, you can add a switch and set its value, remove a switch, or clear all the switches previously set by the application. The configuration file should be formatted like the following example:      ```   <configuration>     <system.diagnostics>       <switches>         <add name=&quot;mySwitch&quot; value=&quot;0&quot; />         <add name=&quot;myNewSwitch&quot; value=&quot;3&quot; />         <remove name=&quot;mySwitch&quot; />         <clear/>       </switches>     </system.diagnostics>   </configuration>   ```      > [!NOTE] >  In the .NET Framework version 2.0, you can use text to specify the value for a switch. For example, `true` for a <xref:System.Diagnostics.BooleanSwitch> or the text representing an enumeration value, such as `Error` for a <xref:System.Diagnostics.TraceSwitch>. The line `<add name=&quot;mySwitch&quot; value=&quot;Error&quot; />` is equivalent to `<add name=&quot;mySwitch&quot; value=&quot;1&quot; />`.       When the <xref:System.Diagnostics.TraceSwitch.%23ctor%2A> constructor cannot find initial switch settings in the configuration file, the Level property of the new switch is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.       Setting this property updates the <xref:System.Diagnostics.TraceSwitch.TraceError%2A>, <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>, <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>, and <xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A> properties to reflect the new value."
  example:
  - "The following code example creates a new <xref:System.Diagnostics.TraceSwitch> and uses the switch to determine whether to print error messages. The switch is created at the class level. `MyMethod` writes the first error message if the Level property is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName> or higher. However, `MyMethod` does not write the second error message if the Level is less than <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.  \n  \n [!code-cpp[Classic TraceSwitch.Level Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_1_1.cpp)]\n [!code-cs[Classic TraceSwitch.Level Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_1_1.cs)]\n [!code-vb[Classic TraceSwitch.Level Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_1_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceLevel Level { get; set; }
    return:
      type: System.Diagnostics.TraceLevel
      description: "One of the <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref> values that that specifies the level of messages that are allowed by the switch."
  overload: System.Diagnostics.TraceSwitch.Level*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Level is set to a value that is not one of the <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref> values."
  platform:
  - net462
- uid: System.Diagnostics.TraceSwitch.OnSwitchSettingChanged
  id: OnSwitchSettingChanged
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  name: OnSwitchSettingChanged()
  nameWithType: TraceSwitch.OnSwitchSettingChanged()
  fullName: System.Diagnostics.TraceSwitch.OnSwitchSettingChanged()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Updates and corrects the level for this switch."
  remarks: "The OnSwitchSettingChanged method is used by the .NET framework to validate and correct the value of a switch initialized via a configuration file. A message is written to all trace listeners if the switch value specified in the configuration file is not defined by the <xref:System.Diagnostics.TraceLevel> enumeration and the switch is set to a defined value.       If you attempt in your code to set the <xref:System.Diagnostics.TraceSwitch.Level%2A> property to a value that is not defined by the <xref:System.Diagnostics.TraceLevel> enumeration, an <xref:System.ArgumentException> exception is thrown."
  syntax:
    content: protected override void OnSwitchSettingChanged ();
    parameters: []
  overload: System.Diagnostics.TraceSwitch.OnSwitchSettingChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceSwitch.OnValueChanged
  id: OnValueChanged
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  name: OnValueChanged()
  nameWithType: TraceSwitch.OnValueChanged()
  fullName: System.Diagnostics.TraceSwitch.OnValueChanged()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Sets the <xref:System.Diagnostics.Switch.SwitchSetting*> property to the integer equivalent of the <xref:System.Diagnostics.Switch.Value*> property."
  remarks: "This method is called internally when the <xref:System.Diagnostics.Switch.Value%2A> property of the switch changes. The method ensures that the properties relating to the switch&quot;s value reflect the new value."
  syntax:
    content: protected override void OnValueChanged ();
    parameters: []
  overload: System.Diagnostics.TraceSwitch.OnValueChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceSwitch.TraceError
  id: TraceError
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  name: TraceError
  nameWithType: TraceSwitch.TraceError
  fullName: System.Diagnostics.TraceSwitch.TraceError
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets a value indicating whether the switch allows error-handling messages."
  remarks: "You can use the TraceError, <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>, <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>, and <xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A> properties in conjunction with the <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes to emit all messages with a specified importance or greater. When the <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set to the highest importance, <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>, <xref:System.Diagnostics.TraceLevel> ,  only error-handling messages are emitted."
  example:
  - "The following code example creates a new <xref:System.Diagnostics.TraceSwitch> and uses the switch to determine whether to emit error messages. The switch is created at the class level. `MyMethod` writes the first error message if the <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName> or higher. However, `MyMethod` does not write the second error message if the <xref:System.Diagnostics.TraceSwitch.Level%2A> is less than <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.  \n  \n [!code-cs[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_5_1.cs)]\n [!code-cpp[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_5_1.cpp)]\n [!code-vb[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_5_1.vb)]"
  syntax:
    content: public bool TraceError { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref:System.Diagnostics.TraceSwitch.Level*> property is set to <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref>, <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref>, <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref>, or <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.TraceSwitch.TraceError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceSwitch.TraceInfo
  id: TraceInfo
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  name: TraceInfo
  nameWithType: TraceSwitch.TraceInfo
  fullName: System.Diagnostics.TraceSwitch.TraceInfo
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets a value indicating whether the switch allows informational messages."
  remarks: "You can use the <xref:System.Diagnostics.TraceSwitch.TraceError%2A>, <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>, TraceInfo, and <xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A> properties in conjunction with the <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes to emit all messages with a specified importance or greater. When the <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>, informational messages, warnings, and error-handling messages are emitted."
  example:
  - "The following code example creates a new <xref:System.Diagnostics.TraceSwitch> and uses the switch to determine whether to emit error messages. The switch is created at the class level. `MyMethod` writes the first error message if the <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName> or higher. However, `MyMethod` does not write the second error message if the <xref:System.Diagnostics.TraceSwitch.Level%2A> is less than <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.  \n  \n [!code-vb[Classic TraceSwitch.TraceInfo Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_8_1.vb)]\n [!code-cs[Classic TraceSwitch.TraceInfo Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_8_1.cs)]\n [!code-cpp[Classic TraceSwitch.TraceInfo Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_8_1.cpp)]"
  syntax:
    content: public bool TraceInfo { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref:System.Diagnostics.TraceSwitch.Level*> property is set to <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref> or <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.TraceSwitch.TraceInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceSwitch.TraceVerbose
  id: TraceVerbose
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  name: TraceVerbose
  nameWithType: TraceSwitch.TraceVerbose
  fullName: System.Diagnostics.TraceSwitch.TraceVerbose
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets a value indicating whether the switch allows all messages."
  remarks: "You can use the <xref:System.Diagnostics.TraceSwitch.TraceError%2A>, <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>, <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>, and TraceVerbose properties in conjunction with the <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes to emit all messages with a specified importance or greater. When the <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>, all debugging and tracing messages are transmitted."
  example:
  - "The following code example creates a new <xref:System.Diagnostics.TraceSwitch> and uses the switch to determine whether to emit error messages. The switch is created at the class level. `MyMethod` writes both error messages when the <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.  \n  \n [!code-cs[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_4_1.cs)]\n [!code-cpp[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_4_1.cpp)]\n [!code-vb[Classic TraceSwitch.TraceError Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_4_1.vb)]"
  syntax:
    content: public bool TraceVerbose { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref:System.Diagnostics.TraceSwitch.Level*> property is set to <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.TraceSwitch.TraceVerbose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceSwitch.TraceWarning
  id: TraceWarning
  parent: System.Diagnostics.TraceSwitch
  langs:
  - csharp
  name: TraceWarning
  nameWithType: TraceSwitch.TraceWarning
  fullName: System.Diagnostics.TraceSwitch.TraceWarning
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets a value indicating whether the switch allows warning messages."
  remarks: "You can use the <xref:System.Diagnostics.TraceSwitch.TraceError%2A>, TraceWarning, <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>, and <xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A> properties in conjunction with the <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes to emit all messages with a specified importance or greater. When the <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>, warnings and error-handling messages are emitted."
  example:
  - "The following code example creates a new <xref:System.Diagnostics.TraceSwitch> and uses the switch to determine whether to emit error messages. The switch is created at the class level. `MyMethod` writes the first error message if the <xref:System.Diagnostics.TraceSwitch.Level%2A> property is set to <xref:System.Diagnostics.TraceLevel?displayProperty=fullName> or higher. However, `MyMethod` does not write the second error message when the <xref:System.Diagnostics.TraceSwitch.Level%2A> is less than <xref:System.Diagnostics.TraceLevel?displayProperty=fullName>.  \n  \n [!code-cs[Classic TraceSwitch.TraceWarning Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_3_1.cs)]\n [!code-cpp[Classic TraceSwitch.TraceWarning Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_3_1.cpp)]\n [!code-vb[Classic TraceSwitch.TraceWarning Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_3_1.vb)]"
  syntax:
    content: public bool TraceWarning { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref:System.Diagnostics.TraceSwitch.Level*> property is set to <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref>, <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref>, or <xref href=&quot;System.Diagnostics.TraceLevel&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.TraceSwitch.TraceWarning*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.Switch
  isExternal: false
  name: System.Diagnostics.Switch
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceSwitch(String,String)
  nameWithType: TraceSwitch.TraceSwitch(String,String)
  fullName: System.Diagnostics.TraceSwitch.TraceSwitch(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceSwitch(String,String,String)
  nameWithType: TraceSwitch.TraceSwitch(String,String,String)
  fullName: System.Diagnostics.TraceSwitch.TraceSwitch(String,String,String)
- uid: System.Diagnostics.TraceSwitch.Level
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: Level
  nameWithType: TraceSwitch.Level
  fullName: System.Diagnostics.TraceSwitch.Level
- uid: System.Diagnostics.TraceLevel
  parent: System.Diagnostics
  isExternal: false
  name: TraceLevel
  nameWithType: TraceLevel
  fullName: System.Diagnostics.TraceLevel
- uid: System.Diagnostics.TraceSwitch.OnSwitchSettingChanged
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: OnSwitchSettingChanged()
  nameWithType: TraceSwitch.OnSwitchSettingChanged()
  fullName: System.Diagnostics.TraceSwitch.OnSwitchSettingChanged()
- uid: System.Diagnostics.TraceSwitch.OnValueChanged
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: OnValueChanged()
  nameWithType: TraceSwitch.OnValueChanged()
  fullName: System.Diagnostics.TraceSwitch.OnValueChanged()
- uid: System.Diagnostics.TraceSwitch.TraceError
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceError
  nameWithType: TraceSwitch.TraceError
  fullName: System.Diagnostics.TraceSwitch.TraceError
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.TraceSwitch.TraceInfo
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceInfo
  nameWithType: TraceSwitch.TraceInfo
  fullName: System.Diagnostics.TraceSwitch.TraceInfo
- uid: System.Diagnostics.TraceSwitch.TraceVerbose
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceVerbose
  nameWithType: TraceSwitch.TraceVerbose
  fullName: System.Diagnostics.TraceSwitch.TraceVerbose
- uid: System.Diagnostics.TraceSwitch.TraceWarning
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceWarning
  nameWithType: TraceSwitch.TraceWarning
  fullName: System.Diagnostics.TraceSwitch.TraceWarning
- uid: System.Diagnostics.TraceSwitch.#ctor*
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceSwitch
  nameWithType: TraceSwitch.TraceSwitch
- uid: System.Diagnostics.TraceSwitch.Level*
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: Level
  nameWithType: TraceSwitch.Level
- uid: System.Diagnostics.TraceSwitch.OnSwitchSettingChanged*
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: OnSwitchSettingChanged
  nameWithType: TraceSwitch.OnSwitchSettingChanged
- uid: System.Diagnostics.TraceSwitch.OnValueChanged*
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: OnValueChanged
  nameWithType: TraceSwitch.OnValueChanged
- uid: System.Diagnostics.TraceSwitch.TraceError*
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceError
  nameWithType: TraceSwitch.TraceError
- uid: System.Diagnostics.TraceSwitch.TraceInfo*
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceInfo
  nameWithType: TraceSwitch.TraceInfo
- uid: System.Diagnostics.TraceSwitch.TraceVerbose*
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceVerbose
  nameWithType: TraceSwitch.TraceVerbose
- uid: System.Diagnostics.TraceSwitch.TraceWarning*
  parent: System.Diagnostics.TraceSwitch
  isExternal: false
  name: TraceWarning
  nameWithType: TraceSwitch.TraceWarning
