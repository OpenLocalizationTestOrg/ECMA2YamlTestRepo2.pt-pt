### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ProcessThread
  id: ProcessThread
  children:
  - System.Diagnostics.ProcessThread.BasePriority
  - System.Diagnostics.ProcessThread.CurrentPriority
  - System.Diagnostics.ProcessThread.Id
  - System.Diagnostics.ProcessThread.IdealProcessor
  - System.Diagnostics.ProcessThread.PriorityBoostEnabled
  - System.Diagnostics.ProcessThread.PriorityLevel
  - System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  - System.Diagnostics.ProcessThread.ProcessorAffinity
  - System.Diagnostics.ProcessThread.ResetIdealProcessor
  - System.Diagnostics.ProcessThread.StartAddress
  - System.Diagnostics.ProcessThread.StartTime
  - System.Diagnostics.ProcessThread.ThreadState
  - System.Diagnostics.ProcessThread.TotalProcessorTime
  - System.Diagnostics.ProcessThread.UserProcessorTime
  - System.Diagnostics.ProcessThread.WaitReason
  langs:
  - csharp
  name: ProcessThread
  nameWithType: ProcessThread
  fullName: System.Diagnostics.ProcessThread
  type: Class
  summary: "Representa um thread de processo do sistema operativo."
  remarks: "Utilize ProcessThread para obter informações sobre um thread que está atualmente em execução no sistema. Se o fizer, permite-lhe, por exemplo, para monitorizar as características de desempenho do thread.      > [!IMPORTANT] > Este tipo implementa o <xref:System.IDisposable>interface.</xref:System.IDisposable> Quando tiver terminado com o tipo, deve eliminar-direta ou indiretamente. Para eliminar diretamente do tipo, chame o <xref:System.IDisposable.Dispose%2A>método um `try` / `catch` bloco.</xref:System.IDisposable.Dispose%2A> Para eliminar indiretamente dele, utilize uma construção de idioma, tais como `using` (em c#) ou `Using` (em Visual Basic). Para obter mais informações, consulte a secção &quot;Utilizar um objeto que implementa IDisposable&quot; o <xref:System.IDisposable>tópico de interface.</xref:System.IDisposable>       Um thread é um caminho de execução através de um programa. É a unidade mais pequena de execução que Win32 agenda. É composto por uma pilha, o estado da regista a CPU e uma entrada na lista de execução do programador do sistema.       Um processo é composta por um ou mais threads e o código, dados e outros recursos de um programa na memória. Recursos de programa típicos são ficheiros abertos, semaphores e memória alocada dinamicamente. Cada recurso de um processo é partilhado por tudo o que os threads do processo.       Um programa executa quando o Programador de sistema fornece controlo de execução para um dos threads do programa. O programador determina quais threads devem ser executada e quando. Um thread de prioridade mais baixa poderá ser forçado a Aguarde enquanto os threads de prioridade mais alta concluam as respetivas tarefas. Em computadores com multiprocessamento, o programador pode mover threads individuais para processadores de diferentes, assim o balanceamento de carga de CPU.       Cada processo começa com um thread único, que é conhecido como o thread principal. Qualquer thread, pode criar threads adicionais. Todos os threads dentro de um processo partilham o espaço de endereços do processo.       O thread principal não é necessariamente localizado no primeiro índice na coleção.      > [!NOTE] > Começando com o .NET Framework versão 2.0, a capacidade de contador de desempenho de referência foi eliminados dados noutros computadores de muitas das propriedades e métodos do .NET Framework. Esta alteração foi efetuada para melhorar o desempenho e para permitir a utilizar a classe de ProcessThread não administradores. Como resultado, algumas aplicações que não obtiveram exceções em versões anteriores do .NET Framework agora poderão obter um <xref:System.NotSupportedException>.</xref:System.NotSupportedException> Os métodos e propriedades afetadas são demasiado numerosos aqui a lista, mas as informações da exceção foi adicionadas para os tópicos de membro afetados.       Os threads de um processo executar individualmente e não estiverem cientes entre si, a menos que fiquem visíveis para si. Threads que partilham recursos comuns, no entanto, devem coordenar trabalhar utilizando semaphores ou outro método de comunicação entre processos.       Para obter uma coleção de todos os objetos de ProcessThread associados ao processo actual, obter o <xref:System.Diagnostics.Process.Threads%2A>propriedade o <xref:System.Diagnostics.Process>instância.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.Process.Threads%2A>"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class ProcessThread : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.BasePriority
  id: BasePriority
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: BasePriority
  nameWithType: ProcessThread.BasePriority
  fullName: System.Diagnostics.ProcessThread.BasePriority
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém a prioridade base do thread."
  remarks: "O BasePriority é a prioridade de partida para o thread de processo. Pode ver informações sobre a prioridade base através do contador de prioridade Base do Monitor de sistema.       O sistema operativo calcula a prioridade do thread de base ao combinar o intervalo de nível de prioridade do thread com a classe de prioridade do processo. Pode definir o processo <xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=fullName>propriedade para um dos valores existentes no <xref:System.Diagnostics.ProcessPriorityClass>enumeração, que são <xref:System.Diagnostics.ProcessPriorityClass>, <xref:System.Diagnostics.ProcessPriorityClass>, <xref:System.Diagnostics.ProcessPriorityClass>, <xref:System.Diagnostics.ProcessPriorityClass>, <xref:System.Diagnostics.ProcessPriorityClass>, ou <xref:System.Diagnostics.ProcessPriorityClass>.</xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=fullName> Pode definir o thread <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A>propriedade para um intervalo de valores que bounds prioridade base do thread.</xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> Win32 utiliza classes de prioridade quatro com níveis de prioridade base sete por classe.       Poderá desvio prioridade actual do thread da prioridade base. Por exemplo, pode alterar o sistema operativo a <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A>propriedade com base no tempo decorrido ou outros boosts quando um processo tem ser colocados à frente das outras pessoas para acesso para o processador de.</xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> Além disso, pode definir o <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>propriedade para fazer com que o sistema melhorar temporariamente a prioridade de um thread sempre que o processo é retirado do Estado de espera.</xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> A prioridade é reposta quando o processo devolve para o estado de espera."
  syntax:
    content: public int BasePriority { get; }
    return:
      type: System.Int32
      description: "A prioridade base do thread que o sistema operativo calcula ao combinar a classe de prioridade de processo com o nível de prioridade do thread associado."
  overload: System.Diagnostics.ProcessThread.BasePriority*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.CurrentPriority
  id: CurrentPriority
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: CurrentPriority
  nameWithType: ProcessThread.CurrentPriority
  fullName: System.Diagnostics.ProcessThread.CurrentPriority
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém a prioridade do thread atual."
  remarks: "Poderá desvio prioridade actual do thread da prioridade base. Por exemplo, pode alterar o sistema operativo CurrentPriority propriedade com base no tempo decorrida ou outros boosts, quando um processo tem ser colocado à frente das outras pessoas para acesso para o processador. Além disso, pode definir o <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>propriedade para fazer com que o sistema melhorar temporariamente a prioridade de um thread sempre que o processo é retirado do Estado de espera.</xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> A prioridade é reposta quando o processo devolve para o estado de espera."
  syntax:
    content: public int CurrentPriority { get; }
    return:
      type: System.Int32
      description: "A prioridade actual do thread, que poderá desvio da prioridade base com base na forma como o sistema operativo é agendar o thread. A prioridade pode ser elevada temporariamente para um thread ativo."
  overload: System.Diagnostics.ProcessThread.CurrentPriority*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.Id
  id: Id
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: Id
  nameWithType: ProcessThread.Id
  fullName: System.Diagnostics.ProcessThread.Id
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém o identificador exclusivo do thread."
  remarks: "O sistema operativo reutiliza os números de identificação de thread, que identificam os threads apenas durante as durações."
  syntax:
    content: public int Id { get; }
    return:
      type: System.Int32
      description: "O identificador exclusivo associado um thread específico."
  overload: System.Diagnostics.ProcessThread.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.IdealProcessor
  id: IdealProcessor
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: IdealProcessor
  nameWithType: ProcessThread.IdealProcessor
  fullName: System.Diagnostics.ProcessThread.IdealProcessor
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Define o processador preferencial para este thread executar."
  remarks: "O valor de IdealProcessor é baseado em zero.  Por outras palavras, para definir a afinidade de threads para o processador do primeiro, defina a propriedade como zero.       O sistema agenda threads no respetivos processadores preferenciais sempre que possível.       Um thread de processo pode migrar de processador para processador, com cada migração recarregar a cache do processador. Especificação de um processador de um thread pode melhorar o desempenho sob cargas pesadas de sistema, reduzindo o número de vezes que a cache do processador é recarregar."
  example:
  - "The following example demonstrates how to set the IdealProcessor property for an instance of Notepad to the first processor.  \n  \n [!code-vb[ProcessThreadIdealProcessor#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_25_1.vb)]\n [!code-cs[ProcessThreadIdealProcessor#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_25_1.cs)]"
  syntax:
    content: public int IdealProcessor { set; }
    return:
      type: System.Int32
      description: "O processador preferencial para o thread, utilizado quando o sistema agendas de threads, para determinar o processador para executar o thread."
  overload: System.Diagnostics.ProcessThread.IdealProcessor*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "O sistema não foi possível definir o thread de iniciar o processador especificado."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  id: PriorityBoostEnabled
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: PriorityBoostEnabled
  nameWithType: ProcessThread.PriorityBoostEnabled
  fullName: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define um valor que indica se o sistema operativo temporariamente deve melhorar a prioridade do thread associado sempre que a janela principal do processo do thread recebe o foco."
  remarks: "Quando é PriorityBoostEnabled `true`, o sistema boosts temporariamente prioridade do thread sempre que o processo associado é retirado do Estado de espera. Esta ação impede que outros processos interromper o processamento do thread atual. A definição de PriorityBoostEnabled afeta todos os threads existentes, bem como quaisquer threads subsequentemente criados pelo processo. Para restaurar o comportamento normal, defina o <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>propriedade `false`.</xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>       PriorityBoostEnabled terá um efeito apenas quando o thread está em execução num processo que tenha um <xref:System.Diagnostics.Process.PriorityClass%2A>definido como um dos valores de enumeração prioridade dinâmico (<xref:System.Diagnostics.ProcessPriorityClass>, <xref:System.Diagnostics.ProcessPriorityClass>, ou <xref:System.Diagnostics.ProcessPriorityClass>).</xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.Process.PriorityClass%2A>      > [!NOTE] > Os aumentos prioridade demasiado elevada podem drenar recursos do sistema de operativo essencial e funções de rede. Pode causar problemas com outras tarefas de sistema operativo."
  syntax:
    content: public bool PriorityBoostEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para melhorar a prioridade do thread quando o utilizador interage com o processo da interface; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessThread.PriorityBoostEnabled*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Não foi possível obter as informações de aumento de prioridade.       - ou - não foi possível definir as informações de aumento de prioridade."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.PriorityLevel
  id: PriorityLevel
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: PriorityLevel
  nameWithType: ProcessThread.PriorityLevel
  fullName: System.Diagnostics.ProcessThread.PriorityLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nível de prioridade do thread."
  remarks: "O nível de prioridade não é um valor único, mas em vez de um intervalo de valores. O sistema operativo calcula a prioridade do thread de base utilizando o processo <xref:System.Diagnostics.Process.PriorityClass%2A>para escolher um valor do intervalo especificado na propriedade PriorityLevel.</xref:System.Diagnostics.Process.PriorityClass%2A>"
  syntax:
    content: public System.Diagnostics.ThreadPriorityLevel PriorityLevel { get; set; }
    return:
      type: System.Diagnostics.ThreadPriorityLevel
      description: "Um do <xref href=&quot;System.Diagnostics.ThreadPriorityLevel&quot;> </xref> valores, especificando um intervalo que bounds prioridade do thread."
  overload: System.Diagnostics.ProcessThread.PriorityLevel*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Não foi possível obter as informações de nível de prioridade de thread.       - ou - não foi possível definir o nível de prioridade do thread."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  id: PrivilegedProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: PrivilegedProcessorTime
  nameWithType: ProcessThread.PrivilegedProcessorTime
  fullName: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém a quantidade de tempo que o thread tem despende a executar um código no núcleo do sistema operativo."
  remarks: "Windows utiliza vários mecanismos de proteção diferentes e, na raiz da todos eles é a distinção entre o modo de utilizador e o modo privilegiado. PrivilegedProcessorTime corresponde a quantidade de tempo que a aplicação tem despendem a executar no modo privilegiado, no interior do núcleo do sistema operativo. O <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>propriedade indica a quantidade de tempo que a aplicação tem despende a executar um código no modo de utilizador, fora do núcleo do sistema.</xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>       Modo de utilizador restringe a aplicação de duas formas de importantes. Em primeiro lugar, a aplicação não é possível aceder diretamente os periféricos, mas em vez disso, tem de chamar o núcleo do sistema operativo para obter ou definir dados periféricos. O sistema operativo pode, por conseguinte, certifique-se de que uma aplicação não destrói periféricos dados necessários por outro. Segundo, a aplicação não é possível ler ou alterar os dados que mantém do sistema operativo. Esta restrição impede a inadvertidamente ou intencionalmente corrupting as principais de aplicações. Se a aplicação tem do sistema operativo para efetuar uma operação, aquele invoca um rotinas do sistema. Muitos destes transição em modo privilegiado, efetuar a operação e regressar facilmente ao modo de utilizador."
  syntax:
    content: public TimeSpan PrivilegedProcessorTime { get; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan>que indica a quantidade de tempo que o thread tem despende a executar um código no núcleo do sistema operativo.</xref:System.TimeSpan>"
  overload: System.Diagnostics.ProcessThread.PrivilegedProcessorTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Não foi possível obter a hora de thread."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity
  id: ProcessorAffinity
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: ProcessorAffinity
  nameWithType: ProcessThread.ProcessorAffinity
  fullName: System.Diagnostics.ProcessThread.ProcessorAffinity
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Define os processadores nos quais pode executar o thread associado."
  remarks: "A afinidade do processador de um thread é o conjunto de processadores tem uma relação com. Por outras palavras, os que pode ser agendada para execução num.       ProcessorAffinity representa como um pouco cada processador. Bit 0 representa o processador de um, o bit 1 representa processador dois e assim sucessivamente. A tabela seguinte mostra um subconjunto do ProcessorAffinity possíveis para um sistema de quatro processadores.      | O valor da propriedade (em hexadecimal) | Processadores válidos |   |---------------------------------------|----------------------|   | 0x0001 | 1 |   | 0x0002 | 2 |   | 0x0003 | 1 ou 2 |   | 0x0004 | 3 |   | 0x0005 | 1 ou 3 |   | 0x0007 | 1, 2 ou 3 |   | 0x000F | 1, 2, 3 ou 4 |       Também pode especificar o processador único, preferencial para um thread, definindo o <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A>propriedade.</xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> Um thread de processo pode migrar de processador para processador, com cada migração recarregar a cache do processador. Especificação de um processador de um thread pode melhorar o desempenho sob cargas pesadas de sistema, reduzindo o número de vezes que a cache do processador é recarregar."
  example:
  - "The following example shows how to set the ProcessorAffinity property for an instance of Notepad to the first processor.  \n  \n [!code-vb[ProcessThreadIdealProcessor#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_22_1.vb)]\n [!code-cs[ProcessThreadIdealProcessor#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_22_1.cs)]"
  syntax:
    content: public IntPtr ProcessorAffinity { set; }
    return:
      type: System.IntPtr
      description: "Um <xref:System.IntPtr>que aponta para um conjunto de bits, cada um dos quais representa um processador que pode executar o thread em.</xref:System.IntPtr>"
  overload: System.Diagnostics.ProcessThread.ProcessorAffinity*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Não foi possível definir a afinidade do processador."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor
  id: ResetIdealProcessor
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: ResetIdealProcessor()
  nameWithType: ProcessThread.ResetIdealProcessor()
  fullName: System.Diagnostics.ProcessThread.ResetIdealProcessor()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Repõe o processador ideal para este thread indicar que não há nenhum processador ideal. Por outras palavras, para que qualquer processador é ideal."
  syntax:
    content: public void ResetIdealProcessor ();
    parameters: []
  overload: System.Diagnostics.ProcessThread.ResetIdealProcessor*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Não foi possível repor o processador ideal."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.StartAddress
  id: StartAddress
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: StartAddress
  nameWithType: ProcessThread.StartAddress
  fullName: System.Diagnostics.ProcessThread.StartAddress
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém o endereço de memória da função que o sistema operativo chamado iniciou este thread."
  remarks: "Cada processo começa com um thread único, que é conhecido como o thread principal. Qualquer thread, pode criar threads adicionais.       Um processo tem um espaço de endereço virtual, código executável, dados, os identificadores de objeto, variáveis de ambiente, uma prioridade base e mínimo e máximo trabalhar os tamanhos de conjunto. Todos os threads de um processo de partilharem os respetivos recursos de sistema e do espaço de endereço virtual. Além disso, cada thread mantém processadores de exceções, uma prioridade de agendamento e um conjunto de estruturas em que o sistema guarda o contexto do thread enquanto o thread está a aguardar para ser agendados. O contexto do thread inclui conjunto o thread de registos de máquina, a pilha de kernel, um bloco de ambiente de thread e uma pilha de utilizador no espaço de endereços do processo do thread.       Cada thread do Windows, na verdade, começa a execução de uma função de sistema fornecido, não a função fornecida por aplicação. O endereço inicial para o thread principal é, por conseguinte, o mesmo (uma vez que representa o endereço da função fornecido pelo sistema) para cada processo do Windows no sistema. No entanto, a propriedade StartAddress permite-lhe obter o endereço inicial de função que é específico para a aplicação."
  syntax:
    content: public IntPtr StartAddress { get; }
    return:
      type: System.IntPtr
      description: "Endereço inicial o thread, que aponta para a função definido pela aplicação que executa o thread."
  overload: System.Diagnostics.ProcessThread.StartAddress*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.StartTime
  id: StartTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: StartTime
  nameWithType: ProcessThread.StartTime
  fullName: System.Diagnostics.ProcessThread.StartTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém o tempo que o sistema operativo iniciada o thread."
  syntax:
    content: public DateTime StartTime { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>que representa o tempo que estava no sistema, quando o sistema operativo tiver sido iniciado o thread.</xref:System.DateTime>"
  overload: System.Diagnostics.ProcessThread.StartTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Não foi possível obter a hora de thread."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.ThreadState
  id: ThreadState
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: ThreadState
  nameWithType: ProcessThread.ThreadState
  fullName: System.Diagnostics.ProcessThread.ThreadState
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém o estado atual deste thread."
  remarks: "O <xref:System.Diagnostics.ProcessThread.WaitReason%2A>valor da propriedade só é válido quando o valor de ThreadState for <xref:System.Diagnostics.ThreadState>.</xref:System.Diagnostics.ThreadState> </xref:System.Diagnostics.ProcessThread.WaitReason%2A> Por conseguinte, verifique o valor de ThreadState antes de obter o <xref:System.Diagnostics.ProcessThread.WaitReason%2A>propriedade.</xref:System.Diagnostics.ProcessThread.WaitReason%2A>"
  syntax:
    content: public System.Diagnostics.ThreadState ThreadState { get; }
    return:
      type: System.Diagnostics.ThreadState
      description: "A <xref href=&quot;System.Diagnostics.ThreadState&quot;> </xref> indica que execução o thread, por exemplo, em execução, aguardar pela ou terminada."
  overload: System.Diagnostics.ProcessThread.ThreadState*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime
  id: TotalProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: TotalProcessorTime
  nameWithType: ProcessThread.TotalProcessorTime
  fullName: System.Diagnostics.ProcessThread.TotalProcessorTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém a quantidade total de tempo em que este thread tem despendido a utilização do processador."
  remarks: "A propriedade TotalProcessorTime indica a quantidade total de tempo que o sistema tem retirada o thread do Estado de espera e recebe-prioridade em qualquer processador. Num sistema processador vários, este valor inclui tempo gasto em cada processador, se o thread utilizado mais do que um processador.       A propriedade TotalProcessorTime é a soma do <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>e <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>Propriedades.</xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> </xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>"
  syntax:
    content: public TimeSpan TotalProcessorTime { get; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan>que indica a quantidade de tempo que o thread apresentou controlo do processador.</xref:System.TimeSpan>"
  overload: System.Diagnostics.ProcessThread.TotalProcessorTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Não foi possível obter a hora de thread."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.UserProcessorTime
  id: UserProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: UserProcessorTime
  nameWithType: ProcessThread.UserProcessorTime
  fullName: System.Diagnostics.ProcessThread.UserProcessorTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém a quantidade de tempo que o thread associado tem despende a executar um código dentro da aplicação."
  remarks: "Windows NT utiliza vários mecanismos de proteção diferentes e, na raiz da todos eles é a distinção entre o modo de utilizador e o modo privilegiado. UserProcessorTime corresponde a quantidade de tempo que a aplicação tem despendem a executar no modo de utilizador, fora do núcleo do sistema operativo. O <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>corresponde para a quantidade de tempo que a aplicação tem despende a executar um código no modo privilegiado, dentro do núcleo do sistema.</xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>       Modo de utilizador restringe a aplicação de duas formas de importantes. Em primeiro lugar, a aplicação não é possível aceder diretamente os periféricos, mas em vez disso, tem de chamar o núcleo do sistema operativo para obter ou definir dados periféricos. O sistema operativo pode, por conseguinte, certifique-se de que uma aplicação não destrói periféricos dados necessários por outro. Segundo, a aplicação não é possível ler ou alterar os dados que mantém do sistema operativo. Esta restrição impede a inadvertidamente ou intencionalmente corrupting as principais de aplicações. Se a aplicação tem do sistema operativo para efetuar uma operação, aquele invoca um rotinas do sistema. Muitos destes transição em modo privilegiado, efetuar a operação e regressar facilmente ao modo de utilizador."
  syntax:
    content: public TimeSpan UserProcessorTime { get; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan>que indica a quantidade de tempo que o thread tem despende a executar um código dentro da aplicação, como opposed no núcleo do sistema operativo.</xref:System.TimeSpan>"
  overload: System.Diagnostics.ProcessThread.UserProcessorTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Não foi possível obter a hora de thread."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.WaitReason
  id: WaitReason
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: WaitReason
  nameWithType: ProcessThread.WaitReason
  fullName: System.Diagnostics.ProcessThread.WaitReason
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém a razão que o thread está em espera."
  remarks: "A propriedade WaitReason só é válido quando <xref:System.Diagnostics.ProcessThread.ThreadState%2A>é <xref:System.Diagnostics.ThreadState>.</xref:System.Diagnostics.ThreadState> </xref:System.Diagnostics.ProcessThread.ThreadState%2A> Por isso, verifique o <xref:System.Diagnostics.ProcessThread.ThreadState%2A>valor antes de obter a propriedade WaitReason.</xref:System.Diagnostics.ProcessThread.ThreadState%2A>"
  syntax:
    content: public System.Diagnostics.ThreadWaitReason WaitReason { get; }
    return:
      type: System.Diagnostics.ThreadWaitReason
      description: "A <xref href=&quot;System.Diagnostics.ThreadWaitReason&quot;> </xref> que representa o motivo pelo qual o thread está no estado de espera."
  overload: System.Diagnostics.ProcessThread.WaitReason*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O thread não está no estado de espera."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "A plataforma é Windows 98 ou Windows Millennium Edition."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O processo é num computador remoto."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Diagnostics.ProcessThread.BasePriority
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: BasePriority
  nameWithType: ProcessThread.BasePriority
  fullName: System.Diagnostics.ProcessThread.BasePriority
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.ProcessThread.CurrentPriority
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: CurrentPriority
  nameWithType: ProcessThread.CurrentPriority
  fullName: System.Diagnostics.ProcessThread.CurrentPriority
- uid: System.Diagnostics.ProcessThread.Id
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: Id
  nameWithType: ProcessThread.Id
  fullName: System.Diagnostics.ProcessThread.Id
- uid: System.Diagnostics.ProcessThread.IdealProcessor
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: IdealProcessor
  nameWithType: ProcessThread.IdealProcessor
  fullName: System.Diagnostics.ProcessThread.IdealProcessor
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityBoostEnabled
  nameWithType: ProcessThread.PriorityBoostEnabled
  fullName: System.Diagnostics.ProcessThread.PriorityBoostEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.ProcessThread.PriorityLevel
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityLevel
  nameWithType: ProcessThread.PriorityLevel
  fullName: System.Diagnostics.ProcessThread.PriorityLevel
- uid: System.Diagnostics.ThreadPriorityLevel
  parent: System.Diagnostics
  isExternal: false
  name: ThreadPriorityLevel
  nameWithType: ThreadPriorityLevel
  fullName: System.Diagnostics.ThreadPriorityLevel
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PrivilegedProcessorTime
  nameWithType: ProcessThread.PrivilegedProcessorTime
  fullName: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ProcessorAffinity
  nameWithType: ProcessThread.ProcessorAffinity
  fullName: System.Diagnostics.ProcessThread.ProcessorAffinity
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ResetIdealProcessor()
  nameWithType: ProcessThread.ResetIdealProcessor()
  fullName: System.Diagnostics.ProcessThread.ResetIdealProcessor()
- uid: System.Diagnostics.ProcessThread.StartAddress
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartAddress
  nameWithType: ProcessThread.StartAddress
  fullName: System.Diagnostics.ProcessThread.StartAddress
- uid: System.Diagnostics.ProcessThread.StartTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartTime
  nameWithType: ProcessThread.StartTime
  fullName: System.Diagnostics.ProcessThread.StartTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Diagnostics.ProcessThread.ThreadState
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ThreadState
  nameWithType: ProcessThread.ThreadState
  fullName: System.Diagnostics.ProcessThread.ThreadState
- uid: System.Diagnostics.ThreadState
  parent: System.Diagnostics
  isExternal: false
  name: ThreadState
  nameWithType: ThreadState
  fullName: System.Diagnostics.ThreadState
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: TotalProcessorTime
  nameWithType: ProcessThread.TotalProcessorTime
  fullName: System.Diagnostics.ProcessThread.TotalProcessorTime
- uid: System.Diagnostics.ProcessThread.UserProcessorTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: UserProcessorTime
  nameWithType: ProcessThread.UserProcessorTime
  fullName: System.Diagnostics.ProcessThread.UserProcessorTime
- uid: System.Diagnostics.ProcessThread.WaitReason
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: WaitReason
  nameWithType: ProcessThread.WaitReason
  fullName: System.Diagnostics.ProcessThread.WaitReason
- uid: System.Diagnostics.ThreadWaitReason
  parent: System.Diagnostics
  isExternal: false
  name: ThreadWaitReason
  nameWithType: ThreadWaitReason
  fullName: System.Diagnostics.ThreadWaitReason
- uid: System.Diagnostics.ProcessThread.BasePriority*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: BasePriority
  nameWithType: ProcessThread.BasePriority
- uid: System.Diagnostics.ProcessThread.CurrentPriority*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: CurrentPriority
  nameWithType: ProcessThread.CurrentPriority
- uid: System.Diagnostics.ProcessThread.Id*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: Id
  nameWithType: ProcessThread.Id
- uid: System.Diagnostics.ProcessThread.IdealProcessor*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: IdealProcessor
  nameWithType: ProcessThread.IdealProcessor
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityBoostEnabled
  nameWithType: ProcessThread.PriorityBoostEnabled
- uid: System.Diagnostics.ProcessThread.PriorityLevel*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityLevel
  nameWithType: ProcessThread.PriorityLevel
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PrivilegedProcessorTime
  nameWithType: ProcessThread.PrivilegedProcessorTime
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ProcessorAffinity
  nameWithType: ProcessThread.ProcessorAffinity
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ResetIdealProcessor
  nameWithType: ProcessThread.ResetIdealProcessor
- uid: System.Diagnostics.ProcessThread.StartAddress*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartAddress
  nameWithType: ProcessThread.StartAddress
- uid: System.Diagnostics.ProcessThread.StartTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartTime
  nameWithType: ProcessThread.StartTime
- uid: System.Diagnostics.ProcessThread.ThreadState*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ThreadState
  nameWithType: ProcessThread.ThreadState
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: TotalProcessorTime
  nameWithType: ProcessThread.TotalProcessorTime
- uid: System.Diagnostics.ProcessThread.UserProcessorTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: UserProcessorTime
  nameWithType: ProcessThread.UserProcessorTime
- uid: System.Diagnostics.ProcessThread.WaitReason*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: WaitReason
  nameWithType: ProcessThread.WaitReason
