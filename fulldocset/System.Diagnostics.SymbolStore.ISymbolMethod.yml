### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.SymbolStore.ISymbolMethod
  id: ISymbolMethod
  children:
  - System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace
  - System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters
  - System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)
  - System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.ISymbolMethod.RootScope
  - System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount
  - System.Diagnostics.SymbolStore.ISymbolMethod.Token
  langs:
  - csharp
  name: ISymbolMethod
  nameWithType: ISymbolMethod
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod
  type: Interface
  summary: "Represents a method within a symbol store."
  remarks: "The ISymbolMethod interface provides access only to the symbol-related attributes of a method, such as sequence points, lexical scopes, and parameter information. Use it with the <xref:System.Reflection> classes to read the type-related attributes of a method.      > [!NOTE] >  This interface is the managed counterpart of the `ISymUnmanagedMethod` interface, one of the unmanaged symbol store interfaces that provide an alternative way to read and write debug symbol information."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ISymbolMethod
  implements: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace
  id: GetNamespace
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  langs:
  - csharp
  name: GetNamespace()
  nameWithType: ISymbolMethod.GetNamespace()
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the namespace that the current method is defined within."
  syntax:
    content: public System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolNamespace
      description: "The namespace that the current method is defined within."
  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  langs:
  - csharp
  name: GetOffset(ISymbolDocument,Int32,Int32)
  nameWithType: ISymbolMethod.GetOffset(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position."
  remarks: "The parameters are returned in the order that they are defined within the signature of the method."
  syntax:
    content: public int GetOffset (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "The document for which the offset is requested."
    - id: line
      type: System.Int32
      description: "The document line corresponding to the offset."
    - id: column
      type: System.Int32
      description: "The document column corresponding to the offset."
    return:
      type: System.Int32
      description: "The offset within the specified document."
  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters
  id: GetParameters
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  langs:
  - csharp
  name: GetParameters()
  nameWithType: ISymbolMethod.GetParameters()
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the parameters for the current method."
  remarks: "The parameters are returned in the order that they are defined within the signature of the method."
  syntax:
    content: public System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolVariable[]
      description: "The array of parameters for the current method."
  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  langs:
  - csharp
  name: GetRanges(ISymbolDocument,Int32,Int32)
  nameWithType: ISymbolMethod.GetRanges(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method."
  remarks: "The array is an array of integers in the format {{start1, end1}, {start2, end2}...}. The number of range pairs is the length of the array divided by 2."
  syntax:
    content: public int[] GetRanges (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "The document for which the offset is requested."
    - id: line
      type: System.Int32
      description: "The document line corresponding to the ranges."
    - id: column
      type: System.Int32
      description: "The document column corresponding to the ranges."
    return:
      type: System.Int32[]
      description: "An array of start and end offset pairs."
  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)
  id: GetScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  langs:
  - csharp
  name: GetScope(Int32)
  nameWithType: ISymbolMethod.GetScope(Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Returns the most enclosing lexical scope when given an offset within a method."
  remarks: "You can use the GetScope method to start local variable searches."
  syntax:
    content: public System.Diagnostics.SymbolStore.ISymbolScope GetScope (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "The byte offset within the method of the lexical scope."
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "The most enclosing lexical scope for the given byte offset within the method."
  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  id: GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  langs:
  - csharp
  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: ISymbolMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the sequence points for the current method."
  remarks: "The sequence points are sorted by offset and are for all documents in the method. Use <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> to retrieve the count of all sequence points and create arrays of the proper size.       GetSequencePoints verifies the size of each array and places the sequence point information into each. If any array is `null`, the data for that array is not returned."
  syntax:
    content: public void GetSequencePoints (int[] offsets, System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);
    parameters:
    - id: offsets
      type: System.Int32[]
      description: "The array of byte offsets from the beginning of the method for the sequence points."
    - id: documents
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "The array of documents in which the sequence points are located."
    - id: lines
      type: System.Int32[]
      description: "The array of lines in the documents at which the sequence points are located."
    - id: columns
      type: System.Int32[]
      description: "The array of columns in the documents at which the sequence points are located."
    - id: endLines
      type: System.Int32[]
      description: "The array of lines in the documents at which the sequence points end."
    - id: endColumns
      type: System.Int32[]
      description: "The array of columns in the documents at which the sequence points end."
  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  id: GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  langs:
  - csharp
  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  nameWithType: ISymbolMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the start and end positions for the source of the current method."
  remarks: "The first array position is the start, and the second is the end."
  syntax:
    content: public bool GetSourceStartEnd (System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int[] lines, int[] columns);
    parameters:
    - id: docs
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "The starting and ending source documents."
    - id: lines
      type: System.Int32[]
      description: "The starting and ending lines in the corresponding source documents."
    - id: columns
      type: System.Int32[]
      description: "The starting and ending columns in the corresponding source documents."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the positions were defined; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope
  id: RootScope
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  langs:
  - csharp
  name: RootScope
  nameWithType: ISymbolMethod.RootScope
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the root lexical scope for the current method. This scope encloses the entire method."
  syntax:
    content: public System.Diagnostics.SymbolStore.ISymbolScope RootScope { get; }
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "The root lexical scope that encloses the entire method."
  overload: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount
  id: SequencePointCount
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  langs:
  - csharp
  name: SequencePointCount
  nameWithType: ISymbolMethod.SequencePointCount
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets a count of the sequence points in the method."
  syntax:
    content: public int SequencePointCount { get; }
    return:
      type: System.Int32
      description: "The count of the sequence points in the method."
  overload: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.Token
  id: Token
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  langs:
  - csharp
  name: Token
  nameWithType: ISymbolMethod.Token
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.Token
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.SymbolStore
  summary: "Gets the <xref href=&quot;System.Diagnostics.SymbolStore.SymbolToken&quot;></xref> containing the metadata for the current method."
  syntax:
    content: public System.Diagnostics.SymbolStore.SymbolToken Token { get; }
    return:
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "The metadata token for the current method."
  overload: System.Diagnostics.SymbolStore.ISymbolMethod.Token*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetNamespace()
  nameWithType: ISymbolMethod.GetNamespace()
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace()
- uid: System.Diagnostics.SymbolStore.ISymbolNamespace
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolNamespace
  nameWithType: ISymbolNamespace
  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetOffset(ISymbolDocument,Int32,Int32)
  nameWithType: ISymbolMethod.GetOffset(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(ISymbolDocument,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.SymbolStore.ISymbolDocument
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetParameters()
  nameWithType: ISymbolMethod.GetParameters()
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters()
- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolVariable
  nameWithType: ISymbolVariable
  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolVariable
    name: ISymbolVariable
    nameWithType: ISymbolVariable
    fullName: ISymbolVariable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetRanges(ISymbolDocument,Int32,Int32)
  nameWithType: ISymbolMethod.GetRanges(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(ISymbolDocument,Int32,Int32)
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetScope(Int32)
  nameWithType: ISymbolMethod.GetScope(Int32)
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolScope
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolScope
  nameWithType: ISymbolScope
  fullName: System.Diagnostics.SymbolStore.ISymbolScope
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: ISymbolMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
- uid: System.Diagnostics.SymbolStore.ISymbolDocument[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolDocument
    name: ISymbolDocument
    nameWithType: ISymbolDocument
    fullName: ISymbolDocument[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  nameWithType: ISymbolMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: RootScope
  nameWithType: ISymbolMethod.RootScope
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: SequencePointCount
  nameWithType: ISymbolMethod.SequencePointCount
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.Token
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: Token
  nameWithType: ISymbolMethod.Token
  fullName: System.Diagnostics.SymbolStore.ISymbolMethod.Token
- uid: System.Diagnostics.SymbolStore.SymbolToken
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: SymbolToken
  nameWithType: SymbolToken
  fullName: System.Diagnostics.SymbolStore.SymbolToken
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace*
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetNamespace
  nameWithType: ISymbolMethod.GetNamespace
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset*
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetOffset
  nameWithType: ISymbolMethod.GetOffset
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters*
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetParameters
  nameWithType: ISymbolMethod.GetParameters
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges*
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetRanges
  nameWithType: ISymbolMethod.GetRanges
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetScope*
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetScope
  nameWithType: ISymbolMethod.GetScope
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints*
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetSequencePoints
  nameWithType: ISymbolMethod.GetSequencePoints
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd*
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: GetSourceStartEnd
  nameWithType: ISymbolMethod.GetSourceStartEnd
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.RootScope*
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: RootScope
  nameWithType: ISymbolMethod.RootScope
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount*
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: SequencePointCount
  nameWithType: ISymbolMethod.SequencePointCount
- uid: System.Diagnostics.SymbolStore.ISymbolMethod.Token*
  parent: System.Diagnostics.SymbolStore.ISymbolMethod
  isExternal: false
  name: Token
  nameWithType: ISymbolMethod.Token
