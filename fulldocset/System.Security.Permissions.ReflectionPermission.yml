### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.ReflectionPermission
  id: ReflectionPermission
  children:
  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  - System.Security.Permissions.ReflectionPermission.Copy
  - System.Security.Permissions.ReflectionPermission.Flags
  - System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.ReflectionPermission.IsUnrestricted
  - System.Security.Permissions.ReflectionPermission.ToXml
  - System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: ReflectionPermission
  nameWithType: ReflectionPermission
  fullName: System.Security.Permissions.ReflectionPermission
  type: Class
  summary: "Controls access to non-public types and members through the <xref href=&quot;System.Reflection&quot;></xref> APIs. Controls some features of the <xref href=&quot;System.Reflection.Emit&quot;></xref> APIs."
  remarks: "Without ReflectionPermission, code can use reflection to access only the public members of objects. Code with ReflectionPermission and the appropriate <xref:System.Security.Permissions.ReflectionPermissionFlag> flags can access the `protected` and `private` members of objects.      > [!CAUTION] >  Because ReflectionPermission can provide access to non-public types and members, we recommend that you do not grant ReflectionPermission to Internet code, except with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. <xref:System.Security.Permissions.ReflectionPermissionFlag> allows access to non-public members, with the restriction that the grant set of the non-public members must be equal to, or a subset of, the grant set of the code that accesses the non-public members.       Certain features of reflection emit, such as emitting debug symbols, require ReflectionPermission with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.       For more information, see the <xref:System.Security.Permissions.ReflectionPermissionFlag> enumeration."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ReflectionPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ReflectionPermission(PermissionState)
  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;></xref> class with either fully restricted or unrestricted permission as specified."
  remarks: "Creates either fully restricted (`None`) or `Unrestricted` access to metadata."
  example:
  - "The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#7](~/add/codesnippet/visualbasic/a6514c98-a52a-4b79-a783-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#7](~/add/codesnippet/csharp/a6514c98-a52a-4b79-a783-_1.cs)]"
  syntax:
    content: public ReflectionPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "One of the <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref> values."
  overload: System.Security.Permissions.ReflectionPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>state</code> parameter is not a valid value of <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  id: '#ctor(System.Security.Permissions.ReflectionPermissionFlag)'
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ReflectionPermission(ReflectionPermissionFlag)
  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;></xref> class with the specified access."
  remarks: ''
  example:
  - "The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/visualbasic/d03b017b-73f9-4633-80a5-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/csharp/d03b017b-73f9-4633-80a5-_1.cs)]"
  syntax:
    content: public ReflectionPermission (System.Security.Permissions.ReflectionPermissionFlag flag);
    parameters:
    - id: flag
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "One of the <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;></xref> values."
  overload: System.Security.Permissions.ReflectionPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>flag</code> parameter is not a valid value of <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Copy
  id: Copy
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: ReflectionPermission.Copy()
  fullName: System.Security.Permissions.ReflectionPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns an identical copy of the current permission."
  remarks: "A copy of a permission represents the same access to resources as the original permission."
  example:
  - "The following code example shows the behavior of the Copy method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#5](~/add/codesnippet/visualbasic/m-system.security.permis_6_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#5](~/add/codesnippet/csharp/m-system.security.permis_6_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A copy of the current permission."
  overload: System.Security.Permissions.ReflectionPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Flags
  id: Flags
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Flags
  nameWithType: ReflectionPermission.Flags
  fullName: System.Security.Permissions.ReflectionPermission.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the type of reflection allowed for the current permission."
  remarks: ''
  example:
  - "The following code example shows the use of the Flags property. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/visualbasic/p-system.security.permis_7_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/csharp/p-system.security.permis_7_1.cs)]"
  syntax:
    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "The set flags for the current permission."
  overload: System.Security.Permissions.ReflectionPermission.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An attempt is made to set this property to an invalid value. See <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;></xref> for the valid values."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: ReflectionPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Reconstructs a permission with a specified state from an XML encoding."
  remarks: ''
  example:
  - "The following code example shows the behavior of the FromXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/visualbasic/31379e48-984f-4b70-8613-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/csharp/31379e48-984f-4b70-8613-_1.cs)]"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: "The XML encoding to use to reconstruct the permission."
  overload: System.Security.Permissions.ReflectionPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>esd</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>esd</code> parameter is not a valid permission element.       -or-       The <code>esd</code> parameter&quot;s version number is not valid."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: ReflectionPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns a permission that is the intersection of the current permission and the specified permission."
  remarks: "The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection."
  example:
  - "The following code example shows the behavior of the Intersect method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#4](~/add/codesnippet/visualbasic/0231533f-ad3c-4735-a9a6-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#4](~/add/codesnippet/csharp/0231533f-ad3c-4735-a9a6-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to intersect with the current permission. It must be of the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the intersection is empty."
  overload: System.Security.Permissions.ReflectionPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>target</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> and is not of the same type as the current permission."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determines whether the current permission is a subset of the specified permission."
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission."
  example:
  - "The following code example shows the behavior of the IsSubsetOf method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/visualbasic/4d20fd34-7dad-48da-8000-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/csharp/4d20fd34-7dad-48da-8000-_1.cs)]"
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.ReflectionPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>target</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> and is not of the same type as the current permission."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: ReflectionPermission.IsUnrestricted()
  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Returns a value indicating whether the current permission is unrestricted."
  remarks: "An unrestricted permission represents access to any and all resources protected by the permission."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current permission is unrestricted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.ReflectionPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: ReflectionPermission.ToXml()
  fullName: System.Security.Permissions.ReflectionPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates an XML encoding of the permission and its current state."
  remarks: ''
  example:
  - "The following code example shows the behavior of the ToXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/visualbasic/m-system.security.permis_18_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/csharp/m-system.security.permis_18_1.cs)]"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "An XML encoding of the permission, including any state information."
  overload: System.Security.Permissions.ReflectionPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: ReflectionPermission.Union(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates a permission that is the union of the current permission and the specified permission."
  remarks: "The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union."
  example:
  - "The following code example shows the behavior of the Union method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#3](~/add/codesnippet/visualbasic/e04a2468-b512-4092-a730-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#3](~/add/codesnippet/csharp/e04a2468-b512-4092-a730-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "A permission to combine with the current permission. It must be of the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "A new permission that represents the union of the current permission and the specified permission."
  overload: System.Security.Permissions.ReflectionPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>other</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> and is not of the same type as the current permission."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission(PermissionState)
  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission(ReflectionPermissionFlag)
  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
- uid: System.Security.Permissions.ReflectionPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: ReflectionPermissionFlag
  nameWithType: ReflectionPermissionFlag
  fullName: System.Security.Permissions.ReflectionPermissionFlag
- uid: System.Security.Permissions.ReflectionPermission.Copy
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Copy()
  nameWithType: ReflectionPermission.Copy()
  fullName: System.Security.Permissions.ReflectionPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.ReflectionPermission.Flags
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermission.Flags
  fullName: System.Security.Permissions.ReflectionPermission.Flags
- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: ReflectionPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: ReflectionPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: ReflectionPermission.IsUnrestricted()
  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()
- uid: System.Security.Permissions.ReflectionPermission.ToXml
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ToXml()
  nameWithType: ReflectionPermission.ToXml()
  fullName: System.Security.Permissions.ReflectionPermission.ToXml()
- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: ReflectionPermission.Union(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)
- uid: System.Security.Permissions.ReflectionPermission.#ctor*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission
  nameWithType: ReflectionPermission.ReflectionPermission
- uid: System.Security.Permissions.ReflectionPermission.Copy*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Copy
  nameWithType: ReflectionPermission.Copy
- uid: System.Security.Permissions.ReflectionPermission.Flags*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermission.Flags
- uid: System.Security.Permissions.ReflectionPermission.FromXml*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: FromXml
  nameWithType: ReflectionPermission.FromXml
- uid: System.Security.Permissions.ReflectionPermission.Intersect*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Intersect
  nameWithType: ReflectionPermission.Intersect
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: ReflectionPermission.IsSubsetOf
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: ReflectionPermission.IsUnrestricted
- uid: System.Security.Permissions.ReflectionPermission.ToXml*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ToXml
  nameWithType: ReflectionPermission.ToXml
- uid: System.Security.Permissions.ReflectionPermission.Union*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Union
  nameWithType: ReflectionPermission.Union
