### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.SemaphoreSecurity
  id: SemaphoreSecurity
  children:
  - System.Security.AccessControl.SemaphoreSecurity.#ctor
  - System.Security.AccessControl.SemaphoreSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.SemaphoreSecurity.AccessRightType
  - System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.SemaphoreSecurity.AccessRuleType
  - System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  - System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  - System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.SemaphoreSecurity.AuditRuleType
  - System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  - System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)
  - System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)
  - System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  - System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)
  - System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)
  - System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  - System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  - System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  langs:
  - csharp
  name: SemaphoreSecurity
  nameWithType: SemaphoreSecurity
  fullName: System.Security.AccessControl.SemaphoreSecurity
  type: Class
  summary: "Represents the Windows access control security for a named semaphore. This class cannot be inherited."
  remarks: "A SemaphoreSecurity object specifies access rights for a named system semaphore, and also specifies how access attempts are audited. Access rights to the semaphore are expressed as rules, with each access rule represented by a <xref:System.Security.AccessControl.SemaphoreAccessRule> object. Each auditing rule is represented by a <xref:System.Security.AccessControl.SemaphoreAuditRule> object.       This mirrors the underlying Windows security system, in which each securable object has at most one discretionary access control list (DACL) that controls access to the secured object, and at most one system access control list (SACL) that specifies which access attempts are audited. The DACL and SACL are ordered lists of access control entries (ACE) that specify access and auditing for users and groups. A <xref:System.Security.AccessControl.SemaphoreAccessRule> or <xref:System.Security.AccessControl.SemaphoreAuditRule> object might represent more than one ACE.      > [!NOTE] >  A <xref:System.Threading.Semaphore> object can represent a local semaphore or a named system semaphore. Windows access control security is meaningful only for named system semaphores.       The SemaphoreSecurity, <xref:System.Security.AccessControl.SemaphoreAccessRule>, and <xref:System.Security.AccessControl.SemaphoreAuditRule> classes hide the implementation details of ACLs and ACEs. They allow you to ignore the seventeen different ACE types and the complexity of correctly maintaining inheritance and propagation of access rights. These objects are also designed to prevent the following common access control errors:      -   Creating a security descriptor with a null DACL. A null reference to a DACL allows any user to add access rules to an object, potentially creating a denial-of-service attack. A new SemaphoreSecurity object always starts with an empty DACL, which denies all access for all users.      -   Violating the canonical ordering of ACEs. If the ACE list in the DACL is not kept in the canonical order, users might inadvertently be given access to the secured object. For example, denied access rights must always appear before allowed access rights. SemaphoreSecurity objects maintain the correct order internally.      -   Manipulating security descriptor flags, which should be under resource manager control only.      -   Creating invalid combinations of ACE flags.      -   Manipulating inherited ACEs. Inheritance and propagation are handled by the resource manager, in response to changes you make to access and audit rules.      -   Inserting meaningless ACEs into ACLs.       The only capabilities not supported by the .NET security objects are dangerous activities that should be avoided by the majority of application developers, such as the following:      -   Low-level tasks that are normally performed by the resource manager.      -   Adding or removing access control entries in ways that do not maintain the canonical ordering.       To modify Windows access control security for a named semaphore, use the <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> method to get the SemaphoreSecurity object. Modify the security object by adding and removing rules, and then use the <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> method to reattach it.      > [!IMPORTANT] >  Changes you make to a SemaphoreSecurity object do not affect the access levels of the named semaphore until you call the <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the named semaphore.       To copy access control security from one semaphore to another, use the <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> method to get a SemaphoreSecurity object representing the access and audit rules for the first semaphore, then use the <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> method, or a constructor that accepts a SemaphoreSecurity object, to assign those rules to the second semaphore.       Users with an investment in the security descriptor definition language (SDDL) can use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to set access rules for a named semaphore, and the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method to obtain a string that represents the access rules in SDDL format. This is not recommended for new development.      > [!NOTE] >  Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a SemaphoreSecurity object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_8_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_8_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public sealed class SemaphoreSecurity : System.Security.AccessControl.NativeObjectSecurity
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: SemaphoreSecurity()
  nameWithType: SemaphoreSecurity.SemaphoreSecurity()
  fullName: System.Security.AccessControl.SemaphoreSecurity.SemaphoreSecurity()
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.AccessControl.SemaphoreSecurity&quot;></xref> class with default values."
  remarks: "A new <xref:System.Security.AccessControl.SemaphoreSecurity> object always starts with an empty discretionary access list (DACL), which denies all access for all users."
  syntax:
    content: public SemaphoreSecurity ();
    parameters: []
  overload: System.Security.AccessControl.SemaphoreSecurity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "This class is not supported on Windows 98 or Windows Millennium Edition."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: SemaphoreSecurity(String,AccessControlSections)
  nameWithType: SemaphoreSecurity.SemaphoreSecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.SemaphoreSecurity.SemaphoreSecurity(String,AccessControlSections)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.AccessControl.SemaphoreSecurity&quot;></xref> class with the specified sections of the access control security rules from the system semaphore with the specified name."
  remarks: "This constructor allows you to obtain the access control security for a named system semaphore without first creating a <xref:System.Threading.Semaphore> object.       Caution must be exercised when working with named system objects. If there is a system object named `name` that is not a semaphore, its control access security might be retrieved."
  syntax:
    content: public SemaphoreSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: name
      type: System.String
      description: "The name of the system semaphore whose access control security rules are to be retrieved."
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "A combination of <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;></xref> flags specifying the sections to retrieve."
  overload: System.Security.AccessControl.SemaphoreSecurity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "This class is not supported on Windows 98 or Windows Millennium Edition."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: AccessRightType
  nameWithType: SemaphoreSecurity.AccessRightType
  fullName: System.Security.AccessControl.SemaphoreSecurity.AccessRightType
  type: Property
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Gets the enumeration that the <xref href=&quot;System.Security.AccessControl.SemaphoreSecurity&quot;></xref> class uses to represent access rights."
  remarks: "Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object."
  syntax:
    content: public override Type AccessRightType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type> object representing the <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;></xref> enumeration."
  overload: System.Security.AccessControl.SemaphoreSecurity.AccessRightType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: SemaphoreSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Creates a new access control rule for the specified user, with the specified access rights, access control, and flags."
  remarks: "The recommended way to create access control rules is to use the constructors of the <xref:System.Security.AccessControl.SemaphoreAccessRule> class.      > [!NOTE] >  Although inheritance and propagation flags are meaningless for named semaphores, it is still possible to specify them This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible."
  syntax:
    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "An <xref href=&quot;System.Security.Principal.IdentityReference&quot;></xref> that identifies the user or group the rule applies to."
    - id: accessMask
      type: System.Int32
      description: "A bitwise combination of <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;></xref> values specifying the access rights to allow or deny, cast to an integer."
    - id: isInherited
      type: System.Boolean
      description: "Meaningless for named semaphores, because they have no hierarchy."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Meaningless for named semaphores, because they have no hierarchy."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Meaningless for named semaphores, because they have no hierarchy."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "One of the <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref> values specifying whether the rights are allowed or denied."
    return:
      type: System.Security.AccessControl.AccessRule
      description: "A <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;></xref> object representing the specified rights for the specified user."
  overload: System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>type</code> specifies an invalid value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>accessMask</code> is zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code> is neither of type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>, nor of a type such as <xref href=&quot;System.Security.Principal.NTAccount&quot;></xref> that can be converted to type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: AccessRuleType
  nameWithType: SemaphoreSecurity.AccessRuleType
  fullName: System.Security.AccessControl.SemaphoreSecurity.AccessRuleType
  type: Property
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Gets the type that the <xref href=&quot;System.Security.AccessControl.SemaphoreSecurity&quot;></xref> class uses to represent access rules."
  remarks: "Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> property and return the type they use to represent access rules. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct access rule type to use with each security object."
  syntax:
    content: public override Type AccessRuleType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type> object representing the <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;></xref> class."
  overload: System.Security.AccessControl.SemaphoreSecurity.AccessRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  id: AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: AddAccessRule(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.AddAccessRule(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(SemaphoreAccessRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Searches for a matching rule with which the new rule can be merged. If none are found, adds the new rule."
  remarks: "The AddAccessRule method searches for rules with the same user or group and the same <xref:System.Security.AccessControl.AccessControlType> as `rule`. If none are found, `rule` is added. If a matching rule is found, the rights in `rule` are merged with the existing rule."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/5be6d691-cc28-4e1b-ae9c-_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/5be6d691-cc28-4e1b-ae9c-_1.vb)]"
  syntax:
    content: public void AddAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAccessRule
      description: "The access control rule to add."
  overload: System.Security.AccessControl.SemaphoreSecurity.AddAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  id: AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: AddAuditRule(SemaphoreAuditRule)
  nameWithType: SemaphoreSecurity.AddAuditRule(SemaphoreAuditRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(SemaphoreAuditRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Searches for an audit rule with which the new rule can be merged. If none are found, adds the new rule."
  remarks: "The AddAuditRule method searches for rules with the same user or group as `rule`. If none are found, `rule` is added. If a matching rule is found, the flags in `rule` are merged into the existing rule."
  syntax:
    content: public void AddAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAuditRule
      description: "The audit rule to add. The user specified by this rule determines the search."
  overload: System.Security.AccessControl.SemaphoreSecurity.AddAuditRule*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: SemaphoreSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Creates a new audit rule, specifying the user the rule applies to, the access rights to audit, and the outcome that triggers the audit rule."
  remarks: "The recommended way to create audit rules is to use the constructors of the <xref:System.Security.AccessControl.SemaphoreAuditRule> class.      > [!NOTE] >  Although inheritance and propagation flags are meaningless for named semaphores, it is still possible to specify them. This is not recommended, because it needlessly complicates the maintenance of rules, for example by interfering with the combination of rules that would otherwise be compatible."
  syntax:
    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "An <xref href=&quot;System.Security.Principal.IdentityReference&quot;></xref> that identifies the user or group the rule applies to."
    - id: accessMask
      type: System.Int32
      description: "A bitwise combination of <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;></xref> values specifying the access rights to audit, cast to an integer."
    - id: isInherited
      type: System.Boolean
      description: "Meaningless for named wait handles, because they have no hierarchy."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Meaningless for named wait handles, because they have no hierarchy."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Meaningless for named wait handles, because they have no hierarchy."
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "A bitwise combination of <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;></xref> values that specify whether to audit successful access, failed access, or both."
    return:
      type: System.Security.AccessControl.AuditRule
      description: "A <xref href=&quot;System.Security.AccessControl.SemaphoreAuditRule&quot;></xref> object representing the specified audit rule for the specified user. The return type of the method is the base class, <xref href=&quot;System.Security.AccessControl.AuditRule&quot;></xref>, but the return value can be cast safely to the derived class."
  overload: System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, or <code>flags</code> specifies an invalid value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>accessMask</code> is zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code> is neither of type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>, nor of a type such as <xref href=&quot;System.Security.Principal.NTAccount&quot;></xref> that can be converted to type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: AuditRuleType
  nameWithType: SemaphoreSecurity.AuditRuleType
  fullName: System.Security.AccessControl.SemaphoreSecurity.AuditRuleType
  type: Property
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Gets the type that the <xref href=&quot;System.Security.AccessControl.SemaphoreSecurity&quot;></xref> class uses to represent audit rules."
  remarks: "Classes that derive from the <xref:System.Security.AccessControl.ObjectSecurity> class override the <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> property and return the type they use to represent audit rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct audit rule type to use with each security object."
  syntax:
    content: public override Type AuditRuleType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type> object representing the <xref href=&quot;System.Security.AccessControl.SemaphoreAuditRule&quot;></xref> class."
  overload: System.Security.AccessControl.SemaphoreSecurity.AuditRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: RemoveAccessRule(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.RemoveAccessRule(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(SemaphoreAccessRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Searches for an access control rule with the same user and <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref> (allow or deny) as the specified rule, and with compatible inheritance and propagation flags; if such a rule is found, the rights contained in the specified access rule are removed from it."
  remarks: "The current <xref:System.Security.AccessControl.SemaphoreSecurity> is searched for a rule that has the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.SemaphoreSecurity> object.      > [!IMPORTANT] >  Although you can specify inheritance and propagation flags for semaphore access rules, by creating them with the <xref:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory%2A> method, this is not recommended. Inheritance and propagation have no meaning for named semaphores, and they make the maintenance of access rules more complicated."
  example:
  - "The following code example demonstrates the use of the RemoveAccessRule method to remove rights from an <xref:System.Security.AccessControl.AccessControlType> rule in a <xref:System.Security.AccessControl.SemaphoreSecurity> object. It also shows that other rights in `rule` are ignored.  \n  \n The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object and adds rules that allow and deny various rights for the current user. The rights allowed include <xref:System.Security.AccessControl.SemaphoreRights>, <xref:System.Security.AccessControl.SemaphoreRights>, and <xref:System.Security.AccessControl.SemaphoreRights>. The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.SemaphoreRights> and <xref:System.Security.AccessControl.SemaphoreRights> rights, and uses that rule with the RemoveAccessRule method to remove <xref:System.Security.AccessControl.SemaphoreRights> from the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.SemaphoreSecurity> object. The extraneous <xref:System.Security.AccessControl.SemaphoreRights> right in `rule` is ignored.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/967006c5-d60e-4018-a570-_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/967006c5-d60e-4018-a570-_1.vb)]"
  syntax:
    content: public bool RemoveAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAccessRule
      description: "A <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;></xref> that specifies the user and <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref> to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a compatible rule is found; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: RemoveAccessRuleAll(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.RemoveAccessRuleAll(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(SemaphoreAccessRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Searches for all access control rules with the same user and <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref> (allow or deny) as the specified rule and, if found, removes them."
  remarks: "The current <xref:System.Security.AccessControl.SemaphoreSecurity> object is searched for rules that have the same user and the same <xref:System.Security.AccessControl.AccessControlType> value as `rule`. Any rights specified by `rule` are ignored when performing this search. If no matching rules are found, no action is taken."
  example:
  - "The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.  \n  \n The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType> rule from the <xref:System.Security.AccessControl.SemaphoreSecurity> object.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/visualbasic/0b2e6ab3-65bc-4eea-922e-_1.vb)]\n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/csharp/0b2e6ab3-65bc-4eea-922e-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleAll (System.Security.AccessControl.SemaphoreAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAccessRule
      description: "A <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;></xref> that specifies the user and <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref> to search for. Any rights specified by this rule are ignored."
  overload: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: RemoveAccessRuleSpecific(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.RemoveAccessRuleSpecific(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(SemaphoreAccessRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Searches for an access control rule that exactly matches the specified rule and, if found, removes it."
  remarks: "The rule is removed only if it exactly matches `rule` in all details, including flags. Other rules with the same user and <xref:System.Security.AccessControl.AccessControlType> are not affected.      > [!IMPORTANT] >  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the access security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAccessRuleSpecific method cannot remove it."
  example:
  - "The following code example shows that the RemoveAccessRuleSpecific method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.  \n  \n The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> access rule. The example then passes the original <xref:System.Security.AccessControl.AccessControlType> rule to the RemoveAccessRuleSpecific method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.SemaphoreSecurity> object, and successfully uses the RemoveAccessRuleSpecific method to remove the rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/visualbasic/0797aedd-e0bb-444b-b25e-_1.vb)]\n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/csharp/0797aedd-e0bb-444b-b25e-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.SemaphoreAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;></xref> to remove."
  overload: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: RemoveAuditRule(SemaphoreAuditRule)
  nameWithType: SemaphoreSecurity.RemoveAuditRule(SemaphoreAuditRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(SemaphoreAuditRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Searches for an audit control rule with the same user as the specified rule, and with compatible inheritance and propagation flags; if a compatible rule is found, the rights contained in the specified rule are removed from it."
  remarks: "The current <xref:System.Security.AccessControl.SemaphoreSecurity> is searched for an audit rule that has the same user as `rule`. If no such rule is found, no action is taken, and the method returns `false`. If matching rules are found, their inheritance and compatibility flags are checked for compatibility with the flags specified in `rule`. If no compatible rule is found, no action is taken, and the method returns `false`. If a rule with compatible flags is found, the rights specified in `rule` are removed from the compatible rule, and the method returns `true`. If `rule` specifies rights not contained in the compatible rule, no action is taken with respect to those rights. If all rights are removed from the compatible rule, the entire rule is removed from the current <xref:System.Security.AccessControl.SemaphoreSecurity> object.      > [!IMPORTANT] >  Although you can specify inheritance and propagation flags for semaphore audit rules, by creating them with the <xref:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory%2A> method, this is not recommended. Inheritance and propagation have no meaning for named semaphores, and they make the maintenance of audit rules more complicated."
  syntax:
    content: public bool RemoveAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAuditRule
      description: "A <xref href=&quot;System.Security.AccessControl.SemaphoreAuditRule&quot;></xref> that specifies the user to search for, and a set of inheritance and propagation flags that a matching rule, if found, must be compatible with. Specifies the rights to remove from the compatible rule, if found."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a compatible rule is found; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: RemoveAuditRuleAll(SemaphoreAuditRule)
  nameWithType: SemaphoreSecurity.RemoveAuditRuleAll(SemaphoreAuditRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(SemaphoreAuditRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Searches for all audit rules with the same user as the specified rule and, if found, removes them."
  remarks: "The current <xref:System.Security.AccessControl.SemaphoreSecurity> is searched for audit rules that have the same user as `rule`. Any rights specified by `rule` are ignored when performing this search. All matching rules are removed. If no matching rules are found, no action is taken."
  syntax:
    content: public void RemoveAuditRuleAll (System.Security.AccessControl.SemaphoreAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAuditRule
      description: "A <xref href=&quot;System.Security.AccessControl.SemaphoreAuditRule&quot;></xref> that specifies the user to search for. Any rights specified by this rule are ignored."
  overload: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: RemoveAuditRuleSpecific(SemaphoreAuditRule)
  nameWithType: SemaphoreSecurity.RemoveAuditRuleSpecific(SemaphoreAuditRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(SemaphoreAuditRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Searches for an audit rule that exactly matches the specified rule and, if found, removes it."
  remarks: "The rule is removed only if it exactly matches `rule` in all details, including flags. Other audit rules for the same user are not affected.      > [!IMPORTANT] >  A rule represents one or more underlying access control entries (ACE), and these entries are split or combined as necessary when you modify the audit security rules for a user. Thus, a rule might no longer exist in the specific form it had when it was added, and in that case the RemoveAuditRuleSpecific method cannot remove it."
  syntax:
    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.SemaphoreAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAuditRule
      description: "The <xref href=&quot;System.Security.AccessControl.SemaphoreAuditRule&quot;></xref> to remove."
  overload: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: ResetAccessRule(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.ResetAccessRule(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(SemaphoreAccessRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Removes all access control rules with the same user as the specified rule, regardless of <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref>, and then adds the specified rule."
  remarks: "If there are no access rules whose user matches the specified rule, `rule` is added."
  example:
  - "The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  \n  \n The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the ResetAccessRule method to replace both of the existing rules with the new rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule#1](~/add/codesnippet/csharp/950b9d2b-d0bb-443e-8790-_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule#1](~/add/codesnippet/visualbasic/950b9d2b-d0bb-443e-8790-_1.vb)]"
  syntax:
    content: public void ResetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;></xref> to add. The user specified by this rule determines the rules to remove before this rule is added."
  overload: System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  id: SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: SetAccessRule(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.SetAccessRule(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(SemaphoreAccessRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Removes all access control rules with the same user and <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref> (allow or deny) as the specified rule, and then adds the specified rule."
  remarks: "If the specified rule has <xref:System.Security.AccessControl.AccessControlType>, the effect of this method is to remove all <xref:System.Security.AccessControl.AccessControlType> rules for the specified user, replacing them with the specified rule. If the specified rule has <xref:System.Security.AccessControl.AccessControlType>, all <xref:System.Security.AccessControl.AccessControlType> rules for the specified user are replaced with the specified rule.       If there are no rules whose user and <xref:System.Security.AccessControl.AccessControlType> match the specified rule, `rule` is added."
  example:
  - "The following code example shows how the SetAccessRule method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.  \n  \n The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the SetAccessRule method to replace the existing Allow rule with the new rule. The rule that denies access is not affected.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.SetAccessRule#1](~/add/codesnippet/visualbasic/8a133971-d359-43dd-87ab-_1.vb)]\n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.SetAccessRule#1](~/add/codesnippet/csharp/8a133971-d359-43dd-87ab-_1.cs)]"
  syntax:
    content: public void SetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;></xref> to add. The user and <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref> of this rule determine the rules to remove before this rule is added."
  overload: System.Security.AccessControl.SemaphoreSecurity.SetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  id: SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  langs:
  - csharp
  name: SetAuditRule(SemaphoreAuditRule)
  nameWithType: SemaphoreSecurity.SetAuditRule(SemaphoreAuditRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(SemaphoreAuditRule)
  type: Method
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Removes all audit rules with the same user as the specified rule, regardless of the <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;></xref> value, and then adds the specified rule."
  remarks: "If there are no audit rules whose user matches the specified rule, `rule` is added."
  syntax:
    content: public void SetAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.SemaphoreAuditRule
      description: "The <xref href=&quot;System.Security.AccessControl.SemaphoreAuditRule&quot;></xref> to add. The user specified by this rule determines the rules to remove before this rule is added."
  overload: System.Security.AccessControl.SemaphoreSecurity.SetAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.NativeObjectSecurity
  isExternal: false
  name: System.Security.AccessControl.NativeObjectSecurity
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.SemaphoreSecurity.#ctor
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: SemaphoreSecurity()
  nameWithType: SemaphoreSecurity.SemaphoreSecurity()
  fullName: System.Security.AccessControl.SemaphoreSecurity.SemaphoreSecurity()
- uid: System.Security.AccessControl.SemaphoreSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: SemaphoreSecurity(String,AccessControlSections)
  nameWithType: SemaphoreSecurity.SemaphoreSecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.SemaphoreSecurity.SemaphoreSecurity(String,AccessControlSections)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.Security.AccessControl.SemaphoreSecurity.AccessRightType
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: SemaphoreSecurity.AccessRightType
  fullName: System.Security.AccessControl.SemaphoreSecurity.AccessRightType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: SemaphoreSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  nameWithType: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.SemaphoreSecurity.AccessRuleType
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: SemaphoreSecurity.AccessRuleType
  fullName: System.Security.AccessControl.SemaphoreSecurity.AccessRuleType
- uid: System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AddAccessRule(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.AddAccessRule(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(SemaphoreAccessRule)
- uid: System.Security.AccessControl.SemaphoreAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: SemaphoreAccessRule
  nameWithType: SemaphoreAccessRule
  fullName: System.Security.AccessControl.SemaphoreAccessRule
- uid: System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AddAuditRule(SemaphoreAuditRule)
  nameWithType: SemaphoreSecurity.AddAuditRule(SemaphoreAuditRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(SemaphoreAuditRule)
- uid: System.Security.AccessControl.SemaphoreAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: SemaphoreAuditRule
  nameWithType: SemaphoreAuditRule
  fullName: System.Security.AccessControl.SemaphoreAuditRule
- uid: System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: SemaphoreSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  nameWithType: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.SemaphoreSecurity.AuditRuleType
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: SemaphoreSecurity.AuditRuleType
  fullName: System.Security.AccessControl.SemaphoreSecurity.AuditRuleType
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAccessRule(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.RemoveAccessRule(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(SemaphoreAccessRule)
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAccessRuleAll(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.RemoveAccessRuleAll(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(SemaphoreAccessRule)
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.RemoveAccessRuleSpecific(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(SemaphoreAccessRule)
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAuditRule(SemaphoreAuditRule)
  nameWithType: SemaphoreSecurity.RemoveAuditRule(SemaphoreAuditRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(SemaphoreAuditRule)
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAuditRuleAll(SemaphoreAuditRule)
  nameWithType: SemaphoreSecurity.RemoveAuditRuleAll(SemaphoreAuditRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(SemaphoreAuditRule)
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific(SemaphoreAuditRule)
  nameWithType: SemaphoreSecurity.RemoveAuditRuleSpecific(SemaphoreAuditRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(SemaphoreAuditRule)
- uid: System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: ResetAccessRule(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.ResetAccessRule(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(SemaphoreAccessRule)
- uid: System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: SetAccessRule(SemaphoreAccessRule)
  nameWithType: SemaphoreSecurity.SetAccessRule(SemaphoreAccessRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(SemaphoreAccessRule)
- uid: System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: SetAuditRule(SemaphoreAuditRule)
  nameWithType: SemaphoreSecurity.SetAuditRule(SemaphoreAuditRule)
  fullName: System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(SemaphoreAuditRule)
- uid: System.Security.AccessControl.SemaphoreSecurity.#ctor*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: SemaphoreSecurity
  nameWithType: SemaphoreSecurity.SemaphoreSecurity
- uid: System.Security.AccessControl.SemaphoreSecurity.AccessRightType*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: SemaphoreSecurity.AccessRightType
- uid: System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AccessRuleFactory
  nameWithType: SemaphoreSecurity.AccessRuleFactory
- uid: System.Security.AccessControl.SemaphoreSecurity.AccessRuleType*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: SemaphoreSecurity.AccessRuleType
- uid: System.Security.AccessControl.SemaphoreSecurity.AddAccessRule*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AddAccessRule
  nameWithType: SemaphoreSecurity.AddAccessRule
- uid: System.Security.AccessControl.SemaphoreSecurity.AddAuditRule*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AddAuditRule
  nameWithType: SemaphoreSecurity.AddAuditRule
- uid: System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AuditRuleFactory
  nameWithType: SemaphoreSecurity.AuditRuleFactory
- uid: System.Security.AccessControl.SemaphoreSecurity.AuditRuleType*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: SemaphoreSecurity.AuditRuleType
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAccessRule
  nameWithType: SemaphoreSecurity.RemoveAccessRule
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAccessRuleAll
  nameWithType: SemaphoreSecurity.RemoveAccessRuleAll
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific
  nameWithType: SemaphoreSecurity.RemoveAccessRuleSpecific
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAuditRule
  nameWithType: SemaphoreSecurity.RemoveAuditRule
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAuditRuleAll
  nameWithType: SemaphoreSecurity.RemoveAuditRuleAll
- uid: System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific
  nameWithType: SemaphoreSecurity.RemoveAuditRuleSpecific
- uid: System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: ResetAccessRule
  nameWithType: SemaphoreSecurity.ResetAccessRule
- uid: System.Security.AccessControl.SemaphoreSecurity.SetAccessRule*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: SetAccessRule
  nameWithType: SemaphoreSecurity.SetAccessRule
- uid: System.Security.AccessControl.SemaphoreSecurity.SetAuditRule*
  parent: System.Security.AccessControl.SemaphoreSecurity
  isExternal: false
  name: SetAuditRule
  nameWithType: SemaphoreSecurity.SetAuditRule
