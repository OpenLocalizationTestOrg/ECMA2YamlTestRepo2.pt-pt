### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.ICustomMarshaler
  id: ICustomMarshaler
  children:
  - System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  - System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  - System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  - System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  - System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  langs:
  - csharp
  name: ICustomMarshaler
  nameWithType: ICustomMarshaler
  fullName: System.Runtime.InteropServices.ICustomMarshaler
  type: Interface
  summary: "Fornece wrappers personalizados para processar as chamadas de método."
  remarks: "Um empacotador de referências fornece uma ponte entre as funcionalidades do antigo e novo interfaces. Empacotamento de referências personalizado fornece as seguintes vantagens:-permite que aplicações cliente que foram concebidas para funcionarem com uma interface antiga também funcionar com servidores que implementam uma nova interface.      -Permite que aplicações de cliente criadas de modo a trabalhar com uma nova interface de trabalhar com servidores que implementam uma interface antiga.       Se tiver uma interface que apresenta o comportamento de empacotamento de referências diferente ou que é exposto para o modelo de objeto do componente (COM) de forma diferente, pode conceber um empacotador de referências personalizado em vez de utilizar o empacotador de referências de interoperabilidade. Ao utilizar um empacotador de referências personalizado, pode minimizar a distinção entre novos componentes de .NET Framework e componentes COM existentes.       Por exemplo, suponha que estiver a desenvolver uma interface gerida chamada `INew`. Quando esta interface está exposta a COM através de um padrão COM possível chamar EndRead papel de embrulho (CCW), tem os mesmos métodos de que a interface gerida e utiliza as empacotamento de referências regras incorporadas no empacotador de referências de interoperabilidade. Agora, suponha que chama uma interface COM conhecidos `IOld` já fornece a mesma funcionalidade que o `INew` interface. Ao conceber um empacotador de referências personalizado, pode fornecer uma implementação de não gerida `IOld` que delega simplesmente as chamadas para a implementação de gerido a `INew` interface. Por conseguinte, o empacotador de referências personalizado atua como uma ponte entre as interfaces geridas e não geridas.      > [!NOTE] > Os empacotadores de referências personalizados não são invocados quando chamar de geridos de código de código gerido para uma interface de só de envio.      ## Definir o empacotamento de referências tipo antes de pode criar um empacotador de referências personalizado, tem de definir as interfaces geridas e não geridas que serão possível empacotar as referências. Estas interfaces normalmente efetuam a mesma função, mas são expostas de forma diferente, para objetos geridos e.       Um compilador gerido produz uma interface gerida de metadados e a interface resultante aspeto quaisquer outro interface gerida. O exemplo seguinte mostra uma interface comum.       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb) ] definir o tipo não gerido na linguagem de definição de Interface (IDL) e compilá-la com o compilador de linguagem de definição de Interface do Microsoft (MIDL).     Predefinir a interface dentro de uma instrução de biblioteca e atribua-lhe um ID de interface com o atributo de identificador exclusivo universal (UUID), como o exemplo seguinte demonstra.      ```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```O compilador MIDL produz vários ficheiros de saída. Se a interface está definida no Old.idl, o ficheiro de saída Old_i.c define um `const` variável com o identificador de interface (IID) da interface, o exemplo seguinte demonstra.      ```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```O ficheiro Old.h também é produzido pelo MIDL. Contém uma definição de C++ da interface que pode ser incluída no seu código de origem do C++.      ## Implementar a sua de Interface ICustomMarshaler empacotador de referências personalizado tem de implementar a interface ICustomMarshaler para fornecer os wrappers adequados para o tempo de execução.       O seguinte código c# apresenta a interface de base tem de ser implementada por todos os empacotadores de referências personalizados.       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb) ] ICustomMarshaler a interface inclui métodos que fornecem suporte à conversão, suporte de limpeza e informações sobre os dados de referências.          | Tipo de operação | Método de ICustomMarshaler | Descrição |   |-----------------------|-----------------------------|-----------------|   | Conversão (a partir de nativo para código gerido) | <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>| Marshals um ponteiro para dados de nativos para um objeto gerido.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> Este método devolve um wrapper de possível chamar EndRead runtime personalizado (RCW), que pode empacotar referências a interface não gerida que é transmitida como um argumento. O empacotador de referências deve devolver uma instância do RCW personalizado para esse tipo. |   | Conversão (a partir do código gerido ao nativo) | <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>| Marshals um objeto gerido para um ponteiro para dados nativos.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> Este método devolve um COM possível chamar EndRead wrapper personalizados (CCW) que pode empacotar referências a interface gerida que é transmitida como um argumento. O empacotador de referências deve devolver uma instância do CCW personalizado para esse tipo. |   | Limpar (de código nativo) | <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>| Permite o empacotador de referências limpar os dados de nativos (o CCW) que são devolvidos pelo método <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>. |   | Limpar (de código gerido) | <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>| Permite o empacotador de referências limpar os dados geridos (o RCW) que são devolvidos pelo método <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>. |   | Informações (sobre código nativo) | <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>| Devolve o tamanho dos dados não geridos a possível empacotar as referências. |      # # # Conversão <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName>Marshals um ponteiro para dados de nativos para um objeto gerido.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A> Este método devolve um wrapper de possível chamar EndRead runtime personalizado (RCW), que pode empacotar referências a interface não gerida que é transmitida como um argumento. O empacotador de referências deve devolver uma instância do RCW personalizado para esse tipo.       <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName>Marshals um objeto gerido para um ponteiro para dados nativos.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName> Este método devolve um COM possível chamar EndRead wrapper personalizados (CCW) que pode empacotar referências a interface gerida que é transmitida como um argumento. O empacotador de referências deve devolver uma instância do CCW personalizado para esse tipo.      ### Limpeza <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName>permite o empacotador de referências limpar os dados de nativos (o CCW) que são devolvidos pelo <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>método.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName>       <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName>Permite o empacotador de referências limpar os dados geridos (o RCW) que são devolvidos pelo <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>método.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A></xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName>      ### Informações de tamanho <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName>devolve o tamanho dos dados não geridos a possível empacotar as referências.</xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName>      ## Implementar o método GetInstance para além de implementar a interface ICustomMarshaler, os empacotadores de referências personalizados tem de implementar um `static` método chamado `GetInstance` que aceita um <xref:System.String>como um parâmetro e tem um tipo de retorno de ICustomMarshaler.</xref:System.String> Isto `static` método é denominado pela camada de interoperabilidade COM o runtime idioma comum ao instanciar a uma instância do empacotador de referências personalizado. A cadeia que é transmitida ao `GetInstance` é um cookie que pode utilizar o método para personalizar o empacotador de referências personalizado devolvido.      ```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```# # Aplicar MarshalAsAttribute para utilizar um empacotador de referências personalizado, tem de aplicar o <xref:System.Runtime.InteropServices.MarshalAsAttribute>atributo para o parâmetro ou o campo que está a ser empacotado.</xref:System.Runtime.InteropServices.MarshalAsAttribute>       Tem de passar também o <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>valor de enumeração para a <xref:System.Runtime.InteropServices.MarshalAsAttribute>construtor.</xref:System.Runtime.InteropServices.MarshalAsAttribute> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> Além disso, tem de especificar o <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>campo com um dos seguintes parâmetros nomeados:- <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>(obrigatório): O nome completamente qualificado do empacotador de referências personalizado.</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> </xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> O nome deve incluir o espaço de nomes e a classe de empacotador de referências personalizado. O empacotador de referências personalizado não está definido na assemblagem que é utilizado, tem de especificar o nome da assemblagem no qual está definido.          > [!NOTE] > Pode utilizar o <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>campo em vez do <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>campo.</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> </xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>cria um tipo que seja mais fácil especificar.</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>      - <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie>(opcional): um cookie que é transferido para o empacotador de referências personalizado.</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> Pode utilizar o cookie para fornecer informações adicionais para o empacotador de referências. Por exemplo, se for utilizado o mesmo empacotador de referências para fornecer um número de wrappers, o cookie identifica um wrapper específico. O cookie é transmitido para o `GetInstance` método do empacotador de referências.       O <xref:System.Runtime.InteropServices.MarshalAsAttribute>atributo identifica o empacotador de referências personalizado, pelo que pode ativar o wrapper de adequado.</xref:System.Runtime.InteropServices.MarshalAsAttribute> Serviço de interoperabilidade do language runtime, em seguida, examina o atributo e cria o tempo de empacotador de referências personalizado o primeiro o argumento (parâmetro ou campo) tem de ser empacotado.       O tempo de execução, em seguida, chama o <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>e <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>métodos em empacotador de referências personalizado para ativar o wrapper de correto para processar a chamada.</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>      ## A utilização de um empacotador de referências personalizado quando a empacotador de referências personalizado é concluída, pode utilizá-lo como um wrapper personalizados para um determinado tipo. O exemplo seguinte mostra a definição do `IUserData` interface gerida: [!code-cpp [System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb) ] no exemplo seguinte, o `IUserData` interface utiliza o `NewOldMarshaler` empacotador de referências personalizado para ativar as aplicações de cliente não geridos passar uma `IOld` interface para o `DoSomeStuff` método.     A descrição da gerido a `DoSomeStuff` método um `INew` interface, conforme mostrado no exemplo anterior, enquanto que a versão não gerida da `DoSomeStuff` demora um `IOld` apontador de interface, conforme mostrado no exemplo seguinte.      ```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```A biblioteca de tipos que é gerada através da exportação definição gerida do `IUserData` gera a definição não gerida mostrada neste exemplo, em vez da definição do padrão. O <xref:System.Runtime.InteropServices.MarshalAsAttribute>atributo aplicado para o `INew` argumento na definição gerida do `DoSomeStuff` método indica que o argumento utiliza um empacotador de referências personalizado, como o seguinte exemplo mostra.</xref:System.Runtime.InteropServices.MarshalAsAttribute>       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)][!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb) ] nos exemplos anteriores, o primeiro parâmetro fornecido para o <xref:System.Runtime.InteropServices.MarshalAsAttribute>atributo é a <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>valor de enumeração `UnmanagedType.CustomMarshaler`.</xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.MarshalAsAttribute>                      O segundo parâmetro é o <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>campo, o que fornece o nome completamente qualificado do empacotador de referências personalizado.</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> Este nome é constituído pelo espaço de nomes e a classe de empacotador de referências personalizado (`MarshalType=&quot;MyCompany.NewOldMarshaler&quot;`)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ICustomMarshaler
  implements: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  id: CleanUpManagedData(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: CleanUpManagedData(Object)
  nameWithType: ICustomMarshaler.CleanUpManagedData(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "Executa necessária limpeza dos dados geridos quando este já não é necessário."
  syntax:
    content: public void CleanUpManagedData (object ManagedObj);
    parameters:
    - id: ManagedObj
      type: System.Object
      description: "O objeto gerido para ser destruída."
  overload: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  id: CleanUpNativeData(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: CleanUpNativeData(IntPtr)
  nameWithType: ICustomMarshaler.CleanUpNativeData(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "Executa necessária limpeza dos dados não geridos quando este já não é necessário."
  syntax:
    content: public void CleanUpNativeData (IntPtr pNativeData);
    parameters:
    - id: pNativeData
      type: System.IntPtr
      description: "Um apontador para os dados não geridos para ser destruída."
  overload: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  id: GetNativeDataSize
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: GetNativeDataSize()
  nameWithType: ICustomMarshaler.GetNativeDataSize()
  fullName: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "Devolve o tamanho dos dados de nativos para possível empacotar as referências."
  syntax:
    content: public int GetNativeDataSize ();
    parameters: []
    return:
      type: System.Int32
      description: "O tamanho, em bytes, dos dados de nativos."
  overload: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  id: MarshalManagedToNative(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: MarshalManagedToNative(Object)
  nameWithType: ICustomMarshaler.MarshalManagedToNative(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "Converte os dados geridos dados não geridos."
  syntax:
    content: public IntPtr MarshalManagedToNative (object ManagedObj);
    parameters:
    - id: ManagedObj
      type: System.Object
      description: "O objeto gerido a converter."
    return:
      type: System.IntPtr
      description: "Um apontador para a vista de COM do objeto gerido."
  overload: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  id: MarshalNativeToManaged(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: MarshalNativeToManaged(IntPtr)
  nameWithType: ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "Converte dados geridos os dados não geridos."
  syntax:
    content: public object MarshalNativeToManaged (IntPtr pNativeData);
    parameters:
    - id: pNativeData
      type: System.IntPtr
      description: "Um apontador para os dados não geridos a ser encapsulada."
    return:
      type: System.Object
      description: "Um objeto que representa a vista dos dados COM gerido."
  overload: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpManagedData(Object)
  nameWithType: ICustomMarshaler.CleanUpManagedData(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpNativeData(IntPtr)
  nameWithType: ICustomMarshaler.CleanUpNativeData(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: GetNativeDataSize()
  nameWithType: ICustomMarshaler.GetNativeDataSize()
  fullName: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalManagedToNative(Object)
  nameWithType: ICustomMarshaler.MarshalManagedToNative(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(Object)
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalNativeToManaged(IntPtr)
  nameWithType: ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(IntPtr)
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpManagedData
  nameWithType: ICustomMarshaler.CleanUpManagedData
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpNativeData
  nameWithType: ICustomMarshaler.CleanUpNativeData
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: GetNativeDataSize
  nameWithType: ICustomMarshaler.GetNativeDataSize
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalManagedToNative
  nameWithType: ICustomMarshaler.MarshalManagedToNative
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalNativeToManaged
  nameWithType: ICustomMarshaler.MarshalNativeToManaged
