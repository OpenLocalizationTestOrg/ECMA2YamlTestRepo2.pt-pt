### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlElement
  id: XmlElement
  children:
  - System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  - System.Xml.XmlElement.Attributes
  - System.Xml.XmlElement.CloneNode(System.Boolean)
  - System.Xml.XmlElement.GetAttribute(System.String)
  - System.Xml.XmlElement.GetAttribute(System.String,System.String)
  - System.Xml.XmlElement.GetAttributeNode(System.String)
  - System.Xml.XmlElement.GetAttributeNode(System.String,System.String)
  - System.Xml.XmlElement.GetElementsByTagName(System.String)
  - System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlElement.HasAttribute(System.String)
  - System.Xml.XmlElement.HasAttribute(System.String,System.String)
  - System.Xml.XmlElement.HasAttributes
  - System.Xml.XmlElement.InnerText
  - System.Xml.XmlElement.InnerXml
  - System.Xml.XmlElement.IsEmpty
  - System.Xml.XmlElement.LocalName
  - System.Xml.XmlElement.Name
  - System.Xml.XmlElement.NamespaceURI
  - System.Xml.XmlElement.NextSibling
  - System.Xml.XmlElement.NodeType
  - System.Xml.XmlElement.OwnerDocument
  - System.Xml.XmlElement.ParentNode
  - System.Xml.XmlElement.Prefix
  - System.Xml.XmlElement.RemoveAll
  - System.Xml.XmlElement.RemoveAllAttributes
  - System.Xml.XmlElement.RemoveAttribute(System.String)
  - System.Xml.XmlElement.RemoveAttribute(System.String,System.String)
  - System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
  - System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
  - System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)
  - System.Xml.XmlElement.SchemaInfo
  - System.Xml.XmlElement.SetAttribute(System.String,System.String)
  - System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)
  - System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
  - System.Xml.XmlElement.SetAttributeNode(System.String,System.String)
  - System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
  type: Class
  summary: "Represents an element."
  remarks: "Elements are one of the most common nodes in the W3C Document Object Model (DOM). Elements can have attributes associated with them. The `XmlElement` class has many methods for accessing attributes (<xref:System.Xml.XmlElement.GetAttribute%2A>, <xref:System.Xml.XmlElement.SetAttribute%2A>, <xref:System.Xml.XmlElement.RemoveAttribute%2A>, <xref:System.Xml.XmlElement.GetAttributeNode%2A>, and so on). You can also use the <xref:System.Xml.XmlElement.Attributes%2A> property which returns an <xref:System.Xml.XmlAttributeCollection> enabling you to access attributes by name or index from the collection."
  syntax:
    content: 'public class XmlElement : System.Xml.XmlLinkedNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  - System.Xml.XmlLinkedNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlLinkedNode.PreviousSibling
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.BaseURI
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.CreateNavigator
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.IsReadOnly
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  id: '#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)'
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: XmlElement(String,String,String,XmlDocument)
  nameWithType: XmlElement.XmlElement(String,String,String,XmlDocument)
  fullName: System.Xml.XmlElement.XmlElement(String,String,String,XmlDocument)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Initializes a new instance of the <xref href=&quot;System.Xml.XmlElement&quot;></xref> class."
  remarks: "Do not instantiate an <xref:System.Xml.XmlElement> directly; instead, use methods such as <xref:System.Xml.XmlDocument.CreateElement%2A>."
  syntax:
    content: protected XmlElement (string prefix, string localName, string namespaceURI, System.Xml.XmlDocument doc);
    parameters:
    - id: prefix
      type: System.String
      description: "The namespace prefix; see the <xref:System.Xml.XmlElement.Prefix*> property."
    - id: localName
      type: System.String
      description: "The local name; see the <xref:System.Xml.XmlElement.LocalName*> property."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI; see the <xref:System.Xml.XmlElement.NamespaceURI*> property."
    - id: doc
      type: System.Xml.XmlDocument
      description: "The parent XML document."
  overload: System.Xml.XmlElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.Attributes
  id: Attributes
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: Attributes
  nameWithType: XmlElement.Attributes
  fullName: System.Xml.XmlElement.Attributes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets an <xref href=&quot;System.Xml.XmlAttributeCollection&quot;></xref> containing the list of attributes for this node."
  remarks: ''
  example:
  - "The following example uses changes the value of the first attribute.  \n  \n [!code-cpp[Classic WebData XmlElement.Attributes Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._0_1.cpp)]\n [!code-cs[Classic WebData XmlElement.Attributes Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._0_1.cs)]\n [!code-vb[Classic WebData XmlElement.Attributes Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._0_1.vb)]"
  syntax:
    content: public override System.Xml.XmlAttributeCollection Attributes { get; }
    return:
      type: System.Xml.XmlAttributeCollection
      description: "<xref href=&quot;System.Xml.XmlAttributeCollection&quot;></xref> containing the list of attributes for this node."
  overload: System.Xml.XmlElement.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlElement.CloneNode(Boolean)
  fullName: System.Xml.XmlElement.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Creates a duplicate of this node."
  remarks: "This method serves as a copy constructor for nodes. The duplicate node has no parent (<xref:System.Xml.XmlNode.ParentNode%2A> returns `null`)."
  example:
  - "The following example creates a new element, clones it, and then adds both elements into an XML document.  \n  \n [!code-cpp[Classic WebData XmlElement.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._3_1.cpp)]\n [!code-cs[Classic WebData XmlElement.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._3_1.cs)]\n [!code-vb[Classic WebData XmlElement.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._3_1.vb)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to recursively clone the subtree under the specified node; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to clone only the node itself (and its attributes if the node is an <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>)."
    return:
      type: System.Xml.XmlNode
      description: "The cloned node."
  overload: System.Xml.XmlElement.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetAttribute(String)
  nameWithType: XmlElement.GetAttribute(String)
  fullName: System.Xml.XmlElement.GetAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Returns the value for the attribute with the specified name."
  remarks: ''
  example:
  - "The following example checks to see if the element has the specified attribute.  \n  \n [!code-cs[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._0_1.cs)]\n [!code-vb[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._0_1.vb)]\n [!code-cpp[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._0_1.cpp)]"
  syntax:
    content: public virtual string GetAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the attribute to retrieve. This is a qualified name. It is matched against the <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;></xref> property of the matching node."
    return:
      type: System.String
      description: "The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value."
  overload: System.Xml.XmlElement.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetAttribute(System.String,System.String)
  id: GetAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetAttribute(String,String)
  nameWithType: XmlElement.GetAttribute(String,String)
  fullName: System.Xml.XmlElement.GetAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Returns the value for the attribute with the specified local name and namespace URI."
  syntax:
    content: public virtual string GetAttribute (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "The local name of the attribute to retrieve."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI of the attribute to retrieve."
    return:
      type: System.String
      description: "The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value."
  overload: System.Xml.XmlElement.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetAttributeNode(System.String)
  id: GetAttributeNode(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetAttributeNode(String)
  nameWithType: XmlElement.GetAttributeNode(String)
  fullName: System.Xml.XmlElement.GetAttributeNode(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Returns the <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> with the specified name."
  remarks: ''
  example:
  - "The following example checks to see if the element has the specified attribute.  \n  \n [!code-cpp[Classic WebData XmlElement.GetAttributeNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._5_1.cpp)]\n [!code-cs[Classic WebData XmlElement.GetAttributeNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._5_1.cs)]\n [!code-vb[Classic WebData XmlElement.GetAttributeNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._5_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlAttribute GetAttributeNode (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the attribute to retrieve. This is a qualified name. It is matched against the <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;></xref> property of the matching node."
    return:
      type: System.Xml.XmlAttribute
      description: "The specified <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if a matching attribute was not found."
  overload: System.Xml.XmlElement.GetAttributeNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetAttributeNode(System.String,System.String)
  id: GetAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetAttributeNode(String,String)
  nameWithType: XmlElement.GetAttributeNode(String,String)
  fullName: System.Xml.XmlElement.GetAttributeNode(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Returns the <xref href=&quot;System.Xml.XmlAttribute&quot;></xref> with the specified local name and namespace URI."
  syntax:
    content: public virtual System.Xml.XmlAttribute GetAttributeNode (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "The local name of the attribute."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI of the attribute."
    return:
      type: System.Xml.XmlAttribute
      description: "The specified <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if a matching attribute was not found."
  overload: System.Xml.XmlElement.GetAttributeNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlElement.GetElementsByTagName(String)
  fullName: System.Xml.XmlElement.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Returns an <xref href=&quot;System.Xml.XmlNodeList&quot;></xref> containing a list of all descendant elements that match the specified <xref:System.Xml.XmlElement.Name*>."
  remarks: "The nodes are placed in the order in which they would be encountered in a preorder traversal of the <xref:System.Xml.XmlElement> tree.      > [!NOTE] >  It is recommended that you use the <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> or <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> method instead of the GetElementsByTagName method."
  example:
  - "The following example gets and displays all the book titles.  \n  \n [!code-cpp[Classic WebData XmlElement.GetElementsByTagName Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._13_1.cpp)]\n [!code-vb[Classic WebData XmlElement.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._13_1.vb)]\n [!code-cs[Classic WebData XmlElement.GetElementsByTagName Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._13_1.cs)]  \n  \n The example uses the file, `2books.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlElement.GetElementsByTagName Example#2](~/add/codesnippet/xml/m-system.xml.xmlelement._13_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name tag to match. This is a qualified name. It is matched against the <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;></xref> property of the matching node. The asterisk (*) is a special value that matches all tags."
    return:
      type: System.Xml.XmlNodeList
      description: "An <xref href=&quot;System.Xml.XmlNodeList&quot;></xref> containing a list of all matching nodes. The list is empty if there are no matching nodes."
  overload: System.Xml.XmlElement.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)
  id: GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: GetElementsByTagName(String,String)
  nameWithType: XmlElement.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlElement.GetElementsByTagName(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Returns an <xref href=&quot;System.Xml.XmlNodeList&quot;></xref> containing a list of all descendant elements that match the specified <xref:System.Xml.XmlElement.LocalName*> and <xref:System.Xml.XmlElement.NamespaceURI*>."
  remarks: "The nodes are placed in the order in which they would be encountered in a preorder traversal of the `XmlElement` tree.      > [!NOTE] >  It is recommended that you use the <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> or <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> method instead of the GetElementsByTagName method."
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "The local name to match. The asterisk (*) is a special value that matches all tags."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI to match."
    return:
      type: System.Xml.XmlNodeList
      description: "An <xref href=&quot;System.Xml.XmlNodeList&quot;></xref> containing a list of all matching nodes. The list is empty if there are no matching nodes."
  overload: System.Xml.XmlElement.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.HasAttribute(System.String)
  id: HasAttribute(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: HasAttribute(String)
  nameWithType: XmlElement.HasAttribute(String)
  fullName: System.Xml.XmlElement.HasAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Determines whether the current node has an attribute with the specified name."
  remarks: ''
  example:
  - "The following example checks to see if the element has the specified attribute.  \n  \n [!code-cs[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._7_1.cs)]\n [!code-vb[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._7_1.vb)]\n [!code-cpp[Classic WebData XmlElement.HasAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._7_1.cpp)]"
  syntax:
    content: public virtual bool HasAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the attribute to find. This is a qualified name. It is matched against the <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;></xref> property of the matching node."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current node has the specified attribute; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlElement.HasAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.HasAttribute(System.String,System.String)
  id: HasAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: HasAttribute(String,String)
  nameWithType: XmlElement.HasAttribute(String,String)
  fullName: System.Xml.XmlElement.HasAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Determines whether the current node has an attribute with the specified local name and namespace URI."
  syntax:
    content: public virtual bool HasAttribute (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "The local name of the attribute to find."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI of the attribute to find."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current node has the specified attribute; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlElement.HasAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.HasAttributes
  id: HasAttributes
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: HasAttributes
  nameWithType: XmlElement.HasAttributes
  fullName: System.Xml.XmlElement.HasAttributes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets a <xref uid=&quot;langword_csharp_boolean&quot; name=&quot;boolean&quot; href=&quot;&quot;></xref> value indicating whether the current node has any attributes."
  remarks: "This property is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example removes all attributes from the root element.  \n  \n [!code-cpp[Classic WebData XmlElement.HasAttributes Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._5_1.cpp)]\n [!code-vb[Classic WebData XmlElement.HasAttributes Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._5_1.vb)]\n [!code-cs[Classic WebData XmlElement.HasAttributes Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._5_1.cs)]"
  syntax:
    content: public virtual bool HasAttributes { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current node has attributes; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlElement.HasAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.InnerText
  id: InnerText
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlElement.InnerText
  fullName: System.Xml.XmlElement.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets or sets the concatenated values of the node and all its children."
  remarks: "Setting this property replaces all the children with the parsed contents of the given string.       This property is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example compares the `InnerText` and <xref:System.Xml.XmlElement.InnerXml%2A> properties.  \n  \n [!code-cpp[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._7_1.cpp)]\n [!code-cs[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._7_1.cs)]\n [!code-vb[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._7_1.vb)]"
  syntax:
    content: public override string InnerText { get; set; }
    return:
      type: System.String
      description: "The concatenated values of the node and all its children."
  overload: System.Xml.XmlElement.InnerText*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.InnerXml
  id: InnerXml
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlElement.InnerXml
  fullName: System.Xml.XmlElement.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets or sets the markup representing just the children of this node."
  remarks: "Setting this property replaces the children of the node with the parsed contents of the given string. The parsing is done in the current namespace context.       This property is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example compares the <xref:System.Xml.XmlElement.InnerText%2A> and `InnerXml` properties.  \n  \n [!code-cpp[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._2_1.cpp)]\n [!code-cs[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._2_1.cs)]\n [!code-vb[Classic WebData XmlElement.InnerXml Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._2_1.vb)]"
  syntax:
    content: public override string InnerXml { get; set; }
    return:
      type: System.String
      description: "The markup of the children of this node."
  overload: System.Xml.XmlElement.InnerXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "The XML specified when setting this property is not well-formed."
  platform:
  - net462
- uid: System.Xml.XmlElement.IsEmpty
  id: IsEmpty
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: IsEmpty
  nameWithType: XmlElement.IsEmpty
  fullName: System.Xml.XmlElement.IsEmpty
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets or sets the tag format of the element."
  remarks: "This property is a Microsoft extension of the Document Object Model (DOM)."
  example:
  - "The following example adds content to an empty element.  \n  \n [!code-cpp[Classic WebData XmlElement.IsEmpty Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._8_1.cpp)]\n [!code-cs[Classic WebData XmlElement.IsEmpty Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._8_1.cs)]\n [!code-vb[Classic WebData XmlElement.IsEmpty Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._8_1.vb)]"
  syntax:
    content: public bool IsEmpty { get; set; }
    return:
      type: System.Boolean
      description: "Returns <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the element is to be serialized in the short tag format &quot;&lt;item/&gt;&quot;; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> for the long format &quot;&lt;item&gt;&lt;/item&gt;&quot;.       When setting this property, if set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, the children of the element are removed and the element is serialized in the short tag format. If set to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>, the value of the property is changed (regardless of whether or not the element has content); if the element is empty, it is serialized in the long format.       This property is a Microsoft extension to the Document Object Model (DOM)."
  overload: System.Xml.XmlElement.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.LocalName
  id: LocalName
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlElement.LocalName
  fullName: System.Xml.XmlElement.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the local name of the current node."
  remarks: "If the node does not have a prefix, `LocalName` is the same as <xref:System.Xml.XmlElement.Name%2A>."
  example:
  - "The following example displays information on the ISBN element.  \n  \n [!code-vb[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._4_1.vb)]\n [!code-cs[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._4_1.cs)]\n [!code-cpp[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._4_1.cpp)]"
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: "The name of the current node with the prefix removed. For example, <xref uid=&quot;langword_csharp_LocalName&quot; name=&quot;LocalName&quot; href=&quot;&quot;></xref> is book for the element &lt;bk:book&gt;."
  overload: System.Xml.XmlElement.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.Name
  id: Name
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: Name
  nameWithType: XmlElement.Name
  fullName: System.Xml.XmlElement.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the qualified name of the node."
  remarks: ''
  example:
  - "The following example displays information on the ISBN element.  \n  \n [!code-cpp[Classic WebData XmlElement.Name Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._1_1.cpp)]\n [!code-cs[Classic WebData XmlElement.Name Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._1_1.cs)]\n [!code-vb[Classic WebData XmlElement.Name Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._1_1.vb)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "The qualified name of the node. For <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref> nodes, this is the tag name of the element."
  overload: System.Xml.XmlElement.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.NamespaceURI
  id: NamespaceURI
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: NamespaceURI
  nameWithType: XmlElement.NamespaceURI
  fullName: System.Xml.XmlElement.NamespaceURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the namespace URI of this node."
  remarks: "This is the namespace URI specified at creation time. For example, `NamespaceURI` is urn:samples for the element \\<bk:book xmlns:bk= &quot;urn:samples&quot;>"
  example:
  - "The following example displays information on the ISBN element.  \n  \n [!code-vb[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._6_1.vb)]\n [!code-cs[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._6_1.cs)]\n [!code-cpp[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._6_1.cpp)]"
  syntax:
    content: public override string NamespaceURI { get; }
    return:
      type: System.String
      description: "The namespace URI of this node. If there is no namespace URI, this property returns String.Empty."
  overload: System.Xml.XmlElement.NamespaceURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.NextSibling
  id: NextSibling
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: NextSibling
  nameWithType: XmlElement.NextSibling
  fullName: System.Xml.XmlElement.NextSibling
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the <xref href=&quot;System.Xml.XmlNode&quot;></xref> immediately following this element."
  syntax:
    content: public override System.Xml.XmlNode NextSibling { get; }
    return:
      type: System.Xml.XmlNode
      description: "The <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref> immediately following this element."
  overload: System.Xml.XmlElement.NextSibling*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.NodeType
  id: NodeType
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlElement.NodeType
  fullName: System.Xml.XmlElement.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the type of the current node."
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "The node type. For <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref> nodes, this value is XmlNodeType.Element."
  overload: System.Xml.XmlElement.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: OwnerDocument
  nameWithType: XmlElement.OwnerDocument
  fullName: System.Xml.XmlElement.OwnerDocument
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the <xref href=&quot;System.Xml.XmlDocument&quot;></xref> to which this node belongs."
  remarks: "When adding nodes to the current node, use the `XmlDocument` returned by the `OwnerDocument` property to create the node."
  example:
  - "The following example inserts a new element into an XML document.  \n  \n [!code-cpp[Classic WebData XmlElement.OwnerDocument Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._3_1.cpp)]\n [!code-vb[Classic WebData XmlElement.OwnerDocument Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._3_1.vb)]\n [!code-cs[Classic WebData XmlElement.OwnerDocument Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._3_1.cs)]"
  syntax:
    content: public override System.Xml.XmlDocument OwnerDocument { get; }
    return:
      type: System.Xml.XmlDocument
      description: "The <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;></xref> to which this element belongs."
  overload: System.Xml.XmlElement.OwnerDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.ParentNode
  id: ParentNode
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: ParentNode
  nameWithType: XmlElement.ParentNode
  fullName: System.Xml.XmlElement.ParentNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the parent of this node (for nodes that can have parents)."
  syntax:
    content: public override System.Xml.XmlNode ParentNode { get; }
    return:
      type: System.Xml.XmlNode
      description: "The <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref> that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. For all other nodes, the value returned depends on the <xref:System.Xml.XmlNode.NodeType*> of the node. The following table describes the possible return values for the <xref uid=&quot;langword_csharp_ParentNode&quot; name=&quot;ParentNode&quot; href=&quot;&quot;></xref> property."
  overload: System.Xml.XmlElement.ParentNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.Prefix
  id: Prefix
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: Prefix
  nameWithType: XmlElement.Prefix
  fullName: System.Xml.XmlElement.Prefix
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets or sets the namespace prefix of this node."
  remarks: "Setting this property changes the <xref:System.Xml.XmlElement.Name%2A> property, which holds the qualified name for an `XmlElement`. However, changing the prefix does not change the namespace URI of the element."
  example:
  - "The following example displays information on the ISBN element.  \n  \n [!code-vb[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlelement._9_1.vb)]\n [!code-cs[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/csharp/p-system.xml.xmlelement._9_1.cs)]\n [!code-cpp[Classic WebData XmlElement.LocalName Example#1](~/add/codesnippet/cpp/p-system.xml.xmlelement._9_1.cpp)]"
  syntax:
    content: public override string Prefix { get; set; }
    return:
      type: System.String
      description: "The namespace prefix of this node. If there is no prefix, this property returns String.Empty."
  overload: System.Xml.XmlElement.Prefix*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "This node is read-only"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "The specified prefix contains an invalid character.       The specified prefix is malformed.       The namespaceURI of this node is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       The specified prefix is &quot;xml&quot; and the namespaceURI of this node is different from http://www.w3.org/XML/1998/namespace."
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAll
  id: RemoveAll
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAll()
  nameWithType: XmlElement.RemoveAll()
  fullName: System.Xml.XmlElement.RemoveAll()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Removes all specified attributes and children of the current node. Default attributes are not removed."
  remarks: ''
  example:
  - "The following example removes all attributes and child nodes from the root element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAll Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._6_1.cpp)]\n [!code-vb[Classic WebData XmlElement.RemoveAll Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._6_1.vb)]\n [!code-cs[Classic WebData XmlElement.RemoveAll Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._6_1.cs)]"
  syntax:
    content: public override void RemoveAll ();
    parameters: []
  overload: System.Xml.XmlElement.RemoveAll*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAllAttributes
  id: RemoveAllAttributes
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAllAttributes()
  nameWithType: XmlElement.RemoveAllAttributes()
  fullName: System.Xml.XmlElement.RemoveAllAttributes()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Removes all specified attributes from the element. Default attributes are not removed."
  remarks: "This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example removes all attributes from the root element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAllAttributes Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._9_1.cpp)]\n [!code-cs[Classic WebData XmlElement.RemoveAllAttributes Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._9_1.cs)]\n [!code-vb[Classic WebData XmlElement.RemoveAllAttributes Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._9_1.vb)]"
  syntax:
    content: public virtual void RemoveAllAttributes ();
    parameters: []
  overload: System.Xml.XmlElement.RemoveAllAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAttribute(System.String)
  id: RemoveAttribute(System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAttribute(String)
  nameWithType: XmlElement.RemoveAttribute(String)
  fullName: System.Xml.XmlElement.RemoveAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Removes an attribute by name."
  remarks: "If the removed attribute is known to have a default value, an attribute immediately appears containing the default value and, if applicable, the corresponding namespace URI, local name, and prefix."
  example:
  - "The following example removes an attribute from an element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._1_1.cpp)]\n [!code-cs[Classic WebData XmlElement.RemoveAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._1_1.cs)]\n [!code-vb[Classic WebData XmlElement.RemoveAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._1_1.vb)]"
  syntax:
    content: public virtual void RemoveAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "The name of the attribute to remove.This is a qualified name. It is matched against the <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;></xref> property of the matching node."
  overload: System.Xml.XmlElement.RemoveAttribute*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The node is read-only."
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAttribute(System.String,System.String)
  id: RemoveAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAttribute(String,String)
  nameWithType: XmlElement.RemoveAttribute(String,String)
  fullName: System.Xml.XmlElement.RemoveAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced)."
  remarks: "If the removed attribute is known to have a default value, an attribute immediately appears containing the default value and, if applicable, the corresponding namespace URI, local name, and prefix."
  example:
  - "The following example removes an attribute from an element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAttribute1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._12_1.cpp)]\n [!code-vb[Classic WebData XmlElement.RemoveAttribute1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._12_1.vb)]\n [!code-cs[Classic WebData XmlElement.RemoveAttribute1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._12_1.cs)]"
  syntax:
    content: public virtual void RemoveAttribute (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "The local name of the attribute to remove."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI of the attribute to remove."
  overload: System.Xml.XmlElement.RemoveAttribute*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The node is read-only."
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
  id: RemoveAttributeAt(System.Int32)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAttributeAt(Int32)
  nameWithType: XmlElement.RemoveAttributeAt(Int32)
  fullName: System.Xml.XmlElement.RemoveAttributeAt(Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced)."
  remarks: "This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example removes an attribute from an element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAttributeAt Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._2_1.cpp)]\n [!code-vb[Classic WebData XmlElement.RemoveAttributeAt Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._2_1.vb)]\n [!code-cs[Classic WebData XmlElement.RemoveAttributeAt Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._2_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode RemoveAttributeAt (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "The index of the node to remove. The first node has index 0."
    return:
      type: System.Xml.XmlNode
      description: "The attribute node removed or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if there is no node at the given index."
  overload: System.Xml.XmlElement.RemoveAttributeAt*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
  id: RemoveAttributeNode(System.Xml.XmlAttribute)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAttributeNode(XmlAttribute)
  nameWithType: XmlElement.RemoveAttributeNode(XmlAttribute)
  fullName: System.Xml.XmlElement.RemoveAttributeNode(XmlAttribute)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Removes the specified <xref href=&quot;System.Xml.XmlAttribute&quot;></xref>."
  syntax:
    content: public virtual System.Xml.XmlAttribute RemoveAttributeNode (System.Xml.XmlAttribute oldAttr);
    parameters:
    - id: oldAttr
      type: System.Xml.XmlAttribute
      description: "The <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> node to remove. If the removed attribute has a default value, it is immediately replaced."
    return:
      type: System.Xml.XmlAttribute
      description: "The removed <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if <code>oldAttr</code> is not an attribute node of the <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlElement.RemoveAttributeNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "This node is read-only."
  platform:
  - net462
- uid: System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)
  id: RemoveAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: RemoveAttributeNode(String,String)
  nameWithType: XmlElement.RemoveAttributeNode(String,String)
  fullName: System.Xml.XmlElement.RemoveAttributeNode(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Removes the <xref href=&quot;System.Xml.XmlAttribute&quot;></xref> specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced)."
  remarks: ''
  example:
  - "The following example removes an attribute from an element.  \n  \n [!code-cpp[Classic WebData XmlElement.RemoveAttributeNode1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._11_1.cpp)]\n [!code-cs[Classic WebData XmlElement.RemoveAttributeNode1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._11_1.cs)]\n [!code-vb[Classic WebData XmlElement.RemoveAttributeNode1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._11_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlAttribute RemoveAttributeNode (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "The local name of the attribute."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI of the attribute."
    return:
      type: System.Xml.XmlAttribute
      description: "The removed <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref> does not have a matching attribute node."
  overload: System.Xml.XmlElement.RemoveAttributeNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "This node is read-only."
  platform:
  - net462
- uid: System.Xml.XmlElement.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XmlElement.SchemaInfo
  fullName: System.Xml.XmlElement.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Gets the post schema validation infoset that has been assigned to this node as a result of schema validation."
  remarks: "The SchemaInfo property is set when this node is validated."
  syntax:
    content: public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "An <xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;></xref> object containing the post schema validation infoset of this node."
  overload: System.Xml.XmlElement.SchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: SetAttribute(String,String)
  nameWithType: XmlElement.SetAttribute(String,String)
  fullName: System.Xml.XmlElement.SetAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Sets the value of the attribute with the specified name."
  remarks: "If an attribute with the same name is already present in the element, its value is changed to that of `value`. `value` is a simple string. It is not parsed as it is being set. Any markup, such as syntax to be recognized as an entity reference, is treated as literal text and needs to be properly escaped by the implementation when it is written out. In order to assign an attribute value that contains entity references, the user must create an <xref:System.Xml.XmlAttribute> node plus any <xref:System.Xml.XmlText> and <xref:System.Xml.XmlEntityReference> nodes, build the appropriate subtree and use <xref:System.Xml.XmlElement.SetAttributeNode%2A> to assign it as the value of an attribute."
  syntax:
    content: public virtual void SetAttribute (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: "The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components."
    - id: value
      type: System.String
      description: "The value to set for the attribute."
  overload: System.Xml.XmlElement.SetAttribute*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "The specified name contains an invalid character."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The node is read-only."
  platform:
  - net462
- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)
  id: SetAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: SetAttribute(String,String,String)
  nameWithType: XmlElement.SetAttribute(String,String,String)
  fullName: System.Xml.XmlElement.SetAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Sets the value of the attribute with the specified local name and namespace URI."
  syntax:
    content: public virtual string SetAttribute (string localName, string namespaceURI, string value);
    parameters:
    - id: localName
      type: System.String
      description: "The local name of the attribute."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI of the attribute."
    - id: value
      type: System.String
      description: "The value to set for the attribute."
    return:
      type: System.String
      description: "The attribute value."
  overload: System.Xml.XmlElement.SetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
  id: SetAttributeNode(System.Xml.XmlAttribute)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: SetAttributeNode(XmlAttribute)
  nameWithType: XmlElement.SetAttributeNode(XmlAttribute)
  fullName: System.Xml.XmlElement.SetAttributeNode(XmlAttribute)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Adds the specified <xref href=&quot;System.Xml.XmlAttribute&quot;></xref>."
  remarks: "If an attribute with that name is already present in the element, it is replaced by the new one."
  syntax:
    content: public virtual System.Xml.XmlAttribute SetAttributeNode (System.Xml.XmlAttribute newAttr);
    parameters:
    - id: newAttr
      type: System.Xml.XmlAttribute
      description: "The <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> node to add to the attribute collection for this element."
    return:
      type: System.Xml.XmlAttribute
      description: "If the attribute replaces an existing attribute with the same name, the old <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> is returned; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> is returned."
  overload: System.Xml.XmlElement.SetAttributeNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>newAttr</code> was created from a different document than the one that created this node. Or this node is read-only."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <code>newAttr</code> is already an attribute of another <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref> object. You must explicitly clone <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> nodes to re-use them in other <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref> objects."
  platform:
  - net462
- uid: System.Xml.XmlElement.SetAttributeNode(System.String,System.String)
  id: SetAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: SetAttributeNode(String,String)
  nameWithType: XmlElement.SetAttributeNode(String,String)
  fullName: System.Xml.XmlElement.SetAttributeNode(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Adds the specified <xref href=&quot;System.Xml.XmlAttribute&quot;></xref>."
  remarks: "The `XmlAttribute` does not have any children. Use <xref:System.Xml.XmlAttribute.Value%2A> to assign a text value to the attribute or use <xref:System.Xml.XmlNode.AppendChild%2A> (or a similar method) to add children to the attribute."
  example:
  - "The following example adds an attribute to an element.  \n  \n [!code-cs[Classic WebData XmlElement.SetAttributeNode1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._4_1.cs)]\n [!code-vb[Classic WebData XmlElement.SetAttributeNode1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._4_1.vb)]\n [!code-cpp[Classic WebData XmlElement.SetAttributeNode1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._4_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlAttribute SetAttributeNode (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "The local name of the attribute."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI of the attribute."
    return:
      type: System.Xml.XmlAttribute
      description: "The <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref> to add."
  overload: System.Xml.XmlElement.SetAttributeNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlElement.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlElement.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Saves all the children of the node to the specified <xref:System.Xml.XmlWriter>."
  remarks: "This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example displays the contents of the element to the console.  \n  \n [!code-cpp[Classic WebData XmlElement.WriteContentTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._8_1.cpp)]\n [!code-vb[Classic WebData XmlElement.WriteContentTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._8_1.vb)]\n [!code-cs[Classic WebData XmlElement.WriteContentTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._8_1.cs)]"
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "The <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;></xref> to which you want to save."
  overload: System.Xml.XmlElement.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlElement
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlElement.WriteTo(XmlWriter)
  fullName: System.Xml.XmlElement.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Saves the current node to the specified <xref:System.Xml.XmlWriter>."
  remarks: "This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example adds an attribute to an element and then displays the modified element.  \n  \n [!code-cs[Classic WebData XmlElement.WriteTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmlelement._10_1.cs)]\n [!code-cpp[Classic WebData XmlElement.WriteTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmlelement._10_1.cpp)]\n [!code-vb[Classic WebData XmlElement.WriteTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlelement._10_1.vb)]"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "The <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;></xref> to which you want to save."
  overload: System.Xml.XmlElement.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.XmlLinkedNode
  isExternal: false
  name: System.Xml.XmlLinkedNode
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  parent: System.Xml.XmlElement
  isExternal: false
  name: XmlElement(String,String,String,XmlDocument)
  nameWithType: XmlElement.XmlElement(String,String,String,XmlDocument)
  fullName: System.Xml.XmlElement.XmlElement(String,String,String,XmlDocument)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlElement.Attributes
  parent: System.Xml.XmlElement
  isExternal: false
  name: Attributes
  nameWithType: XmlElement.Attributes
  fullName: System.Xml.XmlElement.Attributes
- uid: System.Xml.XmlAttributeCollection
  parent: System.Xml
  isExternal: false
  name: XmlAttributeCollection
  nameWithType: XmlAttributeCollection
  fullName: System.Xml.XmlAttributeCollection
- uid: System.Xml.XmlElement.CloneNode(System.Boolean)
  parent: System.Xml.XmlElement
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlElement.CloneNode(Boolean)
  fullName: System.Xml.XmlElement.CloneNode(Boolean)
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlElement.GetAttribute(System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttribute(String)
  nameWithType: XmlElement.GetAttribute(String)
  fullName: System.Xml.XmlElement.GetAttribute(String)
- uid: System.Xml.XmlElement.GetAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttribute(String,String)
  nameWithType: XmlElement.GetAttribute(String,String)
  fullName: System.Xml.XmlElement.GetAttribute(String,String)
- uid: System.Xml.XmlElement.GetAttributeNode(System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttributeNode(String)
  nameWithType: XmlElement.GetAttributeNode(String)
  fullName: System.Xml.XmlElement.GetAttributeNode(String)
- uid: System.Xml.XmlAttribute
  parent: System.Xml
  isExternal: false
  name: XmlAttribute
  nameWithType: XmlAttribute
  fullName: System.Xml.XmlAttribute
- uid: System.Xml.XmlElement.GetAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttributeNode(String,String)
  nameWithType: XmlElement.GetAttributeNode(String,String)
  fullName: System.Xml.XmlElement.GetAttributeNode(String,String)
- uid: System.Xml.XmlElement.GetElementsByTagName(System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlElement.GetElementsByTagName(String)
  fullName: System.Xml.XmlElement.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetElementsByTagName(String,String)
  nameWithType: XmlElement.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlElement.GetElementsByTagName(String,String)
- uid: System.Xml.XmlElement.HasAttribute(System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: HasAttribute(String)
  nameWithType: XmlElement.HasAttribute(String)
  fullName: System.Xml.XmlElement.HasAttribute(String)
- uid: System.Xml.XmlElement.HasAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: HasAttribute(String,String)
  nameWithType: XmlElement.HasAttribute(String,String)
  fullName: System.Xml.XmlElement.HasAttribute(String,String)
- uid: System.Xml.XmlElement.HasAttributes
  parent: System.Xml.XmlElement
  isExternal: false
  name: HasAttributes
  nameWithType: XmlElement.HasAttributes
  fullName: System.Xml.XmlElement.HasAttributes
- uid: System.Xml.XmlElement.InnerText
  parent: System.Xml.XmlElement
  isExternal: false
  name: InnerText
  nameWithType: XmlElement.InnerText
  fullName: System.Xml.XmlElement.InnerText
- uid: System.Xml.XmlElement.InnerXml
  parent: System.Xml.XmlElement
  isExternal: false
  name: InnerXml
  nameWithType: XmlElement.InnerXml
  fullName: System.Xml.XmlElement.InnerXml
- uid: System.Xml.XmlElement.IsEmpty
  parent: System.Xml.XmlElement
  isExternal: false
  name: IsEmpty
  nameWithType: XmlElement.IsEmpty
  fullName: System.Xml.XmlElement.IsEmpty
- uid: System.Xml.XmlElement.LocalName
  parent: System.Xml.XmlElement
  isExternal: false
  name: LocalName
  nameWithType: XmlElement.LocalName
  fullName: System.Xml.XmlElement.LocalName
- uid: System.Xml.XmlElement.Name
  parent: System.Xml.XmlElement
  isExternal: false
  name: Name
  nameWithType: XmlElement.Name
  fullName: System.Xml.XmlElement.Name
- uid: System.Xml.XmlElement.NamespaceURI
  parent: System.Xml.XmlElement
  isExternal: false
  name: NamespaceURI
  nameWithType: XmlElement.NamespaceURI
  fullName: System.Xml.XmlElement.NamespaceURI
- uid: System.Xml.XmlElement.NextSibling
  parent: System.Xml.XmlElement
  isExternal: false
  name: NextSibling
  nameWithType: XmlElement.NextSibling
  fullName: System.Xml.XmlElement.NextSibling
- uid: System.Xml.XmlElement.NodeType
  parent: System.Xml.XmlElement
  isExternal: false
  name: NodeType
  nameWithType: XmlElement.NodeType
  fullName: System.Xml.XmlElement.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlElement.OwnerDocument
  parent: System.Xml.XmlElement
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlElement.OwnerDocument
  fullName: System.Xml.XmlElement.OwnerDocument
- uid: System.Xml.XmlElement.ParentNode
  parent: System.Xml.XmlElement
  isExternal: false
  name: ParentNode
  nameWithType: XmlElement.ParentNode
  fullName: System.Xml.XmlElement.ParentNode
- uid: System.Xml.XmlElement.Prefix
  parent: System.Xml.XmlElement
  isExternal: false
  name: Prefix
  nameWithType: XmlElement.Prefix
  fullName: System.Xml.XmlElement.Prefix
- uid: System.Xml.XmlElement.RemoveAll
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAll()
  nameWithType: XmlElement.RemoveAll()
  fullName: System.Xml.XmlElement.RemoveAll()
- uid: System.Xml.XmlElement.RemoveAllAttributes
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAllAttributes()
  nameWithType: XmlElement.RemoveAllAttributes()
  fullName: System.Xml.XmlElement.RemoveAllAttributes()
- uid: System.Xml.XmlElement.RemoveAttribute(System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttribute(String)
  nameWithType: XmlElement.RemoveAttribute(String)
  fullName: System.Xml.XmlElement.RemoveAttribute(String)
- uid: System.Xml.XmlElement.RemoveAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttribute(String,String)
  nameWithType: XmlElement.RemoveAttribute(String,String)
  fullName: System.Xml.XmlElement.RemoveAttribute(String,String)
- uid: System.Xml.XmlElement.RemoveAttributeAt(System.Int32)
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttributeAt(Int32)
  nameWithType: XmlElement.RemoveAttributeAt(Int32)
  fullName: System.Xml.XmlElement.RemoveAttributeAt(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttributeNode(XmlAttribute)
  nameWithType: XmlElement.RemoveAttributeNode(XmlAttribute)
  fullName: System.Xml.XmlElement.RemoveAttributeNode(XmlAttribute)
- uid: System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttributeNode(String,String)
  nameWithType: XmlElement.RemoveAttributeNode(String,String)
  fullName: System.Xml.XmlElement.RemoveAttributeNode(String,String)
- uid: System.Xml.XmlElement.SchemaInfo
  parent: System.Xml.XmlElement
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlElement.SchemaInfo
  fullName: System.Xml.XmlElement.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttribute(String,String)
  nameWithType: XmlElement.SetAttribute(String,String)
  fullName: System.Xml.XmlElement.SetAttribute(String,String)
- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttribute(String,String,String)
  nameWithType: XmlElement.SetAttribute(String,String,String)
  fullName: System.Xml.XmlElement.SetAttribute(String,String,String)
- uid: System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttributeNode(XmlAttribute)
  nameWithType: XmlElement.SetAttributeNode(XmlAttribute)
  fullName: System.Xml.XmlElement.SetAttributeNode(XmlAttribute)
- uid: System.Xml.XmlElement.SetAttributeNode(System.String,System.String)
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttributeNode(String,String)
  nameWithType: XmlElement.SetAttributeNode(String,String)
  fullName: System.Xml.XmlElement.SetAttributeNode(String,String)
- uid: System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlElement
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlElement.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlElement.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlElement
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlElement.WriteTo(XmlWriter)
  fullName: System.Xml.XmlElement.WriteTo(XmlWriter)
- uid: System.Xml.XmlElement.#ctor*
  parent: System.Xml.XmlElement
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement.XmlElement
- uid: System.Xml.XmlElement.Attributes*
  parent: System.Xml.XmlElement
  isExternal: false
  name: Attributes
  nameWithType: XmlElement.Attributes
- uid: System.Xml.XmlElement.CloneNode*
  parent: System.Xml.XmlElement
  isExternal: false
  name: CloneNode
  nameWithType: XmlElement.CloneNode
- uid: System.Xml.XmlElement.GetAttribute*
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttribute
  nameWithType: XmlElement.GetAttribute
- uid: System.Xml.XmlElement.GetAttributeNode*
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetAttributeNode
  nameWithType: XmlElement.GetAttributeNode
- uid: System.Xml.XmlElement.GetElementsByTagName*
  parent: System.Xml.XmlElement
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlElement.GetElementsByTagName
- uid: System.Xml.XmlElement.HasAttribute*
  parent: System.Xml.XmlElement
  isExternal: false
  name: HasAttribute
  nameWithType: XmlElement.HasAttribute
- uid: System.Xml.XmlElement.HasAttributes*
  parent: System.Xml.XmlElement
  isExternal: false
  name: HasAttributes
  nameWithType: XmlElement.HasAttributes
- uid: System.Xml.XmlElement.InnerText*
  parent: System.Xml.XmlElement
  isExternal: false
  name: InnerText
  nameWithType: XmlElement.InnerText
- uid: System.Xml.XmlElement.InnerXml*
  parent: System.Xml.XmlElement
  isExternal: false
  name: InnerXml
  nameWithType: XmlElement.InnerXml
- uid: System.Xml.XmlElement.IsEmpty*
  parent: System.Xml.XmlElement
  isExternal: false
  name: IsEmpty
  nameWithType: XmlElement.IsEmpty
- uid: System.Xml.XmlElement.LocalName*
  parent: System.Xml.XmlElement
  isExternal: false
  name: LocalName
  nameWithType: XmlElement.LocalName
- uid: System.Xml.XmlElement.Name*
  parent: System.Xml.XmlElement
  isExternal: false
  name: Name
  nameWithType: XmlElement.Name
- uid: System.Xml.XmlElement.NamespaceURI*
  parent: System.Xml.XmlElement
  isExternal: false
  name: NamespaceURI
  nameWithType: XmlElement.NamespaceURI
- uid: System.Xml.XmlElement.NextSibling*
  parent: System.Xml.XmlElement
  isExternal: false
  name: NextSibling
  nameWithType: XmlElement.NextSibling
- uid: System.Xml.XmlElement.NodeType*
  parent: System.Xml.XmlElement
  isExternal: false
  name: NodeType
  nameWithType: XmlElement.NodeType
- uid: System.Xml.XmlElement.OwnerDocument*
  parent: System.Xml.XmlElement
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlElement.OwnerDocument
- uid: System.Xml.XmlElement.ParentNode*
  parent: System.Xml.XmlElement
  isExternal: false
  name: ParentNode
  nameWithType: XmlElement.ParentNode
- uid: System.Xml.XmlElement.Prefix*
  parent: System.Xml.XmlElement
  isExternal: false
  name: Prefix
  nameWithType: XmlElement.Prefix
- uid: System.Xml.XmlElement.RemoveAll*
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAll
  nameWithType: XmlElement.RemoveAll
- uid: System.Xml.XmlElement.RemoveAllAttributes*
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAllAttributes
  nameWithType: XmlElement.RemoveAllAttributes
- uid: System.Xml.XmlElement.RemoveAttribute*
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttribute
  nameWithType: XmlElement.RemoveAttribute
- uid: System.Xml.XmlElement.RemoveAttributeAt*
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttributeAt
  nameWithType: XmlElement.RemoveAttributeAt
- uid: System.Xml.XmlElement.RemoveAttributeNode*
  parent: System.Xml.XmlElement
  isExternal: false
  name: RemoveAttributeNode
  nameWithType: XmlElement.RemoveAttributeNode
- uid: System.Xml.XmlElement.SchemaInfo*
  parent: System.Xml.XmlElement
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlElement.SchemaInfo
- uid: System.Xml.XmlElement.SetAttribute*
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttribute
  nameWithType: XmlElement.SetAttribute
- uid: System.Xml.XmlElement.SetAttributeNode*
  parent: System.Xml.XmlElement
  isExternal: false
  name: SetAttributeNode
  nameWithType: XmlElement.SetAttributeNode
- uid: System.Xml.XmlElement.WriteContentTo*
  parent: System.Xml.XmlElement
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlElement.WriteContentTo
- uid: System.Xml.XmlElement.WriteTo*
  parent: System.Xml.XmlElement
  isExternal: false
  name: WriteTo
  nameWithType: XmlElement.WriteTo
