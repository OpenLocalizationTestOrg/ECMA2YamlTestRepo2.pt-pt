### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.ISerializable
  id: ISerializable
  children:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
  type: Interface
  summary: "Permite que um objeto controlar os seus próprios serialização e a anulação da serialização."
  remarks: "Qualquer classe que pode ser serializado deve ser marcada com <xref:System.SerializableAttribute>.</xref:System.SerializableAttribute> Se precisar de uma classe controlar o processo de serialização, pode implementar a ISerializable interface. O <xref:System.Runtime.Serialization.Formatter>chamadas a <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>durante a serialização e preenche o fornecido <xref:System.Runtime.Serialization.SerializationInfo>com todos os dados necessários para representar o objeto.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.Formatter> O <xref:System.Runtime.Serialization.Formatter>cria um <xref:System.Runtime.Serialization.SerializationInfo>com o tipo do objeto no gráfico.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.Formatter> Objetos que precisam de enviar proxies próprios podem utilizar o <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>e <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>métodos em <xref:System.Runtime.Serialization.SerializationInfo>para alterar as informações transmitidas.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> </xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>       No caso de herança de classe, é possível serializar uma classe que deriva de uma classe base que implementa ISerializable. Neste caso, a classe derivada deve chamar a implementação de classe base do <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>dentro a implementação de <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> Caso contrário, não serão possível serializar os dados da classe base.       A interface ISerializable implica um construtor com o construtor de assinatura (<xref:System.Runtime.Serialization.SerializationInfo> informações, <xref:System.Runtime.Serialization.StreamingContext>contexto).</xref:System.Runtime.Serialization.StreamingContext> </xref:System.Runtime.Serialization.SerializationInfo> Durante a anulação da serialização, o construtor atual denomina-se apenas depois dos dados a <xref:System.Runtime.Serialization.SerializationInfo>tem foi anulada pelo formatador.</xref:System.Runtime.Serialization.SerializationInfo> Em geral, este construtor deve ser protegido se a classe não está selada.       A ordem na qual são anular a serialização objetos não pode ser garantida. Por exemplo, se um tipo refere um tipo que não tenha sido anulado ainda, irá ocorrer uma excepção. Se estiver a criar tipos que tenham essas dependências, pode contornar o problema, implementando o `IDeserializationCallback` interface e o `OnDeserialization` método.       A arquitetura de serialização processa os tipos de objeto que expandem <xref:System.MarshalByRefObject>o mesmo que os tipos que expandem <xref:System.Object>.</xref:System.Object> </xref:System.MarshalByRefObject> Estes tipos podem ser marcados com o <xref:System.SerializableAttribute>e implementa a interface ISerializable como qualquer outro tipo de objeto.</xref:System.SerializableAttribute> Estado dos objetos será capturado e persistente para o fluxo.       Quando estes tipos estão a ser utilizados através de <xref:System.Runtime.Remoting>, a infraestrutura de comunicação remota fornece um substituto que antecipa serialização típica e serializa em vez disso, um proxy para <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> </xref:System.Runtime.Remoting> Um substituto é um programa auxiliar que sabe como serializar e anular a serialização de objetos de um tipo específico. O proxy, invisível ao utilizador na maioria dos casos, irá ser do tipo <xref:System.Runtime.Remoting.ObjRef>.</xref:System.Runtime.Remoting.ObjRef>       Como um padrão de conceção geral, seria possível invulgar para uma classe ser ambos marcados com o atributo serializável e expandir <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> Os programadores devem pensar cuidadosamente os cenários possíveis de serialização e a gestão remota quando combinar estas características de dois. Um exemplo em que esta situação pode ser aplicável é com <xref:System.IO.MemoryStream>.</xref:System.IO.MemoryStream> Enquanto que a classe base da <xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) expande-se do <xref:System.MarshalByRefObject>, é possível capturar o estado de um <xref:System.IO.MemoryStream>e restaurá-lo à vontade.</xref:System.IO.MemoryStream> </xref:System.MarshalByRefObject> </xref:System.IO.Stream> </xref:System.IO.MemoryStream> Pode, por conseguinte, ser significativo para serializar o estado desta sequência numa base de dados e restaurá-lo, a determinada altura posterior no tempo. No entanto, quando utilizadas através do sistema de interação remota, um objeto deste tipo ser efetuado.       Para obter mais informações sobre a serialização de classes que se estendam <xref:System.MarshalByRefObject>, consulte <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector> </xref:System.MarshalByRefObject> Para obter mais informações sobre a implementação ISerializable, consulte [serialização personalizada](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the ISerializable interface to define custom serialization behavior for a class.  \n  \n [!code-cpp[ISerializable Interface Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_4_1.cpp)]\n [!code-cs[ISerializable Interface Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_4_1.cs)]\n [!code-vb[ISerializable Interface Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ISerializable
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "Preenche um <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> com os dados necessários para serializar o objeto de destino."
  remarks: "Os objetos que estão incluídos no <xref:System.Runtime.Serialization.SerializationInfo>automaticamente registadas e serializado pelo formatador.</xref:System.Runtime.Serialization.SerializationInfo>       Código que chama a invocar GetObjectData requer o <xref:System.Security.Permissions.SecurityPermission>para fornecer serviços de serialização.</xref:System.Security.Permissions.SecurityPermission> Associado a enumeração: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>      > [!NOTE] > Não é garantido que este método será chamado apenas uma vez por instância de objeto durante a serialização. Por conseguinte, o método deve ser implementado de forma a que o comportamento será o mesmo, independentemente do número de vezes que é chamado."
  example:
  - "The following example uses the GetObjectData method to set alternate values for a serialized object. The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized. Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.  \n  \n [!code-cs[ISerializable_GetObjectData#0](~/add/codesnippet/csharp/8416df17-ca26-45ef-baab-_1.cs)]\n [!code-vb[ISerializable_GetObjectData#0](~/add/codesnippet/visualbasic/8416df17-ca26-45ef-baab-_1.vb)]"
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "O <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> para preencher com dados."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "O destino (consulte <xref:System.Runtime.Serialization.StreamingContext>) para esta serialização.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.Serialization.ISerializable.GetObjectData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Serialization.ISerializable.GetObjectData*
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData
  nameWithType: ISerializable.GetObjectData
