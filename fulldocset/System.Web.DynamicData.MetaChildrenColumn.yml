### YamlMime:ManagedReference
items:
- uid: System.Web.DynamicData.MetaChildrenColumn
  id: MetaChildrenColumn
  children:
  - System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)
  - System.Web.DynamicData.MetaChildrenColumn.ChildTable
  - System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)
  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)
  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)
  - System.Web.DynamicData.MetaChildrenColumn.Initialize
  - System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  langs:
  - csharp
  name: MetaChildrenColumn
  nameWithType: MetaChildrenColumn
  fullName: System.Web.DynamicData.MetaChildrenColumn
  type: Class
  summary: "Represents a database field that indicates a one-to-many relationship."
  remarks: "In ASP.NET Dynamic Data applications, the MetaChildrenColumn class represents a database field that indicates a one-to-many relationship or a parent-child relationship.       The MetaChildrenColumn class represents the field in the parent table of the one-to-many relationship. However, you can access the child table object by using the <xref:System.Web.DynamicData.MetaChildrenColumn.ChildTable%2A> property. You can also retrieve the foreign-key field in the child table by using the <xref:System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable%2A> property."
  syntax:
    content: 'public class MetaChildrenColumn : System.Web.DynamicData.MetaColumn'
  inheritance:
  - System.Object
  - System.Web.DynamicData.MetaColumn
  implements: []
  inheritedMembers:
  - System.Web.DynamicData.MetaColumn.AllowInitialValue
  - System.Web.DynamicData.MetaColumn.ApplyFormatInEditMode
  - System.Web.DynamicData.MetaColumn.Attributes
  - System.Web.DynamicData.MetaColumn.BuildAttributeCollection
  - System.Web.DynamicData.MetaColumn.ColumnType
  - System.Web.DynamicData.MetaColumn.ConvertEmptyStringToNull
  - System.Web.DynamicData.MetaColumn.DataFormatString
  - System.Web.DynamicData.MetaColumn.DataTypeAttribute
  - System.Web.DynamicData.MetaColumn.DefaultValue
  - System.Web.DynamicData.MetaColumn.Description
  - System.Web.DynamicData.MetaColumn.DisplayName
  - System.Web.DynamicData.MetaColumn.EntityTypeProperty
  - System.Web.DynamicData.MetaColumn.FilterUIHint
  - System.Web.DynamicData.MetaColumn.HtmlEncode
  - System.Web.DynamicData.MetaColumn.IsBinaryData
  - System.Web.DynamicData.MetaColumn.IsCustomProperty
  - System.Web.DynamicData.MetaColumn.IsFloatingPoint
  - System.Web.DynamicData.MetaColumn.IsForeignKeyComponent
  - System.Web.DynamicData.MetaColumn.IsGenerated
  - System.Web.DynamicData.MetaColumn.IsInteger
  - System.Web.DynamicData.MetaColumn.IsLongString
  - System.Web.DynamicData.MetaColumn.IsPrimaryKey
  - System.Web.DynamicData.MetaColumn.IsReadOnly
  - System.Web.DynamicData.MetaColumn.IsRequired
  - System.Web.DynamicData.MetaColumn.IsString
  - System.Web.DynamicData.MetaColumn.MaxLength
  - System.Web.DynamicData.MetaColumn.Model
  - System.Web.DynamicData.MetaColumn.Name
  - System.Web.DynamicData.MetaColumn.NullDisplayText
  - System.Web.DynamicData.MetaColumn.Prompt
  - System.Web.DynamicData.MetaColumn.Provider
  - System.Web.DynamicData.MetaColumn.RequiredErrorMessage
  - System.Web.DynamicData.MetaColumn.ResetMetadata
  - System.Web.DynamicData.MetaColumn.Scaffold
  - System.Web.DynamicData.MetaColumn.ShortDisplayName
  - System.Web.DynamicData.MetaColumn.SortExpression
  - System.Web.DynamicData.MetaColumn.Table
  - System.Web.DynamicData.MetaColumn.ToString
  - System.Web.DynamicData.MetaColumn.TypeCode
  - System.Web.DynamicData.MetaColumn.UIHint
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)
  id: '#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)'
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: MetaChildrenColumn(MetaTable,ColumnProvider)
  nameWithType: MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
  fullName: System.Web.DynamicData.MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
  type: Constructor
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.DynamicData.MetaChildrenColumn&quot;></xref> class."
  syntax:
    content: public MetaChildrenColumn (System.Web.DynamicData.MetaTable table, System.Web.DynamicData.ModelProviders.ColumnProvider entityMember);
    parameters:
    - id: table
      type: System.Web.DynamicData.MetaTable
      description: "The meta table."
    - id: entityMember
      type: System.Web.DynamicData.ModelProviders.ColumnProvider
      description: "The column provider."
  overload: System.Web.DynamicData.MetaChildrenColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable
  id: ChildTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: ChildTable
  nameWithType: MetaChildrenColumn.ChildTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ChildTable
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets an object that represents the child table of the one-to-many relationship."
  remarks: "Use the ChildTable property to get an object that represents the child table of the one-to-many relationship. You can access the parent table by using the <xref:System.Web.DynamicData.MetaColumn.Table%2A> property."
  syntax:
    content: public System.Web.DynamicData.MetaTable ChildTable { get; }
    return:
      type: System.Web.DynamicData.MetaTable
      description: "An object that represents the child table of the one-to-many relationship."
  overload: System.Web.DynamicData.MetaChildrenColumn.ChildTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  id: ColumnInOtherTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: ColumnInOtherTable
  nameWithType: MetaChildrenColumn.ColumnInOtherTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets an object that represents the foreign-key field in the child table."
  remarks: "The ColumnInOtherTable property enables you to get a reference to the field in the child table."
  syntax:
    content: public System.Web.DynamicData.MetaColumn ColumnInOtherTable { get; }
    return:
      type: System.Web.DynamicData.MetaColumn
      description: "An object that represents the foreign-key field in the child table."
  overload: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)
  id: GetChildrenListPath(System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: GetChildrenListPath(Object)
  nameWithType: MetaChildrenColumn.GetChildrenListPath(Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(Object)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets the path of the list-action page for the child table."
  remarks: "Use the GetChildrenListPath method when you want to retrieve the list-action page for the child table using the specified row as a parent. The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter.       Using the GetChildrenListPath method is the same as invoking the <xref:System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath%28System.String%2CSystem.Object%29> method and passing the <xref:System.Web.DynamicData.PageAction.List%2A> action as the first parameter."
  syntax:
    content: public string GetChildrenListPath (object row);
    parameters:
    - id: row
      type: System.Object
      description: "The row that contains the foreign-key field."
    return:
      type: System.String
      description: "The path of the list-action page for the child table."
  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)
  id: GetChildrenPath(System.String,System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: GetChildrenPath(String,Object)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets the path of the specified action page of the child table."
  remarks: "The GetChildrenPath method returns the path of the specified action page for the child table. The path returned is based on the routes that are defined for the ASP.NET Dynamic Data application and has the specified row as a parent. The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter.       If `row` is `null`, his method returns an empty string.       You can use the values defined in the <xref:System.Web.DynamicData.PageAction> class for the `action` parameter."
  syntax:
    content: public string GetChildrenPath (string action, object row);
    parameters:
    - id: action
      type: System.String
      description: "The target action."
    - id: row
      type: System.Object
      description: "The row that contains the foreign-key field."
    return:
      type: System.String
      description: "The path of the specified action page of the child table."
  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)
  id: GetChildrenPath(System.String,System.Object,System.String)
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: GetChildrenPath(String,Object,String)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object,String)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object,String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets the path for the specified action page of the child table."
  remarks: "The GetChildrenPath method returns the path of the specified action page for the child table. The path is based on the specified path with the specified row as a parent. The path is obtained by appending a query-string value to the URL that contains the foreign-key field value specified in the `row` parameter.       If `row` is `null`, this method returns an empty string. If `path` is `null`, the GetChildrenPath method returns the path based on the routes defined for the ASP.NET Dynamic Data application.       You can use the values defined in the <xref:System.Web.DynamicData.PageAction> class for the `action` parameter."
  syntax:
    content: public string GetChildrenPath (string action, object row, string path);
    parameters:
    - id: action
      type: System.String
      description: "The target action."
    - id: row
      type: System.Object
      description: "The row that contains the foreign-key field."
    - id: path
      type: System.String
      description: "The target page."
    return:
      type: System.String
      description: "The path of the specified action page of the child table."
  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize
  id: Initialize
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: Initialize()
  nameWithType: MetaChildrenColumn.Initialize()
  fullName: System.Web.DynamicData.MetaChildrenColumn.Initialize()
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Initializes data that might not be available when the constructor is called."
  remarks: "This method cannot be called directly. To customize initialization, you can derive from this class and override the `Initialize` method. If you override this method, call the base control&quot;s `Initialize` method."
  syntax:
    content: protected override void Initialize ();
    parameters: []
  overload: System.Web.DynamicData.MetaChildrenColumn.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  id: IsManyToMany
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: IsManyToMany
  nameWithType: MetaChildrenColumn.IsManyToMany
  fullName: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets a value that indicates the many-to-many relationship status of the column."
  syntax:
    content: public bool IsManyToMany { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the column relationship is many-to-many; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.DynamicData.MetaColumn
  isExternal: false
  name: System.Web.DynamicData.MetaColumn
- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: MetaChildrenColumn(MetaTable,ColumnProvider)
  nameWithType: MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
  fullName: System.Web.DynamicData.MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
- uid: System.Web.DynamicData.MetaTable
  parent: System.Web.DynamicData
  isExternal: false
  name: MetaTable
  nameWithType: MetaTable
  fullName: System.Web.DynamicData.MetaTable
- uid: System.Web.DynamicData.ModelProviders.ColumnProvider
  parent: System.Web.DynamicData.ModelProviders
  isExternal: false
  name: ColumnProvider
  nameWithType: ColumnProvider
  fullName: System.Web.DynamicData.ModelProviders.ColumnProvider
- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ChildTable
  nameWithType: MetaChildrenColumn.ChildTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ChildTable
- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ColumnInOtherTable
  nameWithType: MetaChildrenColumn.ColumnInOtherTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenListPath(Object)
  nameWithType: MetaChildrenColumn.GetChildrenListPath(Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenPath(String,Object)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object)
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenPath(String,Object,String)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object,String)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object,String)
- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: Initialize()
  nameWithType: MetaChildrenColumn.Initialize()
  fullName: System.Web.DynamicData.MetaChildrenColumn.Initialize()
- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: IsManyToMany
  nameWithType: MetaChildrenColumn.IsManyToMany
  fullName: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: MetaChildrenColumn
  nameWithType: MetaChildrenColumn.MetaChildrenColumn
- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ChildTable
  nameWithType: MetaChildrenColumn.ChildTable
- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ColumnInOtherTable
  nameWithType: MetaChildrenColumn.ColumnInOtherTable
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenListPath
  nameWithType: MetaChildrenColumn.GetChildrenListPath
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenPath
  nameWithType: MetaChildrenColumn.GetChildrenPath
- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: Initialize
  nameWithType: MetaChildrenColumn.Initialize
- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: IsManyToMany
  nameWithType: MetaChildrenColumn.IsManyToMany
