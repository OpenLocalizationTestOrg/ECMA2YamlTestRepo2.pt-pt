### YamlMime:ManagedReference
items:
- uid: System.Web.DynamicData.MetaChildrenColumn
  id: MetaChildrenColumn
  children:
  - System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)
  - System.Web.DynamicData.MetaChildrenColumn.ChildTable
  - System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)
  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)
  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)
  - System.Web.DynamicData.MetaChildrenColumn.Initialize
  - System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  langs:
  - csharp
  name: MetaChildrenColumn
  nameWithType: MetaChildrenColumn
  fullName: System.Web.DynamicData.MetaChildrenColumn
  type: Class
  summary: "Representa um campo de base de dados que indica uma relação um-para-muitos."
  remarks: "Em aplicações de dados dinâmicos do ASP.NET, a classe de MetaChildrenColumn representa um campo de base de dados que indica uma relação um-para-muitos ou uma relação principal-subordinado.       A classe de MetaChildrenColumn representa o campo da tabela principal da relação um-para-muitos. No entanto, pode aceder ao objeto de tabela de subordinado utilizando a <xref:System.Web.DynamicData.MetaChildrenColumn.ChildTable%2A>propriedade.</xref:System.Web.DynamicData.MetaChildrenColumn.ChildTable%2A> Também pode obter o campo de chave externa na tabela subordinado utilizando a <xref:System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable%2A>propriedade.</xref:System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable%2A>"
  syntax:
    content: 'public class MetaChildrenColumn : System.Web.DynamicData.MetaColumn'
  inheritance:
  - System.Object
  - System.Web.DynamicData.MetaColumn
  implements: []
  inheritedMembers:
  - System.Web.DynamicData.MetaColumn.AllowInitialValue
  - System.Web.DynamicData.MetaColumn.ApplyFormatInEditMode
  - System.Web.DynamicData.MetaColumn.Attributes
  - System.Web.DynamicData.MetaColumn.BuildAttributeCollection
  - System.Web.DynamicData.MetaColumn.ColumnType
  - System.Web.DynamicData.MetaColumn.ConvertEmptyStringToNull
  - System.Web.DynamicData.MetaColumn.DataFormatString
  - System.Web.DynamicData.MetaColumn.DataTypeAttribute
  - System.Web.DynamicData.MetaColumn.DefaultValue
  - System.Web.DynamicData.MetaColumn.Description
  - System.Web.DynamicData.MetaColumn.DisplayName
  - System.Web.DynamicData.MetaColumn.EntityTypeProperty
  - System.Web.DynamicData.MetaColumn.FilterUIHint
  - System.Web.DynamicData.MetaColumn.HtmlEncode
  - System.Web.DynamicData.MetaColumn.IsBinaryData
  - System.Web.DynamicData.MetaColumn.IsCustomProperty
  - System.Web.DynamicData.MetaColumn.IsFloatingPoint
  - System.Web.DynamicData.MetaColumn.IsForeignKeyComponent
  - System.Web.DynamicData.MetaColumn.IsGenerated
  - System.Web.DynamicData.MetaColumn.IsInteger
  - System.Web.DynamicData.MetaColumn.IsLongString
  - System.Web.DynamicData.MetaColumn.IsPrimaryKey
  - System.Web.DynamicData.MetaColumn.IsReadOnly
  - System.Web.DynamicData.MetaColumn.IsRequired
  - System.Web.DynamicData.MetaColumn.IsString
  - System.Web.DynamicData.MetaColumn.MaxLength
  - System.Web.DynamicData.MetaColumn.Model
  - System.Web.DynamicData.MetaColumn.Name
  - System.Web.DynamicData.MetaColumn.NullDisplayText
  - System.Web.DynamicData.MetaColumn.Prompt
  - System.Web.DynamicData.MetaColumn.Provider
  - System.Web.DynamicData.MetaColumn.RequiredErrorMessage
  - System.Web.DynamicData.MetaColumn.ResetMetadata
  - System.Web.DynamicData.MetaColumn.Scaffold
  - System.Web.DynamicData.MetaColumn.ShortDisplayName
  - System.Web.DynamicData.MetaColumn.SortExpression
  - System.Web.DynamicData.MetaColumn.Table
  - System.Web.DynamicData.MetaColumn.ToString
  - System.Web.DynamicData.MetaColumn.TypeCode
  - System.Web.DynamicData.MetaColumn.UIHint
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)
  id: '#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)'
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: MetaChildrenColumn(MetaTable,ColumnProvider)
  nameWithType: MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
  fullName: System.Web.DynamicData.MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
  type: Constructor
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.DynamicData.MetaChildrenColumn&quot;> </xref> classe."
  syntax:
    content: public MetaChildrenColumn (System.Web.DynamicData.MetaTable table, System.Web.DynamicData.ModelProviders.ColumnProvider entityMember);
    parameters:
    - id: table
      type: System.Web.DynamicData.MetaTable
      description: "A tabela de metadados."
    - id: entityMember
      type: System.Web.DynamicData.ModelProviders.ColumnProvider
      description: "O fornecedor de coluna."
  overload: System.Web.DynamicData.MetaChildrenColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable
  id: ChildTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: ChildTable
  nameWithType: MetaChildrenColumn.ChildTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ChildTable
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Obtém um objecto que representa a tabela subordinada da relação um-para-muitos."
  remarks: "Utilize a propriedade ChildTable para obter um objeto que representa a tabela subordinada da relação um-para-muitos. Pode aceder a tabela principal utilizando o <xref:System.Web.DynamicData.MetaColumn.Table%2A>propriedade.</xref:System.Web.DynamicData.MetaColumn.Table%2A>"
  syntax:
    content: public System.Web.DynamicData.MetaTable ChildTable { get; }
    return:
      type: System.Web.DynamicData.MetaTable
      description: "Um objeto que representa a tabela subordinada da relação um-para-muitos."
  overload: System.Web.DynamicData.MetaChildrenColumn.ChildTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  id: ColumnInOtherTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: ColumnInOtherTable
  nameWithType: MetaChildrenColumn.ColumnInOtherTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Obtém um objecto que representa o campo de chave externa na tabela subordinada."
  remarks: "A propriedade ColumnInOtherTable permite-lhe obter uma referência para o campo da tabela subordinada."
  syntax:
    content: public System.Web.DynamicData.MetaColumn ColumnInOtherTable { get; }
    return:
      type: System.Web.DynamicData.MetaColumn
      description: "Um objeto que representa o campo de chave externa na tabela subordinada."
  overload: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)
  id: GetChildrenListPath(System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: GetChildrenListPath(Object)
  nameWithType: MetaChildrenColumn.GetChildrenListPath(Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(Object)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Obtém o caminho da página lista ação para a tabela subordinada."
  remarks: "Utilize o método de GetChildrenListPath quando pretender obter a página de ação de lista para a tabela subordinada utilizando a linha especificada como principal. O caminho é obtido, acrescentando um valor de cadeia de consulta para o URL que contém o valor do campo de chave externa especificado no `row` parâmetro.       Utilizando o método GetChildrenListPath é igual ao invocar o <xref:System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath%28System.String%2CSystem.Object%29>método e transmitir o <xref:System.Web.DynamicData.PageAction.List%2A>ação como o primeiro parâmetro.</xref:System.Web.DynamicData.PageAction.List%2A> </xref:System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath%28System.String%2CSystem.Object%29>"
  syntax:
    content: public string GetChildrenListPath (object row);
    parameters:
    - id: row
      type: System.Object
      description: "A linha que contém o campo de chave externa."
    return:
      type: System.String
      description: "O caminho da página lista ação para a tabela subordinada."
  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)
  id: GetChildrenPath(System.String,System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: GetChildrenPath(String,Object)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Obtém o caminho da página ação especificada da tabela subordinada."
  remarks: "O método de GetChildrenPath devolve o caminho da página ação especificada para a tabela subordinada. O caminho devolvido baseia-se nas rotas definidas para a aplicação de dados dinâmicos do ASP.NET e tem de linha especificada como principal. O caminho é obtido, acrescentando um valor de cadeia de consulta para o URL que contém o valor do campo de chave externa especificado no `row` parâmetro.       Se `row` é `null`, este método devolve uma cadeia vazia.       Pode utilizar os valores definidos no <xref:System.Web.DynamicData.PageAction>de classe para o `action` parâmetro.</xref:System.Web.DynamicData.PageAction>"
  syntax:
    content: public string GetChildrenPath (string action, object row);
    parameters:
    - id: action
      type: System.String
      description: "A ação de destino."
    - id: row
      type: System.Object
      description: "A linha que contém o campo de chave externa."
    return:
      type: System.String
      description: "O caminho da página ação especificada da tabela subordinada."
  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)
  id: GetChildrenPath(System.String,System.Object,System.String)
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: GetChildrenPath(String,Object,String)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object,String)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object,String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Obtém o caminho para a página de ação especificada da tabela subordinada."
  remarks: "O método de GetChildrenPath devolve o caminho da página ação especificada para a tabela subordinada. O caminho é baseado no caminho especificado com a linha especificado como principal. O caminho é obtido, acrescentando um valor de cadeia de consulta para o URL que contém o valor do campo de chave externa especificado no `row` parâmetro.       Se `row` é `null`, este método devolve uma cadeia vazia. Se `path` é `null`, o método de GetChildrenPath devolve o caminho com base nas rotas definidas para a aplicação de dados dinâmicos do ASP.NET.       Pode utilizar os valores definidos no <xref:System.Web.DynamicData.PageAction>de classe para o `action` parâmetro.</xref:System.Web.DynamicData.PageAction>"
  syntax:
    content: public string GetChildrenPath (string action, object row, string path);
    parameters:
    - id: action
      type: System.String
      description: "A ação de destino."
    - id: row
      type: System.Object
      description: "A linha que contém o campo de chave externa."
    - id: path
      type: System.String
      description: "A página de destino."
    return:
      type: System.String
      description: "O caminho da página ação especificada da tabela subordinada."
  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize
  id: Initialize
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: Initialize()
  nameWithType: MetaChildrenColumn.Initialize()
  fullName: System.Web.DynamicData.MetaChildrenColumn.Initialize()
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Inicializa os dados que podem não estar disponíveis quando o construtor é chamado."
  remarks: "Este método não pode ser chamado diretamente. Para personalizar a inicialização, pode deriva esta classe e substituir a `Initialize` método. Se substituir este método, chame o controlo base `Initialize` método."
  syntax:
    content: protected override void Initialize ();
    parameters: []
  overload: System.Web.DynamicData.MetaChildrenColumn.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  id: IsManyToMany
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: IsManyToMany
  nameWithType: MetaChildrenColumn.IsManyToMany
  fullName: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Obtém um valor que indica o estado da relação de muitos-para-muitos da coluna."
  syntax:
    content: public bool IsManyToMany { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a relação da coluna é muitos-para-muitos; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.DynamicData.MetaColumn
  isExternal: false
  name: System.Web.DynamicData.MetaColumn
- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: MetaChildrenColumn(MetaTable,ColumnProvider)
  nameWithType: MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
  fullName: System.Web.DynamicData.MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
- uid: System.Web.DynamicData.MetaTable
  parent: System.Web.DynamicData
  isExternal: false
  name: MetaTable
  nameWithType: MetaTable
  fullName: System.Web.DynamicData.MetaTable
- uid: System.Web.DynamicData.ModelProviders.ColumnProvider
  parent: System.Web.DynamicData.ModelProviders
  isExternal: false
  name: ColumnProvider
  nameWithType: ColumnProvider
  fullName: System.Web.DynamicData.ModelProviders.ColumnProvider
- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ChildTable
  nameWithType: MetaChildrenColumn.ChildTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ChildTable
- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ColumnInOtherTable
  nameWithType: MetaChildrenColumn.ColumnInOtherTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenListPath(Object)
  nameWithType: MetaChildrenColumn.GetChildrenListPath(Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenPath(String,Object)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object)
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenPath(String,Object,String)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object,String)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object,String)
- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: Initialize()
  nameWithType: MetaChildrenColumn.Initialize()
  fullName: System.Web.DynamicData.MetaChildrenColumn.Initialize()
- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: IsManyToMany
  nameWithType: MetaChildrenColumn.IsManyToMany
  fullName: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: MetaChildrenColumn
  nameWithType: MetaChildrenColumn.MetaChildrenColumn
- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ChildTable
  nameWithType: MetaChildrenColumn.ChildTable
- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ColumnInOtherTable
  nameWithType: MetaChildrenColumn.ColumnInOtherTable
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenListPath
  nameWithType: MetaChildrenColumn.GetChildrenListPath
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenPath
  nameWithType: MetaChildrenColumn.GetChildrenPath
- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: Initialize
  nameWithType: MetaChildrenColumn.Initialize
- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: IsManyToMany
  nameWithType: MetaChildrenColumn.IsManyToMany
