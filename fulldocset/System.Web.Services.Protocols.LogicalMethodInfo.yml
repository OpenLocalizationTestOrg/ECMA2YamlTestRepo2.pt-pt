### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.LogicalMethodInfo
  id: LogicalMethodInfo
  children:
  - System.Web.Services.Protocols.LogicalMethodInfo.#ctor(System.Reflection.MethodInfo)
  - System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter
  - System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter
  - System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter
  - System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)
  - System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo
  - System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[])
  - System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[],System.Web.Services.Protocols.LogicalMethodTypes)
  - System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider
  - System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType
  - System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(System.Object,System.IAsyncResult)
  - System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo
  - System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(System.Type)
  - System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(System.Type)
  - System.Web.Services.Protocols.LogicalMethodInfo.InParameters
  - System.Web.Services.Protocols.LogicalMethodInfo.Invoke(System.Object,System.Object[])
  - System.Web.Services.Protocols.LogicalMethodInfo.IsAsync
  - System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(System.Reflection.MethodInfo)
  - System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(System.Reflection.MethodInfo)
  - System.Web.Services.Protocols.LogicalMethodInfo.IsVoid
  - System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo
  - System.Web.Services.Protocols.LogicalMethodInfo.Name
  - System.Web.Services.Protocols.LogicalMethodInfo.OutParameters
  - System.Web.Services.Protocols.LogicalMethodInfo.Parameters
  - System.Web.Services.Protocols.LogicalMethodInfo.ReturnType
  - System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  - System.Web.Services.Protocols.LogicalMethodInfo.ToString
  langs:
  - csharp
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo
  type: Class
  summary: "Represents the attributes and metadata for an XML Web service method. This class cannot be inherited."
  remarks: "LogicalMethodInfo is used primarily by a SOAP extension to interrogate the details of the XML Web service method with which the SOAP extension is configured to run. Depending on how the SOAP extension is configured, it can find out details about the XML Web service method in the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> method of <xref:System.Web.Services.Protocols.SoapExtension> that takes a LogicalMethodInfo. The LogicalMethodInfo provides details such as the XML Web service method's parameters by accessing the <xref:System.Web.Services.Protocols.LogicalMethodInfo.Parameters%2A> property and any custom attributes applied to the XML Web service method using the <xref:System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes%2A> property.  \n  \n For more details on SOAP extensions see the <xref:System.Web.Services.Protocols.SoapExtension> class or [&#91;\\<topic://cpconAlteringSOAPMessageUsingSOAPExtensions>&#93;](http://msdn.microsoft.com/en-us/97d81ace-95e7-4acc-ae39-9692a0021e95)."
  example:
  - '[!CODE [LogicalMethodInfo#1](../CodeSnippet/VS_Snippets_Remoting/LogicalMethodInfo#1)]'
  syntax:
    content: public sealed class LogicalMethodInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.#ctor(System.Reflection.MethodInfo)
  id: '#ctor(System.Reflection.MethodInfo)'
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: LogicalMethodInfo(MethodInfo)
  nameWithType: LogicalMethodInfo.LogicalMethodInfo(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.LogicalMethodInfo(MethodInfo)
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see> class with the &lt;xref:System.Reflection.MethodInfo&gt; passed in."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CSharp/33539594-3d11-433f-bfe7-_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CPP/33539594-3d11-433f-bfe7-_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/VisualBasic/33539594-3d11-433f-bfe7-_1.vb)]
  syntax:
    content: public LogicalMethodInfo (System.Reflection.MethodInfo methodInfo);
    parameters:
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "A <xref:System.Reflection.MethodInfo> to initialize the properties of  common to the <xref:System.Reflection.MethodInfo>."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Reflection.MethodBase.IsStatic%2A?displayProperty=fullName> property of the methodInfo parameter is .       -or-       The <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName> method of the methodInfo parameter does not contain all the parameters required by the method represented by the instance of ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter
  id: AsyncCallbackParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: AsyncCallbackParameter
  nameWithType: LogicalMethodInfo.AsyncCallbackParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the parameter information for the <span class=&quot;paramref&quot;>AsyncCallback</span> parameter of a Begin method in an asynchronous invocation."
  remarks: "The asynchronous design pattern in the common language runtime involves calling a `Begin` method to start the asynchronous method invocation and an `End` method to complete the invocation. The `Begin` method takes two additional parameters besides the parameters defined by the synchronous version of the method: one to store a delegate and one to store any state information that needs to be passed on to the delegate. This property represents the parameter for the delegate with a parameter name of `AsyncCallback`.  \n  \n For more information on invoking XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/CSharp/p-system.web.services.pr_64_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/CPP/p-system.web.services.pr_64_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_64_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo AsyncCallbackParameter { get; }
    return:
      type: System.Reflection.ParameterInfo
      description: "A &lt;xref:System.Reflection.ParameterInfo&gt; representing the <span class=&quot;paramref&quot;>AsyncCallback</span> parameter of a <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref> asynchronous method invocation."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter
  id: AsyncResultParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: AsyncResultParameter
  nameWithType: LogicalMethodInfo.AsyncResultParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the return value of a <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref> asynchronous method invocation."
  remarks: "The asynchronous design pattern in the common language runtime involves calling a `Begin` method to start the asynchronous method invocation and an `End` method to complete the invocation. The `Begin` method typically returns immediately with an object implementing the <xref:System.IAsyncResult> interface, which can then be passed to the `End` method at a later time to complete the asynchronous method invocation. The returned object implementing the <xref:System.IAsyncResult> interface is represented by this property.  \n  \n For more information on invoking XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/CSharp/p-system.web.services.pr_38_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/CPP/p-system.web.services.pr_38_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_38_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo AsyncResultParameter { get; }
    return:
      type: System.Reflection.ParameterInfo
      description: "A &lt;xref:System.Reflection.ParameterInfo&gt; representing the &lt;xref:System.IAsyncResult&gt; returned from a <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref> asynchronous method invocation."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter
  id: AsyncStateParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: AsyncStateParameter
  nameWithType: LogicalMethodInfo.AsyncStateParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the parameter information for the <span class=&quot;paramref&quot;>AsyncState</span> parameter of a <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref> method in an asynchronous invocation."
  remarks: "The asynchronous design pattern in the common language runtime involves calling a `Begin` method to start the asynchronous method invocation and an `End` method to complete the invocation. The `Begin` method takes two additional parameters besides the parameters defined by the synchronous version of the method: one to store a delegate and one to store any state information that needs to be passed on to the delegate. This property represents the state information that needs to be passed into the delegate.  \n  \n For more information on invoking XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/CSharp/p-system.web.services.pr_25_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/CPP/p-system.web.services.pr_25_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_25_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo AsyncStateParameter { get; }
    return:
      type: System.Reflection.ParameterInfo
      description: "A &lt;xref:System.Reflection.ParameterInfo&gt; representing the <span class=&quot;paramref&quot;>AsyncState</span> parameter of a <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref> method in an asynchronous invocation."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)
  id: BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: BeginInvoke(Object,Object[],AsyncCallback,Object)
  nameWithType: LogicalMethodInfo.BeginInvoke(Object,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(Object,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Begins an asynchronous invocation of the method represented by this <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_BeginInvoke#1](~/add/codesnippet/CSharp/4cf5df3f-128a-4f09-9f34-_1.cs)]
     [!code-vb[LogicalMethodInfo_BeginInvoke#1](~/add/codesnippet/VisualBasic/4cf5df3f-128a-4f09-9f34-_1.vb)]
     [!code-cpp[LogicalMethodInfo_BeginInvoke#1](~/add/codesnippet/CPP/4cf5df3f-128a-4f09-9f34-_1.cpp)]
  syntax:
    content: public IAsyncResult BeginInvoke (object target, object[] values, AsyncCallback callback, object asyncState);
    parameters:
    - id: target
      type: System.Object
      description: "The instance of the <xref:System.Object> on which to invoke the method on."
    - id: values
      type: System.Object[]
      description: "An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method. If the method does not require any parameters, `values` should be ."
    - id: callback
      type: System.AsyncCallback
      description: "The delegate to call when the asynchronous invoke is complete. If `callback` is , the delegate is not called."
    - id: asyncState
      type: System.Object
      description: "State information that is passed on to the delegate."
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke*
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "The target parameteris ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The number, type, and order of parameters in values do not match the signature of the invoked method."
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "The caller does not have permission to invoke the method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo
  id: BeginMethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: BeginMethodInfo
  nameWithType: LogicalMethodInfo.BeginMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the attributes and metadata for a <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref> method in an asynchronous invocation."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/CSharp/p-system.web.services.pr_4_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/CPP/p-system.web.services.pr_4_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_4_1.vb)]
  syntax:
    content: public System.Reflection.MethodInfo BeginMethodInfo { get; }
    return:
      type: System.Reflection.MethodInfo
      description: "A &lt;xref:System.Reflection.MethodInfo&gt; representing the attributes and metadata for a <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref> asynchronous method invocation."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[])
  id: Create(System.Reflection.MethodInfo[])
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: Create(MethodInfo[])
  nameWithType: LogicalMethodInfo.Create(MethodInfo[])
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Create(MethodInfo[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Given an array of &lt;xref:System.Reflection.MethodInfo&gt; that can contain information about both asynchronous and synchronous methods, creates an array of <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/CSharp/c29165ab-1342-4efc-b959-_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/CPP/c29165ab-1342-4efc-b959-_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/VisualBasic/c29165ab-1342-4efc-b959-_1.vb)]
  syntax:
    content: public static System.Web.Services.Protocols.LogicalMethodInfo[] Create (System.Reflection.MethodInfo[] methodInfos);
    parameters:
    - id: methodInfos
      type: System.Reflection.MethodInfo[]
      description: "An array of <xref:System.Reflection.MethodInfo> representing the asynchronous and synchronous methods for which to create  objects."
    return:
      type: System.Web.Services.Protocols.LogicalMethodInfo[]
      description: "To be added."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.Create*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A  asynchronous method is included in methodInfos without a corresponding  method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[],System.Web.Services.Protocols.LogicalMethodTypes)
  id: Create(System.Reflection.MethodInfo[],System.Web.Services.Protocols.LogicalMethodTypes)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: Create(MethodInfo[],LogicalMethodTypes)
  nameWithType: LogicalMethodInfo.Create(MethodInfo[],LogicalMethodTypes)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Create(MethodInfo[],LogicalMethodTypes)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Given an array of &lt;xref:System.Reflection.MethodInfo&gt;, where the returned array of <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see> can be restricted to only asynchronous or synchronous methods, creates an array of <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/CSharp/dac222c9-9fa0-4192-889b-_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/CPP/dac222c9-9fa0-4192-889b-_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/VisualBasic/dac222c9-9fa0-4192-889b-_1.vb)]
  syntax:
    content: public static System.Web.Services.Protocols.LogicalMethodInfo[] Create (System.Reflection.MethodInfo[] methodInfos, System.Web.Services.Protocols.LogicalMethodTypes types);
    parameters:
    - id: methodInfos
      type: System.Reflection.MethodInfo[]
      description: "An array of <xref:System.Reflection.MethodInfo> representing the asynchronous and synchronous methods for which to create  objects."
    - id: types
      type: System.Web.Services.Protocols.LogicalMethodTypes
      description: "A bitwise combination of the  values. Determines whether just asynchronous or synchronous methods or both are included in the returned array of ."
    return:
      type: System.Web.Services.Protocols.LogicalMethodInfo[]
      description: "To be added."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.Create*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A  asynchronous method is included in methodInfos without a corresponding  method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider
  id: CustomAttributeProvider
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: CustomAttributeProvider
  nameWithType: LogicalMethodInfo.CustomAttributeProvider
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the custom attributes applied to the method."
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/CPP/p-system.web.services.pr_8_1.cpp)]
     [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/CSharp/p-system.web.services.pr_8_1.cs)]
     [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/VisualBasic/p-system.web.services.pr_8_1.vb)]
  syntax:
    content: public System.Reflection.ICustomAttributeProvider CustomAttributeProvider { get; }
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "An <see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot;></see> representing the custom attributes for the method."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType
  id: DeclaringType
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: DeclaringType
  nameWithType: LogicalMethodInfo.DeclaringType
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the class that declares the method represented by the current <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  remarks: "The DeclaringType property retrieves a reference to a <xref:System.Type> for the type that declares this member. A member of a class (or interface) is either declared or inherited from a base class (or interface). The returned <xref:System.Type> might not be the same as the <xref:System.Type> of the class implementing the XML Web service (if that class derives from a base class and the method represented by this class is declared in that base class then the <xref:System.Type> returned is the base class)."
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CSharp/p-system.web.services.pr_39_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CPP/p-system.web.services.pr_39_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_39_1.vb)]
  syntax:
    content: public Type DeclaringType { get; }
    return:
      type: System.Type
      description: "The &lt;xref:System.Type&gt; for the class declaring the method represented by the <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(System.Object,System.IAsyncResult)
  id: EndInvoke(System.Object,System.IAsyncResult)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: EndInvoke(Object,IAsyncResult)
  nameWithType: LogicalMethodInfo.EndInvoke(Object,IAsyncResult)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(Object,IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Ends an asynchronous invocation of the method represented by the current <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_BeginInvoke#2](~/add/codesnippet/CSharp/70bfcc96-3c47-4d4f-af27-_1.cs)]
     [!code-vb[LogicalMethodInfo_BeginInvoke#2](~/add/codesnippet/VisualBasic/70bfcc96-3c47-4d4f-af27-_1.vb)]
     [!code-cpp[LogicalMethodInfo_BeginInvoke#2](~/add/codesnippet/CPP/70bfcc96-3c47-4d4f-af27-_1.cpp)]
  syntax:
    content: public object[] EndInvoke (object target, IAsyncResult asyncResult);
    parameters:
    - id: target
      type: System.Object
      description: "The instance of the <xref:System.Object> on which to invoke the method."
    - id: asyncResult
      type: System.IAsyncResult
      description: "The <xref:System.IAsyncResult> returned from <xref:System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke%2A>."
    return:
      type: System.Object[]
      description: "To be added."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke*
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "The target parameter is ."
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "The caller does not have permission to invoke the method."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "The invoked method throws an exception."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo
  id: EndMethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: EndMethodInfo
  nameWithType: LogicalMethodInfo.EndMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the attributes and metadata for an <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref> method of an asynchronous invocation to a method."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/CSharp/p-system.web.services.pr_80_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/CPP/p-system.web.services.pr_80_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_80_1.vb)]
  syntax:
    content: public System.Reflection.MethodInfo EndMethodInfo { get; }
    return:
      type: System.Reflection.MethodInfo
      description: "A &lt;xref:System.Reflection.MethodInfo&gt; representing the attributes and metadata for an <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref> asynchronous method invocation."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(System.Type)
  id: GetCustomAttribute(System.Type)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: GetCustomAttribute(Type)
  nameWithType: LogicalMethodInfo.GetCustomAttribute(Type)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(Type)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Returns the first custom attribute applied to the type, if any custom attributes are applied to the type."
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/CPP/639f3695-7f4e-41fe-bc5d-_1.cpp)]
     [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/CSharp/639f3695-7f4e-41fe-bc5d-_1.cs)]
     [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/VisualBasic/639f3695-7f4e-41fe-bc5d-_1.vb)]
  syntax:
    content: public object GetCustomAttribute (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The <xref:System.Type> to which the custom attributes are applied."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute*
  exceptions:
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "The custom attribute type can not be loaded."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(System.Type)
  id: GetCustomAttributes(System.Type)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: GetCustomAttributes(Type)
  nameWithType: LogicalMethodInfo.GetCustomAttributes(Type)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(Type)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Returns the custom attributes applied to the specified type."
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/CPP/c01360a6-e025-410b-ab18-_1.cpp)]
     [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/CSharp/c01360a6-e025-410b-ab18-_1.cs)]
     [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/VisualBasic/c01360a6-e025-410b-ab18-_1.vb)]
  syntax:
    content: public object[] GetCustomAttributes (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The <xref:System.Type> to which the custom attributes are applied."
    return:
      type: System.Object[]
      description: "To be added."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes*
  exceptions:
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "The custom attribute type can not be loaded."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.InParameters
  id: InParameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: InParameters
  nameWithType: LogicalMethodInfo.InParameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.InParameters
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the parameters passed into the method represented by the instance of <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  remarks: "Use an instance of <xref:System.Reflection.ParameterInfo> to obtain information about the parameter&quot;s data type, default value, and so on.       InParameters returns an array of <xref:System.Reflection.ParameterInfo> objects representing the parameters passed into a method, in order."
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/CSharp/p-system.web.services.pr_55_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/CPP/p-system.web.services.pr_55_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_55_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo[] InParameters { get; }
    return:
      type: System.Reflection.ParameterInfo[]
      description: "An array of type &lt;xref:System.Reflection.ParameterInfo&gt; containing the parameters passed into the method represented by the instance of <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.InParameters*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Invoke(System.Object,System.Object[])
  id: Invoke(System.Object,System.Object[])
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: Invoke(Object,Object[])
  nameWithType: LogicalMethodInfo.Invoke(Object,Object[])
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Invoke(Object,Object[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Invokes the method represented by the current <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CSharp/5ef48647-93c7-4c46-8d10-_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CPP/5ef48647-93c7-4c46-8d10-_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/VisualBasic/5ef48647-93c7-4c46-8d10-_1.vb)]
  syntax:
    content: public object[] Invoke (object target, object[] values);
    parameters:
    - id: target
      type: System.Object
      description: "The instance of the <xref:System.Object> to invoke the method."
    - id: values
      type: System.Object[]
      description: "An argument list for the invoked method. This is an array of objects with the same number, order, and type as the parameters of the method. If the method does not require any parameters, the `values` parameter should be ."
    return:
      type: System.Object[]
      description: "To be added."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.Invoke*
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "The target parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The number, type, and order of parameters in the values parameter do not match the signature of the invoked method."
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "The caller does not have permission to invoke the method."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "The invoked method throws an exception."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync
  id: IsAsync
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: IsAsync
  nameWithType: LogicalMethodInfo.IsAsync
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets a value indicating whether the method represented by the instance of <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see> is invoked asynchronously."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/CSharp/p-system.web.services.pr_31_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/CPP/p-system.web.services.pr_31_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_31_1.vb)]
  syntax:
    content: public bool IsAsync { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the method is invoked asynchronously; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(System.Reflection.MethodInfo)
  id: IsBeginMethod(System.Reflection.MethodInfo)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: IsBeginMethod(MethodInfo)
  nameWithType: LogicalMethodInfo.IsBeginMethod(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(MethodInfo)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Returns a value indicating whether the method passed in represents a <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref> method of an asynchronous invocation."
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_IsBeginMethod#1](~/add/codesnippet/CPP/16aef9c9-6974-4ce7-8b1a-_1.cpp)]
     [!code-cs[LogicalMethodInfo_IsBeginMethod#1](~/add/codesnippet/CSharp/16aef9c9-6974-4ce7-8b1a-_1.cs)]
     [!code-vb[LogicalMethodInfo_IsBeginMethod#1](~/add/codesnippet/VisualBasic/16aef9c9-6974-4ce7-8b1a-_1.vb)]
  syntax:
    content: public static bool IsBeginMethod (System.Reflection.MethodInfo methodInfo);
    parameters:
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "The <xref:System.Reflection.MethodInfo> that might be a  method of an asynchronous invocation."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(System.Reflection.MethodInfo)
  id: IsEndMethod(System.Reflection.MethodInfo)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: IsEndMethod(MethodInfo)
  nameWithType: LogicalMethodInfo.IsEndMethod(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(MethodInfo)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Returns a value indicating whether the method passed in represents an <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref> method of an asynchronous invocation."
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_IsBeginMethod#2](~/add/codesnippet/CPP/0b6247ff-723e-4877-83bb-_1.cpp)]
     [!code-cs[LogicalMethodInfo_IsBeginMethod#2](~/add/codesnippet/CSharp/0b6247ff-723e-4877-83bb-_1.cs)]
     [!code-vb[LogicalMethodInfo_IsBeginMethod#2](~/add/codesnippet/VisualBasic/0b6247ff-723e-4877-83bb-_1.vb)]
  syntax:
    content: public static bool IsEndMethod (System.Reflection.MethodInfo methodInfo);
    parameters:
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "The <xref:System.Reflection.MethodInfo> that might be an  method of an asynchronous invocation."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid
  id: IsVoid
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: IsVoid
  nameWithType: LogicalMethodInfo.IsVoid
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets a value indicating whether the return type for the method represented by the instance of <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see> is <xref uid=&quot;langword_csharp_void&quot; name=&quot;void&quot; href=&quot;&quot;></xref>."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/CSharp/p-system.web.services.pr_46_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/CPP/p-system.web.services.pr_46_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_46_1.vb)]
  syntax:
    content: public bool IsVoid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the return type is void; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo
  id: MethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: MethodInfo
  nameWithType: LogicalMethodInfo.MethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the attributes and metadata for a synchronous method."
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_GetCustomAttribute#3](~/add/codesnippet/CPP/p-system.web.services.pr_13_1.cpp)]
     [!code-cs[LogicalMethodInfo_GetCustomAttribute#3](~/add/codesnippet/CSharp/p-system.web.services.pr_13_1.cs)]
     [!code-vb[LogicalMethodInfo_GetCustomAttribute#3](~/add/codesnippet/VisualBasic/p-system.web.services.pr_13_1.vb)]
  syntax:
    content: public System.Reflection.MethodInfo MethodInfo { get; }
    return:
      type: System.Reflection.MethodInfo
      description: "A &lt;xref:System.Reflection.MethodInfo&gt; representing the attributes and metadata for a method. If &lt;xref:System.Web.Services.Protocols.LogicalMethodInfo.IsAsync%2A&gt; is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, then the value of this property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Name
  id: Name
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: Name
  nameWithType: LogicalMethodInfo.Name
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Name
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the name of the method represented by this <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/CSharp/p-system.web.services.pr_63_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/CPP/p-system.web.services.pr_63_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_63_1.vb)]
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "The name of the method represented by this <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.Name*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters
  id: OutParameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: OutParameters
  nameWithType: LogicalMethodInfo.OutParameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the out parameters for the method."
  remarks: "Use a <xref:System.Reflection.ParameterInfo> to obtain information about the parameter&quot;s data type, default value, and so on."
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/CSharp/p-system.web.services.pr_70_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/CPP/p-system.web.services.pr_70_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_70_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo[] OutParameters { get; }
    return:
      type: System.Reflection.ParameterInfo[]
      description: "An array of &lt;xref:System.Reflection.ParameterInfo&gt; representing the out parameters for the method, in order."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Parameters
  id: Parameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: Parameters
  nameWithType: LogicalMethodInfo.Parameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Parameters
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the parameters for the method."
  remarks: "Use a <xref:System.Reflection.ParameterInfo> to obtain information about the parameter&quot;s data type, default value, and so on.       Parameters returns an array of <xref:System.Reflection.ParameterInfo> objects representing the parameters passed into a method, in order."
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CSharp/p-system.web.services.pr_7_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CPP/p-system.web.services.pr_7_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_7_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo[] Parameters { get; }
    return:
      type: System.Reflection.ParameterInfo[]
      description: "An array of &lt;xref:System.Reflection.ParameterInfo&gt; representing the parameters for the method."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.Parameters*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType
  id: ReturnType
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: ReturnType
  nameWithType: LogicalMethodInfo.ReturnType
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the return type of this method."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CSharp/p-system.web.services.pr_21_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CPP/p-system.web.services.pr_21_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/VisualBasic/p-system.web.services.pr_21_1.vb)]
  syntax:
    content: public Type ReturnType { get; }
    return:
      type: System.Type
      description: "The &lt;xref:System.Type&gt; returned by this method."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  id: ReturnTypeCustomAttributeProvider
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: ReturnTypeCustomAttributeProvider
  nameWithType: LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Gets the custom attributes for the return type."
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/CPP/8b875f48-e18d-4d82-9d82-_1.cpp)]
     [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/CSharp/8b875f48-e18d-4d82-9d82-_1.cs)]
     [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/VisualBasic/8b875f48-e18d-4d82-9d82-_1.vb)]
  syntax:
    content: public System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributeProvider { get; }
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "An <see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot;></see> representing the custom attributes for the return type."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ToString
  id: ToString
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: LogicalMethodInfo.ToString()
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ToString()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Returns a string that represents the current <see cref=&quot;T:System.Web.Services.Protocols.LogicalMethodInfo&quot;></see>."
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CSharp/m-system.web.services.pr_5_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/CPP/m-system.web.services.pr_5_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/VisualBasic/m-system.web.services.pr_5_1.vb)]
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "To be added."
  overload: System.Web.Services.Protocols.LogicalMethodInfo.ToString*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Services.Protocols.LogicalMethodInfo.#ctor(System.Reflection.MethodInfo)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: LogicalMethodInfo(MethodInfo)
  nameWithType: LogicalMethodInfo.LogicalMethodInfo(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.LogicalMethodInfo(MethodInfo)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncCallbackParameter
  nameWithType: LogicalMethodInfo.AsyncCallbackParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: true
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncResultParameter
  nameWithType: LogicalMethodInfo.AsyncResultParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncStateParameter
  nameWithType: LogicalMethodInfo.AsyncStateParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: BeginInvoke(Object,Object[],AsyncCallback,Object)
  nameWithType: LogicalMethodInfo.BeginInvoke(Object,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(Object,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: BeginMethodInfo
  nameWithType: LogicalMethodInfo.BeginMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[])
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Create(MethodInfo[])
  nameWithType: LogicalMethodInfo.Create(MethodInfo[])
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Create(MethodInfo[])
- uid: System.Web.Services.Protocols.LogicalMethodInfo[]
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo[]
  spec.csharp:
  - uid: System.Web.Services.Protocols.LogicalMethodInfo
    name: LogicalMethodInfo
    nameWithType: LogicalMethodInfo
    fullName: LogicalMethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[],System.Web.Services.Protocols.LogicalMethodTypes)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Create(MethodInfo[],LogicalMethodTypes)
  nameWithType: LogicalMethodInfo.Create(MethodInfo[],LogicalMethodTypes)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Create(MethodInfo[],LogicalMethodTypes)
- uid: System.Web.Services.Protocols.LogicalMethodTypes
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodTypes
  nameWithType: LogicalMethodTypes
  fullName: System.Web.Services.Protocols.LogicalMethodTypes
- uid: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: CustomAttributeProvider
  nameWithType: LogicalMethodInfo.CustomAttributeProvider
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: DeclaringType
  nameWithType: LogicalMethodInfo.DeclaringType
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(System.Object,System.IAsyncResult)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: EndInvoke(Object,IAsyncResult)
  nameWithType: LogicalMethodInfo.EndInvoke(Object,IAsyncResult)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(Object,IAsyncResult)
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: EndMethodInfo
  nameWithType: LogicalMethodInfo.EndMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(System.Type)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: GetCustomAttribute(Type)
  nameWithType: LogicalMethodInfo.GetCustomAttribute(Type)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(Type)
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(System.Type)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: GetCustomAttributes(Type)
  nameWithType: LogicalMethodInfo.GetCustomAttributes(Type)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(Type)
- uid: System.Web.Services.Protocols.LogicalMethodInfo.InParameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: InParameters
  nameWithType: LogicalMethodInfo.InParameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.InParameters
- uid: System.Reflection.ParameterInfo[]
  parent: System.Reflection
  isExternal: true
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo[]
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: ParameterInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Invoke(System.Object,System.Object[])
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Invoke(Object,Object[])
  nameWithType: LogicalMethodInfo.Invoke(Object,Object[])
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Invoke(Object,Object[])
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsAsync
  nameWithType: LogicalMethodInfo.IsAsync
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(System.Reflection.MethodInfo)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsBeginMethod(MethodInfo)
  nameWithType: LogicalMethodInfo.IsBeginMethod(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(MethodInfo)
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(System.Reflection.MethodInfo)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsEndMethod(MethodInfo)
  nameWithType: LogicalMethodInfo.IsEndMethod(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(MethodInfo)
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsVoid
  nameWithType: LogicalMethodInfo.IsVoid
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid
- uid: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: MethodInfo
  nameWithType: LogicalMethodInfo.MethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Name
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Name
  nameWithType: LogicalMethodInfo.Name
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: OutParameters
  nameWithType: LogicalMethodInfo.OutParameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Parameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Parameters
  nameWithType: LogicalMethodInfo.Parameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Parameters
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ReturnType
  nameWithType: LogicalMethodInfo.ReturnType
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ReturnTypeCustomAttributeProvider
  nameWithType: LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ToString
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ToString()
  nameWithType: LogicalMethodInfo.ToString()
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ToString()
- uid: System.Web.Services.Protocols.LogicalMethodInfo.#ctor*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo.LogicalMethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncCallbackParameter
  nameWithType: LogicalMethodInfo.AsyncCallbackParameter
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncResultParameter
  nameWithType: LogicalMethodInfo.AsyncResultParameter
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncStateParameter
  nameWithType: LogicalMethodInfo.AsyncStateParameter
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: BeginInvoke
  nameWithType: LogicalMethodInfo.BeginInvoke
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: BeginMethodInfo
  nameWithType: LogicalMethodInfo.BeginMethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Create*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Create
  nameWithType: LogicalMethodInfo.Create
- uid: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: CustomAttributeProvider
  nameWithType: LogicalMethodInfo.CustomAttributeProvider
- uid: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: DeclaringType
  nameWithType: LogicalMethodInfo.DeclaringType
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: EndInvoke
  nameWithType: LogicalMethodInfo.EndInvoke
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: EndMethodInfo
  nameWithType: LogicalMethodInfo.EndMethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: GetCustomAttribute
  nameWithType: LogicalMethodInfo.GetCustomAttribute
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: GetCustomAttributes
  nameWithType: LogicalMethodInfo.GetCustomAttributes
- uid: System.Web.Services.Protocols.LogicalMethodInfo.InParameters*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: InParameters
  nameWithType: LogicalMethodInfo.InParameters
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Invoke*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Invoke
  nameWithType: LogicalMethodInfo.Invoke
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsAsync
  nameWithType: LogicalMethodInfo.IsAsync
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsBeginMethod
  nameWithType: LogicalMethodInfo.IsBeginMethod
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsEndMethod
  nameWithType: LogicalMethodInfo.IsEndMethod
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsVoid
  nameWithType: LogicalMethodInfo.IsVoid
- uid: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: MethodInfo
  nameWithType: LogicalMethodInfo.MethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Name*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Name
  nameWithType: LogicalMethodInfo.Name
- uid: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: OutParameters
  nameWithType: LogicalMethodInfo.OutParameters
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Parameters*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Parameters
  nameWithType: LogicalMethodInfo.Parameters
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ReturnType
  nameWithType: LogicalMethodInfo.ReturnType
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ReturnTypeCustomAttributeProvider
  nameWithType: LogicalMethodInfo.ReturnTypeCustomAttributeProvider
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ToString*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ToString
  nameWithType: LogicalMethodInfo.ToString
