### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs
  id: FormViewInsertedEventArgs
  children:
  - System.Web.UI.WebControls.FormViewInsertedEventArgs.#ctor(System.Int32,System.Exception)
  - System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows
  - System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception
  - System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled
  - System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode
  - System.Web.UI.WebControls.FormViewInsertedEventArgs.Values
  langs:
  - csharp
  name: FormViewInsertedEventArgs
  nameWithType: FormViewInsertedEventArgs
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs
  type: Class
  summary: "Provides data for the <xref href=&quot;System.Web.UI.WebControls.FormView.ItemInserted&quot;></xref> event."
  remarks: "The <xref:System.Web.UI.WebControls.FormView> control raises the <xref:System.Web.UI.WebControls.FormView.ItemInserted> event when an Insert button (a button with its `CommandName` property set to &quot;Insert&quot;) within the control is clicked, but after the <xref:System.Web.UI.WebControls.FormView> control inserts the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of an insert operation, whenever this event occurs.       A FormViewInsertedEventArgs object is passed to the event-handling method, which allows you to determine the number of records affected and any exceptions that might have occurred. To determine the number of records affected by the insert operation, use the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows%2A> property. Use the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception%2A> property to determine whether any exceptions occurred. You can also indicate whether the exception was handled in the event-handling method by setting the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled%2A> property. If you need to access the values of the inserted record, use the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Values%2A> property.       By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property after an insert operation. If an exception occurs during the insert operation, you can keep the <xref:System.Web.UI.WebControls.FormView> control in insert mode by setting the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode%2A> property to `true`.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).       For a list of initial property values for an instance of the <xref:System.Web.UI.WebControls.FormViewDeletedEventArgs> class, see the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.%23ctor%2A> constructor."
  example:
  - "The following example demonstrates how to use the FormViewInsertedEventArgs object passed to the event-handling method for the <xref:System.Web.UI.WebControls.FormView.ItemInserted> event to determine whether an exception occurred during an insert operation.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[FormViewInsertedEventArgs#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_252_1.aspx)]\n [!code-vb[FormViewInsertedEventArgs#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_252_1.aspx)]"
  syntax:
    content: 'public class FormViewInsertedEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.#ctor(System.Int32,System.Exception)
  id: '#ctor(System.Int32,System.Exception)'
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  langs:
  - csharp
  name: FormViewInsertedEventArgs(Int32,Exception)
  nameWithType: FormViewInsertedEventArgs.FormViewInsertedEventArgs(Int32,Exception)
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.FormViewInsertedEventArgs(Int32,Exception)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.FormViewInsertedEventArgs&quot;></xref> class."
  remarks: "Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs> class.       The following table shows the initial property values for an instance of <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs>.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows%2A>|The value of the `affectedRows` parameter.|   |<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception%2A>|The <xref:System.Exception?displayProperty=fullName> object contained in the `e` parameter.|   |<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled%2A>|Initialized to `false`.|   |<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode%2A>|Initialized to `false`.|      > [!NOTE] >  This constructor is used primarily by control developers when raising events."
  syntax:
    content: public FormViewInsertedEventArgs (int affectedRows, Exception e);
    parameters:
    - id: affectedRows
      type: System.Int32
      description: "The number of rows affected by the insert operation."
    - id: e
      type: System.Exception
      description: "An <xref:System.Exception> that represents the exception raised when the insert operation was performed. If no exception was raised, use <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> for this parameter."
  overload: System.Web.UI.WebControls.FormViewInsertedEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows
  id: AffectedRows
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  langs:
  - csharp
  name: AffectedRows
  nameWithType: FormViewInsertedEventArgs.AffectedRows
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the number of rows affected by the insert operation."
  remarks: "Use the AffectedRows property to determine the number of records affected by the insert operation. This property is commonly used to verify that the correct number of records was inserted in the following situations:      -   Verify that only a single record was inserted. Sometimes an improperly written insert statement can insert multiple records.      -   Verify that a record was inserted when an error occurs during the insert operation that does not raise an exception.      -   Verify that a record was inserted when a data source control that supports conflict detection (optimistic concurrency), such as the <xref:System.Web.UI.WebControls.SqlDataSource> and <xref:System.Web.UI.WebControls.ObjectDataSource> controls, has its <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> property set to the `ConflictOptions.CompareAllValues` enumeration value. Under this setting, a record that has the same key value as a record by another user concurrently might not be inserted."
  example:
  - "The following example demonstrates how to use the AffectedRows property to verify that a record was inserted during the insert operation.  \n  \n [!code-cs[FormViewInsertedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_880_1.aspx)]\n [!code-vb[FormViewInsertedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_880_1.aspx)]"
  syntax:
    content: public int AffectedRows { get; }
    return:
      type: System.Int32
      description: "The number of rows affected by the insert operation."
  overload: System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception
  id: Exception
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: FormViewInsertedEventArgs.Exception
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets the exception (if any) that was raised during the insert operation."
  remarks: "Use the Exception property to determine the exception (if any) that was raised during the insert operation. If no exceptions were raised, this property returns `null`.      > [!NOTE] >  If an exception was raised and you decide to handle the exception in the event handler, be sure to set the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled%2A> property to `true`; otherwise, the <xref:System.Web.UI.WebControls.FormView> control re-throws the exception."
  example:
  - "The following example demonstrates how to use the Exception property to determine whether an exception was raised during an insert operation.  \n  \n [!code-cs[FormViewInsertedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_372_1.aspx)]\n [!code-vb[FormViewInsertedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_372_1.aspx)]"
  syntax:
    content: public Exception Exception { get; }
    return:
      type: System.Exception
      description: "An <xref:System.Exception> that represents the exception that was raised during the insert operation."
  overload: System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled
  id: ExceptionHandled
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  langs:
  - csharp
  name: ExceptionHandled
  nameWithType: FormViewInsertedEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether an exception that was raised during the insert operation was handled in the event handler."
  remarks: "When an exception is raised during the insert operation, use the ExceptionHandled property to indicate whether the exception was handled in the event handler. When this property is set to `true`, the exception is considered handled and is not re-thrown. If this property is set to `false`, the <xref:System.Web.UI.WebControls.FormView> control re-throws the exception. To determine which exception was raised, use the <xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception%2A> property."
  example:
  - "The following example demonstrates how to use the ExceptionHandled property to indicate that the exception was handled in the event handler.  \n  \n [!code-cs[FormViewInsertedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_826_1.aspx)]\n [!code-vb[FormViewInsertedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_826_1.aspx)]"
  syntax:
    content: public bool ExceptionHandled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the exception was handled in the event handler; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode
  id: KeepInInsertMode
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  langs:
  - csharp
  name: KeepInInsertMode
  nameWithType: FormViewInsertedEventArgs.KeepInInsertMode
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets a value indicating whether the <xref href=&quot;System.Web.UI.WebControls.FormView&quot;></xref> control should remain in insert mode after an insert operation."
  remarks: "By default, the <xref:System.Web.UI.WebControls.FormView> control returns to the mode specified by the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property. Use the KeepInInsertMode property to specify whether the <xref:System.Web.UI.WebControls.FormView> control should remain in insert mode after an insert operation. To keep the <xref:System.Web.UI.WebControls.FormView> control in insert mode, set this property to `true`.      > [!NOTE] >  This property should be used only when a situation occurs (such as an exception being raised) that requires the control to behave differently than it normally would. If the <xref:System.Web.UI.WebControls.FormView> control needs to remain in insert mode by default, set the <xref:System.Web.UI.WebControls.FormView.DefaultMode%2A> property instead."
  example:
  - "The following example demonstrates how to use the KeepInInsertMode property to keep the <xref:System.Web.UI.WebControls.FormView> control in insert mode when an exception occurs during an insert operation.  \n  \n [!code-cs[FormViewInsertedEventArgs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_181_1.aspx)]\n [!code-vb[FormViewInsertedEventArgs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_181_1.aspx)]"
  syntax:
    content: public bool KeepInInsertMode { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to remain in insert mode after an insert operation; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.Values
  id: Values
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  langs:
  - csharp
  name: Values
  nameWithType: FormViewInsertedEventArgs.Values
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.Values
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets a dictionary that contains the field name/value pairs for the inserted record."
  remarks: "Use the Values property to access the values of the fields for the inserted record. For example, you can use these values to keep a log of inserted records.       The Values property returns an <xref:System.Collections.Specialized.OrderedDictionary> object that implements the <xref:System.Collections.Specialized.IOrderedDictionary?displayProperty=fullName> interface. The <xref:System.Collections.Specialized.OrderedDictionary> object contains <xref:System.Collections.DictionaryEntry?displayProperty=fullName> objects that represent the fields of the inserted record. To access the field names, use the <xref:System.Collections.Specialized.OrderedDictionary.Keys%2A> property of the <xref:System.Collections.Specialized.OrderedDictionary> object. Similarly, you can access the field values by using the <xref:System.Collections.Specialized.OrderedDictionary.Values%2A> property.      > [!NOTE] >  As a shortcut, you can also use the indexer of the <xref:System.Collections.Specialized.OrderedDictionary> object to access the field values directly. The advantage in using the indexer is that it returns field values directly. Data source controls that rely on the field order (such as <xref:System.Web.UI.WebControls.AccessDataSource>) can access field values only by index."
  example:
  - "The following example demonstrates how to iterate through the items in the Values collection.  \n  \n [!code-vb[FormViewInsertedEventArgsValues#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1339_1.aspx)]\n [!code-cs[FormViewInsertedEventArgsValues#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1339_1.aspx)]"
  syntax:
    content: public System.Collections.Specialized.IOrderedDictionary Values { get; }
    return:
      type: System.Collections.Specialized.IOrderedDictionary
      description: "An <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref> object that contains a dictionary of key field name/value pairs for the inserted record."
  overload: System.Web.UI.WebControls.FormViewInsertedEventArgs.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.#ctor(System.Int32,System.Exception)
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: FormViewInsertedEventArgs(Int32,Exception)
  nameWithType: FormViewInsertedEventArgs.FormViewInsertedEventArgs(Int32,Exception)
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.FormViewInsertedEventArgs(Int32,Exception)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: AffectedRows
  nameWithType: FormViewInsertedEventArgs.AffectedRows
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: Exception
  nameWithType: FormViewInsertedEventArgs.Exception
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: FormViewInsertedEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: KeepInInsertMode
  nameWithType: FormViewInsertedEventArgs.KeepInInsertMode
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.Values
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: Values
  nameWithType: FormViewInsertedEventArgs.Values
  fullName: System.Web.UI.WebControls.FormViewInsertedEventArgs.Values
- uid: System.Collections.Specialized.IOrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: IOrderedDictionary
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.#ctor*
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: FormViewInsertedEventArgs
  nameWithType: FormViewInsertedEventArgs.FormViewInsertedEventArgs
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows*
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: AffectedRows
  nameWithType: FormViewInsertedEventArgs.AffectedRows
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception*
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: Exception
  nameWithType: FormViewInsertedEventArgs.Exception
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled*
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: FormViewInsertedEventArgs.ExceptionHandled
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode*
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: KeepInInsertMode
  nameWithType: FormViewInsertedEventArgs.KeepInInsertMode
- uid: System.Web.UI.WebControls.FormViewInsertedEventArgs.Values*
  parent: System.Web.UI.WebControls.FormViewInsertedEventArgs
  isExternal: false
  name: Values
  nameWithType: FormViewInsertedEventArgs.Values
