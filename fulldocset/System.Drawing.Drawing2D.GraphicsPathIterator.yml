### YamlMime:ManagedReference
items:
- uid: System.Drawing.Drawing2D.GraphicsPathIterator
  id: GraphicsPathIterator
  children:
  - System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  - System.Drawing.Drawing2D.GraphicsPathIterator.Count
  - System.Drawing.Drawing2D.GraphicsPathIterator.Dispose
  - System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.Finalize
  - System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.Rewind
  - System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  langs:
  - csharp
  name: GraphicsPathIterator
  nameWithType: GraphicsPathIterator
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator
  type: Class
  summary: "Fornece a capacidade de iterar através de subpaths num <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> e os tipos de formas contidos em cada Subcaminho de teste. Esta classe não pode ser herdada."
  syntax:
    content: 'public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath)'
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: GraphicsPathIterator(GraphicsPath)
  nameWithType: GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> classe com especificado <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> objeto."
  syntax:
    content: public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "O <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> objeto para o qual esta classe de programa auxiliar está a ser inicializado."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  id: CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: CopyData(PointF[],Byte[],Int32,Int32)
  nameWithType: GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Copia o <> </> *> propriedade e <> </> *> propriedade as matrizes de associada <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> para as duas matrizes de especificado."
  remarks: "Utilize o `startIndex` e `endIndex` parâmetros para copiar um intervalo especificado dos dados de caminho."
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a graphics path.  \n  \n-   Populates it with several primitives and some markers.  \n  \n-   Lists the path data on the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \n  \n-   Increments the path data index to the second marker.  \n  \n-   Calls the CopyData method to copy the path data contained between the start and end indexes to the points and types arrays.  \n  \n-   Lists this copied data on the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/visualbasic/b1ea0b64-123f-4dcb-86c3-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/cpp/b1ea0b64-123f-4dcb-86c3-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/csharp/b1ea0b64-123f-4dcb-86c3-_1.cs)]"
  syntax:
    content: public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "Após a devolver, contém uma matriz de <xref href=&quot;System.Drawing.PointF&quot;> </xref> estruturas que representa os pontos do caminho."
    - id: types
      type: System.Byte[]
      description: "Após a devolver, contém uma matriz de bytes que representa os tipos de pontos do caminho."
    - id: startIndex
      type: System.Int32
      description: "Especifica o índice de início de matrizes."
    - id: endIndex
      type: System.Int32
      description: "Especifica o índice de fim de matrizes."
    return:
      type: System.Int32
      description: "O número de pontos copiado."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count
  id: Count
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Count
  nameWithType: GraphicsPathIterator.Count
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Count
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Obtém o número de pontos do caminho."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "O número de pontos do caminho."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose
  id: Dispose
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Dispose()
  nameWithType: GraphicsPathIterator.Dispose()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Versões de todos os recursos utilizados por este <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> objeto."
  remarks: "Chamar `Dispose` permite que os recursos utilizados por este <xref:System.Drawing.Drawing2D.GraphicsPathIterator>o objeto a possível reatribuir porque para outros fins.</xref:System.Drawing.Drawing2D.GraphicsPathIterator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  id: Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Enumerate(PointF[],Byte[])
  nameWithType: GraphicsPathIterator.Enumerate(PointF[],Byte[])
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(PointF[],Byte[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Copia o <> </> *> propriedade e <> </> *> propriedade as matrizes de associada <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> para as duas matrizes de especificado."
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a graphics path.  \n  \n-   Populates it with several primitives and some markers.  \n  \n-   Lists the path data on the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \n  \n-   Increments the path data index to the second marker.  \n  \n-   Calls the Enumerate method to copy the path data to the `points` and `types` arrays.  \n  \n-   Lists this copied data on the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/visualbasic/5dbb8a2f-b3c5-4d23-b81d-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/cpp/5dbb8a2f-b3c5-4d23-b81d-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/csharp/5dbb8a2f-b3c5-4d23-b81d-_1.cs)]"
  syntax:
    content: public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "Após a devolver, contém uma matriz de <xref href=&quot;System.Drawing.PointF&quot;> </xref> estruturas que representa os pontos do caminho."
    - id: types
      type: System.Byte[]
      description: "Após a devolver, contém uma matriz de bytes que representa os tipos de pontos do caminho."
    return:
      type: System.Int32
      description: "O número de pontos copiado."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize
  id: Finalize
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Finalize()
  nameWithType: GraphicsPathIterator.Finalize()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Permite que um objeto para tentar libertar recursos e efetuar outras operações de limpeza antes de que reclamada a através da recolha de lixo."
  syntax:
    content: ~GraphicsPathIterator ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve
  id: HasCurve
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: HasCurve()
  nameWithType: GraphicsPathIterator.HasCurve()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Indica se o caminho associada a este <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> contém uma curva."
  remarks: "Todos os curvas num caminho são armazenadas como sequências de Bézier splines. Por exemplo, quando adiciona um elipse para um caminho, pode especificar o canto superior esquerdo, a largura e altura do retângulo delimitador de elipse. Os números (canto superior esquerdo, largura e altura) não são armazenados no caminho; em vez disso; elipse é convertido para uma sequência de quatro Bézier splines. Os pontos de controlo desses splines Bézier e os pontos finais de arquivos de caminho.       Um caminho armazena uma matriz de pontos de dados, cada um dos quais pertence a uma linha ou um spline Bézier. Se alguns dos pontos de na matriz de pertencer ao Bézier splines, em seguida, devolve HasCurve `true`. Se todos os pontos de matriz de pertencerem a linhas, em seguida, devolve HasCurve `false`.       Determinados métodos aplanar um caminho, o que significa que todos os curvas no caminho são convertidas em sequências de linhas. Depois de um caminho tem foi simplificado, HasCurve devolverá sempre `false`. Chamar o <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, ou no <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A>método de <xref:System.Drawing.Drawing2D.GraphicsPath>classe será aplanar um caminho.</xref:System.Drawing.Drawing2D.GraphicsPath> </xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> </xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A> </xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>"
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPath`.  \n  \n-   Adds three lines, a rectangle, and an ellipse.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object for `myPath`.  \n  \n-   Tests to see if the current path `myPath` contains a curve.  \n  \n-   Shows the result of the test in a message box.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/visualbasic/m-system.drawing.drawing_17_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/cpp/m-system.drawing.drawing_17_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/csharp/m-system.drawing.drawing_17_1.cs)]"
  syntax:
    content: public bool HasCurve ();
    parameters: []
    return:
      type: System.Boolean
      description: "Este método devolve <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> se o Subcaminho atual contém uma curva; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  id: NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextMarker(GraphicsPath)
  nameWithType: GraphicsPathIterator.NextMarker(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Isto <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> objeto tem um <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> objeto associado. O método NextMarker incrementa associada <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> para marcador seguinte no respetivo caminho e as cópias de todos os pontos de contidos entre o marcador atual e o marcador seguinte (ou de fim do caminho) para um segundo <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> objeto transmitido para o parâmetro."
  remarks: "Utilize o <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>método para definir os marcadores de um caminho.</xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> Marcadores são utilizados para criar grupos de subpaths. Um ou mais subpaths podem estar entre marcadores de dois."
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, an ellipse, and two markers.  \n  \n-   Lists the values of all the path's points to the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPathSection`, to receive copied points.  \n  \n-   Calls the NextMarker method, which iterates to the first marker and copies all the points contained between that marker and the next to `myPathSection`.  \n  \n-   Returns the number of points copied to `markerPoints`.  \n  \n-   Lists the marker number (the first marker) and number of points it contains to the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/visualbasic/8b47b275-716e-4cd3-9f07-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/cpp/8b47b275-716e-4cd3-9f07-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/csharp/8b47b275-716e-4cd3-9f07-_1.cs)]"
  syntax:
    content: public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "O <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> que irão ser copiados os pontos de objeto."
    return:
      type: System.Int32
      description: "O número de pontos entre esta marcador e a próxima."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)
  id: NextMarker(System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextMarker(Int32,Int32)
  nameWithType: GraphicsPathIterator.NextMarker(Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Incrementos o <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> para marcador seguinte no caminho e devolve os índices de início e paragem título os parâmetros [fora]."
  remarks: "Utilize o <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>método para definir os marcadores de um caminho.</xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> Marcadores são utilizados para criar grupos de subpaths. Um ou mais subpaths podem estar entre marcadores de dois."
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, and an ellipse ¾ with markers between each.  \n  \n-   Draws the values for the array of points to the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Calls the NextMarker method.  \n  \n-   Uses the values returned from the iterative calls to NextMarker to draw the start and stop points for each marker to the screen.  \n  \n-   Draws the value for the total number of points to the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/visualbasic/2a36a4b2-3946-4c96-a406-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/cpp/2a36a4b2-3946-4c96-a406-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/csharp/2a36a4b2-3946-4c96-a406-_1.cs)]"
  syntax:
    content: public int NextMarker (out int startIndex, out int endIndex);
    parameters:
    - id: startIndex
      type: System.Int32
      description: '[out] A referência de número inteiro fornecida para este parâmetro recebe o índice do ponto de que inicia um Subcaminho de.'
    - id: endIndex
      type: System.Int32
      description: '[out] A referência de número inteiro fornecida para este parâmetro recebe o índice do ponto que termina o Subcaminho ao qual `startIndex` pontos.'
    return:
      type: System.Int32
      description: "O número de pontos entre esta marcador e a próxima."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)
  id: NextPathType(System.Byte@,System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextPathType(Byte,Int32,Int32)
  nameWithType: GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Obtém a partir do índice e o índice final do grupo seguinte dados pontos que têm o mesmo tipo."
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, and an ellipse.  \n  \n-   Lists the values of all the points to the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \n  \n-   In a `for` loop, iterates through the points using the NextPathType and NextPathType methods.  \n  \n-   Uses the values returned from the iterative calls to list the subpath number, the number of points in it, and the type of the path points to the right side of the screen.  \n  \n-   Displays the value for the total number of points to the screen.  \n  \n Note that `ListPathPoints` is a helper function that separates most (not all) of the display code from the graphics path code.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/visualbasic/95680980-3c12-42ae-ac98-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/cpp/95680980-3c12-42ae-ac98-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/csharp/95680980-3c12-42ae-ac98-_1.cs)]"
  syntax:
    content: public int NextPathType (out byte pathType, out int startIndex, out int endIndex);
    parameters:
    - id: pathType
      type: System.Byte
      description: '[out] Recebe o tipo de ponto partilhado por todos os pontos no grupo. Tipos possíveis podem ser obtidos a partir de <xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;> </xref> enumeração.'
    - id: startIndex
      type: System.Int32
      description: '[out] Recebe o índice do grupo de pontos de partida.'
    - id: endIndex
      type: System.Int32
      description: '[out] Recebe o índice do grupo de pontos de fim.'
    return:
      type: System.Int32
      description: "Este método devolve o número de pontos de dados no grupo. Se não existirem mais nenhum grupos no caminho, este método devolve 0."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  id: NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextSubpath(GraphicsPath,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Obtém a figura seguinte (Subcaminho) do caminho de associados deste <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref>."
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, an ellipse, and two markers.  \n  \n-   Lists the values of all the path's points to the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPathSection`, to receive copied points.  \n  \n-   Calls the NextSubpath method, which iterates to the third subpath (figure) and copies all the points contained in that subpath to the `myPathSection` path, and also returns the number of points copied to `subpathPoints`.  \n  \n-   Lists the subpath number and number of points it contains to the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/visualbasic/fe78f5d8-9a93-4fb0-b017-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/cpp/fe78f5d8-9a93-4fb0-b017-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/csharp/fe78f5d8-9a93-4fb0-b017-_1.cs)]"
  syntax:
    content: public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "A <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> que consiste em ter os respetivos pontos definido para corresponder aos pontos de dados a figura obtida (Subcaminho) para este iterator."
    - id: isClosed
      type: System.Boolean
      description: '[out] Indica se o Subcaminho atual está fechado. É <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> esteja a caso a figura fechada, caso contrário, é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.'
    return:
      type: System.Int32
      description: "O número de pontos de dados na figura obtida (Subcaminho). Se não houver nenhuma figuras mais obter, zero é devolvida."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  id: NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextSubpath(Int32,Int32,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Move o <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> para o Subcaminho seguinte no caminho. O índice de início e o índice de fim do Subcaminho seguinte estão contidos nos parâmetros [fora]."
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, and an ellipse.  \n  \n-   Draws the values for the array of points to the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Calls the NextSubpath method.  \n  \n-   Uses the values returned from the iterative calls to NextSubpath to draw the start and stop values for each subpath to the screen.  \n  \n-   Draws the value for the total number of subpaths to the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/visualbasic/63165689-53f3-4b43-b800-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/cpp/63165689-53f3-4b43-b800-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/csharp/63165689-53f3-4b43-b800-_1.cs)]"
  syntax:
    content: public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);
    parameters:
    - id: startIndex
      type: System.Int32
      description: '[out] Recebe o índice de início do Subcaminho seguinte.'
    - id: endIndex
      type: System.Int32
      description: '[out] Recebe o índice de fim do Subcaminho seguinte.'
    - id: isClosed
      type: System.Boolean
      description: '[out] Indica se o Subcaminho está fechado.'
    return:
      type: System.Int32
      description: "O número de subpaths no <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> objeto."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind
  id: Rewind
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Rewind()
  nameWithType: GraphicsPathIterator.Rewind()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Isto rewinds <xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref> no início do respetivo caminho associado."
  remarks: "A primeira tem de chamar o <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>método de um iterator, obtém a primeira figura (Subcaminho) do caminho associado que iterator</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> Na segunda vez, obtém a figura segundo e assim sucessivamente. Quando chamar o método Rewind, a sequência é iniciado através de; ou seja, depois de chamar Rewind, a próxima chamada para <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>obtém a primeira ilustração no caminho.</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> O <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>e <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A>métodos comportar-se de forma semelhante.</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> </xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>"
  syntax:
    content: public void Rewind ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  id: SubpathCount
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: SubpathCount
  nameWithType: GraphicsPathIterator.SubpathCount
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Obtém o número de subpaths no caminho."
  syntax:
    content: public int SubpathCount { get; }
    return:
      type: System.Int32
      description: "O número de subpaths no caminho."
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: GraphicsPathIterator(GraphicsPath)
  nameWithType: GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: CopyData(PointF[],Byte[],Int32,Int32)
  nameWithType: GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.PointF[]
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF[]
  spec.csharp:
  - uid: System.Drawing.PointF
    name: PointF
    nameWithType: PointF
    fullName: PointF[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Count
  nameWithType: GraphicsPathIterator.Count
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Count
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Dispose()
  nameWithType: GraphicsPathIterator.Dispose()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose()
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Enumerate(PointF[],Byte[])
  nameWithType: GraphicsPathIterator.Enumerate(PointF[],Byte[])
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(PointF[],Byte[])
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Finalize()
  nameWithType: GraphicsPathIterator.Finalize()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize()
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: HasCurve()
  nameWithType: GraphicsPathIterator.HasCurve()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextMarker(GraphicsPath)
  nameWithType: GraphicsPathIterator.NextMarker(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextMarker(Int32,Int32)
  nameWithType: GraphicsPathIterator.NextMarker(Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(Int32,Int32)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextPathType(Byte,Int32,Int32)
  nameWithType: GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextSubpath(GraphicsPath,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextSubpath(Int32,Int32,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Rewind()
  nameWithType: GraphicsPathIterator.Rewind()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind()
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: SubpathCount
  nameWithType: GraphicsPathIterator.SubpathCount
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: GraphicsPathIterator
  nameWithType: GraphicsPathIterator.GraphicsPathIterator
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: CopyData
  nameWithType: GraphicsPathIterator.CopyData
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Count
  nameWithType: GraphicsPathIterator.Count
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Dispose
  nameWithType: GraphicsPathIterator.Dispose
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Enumerate
  nameWithType: GraphicsPathIterator.Enumerate
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Finalize
  nameWithType: GraphicsPathIterator.Finalize
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: HasCurve
  nameWithType: GraphicsPathIterator.HasCurve
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextMarker
  nameWithType: GraphicsPathIterator.NextMarker
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextPathType
  nameWithType: GraphicsPathIterator.NextPathType
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextSubpath
  nameWithType: GraphicsPathIterator.NextSubpath
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Rewind
  nameWithType: GraphicsPathIterator.Rewind
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: SubpathCount
  nameWithType: GraphicsPathIterator.SubpathCount
