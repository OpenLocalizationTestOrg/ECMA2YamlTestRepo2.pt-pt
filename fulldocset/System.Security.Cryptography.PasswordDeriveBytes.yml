### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.PasswordDeriveBytes
  id: PasswordDeriveBytes
  children:
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  - System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)
  - System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)
  - System.Security.Cryptography.PasswordDeriveBytes.HashName
  - System.Security.Cryptography.PasswordDeriveBytes.IterationCount
  - System.Security.Cryptography.PasswordDeriveBytes.Reset
  - System.Security.Cryptography.PasswordDeriveBytes.Salt
  langs:
  - csharp
  name: PasswordDeriveBytes
  nameWithType: PasswordDeriveBytes
  fullName: System.Security.Cryptography.PasswordDeriveBytes
  type: Class
  summary: "Derive uma chave de uma palavra-passe a utilizar uma extensão do algoritmo PBKDF1."
  remarks: "Esta classe utiliza uma extensão do algoritmo PBKDF1 definido no v PKCS n. º&5;&2;.0 padrão para derivar bytes adequados para utilização como material de chaves de uma palavra-passe. O padrão é descrito da IETF RRC 2898.      > [!IMPORTANT] > Nunca codificar uma palavra-passe no seu código de origem.  As palavras-passe hard-coded podem ser obtidas a partir de uma assemblagem com o [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) ferramenta, um editor de hexadecimal, ou abrindo simplesmente uma cópia de segurança a assemblagem num editor de texto como o notepad.exe."
  example:
  - "The following code example creates a key from a password using the PasswordDeriveBytes class.  \n  \n [!code-cs[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/csharp/t-system.security.crypto_118_1.cs)]\n [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/cpp/t-system.security.crypto_118_1.cpp)]\n [!code-vb[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/visualbasic/t-system.security.crypto_118_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes
  inheritance:
  - System.Object
  - System.Security.Cryptography.DeriveBytes
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.DeriveBytes.Dispose
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])
  id: '#ctor(System.Byte[],System.Byte[])'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(Byte[],Byte[])
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Cryptography.PasswordDeriveBytes&quot;> </xref> especificando a palavra-passe e chave salt utilizar derivar a chave de classe."
  remarks: >-
    > [!IMPORTANT]

    >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.
  example:
  - "The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.  \n  \n [!code-cs[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/csharp/8efdb953-efaf-410f-a477-_1.cs)]\n [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/cpp/8efdb953-efaf-410f-a477-_1.cpp)]\n [!code-vb[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/visualbasic/8efdb953-efaf-410f-a477-_1.vb)]"
  syntax:
    content: public PasswordDeriveBytes (byte[] password, byte[] salt);
    parameters:
    - id: password
      type: System.Byte[]
      description: The password to derive the key for.
    - id: salt
      type: System.Byte[]
      description: The key salt to use to derive the key.
  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])
  id: '#ctor(System.String,System.Byte[])'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(String,Byte[])
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.PasswordDeriveBytes"></xref> class with the password and key salt to use to derive the key.
  remarks: >-
    > [!IMPORTANT]

    >  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.
  syntax:
    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);
    parameters:
    - id: strPassword
      type: System.String
      description: The password for which to derive the key.
    - id: rgbSalt
      type: System.Byte[]
      description: The key salt to use to derive the key.
  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(Byte[],Byte[],CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.PasswordDeriveBytes"></xref> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.
  remarks: >-
    > [!IMPORTANT]

    >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.
  example:
  - "The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.  \n  \n [!code-cs[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/csharp/f3f1b81c-8ce8-40e8-90e6-_1.cs)]\n [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/cpp/f3f1b81c-8ce8-40e8-90e6-_1.cpp)]\n [!code-vb[Cryptography.PasswordDerivedbytes#1](~/add/codesnippet/visualbasic/f3f1b81c-8ce8-40e8-90e6-_1.vb)]"
  syntax:
    content: public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);
    parameters:
    - id: password
      type: System.Byte[]
      description: The password to derive the key for.
    - id: salt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: cspParams
      type: System.Security.Cryptography.CspParameters
      description: The cryptographic service provider (CSP) parameters for the operation.
  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)
  id: '#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(String,Byte[],CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.PasswordDeriveBytes"></xref> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.
  remarks: >-
    > [!IMPORTANT]

    >  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.
  syntax:
    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);
    parameters:
    - id: strPassword
      type: System.String
      description: The password for which to derive the key.
    - id: rgbSalt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: cspParams
      type: System.Security.Cryptography.CspParameters
      description: The CSP parameters for the operation.
  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)
  id: '#ctor(System.Byte[],System.Byte[],System.String,System.Int32)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.PasswordDeriveBytes"></xref> class specifying the password, key salt, hash name, and iterations to use to derive the key.
  remarks: "> [!IMPORTANT]> Código nunca rígido uma palavra-passe no seu código de origem.  Hard-coded palavras-passe podem ser obtidas a partir de uma assemblagem com o [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), um editor de hexadecimal, ou simplesmente abrir a assemblagem num editor de texto, como o Notepad.exe.  \n  \n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class."
  syntax:
    content: public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);
    parameters:
    - id: password
      type: System.Byte[]
      description: The password to derive the key for.
    - id: salt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: hashName
      type: System.String
      description: The hash algorithm to use to derive the key.
    - id: iterations
      type: System.Int32
      description: The iteration count to use to derive the key.
  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)
  id: '#ctor(System.String,System.Byte[],System.String,System.Int32)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(String,Byte[],String,Int32)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.PasswordDeriveBytes"></xref> class with the password, key salt, hash name, and number of iterations to use to derive the key.
  remarks: "> [!IMPORTANT]\n>  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.  \n  \n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class."
  syntax:
    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);
    parameters:
    - id: strPassword
      type: System.String
      description: The password for which to derive the key.
    - id: rgbSalt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: strHashName
      type: System.String
      description: The name of the hash algorithm for the operation.
    - id: iterations
      type: System.Int32
      description: The number of iterations for the operation.
  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.PasswordDeriveBytes"></xref> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.
  remarks: "> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \n  \n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class."
  syntax:
    content: public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);
    parameters:
    - id: password
      type: System.Byte[]
      description: The password to derive the key for.
    - id: salt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: hashName
      type: System.String
      description: The hash algorithm to use to derive the key.
    - id: iterations
      type: System.Int32
      description: The iteration count to use to derive the key.
    - id: cspParams
      type: System.Security.Cryptography.CspParameters
      description: The cryptographic service provider (CSP) parameters for the operation.
  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  id: '#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.PasswordDeriveBytes"></xref> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.
  remarks: "> [!IMPORTANT]\n>  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.  \n  \n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class."
  syntax:
    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);
    parameters:
    - id: strPassword
      type: System.String
      description: The password for which to derive the key.
    - id: rgbSalt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: strHashName
      type: System.String
      description: The name of the hash algorithm for the operation.
    - id: iterations
      type: System.Int32
      description: The number of iterations for the operation.
    - id: cspParams
      type: System.Security.Cryptography.CspParameters
      description: The CSP parameters for the operation.
  overload: System.Security.Cryptography.PasswordDeriveBytes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  id: CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: CryptDeriveKey(String,String,Int32,Byte[])
  nameWithType: PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Derives a cryptographic key from the <xref href="System.Security.Cryptography.PasswordDeriveBytes"></xref> object.
  remarks: "This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.  \n  \n If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used."
  example:
  - "This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.  \n  \n [!code-cs[Cryptography.PasswordDerivedbytes#2](~/add/codesnippet/csharp/328f02cb-e6f4-42b5-a006-_1.cs)]\n [!code-cpp[Cryptography.PasswordDerivedbytes#2](~/add/codesnippet/cpp/328f02cb-e6f4-42b5-a006-_1.cpp)]\n [!code-vb[Cryptography.PasswordDerivedbytes#2](~/add/codesnippet/visualbasic/328f02cb-e6f4-42b5-a006-_1.vb)]"
  syntax:
    content: public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);
    parameters:
    - id: algname
      type: System.String
      description: The algorithm name for which to derive the key.
    - id: alghashname
      type: System.String
      description: The hash algorithm name to use to derive the key.
    - id: keySize
      type: System.Int32
      description: The size of the key, in bits, to derive.
    - id: rgbIV
      type: System.Byte[]
      description: The initialization vector (IV) to use to derive the key.
    return:
      type: System.Byte[]
      description: The derived key.
  overload: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The <code>keySize</code> parameter is incorrect.  \n  \n -or-  \n  \n The cryptographic service provider (CSP) cannot be acquired.  \n  \n -or-  \n  \n The <code>algname</code> parameter is not a valid algorithm name.  \n  \n -or-  \n  \n The <code>alghashname</code> parameter is not a valid hash algorithm name."
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: PasswordDeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Releases the unmanaged resources used by the <xref href="System.Security.Cryptography.PasswordDeriveBytes"></xref> class and optionally releases the managed resources.
  remarks: "This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> to release both managed and unmanaged resources; <xref uid="langword_csharp_false" name="false" href=""></xref> to release only unmanaged resources.
  overload: System.Security.Cryptography.PasswordDeriveBytes.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)
  id: GetBytes(System.Int32)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: GetBytes(Int32)
  nameWithType: PasswordDeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Returns pseudo-random key bytes.
  remarks: This method can create any number of pseudo-random bytes. However, the strength of the byte sequence is limited by the number of bytes in the hash output.
  syntax:
    content: public override byte[] GetBytes (int cb);
    parameters:
    - id: cb
      type: System.Int32
      description: The number of pseudo-random key bytes to generate.
    return:
      type: System.Byte[]
      description: A byte array filled with pseudo-random key bytes.
  overload: System.Security.Cryptography.PasswordDeriveBytes.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.HashName
  id: HashName
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: HashName
  nameWithType: PasswordDeriveBytes.HashName
  fullName: System.Security.Cryptography.PasswordDeriveBytes.HashName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets or sets the name of the hash algorithm for the operation.
  syntax:
    content: public string HashName { get; set; }
    return:
      type: System.String
      description: The name of the hash algorithm for the operation.
  overload: System.Security.Cryptography.PasswordDeriveBytes.HashName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The name of the hash value is fixed and an attempt is made to change this value.
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.IterationCount
  id: IterationCount
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: IterationCount
  nameWithType: PasswordDeriveBytes.IterationCount
  fullName: System.Security.Cryptography.PasswordDeriveBytes.IterationCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets or sets the number of iterations for the operation.
  syntax:
    content: public int IterationCount { get; set; }
    return:
      type: System.Int32
      description: The number of iterations for the operation.
  overload: System.Security.Cryptography.PasswordDeriveBytes.IterationCount*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The number of iterations is fixed and an attempt is made to change this value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The property cannot be set because its value is out of range. This property requires a non-negative number.
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.Reset
  id: Reset
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: Reset()
  nameWithType: PasswordDeriveBytes.Reset()
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Resets the state of the operation.
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Security.Cryptography.PasswordDeriveBytes.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.PasswordDeriveBytes.Salt
  id: Salt
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: Salt
  nameWithType: PasswordDeriveBytes.Salt
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Salt
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets or sets the key salt value for the operation.
  remarks: A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys. This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation. These random bytes are known as salt.
  syntax:
    content: public byte[] Salt { get; set; }
    return:
      type: System.Byte[]
      description: The key salt value for the operation.
  overload: System.Security.Cryptography.PasswordDeriveBytes.Salt*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The key salt value is fixed and an attempt is made to change this value.
  platform:
  - net462
references:
- uid: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: System.Security.Cryptography.DeriveBytes
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(Byte[],Byte[])
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(String,Byte[])
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(Byte[],Byte[],CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(String,Byte[],CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(String,Byte[],String,Int32)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
- uid: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: CryptDeriveKey(String,String,Int32,Byte[])
  nameWithType: PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
- uid: System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: PasswordDeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: GetBytes(Int32)
  nameWithType: PasswordDeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(Int32)
- uid: System.Security.Cryptography.PasswordDeriveBytes.HashName
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: HashName
  nameWithType: PasswordDeriveBytes.HashName
  fullName: System.Security.Cryptography.PasswordDeriveBytes.HashName
- uid: System.Security.Cryptography.PasswordDeriveBytes.IterationCount
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: IterationCount
  nameWithType: PasswordDeriveBytes.IterationCount
  fullName: System.Security.Cryptography.PasswordDeriveBytes.IterationCount
- uid: System.Security.Cryptography.PasswordDeriveBytes.Reset
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: Reset()
  nameWithType: PasswordDeriveBytes.Reset()
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Reset()
- uid: System.Security.Cryptography.PasswordDeriveBytes.Salt
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: Salt
  nameWithType: PasswordDeriveBytes.Salt
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Salt
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor*
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes
- uid: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey*
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: CryptDeriveKey
  nameWithType: PasswordDeriveBytes.CryptDeriveKey
- uid: System.Security.Cryptography.PasswordDeriveBytes.Dispose*
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: Dispose
  nameWithType: PasswordDeriveBytes.Dispose
- uid: System.Security.Cryptography.PasswordDeriveBytes.GetBytes*
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: GetBytes
  nameWithType: PasswordDeriveBytes.GetBytes
- uid: System.Security.Cryptography.PasswordDeriveBytes.HashName*
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: HashName
  nameWithType: PasswordDeriveBytes.HashName
- uid: System.Security.Cryptography.PasswordDeriveBytes.IterationCount*
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: IterationCount
  nameWithType: PasswordDeriveBytes.IterationCount
- uid: System.Security.Cryptography.PasswordDeriveBytes.Reset*
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: Reset
  nameWithType: PasswordDeriveBytes.Reset
- uid: System.Security.Cryptography.PasswordDeriveBytes.Salt*
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: Salt
  nameWithType: PasswordDeriveBytes.Salt
