### YamlMime:ManagedReference
items:
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  id: ReadOnlyMetadataCollection`1.Enumerator
  children:
  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current
  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose
  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext
  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset
  - System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: ReadOnlyMetadataCollection<T>+Enumerator
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator
  type: Struct
  syntax:
    content: 'public struct ReadOnlyMetadataCollection<T>.Enumerator : System.Collections.Generic.IEnumerator<T> where T : MetadataItem'
    typeParameters:
    - id: T
      description: "To be added."
  inheritance:
  - System.ValueType
  implements:
  - System.Collections.Generic.IEnumerator<T>
  platform:
  - net462
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current
  id: Current
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  langs:
  - csharp
  name: Current
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.Current
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator.Current
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Metadata.Edm
  syntax:
    content: public T Current { get; }
    return:
      type: T
      description: "To be added."
  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose
  id: Dispose
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.Dispose()
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator.Dispose()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Metadata.Edm
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext
  id: MoveNext
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.MoveNext()
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator.MoveNext()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Metadata.Edm
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset
  id: Reset
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.Reset()
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator.Reset()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Metadata.Edm
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.System.Collections.IEnumerator.Current
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Metadata.Edm
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "To be added."
  overload: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  isExternal: false
  name: Current
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.Current
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator.Current
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  isExternal: false
  name: Dispose()
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.Dispose()
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator.Dispose()
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  isExternal: false
  name: MoveNext()
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.MoveNext()
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  isExternal: false
  name: Reset()
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.Reset()
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator.Reset()
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.System.Collections.IEnumerator.Current
  fullName: System.Data.Metadata.Edm.ReadOnlyMetadataCollection<T>+Enumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current*
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  isExternal: false
  name: Current
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.Current
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose*
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  isExternal: false
  name: Dispose
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.Dispose
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext*
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  isExternal: false
  name: MoveNext
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.MoveNext
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset*
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  isExternal: false
  name: Reset
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.Reset
- uid: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current*
  parent: System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: ReadOnlyMetadataCollection<T>+Enumerator.System.Collections.IEnumerator.Current
