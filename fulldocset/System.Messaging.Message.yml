### YamlMime:ManagedReference
items:
- uid: System.Messaging.Message
  id: Message
  children:
  - System.Messaging.Message.#ctor
  - System.Messaging.Message.#ctor(System.Object)
  - System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  - System.Messaging.Message.AcknowledgeType
  - System.Messaging.Message.Acknowledgment
  - System.Messaging.Message.AdministrationQueue
  - System.Messaging.Message.AppSpecific
  - System.Messaging.Message.ArrivedTime
  - System.Messaging.Message.AttachSenderId
  - System.Messaging.Message.Authenticated
  - System.Messaging.Message.AuthenticationProviderName
  - System.Messaging.Message.AuthenticationProviderType
  - System.Messaging.Message.Body
  - System.Messaging.Message.BodyStream
  - System.Messaging.Message.BodyType
  - System.Messaging.Message.ConnectorType
  - System.Messaging.Message.CorrelationId
  - System.Messaging.Message.DestinationQueue
  - System.Messaging.Message.DestinationSymmetricKey
  - System.Messaging.Message.DigitalSignature
  - System.Messaging.Message.EncryptionAlgorithm
  - System.Messaging.Message.Extension
  - System.Messaging.Message.Formatter
  - System.Messaging.Message.HashAlgorithm
  - System.Messaging.Message.Id
  - System.Messaging.Message.InfiniteTimeout
  - System.Messaging.Message.IsFirstInTransaction
  - System.Messaging.Message.IsLastInTransaction
  - System.Messaging.Message.Label
  - System.Messaging.Message.LookupId
  - System.Messaging.Message.MessageType
  - System.Messaging.Message.Priority
  - System.Messaging.Message.Recoverable
  - System.Messaging.Message.ResponseQueue
  - System.Messaging.Message.SecurityContext
  - System.Messaging.Message.SenderCertificate
  - System.Messaging.Message.SenderId
  - System.Messaging.Message.SenderVersion
  - System.Messaging.Message.SentTime
  - System.Messaging.Message.SourceMachine
  - System.Messaging.Message.TimeToBeReceived
  - System.Messaging.Message.TimeToReachQueue
  - System.Messaging.Message.TransactionId
  - System.Messaging.Message.TransactionStatusQueue
  - System.Messaging.Message.UseAuthentication
  - System.Messaging.Message.UseDeadLetterQueue
  - System.Messaging.Message.UseEncryption
  - System.Messaging.Message.UseJournalQueue
  - System.Messaging.Message.UseTracing
  langs:
  - csharp
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
  type: Class
  summary: "Fornece acesso às propriedades necessárias para definir uma mensagem de colocação de mensagens em fila."
  remarks: "Utilize a classe de mensagem para observar ou receber mensagens a partir de uma fila ou a ter controlo bem sobre as propriedades da mensagem ao enviar uma mensagem para uma fila.       <xref:System.Messaging.MessageQueue>utiliza a classe de mensagem quando peeks ou receber mensagens de filas, porque tanto o <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName>e <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>métodos criar uma nova instância da classe de mensagem e definir as propriedades da instância.</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName></xref:System.Messaging.MessageQueue> Propriedades de só de leitura a classe de mensagem que se aplicam a obtenção de mensagens numa fila, enquanto as propriedades de leitura/escrita se aplicam a enviar e obtenção de mensagens. Quando <xref:System.Messaging.MessageQueue>peeks ou recebe uma mensagem numa fila, o <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>propriedade determina qual das propriedades da mensagem da mesma são obtidas.</xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> </xref:System.Messaging.MessageQueue>       O <xref:System.Messaging.MessageQueue>dessa classe <xref:System.Messaging.MessageQueue.Send%2A>método permite-lhe especificar qualquer tipo de objeto para uma mensagem a ser enviado para essa fila.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.MessageQueue> Pode utilizar o <xref:System.Messaging.MessageQueue>da instância <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>propriedade para especificar as definições de mensagens genéricas enviadas para a fila.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> </xref:System.Messaging.MessageQueue> Os tipos de definições incluem o formatador, etiqueta, encriptação e autenticação. Também pode especificar valores para as adequadas <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>Membros quando coordenar a aplicação mensagens para responder a mensagens de confirmação e relatório.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> Utilizar uma instância de mensagem para enviar uma mensagem para a fila dá-lhe a flexibilidade para aceder e modificar muitas destas propriedades — para uma única mensagem ou numa base mensagem por mensagem. Propriedades da mensagem têm precedência sobre <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>       Mensagens de dados são armazenadas no <xref:System.Messaging.Message.Body%2A>propriedade e em menor grau, o <xref:System.Messaging.Message.AppSpecific%2A>e <xref:System.Messaging.Message.Extension%2A>Propriedades.</xref:System.Messaging.Message.Extension%2A> </xref:System.Messaging.Message.AppSpecific%2A> </xref:System.Messaging.Message.Body%2A> Quando os dados de mensagens estiver encriptados, serializados ou anular a serialização, apenas o conteúdo do <xref:System.Messaging.Message.Body%2A>propriedade são afetados.</xref:System.Messaging.Message.Body%2A>       O conteúdo do <xref:System.Messaging.Message.Body%2A>propriedade são serializadas quando a mensagem é enviada, utilizando o <xref:System.Messaging.Message.Formatter%2A>propriedade que especificar.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A> O conteúdo serializado se encontram no <xref:System.Messaging.Message.BodyStream%2A>propriedade.</xref:System.Messaging.Message.BodyStream%2A> Também pode definir o <xref:System.Messaging.Message.BodyStream%2A>propriedade diretamente, por exemplo, para enviar um ficheiro como o conteúdo de dados de uma mensagem.</xref:System.Messaging.Message.BodyStream%2A> Pode alterar o <xref:System.Messaging.Message.Body%2A>ou <xref:System.Messaging.Message.Formatter%2A>Propriedades em qualquer altura antes de enviar a mensagem e os dados serão serializadas adequadamente quando chamar <xref:System.Messaging.MessageQueue.Send%2A>.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       As propriedades definidas pelo <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName>propriedade aplicam-se apenas a mensagens que não sejam do tipo Message.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName> Se especificar o <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>propriedade para um <xref:System.Messaging.MessageQueue>, as propriedades com nomes idênticos numa instância de mensagem enviada para essa fila fazer com que estas propriedades predefinido a ser ignorada.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>       Para obter uma lista de valores de propriedade inicial para uma instância da mensagem, consulte o <xref:System.Messaging.Message.%23ctor%2A>construtor.</xref:System.Messaging.Message.%23ctor%2A>"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/t-system.messaging.message_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/t-system.messaging.message_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/t-system.messaging.message_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/t-system.messaging.message_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/t-system.messaging.message_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/t-system.messaging.message_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class Message : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.Message.#ctor
  id: '#ctor'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message()
  nameWithType: Message.Message()
  fullName: System.Messaging.Message.Message()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Messaging.Message&quot;> </xref> classe com uma mensagem vazia."
  remarks: "Utilize esta sobrecarga para criar uma nova instância do <xref:System.Messaging.Message>classe que tem um corpo vazio.</xref:System.Messaging.Message>       Especifique o <xref:System.Messaging.Message.Body%2A>propriedade ou o <xref:System.Messaging.Message.BodyStream%2A>propriedade antes de enviar o <xref:System.Messaging.Message>objeto.</xref:System.Messaging.Message> </xref:System.Messaging.Message.BodyStream%2A> </xref:System.Messaging.Message.Body%2A> O <xref:System.Messaging.Message.Body%2A>propriedade pode ser qualquer objeto que pode ser serializado como uma cadeia de texto, um objeto de estrutura, uma instância de classe ou um objeto incorporado.</xref:System.Messaging.Message.Body%2A>       A menos que escrever o conteúdo da mensagem diretamente para o <xref:System.Messaging.Message.BodyStream%2A>definir a propriedade, o <xref:System.Messaging.Message.Formatter%2A>propriedade antes de enviar a mensagem.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.BodyStream%2A> O corpo está a ser serializado utilizando o <xref:System.Messaging.Message.Formatter%2A>valor da propriedade no momento a <xref:System.Messaging.MessageQueue.Send%2A>método é chamado o <xref:System.Messaging.MessageQueue>instância.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A>       O <xref:System.Messaging.XmlMessageFormatter>aproximadamente ligado está integrado, pelo que não é necessário ter o mesmo objeto de tipo no remetente e o recetor ao utilizar este formato.</xref:System.Messaging.XmlMessageFormatter> O <xref:System.Messaging.ActiveXMessageFormatter>e <xref:System.Messaging.BinaryMessageFormatter>serializar os dados para representação binária.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> O <xref:System.Messaging.ActiveXMessageFormatter>é utilizado ao enviar ou receber componentes COM.</xref:System.Messaging.ActiveXMessageFormatter>       A tabela seguinte mostra os valores de propriedade inicial para uma instância do <xref:System.Messaging.Message>.</xref:System.Messaging.Message>      | Propriedade | Valor inicial |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Fornecedor de criptografia do Microsoft Base versão 1.0 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| `null`|   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| Uma cadeia vazia (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.DigitalSignature%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.Formatter%2A>| `XmlMessageFormatter`|   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| Uma cadeia vazia (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/m-system.messaging.messa_16_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_16_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/m-system.messaging.messa_16_1.cs)]"
  syntax:
    content: public Message ();
    parameters: []
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: System.Messaging.Message.Message(Object)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Messaging.Message&quot;> </xref> classe, utilizando o <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> para serializar o objeto especificado no corpo da mensagem."
  remarks: "Utilize esta sobrecarga para criar uma nova instância do <xref:System.Messaging.Message>classe que contém o <xref:System.Messaging.Message.Body%2A>especificada pelo `body` parâmetro.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message> O `body` parâmetro pode ser qualquer objeto que pode ser serializado como uma cadeia de texto, um objeto de estrutura, uma instância de classe ou um objeto incorporado. O corpo está a ser serializado utilizando o <xref:System.Messaging.XmlMessageFormatter>, exceto se alterar o <xref:System.Messaging.Message.Formatter%2A>propriedade antes do <xref:System.Messaging.Message>é enviada.</xref:System.Messaging.Message> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.XmlMessageFormatter> Se alterar o <xref:System.Messaging.Message.Body%2A>ou <xref:System.Messaging.Message.Formatter%2A>propriedade em qualquer altura antes de chamar <xref:System.Messaging.MessageQueue.Send%2A>, a mensagem será serializada, de acordo com o novo valor de propriedade.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       O <xref:System.Messaging.XmlMessageFormatter>aproximadamente ligado está integrado, pelo que não é necessário ter o mesmo objeto de tipo no remetente e o recetor ao utilizar este formato.</xref:System.Messaging.XmlMessageFormatter> O <xref:System.Messaging.ActiveXMessageFormatter>e <xref:System.Messaging.BinaryMessageFormatter>serializar os dados para representação binária.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> O <xref:System.Messaging.ActiveXMessageFormatter>é utilizado ao enviar ou receber componentes COM.</xref:System.Messaging.ActiveXMessageFormatter>       A tabela seguinte mostra os valores de propriedade inicial para uma instância do <xref:System.Messaging.Message>.</xref:System.Messaging.Message>      | Propriedade | Valor inicial |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Fornecedor de criptografia do Microsoft Base versão 1.0 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| O `body` parâmetro. |   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| Uma cadeia vazia (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.DigitalSignature%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.Formatter%2A>| `XmlMessageFormatter`|   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| Uma cadeia vazia (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example creates a new queue, sends a message that contains an order to it, and then retrieves it.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.messa_33_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.messa_33_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_33_1.vb)]"
  syntax:
    content: public Message (object body);
    parameters:
    - id: body
      type: System.Object
      description: "O objeto a ser serializado para o corpo da mensagem."
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  id: '#ctor(System.Object,System.Messaging.IMessageFormatter)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object,IMessageFormatter)
  nameWithType: Message.Message(Object,IMessageFormatter)
  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Messaging.Message&quot;> </xref> classe utilizando o formatador especificado para serializar o objeto especificado no corpo da mensagem."
  remarks: "Utilize esta sobrecarga para criar uma nova instância do <xref:System.Messaging.Message>classe que contém o <xref:System.Messaging.Message.Body%2A>especificada pelo `body` parâmetro e que utiliza qualquer formatador válido para serializar o corpo.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message> O `body` parâmetro é qualquer objeto que pode ser serializado como uma cadeia de texto, um objeto de estrutura, uma instância de classe ou um objeto incorporado. Se alterar o <xref:System.Messaging.Message.Body%2A>ou <xref:System.Messaging.Message.Formatter%2A>propriedade em qualquer altura antes de chamar <xref:System.Messaging.MessageQueue.Send%2A>, a mensagem será serializada, de acordo com o novo valor de propriedade.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       O <xref:System.Messaging.XmlMessageFormatter>aproximadamente ligado está integrado, pelo que não é necessário ter o mesmo objeto de tipo no remetente e o recetor ao utilizar este formato.</xref:System.Messaging.XmlMessageFormatter> O <xref:System.Messaging.ActiveXMessageFormatter>e <xref:System.Messaging.BinaryMessageFormatter>serializar os dados para representação binária.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> O <xref:System.Messaging.ActiveXMessageFormatter>é utilizado ao enviar ou receber componentes COM.</xref:System.Messaging.ActiveXMessageFormatter>       A tabela seguinte mostra os valores de propriedade inicial para uma instância do <xref:System.Messaging.Message>.</xref:System.Messaging.Message>      | Propriedade | Valor inicial |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Fornecedor de criptografia do Microsoft Base versão 1.0 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| O `body` parâmetro. |   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| Uma cadeia vazia (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.DigitalSignature%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.Formatter%2A>| O `formatter` parâmetro. |   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| Uma cadeia vazia (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| Uma matriz de bytes de comprimento zero |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - >-
    [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/6734a59e-0a86-49d1-96b9-_1.cpp)]
     [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/6734a59e-0a86-49d1-96b9-_1.cs)]
     [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/6734a59e-0a86-49d1-96b9-_1.vb)]
  syntax:
    content: public Message (object body, System.Messaging.IMessageFormatter formatter);
    parameters:
    - id: body
      type: System.Object
      description: "O objeto a ser serializado para o corpo da mensagem."
    - id: formatter
      type: System.Messaging.IMessageFormatter
      description: "A <xref href=&quot;System.Messaging.IMessageFormatter&quot;> </xref> que especifica o formatador com a qual a serialização do corpo da mensagem."
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.AcknowledgeType
  id: AcknowledgeType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: System.Messaging.Message.AcknowledgeType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o tipo de mensagem de confirmação para ser reencaminhado para a aplicação de envio."
  remarks: "A propriedade AcknowledgeType Especifica o tipo de mensagens de confirmação solicitado pela aplicação emissora. Defina a propriedade de AcknowledgeType antes de enviar a mensagem de notificação de determinados ocorrências de pedidos — por exemplo, uma mensagem atingir a fila de destino, uma mensagem a ser obtidas ou um limite de tempo a impedir que uma mensagem a atingir ou a ser obtidas a partir da fila de destino.       Colocação de mensagens em fila devolve notificação através do envio de mensagens de confirmação para o <xref:System.Messaging.Message.AdministrationQueue%2A>a propriedade especificada da mensagem original.</xref:System.Messaging.Message.AdministrationQueue%2A> Uma mensagem de confirmação <xref:System.Messaging.Message.Acknowledgment%2A>propriedade indica o tipo de confirmação que representa.</xref:System.Messaging.Message.Acknowledgment%2A> Por exemplo, se foi enviada uma mensagem de confirmação porque uma mensagem não alcançou o destino antes do <xref:System.Messaging.Message.TimeToReachQueue%2A>intervalo expirado, a <xref:System.Messaging.Message.Acknowledgment%2A>propriedade da mensagem de confirmação iria conter o valor `ReachQueueTimeout`.</xref:System.Messaging.Message.Acknowledgment%2A> </xref:System.Messaging.Message.TimeToReachQueue%2A>"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_11_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_11_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_11_1.vb)]"
  syntax:
    content: public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }
    return:
      type: System.Messaging.AcknowledgeTypes
      description: "Um do <xref href=&quot;System.Messaging.AcknowledgeTypes&quot;> </xref> valores, que representam ambos do tipos de sistema de mensagens em fila de administração e as condições sob as quais em que as confirmações são devolvidas à aplicação de envio de mensagens de confirmação. A predefinição é <xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AcknowledgeType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem está filtrada para ignorar a propriedade AcknowledgeType."
  platform:
  - net462
- uid: System.Messaging.Message.Acknowledgment
  id: Acknowledgment
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: System.Messaging.Message.Acknowledgment
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém a classificação de confirmação que esta mensagem representa."
  remarks: "Quando receber uma mensagem a partir de uma fila de administração, ler a propriedade de confirmação para verificar o estado da mensagem original.       Quando é enviada uma mensagem à fila de destino, a colocação de mensagens em fila pode ser pedida para publicar uma mensagem de confirmação. Por exemplo, uma mensagem de tal pode indicar se a mensagem chegou e foi obtida dentro de tempos limite especificado, ou indicar que aconteceu de errado no caso de falha de entrega. A fila de destino devolve confirmação mensagens e envia-os para a fila de administração especificada na mensagem original <xref:System.Messaging.Message.AdministrationQueue%2A>propriedade.</xref:System.Messaging.Message.AdministrationQueue%2A> O <xref:System.Messaging.Message.Id%2A>propriedade de uma mensagem de confirmação identifica a mensagem de confirmação, não da mensagem original.</xref:System.Messaging.Message.Id%2A> Pode encontrar o identificador da mensagem original a confirmação <xref:System.Messaging.Message>da instância <xref:System.Messaging.Message.CorrelationId%2A>propriedade.</xref:System.Messaging.Message.CorrelationId%2A> </xref:System.Messaging.Message>       Se esta <xref:System.Messaging.Message>instância representa uma mensagem de confirmação, a propriedade de confirmação Especifica o tipo de confirmação.</xref:System.Messaging.Message> Caso contrário, a propriedade de confirmação de dados contém o valor `Normal`.       Utilize o <xref:System.Messaging.Message.AcknowledgeType%2A>propriedade da mensagem original para especificar as circunstâncias em que serão devolvidas em que as confirmações.</xref:System.Messaging.Message.AcknowledgeType%2A>"
  syntax:
    content: public System.Messaging.Acknowledgment Acknowledgment { get; }
    return:
      type: System.Messaging.Acknowledgment
      description: "Um do <xref href=&quot;System.Messaging.Acknowledgment&quot;> </xref> valores de enumeração."
  overload: System.Messaging.Message.Acknowledgment*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar o <xref:System.Messaging.MessagePropertyFilter.Acknowledgment*>propriedade.</xref:System.Messaging.MessagePropertyFilter.Acknowledgment*>"
  platform:
  - net462
- uid: System.Messaging.Message.AdministrationQueue
  id: AdministrationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: System.Messaging.Message.AdministrationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define a fila que recebe as mensagens de confirmação que gera a colocação de mensagens em fila."
  remarks: "A fila especificada na propriedade AdministrationQueue pode ser qualquer fila não transacional. As mensagens de confirmação enviadas para a fila de administração podem indicar se a mensagem original atingiu a respetiva fila de destino e se foi removida da fila.       Quando o <xref:System.Messaging.Message.AcknowledgeType%2A>propriedade tem qualquer valor diferente de `None`, a aplicação de envio deve especificar a fila a utilizar como a fila de administração.</xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_47_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_47_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_47_1.vb)]"
  syntax:
    content: public System.Messaging.MessageQueue AdministrationQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "O <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> que especifica a fila de administração utilizada para mensagens de confirmação gerada pelo sistema. A predefinição é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AdministrationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade AdministrationQueue."
  platform:
  - net462
- uid: System.Messaging.Message.AppSpecific
  id: AppSpecific
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: System.Messaging.Message.AppSpecific
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define as informações adicionais, específicas da aplicação."
  remarks: "A propriedade AppSpecific contém informações específicas de aplicações que pode utilizar para organizar os diferentes tipos de mensagens em fila. Por exemplo, pode utilizar os índices específicos da aplicação. É da responsabilidade da aplicação a interpretar AppSpecific informações de propriedade.       Sempre que possível, devem incluir dados de mensagens no corpo de mensagem em vez da propriedade AppSpecific.       Ao trabalhar com as filas externas, utilize o <xref:System.Messaging.Message.Extension%2A>propriedade para especificar propriedades de mensagem que não existem na colocação de mensagens em fila.</xref:System.Messaging.Message.Extension%2A> Como com a propriedade AppSpecific, é da responsabilidade da aplicação para compreender os conteúdos do <xref:System.Messaging.Message.Extension%2A>propriedade.</xref:System.Messaging.Message.Extension%2A>"
  syntax:
    content: public int AppSpecific { get; set; }
    return:
      type: System.Int32
      description: "Informações específicas para a aplicação. A predefinição é zero."
  overload: System.Messaging.Message.AppSpecific*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade AppSpecific."
  platform:
  - net462
- uid: System.Messaging.Message.ArrivedTime
  id: ArrivedTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: System.Messaging.Message.ArrivedTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém o tempo que a mensagem chegou na fila de destino."
  remarks: "A mensagem <xref:System.Messaging.Message.TimeToBeReceived%2A>propriedade indica o quão rapidamente deve receber a mensagem da fila de destino.</xref:System.Messaging.Message.TimeToBeReceived%2A> O <xref:System.Messaging.Message.TimeToBeReceived%2A>temporizador de propriedade é iniciado quando a mensagem é enviada, não quando chega a mensagem na fila.</xref:System.Messaging.Message.TimeToBeReceived%2A>"
  example:
  - "The following code example displays the value of a message's ArrivedTime property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public DateTime ArrivedTime { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>que representa a hora da chegada de mensagens na fila de destino.</xref:System.DateTime> A hora é ajustada do GMT a hora local do computador no qual reside a fila de destino."
  overload: System.Messaging.Message.ArrivedTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade ArrivedTime."
  platform:
  - net462
- uid: System.Messaging.Message.AttachSenderId
  id: AttachSenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: System.Messaging.Message.AttachSenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define um valor que indica se o ID do remetente deve ser anexado à mensagem."
  remarks: "O <xref:System.Messaging.Message.SenderId%2A>propriedade é uma matriz de bytes que representa o identificador do utilizador enviar.</xref:System.Messaging.Message.SenderId%2A> O ID do remetente é definido pela colocação de mensagens em fila e é utilizado pelo Gestor de filas recetor para verificar se o remetente tem direitos de acesso a uma fila.       A ausência de remetente que ID é uma indicação pela aplicação emissora que a colocação de mensagens em fila deve não validar o remetente da mensagem nem verificar o acesso do remetente de direitos para a fila de receção. O <xref:System.Messaging.Message.SenderId%2A>é fidedigna apenas se a mensagem foi autenticada quando atingiu a fila de destino.</xref:System.Messaging.Message.SenderId%2A> A mensagem foi rejeitada quando atingir a fila de destino se a fila aceita apenas mensagens autenticadas e um o <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>ou <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>propriedade é `false`.</xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> </xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>      > [!CAUTION] > Se uma mensagem foi rejeitada, é um enviadas para a fila de entregues (se <xref:System.Messaging.Message.UseDeadLetterQueue%2A>é `true`), ou será ignorada.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Pode pedir em que as confirmações quando uma mensagem de falha aceder a uma fila. Caso contrário, quando <xref:System.Messaging.Message.UseDeadLetterQueue%2A>é `false` a mensagem poderá perder-se sem aviso.</xref:System.Messaging.Message.UseDeadLetterQueue%2A>"
  example:
  - "The following code example gets and sets the value of a message's AttachSenderId property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool AttachSenderId { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.Messaging.Message.SenderId*>deve ser anexado à mensagem; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Messaging.Message.SenderId*> A predefinição é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AttachSenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade AttachSenderId."
  platform:
  - net462
- uid: System.Messaging.Message.Authenticated
  id: Authenticated
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: System.Messaging.Message.Authenticated
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém um valor que indica se a mensagem foi autenticada."
  remarks: "A propriedade autenticado é utilizada apenas pela aplicação enquanto está a interagir com a mensagem e tentar determinar se a autenticação foi pedida. Se a mensagem da fila, a mensagem foi autenticada. Por outro lado, se a propriedade autenticado for `true`, o Gestor de filas recetor autenticado a mensagem quando recebido a essa mensagem.       Não é possível determinar se uma mensagem de falha de autenticação ao observar as respetivas propriedades. Colocação de mensagens em fila rejeita mensagens que falham a autenticação antes de estes são fornecidas para a fila. No entanto, pode pedir que ser enviada uma mensagem de confirmação se uma falha de entrega impede que as mensagens que chegam numa fila."
  example:
  - "The following code example displays the value of a message's Authenticated property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool Authenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a autenticação foi pedida para a mensagem ao introduzir o da fila; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.Authenticated*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade autenticado."
  platform:
  - net462
- uid: System.Messaging.Message.AuthenticationProviderName
  id: AuthenticationProviderName
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: System.Messaging.Message.AuthenticationProviderName
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o nome do fornecedor de criptografia utilizado para gerar a assinatura digital da mensagem."
  remarks: "Normalmente, utiliza o AuthenticationProviderName ao trabalhar com as filas externas. Colocação de mensagens em fila necessita do nome do fornecedor de autenticação e o tipo de fornecedor de autenticação de fornecedor de criptografia (fornecedor de autenticação) para validar as assinaturas digitais de mensagens enviadas para uma fila externa e mensagens transmitidas para a colocação de mensagens em fila de uma fila externa.       Ao enviar uma mensagem, defina sempre o AuthenticationProviderName e <xref:System.Messaging.Message.ConnectorType%2A>Propriedades em conjunto.</xref:System.Messaging.Message.ConnectorType%2A> Quando a mensagem é enviada, a colocação de mensagens em fila ignora o nome do fornecedor de autenticação se o tipo de conector não seja também definido.       Não é possível a propriedade AuthenticationProviderName `null`, mas pode ser uma cadeia vazia (&quot;&quot;)."
  syntax:
    content: public string AuthenticationProviderName { get; set; }
    return:
      type: System.String
      description: "O nome de fornecedor de criptografia utilizado para gerar a assinatura digital da mensagem. A predefinição é o fornecedor de criptografia do Microsoft Base versão 1.0."
  overload: System.Messaging.Message.AuthenticationProviderName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Não foi possível definir a propriedade AuthenticationProviderName.       - ou - a fila de mensagens está filtrada para ignorar a propriedade AuthenticationProviderName."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O AuthenticationProviderName foi definido como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.AuthenticationProviderType
  id: AuthenticationProviderType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: System.Messaging.Message.AuthenticationProviderType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o tipo de fornecedor criptográfico utilizado para gerar a assinatura digital da mensagem."
  remarks: "Normalmente, utiliza a propriedade AuthenticationProviderType ao trabalhar com as filas externas para especificar os serviços de criptografia fornecedor está associado a uma mensagem. Colocação de mensagens em fila necessita do nome do fornecedor de autenticação e o tipo de fornecedor de autenticação de fornecedor de criptografia (fornecedor de autenticação) para validar as assinaturas digitais de mensagens enviadas para uma fila externa e mensagens transmitidas para a colocação de mensagens em fila de uma fila externa.       Apenas `RsaFull` se destina a ser utilizado com mensagens.       Ao enviar uma mensagem, defina sempre o AuthenticationProviderType e <xref:System.Messaging.Message.ConnectorType%2A>Propriedades em conjunto.</xref:System.Messaging.Message.ConnectorType%2A> Quando a mensagem é enviada, a colocação de mensagens em fila ignora o tipo de fornecedor de autenticação se o tipo de conector não seja também definido."
  syntax:
    content: public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }
    return:
      type: System.Messaging.CryptographicProviderType
      description: "Um do <xref href=&quot;System.Messaging.CryptographicProviderType&quot;> </xref> valores. A predefinição é <xref uid=&quot;langword_csharp_RSA_FULL&quot; name=&quot;RSA_FULL&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AuthenticationProviderType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Não foi possível definir a propriedade AuthenticationProviderType.       - ou - a fila de mensagens está filtrada para ignorar a propriedade AuthenticationProviderType."
  platform:
  - net462
- uid: System.Messaging.Message.Body
  id: Body
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Body
  nameWithType: Message.Body
  fullName: System.Messaging.Message.Body
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o conteúdo da mensagem."
  remarks: "Propriedade de corpo da mensagem contém, normalmente, os dados associados a mensagem. Embora também pode enviar dados específicos da aplicação <xref:System.Messaging.Message.AppSpecific%2A>e <xref:System.Messaging.Message.Extension%2A>Propriedades, deve incluir dados de mensagens no corpo da mensagem sempre que possível.</xref:System.Messaging.Message.Extension%2A> </xref:System.Messaging.Message.AppSpecific%2A> Apenas o conteúdo da propriedade de corpo é serializado ou encriptado.       A propriedade Body pode conter qualquer objeto cujo tamanho não pode exceder 4 MB. Se utilizar <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>para enviar a qualquer objeto que é não é do tipo <xref:System.Messaging.Message>para o <xref:System.Messaging.MessageQueue>que de objeto irá estar localizado na propriedade Body de <xref:System.Messaging.Message>instâncias devolvido por <xref:System.Messaging.MessageQueue.Peek%2A>ou <xref:System.Messaging.MessageQueue.Receive%2A>.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue.Peek%2A> </xref:System.Messaging.Message> </xref:System.Messaging.MessageQueue> </xref:System.Messaging.Message> </xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>       O argumento de cadeia no `MessageQueue.Send(&quot;hello.&quot;)` é um exemplo de um objeto genérico deste tipo.       O <xref:System.Messaging.Message.BodyType%2A>propriedade indica o tipo de informações que são armazenadas no corpo da mensagem.</xref:System.Messaging.Message.BodyType%2A> Colocação de mensagens em fila utiliza estas informações para identificar o tipo de conteúdo de propriedade Body.       Especifique a propriedade de corpo ou <xref:System.Messaging.Message.BodyStream%2A>propriedade antes de enviar o <xref:System.Messaging.Message>objeto.</xref:System.Messaging.Message> </xref:System.Messaging.Message.BodyStream%2A> A propriedade de corpo pode ser qualquer objeto serializável, tal como uma cadeia de texto, o objeto de estrutura, a instância de classe ou o objeto incorporado.       A menos que escrever o conteúdo da mensagem diretamente para o <xref:System.Messaging.Message.BodyStream%2A>definir a propriedade, o <xref:System.Messaging.Message.Formatter%2A>propriedade antes de enviar a mensagem.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.BodyStream%2A> Quando o <xref:System.Messaging.MessageQueue.Send%2A>método é chamado o <xref:System.Messaging.MessageQueue>instância, o corpo está a ser serializada utilizando o formatador contido no <xref:System.Messaging.Message.Formatter%2A>propriedade.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> Se enviar a mensagem sem especificar um valor para a <xref:System.Messaging.Message.Formatter%2A>propriedade, as predefinições de formatador para <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.Message.Formatter%2A>      > [!NOTE] > Tentar definir o corpo de uma mensagem para <xref:System.Decimal.MaxValue>fará com que um <xref:System.OverflowException>quando o `Send` método do <xref:System.Messaging.MessageQueue>denomina-se a classe e o <xref:System.Messaging.ActiveXMessageFormatter>é utilizado.</xref:System.Messaging.ActiveXMessageFormatter> </xref:System.Messaging.MessageQueue> </xref:System.OverflowException> </xref:System.Decimal.MaxValue>"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_13_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_13_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_13_1.cs)]"
  syntax:
    content: public object Body { get; set; }
    return:
      type: System.Object
      description: "Um objeto que especifica o conteúdo da mensagem. O objeto pode ser uma cadeia, uma data, uma moeda, um número, uma matriz de bytes ou qualquer objeto gerido."
  overload: System.Messaging.Message.Body*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O <xref:System.Messaging.Message.Formatter*>propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Messaging.Message.Formatter*>       - ou - a fila de mensagens está filtrada para ignorar a propriedade Body."
  platform:
  - net462
- uid: System.Messaging.Message.BodyStream
  id: BodyStream
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: System.Messaging.Message.BodyStream
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define as informações no corpo da mensagem."
  remarks: "O corpo de uma mensagem pode consistir de qualquer tipo de informações — por exemplo, uma cadeia, uma data, uma moeda, um número, uma matriz de bytes ou qualquer objeto gerido. Esta informação é serializada para um <xref:System.IO.Stream>a ser transmitido para a fila.</xref:System.IO.Stream>       Especifique o <xref:System.Messaging.Message.Body%2A>propriedade ou a propriedade BodyStream antes de enviar o <xref:System.Messaging.Message>objeto.</xref:System.Messaging.Message> </xref:System.Messaging.Message.Body%2A> Se definir o <xref:System.Messaging.Message.Body%2A>propriedade, os conteúdos são serializados para a propriedade BodyStream.</xref:System.Messaging.Message.Body%2A> No entanto, pode optar por escrever a propriedade BodyStream diretamente. Isto é útil, por exemplo, quando pretender abrir uma ligação para um ficheiro e transmitir em fluxo o respetivo conteúdo como o corpo da mensagem.       A menos que escrever o conteúdo da mensagem diretamente para a propriedade BodyStream, defina o <xref:System.Messaging.Message.Formatter%2A>propriedade antes de enviar a mensagem.</xref:System.Messaging.Message.Formatter%2A> Quando o <xref:System.Messaging.MessageQueue.Send%2A>método é chamado o <xref:System.Messaging.MessageQueue>instância, o corpo está a ser serializada utilizando o formatador contido no <xref:System.Messaging.Message.Formatter%2A>propriedade.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> Se enviar a mensagem sem especificar um valor para a <xref:System.Messaging.Message.Formatter%2A>propriedade, as predefinições de formatador para <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.Message.Formatter%2A>       Se definir o <xref:System.Messaging.Message.UseEncryption%2A>propriedade `true` para o corpo desta mensagem, a mensagem será encriptada quando é enviado, não quando definir o <xref:System.Messaging.Message.Body%2A>propriedade.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message.UseEncryption%2A> Por conseguinte, a propriedade BodyStream nunca é encriptada."
  syntax:
    content: public System.IO.Stream BodyStream { get; set; }
    return:
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>que contém as informações de serializados incluídas no <xref:System.Messaging.Message.Body*>da mensagem.</xref:System.Messaging.Message.Body*> </xref:System.IO.Stream>"
  overload: System.Messaging.Message.BodyStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar o <xref:System.Messaging.Message.Body*>propriedade.</xref:System.Messaging.Message.Body*>"
  platform:
  - net462
- uid: System.Messaging.Message.BodyType
  id: BodyType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyType
  nameWithType: Message.BodyType
  fullName: System.Messaging.Message.BodyType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o tipo de dados que contém o corpo da mensagem."
  remarks: "Colocação de mensagens em fila reconhece o conteúdo do corpo como um objeto ou como uma sequência serializada. A propriedade BodyType indica o tipo de objecto do <xref:System.Messaging.Message.Body%2A>propriedade da mensagem.</xref:System.Messaging.Message.Body%2A>       O <xref:System.Messaging.XmlMessageFormatter>efetua vínculo entre tipos nativos e o objeto no corpo da mensagem.</xref:System.Messaging.XmlMessageFormatter> Se utilizar o <xref:System.Messaging.XmlMessageFormatter>, o formatador define a propriedade BodyType por si.</xref:System.Messaging.XmlMessageFormatter>       Outro ao mesmo tempo pode fornecer a funcionalidade de enlace além disso, como mostrado no seguinte código c#.      ```   message.Formatter = new ActiveXMessageFormatter();   object myObject message.Body;   if (myObject is string) {   }   if (myObject is int) {   }   if (myObject is float) {   }   ```"
  example:
  - "The following code example displays the value of a message's BodyType property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public int BodyType { get; set; }
    return:
      type: System.Int32
      description: "Verdadeiro tipo o corpo da mensagem, tal como uma cadeia, uma data, uma moeda ou um número."
  overload: System.Messaging.Message.BodyType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar o <xref:System.Messaging.Message.Body*>propriedade.</xref:System.Messaging.Message.Body*>"
  platform:
  - net462
- uid: System.Messaging.Message.ConnectorType
  id: ConnectorType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: System.Messaging.Message.ConnectorType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define um valor que indica que algumas propriedades de mensagens normalmente definidas pela colocação de mensagens em fila foram definidas pela aplicação emissora."
  remarks: "Colocação de mensagens requer possível definir a propriedade de ConnectorType sempre que uma aplicação define uma propriedade de mensagem que é normalmente definida pela colocação de mensagens em fila. Uma aplicação, normalmente, utiliza um ConnectorType nos seguintes duas casos: - sempre que uma aplicação do conector transmite uma mensagem. O ConnectorType indica as aplicações de envio e receção como interpretar as propriedades de segurança e confirmação da mensagem.      -Sempre que a aplicação emissora, em vez de colocação de mensagem, encripta uma mensagem. O ConnectorType indica a colocação de mensagens para utilizar o <xref:System.Messaging.Message.DestinationSymmetricKey%2A>valor da propriedade para desencriptar a mensagem.</xref:System.Messaging.Message.DestinationSymmetricKey%2A>       Tem de definir a propriedade ConnectorType se definir qualquer uma das seguintes propriedades (caso contrário, a fila ignora estas propriedades quando a mensagem é enviada):- <xref:System.Messaging.Message.AuthenticationProviderName%2A>- <xref:System.Messaging.Message.AuthenticationProviderType%2A>- <xref:System.Messaging.Message.DestinationSymmetricKey%2A>- <xref:System.Messaging.Message.DigitalSignature%2A>- <xref:System.Messaging.Message.MessageType%2A>- <xref:System.Messaging.Message.SenderId%2A></xref:System.Messaging.Message.SenderId%2A> </xref:System.Messaging.Message.MessageType%2A> </xref:System.Messaging.Message.DigitalSignature%2A> </xref:System.Messaging.Message.DestinationSymmetricKey%2A> </xref:System.Messaging.Message.AuthenticationProviderType%2A> </xref:System.Messaging.Message.AuthenticationProviderName%2A>"
  syntax:
    content: public Guid ConnectorType { get; set; }
    return:
      type: System.Guid
      description: "A <xref:System.Guid>definido pela aplicação e utilizado em conjunto com a encriptação de mensagens ou aplicações de conector.</xref:System.Guid> Isto <xref:System.Guid>permite uma aplicação de receção interpretar as propriedades da mensagem que foram definidas pela aplicação emissora mas que são normalmente definidas pela colocação de mensagens em fila.</xref:System.Guid>"
  overload: System.Messaging.Message.ConnectorType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade ConnectorType."
  platform:
  - net462
- uid: System.Messaging.Message.CorrelationId
  id: CorrelationId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: System.Messaging.Message.CorrelationId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o identificador de mensagem utilizado pelo confirmação, relatórios e mensagens de resposta para referenciar a mensagem original."
  remarks: "Quando a colocação de mensagens em fila gera uma mensagem de confirmação ou no relatório, utiliza a propriedade de identificador de correlação para especificar o identificador da mensagem da mensagem original. Desta forma, o identificador de correlação vincula a mensagem de relatório ou confirmação, a mensagem original.       A aplicação de envio, em seguida, pode corresponder a confirmação ou no relatório com a mensagem original utilizando a propriedade CorrelationId para identificar a mensagem original <xref:System.Messaging.Message.Id%2A>propriedade.</xref:System.Messaging.Message.Id%2A>       Aplicações de conector necessário configurar a propriedade CorrelationId das mensagens de confirmação e relatórios para o identificador da mensagem da mensagem original.       Quando a aplicação envia uma mensagem de resposta à aplicação de envio, pode definir a propriedade CorrelationId da mensagem de resposta para o identificador da mensagem da mensagem original. A aplicação de envio, em seguida, pode corresponder a sua mensagem de resposta para a mensagem foi enviada."
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_95_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_95_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_95_1.vb)]"
  syntax:
    content: public string CorrelationId { get; set; }
    return:
      type: System.String
      description: "O identificador de mensagem especificado pelo <xref:System.Messaging.Message.Id*>propriedade da mensagem original.</xref:System.Messaging.Message.Id*> O identificador de correlação é utilizado pela colocação de mensagens ao gerar uma mensagem de confirmação ou no relatório e por uma aplicação ao gerar uma mensagem de resposta."
  overload: System.Messaging.Message.CorrelationId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade CorrelationId."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "É o CorrelationId <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.DestinationQueue
  id: DestinationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: System.Messaging.Message.DestinationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém a fila de destino pretendido de uma mensagem."
  remarks: "A propriedade DestinationQueue normalmente é utilizada para determinar o destino original de uma mensagem que chegaram num diário de alterações ou a fila de mensagens entregues. Normalmente, não é necessário examinar esta propriedade, porque, normalmente, obter a mensagem da respetiva fila de destino."
  example:
  - "The following code example displays the value of a message's DestinationQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue DestinationQueue { get; }
    return:
      type: System.Messaging.MessageQueue
      description: "A <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> que especifica a fila de destino pretendida para a mensagem."
  overload: System.Messaging.Message.DestinationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade DestinationQueue."
  platform:
  - net462
- uid: System.Messaging.Message.DestinationSymmetricKey
  id: DestinationSymmetricKey
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: System.Messaging.Message.DestinationSymmetricKey
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define a chave simétrica utilizada para encriptar mensagens encriptadas de aplicação ou as mensagens enviadas para filas externas."
  remarks: "Dois cenários necessitam que utilize a propriedade DestinationSymmetricKey. O primeiro é quando a sua aplicação, em vez de colocação de mensagem, encripta uma mensagem. O segundo é quando enviar uma mensagem encriptada para um sistema de colocação de diferente de colocação de mensagens em fila.       Antes de definir esta propriedade, tem de encriptar a chave simétrica com a chave pública do Gestor de filas recetor. Enviar uma mensagem de aplicação encriptada, o Gestor de filas recetor utiliza a chave simétrica para desencriptar a mensagem antes de a enviar para a fila de destino.       Se enviar uma mensagem para uma fila externa, a mensagem é primeiro recebida pela aplicação conector adequada, que reencaminha a mensagem encriptada com a chave simétrica anexada à aplicação receptora. Em seguida, é da responsabilidade da aplicação recetora ao desencriptar a mensagem com a chave simétrica.       Quando definir a propriedade DestinationSymmetricKey, também tem de definir o <xref:System.Messaging.Message.ConnectorType%2A>propriedade.</xref:System.Messaging.Message.ConnectorType%2A> Quando a mensagem é enviada, a colocação de mensagens em fila ignora a propriedade DestinationSymmetricKey se o <xref:System.Messaging.Message.ConnectorType%2A>propriedade não seja também definida.</xref:System.Messaging.Message.ConnectorType%2A>       A propriedade de DestinationSymmetricKey tem um tamanho máximo de matriz de 256."
  syntax:
    content: public byte[] DestinationSymmetricKey { get; set; }
    return:
      type: System.Byte[]
      description: "Uma matriz de valores de bytes que especifica a chave simétrica de destino utilizada para encriptar a mensagem. A predefinição é uma matriz de comprimento zero."
  overload: System.Messaging.Message.DestinationSymmetricKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade DestinationSymmetricKey."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "É o DestinationSymmetricKey <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.DigitalSignature
  id: DigitalSignature
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: System.Messaging.Message.DigitalSignature
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define a assinatura digital que a colocação de mensagens em fila utiliza para autenticar a mensagem."
  remarks: "Colocação de mensagens em fila utiliza a assinatura digital para autenticar as mensagens que foram enviadas por versão 1.0 de colocação de mensagens. Na maioria dos casos, a colocação de mensagens em fila gera e define a propriedade DigitalSignature quando a aplicação enviar pedidos de autenticação. A aplicação recetora utiliza esta propriedade para obter a assinatura digital anexada à mensagem.       Só pode utilizar a propriedade DigitalSignature ao executar a versão 2.0 de colocação de mensagens. A aplicação de envio deve especificar a colocação de mensagens em fila assinaturas de versão 1.0 quando pedir autenticação. Se a aplicação de envio envia uma assinatura de versão 2.0 Colocação de mensagens em fila, esta propriedade contém uma memória intermédia de bytes quatro, cada contentor zero.       A propriedade de bits DigitalSignature, em conjunto com o <xref:System.Messaging.Message.SenderCertificate%2A>propriedade, também é utilizado por aplicações de conector quando é enviada uma mensagem.</xref:System.Messaging.Message.SenderCertificate%2A> Neste cenário, a aplicação de conector — em vez de colocação de mensagens em fila — gera a assinatura digital, o qual este bases no certificado do utilizador enviar a mensagem.       A propriedade de bits DigitalSignature tem um tamanho máximo de matriz de 256.       Quando definir a propriedade DigitalSignature, também tem de definir o <xref:System.Messaging.Message.ConnectorType%2A>propriedade.</xref:System.Messaging.Message.ConnectorType%2A> Quando é enviada uma mensagem, a colocação de mensagens em fila ignora a propriedade DigitalSignature se o <xref:System.Messaging.Message.ConnectorType%2A>propriedade não seja também definida.</xref:System.Messaging.Message.ConnectorType%2A>"
  syntax:
    content: public byte[] DigitalSignature { get; set; }
    return:
      type: System.Byte[]
      description: "Uma matriz de valores de bytes que especifica a assinatura digital de 1.0 de colocação de mensagens utilizada para autenticar a mensagem. A predefinição é uma matriz de comprimento zero."
  overload: System.Messaging.Message.DigitalSignature*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade DigitalSignature."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade DigitalSignature é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.EncryptionAlgorithm
  id: EncryptionAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: System.Messaging.Message.EncryptionAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o algoritmo de encriptação utilizado para encriptar o corpo da mensagem privada."
  remarks: "Se uma mensagem privada (encriptadas), é encriptada antes que seja enviado e desencriptado após a receção. A propriedade EncryptionAlgorithm Especifica o algoritmo utilizado para encriptar o corpo da mensagem de uma mensagem privada.       Uma fila pode exigir a essa entrada mensagens sejam encriptados. Se uma aplicação envia uma mensagem de (não privado) não encriptados para uma fila que aceita apenas mensagens privadas ou, se envia uma mensagem privada a uma fila que aceita apenas mensagens de não-privadas, a fila rejeita a mensagem. A aplicação de envio pode pedir que uma mensagem de confirmação negativa devolvido nesse caso."
  syntax:
    content: public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }
    return:
      type: System.Messaging.EncryptionAlgorithm
      description: "Um do <xref href=&quot;System.Messaging.EncryptionAlgorithm&quot;> </xref> valores de enumeração. A predefinição é <xref uid=&quot;langword_csharp_RC2&quot; name=&quot;RC2&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.EncryptionAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade EncryptionAlgorithm."
  platform:
  - net462
- uid: System.Messaging.Message.Extension
  id: Extension
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Extension
  nameWithType: Message.Extension
  fullName: System.Messaging.Message.Extension
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define informações adicionais, definido pela aplicação associadas com a mensagem."
  remarks: "Fornece a propriedade de extensão para obter informações definido pela aplicação, como um objeto grande binário, que está associado a mensagem. É da responsabilidade do interpretar os conteúdos da propriedade de extensão de aplicação de receção.       Sempre que possível, devem incluir dados de mensagens no <xref:System.Messaging.Message.Body%2A>propriedade de mensagem em vez da propriedade de extensão.</xref:System.Messaging.Message.Body%2A>       Ao trabalhar com as filas externas, utilize a propriedade de extensão para especificar propriedades de mensagem que não existem na colocação de mensagens em fila.       Existe uma fila externa um colocação do sistema que não sejam de colocação de mensagens de Microsoft. Colocação de mensagens em fila comunica com essas filas através de uma aplicação de conector."
  syntax:
    content: public byte[] Extension { get; set; }
    return:
      type: System.Byte[]
      description: "Uma matriz de valores de bytes que fornece informações definido pela aplicação associadas com a mensagem. A predefinição é uma matriz de comprimento zero."
  overload: System.Messaging.Message.Extension*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade de extensão."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade de extensão é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.Formatter
  id: Formatter
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Formatter
  nameWithType: Message.Formatter
  fullName: System.Messaging.Message.Formatter
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o formatador utilizado para serializar um objeto para ou anular a serialização de um objeto de corpo da mensagem."
  remarks: "Utilize a propriedade formatador ao ler e escrever uma mensagem. Quando uma mensagem é enviada para a fila, o formatador serializa a <xref:System.Messaging.Message.Body%2A>propriedade para um fluxo que pode ser enviada para a fila de mensagens.</xref:System.Messaging.Message.Body%2A> Ao ler a partir de uma fila, o formatador deserializes os dados da mensagem para o <xref:System.Messaging.Message.Body%2A>propriedade.</xref:System.Messaging.Message.Body%2A>       A menos que escrever o conteúdo da mensagem diretamente para o <xref:System.Messaging.Message.BodyStream%2A>propriedade, defina a propriedade de formatador antes de enviar a mensagem.</xref:System.Messaging.Message.BodyStream%2A> Quando o <xref:System.Messaging.MessageQueue.Send%2A>método é chamado o <xref:System.Messaging.MessageQueue>instância, o corpo está a ser serializada utilizando o formatador contido na propriedade formatador.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> Se enviar a mensagem sem especificar um valor para a propriedade formatador, o formatador de predefinições para <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter>       O <xref:System.Messaging.XmlMessageFormatter>aproximadamente ligado está integrado, pelo que não é necessário ter o mesmo objeto de tipo no remetente e o recetor ao utilizar este formato.</xref:System.Messaging.XmlMessageFormatter> O <xref:System.Messaging.ActiveXMessageFormatter>e <xref:System.Messaging.BinaryMessageFormatter>serializar os dados para representação binária.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> O <xref:System.Messaging.ActiveXMessageFormatter>é utilizado ao enviar ou receber componentes COM.</xref:System.Messaging.ActiveXMessageFormatter>"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_2.vb)]"
  syntax:
    content: public System.Messaging.IMessageFormatter Formatter { get; set; }
    return:
      type: System.Messaging.IMessageFormatter
      description: "O <xref href=&quot;System.Messaging.IMessageFormatter&quot;> </xref> que produz um fluxo escrever ou ler a partir do corpo da mensagem. A predefinição é <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref>."
  overload: System.Messaging.Message.Formatter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade formatador é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.HashAlgorithm
  id: HashAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: System.Messaging.Message.HashAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o algoritmo de colocação de mensagens em fila utiliza para autenticar uma mensagem de hash ou criar uma assinatura digital de uma mensagem."
  remarks: "No computador de origem, a colocação de mensagens em fila utiliza o algoritmo de hashing ao criar uma assinatura digital de uma mensagem. O Gestor de filas de destino, em seguida, utiliza o algoritmo de hashing mesmo para autenticar a mensagem quando é recebido."
  syntax:
    content: public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Messaging.HashAlgorithm
      description: "Um do <xref href=&quot;System.Messaging.HashAlgorithm&quot;> </xref> valores de enumeração. Para o Windows XP, a predefinição é <xref uid=&quot;langword_csharp_SHA&quot; name=&quot;SHA&quot; href=&quot;&quot;> </xref>. Caso contrário, a predefinição é <xref uid=&quot;langword_csharp_MD5&quot; name=&quot;MD5&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.HashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade HashAlgorithm."
  platform:
  - net462
- uid: System.Messaging.Message.Id
  id: Id
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Id
  nameWithType: Message.Id
  fullName: System.Messaging.Message.Id
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém o identificador da mensagem."
  remarks: "Colocação de mensagens em fila gera um identificador de mensagem quando a mensagem é enviada. O identificador é composto de 20 bytes e inclui dois itens: a máquina <xref:System.Guid>do computador e um identificador exclusivo para a mensagem no computador.</xref:System.Guid> A combinação dos dois itens produz um identificador de mensagem que seja exclusivo na rede.       Mensagem de colocação gera identificadores de mensagem para todas as mensagens — incluindo mensagens de confirmação e relatório. Uma mensagem de confirmação, geralmente, é enviada pela colocação de mensagens em fila no reação a chegada ou falha de uma mensagem enviada, original. Pode encontrar o valor da propriedade de Id da mensagem original no <xref:System.Messaging.Message.CorrelationId%2A>propriedade de uma mensagem de confirmação.</xref:System.Messaging.Message.CorrelationId%2A>       Também pode utilizar a propriedade de Id quando enviar uma mensagem de resposta a uma fila de resposta. Para incluir o identificador da mensagem original numa mensagem de resposta, defina o <xref:System.Messaging.Message.CorrelationId%2A>propriedade da mensagem de resposta para a propriedade de Id da mensagem original.</xref:System.Messaging.Message.CorrelationId%2A> A aplicação ao ler a mensagem de resposta, em seguida, pode utilizar o identificador de correlação da mensagem de resposta para identificar a mensagem original."
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_19_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_19_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_19_1.vb)]"
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "Identificador exclusivo a mensagem, que é gerado pela colocação de mensagens em fila."
  overload: System.Messaging.Message.Id*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade de Id."
  platform:
  - net462
- uid: System.Messaging.Message.InfiniteTimeout
  id: InfiniteTimeout
  parent: System.Messaging.Message
  langs:
  - csharp
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: System.Messaging.Message.InfiniteTimeout
  type: Field
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Especifica não se existe nenhum limite de tempo."
  remarks: "<xref:System.Messaging.Message.TimeToBeReceived%2A>e <xref:System.Messaging.Message.TimeToReachQueue%2A>requerer um valor que especifica um tempo limite.</xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A> Para anterior, o tempo limite é o tempo máximo permitido para uma mensagem ser recebida da fila. Para esta última opção, o tempo limite é o tempo permitido para uma mensagem alcançar a fila. Em ambos os casos, pode especificar o tempo limite como um número de segundos ou utilize InfiniteTimeout para indicar que não existe nenhum limite de tempo."
  example:
  - "The following code example demonstrates the use of the InfiniteTimeout field.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static readonly TimeSpan InfiniteTimeout;
    return:
      type: System.TimeSpan
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.IsFirstInTransaction
  id: IsFirstInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: System.Messaging.Message.IsFirstInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém um valor que indica se a mensagem foi a primeira mensagem enviada de uma transação."
  remarks: "Aplicações recetoras utilizam a propriedade de IsFirstInTransaction para verificar se uma mensagem foi a primeira mensagem enviada de uma transação única para uma fila única.       Esta propriedade está disponível apenas com a colocação de mensagens em fila versão 2.0 e posterior.       Para verificar os limites de transação, pode utilizar a propriedade IsFirstInTransaction juntamente com duas outras propriedades: <xref:System.Messaging.Message.IsLastInTransaction%2A>e <xref:System.Messaging.Message.TransactionId%2A>.</xref:System.Messaging.Message.TransactionId%2A> </xref:System.Messaging.Message.IsLastInTransaction%2A> Utilize o anterior para verificar se uma mensagem foi a última mensagem enviada na transação e utilizar a última opção para obter o identificador da transação.       Se apenas uma mensagem é enviada de uma transação, o IsFirstInTransaction e <xref:System.Messaging.Message.IsLastInTransaction%2A>propriedades são definidas como `true`.</xref:System.Messaging.Message.IsLastInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's IsFirstInTransaction property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool IsFirstInTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a mensagem foi a primeira mensagem enviada de uma transação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.IsFirstInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade IsFirstInTransaction."
  platform:
  - net462
- uid: System.Messaging.Message.IsLastInTransaction
  id: IsLastInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: System.Messaging.Message.IsLastInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém um valor que indica se a mensagem foi a última mensagem enviada de uma transação."
  remarks: "Aplicações recetoras utilizam a propriedade de IsLastInTransaction para verificar se uma mensagem foi a última mensagem enviada de uma transação única para uma fila única.       Esta propriedade está disponível apenas com a colocação de mensagens em fila versão 2.0 e posterior.       Para verificar os limites de transação, pode utilizar a propriedade IsLastInTransaction juntamente com duas outras propriedades: <xref:System.Messaging.Message.IsFirstInTransaction%2A>e <xref:System.Messaging.Message.TransactionId%2A>.</xref:System.Messaging.Message.TransactionId%2A> </xref:System.Messaging.Message.IsFirstInTransaction%2A> Utilize o anterior para verificar se uma mensagem foi a primeira mensagem enviada na transação e utilizar a última opção para obter o identificador da transação.       Se apenas uma mensagem é enviada de uma transação, o <xref:System.Messaging.Message.IsFirstInTransaction%2A>e IsLastInTransaction propriedades são definidas como `true`.</xref:System.Messaging.Message.IsFirstInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's IsLastInTransaction property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool IsLastInTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a mensagem foi a última mensagem enviada de uma transação única; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.IsLastInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade IsLastInTransaction."
  platform:
  - net462
- uid: System.Messaging.Message.Label
  id: Label
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Label
  nameWithType: Message.Label
  fullName: System.Messaging.Message.Label
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define uma cadeia Unicode definido pela aplicação, que descreve a mensagem."
  remarks: "Pode utilizar um rótulo da mensagem para vários fins. Por exemplo, pode utilizá-lo para efeitos de apresentação ou seletivamente processar mensagens com base no valor de etiqueta. A etiqueta não precisa de ser exclusivo em toda as mensagens.       Fila de mensagens e a mensagem de etiquetas representam um valor definido pela aplicação que pode ajudar a identificam a fila ou a mensagem em termos de legível por humanos. É da responsabilidade da aplicação a interpretar os conteúdos de etiqueta, que não tem nenhum significado intrínseco para a aplicação de colocação de mensagens em fila."
  example:
  - "The following code example gets and sets the value of a message's Label property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string Label { get; set; }
    return:
      type: System.String
      description: "A etiqueta da mensagem. A predefinição é uma cadeia vazia (&quot;&quot;)."
  overload: System.Messaging.Message.Label*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade da etiqueta."
  platform:
  - net462
- uid: System.Messaging.Message.LookupId
  id: LookupId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: LookupId
  nameWithType: Message.LookupId
  fullName: System.Messaging.Message.LookupId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Introduzida no MSMQ 3.0. Obtém o identificador de pesquisa da mensagem."
  remarks: "A propriedade LookupId fornece acesso só de leitura ao identificador de pesquisa de uma mensagem. O identificador de pesquisa, introduzido no MSMQ 3.0, é um identificador de 64 bits que é gerado pela colocação de mensagens em fila e atribuído a cada mensagem quando a mensagem é colocada na fila. O identificador de pesquisa não é o mesmo que o identificador de mensagem que é gerado quando a mensagem é enviada.       Colocação de mensagens em fila gera um identificador de pesquisa para todas as mensagens que são colocados em qualquer fila, incluindo geradas pela aplicação de destino, administração e filas de relatório, bem como diário gerado pelo sistema, entregues, conector e filas de saída. Por outras palavras, isto inclui ambas as mensagens enviadas por aplicações de envio e a colocação de mensagens em fila. O identificador de pesquisa é exclusivo para a fila e não tem nenhum significado fora da fila.       Se é enviada uma mensagem para várias filas de destino ou se está armazenada uma cópia de uma mensagem num diário do computador ou diário da fila, cada cópia da mensagem tem da suas próprias identificador de pesquisa quando este é colocado na respetiva fila de correspondentes.       A propriedade LookupId pode apenas ser continue a ler as mensagens obtidas a partir de uma fila.       Um identificador de pesquisa é utilizado para ler uma mensagem específica da fila. Depois do identificador de pesquisa de uma mensagem é conhecido, a aplicação recetora pode chamar o <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>ou <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A>funcionar para aceder diretamente a essa mensagem e pré-visualizar ou obtê-lo a partir da fila, ao contrário de cursores que tem de iniciar o princípio da fila e navegue para o fim da fila, obter os identificadores de pesquisa de mensagens na fila é da responsabilidade da aplicação.</xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> </xref:System.Messaging.MessageQueue.PeekByLookupId%2A> Uma forma de obter os identificadores de pesquisa é criar um acionador para a fila de destino que invoca um componente que coloca em cache os identificadores de cada mensagem como estes são colocados em fila."
  syntax:
    content: public long LookupId { get; }
    return:
      type: System.Int64
      description: "Identificador de pesquisa a mensagem, que é gerado pela colocação de mensagens em fila e é exclusivo para a fila onde reside a mensagem."
  overload: System.Messaging.Message.LookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "MSMQ 3.0 não está instalado."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade LookupId."
  platform:
  - net462
- uid: System.Messaging.Message.MessageType
  id: MessageType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: MessageType
  nameWithType: Message.MessageType
  fullName: System.Messaging.Message.MessageType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: 'Gets the message type: <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Acknowledgment&quot; name=&quot;Acknowledgment&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Report&quot; name=&quot;Report&quot; href=&quot;&quot;></xref>.'
  remarks: "Colocação de mensagens normalmente define esta propriedade quando envia a mensagem. Uma mensagem de colocação de mensagens em fila pode ser um dos seguintes tipos:- `Normal`, que é o típica enviada uma mensagem de uma aplicação a uma fila ou devolveu uma mensagem de resposta à aplicação de envio.      - `Acknowledgement`, gerando a colocação de mensagens em fila sempre que a aplicação de envio solicita um. Por exemplo, a colocação de mensagens em fila de mensagens em fila pode gerar o positivos ou negativos mensagens para indicar que a mensagem original chegou ou foi lido. Colocação de mensagens devolve a mensagem de confirmação adequado para a fila de administração especificada pela aplicação emissora.      - `Report`, gerando a colocação de mensagens em fila sempre que uma fila de relatórios está definida na origem, Gestor de filas. Quando o rastreio está ativado, a colocação de mensagens em fila envia uma mensagem de relatório para a fila de colocação de mensagens em fila de relatórios sempre que a mensagem original entra ou sai de um servidor de colocação de mensagens em fila."
  example:
  - "The following code example displays the value of a message's MessageType property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageType MessageType { get; }
    return:
      type: System.Messaging.MessageType
      description: "Um dos valores MessageType."
  overload: System.Messaging.Message.MessageType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade MessageType."
  platform:
  - net462
- uid: System.Messaging.Message.Priority
  id: Priority
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Priority
  nameWithType: Message.Priority
  fullName: System.Messaging.Message.Priority
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define a prioridade da mensagem, que determina onde em fila a mensagem está colocada."
  remarks: "A propriedade de prioridade afeta a forma como a colocação de mensagens em fila processa a mensagem enquanto esta se encontra en route e assim que chegar ao destino. Mensagens de prioridade superior são dada preferência durante encaminhamento e introduzidas para a frente da fila de destino. As mensagens com a mesma prioridade são colocadas na fila de acordo com a respetiva hora da chegada.       Pode definir uma prioridade significativa apenas para mensagens não transacional. Colocação de mensagens em fila define automaticamente a prioridade de mensagens transacionais para `Lowest`, que faz com que a prioridade da mensagem transacional sejam ignoradas."
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_87_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_87_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_87_1.cs)]"
  syntax:
    content: public System.Messaging.MessagePriority Priority { get; set; }
    return:
      type: System.Messaging.MessagePriority
      description: "Um do <xref href=&quot;System.Messaging.MessagePriority&quot;> </xref> valores, que representam os níveis de prioridade de mensagens não transacional. A predefinição é <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.Priority*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade de prioridade."
  platform:
  - net462
- uid: System.Messaging.Message.Recoverable
  id: Recoverable
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: System.Messaging.Message.Recoverable
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define um valor que indica se a mensagem é garantida a ser entregue na eventualidade de ocorrer um problema de falha ou de rede do computador."
  remarks: "A propriedade recuperável indica se a entrega de uma mensagem é garantida — mesmo se um computador falhar enquanto a mensagem é en route para a fila de destino.       Se a entrega de uma mensagem é garantida, a mensagem é armazenada localmente em cada passo ao longo de rota, até que a mensagem é reencaminhada com êxito para o computador seguinte. Definir a propriedade recuperável como `true` podem afetar o débito.       Se a mensagem é transacional, automaticamente a colocação de mensagens em fila processa a mensagem como recuperáveis, independentemente do valor da propriedade recuperável."
  example:
  - "The following code example gets and sets the value of a message's Recoverable property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool Recoverable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a entrega da mensagem é garantida (através de guardar a mensagem para o disco ao rota en); <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se não tem a certeza de entrega. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.Recoverable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade recuperável."
  platform:
  - net462
- uid: System.Messaging.Message.ResponseQueue
  id: ResponseQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: System.Messaging.Message.ResponseQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define a fila que recebe mensagens de resposta geradas pela aplicação."
  remarks: "A propriedade ResponseQueue identifica a fila que recebe mensagens de resposta geradas pela aplicação, o qual a aplicação recetora devolve à aplicação de envio. A aplicação de envio especifica filas de resposta quando a aplicação envia as mensagens. Qualquer fila disponível pode ser especificada como uma fila de resposta.       As mensagens resultantes para a fila de resposta são específicas da aplicação. A aplicação tem de definir o conteúdo de mensagens, bem como a ação a efetuar após a receção de uma mensagem."
  example:
  - "The following code example gets and sets the value of a message's ResponseQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue ResponseQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "O <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> que a resposta geradas pela aplicação são devolvidas as mensagens. A predefinição é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.ResponseQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade ResponseQueue."
  platform:
  - net462
- uid: System.Messaging.Message.SecurityContext
  id: SecurityContext
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: System.Messaging.Message.SecurityContext
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o contexto de segurança de uma mensagem."
  syntax:
    content: public System.Messaging.SecurityContext SecurityContext { get; set; }
    return:
      type: System.Messaging.SecurityContext
      description: "A <xref href=&quot;System.Messaging.SecurityContext&quot;> </xref> objeto que contém o contexto de segurança de uma mensagem, se anteriormente tiver sido definida a propriedade; caso contrário, NULL."
  overload: System.Messaging.Message.SecurityContext*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.SenderCertificate
  id: SenderCertificate
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: System.Messaging.Message.SenderCertificate
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define o certificado de segurança utilizado para autenticar as mensagens."
  remarks: "A aplicação recetora utiliza a propriedade SenderCertificate quando a mensagem inclui um certificado de segurança externo.       Colocação de mensagens em fila pode autenticar uma mensagem com um certificado de segurança internas ou externas. Colocação de mensagens em fila fornece certificados internos, que são utilizados para verificar a integridade da mensagem. Uma autoridade de certificação fornece um certificado externo, o que pode aceder através da propriedade SenderCertificate da mensagem. Para além de permitir a colocação de mensagens em fila autenticar a mensagem, um certificado externo permite que a aplicação de receção verifique ainda mais o remetente. Um certificado interno não tem nenhum valor para uma aplicação recetora utilizável.       Um certificado externo tem de estar registado com o serviço de diretório do sistema a colocação de mensagens em fila. Um certificado externo contém informações sobre a autoridade de certificação, o utilizador de certificado, o período de validade do certificado, a chave pública do utilizador certificados e assinatura da autoridade de certificação."
  syntax:
    content: public byte[] SenderCertificate { get; set; }
    return:
      type: System.Byte[]
      description: "Uma matriz de valores de bytes que representa um certificado de segurança, a colocação de mensagens em fila utiliza para verificar o remetente da mensagem. A predefinição é uma matriz de comprimento zero."
  overload: System.Messaging.Message.SenderCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade SenderCertificate."
  platform:
  - net462
- uid: System.Messaging.Message.SenderId
  id: SenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderId
  nameWithType: Message.SenderId
  fullName: System.Messaging.Message.SenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém o identificador do utilizador envio."
  remarks: "Se o <xref:System.Messaging.Message.AttachSenderId%2A>propriedade é `false`, o identificador do remetente especificado na propriedade SenderId não está anexado à mensagem quando é enviado.</xref:System.Messaging.Message.AttachSenderId%2A> Isto indica que a colocação de mensagens em fila que o remetente não deverá ser validado quando envia a mensagem para a fila de destino. Se o <xref:System.Messaging.Message.AttachSenderId%2A>propriedade é `true`, o valor da propriedade SenderId é fidedigno apenas se a mensagem foi autenticada.</xref:System.Messaging.Message.AttachSenderId%2A> Utilize o <xref:System.Messaging.Message.Authenticated%2A>propriedade em conjunto com a propriedade SenderId para verificar os direitos de acesso do remetente.</xref:System.Messaging.Message.Authenticated%2A>       Uma aplicação é uma aplicação que utiliza um servidor do conector para fornecer comunicação entre a colocação de mensagens em fila e outros sistemas de colocação. Colocação de mensagens requer aplicações de conector para fornecer a identificação do remetente. Tem de definir o <xref:System.Messaging.Message.ConnectorType%2A>propriedade ao enviar uma mensagem através de uma aplicação de conector.</xref:System.Messaging.Message.ConnectorType%2A>"
  syntax:
    content: public byte[] SenderId { get; }
    return:
      type: System.Byte[]
      description: "Uma matriz de valores de bytes que identifica o remetente. O Gestor de filas recetor utiliza o identificador quando efetua a autenticação de mensagem para validar o remetente da mensagem e direitos de acesso do remetente para a fila."
  overload: System.Messaging.Message.SenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade SenderId."
  platform:
  - net462
- uid: System.Messaging.Message.SenderVersion
  id: SenderVersion
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: System.Messaging.Message.SenderVersion
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém a versão da colocação de mensagens utilizado para enviar a mensagem."
  remarks: "A propriedade SenderVersion é importante para determinadas funcionalidades. Por exemplo, o processamento de transações é suportado apenas por mensagem de colocação 2.0 e versões posteriores, e assinaturas digitais são utilizadas para autenticar as mensagens enviadas por MSMQ 1.0.       O Gestor de fila de envio define a propriedade SenderVersion quando a mensagem é enviada."
  example:
  - "The following code example displays the value of a message's SenderVersion property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public long SenderVersion { get; }
    return:
      type: System.Int64
      description: "A versão da colocação de mensagens de utilizada para enviar a mensagem."
  overload: System.Messaging.Message.SenderVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade SenderVersion."
  platform:
  - net462
- uid: System.Messaging.Message.SentTime
  id: SentTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SentTime
  nameWithType: Message.SentTime
  fullName: System.Messaging.Message.SentTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém a data e hora no computador de enviar a mensagem foi enviada pelo Gestor de fila de origem."
  remarks: "A propriedade SentTime é ajustada para a hora local do computador em que esta instância do <xref:System.Messaging.Message>classe foi criada.</xref:System.Messaging.Message> Este fuso horário pode ser diferente das filas de origem e de destino."
  example:
  - "The following code example displays the value of a message's SentTime property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public DateTime SentTime { get; }
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>que representa o tempo que a mensagem foi enviada.</xref:System.DateTime>"
  overload: System.Messaging.Message.SentTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade SentTime."
  platform:
  - net462
- uid: System.Messaging.Message.SourceMachine
  id: SourceMachine
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: System.Messaging.Message.SourceMachine
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém o computador a partir da qual a mensagem teve origem."
  remarks: "O formato da propriedade SourceMachine não inclui precedente duas barras (\\\\\\\\). Por exemplo, `myServer` é um SourceMachine válido."
  example:
  - "The following code example displays the value of a message's SourceMachine property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string SourceMachine { get; }
    return:
      type: System.String
      description: "O nome do computador a partir da qual a mensagem foi enviada."
  overload: System.Messaging.Message.SourceMachine*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade SourceMachine."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Não foi possível aceder ao serviço de informações ou diretório o computador."
  platform:
  - net462
- uid: System.Messaging.Message.TimeToBeReceived
  id: TimeToBeReceived
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: System.Messaging.Message.TimeToBeReceived
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define a quantidade máxima de tempo para a mensagem ser recebida da fila de destino."
  remarks: "A propriedade TimeToBeReceived Especifica o tempo total de uma mensagem enviada ser recebida da fila de destino. O limite de tempo inclui o tempo gasto a obter a fila de destino e o tempo gasto a aguardar na fila de espera antes da mensagem é recebida.      > [!CAUTION] > Quando utilizar computadores de cliente dependente, lembre-se de que o relógio no computador cliente está sincronizado com o relógio no servidor que está a executar a colocação de mensagens em fila. Caso contrário, um comportamento imprevisível poderá originar quando uma mensagem a enviar cuja propriedade TimeToBeReceived não <xref:System.Messaging.Message.InfiniteTimeout>.</xref:System.Messaging.Message.InfiniteTimeout>       Se o intervalo especificado pela propriedade TimeToBeReceived expirar antes da mensagem é removida da fila, a colocação de mensagens em fila rejeita a mensagem de uma das duas formas. Se a mensagem <xref:System.Messaging.Message.UseDeadLetterQueue%2A>propriedade é `true`, a mensagem é enviada para a fila de entregues.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Se <xref:System.Messaging.Message.UseDeadLetterQueue%2A>é `false`, a mensagem é ignorada.</xref:System.Messaging.Message.UseDeadLetterQueue%2A>       Pode definir a mensagem <xref:System.Messaging.Message.AcknowledgeType%2A>propriedade para pedir que a colocação de mensagens em fila enviar uma mensagem de confirmação negativa de volta para a aplicação enviar se a mensagem não foi obtida antes de expira o temporizador.</xref:System.Messaging.Message.AcknowledgeType%2A>       Se o valor especificado pela propriedade TimeToBeReceived é inferior ao valor especificado pelo <xref:System.Messaging.Message.TimeToReachQueue%2A>propriedade, TimeToBeReceived tem precedência.</xref:System.Messaging.Message.TimeToReachQueue%2A>       Quando são enviadas mensagens de vários numa única transação, a colocação de mensagens em fila utiliza a propriedade TimeToBeReceived a primeira mensagem."
  example:
  - "The following code example gets and sets the value of a message's TimeToBeReceived property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public TimeSpan TimeToBeReceived { get; set; }
    return:
      type: System.TimeSpan
      description: "O tempo total de uma mensagem enviada ser recebida da fila de destino. A predefinição é <xref href=&quot;System.Messaging.Message.InfiniteTimeout&quot;> </xref>."
  overload: System.Messaging.Message.TimeToBeReceived*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade TimeToBeReceived."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor especificado para TimeToBeReceived é inválido."
  platform:
  - net462
- uid: System.Messaging.Message.TimeToReachQueue
  id: TimeToReachQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: System.Messaging.Message.TimeToReachQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define a quantidade máxima de tempo para a mensagem alcançar a fila."
  remarks: "Se o intervalo especificado pela propriedade TimeToReachQueue expirar antes da mensagem chega ao destino, a colocação de mensagens em fila rejeita a mensagem de uma das duas formas. Se a mensagem <xref:System.Messaging.Message.UseDeadLetterQueue%2A>propriedade é `true`, a mensagem é enviada para a fila de entregues.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Se <xref:System.Messaging.Message.UseDeadLetterQueue%2A>é `false`, a mensagem é ignorada pode definir da mensagem <xref:System.Messaging.Message.AcknowledgeType%2A>propriedade para pedir que a colocação de mensagens em fila enviar uma mensagem de confirmação negativa de volta para a aplicação enviar se a mensagem não chegam antes de expira o temporizador.</xref:System.Messaging.Message.AcknowledgeType%2A> </xref:System.Messaging.Message.UseDeadLetterQueue%2A>       Se a propriedade TimeToReachQueue estiver definida como 0 segundos, a colocação de mensagens em fila tenta uma vez enviar a mensagem para o destino — se a fila está a aguardar a mensagem. Se a fila é local, a mensagem sempre atinja o.       Se o valor especificado pela propriedade TimeToReachQueue é superior ao valor especificado pelo <xref:System.Messaging.Message.TimeToBeReceived%2A>propriedade, <xref:System.Messaging.Message.TimeToBeReceived%2A>tem precedência.</xref:System.Messaging.Message.TimeToBeReceived%2A> </xref:System.Messaging.Message.TimeToBeReceived%2A>       Quando são enviadas mensagens de vários numa única transação, a colocação de mensagens em fila utiliza a propriedade TimeToReachQueue a primeira mensagem."
  example:
  - "The following code example gets and sets the value of a message's TimeToReachQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public TimeSpan TimeToReachQueue { get; set; }
    return:
      type: System.TimeSpan
      description: "O limite de tempo para a mensagem alcançar a fila de destino, a partir da hora da mensagem é enviada. A predefinição é <xref href=&quot;System.Messaging.Message.InfiniteTimeout&quot;> </xref>."
  overload: System.Messaging.Message.TimeToReachQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade TimeToReachQueue."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor especificado para TimeToReachQueue é inválido. -Pode representar um número negativo."
  platform:
  - net462
- uid: System.Messaging.Message.TransactionId
  id: TransactionId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: System.Messaging.Message.TransactionId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém o identificador de transação de que a mensagem foi a parte."
  remarks: "Aplicações recetoras utilizam a propriedade TransactionId para verificar que foi enviada uma mensagem como parte de uma transação específica. O identificador da transação contém o identificador do computador envio seguido de um número de sequência de transação de 4 bytes (primeiro 16 bits).       Esta propriedade está disponível apenas para a colocação de mensagens em fila versão 2.0 e posterior.       Os identificadores de transação não são garantidos que seja exclusivo, uma vez que os números de sequência de transação não sejam persistentes e estes recomeçar novamente em 2 <sup>20</sup>. Colocação de mensagens em fila garante que apenas que transações subsequentes terão os números de sequência de transação diferente.       Pode utilizar a propriedade TransactionId juntamente com o <xref:System.Messaging.Message.IsFirstInTransaction%2A>e <xref:System.Messaging.Message.IsLastInTransaction%2A>Propriedades para verificar os limites de transação.</xref:System.Messaging.Message.IsLastInTransaction%2A> </xref:System.Messaging.Message.IsFirstInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's TransactionId property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string TransactionId { get; }
    return:
      type: System.String
      description: "O identificador para a transação associada a mensagem."
  overload: System.Messaging.Message.TransactionId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade TransactionId."
  platform:
  - net462
- uid: System.Messaging.Message.TransactionStatusQueue
  id: TransactionStatusQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: System.Messaging.Message.TransactionStatusQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém a fila de estado de transação no computador de origem."
  remarks: "A propriedade TransactionStatusQueue identifica a fila transacional no computador de origem que recebe em que as confirmações de recibo de leitura a partir de aplicações de conector. A propriedade define a colocação de mensagens e aplicações de conector, utilize a propriedade durante a obtenção de mensagens transacionais enviadas para filas externas.       Existe uma fila externa um colocação do sistema que não sejam de colocação de mensagens de Microsoft. Colocação de mensagens em fila comunica com essas filas através de uma aplicação de conector.       A aplicação do conector pode utilizar a fila de estado de transação para enviar mensagens de confirmação novamente à aplicação de envio. A fila de estado de transação deve receber estas em que as confirmações, mesmo que a aplicação de envio não pedir outras em que as confirmações."
  example:
  - "The following code example displays the value of a message's TransactionStatusQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "A fila de estado de transação no computador de origem, o que é utilizada para enviar mensagens de confirmação novamente a aplicação emissora. A predefinição é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.TransactionStatusQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A mensagem não foi enviada. Esta propriedade só pode ser lidas em obtidos a partir de uma fila de mensagens.       - ou - a fila de mensagens está filtrada para ignorar a propriedade TransactionStatusQueue."
  platform:
  - net462
- uid: System.Messaging.Message.UseAuthentication
  id: UseAuthentication
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: System.Messaging.Message.UseAuthentication
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define um valor que indica se a mensagem foi (ou tem de ser) autenticada antes de a ser enviados."
  remarks: "A propriedade UseAuthentication Especifica se a mensagem tem de ser autenticado. Se a aplicação enviar pedidos de autenticação, a colocação de mensagens em fila cria uma assinatura digital e utiliza-o para iniciar sessão a mensagem de envio e autenticar a mensagem quando é recebido.       Se for UseAuthentication `false` e é enviada uma mensagem para uma fila que aceita apenas mensagens autenticadas, a mensagem será rejeitada quando atingir a fila.       Não é possível determinar se uma mensagem de falha de autenticação ao observar as respetivas propriedades. Colocação de mensagens em fila elimina estas mensagens antes de estes são fornecidas para a fila. No entanto, pode pedir que ser enviada uma mensagem de confirmação se uma falha de entrega impede que uma mensagem que chegam numa fila."
  syntax:
    content: public bool UseAuthentication { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a aplicação enviar pedido de autenticação para a mensagem; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseAuthentication*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade UseAuthentication."
  platform:
  - net462
- uid: System.Messaging.Message.UseDeadLetterQueue
  id: UseDeadLetterQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: System.Messaging.Message.UseDeadLetterQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define um valor que indica se uma cópia da mensagem que não foi possível entregar deve ser enviada para uma fila entregues."
  remarks: "O <xref:System.Messaging.Message.UseJournalQueue%2A>e propriedades de UseDeadLetterQueue especificar a forma como a colocação de mensagens em fila regista uma mensagem.</xref:System.Messaging.Message.UseJournalQueue%2A> Se for UseDeadLetterQueue `true`, falha de entrega (de uma mensagem não transacional), faz com que a mensagem a ser enviadas para a fila de entregues não transacional no computador que não foi possível entregar a mensagem. Falha de entrega pode ser causada por um temporizador de mensagem prestes a expirar, por exemplo.       No caso de falha de entrega de uma mensagem transacional, a colocação de mensagens envia a mensagem à fila entregues transacional na máquina de origem em todos os casos negativos e em dúvida.       Quando armazena mensagens numa fila entregues, deve limpar a fila periodicamente para remover as mensagens que já não são necessárias. Armazenados na contagem de filas entregues contra a quota de tamanho para o computador em que reside a fila de mensagens. A quota de computador está definida pelo administrador e refere-se ao tamanho atribuído para armazenar mensagens no computador de todo, não apenas numa única fila.       Não crie um diário de alterações ou a fila de mensagens entregues. Estes são ambas as filas de sistema que gera a colocação de mensagens em fila."
  example:
  - "The following code example gets and sets the value of a message's UseDeadLetterQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseDeadLetterQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a falha de entrega de mensagens deve resultar numa cópia da mensagem a ser enviada para uma fila entregues; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseDeadLetterQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade UseDeadLetterQueue."
  platform:
  - net462
- uid: System.Messaging.Message.UseEncryption
  id: UseEncryption
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: System.Messaging.Message.UseEncryption
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define um valor que indica se deve tornar a mensagem privada."
  remarks: "Se uma mensagem privada, o corpo é encriptado antes que seja enviado e desencriptado quando é recebido. Para enviar uma mensagem privada, a aplicação de envio tem de especificar se a encriptação utilizado e, opcionalmente, o algoritmo de encriptação.       Quando enviar mensagens privadas, a aplicação não tem de efetuar a encriptação de mensagens. Colocação de mensagens em fila pode encriptar o corpo da mensagem para si se a aplicação está a enviar mensagens dentro de uma empresa do Microsoft Windows 2000, que tem acesso para o serviço de diretório. Quando receber mensagens privadas, o Gestor de filas recetor desencripta sempre o corpo da mensagem."
  example:
  - "The following code example gets and sets the value of a message's UseEncryption property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseEncryption { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para exigir a colocação de mensagens em fila encriptar a mensagem; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseEncryption*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade UseEncryption."
  platform:
  - net462
- uid: System.Messaging.Message.UseJournalQueue
  id: UseJournalQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: System.Messaging.Message.UseJournalQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define um valor que indica se uma cópia da mensagem deve ser mantida num diário do computador no computador de origem."
  remarks: "O UseJournalQueue e <xref:System.Messaging.Message.UseDeadLetterQueue%2A>Propriedades de especificar a forma como a colocação de mensagens em fila regista uma mensagem.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Se for UseJournalQueue `true`, em seguida, uma cópia é mantida no diário de computador no computador de origem em cada passo é transmitida a uma mensagem.       A mensagem enviada apenas é copiada para a fila de diário de alterações, se a fila de destino estiver num computador remoto. Se o destino no computador local, a mensagem é enviada diretamente para a fila; Existem não existem passos intermédios para exigir o registo em diário.       Quando armazena mensagens numa fila de diário de alterações, desmarque a fila periodicamente para remover as mensagens que já não são necessárias. Armazenados na contagem de filas do diário de alterações em relação a quota para o computador em que reside a fila de mensagens. (A quota de computador está definida pelo administrador).       Não crie um diário de alterações ou a fila de mensagens entregues. Estes são ambas as filas de sistema que gera a colocação de mensagens em fila."
  example:
  - "The following code example gets and sets the value of a message's UseJournalQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseJournalQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para exigir que uma cópia de uma mensagem seja mantida diário do computador do computador de origem após a mensagem foi com êxito transmitida (a partir do computador de origem para o servidor seguinte); caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseJournalQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade UseJournalQueue."
  platform:
  - net462
- uid: System.Messaging.Message.UseTracing
  id: UseTracing
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: System.Messaging.Message.UseTracing
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém ou define um valor que indica se uma mensagem de rastreio são transmitidos para a respetiva fila de destino."
  remarks: "A propriedade UseTracing Especifica se pretende controlar a rota de uma mensagem são transmitidos para a respetiva fila de destino. Se `true`, é enviada uma mensagem de relatório (gerada pela colocação de mensagens em fila) para uma fila de relatórios sempre que a mensagem passa através de um servidor de encaminhamento de colocação de mensagens em fila. A fila de relatórios é especificada pela origem de Gestor de filas. Filas de relatório não estão limitadas a mensagens de relatório geradas pela colocação de mensagens; as mensagens geradas pela aplicação também podem ser enviadas para as filas do relatório.       Utilizar o rastreio envolve a configuração do Active Directory e a especificação de uma fila de relatórios para a empresa de &quot; Colocação de mensagens em fila. O administrador configura estas definições."
  example:
  - "The following code example gets and sets the value of a message's UseTracing property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseTracing { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se cada passo intermédio efetuado en route da mensagem original para a fila de destino gera um relatório para serem enviadas a fila de relatórios do sistema; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseTracing*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A fila de mensagens está filtrada para ignorar a propriedade UseTracing."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.Message.#ctor
  parent: System.Messaging.Message
  isExternal: false
  name: Message()
  nameWithType: Message.Message()
  fullName: System.Messaging.Message.Message()
- uid: System.Messaging.Message.#ctor(System.Object)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: System.Messaging.Message.Message(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object,IMessageFormatter)
  nameWithType: Message.Message(Object,IMessageFormatter)
  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)
- uid: System.Messaging.IMessageFormatter
  parent: System.Messaging
  isExternal: false
  name: IMessageFormatter
  nameWithType: IMessageFormatter
  fullName: System.Messaging.IMessageFormatter
- uid: System.Messaging.Message.AcknowledgeType
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: System.Messaging.Message.AcknowledgeType
- uid: System.Messaging.AcknowledgeTypes
  parent: System.Messaging
  isExternal: false
  name: AcknowledgeTypes
  nameWithType: AcknowledgeTypes
  fullName: System.Messaging.AcknowledgeTypes
- uid: System.Messaging.Message.Acknowledgment
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: System.Messaging.Message.Acknowledgment
- uid: System.Messaging.Acknowledgment
  parent: System.Messaging
  isExternal: false
  name: Acknowledgment
  nameWithType: Acknowledgment
  fullName: System.Messaging.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: System.Messaging.Message.AdministrationQueue
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.Message.AppSpecific
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: System.Messaging.Message.AppSpecific
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Messaging.Message.ArrivedTime
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: System.Messaging.Message.ArrivedTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Messaging.Message.AttachSenderId
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: System.Messaging.Message.AttachSenderId
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message.Authenticated
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: System.Messaging.Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: System.Messaging.Message.AuthenticationProviderName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Messaging.Message.AuthenticationProviderType
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: System.Messaging.Message.AuthenticationProviderType
- uid: System.Messaging.CryptographicProviderType
  parent: System.Messaging
  isExternal: false
  name: CryptographicProviderType
  nameWithType: CryptographicProviderType
  fullName: System.Messaging.CryptographicProviderType
- uid: System.Messaging.Message.Body
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
  fullName: System.Messaging.Message.Body
- uid: System.Messaging.Message.BodyStream
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: System.Messaging.Message.BodyStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Messaging.Message.BodyType
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
  fullName: System.Messaging.Message.BodyType
- uid: System.Messaging.Message.ConnectorType
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: System.Messaging.Message.ConnectorType
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Messaging.Message.CorrelationId
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: System.Messaging.Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: System.Messaging.Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: System.Messaging.Message.DestinationSymmetricKey
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.Message.DigitalSignature
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: System.Messaging.Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: System.Messaging.Message.EncryptionAlgorithm
- uid: System.Messaging.EncryptionAlgorithm
  parent: System.Messaging
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: EncryptionAlgorithm
  fullName: System.Messaging.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
  fullName: System.Messaging.Message.Extension
- uid: System.Messaging.Message.Formatter
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
  fullName: System.Messaging.Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: System.Messaging.Message.HashAlgorithm
- uid: System.Messaging.HashAlgorithm
  parent: System.Messaging
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Messaging.HashAlgorithm
- uid: System.Messaging.Message.Id
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
  fullName: System.Messaging.Message.Id
- uid: System.Messaging.Message.InfiniteTimeout
  parent: System.Messaging.Message
  isExternal: false
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: System.Messaging.Message.InfiniteTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.Message.IsFirstInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: System.Messaging.Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: System.Messaging.Message.IsLastInTransaction
- uid: System.Messaging.Message.Label
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
  fullName: System.Messaging.Message.Label
- uid: System.Messaging.Message.LookupId
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
  fullName: System.Messaging.Message.LookupId
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Messaging.Message.MessageType
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
  fullName: System.Messaging.Message.MessageType
- uid: System.Messaging.MessageType
  parent: System.Messaging
  isExternal: false
  name: MessageType
  nameWithType: MessageType
  fullName: System.Messaging.MessageType
- uid: System.Messaging.Message.Priority
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
  fullName: System.Messaging.Message.Priority
- uid: System.Messaging.MessagePriority
  parent: System.Messaging
  isExternal: false
  name: MessagePriority
  nameWithType: MessagePriority
  fullName: System.Messaging.MessagePriority
- uid: System.Messaging.Message.Recoverable
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: System.Messaging.Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: System.Messaging.Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: System.Messaging.Message.SecurityContext
- uid: System.Messaging.SecurityContext
  parent: System.Messaging
  isExternal: false
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Messaging.SecurityContext
- uid: System.Messaging.Message.SenderCertificate
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: System.Messaging.Message.SenderCertificate
- uid: System.Messaging.Message.SenderId
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
  fullName: System.Messaging.Message.SenderId
- uid: System.Messaging.Message.SenderVersion
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: System.Messaging.Message.SenderVersion
- uid: System.Messaging.Message.SentTime
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
  fullName: System.Messaging.Message.SentTime
- uid: System.Messaging.Message.SourceMachine
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: System.Messaging.Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: System.Messaging.Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: System.Messaging.Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: System.Messaging.Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: System.Messaging.Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: System.Messaging.Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: System.Messaging.Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: System.Messaging.Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: System.Messaging.Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: System.Messaging.Message.UseTracing
- uid: System.Messaging.Message.#ctor*
  parent: System.Messaging.Message
  isExternal: false
  name: Message
  nameWithType: Message.Message
- uid: System.Messaging.Message.AcknowledgeType*
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
- uid: System.Messaging.Message.Acknowledgment*
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
- uid: System.Messaging.Message.AppSpecific*
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
- uid: System.Messaging.Message.ArrivedTime*
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
- uid: System.Messaging.Message.AttachSenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
- uid: System.Messaging.Message.Authenticated*
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
- uid: System.Messaging.Message.AuthenticationProviderType*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
- uid: System.Messaging.Message.Body*
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
- uid: System.Messaging.Message.BodyStream*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
- uid: System.Messaging.Message.BodyType*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
- uid: System.Messaging.Message.ConnectorType*
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
- uid: System.Messaging.Message.CorrelationId*
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
- uid: System.Messaging.Message.DigitalSignature*
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension*
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
- uid: System.Messaging.Message.Formatter*
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
- uid: System.Messaging.Message.Id*
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
- uid: System.Messaging.Message.IsFirstInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
- uid: System.Messaging.Message.Label*
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
- uid: System.Messaging.Message.LookupId*
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
- uid: System.Messaging.Message.MessageType*
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
- uid: System.Messaging.Message.Priority*
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
- uid: System.Messaging.Message.Recoverable*
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext*
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
- uid: System.Messaging.Message.SenderCertificate*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
- uid: System.Messaging.Message.SenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
- uid: System.Messaging.Message.SenderVersion*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
- uid: System.Messaging.Message.SentTime*
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
- uid: System.Messaging.Message.SourceMachine*
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication*
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption*
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing*
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
