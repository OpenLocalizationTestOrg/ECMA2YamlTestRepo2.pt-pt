### YamlMime:ManagedReference
items:
- uid: System.Activities.Statements.TerminateWorkflow
  id: TerminateWorkflow
  children:
  - System.Activities.Statements.TerminateWorkflow.#ctor
  - System.Activities.Statements.TerminateWorkflow.CacheMetadata(System.Activities.NativeActivityMetadata)
  - System.Activities.Statements.TerminateWorkflow.Exception
  - System.Activities.Statements.TerminateWorkflow.Execute(System.Activities.NativeActivityContext)
  - System.Activities.Statements.TerminateWorkflow.Reason
  langs:
  - csharp
  name: TerminateWorkflow
  nameWithType: TerminateWorkflow
  fullName: System.Activities.Statements.TerminateWorkflow
  type: Class
  summary: "Termina a instância de fluxo de trabalho em execução, gera o <xref:System.Activities.WorkflowApplication.Completed*>eventos no anfitrião e informações de erro de relatórios.</xref:System.Activities.WorkflowApplication.Completed*> Depois do fluxo de trabalho foi terminado, não é possível retomá-lo."
  syntax:
    content: 'public sealed class TerminateWorkflow : System.Activities.NativeActivity'
  inheritance:
  - System.Object
  - System.Activities.Activity
  - System.Activities.NativeActivity
  implements: []
  inheritedMembers:
  - System.Activities.Activity.CacheId
  - System.Activities.Activity.Constraints
  - System.Activities.Activity.DisplayName
  - System.Activities.Activity.Id
  - System.Activities.Activity.ShouldSerializeDisplayName
  - System.Activities.Activity.ToString
  - System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)
  - System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)
  - System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)
  - System.Activities.NativeActivity.CanInduceIdle
  - System.Activities.NativeActivity.Implementation
  - System.Activities.NativeActivity.ImplementationVersion
  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  platform:
  - net462
- uid: System.Activities.Statements.TerminateWorkflow.#ctor
  id: '#ctor'
  parent: System.Activities.Statements.TerminateWorkflow
  langs:
  - csharp
  name: TerminateWorkflow()
  nameWithType: TerminateWorkflow.TerminateWorkflow()
  fullName: System.Activities.Statements.TerminateWorkflow.TerminateWorkflow()
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "Cria uma nova instância do <xref href=&quot;System.Activities.Statements.TerminateWorkflow&quot;> </xref> classe."
  syntax:
    content: public TerminateWorkflow ();
    parameters: []
  overload: System.Activities.Statements.TerminateWorkflow.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.TerminateWorkflow.CacheMetadata(System.Activities.NativeActivityMetadata)
  id: CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.Activities.Statements.TerminateWorkflow
  langs:
  - csharp
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: TerminateWorkflow.CacheMetadata(NativeActivityMetadata)
  fullName: System.Activities.Statements.TerminateWorkflow.CacheMetadata(NativeActivityMetadata)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  syntax:
    content: protected override void CacheMetadata (System.Activities.NativeActivityMetadata metadata);
    parameters:
    - id: metadata
      type: System.Activities.NativeActivityMetadata
      description: "A adicionar."
  overload: System.Activities.Statements.TerminateWorkflow.CacheMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.TerminateWorkflow.Exception
  id: Exception
  parent: System.Activities.Statements.TerminateWorkflow
  langs:
  - csharp
  name: Exception
  nameWithType: TerminateWorkflow.Exception
  fullName: System.Activities.Statements.TerminateWorkflow.Exception
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "Obtém ou define a exceção que provoked a terminação de instância."
  remarks: "A exceção que é transmitida ao <xref:System.Activities.WorkflowApplication.Terminate%2A>é um <xref:System.Activities.WorkflowApplicationTerminatedException>se apenas <xref:System.Activities.Statements.TerminateWorkflow.Reason%2A>está definido.</xref:System.Activities.Statements.TerminateWorkflow.Reason%2A> </xref:System.Activities.WorkflowApplicationTerminatedException> </xref:System.Activities.WorkflowApplication.Terminate%2A> Se apenas a exceção é definida, que exceção é passada para <xref:System.Activities.WorkflowApplication.Terminate%2A>.</xref:System.Activities.WorkflowApplication.Terminate%2A> Se ambos os <xref:System.Activities.Statements.TerminateWorkflow.Reason%2A>e exceção são configuradas, um <xref:System.Activities.WorkflowApplicationTerminatedException>é passada com especificado <xref:System.Activities.Statements.TerminateWorkflow.Reason%2A>, e exceção é definida como a exceção <xref:System.Exception.InnerException%2A>propriedade.</xref:System.Exception.InnerException%2A> </xref:System.Activities.Statements.TerminateWorkflow.Reason%2A> </xref:System.Activities.WorkflowApplicationTerminatedException> </xref:System.Activities.Statements.TerminateWorkflow.Reason%2A> Se nenhum dos dois estiver definido, uma predefinição <xref:System.Activities.WorkflowApplicationTerminatedException>é criado.</xref:System.Activities.WorkflowApplicationTerminatedException>"
  syntax:
    content: public System.Activities.InArgument<Exception> Exception { get; set; }
    return:
      type: System.Activities.InArgument{System.Exception}
      description: "A exceção."
  overload: System.Activities.Statements.TerminateWorkflow.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.TerminateWorkflow.Execute(System.Activities.NativeActivityContext)
  id: Execute(System.Activities.NativeActivityContext)
  parent: System.Activities.Statements.TerminateWorkflow
  langs:
  - csharp
  name: Execute(NativeActivityContext)
  nameWithType: TerminateWorkflow.Execute(NativeActivityContext)
  fullName: System.Activities.Statements.TerminateWorkflow.Execute(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  syntax:
    content: protected override void Execute (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "A adicionar."
  overload: System.Activities.Statements.TerminateWorkflow.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.TerminateWorkflow.Reason
  id: Reason
  parent: System.Activities.Statements.TerminateWorkflow
  langs:
  - csharp
  name: Reason
  nameWithType: TerminateWorkflow.Reason
  fullName: System.Activities.Statements.TerminateWorkflow.Reason
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "Uma cadeia de entrada do argumento com o motivo para a terminação de instância de fluxo de trabalho."
  remarks: "A exceção que é transmitida ao <xref:System.Activities.WorkflowApplication.Terminate%2A>é um <xref:System.Activities.WorkflowApplicationTerminatedException>se apenas a razão está definida.</xref:System.Activities.WorkflowApplicationTerminatedException> </xref:System.Activities.WorkflowApplication.Terminate%2A> Se apenas <xref:System.Activities.Statements.TerminateWorkflow.Exception%2A>estiver definido, que a exceção é passada para <xref:System.Activities.WorkflowApplication.Terminate%2A>.</xref:System.Activities.WorkflowApplication.Terminate%2A> </xref:System.Activities.Statements.TerminateWorkflow.Exception%2A> Se ambos pelo motivo e <xref:System.Activities.Statements.TerminateWorkflow.Exception%2A>estiver definida, uma <xref:System.Activities.WorkflowApplicationTerminatedException>seja passado com o motivo especificado, e <xref:System.Activities.Statements.TerminateWorkflow.Exception%2A>está definido como a exceção <xref:System.Exception.InnerException%2A>propriedade.</xref:System.Exception.InnerException%2A> </xref:System.Activities.Statements.TerminateWorkflow.Exception%2A> </xref:System.Activities.WorkflowApplicationTerminatedException> </xref:System.Activities.Statements.TerminateWorkflow.Exception%2A> Se nenhum dos dois estiver definido, uma predefinição <xref:System.Activities.WorkflowApplicationTerminatedException>é criado.</xref:System.Activities.WorkflowApplicationTerminatedException>"
  syntax:
    content: public System.Activities.InArgument<string> Reason { get; set; }
    return:
      type: System.Activities.InArgument{System.String}
      description: "O motivo para a terminação de fluxo de trabalho."
  overload: System.Activities.Statements.TerminateWorkflow.Reason*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.NativeActivity
  isExternal: false
  name: System.Activities.NativeActivity
- uid: System.Activities.Statements.TerminateWorkflow.#ctor
  parent: System.Activities.Statements.TerminateWorkflow
  isExternal: false
  name: TerminateWorkflow()
  nameWithType: TerminateWorkflow.TerminateWorkflow()
  fullName: System.Activities.Statements.TerminateWorkflow.TerminateWorkflow()
- uid: System.Activities.Statements.TerminateWorkflow.CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.Activities.Statements.TerminateWorkflow
  isExternal: false
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: TerminateWorkflow.CacheMetadata(NativeActivityMetadata)
  fullName: System.Activities.Statements.TerminateWorkflow.CacheMetadata(NativeActivityMetadata)
- uid: System.Activities.NativeActivityMetadata
  parent: System.Activities
  isExternal: false
  name: NativeActivityMetadata
  nameWithType: NativeActivityMetadata
  fullName: System.Activities.NativeActivityMetadata
- uid: System.Activities.Statements.TerminateWorkflow.Exception
  parent: System.Activities.Statements.TerminateWorkflow
  isExternal: false
  name: Exception
  nameWithType: TerminateWorkflow.Exception
  fullName: System.Activities.Statements.TerminateWorkflow.Exception
- uid: System.Activities.InArgument{System.Exception}
  parent: System.Activities
  isExternal: false
  name: InArgument<Exception>
  nameWithType: InArgument<Exception>
  fullName: System.Activities.InArgument<System.Exception>
  spec.csharp:
  - uid: System.Activities.InArgument`1
    name: InArgument
    nameWithType: InArgument
    fullName: InArgument<System.Exception>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Statements.TerminateWorkflow.Execute(System.Activities.NativeActivityContext)
  parent: System.Activities.Statements.TerminateWorkflow
  isExternal: false
  name: Execute(NativeActivityContext)
  nameWithType: TerminateWorkflow.Execute(NativeActivityContext)
  fullName: System.Activities.Statements.TerminateWorkflow.Execute(NativeActivityContext)
- uid: System.Activities.NativeActivityContext
  parent: System.Activities
  isExternal: false
  name: NativeActivityContext
  nameWithType: NativeActivityContext
  fullName: System.Activities.NativeActivityContext
- uid: System.Activities.Statements.TerminateWorkflow.Reason
  parent: System.Activities.Statements.TerminateWorkflow
  isExternal: false
  name: Reason
  nameWithType: TerminateWorkflow.Reason
  fullName: System.Activities.Statements.TerminateWorkflow.Reason
- uid: System.Activities.InArgument{System.String}
  parent: System.Activities
  isExternal: false
  name: InArgument<String>
  nameWithType: InArgument<String>
  fullName: System.Activities.InArgument<System.String>
  spec.csharp:
  - uid: System.Activities.InArgument`1
    name: InArgument
    nameWithType: InArgument
    fullName: InArgument<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Statements.TerminateWorkflow.#ctor*
  parent: System.Activities.Statements.TerminateWorkflow
  isExternal: false
  name: TerminateWorkflow
  nameWithType: TerminateWorkflow.TerminateWorkflow
- uid: System.Activities.Statements.TerminateWorkflow.CacheMetadata*
  parent: System.Activities.Statements.TerminateWorkflow
  isExternal: false
  name: CacheMetadata
  nameWithType: TerminateWorkflow.CacheMetadata
- uid: System.Activities.Statements.TerminateWorkflow.Exception*
  parent: System.Activities.Statements.TerminateWorkflow
  isExternal: false
  name: Exception
  nameWithType: TerminateWorkflow.Exception
- uid: System.Activities.Statements.TerminateWorkflow.Execute*
  parent: System.Activities.Statements.TerminateWorkflow
  isExternal: false
  name: Execute
  nameWithType: TerminateWorkflow.Execute
- uid: System.Activities.Statements.TerminateWorkflow.Reason*
  parent: System.Activities.Statements.TerminateWorkflow
  isExternal: false
  name: Reason
  nameWithType: TerminateWorkflow.Reason
