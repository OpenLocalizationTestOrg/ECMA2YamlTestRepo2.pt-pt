### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Messaging.AsyncResult
  id: AsyncResult
  children:
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  - System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  - System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  - System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  - System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage
  - System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  - System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  - System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  - System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  langs:
  - csharp
  name: AsyncResult
  nameWithType: AsyncResult
  fullName: System.Runtime.Remoting.Messaging.AsyncResult
  type: Class
  summary: "Encapsulates the results of an asynchronous operation on a delegate."
  remarks: "The AsyncResult class is used in conjunction with asynchronous method calls made using delegates. The <xref:System.IAsyncResult> returned from the delegate&quot;s `BeginInvoke` method can be cast to an AsyncResult. The AsyncResult has the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> property that holds the delegate object on which the asynchronous call was invoked.       For more information about `BeginInvoke` and asynchronous calls using delegates, see [Asynchronous Programming Using Delegates](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_18_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/t-system.runtime.remotin_18_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/t-system.runtime.remotin_18_1.cpp)]  \n[!code-vb[AsyncDelegateExamples#3](~/add/codesnippet/visualbasic/t-system.runtime.remotin_18_2.vb)]\n[!code-cpp[AsyncDelegateExamples#3](~/add/codesnippet/cpp/t-system.runtime.remotin_18_2.cpp)]\n[!code-cs[AsyncDelegateExamples#3](~/add/codesnippet/csharp/t-system.runtime.remotin_18_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AsyncResult : IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  - System.Runtime.Remoting.Messaging.IMessageSink
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  id: AsyncDelegate
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncDelegate
  nameWithType: AsyncResult.AsyncDelegate
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the delegate object on which the asynchronous call was invoked."
  remarks: "The AsyncDelegate property can be cast to the actual class of the user-defined delegate.       For example, if the delegate that was used to make the asynchronous call is of type `MyDelegate`, the delegate that is returned by this property must be cast to `MyDelegate`. The callback method can then call the delegate&quot;s `EndInvoke` method with the correct signature, in order to obtain the results of the asynchronous method call."
  example:
  - "The following code example demonstrates how to use the AsyncDelegate property to get the delegate that was used to make the asynchronous call, in order to call `EndInvoke`. The example casts the <xref:System.IAsyncResult>, which is the only parameter of the callback method, to an <xref:System.Runtime.Remoting.Messaging.AsyncResult> object.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_95_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_95_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_95_1.cpp)]  \n[!code-cs[AsyncDelegateExamples#5](~/add/codesnippet/csharp/p-system.runtime.remotin_95_2.cs)]\n[!code-cpp[AsyncDelegateExamples#5](~/add/codesnippet/cpp/p-system.runtime.remotin_95_2.cpp)]\n[!code-vb[AsyncDelegateExamples#5](~/add/codesnippet/visualbasic/p-system.runtime.remotin_95_2.vb)]"
  syntax:
    content: public virtual object AsyncDelegate { get; }
    return:
      type: System.Object
      description: "The delegate object on which the asynchronous call was invoked."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  id: AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncProcessMessage(IMessage,IMessageSink)
  nameWithType: AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Implements the <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageSink&quot;></xref> interface."
  remarks: "The AsyncProcessMessage method of the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface is not relevant to the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class. Implementation by <xref:System.Runtime.Remoting.Messaging.AsyncResult> throws a <xref:System.NotSupportedException>. Instead, obtain an <xref:System.Runtime.Remoting.Messaging.AsyncResult> by casting the <xref:System.IAsyncResult> interface returned by an asynchronous call made using a delegate."
  syntax:
    content: public virtual System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
    parameters:
    - id: msg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "The request <xref href=&quot;System.Runtime.Remoting.Messaging.IMessage&quot;></xref> interface."
    - id: replySink
      type: System.Runtime.Remoting.Messaging.IMessageSink
      description: "The response <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageSink&quot;></xref> interface."
    return:
      type: System.Runtime.Remoting.Messaging.IMessageCtrl
      description: "No value is returned."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  id: AsyncState
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the object provided as the last parameter of a <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;></xref> method call."
  remarks: "For more information about the `BeginInvoke` method, see [Asynchronous Programming Using Delegates](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how the AsyncState property is used to pass information to a callback method. The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information on the way this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_83_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_83_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_83_1.cpp)]  \n[!code-cs[AsyncDelegateExamples#5](~/add/codesnippet/csharp/p-system.runtime.remotin_83_2.cs)]\n[!code-cpp[AsyncDelegateExamples#5](~/add/codesnippet/cpp/p-system.runtime.remotin_83_2.cpp)]\n[!code-vb[AsyncDelegateExamples#5](~/add/codesnippet/visualbasic/p-system.runtime.remotin_83_2.vb)]"
  syntax:
    content: public virtual object AsyncState { get; }
    return:
      type: System.Object
      description: "The object provided as the last parameter of a <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;></xref> method call."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  id: AsyncWaitHandle
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets a <xref:System.Threading.WaitHandle> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes."
  remarks: "The <xref:System.Threading.WaitHandle> returned by this method is automatically signaled when the asynchronous operation has completed.       The wait handle is not closed automatically when you call `EndInvoke` on the delegate that was used to make the asynchronous method call. If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle. To free the system resources as soon as you are finished using the wait handle, call the <xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName> method. Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.      > [!CAUTION] >  The <xref:System.Threading.WaitHandle> contained in the AsyncWaitHandle property can be used to block the current thread until the asynchronous call is complete. However the <xref:System.Threading.WaitHandle> will ignore the <xref:System.AsyncCallback>, if one was specified during the `BeginInvoke` call. Therefore, a situation can occur where the application shuts down before the <xref:System.AsyncCallback> has finished executing, even if a <xref:System.Threading.WaitHandle> is used to block until the asynchronous call completion. For an example of such a situation, see the example for the <xref:System.Runtime.Remoting.Messaging.AsyncResult> class, and remove the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> statement."
  example:
  - "The following example demonstrates how to use the AsyncWaitHandle property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate. The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_47_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_47_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_47_1.cpp)]  \n[!code-vb[AsyncDelegateExamples#3](~/add/codesnippet/visualbasic/p-system.runtime.remotin_47_2.vb)]\n[!code-cpp[AsyncDelegateExamples#3](~/add/codesnippet/cpp/p-system.runtime.remotin_47_2.cpp)]\n[!code-cs[AsyncDelegateExamples#3](~/add/codesnippet/csharp/p-system.runtime.remotin_47_2.cs)]"
  syntax:
    content: public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "A <xref:System.Threading.WaitHandle> that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  id: CompletedSynchronously
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets a value indicating whether the <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;></xref> call completed synchronously."
  remarks: "If it is detected that the `BeginInvoke` call completed synchronously in the <xref:System.AsyncCallback> delegate, it is probable that the thread that called BeginInvoke is the current thread. Most providers of the <xref:System.IAsyncResult> interface will not use the capability and will return a default `false`.       Current implementation of CompletedSynchronously always returns `false`."
  syntax:
    content: public virtual bool CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref uid=&quot;langword_csharp_BeginInvoke&quot; name=&quot;BeginInvoke&quot; href=&quot;&quot;></xref> call completed synchronously; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  id: EndInvokeCalled
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: EndInvokeCalled
  nameWithType: AsyncResult.EndInvokeCalled
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets or sets a value indicating whether <xref uid=&quot;langword_csharp_EndInvoke&quot; name=&quot;EndInvoke&quot; href=&quot;&quot;></xref> has been called on the current <xref href=&quot;System.Runtime.Remoting.Messaging.AsyncResult&quot;></xref>."
  syntax:
    content: public bool EndInvokeCalled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <xref uid=&quot;langword_csharp_EndInvoke&quot; name=&quot;EndInvoke&quot; href=&quot;&quot;></xref> has been called on the current <xref href=&quot;System.Runtime.Remoting.Messaging.AsyncResult&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage
  id: GetReplyMessage
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: GetReplyMessage()
  nameWithType: AsyncResult.GetReplyMessage()
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the response message for the asynchronous call."
  remarks: "The GetReplyMessage method can return an object after the <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> method is called. The <xref:System.Runtime.Remoting.Messaging.IMessage> return value can be cast to an <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>.       However, you do not need to call either of these methods directly. They are intended for use by the remoting infrastructure of the .NET Framework."
  syntax:
    content: public virtual System.Runtime.Remoting.Messaging.IMessage GetReplyMessage ();
    parameters: []
    return:
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "A remoting message that should represent a response to a method call on a remote object."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  id: IsCompleted
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets a value indicating whether the server has completed the call."
  remarks: "The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to `true`. Thus, it is safe for the client to destroy the resources after the IsCompleted property returns `true`."
  example:
  - "The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.Runtime.Remoting.Messaging.AsyncResult> returned by `BeginInvoke` to discover when an asynchronous call completes. You might do this when making the asynchronous call from a thread that services the user interface. Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.  \n  \n The example consists of two classes, the class that contains the method which is called asynchronously, and the class that contains the `Main` method that makes the call.  \n  \n For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[AsyncDelegateExamples#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_39_1.vb)]\n [!code-cs[AsyncDelegateExamples#1](~/add/codesnippet/csharp/p-system.runtime.remotin_39_1.cs)]\n [!code-cpp[AsyncDelegateExamples#1](~/add/codesnippet/cpp/p-system.runtime.remotin_39_1.cpp)]  \n[!code-cpp[AsyncDelegateExamples#4](~/add/codesnippet/cpp/p-system.runtime.remotin_39_2.cpp)]\n[!code-cs[AsyncDelegateExamples#4](~/add/codesnippet/csharp/p-system.runtime.remotin_39_2.cs)]\n[!code-vb[AsyncDelegateExamples#4](~/add/codesnippet/visualbasic/p-system.runtime.remotin_39_2.vb)]"
  syntax:
    content: public virtual bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> after the server has completed the call; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  id: NextSink
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: NextSink
  nameWithType: AsyncResult.NextSink
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the next message sink in the sink chain."
  remarks: "The current implementation of NextSink returns `null`."
  syntax:
    content: public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }
    return:
      type: System.Runtime.Remoting.Messaging.IMessageSink
      description: "An <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageSink&quot;></xref> interface that represents the next message sink in the sink chain."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.NextSink*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  id: SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: SetMessageCtrl(IMessageCtrl)
  nameWithType: AsyncResult.SetMessageCtrl(IMessageCtrl)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(IMessageCtrl)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Sets an <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageCtrl&quot;></xref> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched."
  remarks: "You do not need to call the SetMessageCtrl method."
  syntax:
    content: public virtual void SetMessageCtrl (System.Runtime.Remoting.Messaging.IMessageCtrl mc);
    parameters:
    - id: mc
      type: System.Runtime.Remoting.Messaging.IMessageCtrl
      description: "The <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageCtrl&quot;></xref> for the current remote method call."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  id: SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  langs:
  - csharp
  name: SyncProcessMessage(IMessage)
  nameWithType: AsyncResult.SyncProcessMessage(IMessage)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(IMessage)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Synchronously processes a response message returned by a method call on a remote object."
  remarks: "The SyncProcessMessage method implements the <xref:System.Runtime.Remoting.Messaging.IMessageSink> interface. You do not need to call this method directly. It is intended for use by the remoting infrastructure of the .NET Framework.       SyncProcessMessage invokes the consumer code&quot;s <xref:System.AsyncCallback> delegate. It also sets the <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> instance returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> method. If the `msg` parameter is of type <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>, the same object is returned by <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>. Otherwise, a reply message that contains a remoting exception is returned.       SyncProcessMessage also modifies the value returned by the <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> property."
  syntax:
    content: public virtual System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);
    parameters:
    - id: msg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "A response message to a method call on a remote object."
    return:
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "Returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncDelegate
  nameWithType: AsyncResult.AsyncDelegate
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncProcessMessage(IMessage,IMessageSink)
  nameWithType: AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(IMessage,IMessageSink)
- uid: System.Runtime.Remoting.Messaging.IMessageCtrl
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessageCtrl
  nameWithType: IMessageCtrl
  fullName: System.Runtime.Remoting.Messaging.IMessageCtrl
- uid: System.Runtime.Remoting.Messaging.IMessage
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: System.Runtime.Remoting.Messaging.IMessage
- uid: System.Runtime.Remoting.Messaging.IMessageSink
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessageSink
  nameWithType: IMessageSink
  fullName: System.Runtime.Remoting.Messaging.IMessageSink
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: EndInvokeCalled
  nameWithType: AsyncResult.EndInvokeCalled
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled
- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: GetReplyMessage()
  nameWithType: AsyncResult.GetReplyMessage()
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage()
- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted
- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: NextSink
  nameWithType: AsyncResult.NextSink
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.NextSink
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SetMessageCtrl(IMessageCtrl)
  nameWithType: AsyncResult.SetMessageCtrl(IMessageCtrl)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(IMessageCtrl)
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SyncProcessMessage(IMessage)
  nameWithType: AsyncResult.SyncProcessMessage(IMessage)
  fullName: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(IMessage)
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncDelegate
  nameWithType: AsyncResult.AsyncDelegate
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncProcessMessage
  nameWithType: AsyncResult.AsyncProcessMessage
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncState*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
- uid: System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
- uid: System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
- uid: System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: EndInvokeCalled
  nameWithType: AsyncResult.EndInvokeCalled
- uid: System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: GetReplyMessage
  nameWithType: AsyncResult.GetReplyMessage
- uid: System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
- uid: System.Runtime.Remoting.Messaging.AsyncResult.NextSink*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: NextSink
  nameWithType: AsyncResult.NextSink
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SetMessageCtrl
  nameWithType: AsyncResult.SetMessageCtrl
- uid: System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage*
  parent: System.Runtime.Remoting.Messaging.AsyncResult
  isExternal: false
  name: SyncProcessMessage
  nameWithType: AsyncResult.SyncProcessMessage
