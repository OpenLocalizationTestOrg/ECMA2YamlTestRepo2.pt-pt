### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection
  id: TreeNodeBindingCollection
  children:
  - System.Web.UI.WebControls.TreeNodeBindingCollection.Add(System.Web.UI.WebControls.TreeNodeBinding)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.Contains(System.Web.UI.WebControls.TreeNodeBinding)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.CopyTo(System.Web.UI.WebControls.TreeNodeBinding[],System.Int32)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.CreateKnownType(System.Int32)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.GetKnownTypes
  - System.Web.UI.WebControls.TreeNodeBindingCollection.IndexOf(System.Web.UI.WebControls.TreeNodeBinding)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.Insert(System.Int32,System.Web.UI.WebControls.TreeNodeBinding)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.Item(System.Int32)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.OnClear
  - System.Web.UI.WebControls.TreeNodeBindingCollection.OnRemoveComplete(System.Int32,System.Object)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.OnValidate(System.Object)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.Remove(System.Web.UI.WebControls.TreeNodeBinding)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.RemoveAt(System.Int32)
  - System.Web.UI.WebControls.TreeNodeBindingCollection.SetDirtyObject(System.Object)
  langs:
  - csharp
  name: TreeNodeBindingCollection
  nameWithType: TreeNodeBindingCollection
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection
  type: Class
  summary: "Represents a collection of <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> objects in the <xref href=&quot;System.Web.UI.WebControls.TreeView&quot;></xref> control. This class cannot be inherited."
  remarks: "The TreeNodeBindingCollection class is used to store and manage a collection of <xref:System.Web.UI.WebControls.TreeNodeBinding> objects in the <xref:System.Web.UI.WebControls.TreeView> control. The <xref:System.Web.UI.WebControls.TreeView> control uses the TreeNodeBindingCollection class for its <xref:System.Web.UI.WebControls.TreeView.DataBindings%2A> property.       The <xref:System.Web.UI.WebControls.TreeView.DataBindings%2A> property contains <xref:System.Web.UI.WebControls.TreeNodeBinding> objects that define the relationship between a data item and the node that it is binding to. When binding to a data source where each data item contains multiple properties (such as an XML element with several attributes), a node displays the value that is returned by the `ToString` method of the data item, by default. In the case of an XML element, the node displays the element name, which shows the underlying structure of the tree but is not very useful otherwise. You can bind a node to a specific data item property by specifying tree node bindings. Although the <xref:System.Web.UI.WebControls.TreeView.DataBindings%2A> collection can be programmatically populated, it is usually set declaratively.       To set the tree node bindings declaratively:      1.  Nest opening and closing `<DataBindings>` tags between the opening and closing tags of the <xref:System.Web.UI.WebControls.TreeView> control.      2.  Place `<asp:TreeNodeBinding>` elements between the opening and closing `<DataBindings>` tags for each tree node binding that you want to specify.       You can programmatically manage a TreeNodeBindingCollection by adding and removing <xref:System.Web.UI.WebControls.TreeNodeBinding> objects. To add a <xref:System.Web.UI.WebControls.TreeNodeBinding> object to the collection, use the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection.Add%2A> or <xref:System.Web.UI.WebControls.TreeNodeBindingCollection.Insert%2A> method. To remove nodes from the collection, use the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection.Remove%2A>, <xref:System.Web.UI.WebControls.TreeNodeBindingCollection.RemoveAt%2A>, or <xref:System.Web.UI.StateManagedCollection.Clear%2A?displayProperty=fullName> method.       The TreeNodeBindingCollection class supports several ways to access the items in the collection:      -   Use the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection.Item%2A> indexer to retrieve a <xref:System.Web.UI.WebControls.TreeNode> object directly at a specific zero-based index.      -   Use the <xref:System.Web.UI.StateManagedCollection.GetEnumerator%2A?displayProperty=fullName> method to create an enumerator that can be used to iterate through the collection."
  example:
  - "This section contains two code examples. The first code example demonstrates how to populate a TreeNodeBindingCollection object declaratively. The second code example demonstrates how to populate a TreeNodeBindingCollection object programmatically.  \n  \n The following code example demonstrates how to populate a TreeNodeBindingCollection object declaratively. For this example to work correctly, you must copy the XML data that is located at the end of this section to a file called Book.xml.  \n  \n [!code-cs[TreeViewXml#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_291_1.aspx)]\n [!code-vb[TreeViewXml#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_291_1.aspx)]  \n  \n The following code example demonstrates how to populate a TreeNodeBindingCollection object programmatically. For this example to work correctly, you must copy the sample XML data that is located at the end of this section to a file called Book.xml.  \n  \n [!code-cs[TreeViewCtor#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_291_2.aspx)]\n [!code-vb[TreeViewCtor#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_291_2.aspx)]  \n  \n The following is the XML data for the preceding code examples.  \n  \n```  \n<Book Title=\"Book Title\">  \n    <Chapter Heading=\"Chapter 1\">  \n       <Section Heading=\"Section 1\">  \n       </Section>  \n       <Section Heading=\"Section 2\">  \n       </Section>  \n    </Chapter>  \n    <Chapter Heading=\"Chapter 2\">  \n        <Section Heading=\"Section 1\">  \n        </Section>  \n    </Chapter>  \n</Book>  \n```"
  syntax:
    content: 'public sealed class TreeNodeBindingCollection : System.Web.UI.StateManagedCollection'
  inheritance:
  - System.Object
  - System.Web.UI.StateManagedCollection
  implements: []
  inheritedMembers:
  - System.Web.UI.StateManagedCollection.Clear
  - System.Web.UI.StateManagedCollection.CopyTo(System.Array,System.Int32)
  - System.Web.UI.StateManagedCollection.Count
  - System.Web.UI.StateManagedCollection.GetEnumerator
  - System.Web.UI.StateManagedCollection.OnClearComplete
  - System.Web.UI.StateManagedCollection.OnInsert(System.Int32,System.Object)
  - System.Web.UI.StateManagedCollection.OnInsertComplete(System.Int32,System.Object)
  - System.Web.UI.StateManagedCollection.OnRemove(System.Int32,System.Object)
  - System.Web.UI.StateManagedCollection.SetDirty
  - System.Web.UI.StateManagedCollection.System#Collections#ICollection#Count
  - System.Web.UI.StateManagedCollection.System#Collections#ICollection#IsSynchronized
  - System.Web.UI.StateManagedCollection.System#Collections#ICollection#SyncRoot
  - System.Web.UI.StateManagedCollection.System#Collections#IEnumerable#GetEnumerator
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Add(System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Clear
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Contains(System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#IndexOf(System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#IsFixedSize
  - System.Web.UI.StateManagedCollection.System#Collections#IList#IsReadOnly
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Item(System.Int32)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#Remove(System.Object)
  - System.Web.UI.StateManagedCollection.System#Collections#IList#RemoveAt(System.Int32)
  - System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#IsTrackingViewState
  - System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#LoadViewState(System.Object)
  - System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#SaveViewState
  - System.Web.UI.StateManagedCollection.System#Web#UI#IStateManager#TrackViewState
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Add(System.Web.UI.WebControls.TreeNodeBinding)
  id: Add(System.Web.UI.WebControls.TreeNodeBinding)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: Add(TreeNodeBinding)
  nameWithType: TreeNodeBindingCollection.Add(TreeNodeBinding)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.Add(TreeNodeBinding)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Appends the specified <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> object to the end of the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBindingCollection&quot;></xref> object."
  remarks: "Use the Add method to append the specified <xref:System.Web.UI.WebControls.TreeNodeBinding> object to the end of the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object.       As an alternative, you can insert a <xref:System.Web.UI.WebControls.TreeNodeBinding> object in the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> at a specific index using the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection.Insert%2A> method."
  example:
  - "The following code example demonstrates how to use the Add method to add a new <xref:System.Web.UI.WebControls.TreeNodeBinding> object programmatically to a <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object. For this example to work correctly, you must copy the XML data that is located at the end of this section to a file called Book.xml.  \n  \n [!code-cs[TreeNodeBindingCollectionAdd#1](~/add/codesnippet/csharp/1c7f636a-948c-4466-bc6b-_1.aspx)]\n [!code-vb[TreeNodeBindingCollectionAdd#1](~/add/codesnippet/visualbasic/1c7f636a-948c-4466-bc6b-_1.aspx)]  \n  \n The following is the XML data for the preceding code example.  \n  \n```  \n<Book Title=\"Book Title\">  \n    <Chapter Heading=\"Chapter 1\">  \n        <Section Heading=\"Section 1\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n        <Section Heading=\"Section 2\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n    </Chapter>  \n    <Chapter Heading=\"Chapter 2\">  \n        <Section Heading=\"Section 1\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n    </Chapter>  \n</Book>  \n```"
  syntax:
    content: public int Add (System.Web.UI.WebControls.TreeNodeBinding binding);
    parameters:
    - id: binding
      type: System.Web.UI.WebControls.TreeNodeBinding
      description: "The <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> to append."
    return:
      type: System.Int32
      description: "The zero-based index of the location of the added <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> in the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBindingCollection&quot;></xref>."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Contains(System.Web.UI.WebControls.TreeNodeBinding)
  id: Contains(System.Web.UI.WebControls.TreeNodeBinding)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: Contains(TreeNodeBinding)
  nameWithType: TreeNodeBindingCollection.Contains(TreeNodeBinding)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.Contains(TreeNodeBinding)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Determines whether the specified <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> object is in the collection."
  remarks: "Use the Contains method to determine whether a <xref:System.Web.UI.WebControls.TreeNodeBinding> object is contained in the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object. This method is commonly used to test for the existence of a <xref:System.Web.UI.WebControls.TreeNodeBinding> object before performing a task, such as adding or removing a <xref:System.Web.UI.WebControls.TreeNodeBinding> from the collection."
  syntax:
    content: public bool Contains (System.Web.UI.WebControls.TreeNodeBinding binding);
    parameters:
    - id: binding
      type: System.Web.UI.WebControls.TreeNodeBinding
      description: "The <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> to find."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> is in the collection; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.CopyTo(System.Web.UI.WebControls.TreeNodeBinding[],System.Int32)
  id: CopyTo(System.Web.UI.WebControls.TreeNodeBinding[],System.Int32)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: CopyTo(TreeNodeBinding[],Int32)
  nameWithType: TreeNodeBindingCollection.CopyTo(TreeNodeBinding[],Int32)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.CopyTo(TreeNodeBinding[],Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Copies all the items from the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBindingCollection&quot;></xref> object to a compatible one-dimensional array of <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> objects, starting at the specified index in the target array."
  remarks: "Use the CopyTo method to copy the contents of the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object into `bindingArray`. Items are copied starting at `index`. You can then use the array to access the items that are in the collection.       As an alternative, you can use the <xref:System.Web.UI.StateManagedCollection.GetEnumerator%2A> method to create an enumerator that can be used to access the items in the collection."
  example:
  - "The following code example demonstrates how to use the CopyTo method to copy the contents of the <xref:System.Web.UI.WebControls.TreeView.DataBindings%2A> collection to an array.  \n  \n [!code-cs[TreeNodeBindingCollectionCopyTo#1](~/add/codesnippet/csharp/57693c79-624a-4a4d-979f-_1.aspx)]\n [!code-vb[TreeNodeBindingCollectionCopyTo#1](~/add/codesnippet/visualbasic/57693c79-624a-4a4d-979f-_1.aspx)]"
  syntax:
    content: public void CopyTo (System.Web.UI.WebControls.TreeNodeBinding[] bindingArray, int index);
    parameters:
    - id: bindingArray
      type: System.Web.UI.WebControls.TreeNodeBinding[]
      description: "A zero-based array of <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> objects that receives the copied items from the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBindingCollection&quot;></xref>."
    - id: index
      type: System.Int32
      description: "The position in `bindingArray` at which to start receiving the copied content."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.CreateKnownType(System.Int32)
  id: CreateKnownType(System.Int32)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: CreateKnownType(Int32)
  nameWithType: TreeNodeBindingCollection.CreateKnownType(Int32)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.CreateKnownType(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  syntax:
    content: protected override object CreateKnownType (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.CreateKnownType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.GetKnownTypes
  id: GetKnownTypes
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: GetKnownTypes()
  nameWithType: TreeNodeBindingCollection.GetKnownTypes()
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.GetKnownTypes()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  syntax:
    content: protected override Type[] GetKnownTypes ();
    parameters: []
    return:
      type: System.Type[]
      description: "To be added."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.GetKnownTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.IndexOf(System.Web.UI.WebControls.TreeNodeBinding)
  id: IndexOf(System.Web.UI.WebControls.TreeNodeBinding)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: IndexOf(TreeNodeBinding)
  nameWithType: TreeNodeBindingCollection.IndexOf(TreeNodeBinding)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.IndexOf(TreeNodeBinding)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Determines the index of the specified <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> object in the collection."
  remarks: "Use the IndexOf method to determine the zero-based index of the specified <xref:System.Web.UI.WebControls.TreeNodeBinding> object in the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object. If the node is not in the collection, the method returns -1.      > [!NOTE] >  If the specified <xref:System.Web.UI.WebControls.TreeNodeBinding> object appears multiple times in the collection, the index of the first occurrence is returned."
  syntax:
    content: public int IndexOf (System.Web.UI.WebControls.TreeNodeBinding binding);
    parameters:
    - id: binding
      type: System.Web.UI.WebControls.TreeNodeBinding
      description: "The <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> to locate."
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of <code>binding</code> within the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBindingCollection&quot;></xref>, if found; otherwise, -1."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Insert(System.Int32,System.Web.UI.WebControls.TreeNodeBinding)
  id: Insert(System.Int32,System.Web.UI.WebControls.TreeNodeBinding)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: Insert(Int32,TreeNodeBinding)
  nameWithType: TreeNodeBindingCollection.Insert(Int32,TreeNodeBinding)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.Insert(Int32,TreeNodeBinding)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Inserts the specified <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> object into the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBindingCollection&quot;></xref> object at the specified index location."
  remarks: "Use the Insert method to insert the specified <xref:System.Web.UI.WebControls.TreeNodeBinding> object into the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object at `index`.       As an alternative, you can append a <xref:System.Web.UI.WebControls.TreeNodeBinding> object to the end of the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> using the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection.Add%2A> method."
  example:
  - "The following code example demonstrates how to use the Insert method to insert a new <xref:System.Web.UI.WebControls.TreeNodeBinding> object programmatically into a <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object. For this example to work correctly, you must copy the XML data that is located at the end of this section to a file called Book.xml.  \n  \n [!code-vb[TreeNodeBindingCollectionInsert#1](~/add/codesnippet/visualbasic/b258c1b7-cd55-4993-aa16-_1.aspx)]\n [!code-cs[TreeNodeBindingCollectionInsert#1](~/add/codesnippet/csharp/b258c1b7-cd55-4993-aa16-_1.aspx)]  \n  \n The following is the XML data for the preceding code example.  \n  \n```  \n<Book Title=\"Book Title\">  \n    <Chapter Heading=\"Chapter 1\">  \n        <Section Heading=\"Section 1\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n        <Section Heading=\"Section 2\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n    </Chapter>  \n    <Chapter Heading=\"Chapter 2\">  \n        <Section Heading=\"Section 1\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n    </Chapter>  \n</Book>  \n```"
  syntax:
    content: public void Insert (int index, System.Web.UI.WebControls.TreeNodeBinding binding);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index location at which to insert the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref>."
    - id: binding
      type: System.Web.UI.WebControls.TreeNodeBinding
      description: "The <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> to insert."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: TreeNodeBindingCollection.Item(Int32)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gets or sets the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> object at the specified index in the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBindingCollection&quot;></xref> object."
  remarks: "Use the Item indexer to access a <xref:System.Web.UI.WebControls.TreeNodeBinding> object from the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object located at `i` using array notation. The Item indexer allows you to modify or replace a <xref:System.Web.UI.WebControls.TreeNodeBinding> object in the collection directly."
  example:
  - "The following code example demonstrates how to use the Item indexer to access the items that are in a <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object. The <xref:System.Web.UI.WebControls.TreeNodeBinding> object for the third-level nodes is updated programmatically with new values. For this example to work correctly, you must copy the XML data that is located at the end of this section to a file called Book.xml.  \n  \n [!code-cs[TreeNodeBindingCollectionIndexer#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1093_1.aspx)]\n [!code-vb[TreeNodeBindingCollectionIndexer#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1093_1.aspx)]  \n  \n The following is the XML data for the preceding code example.  \n  \n```  \n<Book Title=\"Book Title\">  \n    <Chapter Heading=\"Chapter 1\">  \n        <Section Heading=\"Section 1\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n        <Section Heading=\"Section 2\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n    </Chapter>  \n    <Chapter Heading=\"Chapter 2\">  \n        <Section Heading=\"Section 1\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n    </Chapter>  \n</Book>  \n```"
  syntax:
    content: public System.Web.UI.WebControls.TreeNodeBinding this[int i] { get; set; }
    parameters:
    - id: i
      type: System.Int32
      description: "The zero-based index of the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> to retrieve."
    return:
      type: System.Web.UI.WebControls.TreeNodeBinding
      description: "The <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> at the specified index in the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBindingCollection&quot;></xref>."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.OnClear
  id: OnClear
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: OnClear()
  nameWithType: TreeNodeBindingCollection.OnClear()
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.OnClear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  syntax:
    content: protected override void OnClear ();
    parameters: []
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.OnClear*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.OnRemoveComplete(System.Int32,System.Object)
  id: OnRemoveComplete(System.Int32,System.Object)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: OnRemoveComplete(Int32,Object)
  nameWithType: TreeNodeBindingCollection.OnRemoveComplete(Int32,Object)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.OnRemoveComplete(Int32,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  syntax:
    content: protected override void OnRemoveComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "To be added."
    - id: value
      type: System.Object
      description: "To be added."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.OnRemoveComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.OnValidate(System.Object)
  id: OnValidate(System.Object)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: OnValidate(Object)
  nameWithType: TreeNodeBindingCollection.OnValidate(Object)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.OnValidate(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  syntax:
    content: protected override void OnValidate (object value);
    parameters:
    - id: value
      type: System.Object
      description: "To be added."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.OnValidate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Remove(System.Web.UI.WebControls.TreeNodeBinding)
  id: Remove(System.Web.UI.WebControls.TreeNodeBinding)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: Remove(TreeNodeBinding)
  nameWithType: TreeNodeBindingCollection.Remove(TreeNodeBinding)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.Remove(TreeNodeBinding)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Removes the specified <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> object from the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBindingCollection&quot;></xref> object."
  remarks: "Use the Remove method to remove the specified <xref:System.Web.UI.WebControls.TreeNodeBinding> object from the collection. All items that follow that node are then moved up to fill the vacant position. The indexes of the moved items are also updated.       As an alternative, you can remove a node at a specific index using the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection.RemoveAt%2A> method. You can also remove every node in the collection using the <xref:System.Web.UI.StateManagedCollection.Clear%2A> method."
  example:
  - "The following code example demonstrates how to use the Remove method to remove a <xref:System.Web.UI.WebControls.TreeNodeBinding> object programmatically from a <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object. For this example to work correctly, you must copy the XML data that is located at the end of this section to a file called Book.xml.  \n  \n [!code-cs[TreeNodeBindingCollectionAdd#1](~/add/codesnippet/csharp/d829ba87-3d4f-4bb0-a238-_1.aspx)]\n [!code-vb[TreeNodeBindingCollectionAdd#1](~/add/codesnippet/visualbasic/d829ba87-3d4f-4bb0-a238-_1.aspx)]  \n  \n The following is the XML data for the preceding code example.  \n  \n```  \n<Book Title=\"Book Title\">  \n    <Chapter Heading=\"Chapter 1\">  \n        <Section Heading=\"Section 1\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n        <Section Heading=\"Section 2\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n    </Chapter>  \n    <Chapter Heading=\"Chapter 2\">  \n        <Section Heading=\"Section 1\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n    </Chapter>  \n</Book>  \n```"
  syntax:
    content: public void Remove (System.Web.UI.WebControls.TreeNodeBinding binding);
    parameters:
    - id: binding
      type: System.Web.UI.WebControls.TreeNodeBinding
      description: "The <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> to remove."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: TreeNodeBindingCollection.RemoveAt(Int32)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Removes the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> object at the specified index location from the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBindingCollection&quot;></xref> object."
  remarks: "Use the RemoveAt method to remove the <xref:System.Web.UI.WebControls.TreeNodeBinding> object located at `index` from a <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object. All items that follow that node are then moved up to fill the vacant position. The indexes of the moved items are also updated.       As an alternative, you can remove a specific <xref:System.Web.UI.WebControls.TreeNodeBinding> object by using the <xref:System.Web.UI.WebControls.TreeNodeBindingCollection.Remove%2A> method. You can also remove every node in the collection by using the <xref:System.Web.UI.StateManagedCollection.Clear%2A> method."
  example:
  - "The following code example demonstrates how to use the RemoveAt method to remove a <xref:System.Web.UI.WebControls.TreeNodeBinding> object programmatically from a <xref:System.Web.UI.WebControls.TreeNodeBindingCollection> object. For this example to work correctly, you must copy the XML data that is located at the end of this section to a file called Book.xml.  \n  \n [!code-vb[TreeNodeBindingCollectionInsert#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_131_1.aspx)]\n [!code-cs[TreeNodeBindingCollectionInsert#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_131_1.aspx)]  \n  \n The following is the XML data for the preceding code example.  \n  \n```  \n<Book Title=\"Book Title\">  \n    <Chapter Heading=\"Chapter 1\">  \n        <Section Heading=\"Section 1\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n        <Section Heading=\"Section 2\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n    </Chapter>  \n    <Chapter Heading=\"Chapter 2\">  \n        <Section Heading=\"Section 1\"  \n            Subject=\"Subject 1\">  \n        </Section>  \n    </Chapter>  \n</Book>  \n```"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index location of the <xref href=&quot;System.Web.UI.WebControls.TreeNodeBinding&quot;></xref> to remove."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.SetDirtyObject(System.Object)
  id: SetDirtyObject(System.Object)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  langs:
  - csharp
  name: SetDirtyObject(Object)
  nameWithType: TreeNodeBindingCollection.SetDirtyObject(Object)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.SetDirtyObject(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  syntax:
    content: protected override void SetDirtyObject (object o);
    parameters:
    - id: o
      type: System.Object
      description: "To be added."
  overload: System.Web.UI.WebControls.TreeNodeBindingCollection.SetDirtyObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.StateManagedCollection
  isExternal: false
  name: System.Web.UI.StateManagedCollection
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Add(System.Web.UI.WebControls.TreeNodeBinding)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: Add(TreeNodeBinding)
  nameWithType: TreeNodeBindingCollection.Add(TreeNodeBinding)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.Add(TreeNodeBinding)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.TreeNodeBinding
  parent: System.Web.UI.WebControls
  isExternal: false
  name: TreeNodeBinding
  nameWithType: TreeNodeBinding
  fullName: System.Web.UI.WebControls.TreeNodeBinding
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Contains(System.Web.UI.WebControls.TreeNodeBinding)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: Contains(TreeNodeBinding)
  nameWithType: TreeNodeBindingCollection.Contains(TreeNodeBinding)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.Contains(TreeNodeBinding)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.CopyTo(System.Web.UI.WebControls.TreeNodeBinding[],System.Int32)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: CopyTo(TreeNodeBinding[],Int32)
  nameWithType: TreeNodeBindingCollection.CopyTo(TreeNodeBinding[],Int32)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.CopyTo(TreeNodeBinding[],Int32)
- uid: System.Web.UI.WebControls.TreeNodeBinding[]
  parent: System.Web.UI.WebControls
  isExternal: false
  name: TreeNodeBinding
  nameWithType: TreeNodeBinding
  fullName: System.Web.UI.WebControls.TreeNodeBinding[]
  spec.csharp:
  - uid: System.Web.UI.WebControls.TreeNodeBinding
    name: TreeNodeBinding
    nameWithType: TreeNodeBinding
    fullName: TreeNodeBinding[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.CreateKnownType(System.Int32)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: CreateKnownType(Int32)
  nameWithType: TreeNodeBindingCollection.CreateKnownType(Int32)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.CreateKnownType(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.GetKnownTypes
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: GetKnownTypes()
  nameWithType: TreeNodeBindingCollection.GetKnownTypes()
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.GetKnownTypes()
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.IndexOf(System.Web.UI.WebControls.TreeNodeBinding)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: IndexOf(TreeNodeBinding)
  nameWithType: TreeNodeBindingCollection.IndexOf(TreeNodeBinding)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.IndexOf(TreeNodeBinding)
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Insert(System.Int32,System.Web.UI.WebControls.TreeNodeBinding)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: Insert(Int32,TreeNodeBinding)
  nameWithType: TreeNodeBindingCollection.Insert(Int32,TreeNodeBinding)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.Insert(Int32,TreeNodeBinding)
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Item(System.Int32)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: TreeNodeBindingCollection.Item(Int32)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.Item(Int32)
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.OnClear
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: OnClear()
  nameWithType: TreeNodeBindingCollection.OnClear()
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.OnClear()
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.OnRemoveComplete(System.Int32,System.Object)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: OnRemoveComplete(Int32,Object)
  nameWithType: TreeNodeBindingCollection.OnRemoveComplete(Int32,Object)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.OnRemoveComplete(Int32,Object)
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.OnValidate(System.Object)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: OnValidate(Object)
  nameWithType: TreeNodeBindingCollection.OnValidate(Object)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.OnValidate(Object)
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Remove(System.Web.UI.WebControls.TreeNodeBinding)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: Remove(TreeNodeBinding)
  nameWithType: TreeNodeBindingCollection.Remove(TreeNodeBinding)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.Remove(TreeNodeBinding)
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.RemoveAt(System.Int32)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: TreeNodeBindingCollection.RemoveAt(Int32)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.RemoveAt(Int32)
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.SetDirtyObject(System.Object)
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: SetDirtyObject(Object)
  nameWithType: TreeNodeBindingCollection.SetDirtyObject(Object)
  fullName: System.Web.UI.WebControls.TreeNodeBindingCollection.SetDirtyObject(Object)
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Add*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: Add
  nameWithType: TreeNodeBindingCollection.Add
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Contains*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: Contains
  nameWithType: TreeNodeBindingCollection.Contains
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.CopyTo*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: CopyTo
  nameWithType: TreeNodeBindingCollection.CopyTo
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.CreateKnownType*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: CreateKnownType
  nameWithType: TreeNodeBindingCollection.CreateKnownType
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.GetKnownTypes*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: GetKnownTypes
  nameWithType: TreeNodeBindingCollection.GetKnownTypes
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.IndexOf*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: IndexOf
  nameWithType: TreeNodeBindingCollection.IndexOf
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Insert*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: Insert
  nameWithType: TreeNodeBindingCollection.Insert
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Item*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: Item
  nameWithType: TreeNodeBindingCollection.Item
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.OnClear*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: OnClear
  nameWithType: TreeNodeBindingCollection.OnClear
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.OnRemoveComplete*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: OnRemoveComplete
  nameWithType: TreeNodeBindingCollection.OnRemoveComplete
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.OnValidate*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: OnValidate
  nameWithType: TreeNodeBindingCollection.OnValidate
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.Remove*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: Remove
  nameWithType: TreeNodeBindingCollection.Remove
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.RemoveAt*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: RemoveAt
  nameWithType: TreeNodeBindingCollection.RemoveAt
- uid: System.Web.UI.WebControls.TreeNodeBindingCollection.SetDirtyObject*
  parent: System.Web.UI.WebControls.TreeNodeBindingCollection
  isExternal: false
  name: SetDirtyObject
  nameWithType: TreeNodeBindingCollection.SetDirtyObject
