### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.PerformanceCounterCategory
  id: PerformanceCounterCategory
  children:
  - System.Diagnostics.PerformanceCounterCategory.#ctor
  - System.Diagnostics.PerformanceCounterCategory.#ctor(System.String)
  - System.Diagnostics.PerformanceCounterCategory.#ctor(System.String,System.String)
  - System.Diagnostics.PerformanceCounterCategory.CategoryHelp
  - System.Diagnostics.PerformanceCounterCategory.CategoryName
  - System.Diagnostics.PerformanceCounterCategory.CategoryType
  - System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)
  - System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String)
  - System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String,System.String)
  - System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)
  - System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)
  - System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.String,System.String)
  - System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String,System.String)
  - System.Diagnostics.PerformanceCounterCategory.Delete(System.String)
  - System.Diagnostics.PerformanceCounterCategory.Exists(System.String)
  - System.Diagnostics.PerformanceCounterCategory.Exists(System.String,System.String)
  - System.Diagnostics.PerformanceCounterCategory.GetCategories
  - System.Diagnostics.PerformanceCounterCategory.GetCategories(System.String)
  - System.Diagnostics.PerformanceCounterCategory.GetCounters
  - System.Diagnostics.PerformanceCounterCategory.GetCounters(System.String)
  - System.Diagnostics.PerformanceCounterCategory.GetInstanceNames
  - System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)
  - System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String)
  - System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String,System.String)
  - System.Diagnostics.PerformanceCounterCategory.MachineName
  - System.Diagnostics.PerformanceCounterCategory.ReadCategory
  langs:
  - csharp
  name: PerformanceCounterCategory
  nameWithType: PerformanceCounterCategory
  fullName: System.Diagnostics.PerformanceCounterCategory
  type: Class
  summary: "Represents a performance object, which defines a category of performance counters."
  remarks: "> [!IMPORTANT]\n>  Creating or deleting a performance counter requires synchronization of the underlying code by using a named mutex. If a highly privileged application locks the named mutex, attempts to create or delete a performance counter causes the application to stop responding until the lock is released. To help avoid this problem, never grant <xref:System.Security.Permissions.SecurityPermissionFlag> permission to untrusted code. In addition, <xref:System.Security.Permissions.SecurityPermissionFlag> permission potentially allows other permissions to be bypassed and should only be granted to highly trusted code.  \n  \n The PerformanceCounterCategory instance's <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> property is displayed in the Performance Object field of the Performance Viewer application's Add Counter dialog box.  \n  \n The PerformanceCounterCategory class provides several methods for interacting with counters and categories on the computer. The <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A> methods enable you to define custom categories. The <xref:System.Diagnostics.PerformanceCounterCategory.Delete%2A> method provides a way to remove categories from the computer. The <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> method enables you to view the list of categories, while <xref:System.Diagnostics.PerformanceCounterCategory.ReadCategory%2A> retrieves all the counter and instance data associated with a single category.  \n  \n A performance counter publishes performance data about an application. Categories include physical components (such as processors, disks, and memory) and system objects (such as processes and threads). System counters that are related to the same performance object are grouped into a category that indicates their common focus. When you create an instance of the <xref:System.Diagnostics.PerformanceCounter> class, you first indicate the category with which the component will interact, and then you choose a counter from that category.  \n  \n For example, one Windows counter category is the Memory category. System counters within this category track memory data such as the number of bytes available and the number of bytes cached. If you wanted to work with the bytes cached in your application, you would create an instance of the <xref:System.Diagnostics.PerformanceCounter> component, connect it to the Memory category, and then pick the appropriate counter (in this case, Cached Bytes) from that category.  \n  \n Although your system makes many more counter categories available, the categories that you will probably interact with most frequently are the Cache, Memory, Objects, PhysicalDisk, Process, Processor, Server, System, and Thread categories.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Diagnostics.PerformanceCounter.RemoveInstance%2A> method in the <xref:System.Diagnostics.PerformanceCounter> class will release the counter and, if the reuse option is selected for that category, the instance of the counter will be reused. This could cause a race condition if another process or even another part of the code is trying to write to the counter instance.  \n  \n> [!NOTE]\n>  It is strongly recommended that new performance counter categories be created during the installation of the application, not during the execution of the application. This allows time for the operating system to refresh its list of registered performance counter categories. If the list has not been refreshed, the attempt to use the category will fail.  \n  \n> [!NOTE]\n>  Performance counter categories installed with the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] use separate shared memory, with each performance counter category having its own memory. You can specify the size of separate shared memory by creating a DWORD named FileMappingSize in the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<category name>*\\Performance. The FileMappingSize value is set to the shared memory size of the category. The default size is 131072 decimal. If the FileMappingSize value is not present, the `fileMappingSize` attribute value for the `performanceCounters` element specified in the Machine.config file is used, causing additional overhead for configuration file processing. You can realize a performance improvement for application startup by setting the file mapping size in the registry. For more information about the file mapping size, see [\\&lt;performanceCounters\\&gt;](../Topic/%3CperformanceCounters%3E%20Element.md)."
  example:
  - "The following code example determines whether a <xref:System.Diagnostics.PerformanceCounter> and its PerformanceCounterCategory exist on the local computer or on another computer. If these objects do not exist on the local computer, the example optionally creates them. It uses the <xref:System.Diagnostics.PerformanceCounterCategory.Exists%2A> method to determine whether the PerformanceCounterCategory exists.  If the PerformanceCounterCategory does not exist and no counter name is specified, or if the computer is a remote machine, the example exits.  \n  \n If a <xref:System.Diagnostics.PerformanceCounter> name is provided, the example uses the <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%2A> method and displays the result to the user. If the <xref:System.Diagnostics.PerformanceCounter> does not exist, the user can delete and re-create the PerformanceCounterCategory with the new <xref:System.Diagnostics.PerformanceCounter>. If the user does so, the category is deleted using the <xref:System.Diagnostics.PerformanceCounterCategory.Delete%2A> method.  \n  \n If requested, the example now creates the new PerformanceCounterCategory and <xref:System.Diagnostics.PerformanceCounter> using the <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A> method. If an instance name is specified, the example uses the <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A> method and displays the result.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.Class#27](~/add/codesnippet/csharp/t-system.diagnostics.per_3_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.Class#27](~/add/codesnippet/visualbasic/t-system.diagnostics.per_3_1.vb)]"
  syntax:
    content: public sealed class PerformanceCounterCategory
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.#ctor
  id: '#ctor'
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: PerformanceCounterCategory()
  nameWithType: PerformanceCounterCategory.PerformanceCounterCategory()
  fullName: System.Diagnostics.PerformanceCounterCategory.PerformanceCounterCategory()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> class, leaves the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> property empty, and sets the <xref:System.Diagnostics.PerformanceCounterCategory.MachineName*> property to the local computer."
  remarks: "The <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> property must be set before associating this <xref:System.Diagnostics.PerformanceCounterCategory> instance with a performance object on the server. Otherwise, an exception is thrown."
  example:
  - "The following code example accepts a <xref:System.Diagnostics.PerformanceCounterCategory> name and a computer name from the command line.  It creates a <xref:System.Diagnostics.PerformanceCounterCategory> using the constructor overload appropriate for the number of parameters provided, then displays its properties.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/add/codesnippet/csharp/m-system.diagnostics.per_4_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/add/codesnippet/visualbasic/m-system.diagnostics.per_4_1.vb)]"
  syntax:
    content: public PerformanceCounterCategory ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounterCategory.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: PerformanceCounterCategory(String)
  nameWithType: PerformanceCounterCategory.PerformanceCounterCategory(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.PerformanceCounterCategory(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> class, sets the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> property to the specified value, and sets the <xref:System.Diagnostics.PerformanceCounterCategory.MachineName*> property to the local computer."
  remarks: ''
  example:
  - "The following code example accepts a <xref:System.Diagnostics.PerformanceCounterCategory> name and a computer name from the command line. It creates a <xref:System.Diagnostics.PerformanceCounterCategory> using the constructor overload that is appropriate for the number of parameters provided, then displays its properties.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/add/codesnippet/csharp/m-system.diagnostics.per_11_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/add/codesnippet/visualbasic/m-system.diagnostics.per_11_1.vb)]"
  syntax:
    content: public PerformanceCounterCategory (string categoryName);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category, or performance object, with which to associate this <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> instance."
  overload: System.Diagnostics.PerformanceCounterCategory.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>categoryName</code> is an empty string (&quot;&quot;)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>categoryName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: PerformanceCounterCategory(String,String)
  nameWithType: PerformanceCounterCategory.PerformanceCounterCategory(String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.PerformanceCounterCategory(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> class and sets the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> and <xref:System.Diagnostics.PerformanceCounterCategory.MachineName*> properties to the specified values."
  remarks: ''
  example:
  - "The following code example accepts a <xref:System.Diagnostics.PerformanceCounterCategory> name and a computer name from the command line. It creates a <xref:System.Diagnostics.PerformanceCounterCategory> using the constructor overload that is appropriate for the number of parameters provided, then displays its properties.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/add/codesnippet/csharp/75b9896e-a505-4b53-afe2-_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/add/codesnippet/visualbasic/75b9896e-a505-4b53-afe2-_1.vb)]"
  syntax:
    content: public PerformanceCounterCategory (string categoryName, string machineName);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category, or performance object, with which to associate this <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> instance."
    - id: machineName
      type: System.String
      description: "The computer on which the performance counter category and its associated counters exist."
  overload: System.Diagnostics.PerformanceCounterCategory.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>categoryName</code> is an empty string (&quot;&quot;).       -or-       The <code>machineName</code> syntax is invalid."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>categoryName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.CategoryHelp
  id: CategoryHelp
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: CategoryHelp
  nameWithType: PerformanceCounterCategory.CategoryHelp
  fullName: System.Diagnostics.PerformanceCounterCategory.CategoryHelp
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the category&quot;s help text."
  remarks: ''
  example:
  - "The following code example creates a <xref:System.Diagnostics.PerformanceCounterCategory> with the <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor>. It prompts the user for the <xref:System.Diagnostics.PerformanceCounterCategory> and computer names, then sets the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> and <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> properties from the entered values. It then displays the values of the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A>, and CategoryHelp properties, or it displays an error message if the <xref:System.Diagnostics.PerformanceCounterCategory> cannot be accessed.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/add/codesnippet/csharp/p-system.diagnostics.per_5_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/add/codesnippet/visualbasic/p-system.diagnostics.per_5_1.vb)]"
  syntax:
    content: public string CategoryHelp { get; }
    return:
      type: System.String
      description: "A description of the performance object that this category measures."
  overload: System.Diagnostics.PerformanceCounterCategory.CategoryHelp*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. The category name must be set before getting the category help."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.CategoryName
  id: CategoryName
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: CategoryName
  nameWithType: PerformanceCounterCategory.CategoryName
  fullName: System.Diagnostics.PerformanceCounterCategory.CategoryName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets the name of the performance object that defines this category."
  remarks: ''
  example:
  - "The following code example creates a <xref:System.Diagnostics.PerformanceCounterCategory> with the <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor>. It prompts the user for the <xref:System.Diagnostics.PerformanceCounterCategory> and computer names, then sets the CategoryName and <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> properties from the entered values. It then displays the values of the CategoryName, <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A>, and <xref:System.Diagnostics.PerformanceCounterCategory.CategoryHelp%2A> properties, or it displays an error message if the <xref:System.Diagnostics.PerformanceCounterCategory> cannot be accessed.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/add/codesnippet/csharp/p-system.diagnostics.per_3_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/add/codesnippet/visualbasic/p-system.diagnostics.per_3_1.vb)]"
  syntax:
    content: public string CategoryName { get; set; }
    return:
      type: System.String
      description: "The name of the performance counter category, or performance object, with which to associate this <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> instance."
  overload: System.Diagnostics.PerformanceCounterCategory.CategoryName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The CategoryName is an empty string (&quot;&quot;)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The CategoryName is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.CategoryType
  id: CategoryType
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: CategoryType
  nameWithType: PerformanceCounterCategory.CategoryType
  fullName: System.Diagnostics.PerformanceCounterCategory.CategoryType
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets the performance counter category type."
  remarks: "The CategoryType property indicates whether the <xref:System.Diagnostics.PerformanceCounterCategory> object can have multiple instances. The possible values are <xref:System.Diagnostics.PerformanceCounterCategoryType>, <xref:System.Diagnostics.PerformanceCounterCategoryType>, or <xref:System.Diagnostics.PerformanceCounterCategoryType>.       There are two types of performance counter categories: single-instance and multi-instance. By default, a category is single-instance when it is created and becomes multi-instance when another instance is added. Categories are created when an application is set up, and instances are added at run time. In the .NET Framework versions 1.0 and 1.1, it is not necessary to know if a performance counter category is multi-instance or single-instance. In the [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)], the <xref:System.Diagnostics.PerformanceCounterCategoryType> enumeration is used to indicate whether a performance counter can have multiple instances."
  syntax:
    content: public System.Diagnostics.PerformanceCounterCategoryType CategoryType { get; }
    return:
      type: System.Diagnostics.PerformanceCounterCategoryType
      description: "One of the <xref href=&quot;System.Diagnostics.PerformanceCounterCategoryType&quot;></xref> values."
  overload: System.Diagnostics.PerformanceCounterCategory.CategoryType*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)
  id: CounterExists(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: CounterExists(String)
  nameWithType: PerformanceCounterCategory.CounterExists(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.CounterExists(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determines whether the specified counter is registered to this category, which is indicated by the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> and <xref:System.Diagnostics.PerformanceCounterCategory.MachineName*> properties."
  remarks: "You must set the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> property before calling this method. Otherwise, an exception is thrown.       If you have not set the <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> property, this method uses the local computer (&quot;.&quot;).      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example determines whether a <xref:System.Diagnostics.PerformanceCounter> exists. It gets a category name, counter name, and computer name from the command line, if they are given. It creates a <xref:System.Diagnostics.PerformanceCounterCategory> object using the appropriate <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor%2A>. It then uses the CounterExists method to determine whether the specified <xref:System.Diagnostics.PerformanceCounter> exists, and informs the user.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.ExistMembers#4](~/add/codesnippet/csharp/m-system.diagnostics.per_6_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#4](~/add/codesnippet/visualbasic/m-system.diagnostics.per_6_1.vb)]"
  syntax:
    content: public bool CounterExists (string counterName);
    parameters:
    - id: counterName
      type: System.String
      description: "The name of the performance counter to look for."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the counter is registered to the category that is specified by the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> and <xref:System.Diagnostics.PerformanceCounterCategory.MachineName*> properties; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.PerformanceCounterCategory.CounterExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> property has not been set."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String)
  id: CounterExists(System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: CounterExists(String,String)
  nameWithType: PerformanceCounterCategory.CounterExists(String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.CounterExists(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determines whether the specified counter is registered to the specified category on the local computer."
  remarks: "> [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example determines whether a <xref:System.Diagnostics.PerformanceCounter> exists. It gets a category name, counter name, and computer name from the command line, if they are given. It uses the static overloads of the <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%2A> method to determine whether the specified <xref:System.Diagnostics.PerformanceCounter> name exists in the <xref:System.Diagnostics.PerformanceCounterCategory>. The overload is selected based on whether a computer name is provided.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/add/codesnippet/csharp/ccefabf7-dd26-432c-91c0-_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/add/codesnippet/visualbasic/ccefabf7-dd26-432c-91c0-_1.vb)]"
  syntax:
    content: public static bool CounterExists (string counterName, string categoryName);
    parameters:
    - id: counterName
      type: System.String
      description: "The name of the performance counter to look for."
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category, or performance object, with which the specified performance counter is associated."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, if the counter is registered to the specified category on the local computer; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.PerformanceCounterCategory.CounterExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>categoryName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>categoryName</code> is an empty string (&quot;&quot;)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The category name does not exist."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String,System.String)
  id: CounterExists(System.String,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: CounterExists(String,String,String)
  nameWithType: PerformanceCounterCategory.CounterExists(String,String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.CounterExists(String,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determines whether the specified counter is registered to the specified category on a remote computer."
  remarks: "> [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example determines whether a <xref:System.Diagnostics.PerformanceCounter> exists. It gets a category name, counter name, and computer name from the command line, if they are given. It uses the static overloads of the <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%2A> method to determine whether the specified <xref:System.Diagnostics.PerformanceCounter> name exists in the <xref:System.Diagnostics.PerformanceCounterCategory>. The overload is selected based on whether a computer name is provided.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/add/codesnippet/csharp/479fa6a9-538c-463f-94d2-_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/add/codesnippet/visualbasic/479fa6a9-538c-463f-94d2-_1.vb)]"
  syntax:
    content: public static bool CounterExists (string counterName, string categoryName, string machineName);
    parameters:
    - id: counterName
      type: System.String
      description: "The name of the performance counter to look for."
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category, or performance object, with which the specified performance counter is associated."
    - id: machineName
      type: System.String
      description: "The name of the computer on which the performance counter category and its associated counters exist."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, if the counter is registered to the specified category on the specified computer; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.PerformanceCounterCategory.CounterExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>categoryName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>categoryName</code> is an empty string (&quot;&quot;).       -or-       The <code>machineName</code> is invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The category name does not exist."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)
  id: Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: Create(String,String,CounterCreationDataCollection)
  nameWithType: PerformanceCounterCategory.Create(String,String,CounterCreationDataCollection)
  fullName: System.Diagnostics.PerformanceCounterCategory.Create(String,String,CounterCreationDataCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Registers the custom performance counter category containing the specified counters on the local computer."
  remarks: "> [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example determines whether a <xref:System.Diagnostics.PerformanceCounterCategory> object named \"orders\" exists. If not, it creates the <xref:System.Diagnostics.PerformanceCounterCategory> object by using a <xref:System.Diagnostics.CounterCreationDataCollection> object that contains two performance counters.  \n  \n [!code-cpp[PerfCounter_ccd#1](~/add/codesnippet/cpp/9e4e5065-5efa-4558-a11f-_1.cpp)]\n [!code-vb[PerfCounter_ccd#1](~/add/codesnippet/visualbasic/9e4e5065-5efa-4558-a11f-_1.vb)]\n [!code-cs[PerfCounter_ccd#1](~/add/codesnippet/csharp/9e4e5065-5efa-4558-a11f-_1.cs)]"
  syntax:
    content: public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, System.Diagnostics.CounterCreationDataCollection counterData);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the custom performance counter category to create and register with the system."
    - id: categoryHelp
      type: System.String
      description: "A description of the custom category."
    - id: counterData
      type: System.Diagnostics.CounterCreationDataCollection
      description: "A <xref href=&quot;System.Diagnostics.CounterCreationDataCollection&quot;></xref> that specifies the counters to create as part of the new category."
    return:
      type: System.Diagnostics.PerformanceCounterCategory
      description: "A <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> that is associated with the new custom category, or performance object."
  overload: System.Diagnostics.PerformanceCounterCategory.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A counter name that is specified within the <code>counterData</code> collection is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\").  \n  \n -or-  \n  \n A counter that is specified within the <code>counterData</code> collection already exists.  \n  \n -or-  \n  \n The <code>counterName</code> parameter has invalid syntax. It might contain backslash characters (\"\\\\\") or have length greater than 80 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>categoryName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The category already exists on the local computer.       -or-       The layout of the <code>counterData</code> collection is incorrect for base counters. A counter of type <xref uid=&quot;langword_csharp_AverageCount64&quot; name=&quot;AverageCount64&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_AverageTimer32&quot; name=&quot;AverageTimer32&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CounterMultiTimer&quot; name=&quot;CounterMultiTimer&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CounterMultiTimerInverse&quot; name=&quot;CounterMultiTimerInverse&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CounterMultiTimer100Ns&quot; name=&quot;CounterMultiTimer100Ns&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CounterMultiTimer100NsInverse&quot; name=&quot;CounterMultiTimer100NsInverse&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_RawFraction&quot; name=&quot;RawFraction&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_SampleFraction&quot; name=&quot;SampleFraction&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_SampleCounter&quot; name=&quot;SampleCounter&quot; href=&quot;&quot;></xref> has to be immediately followed by one of the base counter types (<xref uid=&quot;langword_csharp_AverageBase&quot; name=&quot;AverageBase&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_MultiBase&quot; name=&quot;MultiBase&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_RawBase&quot; name=&quot;RawBase&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_SampleBase&quot; name=&quot;SampleBase&quot; href=&quot;&quot;></xref>)."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)
  id: Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: Create(String,String,PerformanceCounterCategoryType,CounterCreationDataCollection)
  nameWithType: PerformanceCounterCategory.Create(String,String,PerformanceCounterCategoryType,CounterCreationDataCollection)
  fullName: System.Diagnostics.PerformanceCounterCategory.Create(String,String,PerformanceCounterCategoryType,CounterCreationDataCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Registers the custom performance counter category containing the specified counters on the local computer."
  remarks: "The `categoryType` parameter specifies whether the performance counter category is single-instance or multi-instance. By default, a category is single-instance when it is created and becomes multi-instance when another instance is added. Categories are created when an application is set up, and instances are added at run time. In the  .NET Framework versions 1.0 and 1.1, it is not necessary to know if a performance counter category is multi-instance or single-instance. In the [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)], the <xref:System.Diagnostics.PerformanceCounterCategoryType> enumeration is used to indicate whether a performance counter can have multiple instances.  \n  \n Performance counter categories installed with the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] use separate shared memory, with each performance counter category having its own memory.  You can specify the size of separate shared memory by creating a DWORD named FileMappingSize in the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<category name>*\\Performance. The FileMappingSize value is set to the shared memory size of the category. The default size is 131072 decimal. If the FileMappingSize value is not present, the `fileMappingSize` attribute value for the `performanceCounters` element specified in the Machine.config file is used, causing additional overhead for configuration file processing. You can realize a performance improvement for application startup by setting the file mapping size in the registry.  \n  \n> [!NOTE]\n>  It is strongly recommended that new performance counter categories be created during the installation of the application, not during the execution of the application. This allows time for the operating system to refresh its list of registered performance counter categories. If the list has not been refreshed, the attempt to use the category will fail.  \n  \n> [!NOTE]\n>  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.  \n>   \n>  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.  \n>   \n>  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example shows the use of the Create method. The example shows how to create a custom, multi-instance performance counter category for the number of orders per second.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategoryType#2](~/add/codesnippet/csharp/38799c48-5863-4c7c-ac81-_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategoryType#2](~/add/codesnippet/visualbasic/38799c48-5863-4c7c-ac81-_1.vb)]"
  syntax:
    content: public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, System.Diagnostics.PerformanceCounterCategoryType categoryType, System.Diagnostics.CounterCreationDataCollection counterData);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the custom performance counter category to create and register with the system."
    - id: categoryHelp
      type: System.String
      description: "A description of the custom category."
    - id: categoryType
      type: System.Diagnostics.PerformanceCounterCategoryType
      description: "One of the <xref href=&quot;System.Diagnostics.PerformanceCounterCategoryType&quot;></xref> values."
    - id: counterData
      type: System.Diagnostics.CounterCreationDataCollection
      description: "A <xref href=&quot;System.Diagnostics.CounterCreationDataCollection&quot;></xref> that specifies the counters to create as part of the new category."
    return:
      type: System.Diagnostics.PerformanceCounterCategory
      description: "A <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> that is associated with the new custom category, or performance object."
  overload: System.Diagnostics.PerformanceCounterCategory.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A counter name that is specified within the <code>counterData</code> collection is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\").  \n  \n -or-  \n  \n A counter that is specified within the <code>counterData</code> collection already exists.  \n  \n -or-  \n  \n <code>counterName</code> has invalid syntax. It might contain backslash characters (\"\\\\\") or have length greater than 80 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>counterData</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: '<code>categoryType</code> value is outside of the range of the following values: <xref uid=&quot;langword_csharp_MultiInstance&quot; name=&quot;MultiInstance&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_SingleInstance&quot; name=&quot;SingleInstance&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Unknown&quot; name=&quot;Unknown&quot; href=&quot;&quot;></xref>.'
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The category already exists on the local computer.       -or-       The layout of the <code>counterData</code> collection is incorrect for base counters. A counter of type <xref uid=&quot;langword_csharp_AverageCount64&quot; name=&quot;AverageCount64&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_AverageTimer32&quot; name=&quot;AverageTimer32&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CounterMultiTimer&quot; name=&quot;CounterMultiTimer&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CounterMultiTimerInverse&quot; name=&quot;CounterMultiTimerInverse&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CounterMultiTimer100Ns&quot; name=&quot;CounterMultiTimer100Ns&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CounterMultiTimer100NsInverse&quot; name=&quot;CounterMultiTimer100NsInverse&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_RawFraction&quot; name=&quot;RawFraction&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_SampleFraction&quot; name=&quot;SampleFraction&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_SampleCounter&quot; name=&quot;SampleCounter&quot; href=&quot;&quot;></xref> must be immediately followed by one of the base counter types (<xref uid=&quot;langword_csharp_AverageBase&quot; name=&quot;AverageBase&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_MultiBase&quot; name=&quot;MultiBase&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_RawBase&quot; name=&quot;RawBase&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_SampleBase&quot; name=&quot;SampleBase&quot; href=&quot;&quot;></xref>)."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.String,System.String)
  id: Create(System.String,System.String,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: Create(String,String,String,String)
  nameWithType: PerformanceCounterCategory.Create(String,String,String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.Create(String,String,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Registers a custom performance counter category containing a single counter of type <xref uid=&quot;langword_csharp_NumberOfItems32&quot; name=&quot;NumberOfItems32&quot; href=&quot;&quot;></xref> on the local computer."
  remarks: "> [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example creates a <xref:System.Diagnostics.PerformanceCounterCategory> and single <xref:System.Diagnostics.PerformanceCounter> with help text for each, using the Create method.  \n  \n [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#2](~/add/codesnippet/visualbasic/012c8ef3-108d-4e71-bb01-_1.vb)]\n [!code-cs[System.Diagnostics.PerformanceCounterCategory.OtherMembers#2](~/add/codesnippet/csharp/012c8ef3-108d-4e71-bb01-_1.cs)]"
  syntax:
    content: public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, string counterName, string counterHelp);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the custom performance counter category to create and register with the system."
    - id: categoryHelp
      type: System.String
      description: "A description of the custom category."
    - id: counterName
      type: System.String
      description: "The name of a new counter, of type <xref uid=&quot;langword_csharp_NumberOfItems32&quot; name=&quot;NumberOfItems32&quot; href=&quot;&quot;></xref>, to create as part of the new category."
    - id: counterHelp
      type: System.String
      description: "A description of the counter that is associated with the new custom category."
    return:
      type: System.Diagnostics.PerformanceCounterCategory
      description: "A <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> that is associated with the new system category, or performance object."
  overload: System.Diagnostics.PerformanceCounterCategory.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>counterName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\").  \n  \n -or-  \n  \n The counter that is specified by <code>counterName</code> already exists.  \n  \n -or-  \n  \n <code>counterName</code> has invalid syntax. It might contain backslash characters (\"\\\\\") or have length greater than 80 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The category already exists on the local computer."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>counterHelp</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String,System.String)
  id: Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: Create(String,String,PerformanceCounterCategoryType,String,String)
  nameWithType: PerformanceCounterCategory.Create(String,String,PerformanceCounterCategoryType,String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.Create(String,String,PerformanceCounterCategoryType,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Registers the custom performance counter category containing a single counter of type <xref href=&quot;System.Diagnostics.PerformanceCounterType&quot;></xref> on the local computer."
  remarks: "The `categoryType` parameter specifies whether the performance counter category is single-instance or multi-instance. By default, a category is single-instance when it is created and becomes multi-instance when another instance is added. Categories are created when an application is set up, and instances are added at run time. In the .NET Framework versions 1.0 and 1.1, it is not necessary to know if a performance counter category is multi-instance or single-instance. In the [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)], the <xref:System.Diagnostics.PerformanceCounterCategoryType> enumeration is used to indicate whether a performance counter can have multiple instances.  \n  \n Performance counter categories installed with the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] use separate shared memory, with each performance counter category having its own memory. You can specify the size of separate shared memory by creating a DWORD named FileMappingSize in the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<category name>*\\Performance. The FileMappingSize value is set to the shared memory size of the category. The default size is 131072 decimal. If the FileMappingSize value is not present, the `fileMappingSize` attribute value for the `performanceCounters` element specified in the Machine.config file is used, causing additional overhead for configuration file processing. You can realize a performance improvement for application startup by setting the file mapping size in the registry.  \n  \n> [!NOTE]\n>  It is strongly recommended that new performance counter categories be created during the installation of the application, not during the execution of the application. This allows time for the operating system to refresh its list of registered performance counter categories. If the list has not been refreshed, the attempt to use the category will fail.  \n  \n> [!NOTE]\n>  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.  \n>   \n>  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.  \n>   \n>  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example shows the use of the Create method. The example shows how to create a custom, single instance performance counter category.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategoryType#3](~/add/codesnippet/csharp/f3ced94f-b6d8-4841-851d-_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategoryType#3](~/add/codesnippet/visualbasic/f3ced94f-b6d8-4841-851d-_1.vb)]"
  syntax:
    content: public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, System.Diagnostics.PerformanceCounterCategoryType categoryType, string counterName, string counterHelp);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the custom performance counter category to create and register with the system."
    - id: categoryHelp
      type: System.String
      description: "A description of the custom category."
    - id: categoryType
      type: System.Diagnostics.PerformanceCounterCategoryType
      description: "One of the <xref href=&quot;System.Diagnostics.PerformanceCounterCategoryType&quot;></xref> values specifying whether the category is <xref href=&quot;System.Diagnostics.PerformanceCounterCategoryType&quot;></xref>, <xref href=&quot;System.Diagnostics.PerformanceCounterCategoryType&quot;></xref>, or <xref href=&quot;System.Diagnostics.PerformanceCounterCategoryType&quot;></xref>."
    - id: counterName
      type: System.String
      description: "The name of a new counter to create as part of the new category."
    - id: counterHelp
      type: System.String
      description: "A description of the counter that is associated with the new custom category."
    return:
      type: System.Diagnostics.PerformanceCounterCategory
      description: "A <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> that is associated with the new system category, or performance object."
  overload: System.Diagnostics.PerformanceCounterCategory.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>counterName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or is an empty string (\"\").  \n  \n -or-  \n  \n The counter that is specified by <code>counterName</code> already exists.  \n  \n -or-  \n  \n <code>counterName</code> has invalid syntax. It might contain backslash characters (\"\\\\\") or have length greater than 80 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The category already exists on the local computer."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>counterHelp</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.Delete(System.String)
  id: Delete(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: Delete(String)
  nameWithType: PerformanceCounterCategory.Delete(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.Delete(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Removes the category and its associated counters from the local computer."
  remarks: "You can delete only custom performance counter categories from the system. You cannot delete a counter from a category. To do so, delete the category and recreate the category with the counters you want to retain. To avoid an exception, confirm that the category exists before you attempt to delete it.      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example uses the Delete method to delete a <xref:System.Diagnostics.PerformanceCounterCategory> and the <xref:System.Diagnostics.PerformanceCounter> objects that it contains.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.OtherMembers#6](~/add/codesnippet/csharp/m-system.diagnostics.per_10_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#6](~/add/codesnippet/visualbasic/m-system.diagnostics.per_10_1.vb)]"
  syntax:
    content: public static void Delete (string categoryName);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the custom performance counter category to delete."
  overload: System.Diagnostics.PerformanceCounterCategory.Delete*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>categoryName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>categoryName</code> parameter has invalid syntax. It might contain backslash characters (&quot;\\&quot;) or have length greater than 80 characters."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The category cannot be deleted because it is not a custom category."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.Exists(System.String)
  id: Exists(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: Exists(String)
  nameWithType: PerformanceCounterCategory.Exists(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.Exists(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determines whether the category is registered on the local computer."
  remarks: "Use of the Exists method can result in a noticeable performance penalty while all performance counters on the machine are checked for availability. If you are only writing to a performance counter, you can avoid the global search for performance counters by creating the performance counter when the application is installed and assuming the category exists when accessing the counter. There is no way to avoid the performance counter search when reading from performance counters.      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example determines whether a <xref:System.Diagnostics.PerformanceCounterCategory> object named \"orders\" exists. If not, it creates the <xref:System.Diagnostics.PerformanceCounterCategory> object by using a <xref:System.Diagnostics.CounterCreationDataCollection> object that contains two performance counters.  \n  \n [!code-cpp[PerfCounter_ccd#1](~/add/codesnippet/cpp/m-system.diagnostics.per_3_1.cpp)]\n [!code-vb[PerfCounter_ccd#1](~/add/codesnippet/visualbasic/m-system.diagnostics.per_3_1.vb)]\n [!code-cs[PerfCounter_ccd#1](~/add/codesnippet/csharp/m-system.diagnostics.per_3_1.cs)]"
  syntax:
    content: public static bool Exists (string categoryName);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category to look for."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the category is registered; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.PerformanceCounterCategory.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>categoryName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>categoryName</code> parameter is an empty string (&quot;&quot;)."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.Exists(System.String,System.String)
  id: Exists(System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: Exists(String,String)
  nameWithType: PerformanceCounterCategory.Exists(String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.Exists(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determines whether the category is registered on the specified computer."
  remarks: "Use of the Exists method can result in a noticeable performance penalty while all performance counters on the machine are checked for availability. If you are only writing to a performance counter, you can avoid the global search for performance counters by creating the performance counter when the application is installed and assuming the category exists when accessing the counter. There is no way to avoid the performance counter search when reading from performance counters.      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following example determines whether a <xref:System.Diagnostics.PerformanceCounterCategory> object named `Orders` exists. If it does not exist, the example creates the <xref:System.Diagnostics.PerformanceCounterCategory> object by using a <xref:System.Diagnostics.CounterCreationDataCollection> object that contains two performance counters.  \n  \n [!code-cpp[PerfCounter_ccd#1](~/add/codesnippet/cpp/a840bf9c-a22d-45eb-89a3-_1.cpp)]\n [!code-vb[PerfCounter_ccd#1](~/add/codesnippet/visualbasic/a840bf9c-a22d-45eb-89a3-_1.vb)]\n [!code-cs[PerfCounter_ccd#1](~/add/codesnippet/csharp/a840bf9c-a22d-45eb-89a3-_1.cs)]"
  syntax:
    content: public static bool Exists (string categoryName, string machineName);
    parameters:
    - id: categoryName
      type: System.String
      description: "The name of the performance counter category to look for."
    - id: machineName
      type: System.String
      description: "The name of the computer to examine for the category."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the category is registered; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.PerformanceCounterCategory.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>categoryName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>categoryName</code> parameter is an empty string (&quot;&quot;).       -or-       The <code>machineName</code> parameter is invalid."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The network path cannot be found."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission.       -or-       Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.GetCategories
  id: GetCategories
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: GetCategories()
  nameWithType: PerformanceCounterCategory.GetCategories()
  fullName: System.Diagnostics.PerformanceCounterCategory.GetCategories()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Retrieves a list of the performance counter categories that are registered on the local computer."
  remarks: "> [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example uses the <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> method to return an array of <xref:System.Diagnostics.PerformanceCounterCategory> objects from the local computer or a specified computer. It converts the <xref:System.Diagnostics.PerformanceCounterCategory> array into an array of category names, which it sorts and displays for the user. The <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> overload is selected based on whether a computer name was specified.  \n  \n [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/add/codesnippet/visualbasic/m-system.diagnostics.per_5_1.vb)]\n [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/add/codesnippet/cpp/m-system.diagnostics.per_5_1.cpp)]\n [!code-cs[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/add/codesnippet/csharp/m-system.diagnostics.per_5_1.cs)]"
  syntax:
    content: public static System.Diagnostics.PerformanceCounterCategory[] GetCategories ();
    parameters: []
    return:
      type: System.Diagnostics.PerformanceCounterCategory[]
      description: "An array of <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> objects indicating the categories that are registered on the local computer."
  overload: System.Diagnostics.PerformanceCounterCategory.GetCategories*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.GetCategories(System.String)
  id: GetCategories(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: GetCategories(String)
  nameWithType: PerformanceCounterCategory.GetCategories(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.GetCategories(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Retrieves a list of the performance counter categories that are registered on the specified computer."
  remarks: "To retrieve the categories on the local computer, use another overload or pass &quot;.&quot; as the `machineName` parameter.      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example uses the <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> method to return an array of <xref:System.Diagnostics.PerformanceCounterCategory> objects from the local computer or a specified computer. It converts the <xref:System.Diagnostics.PerformanceCounterCategory> array into an array of category names, which it sorts and displays for the user. The <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> overload is selected based on whether a computer name was specified.  \n  \n [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/add/codesnippet/visualbasic/m-system.diagnostics.per_7_1.vb)]\n [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/add/codesnippet/cpp/m-system.diagnostics.per_7_1.cpp)]\n [!code-cs[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/add/codesnippet/csharp/m-system.diagnostics.per_7_1.cs)]"
  syntax:
    content: public static System.Diagnostics.PerformanceCounterCategory[] GetCategories (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "The computer to look on."
    return:
      type: System.Diagnostics.PerformanceCounterCategory[]
      description: "An array of <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> objects indicating the categories that are registered on the specified computer."
  overload: System.Diagnostics.PerformanceCounterCategory.GetCategories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>machineName</code> parameter is invalid."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.GetCounters
  id: GetCounters
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: GetCounters()
  nameWithType: PerformanceCounterCategory.GetCounters()
  fullName: System.Diagnostics.PerformanceCounterCategory.GetCounters()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Retrieves a list of the counters in a performance counter category that contains exactly one instance."
  remarks: "For more information about performance object instances, see the <xref:System.Diagnostics.PerformanceCounter> class overview.      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example gets a list of the <xref:System.Diagnostics.PerformanceCounter> objects in a <xref:System.Diagnostics.PerformanceCounterCategory>. It first creates a <xref:System.Diagnostics.PerformanceCounterCategory> with the appropriate constructor, based on whether a computer name was specified. It then uses the <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> method to return an array of <xref:System.Diagnostics.PerformanceCounter> objects, selecting the <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> overload based on whether an instance name was specified.  \n  \n This GetCounters overload fails unless it is used with a single-instance category.  \n  \n [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/add/codesnippet/visualbasic/m-system.diagnostics.per_14_1.vb)]\n [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/add/codesnippet/cpp/m-system.diagnostics.per_14_1.cpp)]\n [!code-cs[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/add/codesnippet/csharp/m-system.diagnostics.per_14_1.cs)]"
  syntax:
    content: public System.Diagnostics.PerformanceCounter[] GetCounters ();
    parameters: []
    return:
      type: System.Diagnostics.PerformanceCounter[]
      description: "An array of <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> objects indicating the counters that are associated with this single-instance performance counter category."
  overload: System.Diagnostics.PerformanceCounterCategory.GetCounters*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The category is not a single instance."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The category does not have an associated instance."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.GetCounters(System.String)
  id: GetCounters(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: GetCounters(String)
  nameWithType: PerformanceCounterCategory.GetCounters(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.GetCounters(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Retrieves a list of the counters in a performance counter category that contains one or more instances."
  remarks: "To represent a single-instance category, pass an empty string (&quot;&quot;) for the `instanceName` parameter.       For more information about performance object instances, see the <xref:System.Diagnostics.PerformanceCounter> class overview.      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example gets a list of the <xref:System.Diagnostics.PerformanceCounter> objects in a <xref:System.Diagnostics.PerformanceCounterCategory>. It first creates a <xref:System.Diagnostics.PerformanceCounterCategory> with the appropriate constructor, based on whether a computer name was specified. It then uses the <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> method to return an array of <xref:System.Diagnostics.PerformanceCounter> objects, selecting the <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> overload based on whether an instance name was specified.  \n  \n This GetCounters overload fails unless it is used with a category that contains instances.  \n  \n [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/add/codesnippet/visualbasic/m-system.diagnostics.per_8_1.vb)]\n [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/add/codesnippet/cpp/m-system.diagnostics.per_8_1.cpp)]\n [!code-cs[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/add/codesnippet/csharp/m-system.diagnostics.per_8_1.cs)]"
  syntax:
    content: public System.Diagnostics.PerformanceCounter[] GetCounters (string instanceName);
    parameters:
    - id: instanceName
      type: System.String
      description: "The performance object instance for which to retrieve the list of associated counters."
    return:
      type: System.Diagnostics.PerformanceCounter[]
      description: "An array of <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref> objects indicating the counters that are associated with the specified object instance of this performance counter category."
  overload: System.Diagnostics.PerformanceCounterCategory.GetCounters*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>instanceName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> property for this <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> instance has not been set.       -or-       The category does not contain the instance that is specified by the <code>instanceName</code> parameter."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.GetInstanceNames
  id: GetInstanceNames
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: GetInstanceNames()
  nameWithType: PerformanceCounterCategory.GetInstanceNames()
  fullName: System.Diagnostics.PerformanceCounterCategory.GetInstanceNames()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Retrieves the list of performance object instances that are associated with this category."
  remarks: "> [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example gets a list of the <xref:System.Diagnostics.PerformanceCounter> objects in a <xref:System.Diagnostics.PerformanceCounterCategory>. It first creates a <xref:System.Diagnostics.PerformanceCounterCategory> object, using the appropriate constructor based on whether a computer name was specified. It then uses GetInstanceNames to return the instance names as an array of <xref:System.String>, which it sorts and displays.  \n  \n [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#6](~/add/codesnippet/cpp/m-system.diagnostics.per_0_1.cpp)]\n [!code-cs[System.Diagnostics.PerformanceCounterCategory.GetMembers#6](~/add/codesnippet/csharp/m-system.diagnostics.per_0_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#6](~/add/codesnippet/visualbasic/m-system.diagnostics.per_0_1.vb)]"
  syntax:
    content: public string[] GetInstanceNames ();
    parameters: []
    return:
      type: System.String[]
      description: "An array of strings representing the performance object instance names that are associated with this category or, if the category contains only one performance object instance, a single-entry array that contains an empty string (&quot;&quot;)."
  overload: System.Diagnostics.PerformanceCounterCategory.GetInstanceNames*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. The property might not have been set.       -or-       The category does not have an associated instance."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)
  id: InstanceExists(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: InstanceExists(String)
  nameWithType: PerformanceCounterCategory.InstanceExists(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.InstanceExists(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determines whether the specified performance object instance exists in the category that is identified by this <xref href=&quot;System.Diagnostics.PerformanceCounterCategory&quot;></xref> object&quot;s <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> property."
  remarks: "This overload of InstanceExists is not `static`. It requires you to create a <xref:System.Diagnostics.PerformanceCounterCategory> object and to set the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> property.      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example determines whether a <xref:System.Diagnostics.PerformanceCounter> instance exists within a <xref:System.Diagnostics.PerformanceCounterCategory>. It first creates a <xref:System.Diagnostics.PerformanceCounterCategory> object, using the appropriate constructor based on whether a computer name was specified. It then uses InstanceExists to determine whether the specified instance exists, then informs the user. If no instance name is specified, the example uses the default single-instance name.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.ExistMembers#2](~/add/codesnippet/csharp/m-system.diagnostics.per_1_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#2](~/add/codesnippet/visualbasic/m-system.diagnostics.per_1_1.vb)]"
  syntax:
    content: public bool InstanceExists (string instanceName);
    parameters:
    - id: instanceName
      type: System.String
      description: "The performance object instance in this performance counter category to search for."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the category contains the specified performance object instance; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.PerformanceCounterCategory.InstanceExists*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. The property might not have been set."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>instanceName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String)
  id: InstanceExists(System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: InstanceExists(String,String)
  nameWithType: PerformanceCounterCategory.InstanceExists(String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.InstanceExists(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determines whether a specified category on the local computer contains the specified performance object instance."
  remarks: "It is not possible to determine whether a performance object instance exists on a computer without specifying a specific category to look in.      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example uses the static overloads of <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A> to determine whether the given <xref:System.Diagnostics.PerformanceCounter> instance exists in the <xref:System.Diagnostics.PerformanceCounterCategory>. The overload is selected based on whether a computer name is specified. If no instance name is specified, the example uses the default single-instance name.  \n  \n [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/add/codesnippet/visualbasic/adb05d13-bcb8-4c81-ad06-_1.vb)]\n [!code-cs[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/add/codesnippet/csharp/adb05d13-bcb8-4c81-ad06-_1.cs)]"
  syntax:
    content: public static bool InstanceExists (string instanceName, string categoryName);
    parameters:
    - id: instanceName
      type: System.String
      description: "The performance object instance to search for."
    - id: categoryName
      type: System.String
      description: "The performance counter category to search."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the category contains the specified performance object instance; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.PerformanceCounterCategory.InstanceExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>instanceName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>categoryName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>categoryName</code> parameter is an empty string (&quot;&quot;)."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String,System.String)
  id: InstanceExists(System.String,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: InstanceExists(String,String,String)
  nameWithType: PerformanceCounterCategory.InstanceExists(String,String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.InstanceExists(String,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determines whether a specified category on a specified computer contains the specified performance object instance."
  remarks: "It is not possible to determine whether a performance object instance exists on a computer without specifying a specific category to look in.       You can use &quot;.&quot; to specify the local computer.      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example uses the static overloads of <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A> to determine whether the given <xref:System.Diagnostics.PerformanceCounter> instance exists in the <xref:System.Diagnostics.PerformanceCounterCategory>. The overload is selected based on whether a computer name is specified. If no instance name is specified, the example uses the default single-instance name.  \n  \n [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/add/codesnippet/visualbasic/c05b631a-0e63-4d23-8d88-_1.vb)]\n [!code-cs[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/add/codesnippet/csharp/c05b631a-0e63-4d23-8d88-_1.cs)]"
  syntax:
    content: public static bool InstanceExists (string instanceName, string categoryName, string machineName);
    parameters:
    - id: instanceName
      type: System.String
      description: "The performance object instance to search for."
    - id: categoryName
      type: System.String
      description: "The performance counter category to search."
    - id: machineName
      type: System.String
      description: "The name of the computer on which to look for the category instance pair."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the category contains the specified performance object instance; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.PerformanceCounterCategory.InstanceExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>instanceName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>categoryName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>categoryName</code> parameter is an empty string (&quot;&quot;).       -or-       The <code>machineName</code> parameter is invalid."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.MachineName
  id: MachineName
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: MachineName
  nameWithType: PerformanceCounterCategory.MachineName
  fullName: System.Diagnostics.PerformanceCounterCategory.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Gets or sets the name of the computer on which this category exists."
  remarks: ''
  example:
  - "The following code example creates a <xref:System.Diagnostics.PerformanceCounterCategory> with the <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor> constructor. It prompts the user for the <xref:System.Diagnostics.PerformanceCounterCategory> and the computer names, then sets the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> and MachineName properties from the entered values. It then displays the values of the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A>, MachineName, and <xref:System.Diagnostics.PerformanceCounterCategory.CategoryHelp%2A> properties, or it displays an error message if the <xref:System.Diagnostics.PerformanceCounterCategory> cannot be accessed.  \n  \n [!code-cs[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/add/codesnippet/csharp/p-system.diagnostics.per_1_1.cs)]\n [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/add/codesnippet/visualbasic/p-system.diagnostics.per_1_1.vb)]"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "The name of the computer on which the performance counter category and its associated counters exist."
  overload: System.Diagnostics.PerformanceCounterCategory.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The MachineName syntax is invalid."
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounterCategory.ReadCategory
  id: ReadCategory
  parent: System.Diagnostics.PerformanceCounterCategory
  langs:
  - csharp
  name: ReadCategory()
  nameWithType: PerformanceCounterCategory.ReadCategory()
  fullName: System.Diagnostics.PerformanceCounterCategory.ReadCategory()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Reads all the counter and performance object instance data that is associated with this performance counter category."
  remarks: "You must set the <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> property before you call ReadCategory.       Reading the entire category at once can be as efficient as reading a single counter because of the way that the system provides the data.      > [!NOTE] >  To read performance counters in Windows Vista and later, Windows XP Professional x64 Edition, or Windows Server 2003, you must either be a member of the Performance Monitor Users group or have administrative privileges.   >    >  To avoid having to elevate your privileges to access performance counters in Windows Vista and later, add yourself to the Performance Monitor Users group.   >    >  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses performance counters, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator."
  example:
  - "The following code example creates a <xref:System.Diagnostics.PerformanceCounterCategory> for a specified <xref:System.Diagnostics.PerformanceCounterCategory> name. It then uses ReadCategory to return an <xref:System.Diagnostics.InstanceDataCollectionCollection> that contains instance data for all the instances of the <xref:System.Diagnostics.PerformanceCounter> objects within the <xref:System.Diagnostics.PerformanceCounterCategory>.  \n  \n [!code-cs[System.Diagnostics.InstanceData.CopyTo#6](~/add/codesnippet/csharp/m-system.diagnostics.per_9_1.cs)]\n [!code-vb[System.Diagnostics.InstanceData.CopyTo#6](~/add/codesnippet/visualbasic/m-system.diagnostics.per_9_1.vb)]"
  syntax:
    content: public System.Diagnostics.InstanceDataCollectionCollection ReadCategory ();
    parameters: []
    return:
      type: System.Diagnostics.InstanceDataCollectionCollection
      description: "An <xref href=&quot;System.Diagnostics.InstanceDataCollectionCollection&quot;></xref> that contains the counter and performance object instance data for the category."
  overload: System.Diagnostics.PerformanceCounterCategory.ReadCategory*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName*> property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. The property might not have been set."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A call to an underlying system API failed."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Code that is executing without administrative privileges attempted to read a performance counter."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Diagnostics.PerformanceCounterCategory.#ctor
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: PerformanceCounterCategory()
  nameWithType: PerformanceCounterCategory.PerformanceCounterCategory()
  fullName: System.Diagnostics.PerformanceCounterCategory.PerformanceCounterCategory()
- uid: System.Diagnostics.PerformanceCounterCategory.#ctor(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: PerformanceCounterCategory(String)
  nameWithType: PerformanceCounterCategory.PerformanceCounterCategory(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.PerformanceCounterCategory(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.PerformanceCounterCategory.#ctor(System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: PerformanceCounterCategory(String,String)
  nameWithType: PerformanceCounterCategory.PerformanceCounterCategory(String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.PerformanceCounterCategory(String,String)
- uid: System.Diagnostics.PerformanceCounterCategory.CategoryHelp
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: CategoryHelp
  nameWithType: PerformanceCounterCategory.CategoryHelp
  fullName: System.Diagnostics.PerformanceCounterCategory.CategoryHelp
- uid: System.Diagnostics.PerformanceCounterCategory.CategoryName
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: CategoryName
  nameWithType: PerformanceCounterCategory.CategoryName
  fullName: System.Diagnostics.PerformanceCounterCategory.CategoryName
- uid: System.Diagnostics.PerformanceCounterCategory.CategoryType
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: CategoryType
  nameWithType: PerformanceCounterCategory.CategoryType
  fullName: System.Diagnostics.PerformanceCounterCategory.CategoryType
- uid: System.Diagnostics.PerformanceCounterCategoryType
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounterCategoryType
  nameWithType: PerformanceCounterCategoryType
  fullName: System.Diagnostics.PerformanceCounterCategoryType
- uid: System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: CounterExists(String)
  nameWithType: PerformanceCounterCategory.CounterExists(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.CounterExists(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: CounterExists(String,String)
  nameWithType: PerformanceCounterCategory.CounterExists(String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.CounterExists(String,String)
- uid: System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: CounterExists(String,String,String)
  nameWithType: PerformanceCounterCategory.CounterExists(String,String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.CounterExists(String,String,String)
- uid: System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: Create(String,String,CounterCreationDataCollection)
  nameWithType: PerformanceCounterCategory.Create(String,String,CounterCreationDataCollection)
  fullName: System.Diagnostics.PerformanceCounterCategory.Create(String,String,CounterCreationDataCollection)
- uid: System.Diagnostics.PerformanceCounterCategory
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounterCategory
  nameWithType: PerformanceCounterCategory
  fullName: System.Diagnostics.PerformanceCounterCategory
- uid: System.Diagnostics.CounterCreationDataCollection
  parent: System.Diagnostics
  isExternal: false
  name: CounterCreationDataCollection
  nameWithType: CounterCreationDataCollection
  fullName: System.Diagnostics.CounterCreationDataCollection
- uid: System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: Create(String,String,PerformanceCounterCategoryType,CounterCreationDataCollection)
  nameWithType: PerformanceCounterCategory.Create(String,String,PerformanceCounterCategoryType,CounterCreationDataCollection)
  fullName: System.Diagnostics.PerformanceCounterCategory.Create(String,String,PerformanceCounterCategoryType,CounterCreationDataCollection)
- uid: System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: Create(String,String,String,String)
  nameWithType: PerformanceCounterCategory.Create(String,String,String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.Create(String,String,String,String)
- uid: System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: Create(String,String,PerformanceCounterCategoryType,String,String)
  nameWithType: PerformanceCounterCategory.Create(String,String,PerformanceCounterCategoryType,String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.Create(String,String,PerformanceCounterCategoryType,String,String)
- uid: System.Diagnostics.PerformanceCounterCategory.Delete(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: Delete(String)
  nameWithType: PerformanceCounterCategory.Delete(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.Delete(String)
- uid: System.Diagnostics.PerformanceCounterCategory.Exists(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: Exists(String)
  nameWithType: PerformanceCounterCategory.Exists(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.Exists(String)
- uid: System.Diagnostics.PerformanceCounterCategory.Exists(System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: Exists(String,String)
  nameWithType: PerformanceCounterCategory.Exists(String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.Exists(String,String)
- uid: System.Diagnostics.PerformanceCounterCategory.GetCategories
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: GetCategories()
  nameWithType: PerformanceCounterCategory.GetCategories()
  fullName: System.Diagnostics.PerformanceCounterCategory.GetCategories()
- uid: System.Diagnostics.PerformanceCounterCategory[]
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounterCategory
  nameWithType: PerformanceCounterCategory
  fullName: System.Diagnostics.PerformanceCounterCategory[]
  spec.csharp:
  - uid: System.Diagnostics.PerformanceCounterCategory
    name: PerformanceCounterCategory
    nameWithType: PerformanceCounterCategory
    fullName: PerformanceCounterCategory[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.PerformanceCounterCategory.GetCategories(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: GetCategories(String)
  nameWithType: PerformanceCounterCategory.GetCategories(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.GetCategories(String)
- uid: System.Diagnostics.PerformanceCounterCategory.GetCounters
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: GetCounters()
  nameWithType: PerformanceCounterCategory.GetCounters()
  fullName: System.Diagnostics.PerformanceCounterCategory.GetCounters()
- uid: System.Diagnostics.PerformanceCounter[]
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounter
  nameWithType: PerformanceCounter
  fullName: System.Diagnostics.PerformanceCounter[]
  spec.csharp:
  - uid: System.Diagnostics.PerformanceCounter
    name: PerformanceCounter
    nameWithType: PerformanceCounter
    fullName: PerformanceCounter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.PerformanceCounterCategory.GetCounters(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: GetCounters(String)
  nameWithType: PerformanceCounterCategory.GetCounters(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.GetCounters(String)
- uid: System.Diagnostics.PerformanceCounterCategory.GetInstanceNames
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: GetInstanceNames()
  nameWithType: PerformanceCounterCategory.GetInstanceNames()
  fullName: System.Diagnostics.PerformanceCounterCategory.GetInstanceNames()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: InstanceExists(String)
  nameWithType: PerformanceCounterCategory.InstanceExists(String)
  fullName: System.Diagnostics.PerformanceCounterCategory.InstanceExists(String)
- uid: System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: InstanceExists(String,String)
  nameWithType: PerformanceCounterCategory.InstanceExists(String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.InstanceExists(String,String)
- uid: System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: InstanceExists(String,String,String)
  nameWithType: PerformanceCounterCategory.InstanceExists(String,String,String)
  fullName: System.Diagnostics.PerformanceCounterCategory.InstanceExists(String,String,String)
- uid: System.Diagnostics.PerformanceCounterCategory.MachineName
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: MachineName
  nameWithType: PerformanceCounterCategory.MachineName
  fullName: System.Diagnostics.PerformanceCounterCategory.MachineName
- uid: System.Diagnostics.PerformanceCounterCategory.ReadCategory
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: ReadCategory()
  nameWithType: PerformanceCounterCategory.ReadCategory()
  fullName: System.Diagnostics.PerformanceCounterCategory.ReadCategory()
- uid: System.Diagnostics.InstanceDataCollectionCollection
  parent: System.Diagnostics
  isExternal: false
  name: InstanceDataCollectionCollection
  nameWithType: InstanceDataCollectionCollection
  fullName: System.Diagnostics.InstanceDataCollectionCollection
- uid: System.Diagnostics.PerformanceCounterCategory.#ctor*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: PerformanceCounterCategory
  nameWithType: PerformanceCounterCategory.PerformanceCounterCategory
- uid: System.Diagnostics.PerformanceCounterCategory.CategoryHelp*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: CategoryHelp
  nameWithType: PerformanceCounterCategory.CategoryHelp
- uid: System.Diagnostics.PerformanceCounterCategory.CategoryName*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: CategoryName
  nameWithType: PerformanceCounterCategory.CategoryName
- uid: System.Diagnostics.PerformanceCounterCategory.CategoryType*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: CategoryType
  nameWithType: PerformanceCounterCategory.CategoryType
- uid: System.Diagnostics.PerformanceCounterCategory.CounterExists*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: CounterExists
  nameWithType: PerformanceCounterCategory.CounterExists
- uid: System.Diagnostics.PerformanceCounterCategory.Create*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: Create
  nameWithType: PerformanceCounterCategory.Create
- uid: System.Diagnostics.PerformanceCounterCategory.Delete*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: Delete
  nameWithType: PerformanceCounterCategory.Delete
- uid: System.Diagnostics.PerformanceCounterCategory.Exists*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: Exists
  nameWithType: PerformanceCounterCategory.Exists
- uid: System.Diagnostics.PerformanceCounterCategory.GetCategories*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: GetCategories
  nameWithType: PerformanceCounterCategory.GetCategories
- uid: System.Diagnostics.PerformanceCounterCategory.GetCounters*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: GetCounters
  nameWithType: PerformanceCounterCategory.GetCounters
- uid: System.Diagnostics.PerformanceCounterCategory.GetInstanceNames*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: GetInstanceNames
  nameWithType: PerformanceCounterCategory.GetInstanceNames
- uid: System.Diagnostics.PerformanceCounterCategory.InstanceExists*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: InstanceExists
  nameWithType: PerformanceCounterCategory.InstanceExists
- uid: System.Diagnostics.PerformanceCounterCategory.MachineName*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: MachineName
  nameWithType: PerformanceCounterCategory.MachineName
- uid: System.Diagnostics.PerformanceCounterCategory.ReadCategory*
  parent: System.Diagnostics.PerformanceCounterCategory
  isExternal: false
  name: ReadCategory
  nameWithType: PerformanceCounterCategory.ReadCategory
