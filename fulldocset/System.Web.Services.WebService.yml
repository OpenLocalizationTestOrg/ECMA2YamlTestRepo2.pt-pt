### YamlMime:ManagedReference
items:
- uid: System.Web.Services.WebService
  id: WebService
  children:
  - System.Web.Services.WebService.#ctor
  - System.Web.Services.WebService.Application
  - System.Web.Services.WebService.Context
  - System.Web.Services.WebService.Server
  - System.Web.Services.WebService.Session
  - System.Web.Services.WebService.SoapVersion
  - System.Web.Services.WebService.User
  langs:
  - csharp
  name: WebService
  nameWithType: WebService
  fullName: System.Web.Services.WebService
  type: Class
  summary: "Defines the optional base class for XML Web services, which provides direct access to common ASP.NET objects, such as application and session state."
  remarks: "If you don&quot;t need access to the common ASP.NET objects, you can still create an XML Web service without deriving from WebService. Additional ASP.NET objects can be accessed through <xref:System.Web.Services.WebService.Context%2A>.       XML Web service methods that have the <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute.OneWay%2A> property of either <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> or <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> set to `true`, do not have access to their <xref:System.Web.HttpContext>. As such, accessing any of the properties of the WebService class, from within that XML Web service method, return `null`.       If you are using the .NET Framework version 1.0 XML Web service methods that have either the <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> or <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> attribute applied to them with the <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> property of set to `true`, do not have access to their <xref:System.Web.HttpContext> using the static <xref:System.Web.HttpContext.Current%2A> property. To access the <xref:System.Web.HttpContext>, derive the class implementing the XML Web service method from WebService and access the <xref:System.Web.Services.WebService.Context%2A> property."
  example:
  - "The example below creates an XML Web service, deriving from WebService, in order to use the <xref:System.Web.Services.WebService.Context%2A> property to obtain the time of the request on the server.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public class WebService : System.ComponentModel.MarshalByValueComponent'
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements: []
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.Site
  - System.ComponentModel.MarshalByValueComponent.ToString
  platform:
  - net462
- uid: System.Web.Services.WebService.#ctor
  id: '#ctor'
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: WebService()
  nameWithType: WebService.WebService()
  fullName: System.Web.Services.WebService.WebService()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Services.WebService&quot;></xref> class."
  remarks: ''
  example:
  - '[!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]'
  syntax:
    content: public WebService ();
    parameters: []
  overload: System.Web.Services.WebService.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.Application
  id: Application
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Application
  nameWithType: WebService.Application
  fullName: System.Web.Services.WebService.Application
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Gets the application object for the current HTTP request."
  remarks: "XML Web services can use both application state and session state. Application state is maintained across all sessions accessing an XML Web service regardless of whether session state is turned off for a method(by using the <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A> property of the <xref:System.Web.Services.WebMethodAttribute>)."
  example:
  - "The example below demonstrates a hit counter, incrementing the count every time a browser calls the XML Web service method.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.HttpApplicationState Application { get; }
    return:
      type: System.Web.HttpApplicationState
      description: "An <xref href=&quot;System.Web.HttpApplicationState&quot;></xref> object."
  overload: System.Web.Services.WebService.Application*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.Context
  id: Context
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Context
  nameWithType: WebService.Context
  fullName: System.Web.Services.WebService.Context
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Gets the ASP.NET <xref href=&quot;System.Web.HttpContext&quot;></xref> for the current request, which encapsulates all HTTP-specific context used by the HTTP server to process Web requests."
  remarks: "XML Web service methods that have either the <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> or <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> attribute applied to them with the <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> property of set to `true`, do not have access to their <xref:System.Web.HttpContext> using the static <xref:System.Web.HttpContext.Current%2A> property. To access the <xref:System.Web.HttpContext>, derive the class implementing the XML Web service method from <xref:System.Web.Services.WebService> and access the Context property."
  example:
  - "The Example below uses the Context property to obtain the time of the request on the server.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.HttpContext Context { get; }
    return:
      type: System.Web.HttpContext
      description: "The ASP.NET <xref href=&quot;System.Web.HttpContext&quot;></xref> for the current request."
  overload: System.Web.Services.WebService.Context*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "<code>Context</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Services.WebService.Server
  id: Server
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Server
  nameWithType: WebService.Server
  fullName: System.Web.Services.WebService.Server
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Gets the <xref href=&quot;System.Web.HttpServerUtility&quot;></xref> for the current request."
  remarks: "The <xref:System.Web.HttpServerUtility> class provides several methods that can be used in the processing of Web requests, including <xref:System.Web.HttpServerUtility.CreateObject%2A> (for instantiating COM objects)."
  example:
  - "The example below returns the computer name of the Web server using the Server property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.HttpServerUtility Server { get; }
    return:
      type: System.Web.HttpServerUtility
      description: "An <xref href=&quot;System.Web.HttpServerUtility&quot;></xref> object."
  overload: System.Web.Services.WebService.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.Session
  id: Session
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: Session
  nameWithType: WebService.Session
  fullName: System.Web.Services.WebService.Session
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Gets the <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;></xref> instance for the current request."
  remarks: ''
  example:
  - "The example below uses session state to determine how many times a particular session accesses the XML Web service method `SessionHitCounter`. In this example, the <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A> property of the <xref:System.Web.Services.WebMethodAttribute> is set to `true` in order to gain access to session state.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Web.SessionState.HttpSessionState Session { get; }
    return:
      type: System.Web.SessionState.HttpSessionState
      description: "An <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;></xref> representing the ASP.NET session state object for the current session."
  overload: System.Web.Services.WebService.Session*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.SoapVersion
  id: SoapVersion
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: SoapVersion
  nameWithType: WebService.SoapVersion
  fullName: System.Web.Services.WebService.SoapVersion
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Gets the version of the SOAP protocol used to make the SOAP request to the XML Web service."
  remarks: "If the SOAP protocol was not used to communicate with the XML Web service, such as HTTP-GET or HTTP-POST, the value of the SoapVersion property is <xref:System.Web.Services.Protocols.SoapProtocolVersion>.       For XML Web services that do not derive from the <xref:System.Web.Services.WebService> class, the version of the SOAP protocol used to make the SOAP request to the XML Web service can be also be accessed using the &quot;WebServiceSoapVersion&quot; entry of the <xref:System.Web.HttpContext.Items%2A?displayProperty=fullName> property. That entry is of type <xref:System.Web.Services.Protocols.SoapProtocolVersion>."
  syntax:
    content: public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; }
    return:
      type: System.Web.Services.Protocols.SoapProtocolVersion
      description: "One of the <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;></xref> values. The default is <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;></xref>."
  overload: System.Web.Services.WebService.SoapVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.WebService.User
  id: User
  parent: System.Web.Services.WebService
  langs:
  - csharp
  name: User
  nameWithType: WebService.User
  fullName: System.Web.Services.WebService.User
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services
  summary: "Gets the ASP.NET server <xref:System.Web.HttpContext.User*> object. Can be used to authenticate whether a user is authorized to execute the request."
  remarks: "Both Internet Information Services (IIS) and the .NET Framework need to be configured for authentication in order for the User property to be meaningful. Authentication is the process of accepting credentials from a user and validating those credentials against some authority. If the credentials are valid, you have an authenticated identity. Authentication in the .NET Framework is configured by placing entries in the web.config file.  \n  \n The following example demonstrates the entries you place in the web.config file to enable Windows authentication.  \n  \n```  \n<security>  \n <authentication mode=\"Windows\"> <!-- Mode Options are Windows, Cookie, Passport and None or Empty String -->  \n </authentication>  \n </security>  \n```  \n  \n For more information on setting up security for an XML Web service see [&#91;\\<topic://cpconSecuringASPNETWebServices>&#93;](http://msdn.microsoft.com/en-us/354b2ab1-2782-4542-b32a-dc560178b90c)."
  example:
  - "The example below looks up the authenticated user name and returns that name.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "A <xref:System.Security.Principal.IPrincipal> representing the ASP.NET server <xref:System.Web.HttpContext.User*> object."
  overload: System.Web.Services.WebService.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Web.Services.WebService.#ctor
  parent: System.Web.Services.WebService
  isExternal: false
  name: WebService()
  nameWithType: WebService.WebService()
  fullName: System.Web.Services.WebService.WebService()
- uid: System.Web.Services.WebService.Application
  parent: System.Web.Services.WebService
  isExternal: false
  name: Application
  nameWithType: WebService.Application
  fullName: System.Web.Services.WebService.Application
- uid: System.Web.HttpApplicationState
  parent: System.Web
  isExternal: false
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
- uid: System.Web.Services.WebService.Context
  parent: System.Web.Services.WebService
  isExternal: false
  name: Context
  nameWithType: WebService.Context
  fullName: System.Web.Services.WebService.Context
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.Services.WebService.Server
  parent: System.Web.Services.WebService
  isExternal: false
  name: Server
  nameWithType: WebService.Server
  fullName: System.Web.Services.WebService.Server
- uid: System.Web.HttpServerUtility
  parent: System.Web
  isExternal: false
  name: HttpServerUtility
  nameWithType: HttpServerUtility
  fullName: System.Web.HttpServerUtility
- uid: System.Web.Services.WebService.Session
  parent: System.Web.Services.WebService
  isExternal: false
  name: Session
  nameWithType: WebService.Session
  fullName: System.Web.Services.WebService.Session
- uid: System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: false
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.Services.WebService.SoapVersion
  parent: System.Web.Services.WebService
  isExternal: false
  name: SoapVersion
  nameWithType: WebService.SoapVersion
  fullName: System.Web.Services.WebService.SoapVersion
- uid: System.Web.Services.Protocols.SoapProtocolVersion
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapProtocolVersion
  nameWithType: SoapProtocolVersion
  fullName: System.Web.Services.Protocols.SoapProtocolVersion
- uid: System.Web.Services.WebService.User
  parent: System.Web.Services.WebService
  isExternal: false
  name: User
  nameWithType: WebService.User
  fullName: System.Web.Services.WebService.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.Services.WebService.#ctor*
  parent: System.Web.Services.WebService
  isExternal: false
  name: WebService
  nameWithType: WebService.WebService
- uid: System.Web.Services.WebService.Application*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Application
  nameWithType: WebService.Application
- uid: System.Web.Services.WebService.Context*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Context
  nameWithType: WebService.Context
- uid: System.Web.Services.WebService.Server*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Server
  nameWithType: WebService.Server
- uid: System.Web.Services.WebService.Session*
  parent: System.Web.Services.WebService
  isExternal: false
  name: Session
  nameWithType: WebService.Session
- uid: System.Web.Services.WebService.SoapVersion*
  parent: System.Web.Services.WebService
  isExternal: false
  name: SoapVersion
  nameWithType: WebService.SoapVersion
- uid: System.Web.Services.WebService.User*
  parent: System.Web.Services.WebService
  isExternal: false
  name: User
  nameWithType: WebService.User
