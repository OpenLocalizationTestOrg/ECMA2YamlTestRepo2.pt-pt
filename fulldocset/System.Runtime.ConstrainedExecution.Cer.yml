### YamlMime:ManagedReference
items:
- uid: System.Runtime.ConstrainedExecution.Cer
  id: Cer
  children:
  - System.Runtime.ConstrainedExecution.Cer.MayFail
  - System.Runtime.ConstrainedExecution.Cer.None
  - System.Runtime.ConstrainedExecution.Cer.Success
  langs:
  - csharp
  name: Cer
  nameWithType: Cer
  fullName: System.Runtime.ConstrainedExecution.Cer
  type: Enum
  summary: "Specifies a method&quot;s behavior when called within a constrained execution region."
  remarks: "The Cer enumeration specifies the behavior of a method, type, or assembly within a constrained execution region (CER). Use one of the three available values to indicate that the entity will succeed, has no knowledge of a CER, or might (deterministically) be able to report success or failure.       A CER provides guarantees that the region of code will execute uninterrupted even if an asynchronous exception such as an aborted thread out-of-memory exception, or stack overflow is raised."
  example:
  - "The following code example demonstrates the use of the Cer enumeration when specifying a constrained execution region for a method. This code example is part of a larger example provided for the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> constructor.  \n  \n [!code-vb[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/visualbasic/t-system.runtime.constra_2_1.vb)]\n [!code-cs[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/csharp/t-system.runtime.constra_2_1.cs)]"
  syntax:
    content: public enum Cer
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.MayFail
  id: MayFail
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: MayFail
  nameWithType: Cer.MayFail
  fullName: System.Runtime.ConstrainedExecution.Cer.MayFail
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: "In the face of exceptional conditions, the method might fail. In this case, the method will report back to the calling method whether it succeeded or failed. The method must have a CER around the method body to ensure that it can report the return value."
  syntax:
    content: MayFail
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.None
  id: None
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: None
  nameWithType: Cer.None
  fullName: System.Runtime.ConstrainedExecution.Cer.None
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: 'The method, type, or assembly has no concept of a CER. It does not take advantage of CER guarantees. This implies the following:'
  remarks: "-   In the face of exceptional conditions the method might fail.      -   The method might or might not report that it failed (it is non-deterministic).      -   The method is not written with CERs in mind (which is the most likely scenario).       If a method, type, or assembly is not explicitly marked to succeed, it is implicitly marked as `Cer.None`."
  syntax:
    content: None
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.Success
  id: Success
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: Success
  nameWithType: Cer.Success
  fullName: System.Runtime.ConstrainedExecution.Cer.Success
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: "In the face of exceptional conditions, the method is guaranteed to succeed. You should always construct a CER around the method that is called, even when it is called from within a non-CER region. A method is successful if it accomplishes what is intended. For example, marking <xref:System.Collections.ArrayList.Count*> with `ReliabilityContractAttribute(Cer.Success)` implies that when it is run under a CER, it always returns a count of the number of elements in the <xref href=&quot;System.Collections.ArrayList&quot;></xref> and it can never leave the internal fields in an undetermined state."
  syntax:
    content: Success
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Runtime.ConstrainedExecution.Cer.MayFail
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: MayFail
  nameWithType: Cer.MayFail
  fullName: System.Runtime.ConstrainedExecution.Cer.MayFail
- uid: System.Runtime.ConstrainedExecution.Cer
  parent: System.Runtime.ConstrainedExecution
  isExternal: false
  name: Cer
  nameWithType: Cer
  fullName: System.Runtime.ConstrainedExecution.Cer
- uid: System.Runtime.ConstrainedExecution.Cer.None
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: None
  nameWithType: Cer.None
  fullName: System.Runtime.ConstrainedExecution.Cer.None
- uid: System.Runtime.ConstrainedExecution.Cer.Success
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: Success
  nameWithType: Cer.Success
  fullName: System.Runtime.ConstrainedExecution.Cer.Success
