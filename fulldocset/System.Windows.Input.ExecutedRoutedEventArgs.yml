### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ExecutedRoutedEventArgs
  id: ExecutedRoutedEventArgs
  children:
  - System.Windows.Input.ExecutedRoutedEventArgs.Command
  - System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.ExecutedRoutedEventArgs.Parameter
  langs:
  - csharp
  name: ExecutedRoutedEventArgs
  nameWithType: ExecutedRoutedEventArgs
  fullName: System.Windows.Input.ExecutedRoutedEventArgs
  type: Class
  summary: "Provides data for the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> routed events."
  remarks: "<xref:System.Windows.Input.ExecutedRoutedEventHandler> represents the method that implements the command logic of a <xref:System.Windows.Input.RoutedCommand>.  Separating the implementation logic from the command allows the command to be invoked from different sources and types and enables the centralization of command logic.       This event data class is also used for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName> and <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=fullName>. But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.       For more information on commanding, see [Commanding Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that opens a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandwithhandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandwithhandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: 'public sealed class ExecutedRoutedEventArgs : System.Windows.RoutedEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Command
  id: Command
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  langs:
  - csharp
  name: Command
  nameWithType: ExecutedRoutedEventArgs.Command
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets the command that was invoked."
  remarks: "The command associated with the event can be cast to the specific implementation of <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>, if the type is known."
  example:
  - "The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that handles multiple commands. The handler checks the Command property on the <xref:System.Windows.Input.ExecutedRoutedEventArgs> to determine which method to call.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewmultiplecmdhander)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewmultiplecmdhander)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; }
    return:
      type: System.Windows.Input.ICommand
      description: "The command associated with this event."
  overload: System.Windows.Input.ExecutedRoutedEventArgs.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ExecutedRoutedEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object target);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "To be added."
    - id: target
      type: System.Object
      description: "To be added."
  overload: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Parameter
  id: Parameter
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  langs:
  - csharp
  name: Parameter
  nameWithType: ExecutedRoutedEventArgs.Parameter
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.Parameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets data parameter of the command."
  remarks: "This property represents a generic data parameter that is defined by the particular command.       If this parameter is not needed, `null` can be passed.       Normally, the Parameter is used to pass specific information to the command when it is executed.  The type of the data is defined by the command."
  example:
  - "The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> for a custom <xref:System.Windows.Input.RoutedCommand>.  The handler updates a <xref:System.Windows.Controls.TextBox> with the current time and the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control that is passed to the handler through the Parameter.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampleexecuted)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampleexecuted)]"
  syntax:
    content: public object Parameter { get; }
    return:
      type: System.Object
      description: "The command-specific data. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Input.ExecutedRoutedEventArgs.Parameter*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.RoutedEventArgs
  isExternal: false
  name: System.Windows.RoutedEventArgs
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Command
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: Command
  nameWithType: ExecutedRoutedEventArgs.Command
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.Command
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ExecutedRoutedEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Parameter
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: Parameter
  nameWithType: ExecutedRoutedEventArgs.Parameter
  fullName: System.Windows.Input.ExecutedRoutedEventArgs.Parameter
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Command*
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: Command
  nameWithType: ExecutedRoutedEventArgs.Command
- uid: System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: ExecutedRoutedEventArgs.InvokeEventHandler
- uid: System.Windows.Input.ExecutedRoutedEventArgs.Parameter*
  parent: System.Windows.Input.ExecutedRoutedEventArgs
  isExternal: false
  name: Parameter
  nameWithType: ExecutedRoutedEventArgs.Parameter
