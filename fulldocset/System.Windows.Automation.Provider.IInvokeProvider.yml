### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.Provider.IInvokeProvider
  id: IInvokeProvider
  children:
  - System.Windows.Automation.Provider.IInvokeProvider.Invoke
  langs:
  - csharp
  name: IInvokeProvider
  nameWithType: IInvokeProvider
  fullName: System.Windows.Automation.Provider.IInvokeProvider
  type: Interface
  summary: "Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated."
  remarks: "Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.InvokePattern> control pattern.       Controls implement IInvokeProvider if the same behavior is not exposed through another control pattern provider. For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control should not implement IInvokeProvider."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")]

      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]

      public interface IInvokeProvider
  implements: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke
  id: Invoke
  parent: System.Windows.Automation.Provider.IInvokeProvider
  langs:
  - csharp
  name: Invoke()
  nameWithType: IInvokeProvider.Invoke()
  fullName: System.Windows.Automation.Provider.IInvokeProvider.Invoke()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "Sends a request to activate a control and initiate its single, unambiguous action."
  remarks: "Invoke is an asynchronous call and must return immediately without blocking.      > [!NOTE] >  This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked. Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.       Invoke raises the <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> event. If possible, the event should be raised after the control has completed its associated action.       <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> should be raised before servicing the Invoke request in the following scenarios:      -   It is not possible or practical to wait until the action is complete.      -   The action requires user interaction.      -   The action is time-consuming and will cause the calling client to block for a significant length of time."
  example:
  - "The following example implements the Invoke method on the MouseDown event handler of a control. Assume that `providerControl` is a member variable that was initialized when the class was constructed.  \n  \n [!code-cs[UIAProvider_snip#106](~/add/codesnippet/csharp/UIAProvider/Invoker.cs#106)]"
  syntax:
    content: public void Invoke ();
    parameters: []
  overload: System.Windows.Automation.Provider.IInvokeProvider.Invoke*
  exceptions:
  - type: System.Windows.Automation.ElementNotEnabledException
    commentId: T:System.Windows.Automation.ElementNotEnabledException
    description: "If the control is not enabled."
  platform:
  - net462
references:
- uid: System.Windows.Automation.ElementNotEnabledException
  parent: System.Windows.Automation
  isExternal: false
  name: ElementNotEnabledException
  nameWithType: ElementNotEnabledException
  fullName: System.Windows.Automation.ElementNotEnabledException
- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke
  parent: System.Windows.Automation.Provider.IInvokeProvider
  isExternal: false
  name: Invoke()
  nameWithType: IInvokeProvider.Invoke()
  fullName: System.Windows.Automation.Provider.IInvokeProvider.Invoke()
- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke*
  parent: System.Windows.Automation.Provider.IInvokeProvider
  isExternal: false
  name: Invoke
  nameWithType: IInvokeProvider.Invoke
