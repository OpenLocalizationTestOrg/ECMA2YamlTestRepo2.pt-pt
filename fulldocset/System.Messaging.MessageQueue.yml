### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueue
  id: MessageQueue
  children:
  - System.Messaging.MessageQueue.#ctor
  - System.Messaging.MessageQueue.#ctor(System.String)
  - System.Messaging.MessageQueue.#ctor(System.String,System.Boolean)
  - System.Messaging.MessageQueue.#ctor(System.String,System.Messaging.QueueAccessMode)
  - System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean)
  - System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)
  - System.Messaging.MessageQueue.AccessMode
  - System.Messaging.MessageQueue.Authenticate
  - System.Messaging.MessageQueue.BasePriority
  - System.Messaging.MessageQueue.BeginPeek
  - System.Messaging.MessageQueue.BeginPeek(System.TimeSpan)
  - System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object)
  - System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)
  - System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)
  - System.Messaging.MessageQueue.BeginReceive
  - System.Messaging.MessageQueue.BeginReceive(System.TimeSpan)
  - System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object)
  - System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)
  - System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)
  - System.Messaging.MessageQueue.CanRead
  - System.Messaging.MessageQueue.CanWrite
  - System.Messaging.MessageQueue.Category
  - System.Messaging.MessageQueue.ClearConnectionCache
  - System.Messaging.MessageQueue.Close
  - System.Messaging.MessageQueue.Create(System.String)
  - System.Messaging.MessageQueue.Create(System.String,System.Boolean)
  - System.Messaging.MessageQueue.CreateCursor
  - System.Messaging.MessageQueue.CreateTime
  - System.Messaging.MessageQueue.DefaultPropertiesToSend
  - System.Messaging.MessageQueue.Delete(System.String)
  - System.Messaging.MessageQueue.DenySharedReceive
  - System.Messaging.MessageQueue.Dispose(System.Boolean)
  - System.Messaging.MessageQueue.EnableConnectionCache
  - System.Messaging.MessageQueue.EncryptionRequired
  - System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)
  - System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)
  - System.Messaging.MessageQueue.Exists(System.String)
  - System.Messaging.MessageQueue.FormatName
  - System.Messaging.MessageQueue.Formatter
  - System.Messaging.MessageQueue.GetAllMessages
  - System.Messaging.MessageQueue.GetEnumerator
  - System.Messaging.MessageQueue.GetMachineId(System.String)
  - System.Messaging.MessageQueue.GetMessageEnumerator
  - System.Messaging.MessageQueue.GetMessageEnumerator2
  - System.Messaging.MessageQueue.GetMessageQueueEnumerator
  - System.Messaging.MessageQueue.GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)
  - System.Messaging.MessageQueue.GetPrivateQueuesByMachine(System.String)
  - System.Messaging.MessageQueue.GetPublicQueues
  - System.Messaging.MessageQueue.GetPublicQueues(System.Messaging.MessageQueueCriteria)
  - System.Messaging.MessageQueue.GetPublicQueuesByCategory(System.Guid)
  - System.Messaging.MessageQueue.GetPublicQueuesByLabel(System.String)
  - System.Messaging.MessageQueue.GetPublicQueuesByMachine(System.String)
  - System.Messaging.MessageQueue.GetSecurityContext
  - System.Messaging.MessageQueue.Id
  - System.Messaging.MessageQueue.InfiniteQueueSize
  - System.Messaging.MessageQueue.InfiniteTimeout
  - System.Messaging.MessageQueue.Label
  - System.Messaging.MessageQueue.LastModifyTime
  - System.Messaging.MessageQueue.MachineName
  - System.Messaging.MessageQueue.MaximumJournalSize
  - System.Messaging.MessageQueue.MaximumQueueSize
  - System.Messaging.MessageQueue.MessageReadPropertyFilter
  - System.Messaging.MessageQueue.MulticastAddress
  - System.Messaging.MessageQueue.Path
  - System.Messaging.MessageQueue.Peek
  - System.Messaging.MessageQueue.Peek(System.TimeSpan)
  - System.Messaging.MessageQueue.Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)
  - System.Messaging.MessageQueue.PeekByCorrelationId(System.String)
  - System.Messaging.MessageQueue.PeekByCorrelationId(System.String,System.TimeSpan)
  - System.Messaging.MessageQueue.PeekById(System.String)
  - System.Messaging.MessageQueue.PeekById(System.String,System.TimeSpan)
  - System.Messaging.MessageQueue.PeekByLookupId(System.Int64)
  - System.Messaging.MessageQueue.PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)
  - System.Messaging.MessageQueue.PeekCompleted
  - System.Messaging.MessageQueue.Purge
  - System.Messaging.MessageQueue.QueueName
  - System.Messaging.MessageQueue.ReadHandle
  - System.Messaging.MessageQueue.Receive
  - System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageQueue.Receive(System.TimeSpan)
  - System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor)
  - System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)
  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan)
  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageQueue.ReceiveById(System.String)
  - System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan)
  - System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageQueue.ReceiveByLookupId(System.Int64)
  - System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageQueue.ReceiveCompleted
  - System.Messaging.MessageQueue.Refresh
  - System.Messaging.MessageQueue.ResetPermissions
  - System.Messaging.MessageQueue.Send(System.Object)
  - System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageQueue.Send(System.Object,System.String)
  - System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageQueue.SetPermissions(System.Messaging.AccessControlList)
  - System.Messaging.MessageQueue.SetPermissions(System.Messaging.MessageQueueAccessControlEntry)
  - System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)
  - System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)
  - System.Messaging.MessageQueue.SynchronizingObject
  - System.Messaging.MessageQueue.Transactional
  - System.Messaging.MessageQueue.UseJournalQueue
  - System.Messaging.MessageQueue.WriteHandle
  langs:
  - csharp
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
  type: Class
  summary: "Provides access to a queue on a Message Queuing server."
  remarks: "The Message Queuing technology allows applications running at different times to communicate across heterogeneous networks and systems that might be temporarily offline. Applications send, receive, or peek (read without removing) messages from queues. Message Queuing is an optional component of [!INCLUDE[Win2kFamily](~/add/includes/win2kfamily-md.md)] and Windows NT, and must be installed separately.  \n  \n The MessageQueue class is a wrapper around Message Queuing. There are multiple versions of Message Queuing, and using the MessageQueue class can result in slightly different behavior, depending on the operating system you are using. For information about specific features of each version of Message Queuing, see the topic \"What's New in Message Queuing\" in the Platform SDK in MSDN.  \n  \n The MessageQueue class provides a reference to a Message Queuing queue. You can specify a path in the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor to connect to an existing resource, or you can create a new queue on the server. Before you can call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, you must associate the new instance of the MessageQueue class with an existing queue. At that point, you can manipulate the queue properties such as <xref:System.Messaging.MessageQueue.Category%2A> and <xref:System.Messaging.MessageQueue.Label%2A>.  \n  \n MessageQueue supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. The asynchronous methods, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A>, allow the main application tasks to continue in a separate thread until a message arrives in the queue. These methods work by using callback objects and state objects to communicate information between threads.  \n  \n When you create a new instance of the MessageQueue class, you are not creating a new Message Queuing queue. Instead, you can use the <xref:System.Messaging.MessageQueue.Create%28System.String%29>, <xref:System.Messaging.MessageQueue.Delete%28System.String%29>, and <xref:System.Messaging.MessageQueue.Purge%2A> methods to manage queues on the server.  \n  \n Unlike <xref:System.Messaging.MessageQueue.Purge%2A>, <xref:System.Messaging.MessageQueue.Create%28System.String%29> and <xref:System.Messaging.MessageQueue.Delete%28System.String%29> are `static` members, so you can call them without creating a new instance of the MessageQueue class.  \n  \n You can set the MessageQueue object's <xref:System.Messaging.MessageQueue.Path%2A> property with one of three names: the friendly name, the <xref:System.Messaging.MessageQueue.FormatName%2A>, or the <xref:System.Messaging.MessageQueue.Label%2A>. The friendly name, which is defined by the queue's <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties, is <xref:System.Messaging.MessageQueue.MachineName%2A>\\\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a public queue, and <xref:System.Messaging.MessageQueue.MachineName%2A>\\\\`Private$`\\\\<xref:System.Messaging.MessageQueue.QueueName%2A> for a private queue. The <xref:System.Messaging.MessageQueue.FormatName%2A> property allows offline access to message queues. Lastly, you can use the queue's <xref:System.Messaging.MessageQueue.Label%2A> property to set the queue's <xref:System.Messaging.MessageQueue.Path%2A>.  \n  \n For a list of initial property values for an instance of MessageQueue, see the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor."
  example:
  - "The following code example creates new MessageQueue objects using various path name syntax types. In each case, it sends a message to the queue whose path is defined in the constructor.  \n  \n [!code-cs[MessageQueue.Path#1](~/add/codesnippet/CSharp/t-system.messaging.messa_6_1.cs)]\n [!code-vb[MessageQueue.Path#1](~/add/codesnippet/VisualBasic/t-system.messaging.messa_6_1.vb)]\n [!code-cpp[MessageQueue.Path#1](~/add/codesnippet/CPP/t-system.messaging.messa_6_1.cpp)]  \n  \n The following code example sends a message to a queue, and receives a message from a queue, using an application-specific class called `Order`.  \n  \n [!code-cs[MessageQueue.Receive_noparms#1](~/add/codesnippet/CSharp/t-system.messaging.messa_6_2.cs)]\n [!code-vb[MessageQueue.Receive_noparms#1](~/add/codesnippet/VisualBasic/t-system.messaging.messa_6_2.vb)]\n [!code-cpp[MessageQueue.Receive_noparms#1](~/add/codesnippet/CPP/t-system.messaging.messa_6_2.cpp)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("ReceiveCompleted")]

      [System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.InstallerType(typeof(System.Messaging.MessageQueueInstaller))]

      [System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageQueueConverter))]

      [System.Messaging.MessagingDescription("MessageQueueDesc")]

      public class MessageQueue : System.ComponentModel.Component, System.Collections.IEnumerable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.#ctor
  id: '#ctor'
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MessageQueue()
  nameWithType: MessageQueue.MessageQueue()
  fullName: System.Messaging.MessageQueue.MessageQueue()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> class. After the default constructor initializes the new instance, you must set the instance&quot;s &lt;xref:System.Messaging.MessageQueue.Path%2A&gt; property before you can use the instance."
  remarks: "Use this overload to create a new instance of the <xref:System.Messaging.MessageQueue> class that is not immediately tied to a queue on the Message Queuing server. Before using this instance, you must connect it to an existing Message Queuing queue by setting the <xref:System.Messaging.MessageQueue.Path%2A> property. Alternatively, you can set the <xref:System.Messaging.MessageQueue> reference to the <xref:System.Messaging.MessageQueue.Create%28System.String%29> method&quot;s return value, thereby creating a new Message Queuing queue.       The MessageQueue constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue.       The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>.      |Property|Initial value|   |--------------|-------------------|   |<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.|   |<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>|   |<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class. All the filter values are set to `true`.|   |<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|`false`|"
  example:
  - "The following code example creates a new <xref:System.Messaging.MessageQueue>.  \n  \n [!code-cs[MessageQueue#1](~/add/codesnippet/CSharp/m-system.messaging.messa_4_1.cs)]"
  syntax:
    content: public MessageQueue ();
    parameters: []
  overload: System.Messaging.MessageQueue.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MessageQueue(String)
  nameWithType: MessageQueue.MessageQueue(String)
  fullName: System.Messaging.MessageQueue.MessageQueue(String)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> class that references the Message Queuing queue at the specified path."
  remarks: "Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> instance to a particular Message Queuing queue, for which you know the path, format name, or label. If you want to grant exclusive access to the first application that references the queue, you must set the <xref:System.Messaging.MessageQueue.DenySharedReceive%2A> property to `true` or use the constructor that passes a read-access restriction parameter.  \n  \n The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor instantiates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \n  \n The syntax of the `path` parameter depends on the type of queue it references, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n|Journal queue|`MachineName`\\\\`QueueName`\\\\`Journal$`|  \n|Machine journal queue|`MachineName`\\\\`Journal$`|  \n|Machine dead-letter queue|`MachineName`\\\\`Deadletter$`|  \n|Machine transactional dead-letter queue|`MachineName`\\\\`XactDeadletter$`|  \n  \n Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table.  \n  \n|Reference|Syntax|Example|  \n|---------------|------------|-------------|  \n|Format name|`FormatName:` [ *format name* ]|`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112<br /><br /> `FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=TCP:` `IPAddress`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=OS:` `MachineName`\\\\`QueueName`|  \n|Label|`Label:` [ *label* ]|`Label:` TheLabel|  \n  \n To work offline, you must use the format name syntax, not the path name syntax for the constructor. Otherwise, an exception is thrown because the primary domain controller is not available to resolve the path to the format name.  \n  \n The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>. These values are based on the properties of the Message Queuing queue with the path specified by the `path` parameter.  \n  \n|Property|Initial value|  \n|--------------|-------------------|  \n|<xref:System.Messaging.MessageQueue.Authenticate%2A>|`false`|  \n|<xref:System.Messaging.MessageQueue.BasePriority%2A>|0|  \n|<xref:System.Messaging.MessageQueue.Category%2A>|<xref:System.Guid.Empty>|  \n|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.|  \n|<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>|`true`, if the Message Queuing queue's privacy level setting is \"Body\"; otherwise, `false`.|  \n|<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>|  \n|<xref:System.Messaging.MessageQueue.Label%2A>|<xref:System.String.Empty>|  \n|<xref:System.Messaging.MessageQueue.MachineName%2A>|The value of the Message Queuing queue's computer name property.|  \n|<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>|  \n|<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>|  \n|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class.|  \n|<xref:System.Messaging.MessageQueue.Path%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \n|<xref:System.Messaging.MessageQueue.QueueName%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \n|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|`false`|  \n|<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>|`true`, if the Message Queuing object's journal setting is enabled; otherwise, `false`.|"
  example:
  - "The following code example creates new <xref:System.Messaging.MessageQueue> objects using various path name syntax types. In each case, it sends a message to the queue whose path is defined in the constructor.  \n  \n [!code-cs[MessageQueue.Path#1](~/add/codesnippet/CSharp/m-system.messaging.messa_24_1.cs)]\n [!code-vb[MessageQueue.Path#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_24_1.vb)]\n [!code-cpp[MessageQueue.Path#1](~/add/codesnippet/CPP/m-system.messaging.messa_24_1.cpp)]"
  syntax:
    content: public MessageQueue (string path);
    parameters:
    - id: path
      type: System.String
      description: "The location of the queue referenced by this ."
  overload: System.Messaging.MessageQueue.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Messaging.MessageQueue.Path%2A> property is not valid, possibly because it has not been set."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MessageQueue(String,Boolean)
  nameWithType: MessageQueue.MessageQueue(String,Boolean)
  fullName: System.Messaging.MessageQueue.MessageQueue(String,Boolean)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> class that references the Message Queuing queue at the specified path and with the specified read-access restriction."
  remarks: "Use this overload when you want to tie the new <xref:System.Messaging.MessageQueue> to a particular Message Queuing queue, for which you know the path, format name, or label. If you want to grant exclusive access to the first application that references the queue, set the `sharedModeDenyReceive` parameter to `true`. Otherwise, set `sharedModeDenyReceive` to `false` or use the constructor that has only a `path` parameter.  \n  \n Setting `sharedModeDenyReceive` to `true` affects all objects that access the Message Queuing queue, including other applications. The effects of the parameter are not restricted to this application.  \n  \n The <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor creates a new instance of the <xref:System.Messaging.MessageQueue> class; it does not create a new Message Queuing queue. To create a new queue in Message Queuing, use <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \n  \n The syntax of the `path` parameter depends on the type of queue.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n|Journal queue|`MachineName`\\\\`QueueName`\\\\`Journal$`|  \n|Machine journal queue|`MachineName`\\\\`Journal$`|  \n|Machine dead-letter queue|`MachineName`\\\\`Deadletter$`|  \n|Machine transactional dead-letter queue|`MachineName`\\\\`XactDeadletter$`|  \n  \n Alternatively, you can use the format name or label of a Message Queuing queue to describe the queue path.  \n  \n|Reference|Syntax|Example|  \n|---------------|------------|-------------|  \n|Format name|`FormatName:` [ *format name* ]|`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112<br /><br /> `FormatName:DIRECT=SPX:` `NetworkNumber`; `HostNumber`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=TCP:` `IPAddress`\\\\`QueueName`<br /><br /> `FormatName:DIRECT=OS:` `MachineName`\\\\`QueueName`|  \n|Label|`Label:` [ *label* ]|`Label:` TheLabel|  \n  \n To work offline, you must use the format name syntax, rather than the friendly name syntax. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.  \n  \n If a <xref:System.Messaging.MessageQueue> opens a queue with the `sharedModeDenyReceive` parameter set to `true`, any <xref:System.Messaging.MessageQueue> that subsequently tries to read from the queue generates a <xref:System.Messaging.MessageQueueException> because of a sharing violation. A <xref:System.Messaging.MessageQueueException> is also thrown if a <xref:System.Messaging.MessageQueue> tries to access the queue in exclusive mode while another <xref:System.Messaging.MessageQueue> already has non-exclusive access to the queue.  \n  \n The following table shows initial property values for an instance of <xref:System.Messaging.MessageQueue>. These values are based on the properties of the Message Queuing queue, with the path specified by the `path` parameter.  \n  \n|Property|Initial value|  \n|--------------|-------------------|  \n|<xref:System.Messaging.MessageQueue.Authenticate%2A>|`false`.|  \n|<xref:System.Messaging.MessageQueue.BasePriority%2A>|0.|  \n|<xref:System.Messaging.MessageQueue.Category%2A>|<xref:System.Guid.Empty>.|  \n|<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>|The values set by the default constructor of the <xref:System.Messaging.DefaultPropertiesToSend> class.|  \n|<xref:System.Messaging.MessageQueue.EncryptionRequired%2A>|`true`, if the Message Queuing queue's privacy level setting is \"Body\"; otherwise, `false`.|  \n|<xref:System.Messaging.MessageQueue.Formatter%2A>|<xref:System.Messaging.XmlMessageFormatter>.|  \n|<xref:System.Messaging.MessageQueue.Label%2A>|<xref:System.String.Empty>.|  \n|<xref:System.Messaging.MessageQueue.MachineName%2A>|The value of the Message Queuing queue's computer name property.|  \n|<xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>.|  \n|<xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>|<xref:System.Messaging.MessageQueue.InfiniteQueueSize>.|  \n|<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>|The values set by the default constructor of the <xref:System.Messaging.MessagePropertyFilter> class.|  \n|<xref:System.Messaging.MessageQueue.Path%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \n|<xref:System.Messaging.MessageQueue.QueueName%2A>|<xref:System.String.Empty>, if not set by the constructor.|  \n|<xref:System.Messaging.MessageQueue.DenySharedReceive%2A>|The value of the `sharedModeDenyReceive` parameter.|  \n|<xref:System.Messaging.MessageQueue.UseJournalQueue%2A>|`true`, if the Message Queuing object's journal setting is enabled; otherwise, `false`.|"
  example:
  - "The following code example creates a new <xref:System.Messaging.MessageQueue> with exclusive access, sets its path, and sends a message to the queue.  \n  \n [!code-cpp[MessageQueue.ctor_PathSharedModeDenyReceive#1](~/add/codesnippet/CPP/m-system.messaging.messa_11_1.cpp)]\n [!code-vb[MessageQueue.ctor_PathSharedModeDenyReceive#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_11_1.vb)]\n [!code-cs[MessageQueue.ctor_PathSharedModeDenyReceive#1](~/add/codesnippet/CSharp/m-system.messaging.messa_11_1.cs)]"
  syntax:
    content: public MessageQueue (string path, bool sharedModeDenyReceive);
    parameters:
    - id: path
      type: System.String
      description: "The location of the queue referenced by this , which can be &quot;.&quot; for the local computer. For information about the proper syntax for this parameter, see the Remarks section."
    - id: sharedModeDenyReceive
      type: System.Boolean
      description: "\n     to grant exclusive read access to the first application that accesses the queue; otherwise, ."
  overload: System.Messaging.MessageQueue.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Messaging.MessageQueue.Path%2A> property is not valid, possibly because it has not been set."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Messaging.QueueAccessMode)
  id: '#ctor(System.String,System.Messaging.QueueAccessMode)'
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MessageQueue(String,QueueAccessMode)
  nameWithType: MessageQueue.MessageQueue(String,QueueAccessMode)
  fullName: System.Messaging.MessageQueue.MessageQueue(String,QueueAccessMode)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> class."
  syntax:
    content: public MessageQueue (string path, System.Messaging.QueueAccessMode accessMode);
    parameters:
    - id: path
      type: System.String
      description: "The location of the queue referenced by this , which can be &quot;.&quot; for the local computer."
    - id: accessMode
      type: System.Messaging.QueueAccessMode
      description: "One of the  values."
  overload: System.Messaging.MessageQueue.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean)
  id: '#ctor(System.String,System.Boolean,System.Boolean)'
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MessageQueue(String,Boolean,Boolean)
  nameWithType: MessageQueue.MessageQueue(String,Boolean,Boolean)
  fullName: System.Messaging.MessageQueue.MessageQueue(String,Boolean,Boolean)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> class."
  remarks: ''
  example:
  - "The following code example creates a new <xref:System.Messaging.MessageQueue> with exclusive read access and with connection caching enabled.  \n  \n [!code-cpp[MessageQueue4#1](~/add/codesnippet/CPP/7c8ec640-99ae-49ca-b3dd-_1.cpp)]\n [!code-cs[MessageQueue4#1](~/add/codesnippet/CSharp/7c8ec640-99ae-49ca-b3dd-_1.cs)]"
  syntax:
    content: public MessageQueue (string path, bool sharedModeDenyReceive, bool enableCache);
    parameters:
    - id: path
      type: System.String
      description: "The location of the queue referenced by this , which can be &quot;.&quot; for the local computer."
    - id: sharedModeDenyReceive
      type: System.Boolean
      description: "\n     to grant exclusive read access to the first application that accesses the queue; otherwise, ."
    - id: enableCache
      type: System.Boolean
      description: "\n     to create and use a connection cache; otherwise, ."
  overload: System.Messaging.MessageQueue.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)
  id: '#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)'
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MessageQueue(String,Boolean,Boolean,QueueAccessMode)
  nameWithType: MessageQueue.MessageQueue(String,Boolean,Boolean,QueueAccessMode)
  fullName: System.Messaging.MessageQueue.MessageQueue(String,Boolean,Boolean,QueueAccessMode)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> class."
  syntax:
    content: public MessageQueue (string path, bool sharedModeDenyReceive, bool enableCache, System.Messaging.QueueAccessMode accessMode);
    parameters:
    - id: path
      type: System.String
      description: "The location of the queue referenced by this , which can be &quot;.&quot; for the local computer."
    - id: sharedModeDenyReceive
      type: System.Boolean
      description: "\n     to grant exclusive read access to the first application that accesses the queue; otherwise, ."
    - id: enableCache
      type: System.Boolean
      description: "\n     to create and use a connection cache; otherwise, ."
    - id: accessMode
      type: System.Messaging.QueueAccessMode
      description: "One of the  values."
  overload: System.Messaging.MessageQueue.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.AccessMode
  id: AccessMode
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: AccessMode
  nameWithType: MessageQueue.AccessMode
  fullName: System.Messaging.MessageQueue.AccessMode
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets a value that indicates the access mode for the queue."
  remarks: "The default access mode for a queue is `QueueAccessMode.SendAndReceive`, unless you specify otherwise when calling the constructor."
  syntax:
    content: public System.Messaging.QueueAccessMode AccessMode { get; }
    return:
      type: System.Messaging.QueueAccessMode
      description: "One of the <see cref=&quot;T:System.Messaging.QueueAccessMode&quot;></see> values."
  overload: System.Messaging.MessageQueue.AccessMode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Authenticate
  id: Authenticate
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Authenticate
  nameWithType: MessageQueue.Authenticate
  fullName: System.Messaging.MessageQueue.Authenticate
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets a value that indicates whether the queue accepts only authenticated messages."
  remarks: "Message authentication provides a way to ensure message integrity and to verify who sent the message. To request authentication, the sending application sets the message&quot;s authentication level.       When you set Authenticate to `true`, you are restricting access to the queue on the server, not only to this <xref:System.Messaging.MessageQueue> instance. All clients working against the same Message Queuing queue will be affected.       A queue that accepts only authenticated messages will reject a non-authenticated message. To request notification of message rejection, a sending application can set the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the message. Because no other indication of message rejection exists, the sending application can lose the message unless you request that it be sent to the dead-letter queue.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example gets and sets the value of a message queue's Authenticate property.  \n  \n [!code-cs[MessageQueue#3](~/add/codesnippet/CSharp/p-system.messaging.messa_41_1.cs)]"
  syntax:
    content: public bool Authenticate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the queue accepts only authenticated messages; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.Authenticate*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BasePriority
  id: BasePriority
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BasePriority
  nameWithType: MessageQueue.BasePriority
  fullName: System.Messaging.MessageQueue.BasePriority
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the base priority Message Queuing uses to route a public queue&quot;s messages over the network."
  remarks: "A message queue&quot;s base priority specifies how a message en route to that queue is treated as it travels through the network. You can set the BasePriority property to confer a higher or lower priority to all messages sent to the specified queue than those sent to other queues. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.       A message queue&quot;s BasePriority is not related to the <xref:System.Messaging.Message.Priority%2A> property of a message, which specifies the order in which an incoming message is placed in the queue.       BasePriority applies only to public queues whose paths are specified using the format name. The base priority of a private queue is always zero (0).       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example gets and sets the value of a message queue's BasePriority property.  \n  \n [!code-cs[MessageQueue#4](~/add/codesnippet/CSharp/p-system.messaging.messa_77_1.cs)]"
  syntax:
    content: public short BasePriority { get; set; }
    return:
      type: System.Int16
      description: "The single base priority for all messages sent to the (public) queue. The default is zero (0)."
  overload: System.Messaging.MessageQueue.BasePriority*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The base priority was set to an invalid value."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BeginPeek
  id: BeginPeek
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BeginPeek()
  nameWithType: MessageQueue.BeginPeek()
  fullName: System.Messaging.MessageQueue.BeginPeek()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initiates an asynchronous peek operation that has no time-out. The operation is not complete until a message becomes available in the queue."
  remarks: "In asynchronous processing, you use BeginPeek to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue.       <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.       To use BeginPeek, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. BeginPeek initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.       The BeginPeek method returns immediately, but the asynchronous operation is not completed until the event handler is called.       Because BeginPeek is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.       Once an asynchronous operation completes, you can call BeginPeek or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.       The <xref:System.IAsyncResult> that BeginPeek returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.       If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example creates an event handler named `MyPeekCompleted`, attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate, and calls BeginPeek to initiate an asynchronous peek operation on the queue that is located at the path \".\\myQueue\". When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the example peeks the message and writes its body to the screen. The example then calls BeginPeek again to initiate a new asynchronous peek operation.  \n  \n [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/add/codesnippet/CPP/m-system.messaging.messa_20_1.cpp)]\n [!code-cs[MessageQueue.BeginPeek_noparms#1](~/add/codesnippet/CSharp/m-system.messaging.messa_20_1.cs)]\n [!code-vb[MessageQueue.BeginPeek_noparms#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_20_1.vb)]"
  syntax:
    content: public IAsyncResult BeginPeek ();
    parameters: []
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Messaging.MessageQueue.BeginPeek*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan)
  id: BeginPeek(System.TimeSpan)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BeginPeek(TimeSpan)
  nameWithType: MessageQueue.BeginPeek(TimeSpan)
  fullName: System.Messaging.MessageQueue.BeginPeek(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initiates an asynchronous peek operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs."
  remarks: "In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.       <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.       To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.       The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.       Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.       Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.       The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.       This overload specifies a time-out. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception.       If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example creates an asynchronous peek operation, using the queue path \".\\myQueue\". It creates an event handler, `MyPeekCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> is called with a time-out of one minute, to initiate the asynchronous peek operation. When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised or the time-out expires, the message is retrieved if one exists, and its body is written to the screen. Then <xref:System.Messaging.MessageQueue.BeginPeek%2A> is called again to initiate a new asynchronous peek operation with the same time-out.  \n  \n [!code-cpp[MessageQueue.BeginPeek_timeout#1](~/add/codesnippet/CPP/m-system.messaging.messa_27_1.cpp)]\n [!code-cs[MessageQueue.BeginPeek_timeout#1](~/add/codesnippet/CSharp/m-system.messaging.messa_27_1.cs)]\n [!code-vb[MessageQueue.BeginPeek_timeout#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_27_1.vb)]"
  syntax:
    content: public IAsyncResult BeginPeek (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the interval of time to wait for a message to become available."
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Messaging.MessageQueue.BeginPeek*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object)
  id: BeginPeek(System.TimeSpan,System.Object)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BeginPeek(TimeSpan,Object)
  nameWithType: MessageQueue.BeginPeek(TimeSpan,Object)
  fullName: System.Messaging.MessageQueue.BeginPeek(TimeSpan,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&quot;s lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs."
  remarks: "In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginPeek%2A> to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.       <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.       Use this overload to associate information with the operation that will be preserved throughout the operation&quot;s lifetime. The event handler can access this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.       To use <xref:System.Messaging.MessageQueue.BeginPeek%2A>, create an event handler that processes the results of the asynchronous operation, and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> initiates an asynchronous peek operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.PeekCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> or by retrieving the result using the <xref:System.Messaging.PeekCompletedEventArgs>.       The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.       Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.       Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.       <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.       This overload specifies a time-out and a state object. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.PeekCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> will throw an exception.       The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define. For an illustration of this scenario, see the Example section.       You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.       If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example creates an asynchronous peek operation, using the queue path \".\\myQueue\". It creates an event handler, `MyPeekCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate. <xref:System.Messaging.MessageQueue.BeginPeek%2A> is called, with a time-out of one minute. Each call to <xref:System.Messaging.MessageQueue.BeginPeek%2A> has a unique associated integer that identifies that particular operation. When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised or the time-out expired, the message, if one exists, is retrieved and its body and the operation-specific integer identifier are written to the screen. Then <xref:System.Messaging.MessageQueue.BeginPeek%2A> is called again to initiate a new asynchronous peek operation with the same time-out and the associated integer of the just completed operation.  \n  \n [!code-cs[MessageQueue.BeginPeek_TimeSpanStateObject#1](~/add/codesnippet/CSharp/m-system.messaging.messa_26_1.cs)]\n [!code-cpp[MessageQueue.BeginPeek_TimeSpanStateObject#1](~/add/codesnippet/CPP/m-system.messaging.messa_26_1.cpp)]\n [!code-vb[MessageQueue.BeginPeek_TimeSpanStateObject#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_26_1.vb)]"
  syntax:
    content: public IAsyncResult BeginPeek (TimeSpan timeout, object stateObject);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the interval of time to wait for a message to become available."
    - id: stateObject
      type: System.Object
      description: "A state object, specified by the application, that contains information associated with the asynchronous operation."
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Messaging.MessageQueue.BeginPeek*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)
  id: BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BeginPeek(TimeSpan,Object,AsyncCallback)
  nameWithType: MessageQueue.BeginPeek(TimeSpan,Object,AsyncCallback)
  fullName: System.Messaging.MessageQueue.BeginPeek(TimeSpan,Object,AsyncCallback)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initiates an asynchronous peek operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&quot;s lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs."
  remarks: "When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.       <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.       The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.       Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.       Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.       <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.       The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example creates an asynchronous peek operation. The code example sends a message to a local message queue, then calls BeginPeek, passing in: a time-out value of ten seconds; a unique integer that identifies that particular message; and a new instance of <xref:System.AsyncCallback> that identifies the event handler, `MyPeekCompleted`. When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the event handler peeks at the message and writes the message body and the integer message identifier to the screen.  \n  \n [!code-cpp[MessageQueueBeginPeek#0](~/add/codesnippet/CPP/4bfeb71a-f17f-449b-b1ef-_1.cpp)]\n [!code-cs[MessageQueueBeginPeek#0](~/add/codesnippet/CSharp/4bfeb71a-f17f-449b-b1ef-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginPeek (TimeSpan timeout, object stateObject, AsyncCallback callback);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the interval of time to wait for a message to become available."
    - id: stateObject
      type: System.Object
      description: "A state object, specified by the application, that contains information associated with the asynchronous operation."
    - id: callback
      type: System.AsyncCallback
      description: "The <xref:System.AsyncCallback> that will receive the notification of the asynchronous operation completion."
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Messaging.MessageQueue.BeginPeek*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)
  id: BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BeginPeek(TimeSpan,Cursor,PeekAction,Object,AsyncCallback)
  nameWithType: MessageQueue.BeginPeek(TimeSpan,Cursor,PeekAction,Object,AsyncCallback)
  fullName: System.Messaging.MessageQueue.BeginPeek(TimeSpan,Cursor,PeekAction,Object,AsyncCallback)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initiates an asynchronous peek operation that has a specified time-out and that uses a specified cursor, a specified peek action, and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs."
  remarks: "When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired. The <xref:System.Messaging.MessageQueue.PeekCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginPeek%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.PeekCompleted> event.       <xref:System.Messaging.MessageQueue.PeekCompleted> is also raised if a message already exists in the queue.       The <xref:System.Messaging.MessageQueue.BeginPeek%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.       Because <xref:System.Messaging.MessageQueue.BeginPeek%2A> is asynchronous, you can call it to peek the queue without blocking the current thread of execution. To synchronously peek the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method.       Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.       <xref:System.Messaging.MessageQueue.BeginPeek%2A> returns a <xref:System.IAsyncResult> that identifies the asynchronous operation started by the method. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.       The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginPeek%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public IAsyncResult BeginPeek (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.PeekAction action, object state, AsyncCallback callback);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the interval of time to wait for a message to become available."
    - id: cursor
      type: System.Messaging.Cursor
      description: "A  that maintains a specific position in the message queue."
    - id: action
      type: System.Messaging.PeekAction
      description: "One of the  values. Indicates whether to peek at the current message in the queue, or the next message."
    - id: state
      type: System.Object
      description: "A state object, specified by the application, that contains information associated with the asynchronous operation."
    - id: callback
      type: System.AsyncCallback
      description: "The <xref:System.AsyncCallback> that receives the notification of the asynchronous operation completion."
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Messaging.MessageQueue.BeginPeek*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A value other than  or  was specified for the action parameter."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The cursor parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BeginReceive
  id: BeginReceive
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BeginReceive()
  nameWithType: MessageQueue.BeginReceive()
  fullName: System.Messaging.MessageQueue.BeginReceive()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initiates an asynchronous receive operation that has no time-out. The operation is not complete until a message becomes available in the queue."
  remarks: "In asynchronous processing, you use BeginReceive to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message has been removed from the queue.       <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.       To use BeginReceive, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. BeginReceive initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.       The BeginReceive method returns immediately, but the asynchronous operation is not completed until the event handler is called.       Because BeginReceive is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.       Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or BeginReceive again in the event handler to keep receiving notifications.       The <xref:System.IAsyncResult> that BeginReceive returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.       If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.       Do not use the asynchronous call BeginReceive with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.      ```   myMessageQueue.BeginTransaction();    myMessageQueue.Receive();    myMessageQueue.CommitTransaction();   ```       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example chains asynchronous requests. It assumes there is a queue on the local computer called \"myQueue\". The `Main` function begins the asynchronous operation that is handled by the `MyReceiveCompleted` routine. `MyReceiveCompleted` processes the current message and begins a new asynchronous receive operation.  \n  \n [!code-cs[MessageQueue.BeginReceive_noparms_combined#1](~/add/codesnippet/CSharp/m-system.messaging.messa_9_1.cs)]\n [!code-cpp[MessageQueue.BeginReceive_noparms_combined#1](~/add/codesnippet/CPP/m-system.messaging.messa_9_1.cpp)]\n [!code-vb[MessageQueue.BeginReceive_noparms_combined#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_9_1.vb)]  \n  \n The following code example queues asynchronous requests. The call to BeginReceive uses the <xref:System.IAsyncResult.AsyncWaitHandle%2A> in its return value. The `Main` routine waits for all asynchronous operations to be completed before exiting.  \n  \n [!code-cs[MessageQueue.BeginReceive_noparms_combined#2](~/add/codesnippet/CSharp/m-system.messaging.messa_9_2.cs)]\n [!code-cpp[MessageQueue.BeginReceive_noparms_combined#2](~/add/codesnippet/CPP/m-system.messaging.messa_9_2.cpp)]\n [!code-vb[MessageQueue.BeginReceive_noparms_combined#2](~/add/codesnippet/VisualBasic/m-system.messaging.messa_9_2.vb)]"
  syntax:
    content: public IAsyncResult BeginReceive ();
    parameters: []
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Messaging.MessageQueue.BeginReceive*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan)
  id: BeginReceive(System.TimeSpan)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BeginReceive(TimeSpan)
  nameWithType: MessageQueue.BeginReceive(TimeSpan)
  fullName: System.Messaging.MessageQueue.BeginReceive(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initiates an asynchronous receive operation that has a specified time-out. The operation is not complete until either a message becomes available in the queue or the time-out occurs."
  remarks: "In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.       <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.       To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.       The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.       Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.       Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.       If <xref:System.Messaging.MessageQueue.CanRead%2A> is `false`, the completion event is raised, but an exception will be thrown when calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29>.       The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.       This overload specifies a time-out. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception.       Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.      ```   myMessageQueue.BeginTransaction();    myMessageQueue.Receive();    myMessageQueue.CommitTransaction();   ```       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example creates an asynchronous receive operation. The code example creates an event handler, `MyReceiveCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event handler delegate. The code example sends a message to a local message queue, then calls BeginReceive, passing in a time-out value of ten seconds. When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the event handler receives the message and writes the message body to the screen.  \n  \n [!code-cs[MessageQueueBeginReceive1#0](~/add/codesnippet/CSharp/m-system.messaging.messa_25_1.cs)]\n [!code-cpp[MessageQueueBeginReceive1#0](~/add/codesnippet/CPP/m-system.messaging.messa_25_1.cpp)]"
  syntax:
    content: public IAsyncResult BeginReceive (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the interval of time to wait for a message to become available."
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Messaging.MessageQueue.BeginReceive*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly because it represents a negative number."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object)
  id: BeginReceive(System.TimeSpan,System.Object)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BeginReceive(TimeSpan,Object)
  nameWithType: MessageQueue.BeginReceive(TimeSpan,Object)
  fullName: System.Messaging.MessageQueue.BeginReceive(TimeSpan,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&quot;s lifetime. The operation is not complete until either a message becomes available in the queue or the time-out occurs."
  remarks: "In asynchronous processing, you use <xref:System.Messaging.MessageQueue.BeginReceive%2A> to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event when a message becomes available in the queue or when the specified interval of time has expired.       <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.       Use this overload to associate information with the operation that will be preserved throughout the operation&quot;s lifetime. The event handler can detect this information by looking at the <xref:System.IAsyncResult.AsyncState%2A> property of the <xref:System.IAsyncResult> that is associated with the operation.       To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.       The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.       Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.       Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.       The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.       This overload specifies a time-out and a state object. If the interval specified by the `timeout` parameter expires, this component raises the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event. Because no message exists, a subsequent call to <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> will throw an exception.       The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.       You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.       Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.      ```   myMessageQueue.BeginTransaction();    myMessageQueue.Receive();    myMessageQueue.CommitTransaction();   ```       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example creates an asynchronous receive operation. The code example creates an event handler, `MyReceiveCompleted`, and attaches it to the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event handler delegate. The code example sends a message to a local message queue, then calls BeginReceive, passing in a time-out value of ten seconds and a unique integer that identifies that particular message. When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the event handler receives the message and writes the message body and the integer message identifier to the screen.  \n  \n [!code-cs[MessageQueueBeginReceive2#0](~/add/codesnippet/CSharp/m-system.messaging.messa_39_1.cs)]\n [!code-cpp[MessageQueueBeginReceive2#0](~/add/codesnippet/CPP/m-system.messaging.messa_39_1.cpp)]"
  syntax:
    content: public IAsyncResult BeginReceive (TimeSpan timeout, object stateObject);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the interval of time to wait for a message to become available."
    - id: stateObject
      type: System.Object
      description: "A state object, specified by the application, that contains information associated with the asynchronous operation."
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Messaging.MessageQueue.BeginReceive*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)
  id: BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BeginReceive(TimeSpan,Object,AsyncCallback)
  nameWithType: MessageQueue.BeginReceive(TimeSpan,Object,AsyncCallback)
  fullName: System.Messaging.MessageQueue.BeginReceive(TimeSpan,Object,AsyncCallback)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initiates an asynchronous receive operation that has a specified time-out and a specified state object, which provides associated information throughout the operation&quot;s lifetime. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs."
  remarks: "When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.       <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.       To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.       The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.       Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.       Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.       The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, you use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.       The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.       You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.       Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.      ```   myMessageQueue.BeginTransaction();    myMessageQueue.Receive();    myMessageQueue.CommitTransaction();   ```       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example creates an asynchronous receive operation. The code example sends a message to a local message queue, then calls BeginReceive, passing in: a time-out value of ten seconds; a unique integer that identifies that particular message; and a new instance of <xref:System.AsyncCallback> that identifies the event handler, `MyReceiveCompleted`. When a <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, the event handler receives the message and writes the message body and the integer message identifier to the screen.  \n  \n [!code-cs[MessageQueueBeginReceive3#0](~/add/codesnippet/CSharp/9047ae09-6870-4dc0-9b18-_1.cs)]\n [!code-cpp[MessageQueueBeginReceive3#0](~/add/codesnippet/CPP/9047ae09-6870-4dc0-9b18-_1.cpp)]"
  syntax:
    content: public IAsyncResult BeginReceive (TimeSpan timeout, object stateObject, AsyncCallback callback);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the interval of time to wait for a message to become available."
    - id: stateObject
      type: System.Object
      description: "A state object, specified by the application, that contains information associated with the asynchronous operation."
    - id: callback
      type: System.AsyncCallback
      description: "The <xref:System.AsyncCallback> that will receive the notification of the asynchronous operation completion."
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Messaging.MessageQueue.BeginReceive*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)
  id: BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: BeginReceive(TimeSpan,Cursor,Object,AsyncCallback)
  nameWithType: MessageQueue.BeginReceive(TimeSpan,Cursor,Object,AsyncCallback)
  fullName: System.Messaging.MessageQueue.BeginReceive(TimeSpan,Cursor,Object,AsyncCallback)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initiates an asynchronous receive operation that has a specified time-out and uses a specified cursor and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs."
  remarks: "When you use this overload, the callback specified in the callback parameter is invoked directly when a message becomes available in the queue or when the specified interval of time has expired; the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is not raised. The other overloads of <xref:System.Messaging.MessageQueue.BeginReceive%2A> rely on this component to raise the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event.       <xref:System.Messaging.MessageQueue.ReceiveCompleted> is also raised if a message already exists in the queue.       To use <xref:System.Messaging.MessageQueue.BeginReceive%2A>, create an event handler that processes the results of the asynchronous operation and associate it with your event delegate. <xref:System.Messaging.MessageQueue.BeginReceive%2A> initiates an asynchronous receive operation; the <xref:System.Messaging.MessageQueue> is notified, through the raising of the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event, when a message arrives in the queue. The <xref:System.Messaging.MessageQueue> can then access the message by calling <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> or retrieving the result using the <xref:System.Messaging.ReceiveCompletedEventArgs>.       The <xref:System.Messaging.MessageQueue.BeginReceive%2A> method returns immediately, but the asynchronous operation is not completed until the event handler is called.       Because <xref:System.Messaging.MessageQueue.BeginReceive%2A> is asynchronous, you can call it to receive a message from the queue without blocking the current thread of execution. To synchronously receive a message, use the <xref:System.Messaging.MessageQueue.Receive%2A> method.       Once an asynchronous operation completes, you can call <xref:System.Messaging.MessageQueue.BeginPeek%2A> or <xref:System.Messaging.MessageQueue.BeginReceive%2A> again in the event handler to keep receiving notifications.       The <xref:System.IAsyncResult> that <xref:System.Messaging.MessageQueue.BeginReceive%2A> returns identifies the asynchronous operation that the method started. You can use this <xref:System.IAsyncResult> throughout the lifetime of the operation, although you generally do not use it until <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is called. However, if you start several asynchronous operations, you can place their <xref:System.IAsyncResult> values in an array and specify whether to wait for all operations or any operation to complete. In this case, use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the <xref:System.IAsyncResult> to identify the completed operation.       The state object associates state information with the operation. For example, if you call <xref:System.Messaging.MessageQueue.BeginReceive%2A> multiple times to initiate multiple operations, you can identify each operation through a separate state object that you define.       You can also use the state object to pass information across process threads. If a thread is started but the callback is on a different thread in an asynchronous scenario, the state object is marshaled and passed back along with information from the event.       Do not use the asynchronous call <xref:System.Messaging.MessageQueue.BeginReceive%2A> with transactions. If you want to perform a transactional asynchronous operation, call <xref:System.Messaging.MessageQueue.BeginPeek%2A>, and put the transaction and the (synchronous) <xref:System.Messaging.MessageQueue.Receive%2A> method within the event handler you create for the peek operation. Your event handler might contain functionality as shown in the following C# code.      ```   myMessageQueue.BeginTransaction();    myMessageQueue.Receive();    myMessageQueue.CommitTransaction();   ```       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public IAsyncResult BeginReceive (TimeSpan timeout, System.Messaging.Cursor cursor, object state, AsyncCallback callback);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the interval of time to wait for a message to become available."
    - id: cursor
      type: System.Messaging.Cursor
      description: "A  that maintains a specific position in the message queue."
    - id: state
      type: System.Object
      description: "A state object, specified by the application, that contains information associated with the asynchronous operation."
    - id: callback
      type: System.AsyncCallback
      description: "The <xref:System.AsyncCallback> that receives the notification of the asynchronous operation completion."
    return:
      type: System.IAsyncResult
      description: "To be added."
  overload: System.Messaging.MessageQueue.BeginReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The cursor parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.CanRead
  id: CanRead
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: CanRead
  nameWithType: MessageQueue.CanRead
  fullName: System.Messaging.MessageQueue.CanRead
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets a value that indicates whether the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> can be read."
  remarks: "CanRead indicates whether the application is able to peek or receive messages from the queue. If CanRead is `true`, the <xref:System.Messaging.MessageQueue> can receive or peek messages from the queue. Otherwise, it cannot.       CanRead is `false` if a queue is already open with exclusive read access (or if it&quot;s open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to read from a queue when CanRead is `false`, access is denied.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example displays the value of a message queue's CanRead property.  \n  \n [!code-cs[MessageQueue#5](~/add/codesnippet/CSharp/p-system.messaging.messa_93_1.cs)]"
  syntax:
    content: public bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> exists and the application can read from it; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.CanRead*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.CanWrite
  id: CanWrite
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: CanWrite
  nameWithType: MessageQueue.CanWrite
  fullName: System.Messaging.MessageQueue.CanWrite
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets a value that indicates whether the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> can be written to."
  remarks: "CanWrite indicates whether the application is able to send messages to the queue. If CanWrite is `true`, the <xref:System.Messaging.MessageQueue> can send messages to the queue. Otherwise, it cannot.       CanWrite is `false` if a queue is already open with exclusive write access (or if it&quot;s open with non-exclusive access and this <xref:System.Messaging.MessageQueue> requests exclusive access), or if the application does not have sufficient rights to access it. If your application tries to write to a queue when CanWrite is `false`, access is denied.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example displays the value of a message queue's CanWrite property.  \n  \n [!code-cs[MessageQueue#6](~/add/codesnippet/CSharp/p-system.messaging.messa_84_1.cs)]"
  syntax:
    content: public bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> exists and the application can write to it; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.CanWrite*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Category
  id: Category
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Category
  nameWithType: MessageQueue.Category
  fullName: System.Messaging.MessageQueue.Category
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the queue category."
  remarks: "The queue category allows an application to categorize its queues. For example, you can place all Billing queues in one category and all Order queues in another.       The Category property provides access to the Message Queuing Type ID property (which is read/write), accessible through the **Queue Properties** dialog box in the Computer Management Console. You can define a new category. Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, such an action is unnecessary. The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the Category for one set of queues and {00000000-0000-0000-0000-000000000002} as the Category for another set.       It is not necessary to set the Category. The value can be `null`.       Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example gets and sets the value of a message queue's Category property.  \n  \n [!code-cs[MessageQueue#7](~/add/codesnippet/CSharp/p-system.messaging.messa_30_1.cs)]"
  syntax:
    content: public Guid Category { get; set; }
    return:
      type: System.Guid
      description: "A &lt;xref:System.Guid&gt; that represents the queue category (Message Queuing type identifier), which allows an application to categorize its queues. The default is <xref uid=&quot;langword_csharp_Guid.empty&quot; name=&quot;Guid.empty&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.Category*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The queue category was set to an invalid value."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ClearConnectionCache
  id: ClearConnectionCache
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ClearConnectionCache()
  nameWithType: MessageQueue.ClearConnectionCache()
  fullName: System.Messaging.MessageQueue.ClearConnectionCache()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Clears the connection cache."
  remarks: "When you call ClearConnectionCache, the format names stored in the cache are removed and handles opened and stored in the cache are closed.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|Yes|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example calls ClearConnectionCache.  \n  \n [!code-cs[MessageQueue#8](~/add/codesnippet/CSharp/m-system.messaging.messa_37_1.cs)]"
  syntax:
    content: public static void ClearConnectionCache ();
    parameters: []
  overload: System.Messaging.MessageQueue.ClearConnectionCache*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Close
  id: Close
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Close()
  nameWithType: MessageQueue.Close()
  fullName: System.Messaging.MessageQueue.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Frees all resources allocated by the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>."
  remarks: "Close frees all resources associated with a <xref:System.Messaging.MessageQueue>, including shared resources if appropriate. The system re-acquires these resources automatically if they are still available, for example when you call the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method, as in the following C# code.      ```   myMessageQueue.Send(&quot;Text 1.&quot;);   myMessageQueue.Close();   myMessageQueue.Send(&quot;Text 2.&quot;); //Resources are re-acquired.   ```       When you call Close, all <xref:System.Messaging.MessageQueue> properties that directly access the Message Queuing queue are cleared out. The <xref:System.Messaging.MessageQueue.Path%2A>, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, <xref:System.Messaging.MessageQueue.Formatter%2A>, and <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> all remain as they were.       Close does not always free the read and write handles to a queue, because they might be shared. You can take any of the following steps to ensure that Close frees the read and write handles to a queue:      -   Create the <xref:System.Messaging.MessageQueue> with exclusive access. To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%29> or <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor, and set the `sharedModeDenyReceive` parameter to `true`.      -   Create the <xref:System.Messaging.MessageQueue> with connection caching disabled. To do so, call the <xref:System.Messaging.MessageQueue.%23ctor%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> constructor and set the `enableConnectionCache` parameter to `false`.      -   Disable connection caching. To do so, set the <xref:System.Messaging.MessageQueue.EnableConnectionCache%2A> property to `false`.       You should call Close for a queue before you delete the queue on the Message Queuing server. Otherwise, messages sent to the queue could throw exceptions or appear in the dead-letter queue.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|Yes|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example closes a Message Queuing queue.  \n  \n [!code-cs[MessageQueue.Close#1](~/add/codesnippet/CSharp/m-system.messaging.messa_46_1.cs)]\n [!code-vb[MessageQueue.Close#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_46_1.vb)]\n [!code-cpp[MessageQueue.Close#1](~/add/codesnippet/CPP/m-system.messaging.messa_46_1.cpp)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageQueue.Close*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Create(System.String)
  id: Create(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Create(String)
  nameWithType: MessageQueue.Create(String)
  fullName: System.Messaging.MessageQueue.Create(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Creates a non-transactional Message Queuing queue at the specified path."
  remarks: "Use this overload to create a non-transactional Message Queuing queue.  \n  \n To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A> constructor. To create a new queue in Message Queuing, call Create.  \n  \n The syntax for the `path` parameter depends on the type of queue it references, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n  \n Use \".\" for the local computer. For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|"
  example:
  - "The following code example creates public and private queues. It sends a message to selected queues.  \n  \n [!code-cpp[MessageQueue.Create_path#1](~/add/codesnippet/CPP/m-system.messaging.messa_34_1.cpp)]\n [!code-vb[MessageQueue.Create_path#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_34_1.vb)]\n [!code-cs[MessageQueue.Create_path#1](~/add/codesnippet/CSharp/m-system.messaging.messa_34_1.cs)]"
  syntax:
    content: public static System.Messaging.MessageQueue Create (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path of the queue to create."
    return:
      type: System.Messaging.MessageQueue
      description: "To be added."
  overload: System.Messaging.MessageQueue.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path parameter is  or is an empty string (&quot;&quot;)."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A queue already exists at the specified path.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Create(System.String,System.Boolean)
  id: Create(System.String,System.Boolean)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Create(String,Boolean)
  nameWithType: MessageQueue.Create(String,Boolean)
  fullName: System.Messaging.MessageQueue.Create(String,Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Creates a transactional or non-transactional Message Queuing queue at the specified path."
  remarks: "You can use this overload to create a transactional queue in Message Queuing. You can create a non-transactional queue, by setting the `transactional` parameter to `false` or by calling the other overload of <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \n  \n To create a new instance of the <xref:System.Messaging.MessageQueue> class in your application and bind it to an existing queue, use the <xref:System.Messaging.MessageQueue.%23ctor%2A>constructor. To create a new queue in Message Queuing, call <xref:System.Messaging.MessageQueue.Create%28System.String%29>.  \n  \n The syntax for the `path` parameter depends on the type of queue it references, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n  \n Use \".\" for the local computer. For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|"
  example:
  - "The following code example creates public and private transactional queues. It sends a message to selected queues.  \n  \n [!code-vb[MessageQueue.Create_PathTransactional#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_13_1.vb)]\n [!code-cpp[MessageQueue.Create_PathTransactional#1](~/add/codesnippet/CPP/m-system.messaging.messa_13_1.cpp)]\n [!code-cs[MessageQueue.Create_PathTransactional#1](~/add/codesnippet/CSharp/m-system.messaging.messa_13_1.cs)]"
  syntax:
    content: public static System.Messaging.MessageQueue Create (string path, bool transactional);
    parameters:
    - id: path
      type: System.String
      description: "The path of the queue to create."
    - id: transactional
      type: System.Boolean
      description: "\n     to create a transactional queue;  to create a non-transactional queue."
    return:
      type: System.Messaging.MessageQueue
      description: "To be added."
  overload: System.Messaging.MessageQueue.Create*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path parameter is  or is an empty string (&quot;&quot;)."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A queue already exists at the specified path.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.CreateCursor
  id: CreateCursor
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: CreateCursor()
  nameWithType: MessageQueue.CreateCursor()
  fullName: System.Messaging.MessageQueue.CreateCursor()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Creates a new <see cref=&quot;T:System.Messaging.Cursor&quot;></see> for the current message queue."
  syntax:
    content: public System.Messaging.Cursor CreateCursor ();
    parameters: []
    return:
      type: System.Messaging.Cursor
      description: "To be added."
  overload: System.Messaging.MessageQueue.CreateCursor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.CreateTime
  id: CreateTime
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: CreateTime
  nameWithType: MessageQueue.CreateTime
  fullName: System.Messaging.MessageQueue.CreateTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets the time and date that the queue was created in Message Queuing."
  remarks: "CreateTime refers to the queue on the Message Queuing server, not the <xref:System.Messaging.MessageQueue> instance.       If the queue exists, this property represents the time the queue was created, adjusted to the local time of the server on which the queue exists.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example displays the value of a message queue's CreateTime property.  \n  \n [!code-cs[MessageQueue#9](~/add/codesnippet/CSharp/p-system.messaging.messa_88_1.cs)]"
  syntax:
    content: public DateTime CreateTime { get; }
    return:
      type: System.DateTime
      description: "A &lt;xref:System.DateTime&gt; that represents the date and time at which the queue was created."
  overload: System.Messaging.MessageQueue.CreateTime*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.DefaultPropertiesToSend
  id: DefaultPropertiesToSend
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: DefaultPropertiesToSend
  nameWithType: MessageQueue.DefaultPropertiesToSend
  fullName: System.Messaging.MessageQueue.DefaultPropertiesToSend
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the message property values to be used by default when the application sends messages to the queue."
  remarks: "When you send any object that is not of type <xref:System.Messaging.Message> to the queue, the <xref:System.Messaging.MessageQueue> inserts the object into a Message Queuing message. At that time, the <xref:System.Messaging.MessageQueue> applies to the message the property values you specify in the DefaultPropertiesToSend property. Conversely, if you send a <xref:System.Messaging.Message> to the queue, these properties are already specified for the instance itself, so DefaultPropertiesToSend is ignored for the <xref:System.Messaging.Message>.       Although you set the properties through the <xref:System.Messaging.MessageQueue> object, the DefaultPropertiesToSend refers to the properties of the messages that are sent to the queue, not the queue itself.       The default values for the properties are shown in the following table.      |Property|Default value|   |--------------|-------------------|   |<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>|`AcknowledgeType.None`|   |<xref:System.Messaging.DefaultPropertiesToSend.AdministrationQueue%2A>|`null`|   |<xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>|Zero (0)|   |<xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>|`true`|   |<xref:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|   |<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>|A zero-length array of bytes|   |<xref:System.Messaging.DefaultPropertiesToSend.HashAlgorithm%2A>|`HashAlgorithm.MD5`|   |<xref:System.Messaging.DefaultPropertiesToSend.Label%2A>|Empty string (&quot;&quot;)|   |<xref:System.Messaging.DefaultPropertiesToSend.Priority%2A>|`MessagePriority.Normal`|   |<xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>|`false`|   |<xref:System.Messaging.DefaultPropertiesToSend.ResponseQueue%2A>|`null`|   |<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|   |<xref:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue%2A>|`null`|   |<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>|`false`|   |<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>|`false`|   |<xref:System.Messaging.DefaultPropertiesToSend.UseEncryption%2A>|`false`|   |<xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A>|`false`|   |<xref:System.Messaging.DefaultPropertiesToSend.UseTracing%2A>|`false`|       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|Yes|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example uses the priority of a message to determine default properties to send for the message.  \n  \n [!code-cpp[MessageQueue.DefaultPropertiesToSend#1](~/add/codesnippet/CPP/p-system.messaging.messa_25_1.cpp)]\n [!code-cs[MessageQueue.DefaultPropertiesToSend#1](~/add/codesnippet/CSharp/p-system.messaging.messa_25_1.cs)]\n [!code-vb[MessageQueue.DefaultPropertiesToSend#1](~/add/codesnippet/VisualBasic/p-system.messaging.messa_25_1.vb)]"
  syntax:
    content: public System.Messaging.DefaultPropertiesToSend DefaultPropertiesToSend { get; set; }
    return:
      type: System.Messaging.DefaultPropertiesToSend
      description: "A <see cref=&quot;T:System.Messaging.DefaultPropertiesToSend&quot;></see> that contains the default Message Queuing message property values used when the application sends objects other than <see cref=&quot;T:System.Messaging.Message&quot;></see> instances to the queue."
  overload: System.Messaging.MessageQueue.DefaultPropertiesToSend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The default properties could not be set for the queue, possibly because one of the properties is not valid."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Delete(System.String)
  id: Delete(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Delete(String)
  nameWithType: MessageQueue.Delete(String)
  fullName: System.Messaging.MessageQueue.Delete(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Deletes a queue on a Message Queuing server."
  remarks: "The syntax for the `path` parameter depends on the type of queue.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n  \n For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \n  \n Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path.  \n  \n|Reference|Syntax|  \n|---------------|------------|  \n|Format name|FormatName:[ *format name* ]|  \n|Label|Label:[ *label* ]|  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|"
  example:
  - "The following code example deletes a Message Queuing queue, if it exists.  \n  \n [!code-vb[MessageQueue.ExistsDelete#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_42_1.vb)]\n [!code-cs[MessageQueue.ExistsDelete#1](~/add/codesnippet/CSharp/m-system.messaging.messa_42_1.cs)]\n [!code-cpp[MessageQueue.ExistsDelete#1](~/add/codesnippet/CPP/m-system.messaging.messa_42_1.cpp)]"
  syntax:
    content: public static void Delete (string path);
    parameters:
    - id: path
      type: System.String
      description: "The location of the queue to be deleted."
  overload: System.Messaging.MessageQueue.Delete*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path parameter is  or is an empty string (&quot;&quot;)."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The syntax for the path parameter is not valid.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.DenySharedReceive
  id: DenySharedReceive
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: DenySharedReceive
  nameWithType: MessageQueue.DenySharedReceive
  fullName: System.Messaging.MessageQueue.DenySharedReceive
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets a value that indicates whether this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> has exclusive access to receive messages from the Message Queuing queue."
  remarks: "DenySharedReceive specifies the shared mode of the queue referenced by this <xref:System.Messaging.MessageQueue>. Set DenySharedReceive to `true` to indicate that only this <xref:System.Messaging.MessageQueue> should have access to peek or receive messages from the queue with the specified <xref:System.Messaging.MessageQueue.Path%2A>. If another <xref:System.Messaging.MessageQueue> or another application is associated with the same queue resource, that instance or application will not be able to peek or receive messages, but it can still send them.       If DenySharedReceive is `false`, the queue is available to multiple applications for sending, peeking, or receiving messages.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|Yes|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example gets and sets the value of a message queue's DenySharedReceive property.  \n  \n [!code-cs[MessageQueue#10](~/add/codesnippet/CSharp/p-system.messaging.messa_17_1.cs)]"
  syntax:
    content: public bool DenySharedReceive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> has exclusive rights to receive messages from the queue; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.DenySharedReceive*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueue.Dispose(Boolean)
  fullName: System.Messaging.MessageQueue.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Disposes of the resources (other than memory) used by the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>."
  remarks: "Call Dispose when you are finished using the <xref:System.Messaging.MessageQueue>. The Dispose method leaves the <xref:System.Messaging.MessageQueue> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Messaging.MessageQueue> so the memory it was occupying can be reclaimed by garbage collection.       You should call Dispose before you release your last reference to the <xref:System.Messaging.MessageQueue>. Otherwise, the resources the <xref:System.Messaging.MessageQueue> is using will not be freed until garbage collection calls the <xref:System.Messaging.MessageQueue> object&quot;s destructor."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n     to release both managed and unmanaged resources;  to release only unmanaged resources."
  overload: System.Messaging.MessageQueue.Dispose*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.EnableConnectionCache
  id: EnableConnectionCache
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: EnableConnectionCache
  nameWithType: MessageQueue.EnableConnectionCache
  fullName: System.Messaging.MessageQueue.EnableConnectionCache
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets a value that indicates whether a cache of connections will be maintained by the application."
  remarks: "A connection cache is a list of references to structures that contain read or write handles to queues. When EnableConnectionCache is `true`, the <xref:System.Messaging.MessageQueue> borrows handles from the cache each time you call <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, <xref:System.Messaging.MessageQueue.Peek%2A>, or <xref:System.Messaging.MessageQueue.Receive%2A>, rather than open new handles. This can improve performance. Using a connection cache also insulates the <xref:System.Messaging.MessageQueue> from changes in the network topology.       If you create a new connection to a queue when the connection cache is full, the <xref:System.Messaging.MessageQueue> overwrites the least recently accessed structure with the new connection. You can clear the cache entirely by calling <xref:System.Messaging.MessageQueue.ClearConnectionCache%2A>, for example, if the format names of the queues you are working with have changed so that the previous read and write handles are no longer valid.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|Yes|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example gets and sets the value of a message queue's EnableConnectionCache property.  \n  \n [!code-cs[MessageQueue#11](~/add/codesnippet/CSharp/p-system.messaging.messa_101_1.cs)]"
  syntax:
    content: public static bool EnableConnectionCache { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to create and use a connection cache; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.EnableConnectionCache*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.EncryptionRequired
  id: EncryptionRequired
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: EncryptionRequired
  nameWithType: MessageQueue.EncryptionRequired
  fullName: System.Messaging.MessageQueue.EncryptionRequired
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets a value that indicates whether the queue accepts only non-private (non-encrypted) messages."
  remarks: "When you specify that encryption is required for the messages sent to a queue, only the message bodies are encrypted. The other members (for example, the <xref:System.Messaging.Message.Label%2A> and <xref:System.Messaging.Message.SenderId%2A> properties) cannot be encrypted.       Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.       Encrypting a message makes the message private. You can specify the queue&quot;s encryption requirement to be `None`, `Body`, or `Optional` by setting the EncryptionRequired property appropriately. The <xref:System.Messaging.Message.UseEncryption%2A> setting of the message must correspond to the encryption requirement of the queue. If the message is not encrypted but the queue specifies `Body`, or if the message is encrypted but the queue specifies `None`, the message is rejected by the queue. If the sending application requests a negative acknowledgment message in this event, Message Queuing indicates the message&quot;s rejection to the sending application. If the <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, a message that fails encryption is sent to the dead-letter queue. Otherwise, the message is lost.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example gets and sets the value of a message queue's EncryptionRequired property.  \n  \n [!code-cs[MessageQueue#12](~/add/codesnippet/CSharp/p-system.messaging.messa_67_1.cs)]"
  syntax:
    content: public System.Messaging.EncryptionRequired EncryptionRequired { get; set; }
    return:
      type: System.Messaging.EncryptionRequired
      description: "One of the <see cref=&quot;T:System.Messaging.EncryptionRequired&quot;></see> values. The default is <xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.EncryptionRequired*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)
  id: EndPeek(System.IAsyncResult)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: EndPeek(IAsyncResult)
  nameWithType: MessageQueue.EndPeek(IAsyncResult)
  fullName: System.Messaging.MessageQueue.EndPeek(IAsyncResult)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Completes the specified asynchronous peek operation."
  remarks: "When the <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, EndPeek completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginPeek%2A> call. To do so, EndPeek peeks the message.       <xref:System.Messaging.MessageQueue.BeginPeek%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to EndPeek throws an exception.       EndPeek is used to read the message that caused the <xref:System.Messaging.MessageQueue.PeekCompleted> event to be raised.       If you want to continue to asynchronously peek messages, you can again call <xref:System.Messaging.MessageQueue.BeginPeek%2A> after calling EndPeek.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example creates an event handler named `MyPeekCompleted`, attaches it to the <xref:System.Messaging.MessageQueue.PeekCompleted> event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> to initiate an asynchronous peek operation on the queue that is located at the path \".\\myQueue\". When a <xref:System.Messaging.MessageQueue.PeekCompleted> event is raised, the example peeks the message and writes its body to the screen. The example then calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> again to initiate a new asynchronous peek operation.  \n  \n [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/add/codesnippet/CPP/m-system.messaging.messa_21_1.cpp)]\n [!code-cs[MessageQueue.BeginPeek_noparms#1](~/add/codesnippet/CSharp/m-system.messaging.messa_21_1.cs)]\n [!code-vb[MessageQueue.BeginPeek_noparms#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_21_1.vb)]"
  syntax:
    content: public System.Messaging.Message EndPeek (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "The <xref:System.IAsyncResult> that identifies the asynchronous peek operation to finish and from which to retrieve an end result."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.EndPeek*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The asyncResult parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The syntax of the asyncResult parameter is not valid."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)
  id: EndReceive(System.IAsyncResult)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: EndReceive(IAsyncResult)
  nameWithType: MessageQueue.EndReceive(IAsyncResult)
  fullName: System.Messaging.MessageQueue.EndReceive(IAsyncResult)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Completes the specified asynchronous receive operation."
  remarks: "When the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event is raised, EndReceive completes the operation that was initiated by the <xref:System.Messaging.MessageQueue.BeginReceive%2A> call. To do so, EndReceive receives the message.       <xref:System.Messaging.MessageQueue.BeginReceive%2A> can specify a time-out, which causes the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised if the time-out occurs before a message appears in the queue. When a time-out occurs without a message arriving in the queue, a subsequent call to EndReceive throws an exception.       EndReceive is used to read (removing from the queue) the message that caused the <xref:System.Messaging.MessageQueue.ReceiveCompleted> event to be raised.       If you want to continue to asynchronously receive messages, you can again call <xref:System.Messaging.MessageQueue.BeginReceive%2A> after calling EndReceive.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example chains asynchronous requests. It assumes there is a queue on the local computer called \"myQueue\". The `Main` function begins the asynchronous operation that is handled by the `MyReceiveCompleted` routine. `MyReceiveCompleted` processes the current message and begins a new asynchronous receive operation.  \n  \n [!code-cs[MessageQueue.BeginReceive_noparms_combined#1](~/add/codesnippet/CSharp/m-system.messaging.messa_41_1.cs)]\n [!code-cpp[MessageQueue.BeginReceive_noparms_combined#1](~/add/codesnippet/CPP/m-system.messaging.messa_41_1.cpp)]\n [!code-vb[MessageQueue.BeginReceive_noparms_combined#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_41_1.vb)]"
  syntax:
    content: public System.Messaging.Message EndReceive (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "The <xref:System.IAsyncResult> that identifies the asynchronous receive operation to finish and from which to retrieve an end result."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The asyncResult parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The syntax of the asyncResult parameter is not valid."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Exists(System.String)
  id: Exists(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Exists(String)
  nameWithType: MessageQueue.Exists(String)
  fullName: System.Messaging.MessageQueue.Exists(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Determines whether a Message Queuing queue exists at the specified path."
  remarks: "The Exists method determines whether a Message Queuing queue exists at a specified path. No method exists to determine whether a queue with a specified format name exists. For more information about the format name syntax and other path syntax forms, see the <xref:System.Messaging.MessageQueue.Path%2A> property.)  \n  \n Exists is an expensive operation. Use it only when it is necessary within the application.  \n  \n> [!NOTE]\n>  The Exists method does not support the <xref:System.Messaging.MessageQueue.FormatName%2A> prefix.  \n  \n The syntax for the `path` parameter depends on the type of queue, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n  \n Exists cannot be called to verify the existence of a remote private queue.  \n  \n For more syntax, see the <xref:System.Messaging.MessageQueue.Path%2A> property.  \n  \n Alternatively, you can use the <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path.  \n  \n|Reference|Syntax|  \n|---------------|------------|  \n|Label|Label:[ `label` ]|  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|"
  example:
  - "The following code example verifies whether a Message Queuing queue exists, and then deletes it.  \n  \n [!code-vb[MessageQueue.ExistsDelete#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_14_1.vb)]\n [!code-cs[MessageQueue.ExistsDelete#1](~/add/codesnippet/CSharp/m-system.messaging.messa_14_1.cs)]\n [!code-cpp[MessageQueue.ExistsDelete#1](~/add/codesnippet/CPP/m-system.messaging.messa_14_1.cpp)]"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "The location of the queue to find."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Messaging.MessageQueue.Exists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path syntax is not valid."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method.       -or-       The Exists method is being called on a remote private queue"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The application used format name syntax when verifying queue existence."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.FormatName
  id: FormatName
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: FormatName
  nameWithType: MessageQueue.FormatName
  fullName: System.Messaging.MessageQueue.FormatName
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets the unique queue name that Message Queuing generated at the time of the queue&quot;s creation."
  remarks: "The FormatName property contains the format name of the queue. Message Queuing uses the format name to identify which queue to open and how to access it. Unlike most of a queue's characteristics, the format name is not a Message Queuing application queue property, so you cannot access it through the Message Queuing management tool. The format name is simply a unique name for the queue, which Message Queuing generates when it creates the queue or which the application generates later.  \n  \n If you specify a path using the path name syntax (such as `myComputer\\myQueue`) rather than using the format name syntax when you read or write to the queue, the primary domain controller (which uses Active Directory) translates the <xref:System.Messaging.MessageQueue.Path%2A> into the associated FormatName before accessing the queue. If your application is working offline, you must use the format name syntax; otherwise, the primary domain controller will not be available to perform the path translation.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|"
  example:
  - "The following code example displays the value of a message queue's FormatName property.  \n  \n [!code-cs[MessageQueue#13](~/add/codesnippet/CSharp/p-system.messaging.messa_28_1.cs)]"
  syntax:
    content: public string FormatName { get; }
    return:
      type: System.String
      description: "The name for the queue, which is unique on the network."
  overload: System.Messaging.MessageQueue.FormatName*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The <xref:System.Messaging.MessageQueue.Path%2A> is not set.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Formatter
  id: Formatter
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Formatter
  nameWithType: MessageQueue.Formatter
  fullName: System.Messaging.MessageQueue.Formatter
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the formatter used to serialize an object into or deserialize an object from the body of a message read from or written to the queue."
  remarks: "The Formatter property contains an instance of a formatter object, which transforms messages when your application reads or writes to the queue.       When the application sends message to the queue, the formatter serializes the object into a stream and inserts it into the message body. When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.       The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format. The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation. The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.       <xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>. The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications.       When your application sends messages to the queue, the Formatter applies only to those messages that use the default message properties, <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>. If you send a <xref:System.Messaging.Message> to the queue, Message Queuing uses the formatter defined in the <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property to serialize the body instead.       The <xref:System.Messaging.MessageQueue> class will always use a <xref:System.Messaging.Message> to receive or peek a message from the queue. The message is deserialized using the Formatter property.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/CPP/p-system.messaging.messa_10_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/CSharp/p-system.messaging.messa_10_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/VisualBasic/p-system.messaging.messa_10_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/CPP/p-system.messaging.messa_10_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/CSharp/p-system.messaging.messa_10_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/VisualBasic/p-system.messaging.messa_10_2.vb)]"
  syntax:
    content: public System.Messaging.IMessageFormatter Formatter { get; set; }
    return:
      type: System.Messaging.IMessageFormatter
      description: "The <see cref=&quot;T:System.Messaging.IMessageFormatter&quot;></see> that produces a stream to be written to or read from the message body. The default is <see cref=&quot;T:System.Messaging.XmlMessageFormatter&quot;></see>."
  overload: System.Messaging.MessageQueue.Formatter*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetAllMessages
  id: GetAllMessages
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetAllMessages()
  nameWithType: MessageQueue.GetAllMessages()
  fullName: System.Messaging.MessageQueue.GetAllMessages()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Returns all the messages that are in the queue."
  remarks: "GetAllMessages returns a static snapshot of the messages in the queue, not dynamic links to those messages. Therefore, you cannot use the array to modify the messages in the queue. If you want real-time, dynamic interaction with the queue (such as the ability to delete messages), call the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A> method, which returns a dynamic list of the messages in the queue.       Because GetAllMessages returns a copy of the messages in the queue at the time the method was called, the array does not reflect new messages that arrive in the queue or messages that are removed from the queue.       GetAllMessages retrieves only those properties not filtered out by the <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of GetAllMessages.  \n  \n [!code-cpp[MessageQueue2#21](~/add/codesnippet/CPP/m-system.messaging.messa_49_1.cpp)]\n [!code-cs[MessageQueue2#21](~/add/codesnippet/CSharp/m-system.messaging.messa_49_1.cs)]"
  syntax:
    content: public System.Messaging.Message[] GetAllMessages ();
    parameters: []
    return:
      type: System.Messaging.Message[]
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetAllMessages*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetEnumerator
  id: GetEnumerator
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: MessageQueue.GetEnumerator()
  fullName: System.Messaging.MessageQueue.GetEnumerator()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Enumerates the messages in a queue. GetEnumerator is deprecated. &lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt; should be used instead."
  remarks: "The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of GetEnumerator.  \n  \n [!code-cpp[MessageQueue2#22](~/add/codesnippet/CPP/m-system.messaging.messa_3_1.cpp)]\n [!code-cs[MessageQueue2#22](~/add/codesnippet/CSharp/m-system.messaging.messa_3_1.cs)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetMachineId(System.String)
  id: GetMachineId(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetMachineId(String)
  nameWithType: MessageQueue.GetMachineId(String)
  fullName: System.Messaging.MessageQueue.GetMachineId(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets the identifier of the computer on which the queue referenced by this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> is located."
  remarks: "You can use a computer's identifier for two purposes, among others: to read the computer journal and to set security certificates. However, you cannot call GetMachineId for a remote computer when you are working offline because the application must have access to the directory service on the domain controller.  \n  \n The computer identifier (or machine identifier) is a <xref:System.Guid> that Message Queuing creates when a computer is added to the enterprise. Message Queuing combines the computer identifier with the `Machine` and `Journal` keywords to create the machine journal's format name, which has the syntax `Machine=<computeridentifier>;Journal`. The machine journal, which is also known as the journal queue, is a system queue that stores copies of application-generated messages when the <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> property is `true`.  \n  \n This syntax for the journal is only valid when constructing the format name for the queue. The path name syntax is `MachineName`\\\\`Journal$`.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|No|  \n|Local computer and direct format name|No|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|"
  example:
  - "The following code example calls GetMachineId.  \n  \n [!code-cs[MessageQueue#14](~/add/codesnippet/CSharp/m-system.messaging.messa_0_1.cs)]"
  syntax:
    content: public static Guid GetMachineId (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "The name of the computer that contains the queue, without the two preceding backslashes (\\\\\\\\)."
    return:
      type: System.Guid
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetMachineId*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The computer identifier could not be retrieved, possibly because the directory service is not available; for example, if you are working offline.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetMessageEnumerator
  id: GetMessageEnumerator
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetMessageEnumerator()
  nameWithType: MessageQueue.GetMessageEnumerator()
  fullName: System.Messaging.MessageQueue.GetMessageEnumerator()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Creates an enumerator object for all the messages in the queue. GetMessageEnumerator is deprecated. &lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt; should be used instead."
  remarks: "GetMessageEnumerator creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator&quot;s current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that GetMessageEnumerator returns.       Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor&quot;s current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.       The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.       If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>. This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|Yes|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority?displayProperty=fullName>.  \n  \n [!code-cs[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/CSharp/m-system.messaging.messa_17_1.cs)]\n [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/CPP/m-system.messaging.messa_17_1.cpp)]\n [!code-vb[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_17_1.vb)]"
  syntax:
    content: public System.Messaging.MessageEnumerator GetMessageEnumerator ();
    parameters: []
    return:
      type: System.Messaging.MessageEnumerator
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetMessageEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetMessageEnumerator2
  id: GetMessageEnumerator2
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetMessageEnumerator2()
  nameWithType: MessageQueue.GetMessageEnumerator2()
  fullName: System.Messaging.MessageQueue.GetMessageEnumerator2()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Creates an enumerator object for all the messages in the queue."
  remarks: "GetMessageEnumerator2 creates a dynamic list of all the messages in a queue. You can remove from the queue the message at the enumerator&quot;s current position by calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> for the <xref:System.Messaging.MessageEnumerator> that GetMessageEnumerator2 returns.       Because the cursor is associated with the dynamic list of messages in the queue, the enumeration reflects any modification you make to the messages in the queue, if the message is beyond the current cursor position. For example, the enumerator can automatically access a lower-priority message placed beyond the cursor&quot;s current position, but not a higher-priority message inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageEnumerator.Reset%2A> for the <xref:System.Messaging.MessageEnumerator>.       The order of the messages in the enumeration reflects their order in the queue, so higher-priority messages will appear before lower-priority ones.       If you want a static snapshot of the messages in the queue rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetAllMessages%2A>. This method returns an array of <xref:System.Messaging.Message> objects, which represent the messages at the time the method was called.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|Yes|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public System.Messaging.MessageEnumerator GetMessageEnumerator2 ();
    parameters: []
    return:
      type: System.Messaging.MessageEnumerator
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetMessageEnumerator2*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetMessageQueueEnumerator
  id: GetMessageQueueEnumerator
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetMessageQueueEnumerator()
  nameWithType: MessageQueue.GetMessageQueueEnumerator()
  fullName: System.Messaging.MessageQueue.GetMessageQueueEnumerator()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Provides forward-only cursor semantics to enumerate through all public queues on the network."
  remarks: "This overload of GetMessageQueueEnumerator returns an enumeration of all the public queues that are on the network.       Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue list for queues deleted or added beyond the cursor&quot;s current position. Additions or deletion of queues located before the cursor&quot;s current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.       There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.       If you want a static snapshot of the queues on the network rather than a dynamic connection to them, call <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>. Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|No|   |Local computer and direct format name|No|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example iterates through all the message queues in the network, and examines the path for each queue. Finally, it displays the number of public queues on the network.  \n  \n [!code-cs[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/CSharp/m-system.messaging.messa_18_1.cs)]\n [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/CPP/m-system.messaging.messa_18_1.cpp)]\n [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_18_1.vb)]"
  syntax:
    content: public static System.Messaging.MessageQueueEnumerator GetMessageQueueEnumerator ();
    parameters: []
    return:
      type: System.Messaging.MessageQueueEnumerator
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetMessageQueueEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)
  id: GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetMessageQueueEnumerator(MessageQueueCriteria)
  nameWithType: MessageQueue.GetMessageQueueEnumerator(MessageQueueCriteria)
  fullName: System.Messaging.MessageQueue.GetMessageQueueEnumerator(MessageQueueCriteria)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Provides forward-only cursor semantics to enumerate through all public queues on the network that meet the specified criteria."
  remarks: "This overload of <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A> returns a listing of all the public queues on the network that satisfy criteria defined in the application criteria. You can specify the criteria to include, for example, queue creation or modification time, computer name, label, category, or any combination of these.       Because the cursor is associated with a dynamic listing, the enumeration reflects any modification you make to a queue that occurs beyond the cursor&quot;s current position. Changes to queues located before the cursor&quot;s current position are not reflected. For example, the enumerator can automatically access a queue appended beyond the cursor position but not one inserted before that position. However, you can reset the enumeration, thereby moving the cursor back to the beginning of the list, by calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> for the <xref:System.Messaging.MessageQueueEnumerator>.       There is no defined ordering of queues in a network. An enumerator does not order them, for example, by computer, label, public or private status, or any other accessible criteria.       If you want a static snapshot of the queues on the network rather than a dynamic connection to them, specify criteria for <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> or call <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29>. Each of these two methods returns an array of <xref:System.Messaging.MessageQueue> objects, which represent the queues at the time the method was called. Calling <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provides the same results as calling <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> with the filtering criteria of <xref:System.Messaging.MessageQueue.Category%2A>, <xref:System.Messaging.MessageQueue.Label%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>, respectively.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|No|   |Local computer and direct format name|No|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example iterates through message queues and displays the path of each queue that was created in the last day and that exists on the computer \"MyComputer\".  \n  \n [!code-vb[MessageQueue.GetMessageQueueEnumerator_criteria#1](~/add/codesnippet/VisualBasic/33f4546b-79de-4b1f-91cb-_1.vb)]\n [!code-cpp[MessageQueue.GetMessageQueueEnumerator_criteria#1](~/add/codesnippet/CPP/33f4546b-79de-4b1f-91cb-_1.cpp)]\n [!code-cs[MessageQueue.GetMessageQueueEnumerator_criteria#1](~/add/codesnippet/CSharp/33f4546b-79de-4b1f-91cb-_1.cs)]"
  syntax:
    content: public static System.Messaging.MessageQueueEnumerator GetMessageQueueEnumerator (System.Messaging.MessageQueueCriteria criteria);
    parameters:
    - id: criteria
      type: System.Messaging.MessageQueueCriteria
      description: "A  that contains the criteria used to filter the available message queues."
    return:
      type: System.Messaging.MessageQueueEnumerator
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetMessageQueueEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetPrivateQueuesByMachine(System.String)
  id: GetPrivateQueuesByMachine(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetPrivateQueuesByMachine(String)
  nameWithType: MessageQueue.GetPrivateQueuesByMachine(String)
  fullName: System.Messaging.MessageQueue.GetPrivateQueuesByMachine(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Retrieves all the private queues on the specified computer."
  remarks: "GetPrivateQueuesByMachine retrieves a static snapshot of the queues on a specified computer.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|Yes|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example retrieves lists of queues.  \n  \n [!code-cs[MessageQueue.GetQueueLists#1](~/add/codesnippet/CSharp/m-system.messaging.messa_19_1.cs)]\n [!code-vb[MessageQueue.GetQueueLists#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_19_1.vb)]\n [!code-cpp[MessageQueue.GetQueueLists#1](~/add/codesnippet/CPP/m-system.messaging.messa_19_1.cpp)]"
  syntax:
    content: public static System.Messaging.MessageQueue[] GetPrivateQueuesByMachine (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "The computer from which to retrieve the private queues."
    return:
      type: System.Messaging.MessageQueue[]
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetPrivateQueuesByMachine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The machineName parameter is  or an empty string (&quot;&quot;)."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetPublicQueues
  id: GetPublicQueues
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetPublicQueues()
  nameWithType: MessageQueue.GetPublicQueues()
  fullName: System.Messaging.MessageQueue.GetPublicQueues()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Retrieves all the public queues on the network."
  remarks: "Use this overload if you want a complete list of all the public queues on the network. If you want to restrict the list by certain criteria, such as <xref:System.Messaging.MessageQueue.MachineName%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, or last modified time use another overload of this method. (Alternatively, you can use <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, or <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>.)       GetPublicQueues retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|No|   |Local computer and direct format name|No|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example retrieves lists of queues.  \n  \n [!code-cs[MessageQueue.GetQueueLists#1](~/add/codesnippet/CSharp/m-system.messaging.messa_36_1.cs)]\n [!code-vb[MessageQueue.GetQueueLists#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_36_1.vb)]\n [!code-cpp[MessageQueue.GetQueueLists#1](~/add/codesnippet/CPP/m-system.messaging.messa_36_1.cpp)]"
  syntax:
    content: public static System.Messaging.MessageQueue[] GetPublicQueues ();
    parameters: []
    return:
      type: System.Messaging.MessageQueue[]
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetPublicQueues*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetPublicQueues(System.Messaging.MessageQueueCriteria)
  id: GetPublicQueues(System.Messaging.MessageQueueCriteria)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetPublicQueues(MessageQueueCriteria)
  nameWithType: MessageQueue.GetPublicQueues(MessageQueueCriteria)
  fullName: System.Messaging.MessageQueue.GetPublicQueues(MessageQueueCriteria)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Retrieves all the public queues on the network that meet the specified criteria."
  remarks: "If you want to filter all the public queues on the network by label, category, or computer name, the <xref:System.Messaging.MessageQueue> class contains specific methods that provide that functionality (<xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29>, respectively). Use this overload to get a list of all the public queues on the network that meet more than one of these criteria (for example, if you want to specify both a label and a category). You can also filter by message criteria other than <xref:System.Messaging.MessageQueue.Label%2A>, <xref:System.Messaging.MessageQueue.Category%2A>, and <xref:System.Messaging.MessageQueue.MachineName%2A>. For example, you use this overload to filter by a queue&quot;s last-modified time. Simply create a new instance of the <xref:System.Messaging.MessageQueueCriteria> class, set the appropriate properties in the instance, and pass the instance as the `criteria` parameter.       <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|No|   |Local computer and direct format name|No|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example retrieves lists of queues.  \n  \n [!code-cs[MessageQueue.GetQueueLists#1](~/add/codesnippet/CSharp/32c0a5f3-20dc-4f9f-b215-_1.cs)]\n [!code-vb[MessageQueue.GetQueueLists#1](~/add/codesnippet/VisualBasic/32c0a5f3-20dc-4f9f-b215-_1.vb)]\n [!code-cpp[MessageQueue.GetQueueLists#1](~/add/codesnippet/CPP/32c0a5f3-20dc-4f9f-b215-_1.cpp)]"
  syntax:
    content: public static System.Messaging.MessageQueue[] GetPublicQueues (System.Messaging.MessageQueueCriteria criteria);
    parameters:
    - id: criteria
      type: System.Messaging.MessageQueueCriteria
      description: "A  that contains the criteria used to filter the queues."
    return:
      type: System.Messaging.MessageQueue[]
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetPublicQueues*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetPublicQueuesByCategory(System.Guid)
  id: GetPublicQueuesByCategory(System.Guid)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetPublicQueuesByCategory(Guid)
  nameWithType: MessageQueue.GetPublicQueuesByCategory(Guid)
  fullName: System.Messaging.MessageQueue.GetPublicQueuesByCategory(Guid)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Retrieves all the public queues on the network that belong to the specified category."
  remarks: "Use this method to filter the public queues by category. The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing type ID property (which is read/write) of a particular queue. Although you can use <xref:System.Guid.NewGuid%2A> to create a category value that is unique across all <xref:System.Guid> values, it is not necessary. The category value needs to be distinct only from other categories, not from all other <xref:System.Guid> values. For example, you can assign {00000000-0000-0000-0000-000000000001} as the <xref:System.Messaging.MessageQueue.Category%2A> for one set of queues and {00000000-0000-0000-0000-000000000002} as the <xref:System.Messaging.MessageQueue.Category%2A> for another set.       GetPublicQueuesByCategory retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the category as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|No|   |Local computer and direct format name|No|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example retrieves lists of queues.  \n  \n [!code-cs[MessageQueue.GetQueueLists#1](~/add/codesnippet/CSharp/m-system.messaging.messa_8_1.cs)]\n [!code-vb[MessageQueue.GetQueueLists#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_8_1.vb)]\n [!code-cpp[MessageQueue.GetQueueLists#1](~/add/codesnippet/CPP/m-system.messaging.messa_8_1.cpp)]"
  syntax:
    content: public static System.Messaging.MessageQueue[] GetPublicQueuesByCategory (Guid category);
    parameters:
    - id: category
      type: System.Guid
      description: "A <xref:System.Guid> that groups the set of queues to be retrieved."
    return:
      type: System.Messaging.MessageQueue[]
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetPublicQueuesByCategory*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetPublicQueuesByLabel(System.String)
  id: GetPublicQueuesByLabel(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetPublicQueuesByLabel(String)
  nameWithType: MessageQueue.GetPublicQueuesByLabel(String)
  fullName: System.Messaging.MessageQueue.GetPublicQueuesByLabel(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Retrieves all the public queues on the network that carry the specified label."
  remarks: "Use this method to filter the public queues by label.       GetPublicQueuesByLabel retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the label as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|No|   |Local computer and direct format name|No|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example retrieves lists of queues.  \n  \n [!code-cs[MessageQueue.GetQueueLists#1](~/add/codesnippet/CSharp/m-system.messaging.messa_1_1.cs)]\n [!code-vb[MessageQueue.GetQueueLists#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_1_1.vb)]\n [!code-cpp[MessageQueue.GetQueueLists#1](~/add/codesnippet/CPP/m-system.messaging.messa_1_1.cpp)]"
  syntax:
    content: public static System.Messaging.MessageQueue[] GetPublicQueuesByLabel (string label);
    parameters:
    - id: label
      type: System.String
      description: "A label that groups the set of queues to be retrieved."
    return:
      type: System.Messaging.MessageQueue[]
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetPublicQueuesByLabel*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The label parameter is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetPublicQueuesByMachine(System.String)
  id: GetPublicQueuesByMachine(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetPublicQueuesByMachine(String)
  nameWithType: MessageQueue.GetPublicQueuesByMachine(String)
  fullName: System.Messaging.MessageQueue.GetPublicQueuesByMachine(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Retrieves all the public queues that reside on the specified computer."
  remarks: "Use this method to filter the public queues by computer.       GetPublicQueuesByMachine retrieves a static snapshot of the queues. To interact with a dynamic list of the queues, use <xref:System.Messaging.MessageQueue.GetMessageQueueEnumerator%2A>. You can specify the computer name as part of the <xref:System.Messaging.MessageQueueCriteria> you pass into the method.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|No|   |Local computer and direct format name|No|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example retrieves lists of queues.  \n  \n [!code-cs[MessageQueue.GetQueueLists#1](~/add/codesnippet/CSharp/m-system.messaging.messa_2_1.cs)]\n [!code-vb[MessageQueue.GetQueueLists#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_2_1.vb)]\n [!code-cpp[MessageQueue.GetQueueLists#1](~/add/codesnippet/CPP/m-system.messaging.messa_2_1.cpp)]"
  syntax:
    content: public static System.Messaging.MessageQueue[] GetPublicQueuesByMachine (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "The name of the computer that contains the set of public queues to be retrieved."
    return:
      type: System.Messaging.MessageQueue[]
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetPublicQueuesByMachine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The machineName parameter has incorrect syntax."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.GetSecurityContext
  id: GetSecurityContext
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: GetSecurityContext()
  nameWithType: MessageQueue.GetSecurityContext()
  fullName: System.Messaging.MessageQueue.GetSecurityContext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Retrieves the security context that MSMQ associates with the current user (thread identity) at the time of this call."
  syntax:
    content: public static System.Messaging.SecurityContext GetSecurityContext ();
    parameters: []
    return:
      type: System.Messaging.SecurityContext
      description: "To be added."
  overload: System.Messaging.MessageQueue.GetSecurityContext*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Id
  id: Id
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Id
  nameWithType: MessageQueue.Id
  fullName: System.Messaging.MessageQueue.Id
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets the unique Message Queuing identifier of the queue."
  remarks: "Message Queuing sets the Id property when it creates the queue. This property is only available for public queues.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example displays the value of a message queue's Id property.  \n  \n [!code-cs[MessageQueue#15](~/add/codesnippet/CSharp/p-system.messaging.messa_98_1.cs)]"
  syntax:
    content: public Guid Id { get; }
    return:
      type: System.Guid
      description: "A Id that represents the message identifier generated by the Message Queuing application."
  overload: System.Messaging.MessageQueue.Id*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.InfiniteQueueSize
  id: InfiniteQueueSize
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: InfiniteQueueSize
  nameWithType: MessageQueue.InfiniteQueueSize
  fullName: System.Messaging.MessageQueue.InfiniteQueueSize
  type: Field
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Specifies that no size restriction exists for a queue."
  remarks: "This member is frequently used when setting <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A> or <xref:System.Messaging.MessageQueue.MaximumQueueSize%2A>."
  example:
  - "The following code example demonstrates the use of the InfiniteQueueSize member.  \n  \n [!code-cs[MessageQueue#16](~/add/codesnippet/CSharp/f-system.messaging.messa_2_1.cs)]"
  syntax:
    content: public static readonly long InfiniteQueueSize;
    return:
      type: System.Int64
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.InfiniteTimeout
  id: InfiniteTimeout
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: InfiniteTimeout
  nameWithType: MessageQueue.InfiniteTimeout
  fullName: System.Messaging.MessageQueue.InfiniteTimeout
  type: Field
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Specifies that no time-out exists for methods that peek or receive messages."
  remarks: '<xref:System.Messaging.MessageQueue> supports two types of message retrieval: synchronous and asynchronous. The synchronous methods, <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.Receive%2A>, cause the process thread to wait a specified time interval for a new message to arrive in the queue. If the specified time interval is InfiniteTimeout, the process thread remains blocked until a new message is available. On the other hand, <xref:System.Messaging.MessageQueue.BeginPeek%2A> and <xref:System.Messaging.MessageQueue.BeginReceive%2A> (the asynchronous methods), allow the main application tasks to continue in a separate thread until a message arrives in the queue.'
  example:
  - "The following code example demonstrates the use of the InfiniteTimeout member.  \n  \n [!code-cs[MessageQueue#17](~/add/codesnippet/CSharp/f-system.messaging.messa_1_1.cs)]"
  syntax:
    content: public static readonly TimeSpan InfiniteTimeout;
    return:
      type: System.TimeSpan
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Label
  id: Label
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Label
  nameWithType: MessageQueue.Label
  fullName: System.Messaging.MessageQueue.Label
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the queue description."
  remarks: "The maximum length of a message queue label is 124 characters.       The Label property does not need to be unique across all queues. However, if multiple queues share the same Label, you cannot use the <xref:System.Messaging.MessageQueue.Send%28System.Object%29> method to broadcast a message to all of them. If you use the label syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property when you send the message, an exception will be thrown if the Label is not unique.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example gets and sets the value of a message queue's Label property.  \n  \n [!code-cs[MessageQueue#18](~/add/codesnippet/CSharp/p-system.messaging.messa_59_1.cs)]"
  syntax:
    content: public string Label { get; set; }
    return:
      type: System.String
      description: "The label for the message queue. The default is an empty string (&quot;&quot;)."
  overload: System.Messaging.MessageQueue.Label*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The label was set to an invalid value."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.LastModifyTime
  id: LastModifyTime
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: LastModifyTime
  nameWithType: MessageQueue.LastModifyTime
  fullName: System.Messaging.MessageQueue.LastModifyTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets the last time the properties of a queue were modified."
  remarks: "The last modification time includes when the queue was created and any <xref:System.Messaging.MessageQueue> property that modifies the Message Queuing queue, such as <xref:System.Messaging.MessageQueue.BasePriority%2A>. The value of the LastModifyTime property represents the system time of the local computer.       You must call <xref:System.Messaging.MessageQueue.Refresh%2A> before getting the LastModifyTime property; otherwise, the modification time associated with this <xref:System.Messaging.MessageQueue> might not be current.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example displays the value of a message queue's LastModifyTime property.  \n  \n [!code-cs[MessageQueue#19](~/add/codesnippet/CSharp/p-system.messaging.messa_50_1.cs)]"
  syntax:
    content: public DateTime LastModifyTime { get; }
    return:
      type: System.DateTime
      description: "A &lt;xref:System.DateTime&gt; that indicates when the queue properties were last modified."
  overload: System.Messaging.MessageQueue.LastModifyTime*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.MachineName
  id: MachineName
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MachineName
  nameWithType: MessageQueue.MachineName
  fullName: System.Messaging.MessageQueue.MachineName
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the name of the computer where the Message Queuing queue is located."
  remarks: "The MachineName is an integral component of the friendly name syntax of the queue <xref:System.Messaging.MessageQueue.Path%2A>. The following table shows the syntax you should use for a queue of a specified type when you want to identify the queue path using its friendly name.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n|Journal queue|`MachineName`\\\\`QueueName`\\\\`Journal$`|  \n|Machine journal queue|`MachineName`\\\\`Journal$`|  \n|Machine dead-letter queue|`MachineName`\\\\`Deadletter$`|  \n|Machine transactional dead-letter queue|`MachineName`\\\\`XactDeadletter$`|  \n  \n Use \".\" for the local computer when specifying the MachineName. Only the computer name is recognized for this property, for example, `Server0`. The MachineName property does not support the IP address format.  \n  \n If you define the <xref:System.Messaging.MessageQueue.Path%2A> in terms of the MachineName, the application throws an exception when working offline because the domain controller is required for path translation. Therefore, you must use the <xref:System.Messaging.MessageQueue.FormatName%2A> for the <xref:System.Messaging.MessageQueue.Path%2A> syntax when working offline.  \n  \n The MachineName, <xref:System.Messaging.MessageQueue.Path%2A>, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related. Changing the MachineName property causes the <xref:System.Messaging.MessageQueue.Path%2A> property to change. It is built from the new MachineName and the <xref:System.Messaging.MessageQueue.QueueName%2A>. Changing the <xref:System.Messaging.MessageQueue.Path%2A> (for example, to use the format name syntax) resets the MachineName and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue. If the <xref:System.Messaging.MessageQueue.QueueName%2A> property is empty, the <xref:System.Messaging.MessageQueue.Path%2A> is set to the Journal queue of the computer you specify.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|No|"
  example:
  - "The following code example gets and sets the value of a message queue's MachineName property.  \n  \n [!code-cs[MessageQueue#20](~/add/codesnippet/CSharp/p-system.messaging.messa_7_1.cs)]"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "The name of the computer where the queue is located. The Message Queuing default is &quot;.&quot;, the local computer."
  overload: System.Messaging.MessageQueue.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The name of the computer is not valid, possibly because the syntax is incorrect."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.MaximumJournalSize
  id: MaximumJournalSize
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MaximumJournalSize
  nameWithType: MessageQueue.MaximumJournalSize
  fullName: System.Messaging.MessageQueue.MaximumJournalSize
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the maximum size of the journal queue."
  remarks: "MaximumJournalSize provides access to the Message Queuing journal storage limit. It is relevant only when <xref:System.Messaging.MessageQueue.UseJournalQueue%2A> is `true`. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change       If you store messages in a journal or dead-letter queue, you should periodically clear the queue to remove messages that are no longer needed. Messages in such a queue count toward the message quota for the computer where the queue resides. (The administrator sets the computer quota.)       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example gets and sets the value of a message queue's MaximumJournalSize property.  \n  \n [!code-cs[MessageQueue#21](~/add/codesnippet/CSharp/p-system.messaging.messa_66_1.cs)]"
  syntax:
    content: public long MaximumJournalSize { get; set; }
    return:
      type: System.Int64
      description: "The maximum size, in kilobytes, of the journal queue. The Message Queuing default specifies that no limit exists."
  overload: System.Messaging.MessageQueue.MaximumJournalSize*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The maximum journal queue size was set to an invalid value."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.MaximumQueueSize
  id: MaximumQueueSize
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MaximumQueueSize
  nameWithType: MessageQueue.MaximumQueueSize
  fullName: System.Messaging.MessageQueue.MaximumQueueSize
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the maximum size of the queue."
  remarks: "The MaximumQueueSize provides access to the Message Queuing message storage limit, which is separate from the computer&quot;s message quota that the administrator defines. For more information about the message quota, see <xref:System.Messaging.MessageQueue.MaximumJournalSize%2A>.       Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change       If an attempt is made to exceed either the maximum queue size or the computer message quota, messages might be lost. When the queue quota is reached, Message Queuing notifies the administration queue of the sending application to indicate that the queue is full, by returning a negative acknowledgment message. Message Queuing continues to send negative acknowledgments until the total size of the messages in the queue drops below the limit.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example gets and sets the value of a message queue's MaximumQueueSize property.  \n  \n [!code-cs[MessageQueue#22](~/add/codesnippet/CSharp/p-system.messaging.messa_52_1.cs)]"
  syntax:
    content: public long MaximumQueueSize { get; set; }
    return:
      type: System.Int64
      description: "The maximum size, in kilobytes, of the queue. The Message Queuing default specifies that no limit exists."
  overload: System.Messaging.MessageQueue.MaximumQueueSize*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The maximum queue size contains a negative value."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.MessageReadPropertyFilter
  id: MessageReadPropertyFilter
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MessageReadPropertyFilter
  nameWithType: MessageQueue.MessageReadPropertyFilter
  fullName: System.Messaging.MessageQueue.MessageReadPropertyFilter
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the property filter for receiving or peeking messages."
  remarks: "This filter is a set of Boolean values restricting the message properties that the <xref:System.Messaging.MessageQueue> receives or peeks. When the <xref:System.Messaging.MessageQueue> receives or peeks a message from the server queue, it retrieves only those properties for which the MessageReadPropertyFilter value is `true`.       The following shows initial property values for the MessageReadPropertyFilter property. These settings are identical to calling <xref:System.Messaging.MessagePropertyFilter.SetDefaults%2A> on a <xref:System.Messaging.MessagePropertyFilter>.      |Property|Default value|   |--------------|-------------------|   |<xref:System.Messaging.MessagePropertyFilter.Acknowledgment%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.AcknowledgeType%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.AdministrationQueue%2A>|`true`|   |<xref:System.Messaging.MessagePropertyFilter.AppSpecific%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.ArrivedTime%2A>|`true`|   |<xref:System.Messaging.MessagePropertyFilter.AttachSenderId%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.Authenticated%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.AuthenticationProviderName%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.AuthenticationProviderType%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.Body%2A>|`true`|   |<xref:System.Messaging.MessagePropertyFilter.ConnectorType%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.CorrelationId%2A>|`true`|   |<xref:System.Messaging.MessagePropertyFilter.DefaultBodySize%2A>|1024 bytes|   |<xref:System.Messaging.MessagePropertyFilter.DefaultExtensionSize%2A>|255 bytes|   |<xref:System.Messaging.MessagePropertyFilter.DefaultLabelSize%2A>|255 bytes|   |<xref:System.Messaging.MessagePropertyFilter.DestinationQueue%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.DestinationSymmetricKey%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.DigitalSignature%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.EncryptionAlgorithm%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.Extension%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.HashAlgorithm%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.Id%2A>|`true`|   |<xref:System.Messaging.MessagePropertyFilter.IsFirstInTransaction%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.IsLastInTransaction%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.Label%2A>|`true`|   |<xref:System.Messaging.MessagePropertyFilter.MessageType%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.Priority%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.Recoverable%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.ResponseQueue%2A>|`true`|   |<xref:System.Messaging.MessagePropertyFilter.SenderCertificate%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.SenderId%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.SenderVersion%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.SentTime%2A>|`true`|   |<xref:System.Messaging.MessagePropertyFilter.SourceMachine%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.TimeToBeReceived%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.TimeToReachQueue%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.TransactionId%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.TransactionStatusQueue%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.UseAuthentication%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.UseDeadLetterQueue%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.UseEncryption%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.UseJournalQueue%2A>|`false`|   |<xref:System.Messaging.MessagePropertyFilter.UseTracing%2A>|`false`|       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|Yes|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example uses the MessageReadPropertyFilter to restrict the message properties received.  \n  \n [!code-cs[MessageQueue.MessageReadPropertyFilter#1](~/add/codesnippet/CSharp/p-system.messaging.messa_43_1.cs)]\n [!code-vb[MessageQueue.MessageReadPropertyFilter#1](~/add/codesnippet/VisualBasic/p-system.messaging.messa_43_1.vb)]\n [!code-cpp[MessageQueue.MessageReadPropertyFilter#1](~/add/codesnippet/CPP/p-system.messaging.messa_43_1.cpp)]"
  syntax:
    content: public System.Messaging.MessagePropertyFilter MessageReadPropertyFilter { get; set; }
    return:
      type: System.Messaging.MessagePropertyFilter
      description: "The <see cref=&quot;T:System.Messaging.MessagePropertyFilter&quot;></see> used by the queue to filter the set of properties it receives or peeks for each message."
  overload: System.Messaging.MessageQueue.MessageReadPropertyFilter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The filter is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.MulticastAddress
  id: MulticastAddress
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: MulticastAddress
  nameWithType: MessageQueue.MulticastAddress
  fullName: System.Messaging.MessageQueue.MulticastAddress
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Introduced in MSMQ 3.0. Gets or sets the multicast address associated with the queue."
  remarks: "The MulticastAddress property is used to associate a non-transactional queue with a multicast address that can be used when sending messages. You cannot associate a transactional queue with a multicast address. When the sending application sends messages to a multicast address, Message Queuing sends a copy of the message to every queue associated with that address.       IP multicast addresses must be in the class D range from 224.0.0.0 to 239.255.255.255, which corresponds to setting the first four high-order bits equal to 1110. However, only certain ranges of addresses in this range are unreserved and available for sending multicast messages. For the latest list of reserved multicast addresses, see the [Internet Assigned Number Authority (IANA) Internet Multicast Addresses](http://go.microsoft.com/fwlink/?linkid=3859) Web page. There are no restrictions on the port number.       If several source computers are sending multicast messages and you want a specific queue to receive messages from only one source computer, each source computer must send messages to a different combination of IP address and port number.       To dissociate a queue from a multicast address, set the MulticastAddress property to a zero-length string. Do not set it to `null`, as this will result in a <xref:System.ArgumentNullException>.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  syntax:
    content: public string MulticastAddress { get; set; }
    return:
      type: System.String
      description: "A &lt;xref:System.String&gt; that contains a valid multicast address (in the form shown below) or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, which indicates that the queue is not associated with a multicast address.      ```"
  overload: System.Messaging.MessageQueue.MulticastAddress*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "MSMQ 3.0 is not installed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Path
  id: Path
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Path
  nameWithType: MessageQueue.Path
  fullName: System.Messaging.MessageQueue.Path
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the queue&quot;s path. Setting the Path causes the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> to point to a new queue."
  remarks: "The syntax for the Path property depends on the type of queue it points to, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n|Journal queue|`MachineName`\\\\`QueueName`\\\\`Journal$`|  \n|Machine journal queue|`MachineName`\\\\`Journal$`|  \n|Machine dead-letter queue|`MachineName`\\\\`Deadletter$`|  \n|Machine transactional dead-letter queue|`MachineName`\\\\`XactDeadletter$`|  \n  \n Use \".\" to represent the local computer.  \n  \n The <xref:System.Messaging.MessageQueue.MachineName%2A>, Path, and <xref:System.Messaging.MessageQueue.QueueName%2A> properties are related. Changing the <xref:System.Messaging.MessageQueue.MachineName%2A> property causes the Path property to change. It is built from the new <xref:System.Messaging.MessageQueue.MachineName%2A> and the <xref:System.Messaging.MessageQueue.QueueName%2A>. Changing the Path (for example, to use the format name syntax) resets the <xref:System.Messaging.MessageQueue.MachineName%2A> and <xref:System.Messaging.MessageQueue.QueueName%2A> properties to refer to the new queue.  \n  \n Alternatively, you can use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> to describe the queue path, as shown in the following table.  \n  \n|Reference|Syntax|Example|  \n|---------------|------------|-------------|  \n|Format name|`FormatName:` [ *format name* ]|`FormatName:Public=` 5A5F7535-AE9A-41d4-935C-845C2AFF7112|  \n|Label|`Label:` [ *label* ]|`Label:` TheLabel|  \n  \n If you use the label syntax for the Path property when you send the message, an exception will be thrown if the <xref:System.Messaging.MessageQueue.Label%2A> is not unique.  \n  \n To work offline, you must use the format name syntax, rather than the friendly name syntax in the first table. Otherwise, an exception is thrown because the primary domain controller (on which Active Directory resides) is not available to resolve the path to the format name.  \n  \n Setting a new path closes the message queue and releases all handles.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|Yes|  \n  \n> [!NOTE]\n>  In workgroup mode you can only use private queues. You specify the path using the private queue syntax `MachineName`\\\\`Private$`\\\\`QueueName`."
  example:
  - "The following code example creates new <xref:System.Messaging.MessageQueue> objects using various path name syntax types. In each case, it sends a message to the queue whose path is defined in the constructor.  \n  \n [!code-cs[MessageQueue.Path#1](~/add/codesnippet/CSharp/p-system.messaging.messa_61_1.cs)]\n [!code-vb[MessageQueue.Path#1](~/add/codesnippet/VisualBasic/p-system.messaging.messa_61_1.vb)]\n [!code-cpp[MessageQueue.Path#1](~/add/codesnippet/CPP/p-system.messaging.messa_61_1.cpp)]"
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "The queue that is referenced by the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>. The default depends on which &lt;xref:System.Messaging.MessageQueue.%23ctor%2A&gt; constructor you use; it is either <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or is specified by the constructor&quot;s <span class=&quot;paramref&quot;>path</span> parameter."
  overload: System.Messaging.MessageQueue.Path*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path is not valid, possibly because the syntax is not valid."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Peek
  id: Peek
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Peek()
  nameWithType: MessageQueue.Peek()
  fullName: System.Messaging.MessageQueue.Peek()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Returns without removing (peeks) the first message in the queue referenced by this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>. The Peek method is synchronous, so it blocks the current thread until a message becomes available."
  remarks: "Use this overload to peek a queue, or to wait until a message exists in the queue.       The Peek method reads, but does not remove, the first message from the queue. Therefore, repeated calls to Peek return the same message, unless a higher priority message arrives in the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.       Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.       Use Peek when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload does not specify a time-out, the application might wait indefinitely. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method. Alternatively, you can specify a time-out for a message to arrive in the queue by using the overload of Peek that specifies a time-out.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following examples use the Peek method on a queue.  \n  \n In the first example, the application waits until a message becomes available in the queue. Note that the first example does not access the message that arrives; it merely pauses processing until a message arrives. If a message already exists in the queue, it will return immediately.  \n  \n In the second example, a message that contains an application-defined `Order` class is sent to the queue, and then peeked from the queue.  \n  \n [!code-cpp[MessageQueue.Peek_noparms#1](~/add/codesnippet/CPP/m-system.messaging.messa_40_1.cpp)]\n [!code-vb[MessageQueue.Peek_noparms#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_40_1.vb)]\n [!code-cs[MessageQueue.Peek_noparms#1](~/add/codesnippet/CSharp/m-system.messaging.messa_40_1.cs)]"
  syntax:
    content: public System.Messaging.Message Peek ();
    parameters: []
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Peek*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Peek(System.TimeSpan)
  id: Peek(System.TimeSpan)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Peek(TimeSpan)
  nameWithType: MessageQueue.Peek(TimeSpan)
  fullName: System.Messaging.MessageQueue.Peek(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Returns without removing (peeks) the first message in the queue referenced by this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>. The &lt;xref:System.Messaging.MessageQueue.Peek%2A&gt; method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs."
  remarks: "Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.       The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, the first message from the queue. Therefore, repeated calls to <xref:System.Messaging.MessageQueue.Peek%2A> return the same message, unless a higher priority message arrives in the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes the first message from the queue. Repeated calls to <xref:System.Messaging.MessageQueue.Receive%2A>, therefore, return different messages.       Message Queuing orders messages in the queue according to priority and arrival time. A newer message is placed before an older one only if it is of a higher priority.       Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example uses the <xref:System.Messaging.MessageQueue.Peek%2A> method with a time-out of zero to check whether the queue is empty.  \n  \n [!code-cs[MessageQueue.Peek_timeout#1](~/add/codesnippet/CSharp/m-system.messaging.messa_32_1.cs)]\n [!code-vb[MessageQueue.Peek_timeout#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_32_1.vb)]\n [!code-cpp[MessageQueue.Peek_timeout#1](~/add/codesnippet/CPP/m-system.messaging.messa_32_1.cpp)]"
  syntax:
    content: public System.Messaging.Message Peek (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the maximum time to wait for the queue to contain a message."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Peek*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)
  id: Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Peek(TimeSpan,Cursor,PeekAction)
  nameWithType: MessageQueue.Peek(TimeSpan,Cursor,PeekAction)
  fullName: System.Messaging.MessageQueue.Peek(TimeSpan,Cursor,PeekAction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Returns without removing (peeks) the current or next message in the queue, using the specified cursor. The &lt;xref:System.Messaging.MessageQueue.Peek%2A&gt; method is synchronous, so it blocks the current thread until a message becomes available or the specified time-out occurs."
  remarks: "Use this overload to peek a queue, or to wait a specified period of time until a message exists in the queue. The method returns immediately if a message already exists in the queue.       The <xref:System.Messaging.MessageQueue.Peek%2A> method reads, but does not remove, a message from the queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method, on the other hand, both reads and removes a message from the queue.       Use <xref:System.Messaging.MessageQueue.Peek%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked up to the specified period of time, or indefinitely if you indicated <xref:System.Messaging.MessageQueue.InfiniteTimeout>. If you need the application processing to continue without waiting, use the asynchronous <xref:System.Messaging.MessageQueue.BeginPeek%2A> method.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public System.Messaging.Message Peek (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.PeekAction action);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the maximum time to wait for the queue to contain a message."
    - id: cursor
      type: System.Messaging.Cursor
      description: "A  that maintains a specific position in the message queue."
    - id: action
      type: System.Messaging.PeekAction
      description: "One of the  values. Indicates whether to peek at the current message in the queue, or the next message."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Peek*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A value other than  or  was specified for the action parameter."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The cursor parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid. Possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.PeekByCorrelationId(System.String)
  id: PeekByCorrelationId(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: PeekByCorrelationId(String)
  nameWithType: MessageQueue.PeekByCorrelationId(String)
  fullName: System.Messaging.MessageQueue.PeekByCorrelationId(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Peeks the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue."
  remarks: "This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown.       The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.       Two other methods allow you to peek messages in a queue. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/CSharp/m-system.messaging.messa_22_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/CPP/m-system.messaging.messa_22_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_22_1.vb)]"
  syntax:
    content: public System.Messaging.Message PeekByCorrelationId (string correlationId);
    parameters:
    - id: correlationId
      type: System.String
      description: "The <xref:System.Messaging.Message.CorrelationId%2A> of the message to peek."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.PeekByCorrelationId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The correlationId parameter is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified correlationId could not be found."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.PeekByCorrelationId(System.String,System.TimeSpan)
  id: PeekByCorrelationId(System.String,System.TimeSpan)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: PeekByCorrelationId(String,TimeSpan)
  nameWithType: MessageQueue.PeekByCorrelationId(String,TimeSpan)
  fullName: System.Messaging.MessageQueue.PeekByCorrelationId(String,TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Peeks the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires."
  remarks: "This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, and no new message arrives in the queue within the period specified by the `timeout` parameter, an exception is thrown.       The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.       The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.       Two other methods allow you to peek messages in a queue. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of PeekByCorrelationId.  \n  \n [!code-cpp[MessageQueue2#5](~/add/codesnippet/CPP/e8141088-f70c-473f-9077-_1.cpp)]\n [!code-cs[MessageQueue2#5](~/add/codesnippet/CSharp/e8141088-f70c-473f-9077-_1.cs)]"
  syntax:
    content: public System.Messaging.Message PeekByCorrelationId (string correlationId, TimeSpan timeout);
    parameters:
    - id: correlationId
      type: System.String
      description: "The <xref:System.Messaging.Message.CorrelationId%2A> of the message to peek."
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.PeekByCorrelationId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The correlationId parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified correlationId does not exist in the queue and did not arrive before the time-out expired."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A message did not arrive before the time-out expired.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.PeekById(System.String)
  id: PeekById(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: PeekById(String)
  nameWithType: MessageQueue.PeekById(String)
  fullName: System.Messaging.MessageQueue.PeekById(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Peeks the message whose message identifier matches the <span class=&quot;paramref&quot;>id</span> parameter."
  remarks: "Use PeekById to read, without removing from the queue, a message that has a known message identifier. The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. This overload throws an exception if the queue does not currently contain the message.       Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of PeekById.  \n  \n [!code-cpp[MessageQueue2#6](~/add/codesnippet/CPP/m-system.messaging.messa_43_1.cpp)]\n [!code-cs[MessageQueue2#6](~/add/codesnippet/CSharp/m-system.messaging.messa_43_1.cs)]"
  syntax:
    content: public System.Messaging.Message PeekById (string id);
    parameters:
    - id: id
      type: System.String
      description: "The <xref:System.Messaging.Message.Id%2A> of the message to peek."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.PeekById*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The id parameter is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No message with the specified id exists."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.PeekById(System.String,System.TimeSpan)
  id: PeekById(System.String,System.TimeSpan)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: PeekById(String,TimeSpan)
  nameWithType: MessageQueue.PeekById(String,TimeSpan)
  fullName: System.Messaging.MessageQueue.PeekById(String,TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Peeks the message whose message identifier matches the <span class=&quot;paramref&quot;>id</span> parameter. Waits until the message appears in the queue or a time-out occurs."
  remarks: "Use <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> to read, without removing from the queue, a message that has a known message identifier. The identifier of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. This overload throws an exception if the queue does not currently contain the message and a new message does not arrive before the time-out occurs.       The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.       Two additional methods allow you to peek messages in a queue: <xref:System.Messaging.MessageQueue.Peek%2A> and <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. The <xref:System.Messaging.MessageQueue.Peek%2A> method returns the first message in the queue; <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> returns an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of PeekById.  \n  \n [!code-cpp[MessageQueue2#7](~/add/codesnippet/CPP/m-system.messaging.messa_15_1.cpp)]\n [!code-cs[MessageQueue2#7](~/add/codesnippet/CSharp/m-system.messaging.messa_15_1.cs)]"
  syntax:
    content: public System.Messaging.Message PeekById (string id, TimeSpan timeout);
    parameters:
    - id: id
      type: System.String
      description: "The <xref:System.Messaging.Message.Id%2A> of the message to peek."
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.PeekById*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The id parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified id does not exist in the queue and did not arrive before the period specified by the timeout parameter expired."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.PeekByLookupId(System.Int64)
  id: PeekByLookupId(System.Int64)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: PeekByLookupId(Int64)
  nameWithType: MessageQueue.PeekByLookupId(Int64)
  fullName: System.Messaging.MessageQueue.PeekByLookupId(Int64)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Introduced in MSMQ 3.0. Peeks at the message that matches the given lookup identifier from a non-transactional queue."
  remarks: "Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.       The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.       To read a message with a specified lookup identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public System.Messaging.Message PeekByLookupId (long lookupId);
    parameters:
    - id: lookupId
      type: System.Int64
      description: "The <xref:System.Messaging.Message.LookupId%2A> of the message to peek at."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.PeekByLookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "MSMQ 3.0 is not installed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified lookupId could not be found."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)
  id: PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: PeekByLookupId(MessageLookupAction,Int64)
  nameWithType: MessageQueue.PeekByLookupId(MessageLookupAction,Int64)
  fullName: System.Messaging.MessageQueue.PeekByLookupId(MessageLookupAction,Int64)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Introduced in MSMQ 3.0. Peeks at a specific message from the queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue."
  remarks: "Use this method to read a message with a known lookup identifier without removing it from the queue. This method throws an exception immediately if the message is not in the queue.       The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.       To read a message with a specified identifier and remove it from the queue, use the <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> method.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public System.Messaging.Message PeekByLookupId (System.Messaging.MessageLookupAction action, long lookupId);
    parameters:
    - id: action
      type: System.Messaging.MessageLookupAction
      description: "One of the  values, specifying how the message is read in the queue. Specify one of the following:       : Peeks at the message specified by `lookupId`.       : Peeks at the message following the message specified by `lookupId`.       : Peeks at the message preceding the message specified by `lookupId`.       : Peeks at the first message in the queue. The `lookupId` parameter must be set to 0.       : Peeks at the last message in the queue. The `lookupId` parameter must be set to 0."
    - id: lookupId
      type: System.Int64
      description: "The <xref:System.Messaging.Message.LookupId%2A> of the message to peek at, or 0. 0 is used when accessing the first or last message in the queue."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.PeekByLookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "MSMQ 3.0 is not installed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified lookupId could not be found."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The action parameter is not one of the  members."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.PeekCompleted
  id: PeekCompleted
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: PeekCompleted
  nameWithType: MessageQueue.PeekCompleted
  fullName: System.Messaging.MessageQueue.PeekCompleted
  type: Event
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Occurs when a message is read without being removed from the queue. This is a result of the asynchronous operation, &lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;."
  remarks: "<xref:System.Messaging.MessageQueue.BeginPeek%2A> is used in asynchronous processing to raise the PeekCompleted event when a message is available in the queue.       <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginPeek%2A> and peek the message when the PeekCompleted event is raised.       When you create a <xref:System.Messaging.PeekCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."
  example:
  - "The following code example creates an event handler named `MyPeekCompleted`, attaches it to the PeekCompleted event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> to initiate an asynchronous peek operation on the queue that is located at the path \".\\myQueue\". When a PeekCompleted event is raised, the example peeks the message and writes its body to the screen. The example then calls <xref:System.Messaging.MessageQueue.BeginPeek%2A> again to initiate a new asynchronous peek operation  \n  \n [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/add/codesnippet/CPP/e-system.messaging.messa_1_1.cpp)]\n [!code-cs[MessageQueue.BeginPeek_noparms#1](~/add/codesnippet/CSharp/e-system.messaging.messa_1_1.cs)]\n [!code-vb[MessageQueue.BeginPeek_noparms#1](~/add/codesnippet/VisualBasic/e-system.messaging.messa_1_1.vb)]"
  syntax:
    content: public event System.Messaging.PeekCompletedEventHandler PeekCompleted;
    return:
      type: System.Messaging.PeekCompletedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Purge
  id: Purge
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Purge()
  nameWithType: MessageQueue.Purge()
  fullName: System.Messaging.MessageQueue.Purge()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Deletes all the messages contained in the queue."
  remarks: "Purging the queue causes Message Queuing to set the queue modification flag, which affects the <xref:System.Messaging.MessageQueue.LastModifyTime%2A> property. Messages that are purged from the queue are lost; they are not sent to the dead-letter queue or the journal queue.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of Purge.  \n  \n [!code-cpp[MessageQueue2#29](~/add/codesnippet/CPP/m-system.messaging.messa_30_1.cpp)]\n [!code-cs[MessageQueue2#29](~/add/codesnippet/CSharp/m-system.messaging.messa_30_1.cs)]"
  syntax:
    content: public void Purge ();
    parameters: []
  overload: System.Messaging.MessageQueue.Purge*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.QueueName
  id: QueueName
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: QueueName
  nameWithType: MessageQueue.QueueName
  fullName: System.Messaging.MessageQueue.QueueName
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the friendly name that identifies the queue."
  remarks: "You can combine the QueueName with the <xref:System.Messaging.MessageQueue.MachineName%2A> to create a friendly <xref:System.Messaging.MessageQueue.Path%2A> name for the queue. The syntax for the friendly name variation of the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue, as shown in the following table.  \n  \n|Queue type|Syntax|  \n|----------------|------------|  \n|Public queue|`MachineName`\\\\`QueueName`|  \n|Private queue|`MachineName`\\\\`Private$`\\\\`QueueName`|  \n|Journal queue|`MachineName`\\\\`QueueName`\\\\`Journal$`|  \n  \n Use \".\" to represent the local computer.  \n  \n Changing the QueueName property affects the <xref:System.Messaging.MessageQueue.Path%2A> property. If you set the QueueName without setting the <xref:System.Messaging.MessageQueue.MachineName%2A> property, the <xref:System.Messaging.MessageQueue.Path%2A> property becomes .\\\\`QueueName`. Otherwise, the <xref:System.Messaging.MessageQueue.Path%2A> becomes `MachineName`\\\\`QueueName`.  \n  \n The following table shows whether this property is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|Yes|  \n|Remote computer and direct format name|No|"
  example:
  - "The following code example gets and sets the value of a message queue's QueueName property.  \n  \n [!code-cs[MessageQueue#24](~/add/codesnippet/CSharp/p-system.messaging.messa_86_1.cs)]"
  syntax:
    content: public string QueueName { get; set; }
    return:
      type: System.String
      description: "The name that identifies the queue referenced by this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>. The value cannot be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.QueueName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The queue name is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReadHandle
  id: ReadHandle
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReadHandle
  nameWithType: MessageQueue.ReadHandle
  fullName: System.Messaging.MessageQueue.ReadHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets the native handle used to read messages from the message queue."
  remarks: "The ReadHandle provides a native Windows handle to the message queue object that is used for peeking and receiving messages from the queue. If you change the path of the queue, the handle is closed and reopened with a new value.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public IntPtr ReadHandle { get; }
    return:
      type: System.IntPtr
      description: "A handle to the native queue object that you use for peeking and receiving messages from the queue."
  overload: System.Messaging.MessageQueue.ReadHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Receive
  id: Receive
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Receive()
  nameWithType: MessageQueue.Receive()
  fullName: System.Messaging.MessageQueue.Receive()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the first message available in the queue referenced by the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>. This call is synchronous, and blocks the current thread of execution until a message is available."
  remarks: "Use this overload to receive a message from a queue, or wait until there are messages in the queue.       The Receive method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to Receive will return the messages that follow in the queue, or new, higher priority messages.       To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.       Use a call to Receive when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the Receive method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example receives a message from a queue and outputs information about that message to the screen.  \n  \n [!code-cs[MessageQueue.Receive_noparms#1](~/add/codesnippet/CSharp/m-system.messaging.messa_31_1.cs)]\n [!code-vb[MessageQueue.Receive_noparms#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_31_1.vb)]\n [!code-cpp[MessageQueue.Receive_noparms#1](~/add/codesnippet/CPP/m-system.messaging.messa_31_1.cpp)]"
  syntax:
    content: public System.Messaging.Message Receive ();
    parameters: []
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Receive*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransaction)
  id: Receive(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Receive(MessageQueueTransaction)
  nameWithType: MessageQueue.Receive(MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.Receive(MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the first message available in the transactional queue referenced by the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>. This call is synchronous, and blocks the current thread of execution until a message is available."
  remarks: "Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, or wait until there are messages in the queue.       The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.       Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.       Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example connects to a transactional queue on the local computer and sends a message to the queue. It then receives the message that contains an order. If it encounters a non-transactional queue, it will throw and exception and rollback the transaction.  \n  \n [!code-cs[MessageQueue.Receive_transaction#1](~/add/codesnippet/CSharp/0af95b29-12fc-4b34-a9f1-_1.cs)]\n [!code-cpp[MessageQueue.Receive_transaction#1](~/add/codesnippet/CPP/0af95b29-12fc-4b34-a9f1-_1.cpp)]\n [!code-vb[MessageQueue.Receive_transaction#1](~/add/codesnippet/VisualBasic/0af95b29-12fc-4b34-a9f1-_1.vb)]"
  syntax:
    content: public System.Messaging.Message Receive (System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "The  object."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Receive*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method.       -or-       The queue is non-transactional."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransactionType)
  id: Receive(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Receive(MessageQueueTransactionType)
  nameWithType: MessageQueue.Receive(MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.Receive(MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the first message available in the queue referenced by the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>. This call is synchronous, and blocks the current thread of execution until a message is available."
  remarks: "Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, or wait until there are messages in the queue.       Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.       The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.       If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.       Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. Because this overload of the <xref:System.Messaging.MessageQueue.Receive%2A> method specifies an infinite time-out, the application might wait indefinitely. If the application processing should continue without waiting for the message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of Receive.  \n  \n [!code-cpp[MessageQueue2#9](~/add/codesnippet/CPP/18f19b48-6051-4f32-ab74-_1.cpp)]\n [!code-cs[MessageQueue2#9](~/add/codesnippet/CSharp/18f19b48-6051-4f32-ab74-_1.cs)]"
  syntax:
    content: public System.Messaging.Message Receive (System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "One of the  values, describing the type of transaction context to associate with the message."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Receive*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The transactionType parameter is not one of the  members."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan)
  id: Receive(System.TimeSpan)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Receive(TimeSpan)
  nameWithType: MessageQueue.Receive(TimeSpan)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the first message available in the queue referenced by the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> and waits until either a message is available in the queue, or the time-out expires."
  remarks: "Use this overload to receive a message and return in a specified period of time if there are no messages in the queue.       The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue, or new, higher priority messages.       To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.       Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example receives a message from a queue and outputs information about that message to the screen. The example pauses execution for up to five seconds while waiting for a message to arrive in the queue.  \n  \n [!code-cs[MessageQueue.Receive_timeout#1](~/add/codesnippet/CSharp/m-system.messaging.messa_35_1.cs)]\n [!code-vb[MessageQueue.Receive_timeout#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_35_1.vb)]\n [!code-cpp[MessageQueue.Receive_timeout#1](~/add/codesnippet/CPP/m-system.messaging.messa_35_1.cpp)]"
  syntax:
    content: public System.Messaging.Message Receive (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Receive*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A message did not arrive in the queue before the time-out expired.       -or-       An error occurred when accessing a Message Queuing method"
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor)
  id: Receive(System.TimeSpan,System.Messaging.Cursor)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Receive(TimeSpan,Cursor)
  nameWithType: MessageQueue.Receive(TimeSpan,Cursor)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan,Cursor)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires."
  syntax:
    content: public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    - id: cursor
      type: System.Messaging.Cursor
      description: "A  that maintains a specific position in the message queue."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Receive*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A message did not arrive in the queue before the time-out expired.       -or-       An error occurred when accessing a Message Queuing method       Use this overload to receive a message and return in a specified period of time if there are no messages in the queue."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  id: Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Receive(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageQueue.Receive(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the first message available in the transactional queue referenced by the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> and waits until either a message is available in the queue, or the time-out expires."
  remarks: "Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, and return within a specified period of time if there are no messages in the queue.       The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.       Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.       Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of this method.  \n  \n [!code-cs[MessageQueue.Receive_TimeoutTransaction#1](~/add/codesnippet/CSharp/2dfa7ce5-00bc-4674-91d9-_1.cs)]\n [!code-cpp[MessageQueue.Receive_TimeoutTransaction#1](~/add/codesnippet/CPP/2dfa7ce5-00bc-4674-91d9-_1.cpp)]\n [!code-vb[MessageQueue.Receive_TimeoutTransaction#1](~/add/codesnippet/VisualBasic/2dfa7ce5-00bc-4674-91d9-_1.vb)]"
  syntax:
    content: public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "The  object."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Receive*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A message did not arrive in the queue before the time-out expired.       -or-       The queue is non-transactional.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  id: Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Receive(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageQueue.Receive(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the first message available in the queue referenced by the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>. This call is synchronous, and waits until either a message is available in the queue, or the time-out expires."
  remarks: "Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, and return in a specified period of time if there are no messages in the queue.       Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.       The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> will return the messages that follow in the queue.       If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       To read the first message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. The <xref:System.Messaging.MessageQueue.Peek%2A> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there would be nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.       Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread will be blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of this method.  \n  \n [!code-cpp[MessageQueue2#8](~/add/codesnippet/CPP/0326a31c-3449-4252-b9ab-_1.cpp)]\n [!code-cs[MessageQueue2#8](~/add/codesnippet/CSharp/0326a31c-3449-4252-b9ab-_1.cs)]"
  syntax:
    content: public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "One of the  values, describing the type of transaction context to associate with the message."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Receive*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The transactionType parameter is not one of the  members."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A message did not arrive in the queue before the time-out expired.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)
  id: Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Receive(TimeSpan,Cursor,MessageQueueTransaction)
  nameWithType: MessageQueue.Receive(TimeSpan,Cursor,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan,Cursor,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires."
  remarks: "Use this overload to receive a message from a transactional queue using the internal transaction context defined by the `transaction` parameter, and return within a specified period of time if there are no messages in the queue.       The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.       Because this method is called on a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.       Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    - id: cursor
      type: System.Messaging.Cursor
      description: "A  that maintains a specific position in the message queue."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "The  object."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Receive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The cursor parameter is .       -or-       The transaction parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid. Possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A message did not arrive in the queue before the time-out expired.       -or-       The queue is non-transactional.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)
  id: Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Receive(TimeSpan,Cursor,MessageQueueTransactionType)
  nameWithType: MessageQueue.Receive(TimeSpan,Cursor,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan,Cursor,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the current message in the queue, using a specified cursor. If no message is available, this method waits until either a message is available, or the time-out expires."
  remarks: "Use this overload to receive a message from a queue using a transaction context defined by the `transactionType` parameter, and return in a specified period of time if there are no messages in the queue.       Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.       The <xref:System.Messaging.MessageQueue.Receive%2A> method allows for the synchronous reading of a message, thereby removing it from the queue. Subsequent calls to <xref:System.Messaging.MessageQueue.Receive%2A> return the messages that follow in the queue.       If this method is called to receive a message from a transactional queue, the message that is received is returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       To read a message in a queue without removing it from the queue, use the <xref:System.Messaging.MessageQueue.Peek%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.Peek%2A>. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not remove any messages in the queue, there is nothing to roll back by a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A>.       Use a call to <xref:System.Messaging.MessageQueue.Receive%2A> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue. The thread is blocked for the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter. If the application processing should continue without waiting for a message, consider using the asynchronous method, <xref:System.Messaging.MessageQueue.BeginReceive%2A>.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public System.Messaging.Message Receive (TimeSpan timeout, System.Messaging.Cursor cursor, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    - id: cursor
      type: System.Messaging.Cursor
      description: "A  that maintains a specific position in the message queue."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "One of the  values that describes the type of transaction context to associate with the message."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.Receive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The cursor parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid. Possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The transactionType parameter is not one of the  members."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A message did not arrive in the queue before the time-out expired.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)
  id: ReceiveByCorrelationId(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveByCorrelationId(String)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given correlation identifier (from a non-transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue."
  remarks: "This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application.       The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method retrieves a message by specifying its unique identifier.       To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/CSharp/m-system.messaging.messa_44_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/CPP/m-system.messaging.messa_44_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_44_1.vb)]"
  syntax:
    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId);
    parameters:
    - id: correlationId
      type: System.String
      description: "The <xref:System.Messaging.Message.CorrelationId%2A> of the message to receive."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The correlationId parameter is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified correlationId could not be found."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)
  id: ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveByCorrelationId(String,MessageQueueTransaction)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given correlation identifier (from a transactional queue) and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue."
  remarks: "This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application using the internal transaction context defined by the `transaction` parameter.       Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.       To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveByCorrelationId.  \n  \n [!code-cpp[MessageQueue2#14](~/add/codesnippet/CPP/a7516c12-7806-428d-9dec-_1.cpp)]\n [!code-cs[MessageQueue2#14](~/add/codesnippet/CSharp/a7516c12-7806-428d-9dec-_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: correlationId
      type: System.String
      description: "The <xref:System.Messaging.Message.CorrelationId%2A> of the message to receive."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "The  object."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The correlationId parameter is .       -or-       The transaction parameter is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified correlationId could not be found."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The queue is non-transactional.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)
  id: ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveByCorrelationId(String,MessageQueueTransactionType)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given correlation identifier and immediately raises an exception if no message with the specified correlation identifier currently exists in the queue."
  remarks: "This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. If no message is found that matches the `correlationID` parameter, an exception is thrown. Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter.       Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.       If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.       To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveByCorrelationId.  \n  \n [!code-cpp[MessageQueue2#11](~/add/codesnippet/CPP/b42b775f-2ef6-44b9-a394-_1.cpp)]\n [!code-cs[MessageQueue2#11](~/add/codesnippet/CSharp/b42b775f-2ef6-44b9-a394-_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: correlationId
      type: System.String
      description: "The <xref:System.Messaging.Message.CorrelationId%2A> of the message to receive."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "One of the  values, describing the type of transaction context to associate with the message."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The correlationId parameter is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified correlationId could not be found."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The transactionType parameter is not one of the  members."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan)
  id: ReceiveByCorrelationId(System.String,System.TimeSpan)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveByCorrelationId(String,TimeSpan)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String,TimeSpan)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String,TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given correlation identifier (from a non-transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires."
  remarks: "This method looks in the non-transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.       The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.       The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.       To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveByCorrelationId.  \n  \n [!code-cpp[MessageQueue2#10](~/add/codesnippet/CPP/a3511567-c777-4135-9514-_1.cpp)]\n [!code-cs[MessageQueue2#10](~/add/codesnippet/CSharp/a3511567-c777-4135-9514-_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout);
    parameters:
    - id: correlationId
      type: System.String
      description: "The <xref:System.Messaging.Message.CorrelationId%2A> of the message to receive."
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The correlationId parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The message with the specified correlationId does not exist in the queue and did not arrive before the time-out expired.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)
  id: ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransaction)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given correlation identifier (from a transactional queue) and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires."
  remarks: "This method looks in the transactional queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using the internal transaction context defined by the `transaction` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.       The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter.       Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.       To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveByCorrelationId.  \n  \n [!code-cpp[MessageQueue2#13](~/add/codesnippet/CPP/16c34efb-bb00-4135-986d-_1.cpp)]\n [!code-cs[MessageQueue2#13](~/add/codesnippet/CSharp/16c34efb-bb00-4135-986d-_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: correlationId
      type: System.String
      description: "The <xref:System.Messaging.Message.CorrelationId%2A> of the message to receive."
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "The  object."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The correlationId parameter is .       -or-       The transaction parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The message with the specified correlationId does not exist in the queue and did not arrive before the time-out expired.       -or-       The queue is non-transactional.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  id: ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given correlation identifier and waits until either a message with the specified correlation identifier is available in the queue, or the time-out expires."
  remarks: "This method looks in the queue referenced by the <xref:System.Messaging.MessageQueue> for a message whose <xref:System.Messaging.Message.CorrelationId%2A> matches the specified `correlationId` parameter. This method returns immediately if the message with the correlation identifier specified by the `correlationId` parameter is in the queue, using a transaction context defined by the `transactionType` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.       The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.CorrelationId%2A> of the new message to see if it matches the `correlationId` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.CorrelationId%2A> matches the `correlationId` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.       If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       The <xref:System.Messaging.Message.CorrelationId%2A> property is used to tie a message sent to the queue to associated response, report, or acknowledgment messages.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> method is used to retrieve a message by specifying its unique identifier.       To read a message with a specified correlation identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekByCorrelationId%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveByCorrelationId.  \n  \n [!code-cpp[MessageQueue2#12](~/add/codesnippet/CPP/4fac98db-2a30-404c-a734-_1.cpp)]\n [!code-cs[MessageQueue2#12](~/add/codesnippet/CSharp/4fac98db-2a30-404c-a734-_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveByCorrelationId (string correlationId, TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: correlationId
      type: System.String
      description: "The <xref:System.Messaging.Message.CorrelationId%2A> of the message to receive."
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "One of the  values, describing the type of transaction context to associate with the message."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveByCorrelationId*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The correlationId parameter is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified correlationId could not be found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The transactionType parameter is not one of the  members."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The message with the specified correlationId does not exist in the queue and did not arrive before the time-out expired.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveById(System.String)
  id: ReceiveById(System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveById(String)
  nameWithType: MessageQueue.ReceiveById(String)
  fullName: System.Messaging.MessageQueue.ReceiveById(String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given identifier from a non-transactional queue and immediately raises an exception if no message with the specified identifier currently exists in the queue."
  remarks: "Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.       The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.       To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveById.  \n  \n [!code-cpp[MessageQueue2#16](~/add/codesnippet/CPP/m-system.messaging.messa_6_1.cpp)]\n [!code-cs[MessageQueue2#16](~/add/codesnippet/CSharp/m-system.messaging.messa_6_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveById (string id);
    parameters:
    - id: id
      type: System.String
      description: "The <xref:System.Messaging.Message.Id%2A> of the message to receive."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveById*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The id parameter is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified id could not be found."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransaction)
  id: ReceiveById(System.String,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveById(String,MessageQueueTransaction)
  nameWithType: MessageQueue.ReceiveById(String,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.ReceiveById(String,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given identifier (from a transactional queue) and immediately raises an exception if no message with the specified identifier currently exists in the queue."
  remarks: "Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter. This method throws an exception immediately if the message is not in the queue       The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.       Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.       To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveById.  \n  \n [!code-cpp[MessageQueue2#17](~/add/codesnippet/CPP/44304a33-626e-441a-913e-_1.cpp)]\n [!code-cs[MessageQueue2#17](~/add/codesnippet/CSharp/44304a33-626e-441a-913e-_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveById (string id, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: id
      type: System.String
      description: "The <xref:System.Messaging.Message.Id%2A> of the message to receive."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "The  object."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveById*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The id parameter is .       -or-       The transaction parameter is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified id could not be found."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The queue is non-transactional.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)
  id: ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveById(String,MessageQueueTransactionType)
  nameWithType: MessageQueue.ReceiveById(String,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.ReceiveById(String,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given identifier and immediately raises an exception if no message with the specified identifier currently exists in the queue."
  remarks: "Use this method to read a message with a known identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue. Otherwise, the message is removed from the queue and returned to the application using a transaction context defined by the `transactionType` parameter.       Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.       The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found.       If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.       To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveById.  \n  \n [!code-cpp[MessageQueue2#15](~/add/codesnippet/CPP/ead94c46-fc40-466f-bcc4-_1.cpp)]\n [!code-cs[MessageQueue2#15](~/add/codesnippet/CSharp/ead94c46-fc40-466f-bcc4-_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveById (string id, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: id
      type: System.String
      description: "The <xref:System.Messaging.Message.Id%2A> of the message to receive."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "One of the  values, describing the type of transaction context to associate with the message."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveById*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The id parameter is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified id could not be found."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The transactionType parameter is not one of the  members."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan)
  id: ReceiveById(System.String,System.TimeSpan)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveById(String,TimeSpan)
  nameWithType: MessageQueue.ReceiveById(String,TimeSpan)
  fullName: System.Messaging.MessageQueue.ReceiveById(String,TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given identifier (from a non-transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires."
  remarks: "Use this method to read a message with a known identifier and remove it from the queue. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.       The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.       The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.       Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.       To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveById.  \n  \n [!code-cpp[MessageQueue2#20](~/add/codesnippet/CPP/m-system.messaging.messa_28_1.cpp)]\n [!code-cs[MessageQueue2#20](~/add/codesnippet/CSharp/m-system.messaging.messa_28_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveById (string id, TimeSpan timeout);
    parameters:
    - id: id
      type: System.String
      description: "The <xref:System.Messaging.Message.Id%2A> of the message to receive."
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveById*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The id parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A message with the specified id did not arrive in the queue before the time-out expired.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)
  id: ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveById(String,TimeSpan,MessageQueueTransaction)
  nameWithType: MessageQueue.ReceiveById(String,TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.ReceiveById(String,TimeSpan,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given identifier (from a transactional queue) and waits until either a message with the specified identifier is available in the queue or the time-out expires."
  remarks: "Use this method to read a message with a known identifier and remove it from the queue, using the internal transaction context defined by the `transaction` parameter. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.       The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.       The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter.       Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the timeout period specified by the `timeout` parameter.       Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.       To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message, unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveById.  \n  \n [!code-cpp[MessageQueue2#18](~/add/codesnippet/CPP/055ff666-d5d6-4073-a9c7-_1.cpp)]\n [!code-cs[MessageQueue2#18](~/add/codesnippet/CSharp/055ff666-d5d6-4073-a9c7-_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveById (string id, TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: id
      type: System.String
      description: "The <xref:System.Messaging.Message.Id%2A> of the message to receive."
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "The  object."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveById*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The id parameter is .       -or-       The transaction parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A message with the specified id did not arrive in the queue before the time-out expired.       -or-       The queue is non-transactional.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  id: ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveById(String,TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageQueue.ReceiveById(String,TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.ReceiveById(String,TimeSpan,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Receives the message that matches the given identifier and waits until either a message with the specified identifier is available in the queue or the time-out expires."
  remarks: "Use this method to read a message with a known identifier and remove it from the queue. This method returns immediately if the message with the identifier specified by the `id` parameter is in the queue, using a transaction context defined by the `transactionType` parameter. Otherwise, the method waits the given period of time for a new message to arrive. If a new message does not arrive before the time-out expires, an exception is thrown.       The `timeout` parameter does not specify the total running time for this method. Rather, it specifies the time to wait for a new message to arrive in the queue. Each time a new message arrives, this method examines the <xref:System.Messaging.Message.Id%2A> of the new message to see if it matches the `id` parameter. If not, this method starts the time-out period over and waits for another new message to arrive. Therefore, if new messages continue to arrive within the time-out period, it is possible for this method to continue running indefinitely, either until the time-out period expires without any new messages arriving, or until a message arrives whose <xref:System.Messaging.Message.Id%2A> matches the `id` parameter.       Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.       The <xref:System.Messaging.Message.Id%2A> property of a message is unique across the Message Queuing enterprise, so there will be at most one message in the queue that matches the given `id` parameter. If the message with the specified identifier is in a queue other than the one associated with this <xref:System.Messaging.MessageQueue> instance, the message will not be found.       Use this overload of <xref:System.Messaging.MessageQueue.ReceiveById%28System.String%29> when it is acceptable for the current thread to be blocked as long as new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter. The thread will be blocked for at least the given period of time, or indefinitely if you specified the value <xref:System.Messaging.MessageQueue.InfiniteTimeout> for the `timeout` parameter, or if new messages continue to arrive in the queue within the time-out period specified by the `timeout` parameter.       If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       Two other methods allow you to receive messages from a queue. The <xref:System.Messaging.MessageQueue.Receive%2A> method returns the first message in the queue, and the <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%28System.String%29> method is used to retrieve an acknowledgment, report, or application-generated response message that was created as a result of a message sent to the queue.       To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method. The <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> method always returns the first message in the queue, so subsequent calls to the method return the same message unless a higher priority message arrives in the queue. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekById%28System.String%29>. Because <xref:System.Messaging.MessageQueue.PeekById%28System.String%29> does not remove any messages in the queue, there would be nothing to roll back if the transaction were aborted.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of ReceiveById.  \n  \n [!code-cpp[MessageQueue2#19](~/add/codesnippet/CPP/e8737ae0-406a-4771-bd27-_1.cpp)]\n [!code-cs[MessageQueue2#19](~/add/codesnippet/CSharp/e8737ae0-406a-4771-bd27-_1.cs)]"
  syntax:
    content: public System.Messaging.Message ReceiveById (string id, TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: id
      type: System.String
      description: "The <xref:System.Messaging.Message.Id%2A> of the message to receive."
    - id: timeout
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan> that indicates the time to wait until a new message is available for inspection."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "One of the  values, describing the type of transaction context to associate with the message."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveById*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The id parameter is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value specified for the timeout parameter is not valid, possibly timeout is less than <xref:System.TimeSpan.Zero?displayProperty=fullName> or greater than ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A message with the specified id did not arrive in the queue before the time-out expired.       -or-       An error occurred when accessing a Message Queuing method."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The transactionType parameter is not one of the  members."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Int64)
  id: ReceiveByLookupId(System.Int64)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveByLookupId(Int64)
  nameWithType: MessageQueue.ReceiveByLookupId(Int64)
  fullName: System.Messaging.MessageQueue.ReceiveByLookupId(Int64)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Introduced in MSMQ 3.0. Receives the message that matches the given lookup identifier from a non-transactional queue."
  remarks: "Use this method to read a message with a known lookup identifier and remove it from the queue. This method throws an exception immediately if the message is not in the queue.       The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.       To read a message with a specified lookup identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public System.Messaging.Message ReceiveByLookupId (long lookupId);
    parameters:
    - id: lookupId
      type: System.Int64
      description: "The <xref:System.Messaging.Message.LookupId%2A> of the message to receive."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveByLookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "MSMQ 3.0 is not installed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified lookupId could not be found."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)
  id: ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransaction)
  nameWithType: MessageQueue.ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Introduced in MSMQ 3.0. Receives a specific message from a transactional queue. The message can be specified by a lookup identifier or by its position at the front or end of the queue."
  remarks: "Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transaction` parameter. This method throws an exception immediately if the message is not in the queue.       The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.       Because this method is called on a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>. Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public System.Messaging.Message ReceiveByLookupId (System.Messaging.MessageLookupAction action, long lookupId, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: action
      type: System.Messaging.MessageLookupAction
      description: "One of the  values, specifying how the message is read in the queue. Specify one of the following:       : Receives the message specified by `lookupId` and removes it from the queue.       : Receives the message following the message specified by `lookupId` and removes it from the queue.       : Receives the message preceding the message specified by `lookupId` and removes it from the queue.       : Receives the first message in the queue and removes it from the queue. The `lookupId` parameter must be set to 0.       : Receives the last message in the queue and removes it from the queue. The `lookupId` parameter must be set to 0."
    - id: lookupId
      type: System.Int64
      description: "The <xref:System.Messaging.Message.LookupId%2A> of the message to receive, or 0. 0 is used when accessing the first or last message in the queue."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "The  object."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveByLookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "MSMQ 3.0 is not installed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified lookupId could not be found."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method.       -or-       The queue is non-transactional."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The action parameter is not one of the  members."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)
  id: ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransactionType)
  nameWithType: MessageQueue.ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Introduced in MSMQ 3.0. Receives a specific message from the queue, using the specified transaction context. The message can be specified by a lookup identifier or by its position at the front or end of the queue."
  remarks: "Use this method to read a message with a known lookup identifier and remove it from the queue, using a transaction context defined by the `transactionType` parameter. This method throws an exception immediately if the message is not in the queue.       The <xref:System.Messaging.Message.LookupId%2A> property of a message is unique to the queue where the message resides, so there will be at most one message in the queue that matches the given `lookupId` parameter.       To read a message with a specified identifier without removing it from the queue, use the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> method. There is no transaction context associated with a message returned by a call to <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>. Because <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> does not remove any messages from the queue, there would be nothing to roll back if the transaction were aborted.       Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.       If this method is called to receive a message from a transactional queue, the message that is received would be returned to the queue if the transaction is aborted. The message is not permanently removed from the queue until the transaction is committed.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public System.Messaging.Message ReceiveByLookupId (System.Messaging.MessageLookupAction action, long lookupId, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: action
      type: System.Messaging.MessageLookupAction
      description: "One of the  values, specifying how the message is read in the queue. Specify one of the following:       : Receives the message specified by `lookupId` and removes it from the queue.       : Receives the message following the message specified by `lookupId` and removes it from the queue.       : Receives the message preceding the message specified by `lookupId` and removes it from the queue.       : Receives the first message in the queue and removes it from the queue. The `lookupId` parameter must be set to 0.       : Receives the last message in the queue and removes it from the queue. The `lookupId` parameter must be set to 0."
    - id: lookupId
      type: System.Int64
      description: "The <xref:System.Messaging.Message.LookupId%2A> of the message to receive, or 0. 0 is used when accessing the first or last message in the queue."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "One of the  values, describing the type of transaction context to associate with the message."
    return:
      type: System.Messaging.Message
      description: "To be added."
  overload: System.Messaging.MessageQueue.ReceiveByLookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "MSMQ 3.0 is not installed."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The message with the specified lookupId could not be found."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The action parameter is not one of the  members.       -or-       The transactionType parameter is not one of the  members."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ReceiveCompleted
  id: ReceiveCompleted
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ReceiveCompleted
  nameWithType: MessageQueue.ReceiveCompleted
  fullName: System.Messaging.MessageQueue.ReceiveCompleted
  type: Event
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Occurs when a message has been removed from the queue. This event is raised by the asynchronous operation, &lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;."
  remarks: "<xref:System.Messaging.MessageQueue.BeginReceive%2A> is used in asynchronous processing to raise the ReceiveCompleted event when a message is available in the queue.       <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> is used to complete the operation initiated by a call to <xref:System.Messaging.MessageQueue.BeginReceive%2A> and peek the message when the ReceiveCompleted event is raised.       When you create a <xref:System.Messaging.ReceiveCompletedEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see [NIB: Events and Delegates](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."
  example:
  - "The following code example creates an event handler named `MyReceiveCompleted`, attaches it to the ReceiveCompleted event handler delegate, and calls <xref:System.Messaging.MessageQueue.BeginReceive%2A> to initiate an asynchronous receive operation on the queue that is located at the path \".\\myQueue\". When a ReceiveCompleted event is raised, the example receives the message and writes its body to the screen. The example then calls <xref:System.Messaging.MessageQueue.BeginReceive%2A> again to initiate a new asynchronous receive operation.  \n  \n [!code-cs[MessageQueue.ReceiveCompleted#1](~/add/codesnippet/CSharp/e-system.messaging.messa_0_1.cs)]\n [!code-cpp[MessageQueue.ReceiveCompleted#1](~/add/codesnippet/CPP/e-system.messaging.messa_0_1.cpp)]\n [!code-vb[MessageQueue.ReceiveCompleted#1](~/add/codesnippet/VisualBasic/e-system.messaging.messa_0_1.vb)]"
  syntax:
    content: public event System.Messaging.ReceiveCompletedEventHandler ReceiveCompleted;
    return:
      type: System.Messaging.ReceiveCompletedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Refresh
  id: Refresh
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Refresh()
  nameWithType: MessageQueue.Refresh()
  fullName: System.Messaging.MessageQueue.Refresh()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Refreshes the properties presented by the <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> to reflect the current state of the resource."
  remarks: "Refresh synchronizes the properties of a <xref:System.Messaging.MessageQueue> with its associated Message Queuing server resource. If any property, such as <xref:System.Messaging.MessageQueue.Label%2A> or <xref:System.Messaging.MessageQueue.Category%2A>, has changed on the server since the time the <xref:System.Messaging.MessageQueue> was created, Refresh updates the <xref:System.Messaging.MessageQueue> with the new information.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of Refresh.  \n  \n [!code-cpp[MessageQueue2#28](~/add/codesnippet/CPP/m-system.messaging.messa_47_1.cpp)]\n [!code-cs[MessageQueue2#28](~/add/codesnippet/CSharp/m-system.messaging.messa_47_1.cs)]"
  syntax:
    content: public void Refresh ();
    parameters: []
  overload: System.Messaging.MessageQueue.Refresh*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.ResetPermissions
  id: ResetPermissions
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: ResetPermissions()
  nameWithType: MessageQueue.ResetPermissions()
  fullName: System.Messaging.MessageQueue.ResetPermissions()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Resets the permission list to the operating system&quot;s default values. Removes any queue permissions you have appended to the default list."
  remarks: "When you call ResetPermissions, you return the permission list to its default values. Generally, this grants the queue creator all permissions, and gives the group Everyone the following rights:      -   Get the properties of the queue.      -   Get queue permissions.      -   Write to the queue.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example demonstrates the use of ResetPermissions.  \n  \n [!code-cpp[MessageQueue2#27](~/add/codesnippet/CPP/m-system.messaging.messa_10_1.cpp)]\n [!code-cs[MessageQueue2#27](~/add/codesnippet/CSharp/m-system.messaging.messa_10_1.cs)]"
  syntax:
    content: public void ResetPermissions ();
    parameters: []
  overload: System.Messaging.MessageQueue.ResetPermissions*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Send(System.Object)
  id: Send(System.Object)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Send(Object)
  nameWithType: MessageQueue.Send(Object)
  fullName: System.Messaging.MessageQueue.Send(Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Sends an object to non-transactional queue referenced by this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>."
  remarks: "Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>. The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.       If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.       If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling Send, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.       The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message&quot;s <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue&quot;s <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example connects to a message queue and sends a message to the queue.  \n  \n [!code-cs[MessageQueue.Send_obj#1](~/add/codesnippet/CSharp/m-system.messaging.messa_29_1.cs)]\n [!code-cpp[MessageQueue.Send_obj#1](~/add/codesnippet/CPP/m-system.messaging.messa_29_1.cpp)]\n [!code-vb[MessageQueue.Send_obj#1](~/add/codesnippet/VisualBasic/m-system.messaging.messa_29_1.vb)]  \n  \n The following code example sends an application-defined `Order` class to a queue and then receives a message from that queue."
  syntax:
    content: public void Send (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to send to the queue."
  overload: System.Messaging.MessageQueue.Send*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The <xref:System.Messaging.MessageQueue.Path%2A> property has not been set.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransaction)
  id: Send(System.Object,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Send(Object,MessageQueueTransaction)
  nameWithType: MessageQueue.Send(Object,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.Send(Object,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Sends an object to the transactional queue referenced by this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>."
  remarks: "Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter. The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.       If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.       If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.       The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message&quot;s <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue&quot;s <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.       [Visual Basic]       <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.      ```   <System.MTAThreadAttribute>    public sub Main()   ```      ```vb#      ```       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example sends a string to a transactional queue and then receives a message from that queue.  \n  \n [!code-cs[MessageQueue.Send_ObjectTransaction#1](~/add/codesnippet/CSharp/522bde43-2181-4ef2-8eb3-_1.cs)]\n [!code-cpp[MessageQueue.Send_ObjectTransaction#1](~/add/codesnippet/CPP/522bde43-2181-4ef2-8eb3-_1.cpp)]\n [!code-vb[MessageQueue.Send_ObjectTransaction#1](~/add/codesnippet/VisualBasic/522bde43-2181-4ef2-8eb3-_1.vb)]"
  syntax:
    content: public void Send (object obj, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to send to the queue."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "The  object."
  overload: System.Messaging.MessageQueue.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The transaction parameter is ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The <xref:System.Messaging.MessageQueue.Path%2A> property has not been set.       -or-       The Message Queuing application indicated an incorrect transaction use.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransactionType)
  id: Send(System.Object,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Send(Object,MessageQueueTransactionType)
  nameWithType: MessageQueue.Send(Object,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.Send(Object,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Sends an object to the queue referenced by this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see>."
  remarks: "Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message. Specify `Single` if you want to send the message as a single internal transaction. You can specify `None` if you want to send a transactional message to a non-transactional thread.       The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.       If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.       The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message&quot;s <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue&quot;s <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of Send.  \n  \n [!code-cpp[MessageQueue2#2](~/add/codesnippet/CPP/9d57125b-b9af-4bb4-b51b-_1.cpp)]\n [!code-cs[MessageQueue2#2](~/add/codesnippet/CSharp/9d57125b-b9af-4bb4-b51b-_1.cs)]"
  syntax:
    content: public void Send (object obj, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to send to the queue."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "One of the  values, describing the type of transaction context to associate with the message."
  overload: System.Messaging.MessageQueue.Send*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The transactionType parameter is not one of the  members."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The <xref:System.Messaging.MessageQueue.Path%2A> property has not been set.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Send(System.Object,System.String)
  id: Send(System.Object,System.String)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Send(Object,String)
  nameWithType: MessageQueue.Send(Object,String)
  fullName: System.Messaging.MessageQueue.Send(Object,String)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Sends an object to the non-transactional queue referenced by this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> and specifies a label for the message."
  remarks: "Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>. With this overload, you can specify the string label that identifies the message. The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.       The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.       If you use this overload to send a message to a transactional queue, the message will be sent to the dead-letter queue. If you want the message to be part of a transaction that contains other messages, use an overload that takes a <xref:System.Messaging.MessageQueueTransaction> or <xref:System.Messaging.MessageQueueTransactionType> as a parameter.       The <xref:System.Messaging.MessageQueue.Path%2A> property for this <xref:System.Messaging.MessageQueue> instance must be specified before you send the message. If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.       The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message&quot;s <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue&quot;s <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of Send.  \n  \n [!code-cpp[MessageQueue2#1](~/add/codesnippet/CPP/m-system.messaging.messa_38_1.cpp)]\n [!code-cs[MessageQueue2#1](~/add/codesnippet/CSharp/m-system.messaging.messa_38_1.cs)]"
  syntax:
    content: public void Send (object obj, string label);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to send to the queue."
    - id: label
      type: System.String
      description: "The label of the message."
  overload: System.Messaging.MessageQueue.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The label parameter is ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The <xref:System.Messaging.MessageQueue.Path%2A> property has not been set.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)
  id: Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Send(Object,String,MessageQueueTransaction)
  nameWithType: MessageQueue.Send(Object,String,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.Send(Object,String,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Sends an object to the transactional queue referenced by this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> and specifies a label for the message."
  remarks: "Use this overload to send a message that contains the `obj` parameter to the transactional queue referenced by the <xref:System.Messaging.MessageQueue>, using an internal transaction context defined by the `transaction` parameter. With this overload, you can specify the string label that identifies the message. The object you send to the queue can be a <xref:System.Messaging.Message>, a structure, a data object, or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message.       The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.       If you use this overload to send a message to a non-transactional queue, the message might be sent to the dead-letter queue without throwing an exception.       If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.       The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> and the message&quot;s <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue&quot;s <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property       [Visual Basic]       <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.      ```   <System.MTAThreadAttribute>    public sub Main()   ```      ```vb#      ```       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of Send.  \n  \n [!code-cpp[MessageQueue2#4](~/add/codesnippet/CPP/b5c14748-9bf0-493d-b0ce-_1.cpp)]\n [!code-cs[MessageQueue2#4](~/add/codesnippet/CSharp/b5c14748-9bf0-493d-b0ce-_1.cs)]"
  syntax:
    content: public void Send (object obj, string label, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to send to the queue."
    - id: label
      type: System.String
      description: "The label of the message."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "The  object."
  overload: System.Messaging.MessageQueue.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The label parameter is .       -or-       The transaction parameter is ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The <xref:System.Messaging.MessageQueue.Path%2A> property has not been set.       -or-       The Message Queuing application indicated an incorrect transaction usage.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)
  id: Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Send(Object,String,MessageQueueTransactionType)
  nameWithType: MessageQueue.Send(Object,String,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.Send(Object,String,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Sends an object to the queue referenced by this <see cref=&quot;T:System.Messaging.MessageQueue&quot;></see> and specifies a label for the message."
  remarks: "Use this overload to send a message that contains the `obj` parameter to the queue referenced by the <xref:System.Messaging.MessageQueue>, using a transaction context defined by the `transactionType` parameter. Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to send the message. Specify `Single` if you want to send the message as a single internal transaction. You can specify `None` if you want to send a transactional message to a non-transactional thread.       The object you send to the queue can be a <xref:System.Messaging.Message> or any managed object. If you send any object other than a <xref:System.Messaging.Message>, the object is serialized and inserted into the body of the message. With this overload, you can specify the string label that identifies the message.       The message label is distinct from the message queue label, but both are application-dependent and have no inherit meaning to Message Queuing.       If you do not set the <xref:System.Messaging.MessageQueue.Formatter%2A> property before calling <xref:System.Messaging.MessageQueue.Send%28System.Object%29>, the formatter defaults to the <xref:System.Messaging.XmlMessageFormatter>.       The <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property applies to any object other than a <xref:System.Messaging.Message>. If you specify, for example, a label or a priority using the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> member, these values apply to any message that contains an object that is not of type <xref:System.Messaging.Message> when your application sends it to the queue. When sending a <xref:System.Messaging.Message>, the property values set for the <xref:System.Messaging.Message> take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>, and the message&quot;s <xref:System.Messaging.Message.Formatter%2A?displayProperty=fullName> property takes precedence over the queue&quot;s <xref:System.Messaging.MessageQueue.Formatter%2A?displayProperty=fullName> property.       The following table shows whether this method is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  example:
  - "The following code example demonstrates the use of Send.  \n  \n [!code-cpp[MessageQueue2#3](~/add/codesnippet/CPP/db7c33a8-0483-480b-a9a1-_1.cpp)]\n [!code-cs[MessageQueue2#3](~/add/codesnippet/CSharp/db7c33a8-0483-480b-a9a1-_1.cs)]"
  syntax:
    content: public void Send (object obj, string label, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to send to the queue."
    - id: label
      type: System.String
      description: "The label of the message."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "One of the  values, describing the type of transaction context to associate with the message."
  overload: System.Messaging.MessageQueue.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The label parameter is ."
  - type: System.Messaging.MessageQueueTransaction
    commentId: T:System.Messaging.MessageQueueTransaction
    description: "The Message Queuing application indicated an incorrect transaction usage."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The transactionType parameter is not one of the  members."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The <xref:System.Messaging.MessageQueue.Path%2A> property has not been set.       -or-       An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.SetPermissions(System.Messaging.AccessControlList)
  id: SetPermissions(System.Messaging.AccessControlList)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: SetPermissions(AccessControlList)
  nameWithType: MessageQueue.SetPermissions(AccessControlList)
  fullName: System.Messaging.MessageQueue.SetPermissions(AccessControlList)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Assigns access rights to the queue based on the contents of an access control list."
  remarks: "Use this overload to grant, deny, or revoke rights by using a collection of access control entries to specify trustee and permissions information. This is used, for example, to grant permissions to multiple users at the same time.  \n  \n The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer. If the trustee is an individual, use the format `DOMAIN`\\\\`user`. You can specify \".\" for the trustee to indicate the local computer.  \n  \n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \n  \n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \n  \n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \n  \n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \n  \n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \n  \n When you construct the `dacl` parameter, you add <xref:System.Messaging.AccessControlEntry> instances to your <xref:System.Messaging.AccessControlList> collection. When you construct each access control entry, you can specify generic or standard access rights. The rights to a queue can be any combination of the following:  \n  \n-   Delete  \n  \n-   Read Security  \n  \n-   Write Security  \n  \n-   Synchronize  \n  \n-   Modify Owner  \n  \n-   Read  \n  \n-   Write  \n  \n-   Execute  \n  \n-   Required  \n  \n-   All  \n  \n-   None  \n  \n These rights are a set of bit flags that you can combine using the OR bitwise operator.  \n  \n-   Full Control  \n  \n-   Delete Message  \n  \n-   Receive Message  \n  \n-   Peek Message  \n  \n-   Receive Journal Message  \n  \n-   Get Queue Properties  \n  \n-   Set Queue Properties  \n  \n-   Get Permissions  \n  \n-   Set Permissions  \n  \n-   Take Queue Ownership  \n  \n-   Write Message  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|"
  example:
  - "[!CODE [The following code example demonstrates the use of this method.](The following code example demonstrates the use of this method.)]  \n  \n [!code-cpp[MessageQueue2#26](~/add/codesnippet/CPP/8a76bc03-bea1-4576-8c5c-_1.cpp)]\n [!code-cs[MessageQueue2#26](~/add/codesnippet/CSharp/8a76bc03-bea1-4576-8c5c-_1.cs)]"
  syntax:
    content: public void SetPermissions (System.Messaging.AccessControlList dacl);
    parameters:
    - id: dacl
      type: System.Messaging.AccessControlList
      description: "A  that contains one or more access control entries that specify the trustees and the permissions to grant."
  overload: System.Messaging.MessageQueue.SetPermissions*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.SetPermissions(System.Messaging.MessageQueueAccessControlEntry)
  id: SetPermissions(System.Messaging.MessageQueueAccessControlEntry)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: SetPermissions(MessageQueueAccessControlEntry)
  nameWithType: MessageQueue.SetPermissions(MessageQueueAccessControlEntry)
  fullName: System.Messaging.MessageQueue.SetPermissions(MessageQueueAccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Assigns access rights to the queue based on the contents of an access control entry."
  remarks: "Use this overload to grant, deny, or revoke rights by using an access control entry to specify trustee and rights information.  \n  \n The trustee you specify when you construct the `ace` parameter can be an individual user, a group of users, or a computer. If the trustee is an individual, use the format `DOMAIN`\\\\`user`. You can specify \".\" for the trustee to indicate the local computer.  \n  \n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \n  \n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \n  \n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \n  \n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \n  \n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \n  \n The rights to a queue, which you specify in the `rights` parameter when you construct your <xref:System.Messaging.MessageQueueAccessControlEntry>, can be any combination of the following:  \n  \n-   Full Control  \n  \n-   Delete Message  \n  \n-   Receive Message  \n  \n-   Peek Message  \n  \n-   Receive Journal Message  \n  \n-   Get Queue Properties  \n  \n-   Set Queue Properties  \n  \n-   Get Permissions  \n  \n-   Set Permissions  \n  \n-   Take Queue Ownership  \n  \n-   Write Message  \n  \n The `rights` parameter you specify in the constructor for the `ace` parameter is a flag of the <xref:System.Messaging.MessageQueueAccessRights> enumeration. It represents a set of bit flags that you can combine using the bitwise operator OR when you build the `rights` parameter.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|"
  example:
  - "The following code example demonstrates the use of SetPermissions.  \n  \n [!code-cpp[MessageQueue2#24](~/add/codesnippet/CPP/be066b3d-4d25-47cd-9364-_1.cpp)]\n [!code-cs[MessageQueue2#24](~/add/codesnippet/CSharp/be066b3d-4d25-47cd-9364-_1.cs)]"
  syntax:
    content: public void SetPermissions (System.Messaging.MessageQueueAccessControlEntry ace);
    parameters:
    - id: ace
      type: System.Messaging.MessageQueueAccessControlEntry
      description: "A  that specifies a user, an access type, and a permission type."
  overload: System.Messaging.MessageQueue.SetPermissions*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)
  id: SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: SetPermissions(String,MessageQueueAccessRights)
  nameWithType: MessageQueue.SetPermissions(String,MessageQueueAccessRights)
  fullName: System.Messaging.MessageQueue.SetPermissions(String,MessageQueueAccessRights)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gives a computer, group, or user the specified access rights."
  remarks: "Use this overload to grant specified rights to an individual user. The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format `DOMAIN`\\\\`user` for the `user` parameter. You can specify \".\" for the `user` parameter to indicate the local computer.  \n  \n The permissions you assign through SetPermissions add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call SetPermissions, the user and permissions information is appended to the bottom of the existing list.  \n  \n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \n  \n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \n  \n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \n  \n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \n  \n The rights to a queue, specified in the `rights` parameter, can be any combination of the following:  \n  \n-   Full Control  \n  \n-   Delete Message  \n  \n-   Receive Message  \n  \n-   Peek Message  \n  \n-   Receive Journal Message  \n  \n-   Get Queue Properties  \n  \n-   Set Queue Properties  \n  \n-   Get Permissions  \n  \n-   Set Permissions  \n  \n-   Take Queue Ownership  \n  \n-   Write Message  \n  \n The <xref:System.Messaging.MessageQueueAccessRights> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the `rights` parameter.  \n  \n With this overload, you can only grant permissions; you cannot revoke or deny them. You must use a different overload to explicitly grant any <xref:System.Messaging.AccessControlEntryType> other than `Allow`.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|"
  example:
  - "The following code example demonstrates the use of SetPermissions.  \n  \n [!code-cpp[MessageQueue2#23](~/add/codesnippet/CPP/9407e8d3-36fa-434e-b396-_1.cpp)]\n [!code-cs[MessageQueue2#23](~/add/codesnippet/CSharp/9407e8d3-36fa-434e-b396-_1.cs)]"
  syntax:
    content: public void SetPermissions (string user, System.Messaging.MessageQueueAccessRights rights);
    parameters:
    - id: user
      type: System.String
      description: "The individual, group, or computer that gets additional rights to the queue."
    - id: rights
      type: System.Messaging.MessageQueueAccessRights
      description: "A  that indicates the set of rights to the queue that Message Queuing assigns to the `user` passed in."
  overload: System.Messaging.MessageQueue.SetPermissions*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The user is ."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)
  id: SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: SetPermissions(String,MessageQueueAccessRights,AccessControlEntryType)
  nameWithType: MessageQueue.SetPermissions(String,MessageQueueAccessRights,AccessControlEntryType)
  fullName: System.Messaging.MessageQueue.SetPermissions(String,MessageQueueAccessRights,AccessControlEntryType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gives a computer, group, or user the specified access rights, with the specified access control type (allow, deny, revoke, or set)."
  remarks: "Use this overload to grant, deny, or revoke specified rights for an individual user. The user can be any valid trustee, which includes individual users, groups of users, or a computer. If the user is an individual, use the format `DOMAIN`\\\\`user` for the `user` parameter. You can specify \".\" for the `user` parameter to indicate the local computer.  \n  \n The permissions you assign through <xref:System.Messaging.MessageQueue.SetPermissions%2A> add rights to the existing list. By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue. When you call <xref:System.Messaging.MessageQueue.SetPermissions%2A>, the user and permissions information is appended to the bottom of the existing list.  \n  \n The system examines each <xref:System.Messaging.AccessControlEntry> in sequence until one of the following events occurs:  \n  \n-   An access-denied <xref:System.Messaging.AccessControlEntry> explicitly denies any of the requested access rights to one of the trustees listed in the thread's access token.  \n  \n-   One or more access-allowed <xref:System.Messaging.AccessControlEntry> items for trustees listed in the thread's access token explicitly grant all the requested access rights.  \n  \n-   All <xref:System.Messaging.AccessControlEntry> items have been checked and there is still at least one requested access right that has not been explicitly allowed, in which case, access is implicitly denied.  \n  \n The rights to a queue, specified in the `rights` parameter, can be any combination of the following:  \n  \n-   Full Control  \n  \n-   Delete Message  \n  \n-   Receive Message  \n  \n-   Peek Message  \n  \n-   Receive Journal Message  \n  \n-   Get Queue Properties  \n  \n-   Set Queue Properties  \n  \n-   Get Permissions  \n  \n-   Set Permissions  \n  \n-   Take Queue Ownership  \n  \n-   Write Message  \n  \n The <xref:System.Messaging.MessageQueueAccessRights> enumeration represents a set of bit flags that you can combine using the bitwise operator OR to build the `rights` parameter.  \n  \n The following table shows whether this method is available in various Workgroup modes.  \n  \n|Workgroup mode|Available|  \n|--------------------|---------------|  \n|Local computer|Yes|  \n|Local computer and direct format name|Yes|  \n|Remote computer|No|  \n|Remote computer and direct format name|No|"
  example:
  - "The following code example demonstrates the use of SetPermissions.  \n  \n [!code-cpp[MessageQueue2#25](~/add/codesnippet/CPP/7ca28ffc-7e36-4f0b-bbb7-_1.cpp)]\n [!code-cs[MessageQueue2#25](~/add/codesnippet/CSharp/7ca28ffc-7e36-4f0b-bbb7-_1.cs)]"
  syntax:
    content: public void SetPermissions (string user, System.Messaging.MessageQueueAccessRights rights, System.Messaging.AccessControlEntryType entryType);
    parameters:
    - id: user
      type: System.String
      description: "The individual, group, or computer that gets additional rights to the queue."
    - id: rights
      type: System.Messaging.MessageQueueAccessRights
      description: "A  that indicates the set of rights to the queue that Message Queuing assigns to the `user` passed in."
    - id: entryType
      type: System.Messaging.AccessControlEntryType
      description: "A  that specifies whether to grant, deny, or revoke the permissions specified by the `rights` parameter."
  overload: System.Messaging.MessageQueue.SetPermissions*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.SynchronizingObject
  id: SynchronizingObject
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: MessageQueue.SynchronizingObject
  fullName: System.Messaging.MessageQueue.SynchronizingObject
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets the object that marshals the event-handler call resulting from a <see cref=&quot;E:System.Messaging.MessageQueue.ReceiveCompleted&quot;></see> or <see cref=&quot;E:System.Messaging.MessageQueue.PeekCompleted&quot;></see> event."
  remarks: "A <xref:System.Messaging.MessageQueue.ReceiveCompleted> or <xref:System.Messaging.MessageQueue.PeekCompleted> event results from a <xref:System.Messaging.MessageQueue.BeginReceive%2A> or <xref:System.Messaging.MessageQueue.BeginPeek%2A> request, respectively, to a specific thread. Typically, the SynchronizingObject is set when its related component is placed inside a control or a form, because those components are bound to a specific thread.       Typically, the synchronizing object marshals a method call into a single thread."
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "A <see cref=&quot;T:System.ComponentModel.ISynchronizeInvoke&quot;></see>, which represents the object that marshals the event-handler call resulting from a <see cref=&quot;E:System.Messaging.MessageQueue.ReceiveCompleted&quot;></see> or <see cref=&quot;E:System.Messaging.MessageQueue.PeekCompleted&quot;></see> event. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.SynchronizingObject*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.Transactional
  id: Transactional
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: Transactional
  nameWithType: MessageQueue.Transactional
  fullName: System.Messaging.MessageQueue.Transactional
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets a value that indicates whether the queue accepts only transactions."
  remarks: "Transactional messaging refers to the coupling of several related messages into a single transaction. Sending messages as part of a transaction ensures that the messages are delivered in order, delivered only once, and successfully retrieved from their destination queue.       If a queue is transactional, it accepts only messages that are sent as part of a transaction. However, a non-transactional message can be sent or received from a local transaction queue without explicitly using transactional <xref:System.Messaging.MessageQueueTransaction.Begin%2A>, <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, and <xref:System.Messaging.MessageQueueTransaction.Abort%2A> syntax. If a non-transactional message is sent to a transactional queue, this component creates a single-message transaction for it, except in the case of referencing a queue on a remote computer using a direct format name. In this situation, if you do not specify a transaction context when sending a message, one is not created for you and the message will be sent to the dead-letter queue.       If you send a non-transactional message to a transactional queue, you will not be able to roll back the message in the event of an exception.       [Visual Basic]       <xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads. Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine. Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception. You apply the <xref:System.MTAThreadAttribute> by using the following fragment.      ```   <System.MTAThreadAttribute>    public sub Main()   ```      ```vb#      ```       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example displays the value of a message queue's Transactional property.  \n  \n [!code-cs[MessageQueue#27](~/add/codesnippet/CSharp/p-system.messaging.messa_2_1.cs)]"
  syntax:
    content: public bool Transactional { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the queue accepts only messages sent as part of a transaction; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.Transactional*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.UseJournalQueue
  id: UseJournalQueue
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: UseJournalQueue
  nameWithType: MessageQueue.UseJournalQueue
  fullName: System.Messaging.MessageQueue.UseJournalQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets or sets a value that indicates whether received messages are copied to the journal queue."
  remarks: "When the Message Queuing application creates a new application queue, it automatically creates an associated journal queue in the same location. The journal queue is used to track the messages removed from a queue. Setting this property modifies the Message Queuing queue. Therefore, any other <xref:System.Messaging.MessageQueue> instances are affected by the change.       The journal queue does not track messages removed from the queue because their time-to-be-received timer expired, nor does it track messages purged from the queue by using a Message Queuing directory service (Information Store or Active Directory).       Applications cannot send messages to journal queues; they are limited to read-only access of these queues. Furthermore, Message Queuing never removes messages from journal queues. The application using the queue must clear these messages either by receiving them or by purging the queue.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|No|"
  example:
  - "The following code example gets and sets the value of a message queue's UseJournalQueue property.  \n  \n [!code-cs[MessageQueue#28](~/add/codesnippet/CSharp/p-system.messaging.messa_42_1.cs)]"
  syntax:
    content: public bool UseJournalQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if messages received from the queue are copied to its journal queue; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Messaging.MessageQueue.UseJournalQueue*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "An error occurred when accessing a Message Queuing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Messaging.MessageQueue.WriteHandle
  id: WriteHandle
  parent: System.Messaging.MessageQueue
  langs:
  - csharp
  name: WriteHandle
  nameWithType: MessageQueue.WriteHandle
  fullName: System.Messaging.MessageQueue.WriteHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Gets the native handle used to send messages to the message queue."
  remarks: "The WriteHandle provides a native Windows handle to the message queue object that is used for sending messages to the queue. If you change the path of the queue, the handle is closed and reopened with a new value.       The following table shows whether this property is available in various Workgroup modes.      |Workgroup mode|Available|   |--------------------|---------------|   |Local computer|Yes|   |Local computer and direct format name|Yes|   |Remote computer|No|   |Remote computer and direct format name|Yes|"
  syntax:
    content: public IntPtr WriteHandle { get; }
    return:
      type: System.IntPtr
      description: "A handle to the native queue object that you use for sending messages to the queue."
  overload: System.Messaging.MessageQueue.WriteHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "The message queue is not available for writing."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.Messaging.MessageQueue.#ctor
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MessageQueue()
  nameWithType: MessageQueue.MessageQueue()
  fullName: System.Messaging.MessageQueue.MessageQueue()
- uid: System.Messaging.MessageQueue.#ctor(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MessageQueue(String)
  nameWithType: MessageQueue.MessageQueue(String)
  fullName: System.Messaging.MessageQueue.MessageQueue(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MessageQueue(String,Boolean)
  nameWithType: MessageQueue.MessageQueue(String,Boolean)
  fullName: System.Messaging.MessageQueue.MessageQueue(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Messaging.QueueAccessMode)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MessageQueue(String,QueueAccessMode)
  nameWithType: MessageQueue.MessageQueue(String,QueueAccessMode)
  fullName: System.Messaging.MessageQueue.MessageQueue(String,QueueAccessMode)
- uid: System.Messaging.QueueAccessMode
  parent: System.Messaging
  isExternal: false
  name: QueueAccessMode
  nameWithType: QueueAccessMode
  fullName: System.Messaging.QueueAccessMode
- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MessageQueue(String,Boolean,Boolean)
  nameWithType: MessageQueue.MessageQueue(String,Boolean,Boolean)
  fullName: System.Messaging.MessageQueue.MessageQueue(String,Boolean,Boolean)
- uid: System.Messaging.MessageQueue.#ctor(System.String,System.Boolean,System.Boolean,System.Messaging.QueueAccessMode)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MessageQueue(String,Boolean,Boolean,QueueAccessMode)
  nameWithType: MessageQueue.MessageQueue(String,Boolean,Boolean,QueueAccessMode)
  fullName: System.Messaging.MessageQueue.MessageQueue(String,Boolean,Boolean,QueueAccessMode)
- uid: System.Messaging.MessageQueue.AccessMode
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: AccessMode
  nameWithType: MessageQueue.AccessMode
  fullName: System.Messaging.MessageQueue.AccessMode
- uid: System.Messaging.MessageQueue.Authenticate
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Authenticate
  nameWithType: MessageQueue.Authenticate
  fullName: System.Messaging.MessageQueue.Authenticate
- uid: System.Messaging.MessageQueue.BasePriority
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BasePriority
  nameWithType: MessageQueue.BasePriority
  fullName: System.Messaging.MessageQueue.BasePriority
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Messaging.MessageQueue.BeginPeek
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginPeek()
  nameWithType: MessageQueue.BeginPeek()
  fullName: System.Messaging.MessageQueue.BeginPeek()
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginPeek(TimeSpan)
  nameWithType: MessageQueue.BeginPeek(TimeSpan)
  fullName: System.Messaging.MessageQueue.BeginPeek(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginPeek(TimeSpan,Object)
  nameWithType: MessageQueue.BeginPeek(TimeSpan,Object)
  fullName: System.Messaging.MessageQueue.BeginPeek(TimeSpan,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginPeek(TimeSpan,Object,AsyncCallback)
  nameWithType: MessageQueue.BeginPeek(TimeSpan,Object,AsyncCallback)
  fullName: System.Messaging.MessageQueue.BeginPeek(TimeSpan,Object,AsyncCallback)
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction,System.Object,System.AsyncCallback)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginPeek(TimeSpan,Cursor,PeekAction,Object,AsyncCallback)
  nameWithType: MessageQueue.BeginPeek(TimeSpan,Cursor,PeekAction,Object,AsyncCallback)
  fullName: System.Messaging.MessageQueue.BeginPeek(TimeSpan,Cursor,PeekAction,Object,AsyncCallback)
- uid: System.Messaging.Cursor
  parent: System.Messaging
  isExternal: false
  name: Cursor
  nameWithType: Cursor
  fullName: System.Messaging.Cursor
- uid: System.Messaging.PeekAction
  parent: System.Messaging
  isExternal: false
  name: PeekAction
  nameWithType: PeekAction
  fullName: System.Messaging.PeekAction
- uid: System.Messaging.MessageQueue.BeginReceive
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginReceive()
  nameWithType: MessageQueue.BeginReceive()
  fullName: System.Messaging.MessageQueue.BeginReceive()
- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginReceive(TimeSpan)
  nameWithType: MessageQueue.BeginReceive(TimeSpan)
  fullName: System.Messaging.MessageQueue.BeginReceive(TimeSpan)
- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginReceive(TimeSpan,Object)
  nameWithType: MessageQueue.BeginReceive(TimeSpan,Object)
  fullName: System.Messaging.MessageQueue.BeginReceive(TimeSpan,Object)
- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginReceive(TimeSpan,Object,AsyncCallback)
  nameWithType: MessageQueue.BeginReceive(TimeSpan,Object,AsyncCallback)
  fullName: System.Messaging.MessageQueue.BeginReceive(TimeSpan,Object,AsyncCallback)
- uid: System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Messaging.Cursor,System.Object,System.AsyncCallback)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginReceive(TimeSpan,Cursor,Object,AsyncCallback)
  nameWithType: MessageQueue.BeginReceive(TimeSpan,Cursor,Object,AsyncCallback)
  fullName: System.Messaging.MessageQueue.BeginReceive(TimeSpan,Cursor,Object,AsyncCallback)
- uid: System.Messaging.MessageQueue.CanRead
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: CanRead
  nameWithType: MessageQueue.CanRead
  fullName: System.Messaging.MessageQueue.CanRead
- uid: System.Messaging.MessageQueue.CanWrite
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: CanWrite
  nameWithType: MessageQueue.CanWrite
  fullName: System.Messaging.MessageQueue.CanWrite
- uid: System.Messaging.MessageQueue.Category
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Category
  nameWithType: MessageQueue.Category
  fullName: System.Messaging.MessageQueue.Category
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Messaging.MessageQueue.ClearConnectionCache
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ClearConnectionCache()
  nameWithType: MessageQueue.ClearConnectionCache()
  fullName: System.Messaging.MessageQueue.ClearConnectionCache()
- uid: System.Messaging.MessageQueue.Close
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Close()
  nameWithType: MessageQueue.Close()
  fullName: System.Messaging.MessageQueue.Close()
- uid: System.Messaging.MessageQueue.Create(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Create(String)
  nameWithType: MessageQueue.Create(String)
  fullName: System.Messaging.MessageQueue.Create(String)
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.MessageQueue.Create(System.String,System.Boolean)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Create(String,Boolean)
  nameWithType: MessageQueue.Create(String,Boolean)
  fullName: System.Messaging.MessageQueue.Create(String,Boolean)
- uid: System.Messaging.MessageQueue.CreateCursor
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: CreateCursor()
  nameWithType: MessageQueue.CreateCursor()
  fullName: System.Messaging.MessageQueue.CreateCursor()
- uid: System.Messaging.MessageQueue.CreateTime
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: CreateTime
  nameWithType: MessageQueue.CreateTime
  fullName: System.Messaging.MessageQueue.CreateTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Messaging.MessageQueue.DefaultPropertiesToSend
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: DefaultPropertiesToSend
  nameWithType: MessageQueue.DefaultPropertiesToSend
  fullName: System.Messaging.MessageQueue.DefaultPropertiesToSend
- uid: System.Messaging.DefaultPropertiesToSend
  parent: System.Messaging
  isExternal: false
  name: DefaultPropertiesToSend
  nameWithType: DefaultPropertiesToSend
  fullName: System.Messaging.DefaultPropertiesToSend
- uid: System.Messaging.MessageQueue.Delete(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Delete(String)
  nameWithType: MessageQueue.Delete(String)
  fullName: System.Messaging.MessageQueue.Delete(String)
- uid: System.Messaging.MessageQueue.DenySharedReceive
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: DenySharedReceive
  nameWithType: MessageQueue.DenySharedReceive
  fullName: System.Messaging.MessageQueue.DenySharedReceive
- uid: System.Messaging.MessageQueue.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueue.Dispose(Boolean)
  fullName: System.Messaging.MessageQueue.Dispose(Boolean)
- uid: System.Messaging.MessageQueue.EnableConnectionCache
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: EnableConnectionCache
  nameWithType: MessageQueue.EnableConnectionCache
  fullName: System.Messaging.MessageQueue.EnableConnectionCache
- uid: System.Messaging.MessageQueue.EncryptionRequired
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: EncryptionRequired
  nameWithType: MessageQueue.EncryptionRequired
  fullName: System.Messaging.MessageQueue.EncryptionRequired
- uid: System.Messaging.EncryptionRequired
  parent: System.Messaging
  isExternal: false
  name: EncryptionRequired
  nameWithType: EncryptionRequired
  fullName: System.Messaging.EncryptionRequired
- uid: System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: EndPeek(IAsyncResult)
  nameWithType: MessageQueue.EndPeek(IAsyncResult)
  fullName: System.Messaging.MessageQueue.EndPeek(IAsyncResult)
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: EndReceive(IAsyncResult)
  nameWithType: MessageQueue.EndReceive(IAsyncResult)
  fullName: System.Messaging.MessageQueue.EndReceive(IAsyncResult)
- uid: System.Messaging.MessageQueue.Exists(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Exists(String)
  nameWithType: MessageQueue.Exists(String)
  fullName: System.Messaging.MessageQueue.Exists(String)
- uid: System.Messaging.MessageQueue.FormatName
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: FormatName
  nameWithType: MessageQueue.FormatName
  fullName: System.Messaging.MessageQueue.FormatName
- uid: System.Messaging.MessageQueue.Formatter
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Formatter
  nameWithType: MessageQueue.Formatter
  fullName: System.Messaging.MessageQueue.Formatter
- uid: System.Messaging.IMessageFormatter
  parent: System.Messaging
  isExternal: false
  name: IMessageFormatter
  nameWithType: IMessageFormatter
  fullName: System.Messaging.IMessageFormatter
- uid: System.Messaging.MessageQueue.GetAllMessages
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetAllMessages()
  nameWithType: MessageQueue.GetAllMessages()
  fullName: System.Messaging.MessageQueue.GetAllMessages()
- uid: System.Messaging.Message[]
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message[]
  spec.csharp:
  - uid: System.Messaging.Message
    name: Message
    nameWithType: Message
    fullName: Message[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.MessageQueue.GetEnumerator
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetEnumerator()
  nameWithType: MessageQueue.GetEnumerator()
  fullName: System.Messaging.MessageQueue.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Messaging.MessageQueue.GetMachineId(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetMachineId(String)
  nameWithType: MessageQueue.GetMachineId(String)
  fullName: System.Messaging.MessageQueue.GetMachineId(String)
- uid: System.Messaging.MessageQueue.GetMessageEnumerator
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetMessageEnumerator()
  nameWithType: MessageQueue.GetMessageEnumerator()
  fullName: System.Messaging.MessageQueue.GetMessageEnumerator()
- uid: System.Messaging.MessageEnumerator
  parent: System.Messaging
  isExternal: false
  name: MessageEnumerator
  nameWithType: MessageEnumerator
  fullName: System.Messaging.MessageEnumerator
- uid: System.Messaging.MessageQueue.GetMessageEnumerator2
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetMessageEnumerator2()
  nameWithType: MessageQueue.GetMessageEnumerator2()
  fullName: System.Messaging.MessageQueue.GetMessageEnumerator2()
- uid: System.Messaging.MessageQueue.GetMessageQueueEnumerator
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetMessageQueueEnumerator()
  nameWithType: MessageQueue.GetMessageQueueEnumerator()
  fullName: System.Messaging.MessageQueue.GetMessageQueueEnumerator()
- uid: System.Messaging.MessageQueueEnumerator
  parent: System.Messaging
  isExternal: false
  name: MessageQueueEnumerator
  nameWithType: MessageQueueEnumerator
  fullName: System.Messaging.MessageQueueEnumerator
- uid: System.Messaging.MessageQueue.GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetMessageQueueEnumerator(MessageQueueCriteria)
  nameWithType: MessageQueue.GetMessageQueueEnumerator(MessageQueueCriteria)
  fullName: System.Messaging.MessageQueue.GetMessageQueueEnumerator(MessageQueueCriteria)
- uid: System.Messaging.MessageQueueCriteria
  parent: System.Messaging
  isExternal: false
  name: MessageQueueCriteria
  nameWithType: MessageQueueCriteria
  fullName: System.Messaging.MessageQueueCriteria
- uid: System.Messaging.MessageQueue.GetPrivateQueuesByMachine(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPrivateQueuesByMachine(String)
  nameWithType: MessageQueue.GetPrivateQueuesByMachine(String)
  fullName: System.Messaging.MessageQueue.GetPrivateQueuesByMachine(String)
- uid: System.Messaging.MessageQueue[]
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue[]
  spec.csharp:
  - uid: System.Messaging.MessageQueue
    name: MessageQueue
    nameWithType: MessageQueue
    fullName: MessageQueue[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.MessageQueue.GetPublicQueues
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPublicQueues()
  nameWithType: MessageQueue.GetPublicQueues()
  fullName: System.Messaging.MessageQueue.GetPublicQueues()
- uid: System.Messaging.MessageQueue.GetPublicQueues(System.Messaging.MessageQueueCriteria)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPublicQueues(MessageQueueCriteria)
  nameWithType: MessageQueue.GetPublicQueues(MessageQueueCriteria)
  fullName: System.Messaging.MessageQueue.GetPublicQueues(MessageQueueCriteria)
- uid: System.Messaging.MessageQueue.GetPublicQueuesByCategory(System.Guid)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPublicQueuesByCategory(Guid)
  nameWithType: MessageQueue.GetPublicQueuesByCategory(Guid)
  fullName: System.Messaging.MessageQueue.GetPublicQueuesByCategory(Guid)
- uid: System.Messaging.MessageQueue.GetPublicQueuesByLabel(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPublicQueuesByLabel(String)
  nameWithType: MessageQueue.GetPublicQueuesByLabel(String)
  fullName: System.Messaging.MessageQueue.GetPublicQueuesByLabel(String)
- uid: System.Messaging.MessageQueue.GetPublicQueuesByMachine(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPublicQueuesByMachine(String)
  nameWithType: MessageQueue.GetPublicQueuesByMachine(String)
  fullName: System.Messaging.MessageQueue.GetPublicQueuesByMachine(String)
- uid: System.Messaging.MessageQueue.GetSecurityContext
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetSecurityContext()
  nameWithType: MessageQueue.GetSecurityContext()
  fullName: System.Messaging.MessageQueue.GetSecurityContext()
- uid: System.Messaging.SecurityContext
  parent: System.Messaging
  isExternal: false
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Messaging.SecurityContext
- uid: System.Messaging.MessageQueue.Id
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Id
  nameWithType: MessageQueue.Id
  fullName: System.Messaging.MessageQueue.Id
- uid: System.Messaging.MessageQueue.InfiniteQueueSize
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: InfiniteQueueSize
  nameWithType: MessageQueue.InfiniteQueueSize
  fullName: System.Messaging.MessageQueue.InfiniteQueueSize
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Messaging.MessageQueue.InfiniteTimeout
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: InfiniteTimeout
  nameWithType: MessageQueue.InfiniteTimeout
  fullName: System.Messaging.MessageQueue.InfiniteTimeout
- uid: System.Messaging.MessageQueue.Label
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Label
  nameWithType: MessageQueue.Label
  fullName: System.Messaging.MessageQueue.Label
- uid: System.Messaging.MessageQueue.LastModifyTime
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: LastModifyTime
  nameWithType: MessageQueue.LastModifyTime
  fullName: System.Messaging.MessageQueue.LastModifyTime
- uid: System.Messaging.MessageQueue.MachineName
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MachineName
  nameWithType: MessageQueue.MachineName
  fullName: System.Messaging.MessageQueue.MachineName
- uid: System.Messaging.MessageQueue.MaximumJournalSize
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MaximumJournalSize
  nameWithType: MessageQueue.MaximumJournalSize
  fullName: System.Messaging.MessageQueue.MaximumJournalSize
- uid: System.Messaging.MessageQueue.MaximumQueueSize
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MaximumQueueSize
  nameWithType: MessageQueue.MaximumQueueSize
  fullName: System.Messaging.MessageQueue.MaximumQueueSize
- uid: System.Messaging.MessageQueue.MessageReadPropertyFilter
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MessageReadPropertyFilter
  nameWithType: MessageQueue.MessageReadPropertyFilter
  fullName: System.Messaging.MessageQueue.MessageReadPropertyFilter
- uid: System.Messaging.MessagePropertyFilter
  parent: System.Messaging
  isExternal: false
  name: MessagePropertyFilter
  nameWithType: MessagePropertyFilter
  fullName: System.Messaging.MessagePropertyFilter
- uid: System.Messaging.MessageQueue.MulticastAddress
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MulticastAddress
  nameWithType: MessageQueue.MulticastAddress
  fullName: System.Messaging.MessageQueue.MulticastAddress
- uid: System.Messaging.MessageQueue.Path
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Path
  nameWithType: MessageQueue.Path
  fullName: System.Messaging.MessageQueue.Path
- uid: System.Messaging.MessageQueue.Peek
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Peek()
  nameWithType: MessageQueue.Peek()
  fullName: System.Messaging.MessageQueue.Peek()
- uid: System.Messaging.MessageQueue.Peek(System.TimeSpan)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Peek(TimeSpan)
  nameWithType: MessageQueue.Peek(TimeSpan)
  fullName: System.Messaging.MessageQueue.Peek(TimeSpan)
- uid: System.Messaging.MessageQueue.Peek(System.TimeSpan,System.Messaging.Cursor,System.Messaging.PeekAction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Peek(TimeSpan,Cursor,PeekAction)
  nameWithType: MessageQueue.Peek(TimeSpan,Cursor,PeekAction)
  fullName: System.Messaging.MessageQueue.Peek(TimeSpan,Cursor,PeekAction)
- uid: System.Messaging.MessageQueue.PeekByCorrelationId(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: PeekByCorrelationId(String)
  nameWithType: MessageQueue.PeekByCorrelationId(String)
  fullName: System.Messaging.MessageQueue.PeekByCorrelationId(String)
- uid: System.Messaging.MessageQueue.PeekByCorrelationId(System.String,System.TimeSpan)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: PeekByCorrelationId(String,TimeSpan)
  nameWithType: MessageQueue.PeekByCorrelationId(String,TimeSpan)
  fullName: System.Messaging.MessageQueue.PeekByCorrelationId(String,TimeSpan)
- uid: System.Messaging.MessageQueue.PeekById(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: PeekById(String)
  nameWithType: MessageQueue.PeekById(String)
  fullName: System.Messaging.MessageQueue.PeekById(String)
- uid: System.Messaging.MessageQueue.PeekById(System.String,System.TimeSpan)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: PeekById(String,TimeSpan)
  nameWithType: MessageQueue.PeekById(String,TimeSpan)
  fullName: System.Messaging.MessageQueue.PeekById(String,TimeSpan)
- uid: System.Messaging.MessageQueue.PeekByLookupId(System.Int64)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: PeekByLookupId(Int64)
  nameWithType: MessageQueue.PeekByLookupId(Int64)
  fullName: System.Messaging.MessageQueue.PeekByLookupId(Int64)
- uid: System.Messaging.MessageQueue.PeekByLookupId(System.Messaging.MessageLookupAction,System.Int64)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: PeekByLookupId(MessageLookupAction,Int64)
  nameWithType: MessageQueue.PeekByLookupId(MessageLookupAction,Int64)
  fullName: System.Messaging.MessageQueue.PeekByLookupId(MessageLookupAction,Int64)
- uid: System.Messaging.MessageLookupAction
  parent: System.Messaging
  isExternal: false
  name: MessageLookupAction
  nameWithType: MessageLookupAction
  fullName: System.Messaging.MessageLookupAction
- uid: System.Messaging.MessageQueue.PeekCompleted
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: PeekCompleted
  nameWithType: MessageQueue.PeekCompleted
  fullName: System.Messaging.MessageQueue.PeekCompleted
- uid: System.Messaging.PeekCompletedEventHandler
  parent: System.Messaging
  isExternal: false
  name: PeekCompletedEventHandler
  nameWithType: PeekCompletedEventHandler
  fullName: System.Messaging.PeekCompletedEventHandler
- uid: System.Messaging.MessageQueue.Purge
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Purge()
  nameWithType: MessageQueue.Purge()
  fullName: System.Messaging.MessageQueue.Purge()
- uid: System.Messaging.MessageQueue.QueueName
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: QueueName
  nameWithType: MessageQueue.QueueName
  fullName: System.Messaging.MessageQueue.QueueName
- uid: System.Messaging.MessageQueue.ReadHandle
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReadHandle
  nameWithType: MessageQueue.ReadHandle
  fullName: System.Messaging.MessageQueue.ReadHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageQueue.Receive
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Receive()
  nameWithType: MessageQueue.Receive()
  fullName: System.Messaging.MessageQueue.Receive()
- uid: System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Receive(MessageQueueTransaction)
  nameWithType: MessageQueue.Receive(MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.Receive(MessageQueueTransaction)
- uid: System.Messaging.MessageQueueTransaction
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
- uid: System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Receive(MessageQueueTransactionType)
  nameWithType: MessageQueue.Receive(MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.Receive(MessageQueueTransactionType)
- uid: System.Messaging.MessageQueueTransactionType
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionType
  nameWithType: MessageQueueTransactionType
  fullName: System.Messaging.MessageQueueTransactionType
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Receive(TimeSpan)
  nameWithType: MessageQueue.Receive(TimeSpan)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan)
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Receive(TimeSpan,Cursor)
  nameWithType: MessageQueue.Receive(TimeSpan,Cursor)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan,Cursor)
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Receive(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageQueue.Receive(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan,MessageQueueTransaction)
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Receive(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageQueue.Receive(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan,MessageQueueTransactionType)
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Receive(TimeSpan,Cursor,MessageQueueTransaction)
  nameWithType: MessageQueue.Receive(TimeSpan,Cursor,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan,Cursor,MessageQueueTransaction)
- uid: System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.Cursor,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Receive(TimeSpan,Cursor,MessageQueueTransactionType)
  nameWithType: MessageQueue.Receive(TimeSpan,Cursor,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.Receive(TimeSpan,Cursor,MessageQueueTransactionType)
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByCorrelationId(String)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String)
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByCorrelationId(String,MessageQueueTransaction)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String,MessageQueueTransaction)
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByCorrelationId(String,MessageQueueTransactionType)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String,MessageQueueTransactionType)
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByCorrelationId(String,TimeSpan)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String,TimeSpan)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String,TimeSpan)
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransaction)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransaction)
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageQueue.ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.ReceiveByCorrelationId(String,TimeSpan,MessageQueueTransactionType)
- uid: System.Messaging.MessageQueue.ReceiveById(System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveById(String)
  nameWithType: MessageQueue.ReceiveById(String)
  fullName: System.Messaging.MessageQueue.ReceiveById(String)
- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveById(String,MessageQueueTransaction)
  nameWithType: MessageQueue.ReceiveById(String,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.ReceiveById(String,MessageQueueTransaction)
- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveById(String,MessageQueueTransactionType)
  nameWithType: MessageQueue.ReceiveById(String,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.ReceiveById(String,MessageQueueTransactionType)
- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveById(String,TimeSpan)
  nameWithType: MessageQueue.ReceiveById(String,TimeSpan)
  fullName: System.Messaging.MessageQueue.ReceiveById(String,TimeSpan)
- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveById(String,TimeSpan,MessageQueueTransaction)
  nameWithType: MessageQueue.ReceiveById(String,TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.ReceiveById(String,TimeSpan,MessageQueueTransaction)
- uid: System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveById(String,TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageQueue.ReceiveById(String,TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.ReceiveById(String,TimeSpan,MessageQueueTransactionType)
- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Int64)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByLookupId(Int64)
  nameWithType: MessageQueue.ReceiveByLookupId(Int64)
  fullName: System.Messaging.MessageQueue.ReceiveByLookupId(Int64)
- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransaction)
  nameWithType: MessageQueue.ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransaction)
- uid: System.Messaging.MessageQueue.ReceiveByLookupId(System.Messaging.MessageLookupAction,System.Int64,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransactionType)
  nameWithType: MessageQueue.ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.ReceiveByLookupId(MessageLookupAction,Int64,MessageQueueTransactionType)
- uid: System.Messaging.MessageQueue.ReceiveCompleted
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveCompleted
  nameWithType: MessageQueue.ReceiveCompleted
  fullName: System.Messaging.MessageQueue.ReceiveCompleted
- uid: System.Messaging.ReceiveCompletedEventHandler
  parent: System.Messaging
  isExternal: false
  name: ReceiveCompletedEventHandler
  nameWithType: ReceiveCompletedEventHandler
  fullName: System.Messaging.ReceiveCompletedEventHandler
- uid: System.Messaging.MessageQueue.Refresh
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Refresh()
  nameWithType: MessageQueue.Refresh()
  fullName: System.Messaging.MessageQueue.Refresh()
- uid: System.Messaging.MessageQueue.ResetPermissions
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ResetPermissions()
  nameWithType: MessageQueue.ResetPermissions()
  fullName: System.Messaging.MessageQueue.ResetPermissions()
- uid: System.Messaging.MessageQueue.Send(System.Object)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Send(Object)
  nameWithType: MessageQueue.Send(Object)
  fullName: System.Messaging.MessageQueue.Send(Object)
- uid: System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Send(Object,MessageQueueTransaction)
  nameWithType: MessageQueue.Send(Object,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.Send(Object,MessageQueueTransaction)
- uid: System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Send(Object,MessageQueueTransactionType)
  nameWithType: MessageQueue.Send(Object,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.Send(Object,MessageQueueTransactionType)
- uid: System.Messaging.MessageQueue.Send(System.Object,System.String)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Send(Object,String)
  nameWithType: MessageQueue.Send(Object,String)
  fullName: System.Messaging.MessageQueue.Send(Object,String)
- uid: System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Send(Object,String,MessageQueueTransaction)
  nameWithType: MessageQueue.Send(Object,String,MessageQueueTransaction)
  fullName: System.Messaging.MessageQueue.Send(Object,String,MessageQueueTransaction)
- uid: System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Send(Object,String,MessageQueueTransactionType)
  nameWithType: MessageQueue.Send(Object,String,MessageQueueTransactionType)
  fullName: System.Messaging.MessageQueue.Send(Object,String,MessageQueueTransactionType)
- uid: System.Messaging.MessageQueue.SetPermissions(System.Messaging.AccessControlList)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: SetPermissions(AccessControlList)
  nameWithType: MessageQueue.SetPermissions(AccessControlList)
  fullName: System.Messaging.MessageQueue.SetPermissions(AccessControlList)
- uid: System.Messaging.AccessControlList
  parent: System.Messaging
  isExternal: false
  name: AccessControlList
  nameWithType: AccessControlList
  fullName: System.Messaging.AccessControlList
- uid: System.Messaging.MessageQueue.SetPermissions(System.Messaging.MessageQueueAccessControlEntry)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: SetPermissions(MessageQueueAccessControlEntry)
  nameWithType: MessageQueue.SetPermissions(MessageQueueAccessControlEntry)
  fullName: System.Messaging.MessageQueue.SetPermissions(MessageQueueAccessControlEntry)
- uid: System.Messaging.MessageQueueAccessControlEntry
  parent: System.Messaging
  isExternal: false
  name: MessageQueueAccessControlEntry
  nameWithType: MessageQueueAccessControlEntry
  fullName: System.Messaging.MessageQueueAccessControlEntry
- uid: System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: SetPermissions(String,MessageQueueAccessRights)
  nameWithType: MessageQueue.SetPermissions(String,MessageQueueAccessRights)
  fullName: System.Messaging.MessageQueue.SetPermissions(String,MessageQueueAccessRights)
- uid: System.Messaging.MessageQueueAccessRights
  parent: System.Messaging
  isExternal: false
  name: MessageQueueAccessRights
  nameWithType: MessageQueueAccessRights
  fullName: System.Messaging.MessageQueueAccessRights
- uid: System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: SetPermissions(String,MessageQueueAccessRights,AccessControlEntryType)
  nameWithType: MessageQueue.SetPermissions(String,MessageQueueAccessRights,AccessControlEntryType)
  fullName: System.Messaging.MessageQueue.SetPermissions(String,MessageQueueAccessRights,AccessControlEntryType)
- uid: System.Messaging.AccessControlEntryType
  parent: System.Messaging
  isExternal: false
  name: AccessControlEntryType
  nameWithType: AccessControlEntryType
  fullName: System.Messaging.AccessControlEntryType
- uid: System.Messaging.MessageQueue.SynchronizingObject
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: SynchronizingObject
  nameWithType: MessageQueue.SynchronizingObject
  fullName: System.Messaging.MessageQueue.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.Messaging.MessageQueue.Transactional
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Transactional
  nameWithType: MessageQueue.Transactional
  fullName: System.Messaging.MessageQueue.Transactional
- uid: System.Messaging.MessageQueue.UseJournalQueue
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: UseJournalQueue
  nameWithType: MessageQueue.UseJournalQueue
  fullName: System.Messaging.MessageQueue.UseJournalQueue
- uid: System.Messaging.MessageQueue.WriteHandle
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: WriteHandle
  nameWithType: MessageQueue.WriteHandle
  fullName: System.Messaging.MessageQueue.WriteHandle
- uid: System.Messaging.MessageQueue.#ctor*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue.MessageQueue
- uid: System.Messaging.MessageQueue.AccessMode*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: AccessMode
  nameWithType: MessageQueue.AccessMode
- uid: System.Messaging.MessageQueue.Authenticate*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Authenticate
  nameWithType: MessageQueue.Authenticate
- uid: System.Messaging.MessageQueue.BasePriority*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BasePriority
  nameWithType: MessageQueue.BasePriority
- uid: System.Messaging.MessageQueue.BeginPeek*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginPeek
  nameWithType: MessageQueue.BeginPeek
- uid: System.Messaging.MessageQueue.BeginReceive*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: BeginReceive
  nameWithType: MessageQueue.BeginReceive
- uid: System.Messaging.MessageQueue.CanRead*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: CanRead
  nameWithType: MessageQueue.CanRead
- uid: System.Messaging.MessageQueue.CanWrite*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: CanWrite
  nameWithType: MessageQueue.CanWrite
- uid: System.Messaging.MessageQueue.Category*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Category
  nameWithType: MessageQueue.Category
- uid: System.Messaging.MessageQueue.ClearConnectionCache*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ClearConnectionCache
  nameWithType: MessageQueue.ClearConnectionCache
- uid: System.Messaging.MessageQueue.Close*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Close
  nameWithType: MessageQueue.Close
- uid: System.Messaging.MessageQueue.Create*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Create
  nameWithType: MessageQueue.Create
- uid: System.Messaging.MessageQueue.CreateCursor*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: CreateCursor
  nameWithType: MessageQueue.CreateCursor
- uid: System.Messaging.MessageQueue.CreateTime*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: CreateTime
  nameWithType: MessageQueue.CreateTime
- uid: System.Messaging.MessageQueue.DefaultPropertiesToSend*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: DefaultPropertiesToSend
  nameWithType: MessageQueue.DefaultPropertiesToSend
- uid: System.Messaging.MessageQueue.Delete*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Delete
  nameWithType: MessageQueue.Delete
- uid: System.Messaging.MessageQueue.DenySharedReceive*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: DenySharedReceive
  nameWithType: MessageQueue.DenySharedReceive
- uid: System.Messaging.MessageQueue.Dispose*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Dispose
  nameWithType: MessageQueue.Dispose
- uid: System.Messaging.MessageQueue.EnableConnectionCache*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: EnableConnectionCache
  nameWithType: MessageQueue.EnableConnectionCache
- uid: System.Messaging.MessageQueue.EncryptionRequired*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: EncryptionRequired
  nameWithType: MessageQueue.EncryptionRequired
- uid: System.Messaging.MessageQueue.EndPeek*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: EndPeek
  nameWithType: MessageQueue.EndPeek
- uid: System.Messaging.MessageQueue.EndReceive*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: EndReceive
  nameWithType: MessageQueue.EndReceive
- uid: System.Messaging.MessageQueue.Exists*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Exists
  nameWithType: MessageQueue.Exists
- uid: System.Messaging.MessageQueue.FormatName*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: FormatName
  nameWithType: MessageQueue.FormatName
- uid: System.Messaging.MessageQueue.Formatter*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Formatter
  nameWithType: MessageQueue.Formatter
- uid: System.Messaging.MessageQueue.GetAllMessages*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetAllMessages
  nameWithType: MessageQueue.GetAllMessages
- uid: System.Messaging.MessageQueue.GetEnumerator*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetEnumerator
  nameWithType: MessageQueue.GetEnumerator
- uid: System.Messaging.MessageQueue.GetMachineId*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetMachineId
  nameWithType: MessageQueue.GetMachineId
- uid: System.Messaging.MessageQueue.GetMessageEnumerator*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetMessageEnumerator
  nameWithType: MessageQueue.GetMessageEnumerator
- uid: System.Messaging.MessageQueue.GetMessageEnumerator2*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetMessageEnumerator2
  nameWithType: MessageQueue.GetMessageEnumerator2
- uid: System.Messaging.MessageQueue.GetMessageQueueEnumerator*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetMessageQueueEnumerator
  nameWithType: MessageQueue.GetMessageQueueEnumerator
- uid: System.Messaging.MessageQueue.GetPrivateQueuesByMachine*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPrivateQueuesByMachine
  nameWithType: MessageQueue.GetPrivateQueuesByMachine
- uid: System.Messaging.MessageQueue.GetPublicQueues*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPublicQueues
  nameWithType: MessageQueue.GetPublicQueues
- uid: System.Messaging.MessageQueue.GetPublicQueuesByCategory*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPublicQueuesByCategory
  nameWithType: MessageQueue.GetPublicQueuesByCategory
- uid: System.Messaging.MessageQueue.GetPublicQueuesByLabel*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPublicQueuesByLabel
  nameWithType: MessageQueue.GetPublicQueuesByLabel
- uid: System.Messaging.MessageQueue.GetPublicQueuesByMachine*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetPublicQueuesByMachine
  nameWithType: MessageQueue.GetPublicQueuesByMachine
- uid: System.Messaging.MessageQueue.GetSecurityContext*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: GetSecurityContext
  nameWithType: MessageQueue.GetSecurityContext
- uid: System.Messaging.MessageQueue.Id*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Id
  nameWithType: MessageQueue.Id
- uid: System.Messaging.MessageQueue.Label*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Label
  nameWithType: MessageQueue.Label
- uid: System.Messaging.MessageQueue.LastModifyTime*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: LastModifyTime
  nameWithType: MessageQueue.LastModifyTime
- uid: System.Messaging.MessageQueue.MachineName*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MachineName
  nameWithType: MessageQueue.MachineName
- uid: System.Messaging.MessageQueue.MaximumJournalSize*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MaximumJournalSize
  nameWithType: MessageQueue.MaximumJournalSize
- uid: System.Messaging.MessageQueue.MaximumQueueSize*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MaximumQueueSize
  nameWithType: MessageQueue.MaximumQueueSize
- uid: System.Messaging.MessageQueue.MessageReadPropertyFilter*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MessageReadPropertyFilter
  nameWithType: MessageQueue.MessageReadPropertyFilter
- uid: System.Messaging.MessageQueue.MulticastAddress*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: MulticastAddress
  nameWithType: MessageQueue.MulticastAddress
- uid: System.Messaging.MessageQueue.Path*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Path
  nameWithType: MessageQueue.Path
- uid: System.Messaging.MessageQueue.Peek*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Peek
  nameWithType: MessageQueue.Peek
- uid: System.Messaging.MessageQueue.PeekByCorrelationId*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: PeekByCorrelationId
  nameWithType: MessageQueue.PeekByCorrelationId
- uid: System.Messaging.MessageQueue.PeekById*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: PeekById
  nameWithType: MessageQueue.PeekById
- uid: System.Messaging.MessageQueue.PeekByLookupId*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: PeekByLookupId
  nameWithType: MessageQueue.PeekByLookupId
- uid: System.Messaging.MessageQueue.Purge*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Purge
  nameWithType: MessageQueue.Purge
- uid: System.Messaging.MessageQueue.QueueName*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: QueueName
  nameWithType: MessageQueue.QueueName
- uid: System.Messaging.MessageQueue.ReadHandle*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReadHandle
  nameWithType: MessageQueue.ReadHandle
- uid: System.Messaging.MessageQueue.Receive*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Receive
  nameWithType: MessageQueue.Receive
- uid: System.Messaging.MessageQueue.ReceiveByCorrelationId*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByCorrelationId
  nameWithType: MessageQueue.ReceiveByCorrelationId
- uid: System.Messaging.MessageQueue.ReceiveById*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveById
  nameWithType: MessageQueue.ReceiveById
- uid: System.Messaging.MessageQueue.ReceiveByLookupId*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ReceiveByLookupId
  nameWithType: MessageQueue.ReceiveByLookupId
- uid: System.Messaging.MessageQueue.Refresh*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Refresh
  nameWithType: MessageQueue.Refresh
- uid: System.Messaging.MessageQueue.ResetPermissions*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: ResetPermissions
  nameWithType: MessageQueue.ResetPermissions
- uid: System.Messaging.MessageQueue.Send*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Send
  nameWithType: MessageQueue.Send
- uid: System.Messaging.MessageQueue.SetPermissions*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: SetPermissions
  nameWithType: MessageQueue.SetPermissions
- uid: System.Messaging.MessageQueue.SynchronizingObject*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: SynchronizingObject
  nameWithType: MessageQueue.SynchronizingObject
- uid: System.Messaging.MessageQueue.Transactional*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: Transactional
  nameWithType: MessageQueue.Transactional
- uid: System.Messaging.MessageQueue.UseJournalQueue*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: UseJournalQueue
  nameWithType: MessageQueue.UseJournalQueue
- uid: System.Messaging.MessageQueue.WriteHandle*
  parent: System.Messaging.MessageQueue
  isExternal: false
  name: WriteHandle
  nameWithType: MessageQueue.WriteHandle
