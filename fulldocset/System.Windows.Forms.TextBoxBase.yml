### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.TextBoxBase
  id: TextBoxBase
  children:
  - System.Windows.Forms.TextBoxBase.AcceptsTab
  - System.Windows.Forms.TextBoxBase.AcceptsTabChanged
  - System.Windows.Forms.TextBoxBase.AppendText(System.String)
  - System.Windows.Forms.TextBoxBase.AutoSize
  - System.Windows.Forms.TextBoxBase.AutoSizeChanged
  - System.Windows.Forms.TextBoxBase.BackColor
  - System.Windows.Forms.TextBoxBase.BackgroundImage
  - System.Windows.Forms.TextBoxBase.BackgroundImageChanged
  - System.Windows.Forms.TextBoxBase.BackgroundImageLayout
  - System.Windows.Forms.TextBoxBase.BackgroundImageLayoutChanged
  - System.Windows.Forms.TextBoxBase.BorderStyle
  - System.Windows.Forms.TextBoxBase.BorderStyleChanged
  - System.Windows.Forms.TextBoxBase.CanEnableIme
  - System.Windows.Forms.TextBoxBase.CanUndo
  - System.Windows.Forms.TextBoxBase.Clear
  - System.Windows.Forms.TextBoxBase.ClearUndo
  - System.Windows.Forms.TextBoxBase.Click
  - System.Windows.Forms.TextBoxBase.Copy
  - System.Windows.Forms.TextBoxBase.CreateHandle
  - System.Windows.Forms.TextBoxBase.CreateParams
  - System.Windows.Forms.TextBoxBase.Cut
  - System.Windows.Forms.TextBoxBase.DefaultCursor
  - System.Windows.Forms.TextBoxBase.DefaultSize
  - System.Windows.Forms.TextBoxBase.DeselectAll
  - System.Windows.Forms.TextBoxBase.DoubleBuffered
  - System.Windows.Forms.TextBoxBase.ForeColor
  - System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)
  - System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)
  - System.Windows.Forms.TextBoxBase.GetFirstCharIndexFromLine(System.Int32)
  - System.Windows.Forms.TextBoxBase.GetFirstCharIndexOfCurrentLine
  - System.Windows.Forms.TextBoxBase.GetLineFromCharIndex(System.Int32)
  - System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)
  - System.Windows.Forms.TextBoxBase.HideSelection
  - System.Windows.Forms.TextBoxBase.HideSelectionChanged
  - System.Windows.Forms.TextBoxBase.ImeModeBase
  - System.Windows.Forms.TextBoxBase.IsInputKey(System.Windows.Forms.Keys)
  - System.Windows.Forms.TextBoxBase.Lines
  - System.Windows.Forms.TextBoxBase.MaxLength
  - System.Windows.Forms.TextBoxBase.Modified
  - System.Windows.Forms.TextBoxBase.ModifiedChanged
  - System.Windows.Forms.TextBoxBase.MouseClick
  - System.Windows.Forms.TextBoxBase.Multiline
  - System.Windows.Forms.TextBoxBase.MultilineChanged
  - System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.OnBorderStyleChanged(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.OnFontChanged(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.OnHandleCreated(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.OnHandleDestroyed(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.OnHideSelectionChanged(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.OnModifiedChanged(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.TextBoxBase.OnMultilineChanged(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.OnPaddingChanged(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.OnReadOnlyChanged(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.OnTextChanged(System.EventArgs)
  - System.Windows.Forms.TextBoxBase.Padding
  - System.Windows.Forms.TextBoxBase.PaddingChanged
  - System.Windows.Forms.TextBoxBase.Paint
  - System.Windows.Forms.TextBoxBase.Paste
  - System.Windows.Forms.TextBoxBase.PreferredHeight
  - System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  - System.Windows.Forms.TextBoxBase.ProcessDialogKey(System.Windows.Forms.Keys)
  - System.Windows.Forms.TextBoxBase.ReadOnly
  - System.Windows.Forms.TextBoxBase.ReadOnlyChanged
  - System.Windows.Forms.TextBoxBase.ScrollToCaret
  - System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)
  - System.Windows.Forms.TextBoxBase.SelectAll
  - System.Windows.Forms.TextBoxBase.SelectedText
  - System.Windows.Forms.TextBoxBase.SelectionLength
  - System.Windows.Forms.TextBoxBase.SelectionStart
  - System.Windows.Forms.TextBoxBase.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  - System.Windows.Forms.TextBoxBase.ShortcutsEnabled
  - System.Windows.Forms.TextBoxBase.Text
  - System.Windows.Forms.TextBoxBase.TextLength
  - System.Windows.Forms.TextBoxBase.ToString
  - System.Windows.Forms.TextBoxBase.Undo
  - System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)
  - System.Windows.Forms.TextBoxBase.WordWrap
  langs:
  - csharp
  name: TextBoxBase
  nameWithType: TextBoxBase
  fullName: System.Windows.Forms.TextBoxBase
  type: Class
  summary: "Implements the basic functionality required by text controls."
  remarks: "This class implements the core features of text manipulation controls, such as <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.RichTextBox>. These include text selection, **Clipboard** functionality, multiline text control support, and many events."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class, to create a multiline <xref:System.Windows.Forms.TextBox> control with vertical scroll bars. This example also uses the <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, and <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> properties to make the multiline text box control useful for creating text documents.  \n  \n [!code-cpp[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/cpp/t-system.windows.forms.t_46_1.cpp)]\n [!code-cs[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/csharp/t-system.windows.forms.t_46_1.cs)]\n [!code-vb[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.t_46_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultBindingProperty("Text")]

      [System.ComponentModel.DefaultEvent("TextChanged")]

      [System.ComponentModel.Designer("System.Windows.Forms.Design.TextBoxBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class TextBoxBase : System.Windows.Forms.Control
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Windows.Forms.Control
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)
  - System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)
  - System.Windows.Forms.Control.AccessibilityObject
  - System.Windows.Forms.Control.AccessibleDefaultActionDescription
  - System.Windows.Forms.Control.AccessibleDescription
  - System.Windows.Forms.Control.AccessibleName
  - System.Windows.Forms.Control.AccessibleRole
  - System.Windows.Forms.Control.AllowDrop
  - System.Windows.Forms.Control.Anchor
  - System.Windows.Forms.Control.AutoScrollOffset
  - System.Windows.Forms.Control.BackColorChanged
  - System.Windows.Forms.Control.BeginInvoke(System.Delegate)
  - System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])
  - System.Windows.Forms.Control.BindingContext
  - System.Windows.Forms.Control.BindingContextChanged
  - System.Windows.Forms.Control.Bottom
  - System.Windows.Forms.Control.Bounds
  - System.Windows.Forms.Control.BringToFront
  - System.Windows.Forms.Control.CanFocus
  - System.Windows.Forms.Control.CanRaiseEvents
  - System.Windows.Forms.Control.CanSelect
  - System.Windows.Forms.Control.Capture
  - System.Windows.Forms.Control.CausesValidation
  - System.Windows.Forms.Control.CausesValidationChanged
  - System.Windows.Forms.Control.ChangeUICues
  - System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls
  - System.Windows.Forms.Control.ClientRectangle
  - System.Windows.Forms.Control.ClientSize
  - System.Windows.Forms.Control.ClientSizeChanged
  - System.Windows.Forms.Control.CompanyName
  - System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)
  - System.Windows.Forms.Control.ContainsFocus
  - System.Windows.Forms.Control.ContextMenu
  - System.Windows.Forms.Control.ContextMenuChanged
  - System.Windows.Forms.Control.ContextMenuStrip
  - System.Windows.Forms.Control.ContextMenuStripChanged
  - System.Windows.Forms.Control.ControlAdded
  - System.Windows.Forms.Control.ControlRemoved
  - System.Windows.Forms.Control.Controls
  - System.Windows.Forms.Control.CreateAccessibilityInstance
  - System.Windows.Forms.Control.CreateControl
  - System.Windows.Forms.Control.CreateControlsInstance
  - System.Windows.Forms.Control.Created
  - System.Windows.Forms.Control.CreateGraphics
  - System.Windows.Forms.Control.Cursor
  - System.Windows.Forms.Control.CursorChanged
  - System.Windows.Forms.Control.DataBindings
  - System.Windows.Forms.Control.DefaultBackColor
  - System.Windows.Forms.Control.DefaultFont
  - System.Windows.Forms.Control.DefaultForeColor
  - System.Windows.Forms.Control.DefaultImeMode
  - System.Windows.Forms.Control.DefaultMargin
  - System.Windows.Forms.Control.DefaultMaximumSize
  - System.Windows.Forms.Control.DefaultMinimumSize
  - System.Windows.Forms.Control.DefaultPadding
  - System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.DestroyHandle
  - System.Windows.Forms.Control.DisplayRectangle
  - System.Windows.Forms.Control.Dispose(System.Boolean)
  - System.Windows.Forms.Control.Disposing
  - System.Windows.Forms.Control.Dock
  - System.Windows.Forms.Control.DockChanged
  - System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)
  - System.Windows.Forms.Control.DoubleClick
  - System.Windows.Forms.Control.DragDrop
  - System.Windows.Forms.Control.DragEnter
  - System.Windows.Forms.Control.DragLeave
  - System.Windows.Forms.Control.DragOver
  - System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)
  - System.Windows.Forms.Control.Enabled
  - System.Windows.Forms.Control.EnabledChanged
  - System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)
  - System.Windows.Forms.Control.Enter
  - System.Windows.Forms.Control.FindForm
  - System.Windows.Forms.Control.Focus
  - System.Windows.Forms.Control.Focused
  - System.Windows.Forms.Control.Font
  - System.Windows.Forms.Control.FontChanged
  - System.Windows.Forms.Control.FontHeight
  - System.Windows.Forms.Control.ForeColorChanged
  - System.Windows.Forms.Control.FromChildHandle(System.IntPtr)
  - System.Windows.Forms.Control.FromHandle(System.IntPtr)
  - System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)
  - System.Windows.Forms.Control.GetAutoSizeMode
  - System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)
  - System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)
  - System.Windows.Forms.Control.GetContainerControl
  - System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)
  - System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)
  - System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)
  - System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)
  - System.Windows.Forms.Control.GetTopLevel
  - System.Windows.Forms.Control.GiveFeedback
  - System.Windows.Forms.Control.GotFocus
  - System.Windows.Forms.Control.Handle
  - System.Windows.Forms.Control.HandleCreated
  - System.Windows.Forms.Control.HandleDestroyed
  - System.Windows.Forms.Control.HasChildren
  - System.Windows.Forms.Control.Height
  - System.Windows.Forms.Control.HelpRequested
  - System.Windows.Forms.Control.Hide
  - System.Windows.Forms.Control.ImeMode
  - System.Windows.Forms.Control.ImeModeChanged
  - System.Windows.Forms.Control.InitLayout
  - System.Windows.Forms.Control.Invalidate
  - System.Windows.Forms.Control.Invalidate(System.Boolean)
  - System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)
  - System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)
  - System.Windows.Forms.Control.Invalidate(System.Drawing.Region)
  - System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)
  - System.Windows.Forms.Control.Invalidated
  - System.Windows.Forms.Control.Invoke(System.Delegate)
  - System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])
  - System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)
  - System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)
  - System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)
  - System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.InvokeRequired
  - System.Windows.Forms.Control.IsAccessible
  - System.Windows.Forms.Control.IsDisposed
  - System.Windows.Forms.Control.IsHandleCreated
  - System.Windows.Forms.Control.IsInputChar(System.Char)
  - System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)
  - System.Windows.Forms.Control.IsMirrored
  - System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)
  - System.Windows.Forms.Control.KeyDown
  - System.Windows.Forms.Control.KeyPress
  - System.Windows.Forms.Control.KeyUp
  - System.Windows.Forms.Control.Layout
  - System.Windows.Forms.Control.LayoutEngine
  - System.Windows.Forms.Control.Leave
  - System.Windows.Forms.Control.Left
  - System.Windows.Forms.Control.Location
  - System.Windows.Forms.Control.LocationChanged
  - System.Windows.Forms.Control.LostFocus
  - System.Windows.Forms.Control.Margin
  - System.Windows.Forms.Control.MarginChanged
  - System.Windows.Forms.Control.MaximumSize
  - System.Windows.Forms.Control.MinimumSize
  - System.Windows.Forms.Control.ModifierKeys
  - System.Windows.Forms.Control.MouseButtons
  - System.Windows.Forms.Control.MouseCaptureChanged
  - System.Windows.Forms.Control.MouseDoubleClick
  - System.Windows.Forms.Control.MouseDown
  - System.Windows.Forms.Control.MouseEnter
  - System.Windows.Forms.Control.MouseHover
  - System.Windows.Forms.Control.MouseLeave
  - System.Windows.Forms.Control.MouseMove
  - System.Windows.Forms.Control.MousePosition
  - System.Windows.Forms.Control.MouseUp
  - System.Windows.Forms.Control.MouseWheel
  - System.Windows.Forms.Control.Move
  - System.Windows.Forms.Control.Name
  - System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)
  - System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)
  - System.Windows.Forms.Control.OnClick(System.EventArgs)
  - System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)
  - System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)
  - System.Windows.Forms.Control.OnCreateControl
  - System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnDockChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)
  - System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.OnDragLeave(System.EventArgs)
  - System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnEnter(System.EventArgs)
  - System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)
  - System.Windows.Forms.Control.OnGotFocus(System.EventArgs)
  - System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)
  - System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)
  - System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)
  - System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)
  - System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)
  - System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)
  - System.Windows.Forms.Control.OnLeave(System.EventArgs)
  - System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnLostFocus(System.EventArgs)
  - System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)
  - System.Windows.Forms.Control.OnMouseHover(System.EventArgs)
  - System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)
  - System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.OnMove(System.EventArgs)
  - System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)
  - System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)
  - System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)
  - System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnResize(System.EventArgs)
  - System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)
  - System.Windows.Forms.Control.OnValidated(System.EventArgs)
  - System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)
  - System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)
  - System.Windows.Forms.Control.Parent
  - System.Windows.Forms.Control.ParentChanged
  - System.Windows.Forms.Control.PerformLayout
  - System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)
  - System.Windows.Forms.Control.PointToClient(System.Drawing.Point)
  - System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)
  - System.Windows.Forms.Control.PreferredSize
  - System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.PreviewKeyDown
  - System.Windows.Forms.Control.ProcessDialogChar(System.Char)
  - System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.ProcessMnemonic(System.Char)
  - System.Windows.Forms.Control.ProductName
  - System.Windows.Forms.Control.ProductVersion
  - System.Windows.Forms.Control.PropagatingImeMode
  - System.Windows.Forms.Control.QueryAccessibilityHelp
  - System.Windows.Forms.Control.QueryContinueDrag
  - System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)
  - System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)
  - System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)
  - System.Windows.Forms.Control.RecreateHandle
  - System.Windows.Forms.Control.RecreatingHandle
  - System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)
  - System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)
  - System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)
  - System.Windows.Forms.Control.Refresh
  - System.Windows.Forms.Control.Region
  - System.Windows.Forms.Control.RegionChanged
  - System.Windows.Forms.Control.RenderRightToLeft
  - System.Windows.Forms.Control.ResetBackColor
  - System.Windows.Forms.Control.ResetBindings
  - System.Windows.Forms.Control.ResetCursor
  - System.Windows.Forms.Control.ResetFont
  - System.Windows.Forms.Control.ResetForeColor
  - System.Windows.Forms.Control.ResetImeMode
  - System.Windows.Forms.Control.ResetMouseEventArgs
  - System.Windows.Forms.Control.ResetRightToLeft
  - System.Windows.Forms.Control.ResetText
  - System.Windows.Forms.Control.Resize
  - System.Windows.Forms.Control.ResizeRedraw
  - System.Windows.Forms.Control.ResumeLayout
  - System.Windows.Forms.Control.ResumeLayout(System.Boolean)
  - System.Windows.Forms.Control.Right
  - System.Windows.Forms.Control.RightToLeft
  - System.Windows.Forms.Control.RightToLeftChanged
  - System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)
  - System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)
  - System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)
  - System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)
  - System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)
  - System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)
  - System.Windows.Forms.Control.Scale(System.Drawing.SizeF)
  - System.Windows.Forms.Control.Scale(System.Single)
  - System.Windows.Forms.Control.Scale(System.Single,System.Single)
  - System.Windows.Forms.Control.ScaleChildren
  - System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)
  - System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)
  - System.Windows.Forms.Control.Select
  - System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)
  - System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - System.Windows.Forms.Control.SendToBack
  - System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)
  - System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  - System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)
  - System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)
  - System.Windows.Forms.Control.SetTopLevel(System.Boolean)
  - System.Windows.Forms.Control.SetVisibleCore(System.Boolean)
  - System.Windows.Forms.Control.Show
  - System.Windows.Forms.Control.ShowFocusCues
  - System.Windows.Forms.Control.ShowKeyboardCues
  - System.Windows.Forms.Control.Site
  - System.Windows.Forms.Control.Size
  - System.Windows.Forms.Control.SizeChanged
  - System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)
  - System.Windows.Forms.Control.StyleChanged
  - System.Windows.Forms.Control.SuspendLayout
  - System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)
  - System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)
  - System.Windows.Forms.Control.SystemColorsChanged
  - System.Windows.Forms.Control.TabIndex
  - System.Windows.Forms.Control.TabIndexChanged
  - System.Windows.Forms.Control.TabStop
  - System.Windows.Forms.Control.TabStopChanged
  - System.Windows.Forms.Control.Tag
  - System.Windows.Forms.Control.TextChanged
  - System.Windows.Forms.Control.Top
  - System.Windows.Forms.Control.TopLevelControl
  - System.Windows.Forms.Control.Update
  - System.Windows.Forms.Control.UpdateBounds
  - System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Windows.Forms.Control.UpdateStyles
  - System.Windows.Forms.Control.UpdateZOrder
  - System.Windows.Forms.Control.UseWaitCursor
  - System.Windows.Forms.Control.Validated
  - System.Windows.Forms.Control.Validating
  - System.Windows.Forms.Control.Visible
  - System.Windows.Forms.Control.VisibleChanged
  - System.Windows.Forms.Control.Width
  - System.Windows.Forms.Control.WindowTarget
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.AcceptsTab
  id: AcceptsTab
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: AcceptsTab
  nameWithType: TextBoxBase.AcceptsTab
  fullName: System.Windows.Forms.TextBoxBase.AcceptsTab
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether pressing the TAB key in a multiline text box control types a TAB character in the control instead of moving the focus to the next control in the tab order."
  remarks: "The <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> property must also be `true` to get a TAB character in the control.       If the AcceptsTab property is set to `true`, the user must press CTRL+TAB to move the focus to the next control in the tab order."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class, to create a multiline <xref:System.Windows.Forms.TextBox> control with vertical scroll bars. This example also uses the AcceptsTab, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, and <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> properties to make the multiline text box control useful for creating text documents.  \n  \n [!code-cpp[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_72_1.cpp)]\n [!code-cs[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_72_1.cs)]\n [!code-vb[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_72_1.vb)]"
  syntax:
    content: public bool AcceptsTab { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if users can enter tabs in a multiline text box using the TAB key; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if pressing the TAB key moves the focus. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.AcceptsTab*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.AcceptsTabChanged
  id: AcceptsTabChanged
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: AcceptsTabChanged
  nameWithType: TextBoxBase.AcceptsTabChanged
  fullName: System.Windows.Forms.TextBoxBase.AcceptsTabChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.TextBoxBase.AcceptsTab*> property has changed."
  remarks: 'For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the AcceptsTabChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.TextBoxBase>, such as a <xref:System.Windows.Forms.TextBox> or <xref:System.Windows.Forms.TextBoxBase>. Then name the instance `TextBoxBase1` and ensure that the event handler is associated with the AcceptsTabChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#241](~/add/codesnippet/csharp/e-system.windows.forms.t_105_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#241](~/add/codesnippet/visualbasic/e-system.windows.forms.t_105_1.vb)]"
  syntax:
    content: public event EventHandler AcceptsTabChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.AppendText(System.String)
  id: AppendText(System.String)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: AppendText(String)
  nameWithType: TextBoxBase.AppendText(String)
  fullName: System.Windows.Forms.TextBoxBase.AppendText(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Appends text to the current text of a text box."
  remarks: "You can use this method to add text to the existing text in the control instead of using the concatenation operator (+) to concatenate text to the <xref:System.Windows.Forms.TextBoxBase.Text%2A> property."
  example:
  - "The following code example demonstrates how to use the AppendText method and the <xref:System.Windows.Forms.TextBoxBase.TextLength%2A> property to copy text from one <xref:System.Windows.Forms.TextBox> to another. This example requires that two <xref:System.Windows.Forms.TextBox> controls named, `textBox1` and `textBox2`, have been added to a form and that `textBox1` has text assigned to its <xref:System.Windows.Forms.Control.Text%2A> property.  \n  \n [!code-cpp[TextBoxBase.AppendText#1](~/add/codesnippet/cpp/m-system.windows.forms.t_63_1.cpp)]\n [!code-cs[TextBoxBase.AppendText#1](~/add/codesnippet/csharp/m-system.windows.forms.t_63_1.cs)]\n [!code-vb[TextBoxBase.AppendText#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_63_1.vb)]"
  syntax:
    content: public void AppendText (string text);
    parameters:
    - id: text
      type: System.String
      description: "The text to append to the current contents of the text box."
  overload: System.Windows.Forms.TextBoxBase.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.AutoSize
  id: AutoSize
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: AutoSize
  nameWithType: TextBoxBase.AutoSize
  fullName: System.Windows.Forms.TextBoxBase.AutoSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the height of the control automatically adjusts when the font assigned to the control is changed."
  remarks: "When you set the AutoSize property to `true` for a <xref:System.Windows.Forms.TextBox>, when the <xref:System.Windows.Forms.Control.Font%2A> changes, the <xref:System.Windows.Forms.TextBox> expands or contracts the <xref:System.Windows.Forms.Control.Height%2A> to accommodate the larger or smaller text. The <xref:System.Windows.Forms.Control.Width%2A> of the <xref:System.Windows.Forms.TextBox> does not change.       If you want to change the size of the control as the user enters text, you can use a <xref:System.Windows.Forms.RichTextBox> control and use its <xref:System.Windows.Forms.RichTextBox.ContentsResized> event to change its size."
  example:
  - "This example assumes that you have a form with two text boxes, two buttons, and click events for each of the buttons. The example demonstrates the AutoSize property by setting it to `true` for one text box and `false` for the other. When you click one button the text boxes are filled with a smaller text, and when you click the other button the text boxes are filled with larger text. The text box that has AutoSize set to `true` expands in height to accommodate the larger text. The width does not change.  \n  \n [!code-cs[SystemWindowsFormsAutoSize#1](~/add/codesnippet/csharp/AutoSizeCS/Form1.cs#1)]\n [!code-vb[SystemWindowsFormsAutoSize#1](~/add/codesnippet/visualbasic/AutoSize/Form1.vb#1)]"
  syntax:
    content: public override bool AutoSize { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the height of the control automatically adjusts when the font is changed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.AutoSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.AutoSizeChanged
  id: AutoSizeChanged
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: AutoSizeChanged
  nameWithType: TextBoxBase.AutoSizeChanged
  fullName: System.Windows.Forms.TextBoxBase.AutoSizeChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This event is not relevant for this class."
  remarks: "This event is not relevant for this class."
  syntax:
    content: public event EventHandler AutoSizeChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.BackColor
  id: BackColor
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: BackColor
  nameWithType: TextBoxBase.BackColor
  fullName: System.Windows.Forms.TextBoxBase.BackColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the background color of the control."
  remarks: "You can use the BackColor property to change the background color of the text control to blend into the color scheme of your forms.       To change the color of the text within the control, use the <xref:System.Windows.Forms.TextBoxBase.ForeColor%2A> property. When setting the BackColor property of your text control, ensure that the color you choose does not cause the text of the control to disappear. For example, if the BackColor and <xref:System.Windows.Forms.TextBoxBase.ForeColor%2A> properties are both set to `Color.Black`, the text within your textbox control will not be visible.       This property might be over ridden if the <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> property of the <xref:System.Windows.Forms.TextBoxBase> is set to `true`."
  syntax:
    content: public override System.Drawing.Color BackColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> that represents the background of the control."
  overload: System.Windows.Forms.TextBoxBase.BackColor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.BackgroundImage
  id: BackgroundImage
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: BackgroundImage
  nameWithType: TextBoxBase.BackgroundImage
  fullName: System.Windows.Forms.TextBoxBase.BackgroundImage
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This property is not relevant for this class."
  remarks: "This property is not relevant for this class."
  syntax:
    content: public override System.Drawing.Image BackgroundImage { get; set; }
    return:
      type: System.Drawing.Image
      description: "The background image for the object."
  overload: System.Windows.Forms.TextBoxBase.BackgroundImage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.BackgroundImageChanged
  id: BackgroundImageChanged
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: BackgroundImageChanged
  nameWithType: TextBoxBase.BackgroundImageChanged
  fullName: System.Windows.Forms.TextBoxBase.BackgroundImageChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.TextBoxBase.BackgroundImage*> property changes. This event is not relevant for this class."
  remarks: "This event is not relevant for this class."
  syntax:
    content: public event EventHandler BackgroundImageChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.BackgroundImageLayout
  id: BackgroundImageLayout
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: BackgroundImageLayout
  nameWithType: TextBoxBase.BackgroundImageLayout
  fullName: System.Windows.Forms.TextBoxBase.BackgroundImageLayout
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This property is not relevant for this class."
  remarks: "This property is not relevant for this class."
  syntax:
    content: public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }
    return:
      type: System.Windows.Forms.ImageLayout
      description: "One of the <xref href=&quot;System.Windows.Forms.ImageLayout&quot;></xref> values."
  overload: System.Windows.Forms.TextBoxBase.BackgroundImageLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.BackgroundImageLayoutChanged
  id: BackgroundImageLayoutChanged
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: BackgroundImageLayoutChanged
  nameWithType: TextBoxBase.BackgroundImageLayoutChanged
  fullName: System.Windows.Forms.TextBoxBase.BackgroundImageLayoutChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.TextBoxBase.BackgroundImageLayout*> property changes. This event is not relevant for this class."
  remarks: "This event is not relevant for this class."
  syntax:
    content: public event EventHandler BackgroundImageLayoutChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.BorderStyle
  id: BorderStyle
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: BorderStyle
  nameWithType: TextBoxBase.BorderStyle
  fullName: System.Windows.Forms.TextBoxBase.BorderStyle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the border type of the text box control."
  remarks: "You can use the BorderStyle property to create borderless and flat style controls, in addition to the default three-dimensional control.      > [!NOTE] >  The derived class, <xref:System.Windows.Forms.RichTextBox>, does not support the `BorderStyle.FixedSingle` style. This style will cause the <xref:System.Windows.Forms.BorderStyle> to use the `BorderStyle.Fixed3D` style instead."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class, to create a text box that can properly display text using 20-point Arial with a single border. This example uses the <xref:System.Windows.Forms.TextBoxBase.PreferredHeight%2A> property to determine the appropriate height of the control after the font and BorderStyle have been assigned to the control.  \n  \n [!code-cs[Classic TextBoxBase.BorderStyle Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_71_1.cs)]\n [!code-cpp[Classic TextBoxBase.BorderStyle Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_71_1.cpp)]\n [!code-vb[Classic TextBoxBase.BorderStyle Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_71_1.vb)]"
  syntax:
    content: public System.Windows.Forms.BorderStyle BorderStyle { get; set; }
    return:
      type: System.Windows.Forms.BorderStyle
      description: "A <xref href=&quot;System.Windows.Forms.BorderStyle&quot;></xref> that represents the border type of the text box control. The default is <xref uid=&quot;langword_csharp_Fixed3D&quot; name=&quot;Fixed3D&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.BorderStyle*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "A value that is not within the range of valid values for the enumeration was assigned to the property."
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.BorderStyleChanged
  id: BorderStyleChanged
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: BorderStyleChanged
  nameWithType: TextBoxBase.BorderStyleChanged
  fullName: System.Windows.Forms.TextBoxBase.BorderStyleChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.TextBoxBase.BorderStyle*> property has changed."
  remarks: 'For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the BorderStyleChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.TextBoxBase>, such as a <xref:System.Windows.Forms.TextBox> or <xref:System.Windows.Forms.TextBoxBase>. Then name the instance `TextBoxBase1` and ensure that the event handler is associated with the BorderStyleChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#242](~/add/codesnippet/csharp/e-system.windows.forms.t_10_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#242](~/add/codesnippet/visualbasic/e-system.windows.forms.t_10_1.vb)]"
  syntax:
    content: public event EventHandler BorderStyleChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.CanEnableIme
  id: CanEnableIme
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: CanEnableIme
  nameWithType: TextBoxBase.CanEnableIme
  fullName: System.Windows.Forms.TextBoxBase.CanEnableIme
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the <xref:System.Windows.Forms.Control.ImeMode*> property can be set to an active value, to enable IME support."
  syntax:
    content: protected override bool CanEnableIme { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the <xref:System.Windows.Forms.TextBoxBase.ReadOnly*> property is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> or if this <xref href=&quot;System.Windows.Forms.TextBoxBase&quot;></xref> class is set to use a password mask character; otherwise, <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.CanEnableIme*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.CanUndo
  id: CanUndo
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: CanUndo
  nameWithType: TextBoxBase.CanUndo
  fullName: System.Windows.Forms.TextBoxBase.CanUndo
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a value indicating whether the user can undo the previous operation in a text box control."
  remarks: "If this method returns `true`, you can call the <xref:System.Windows.Forms.TextBoxBase.Undo%2A> method to undo the last operation in a text box. You can use this method in the <xref:System.Windows.Forms.MenuItem.Popup> event of a <xref:System.Windows.Forms.MenuItem>, or in code that manages the state of buttons on a <xref:System.Windows.Forms.ToolBar> to enable or disable the ability to undo the previous operation in a text box control."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class. It provides <xref:System.Windows.Forms.MenuItem.Click> event handlers for <xref:System.Windows.Forms.MenuItem> objects that perform Cut, Copy, Paste, and Undo operations. This example requires that a <xref:System.Windows.Forms.TextBox> control named `textBox1` has been created.  \n  \n [!code-cs[Classic TextBoxBase.CanUndo Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_153_1.cs)]\n [!code-cpp[Classic TextBoxBase.CanUndo Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_153_1.cpp)]\n [!code-vb[Classic TextBoxBase.CanUndo Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_153_1.vb)]"
  syntax:
    content: public bool CanUndo { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the user can undo the previous operation performed in a text box control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.CanUndo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Clear
  id: Clear
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Clear()
  nameWithType: TextBoxBase.Clear()
  fullName: System.Windows.Forms.TextBoxBase.Clear()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Clears all text from the text box control."
  remarks: "You can use this method to clear the contents of the control instead of assigning the <xref:System.Windows.Forms.TextBoxBase.Text%2A> property an empty string."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class, to create an event handler for the <xref:System.Windows.Forms.Control.TextChanged> event. The code within the event handler restricts data to numbers. After text has been entered in the control, the code determines if the text entered is a number. If the text is not a number, the code clears the text from the control and a <xref:System.Windows.Forms.MessageBox> is displayed to alert the user that only numbers are accepted. The example requires that a `Boolean` variable named `flag` and a <xref:System.Windows.Forms.TextBox> control called `textBox1` are defined outside of this method. This example demonstrates how to use a flag variable to avoid a cascading event in the <xref:System.Windows.Forms.Control.TextChanged> event.  \n  \n [!code-cpp[Classic TextBoxBase.Clear Example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_57_1.cpp)]\n [!code-vb[Classic TextBoxBase.Clear Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_57_1.vb)]\n [!code-cs[Classic TextBoxBase.Clear Example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_57_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Windows.Forms.TextBoxBase.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ClearUndo
  id: ClearUndo
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ClearUndo()
  nameWithType: TextBoxBase.ClearUndo()
  fullName: System.Windows.Forms.TextBoxBase.ClearUndo()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Clears information about the most recent operation from the undo buffer of the text box."
  remarks: "You can use this method to prevent an undo operation from repeating, based on the state of your application."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class. It provides <xref:System.Windows.Forms.MenuItem.Click> event handlers for <xref:System.Windows.Forms.MenuItem> objects that perform Cut, Copy, Paste, and Undo operations. This example requires that a <xref:System.Windows.Forms.TextBox> control named `textBox1` has been created.  \n  \n [!code-cs[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_62_1.cs)]\n [!code-vb[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_62_1.vb)]\n [!code-cpp[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_62_1.cpp)]"
  syntax:
    content: public void ClearUndo ();
    parameters: []
  overload: System.Windows.Forms.TextBoxBase.ClearUndo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Click
  id: Click
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Click
  nameWithType: TextBoxBase.Click
  fullName: System.Windows.Forms.TextBoxBase.Click
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the text box is clicked."
  remarks: 'For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - "The following code example demonstrates how to handle the Click event. To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.TextBox> control called TextBox1. This example requires that the event-handling method has been associated with the Click event.  \n  \n [!code-cs[System.Windows.Forms.TextBoxBaseScrolling#2](~/add/codesnippet/csharp/e-system.windows.forms.t_46_1.cs)]\n [!code-cpp[System.Windows.Forms.TextBoxBaseScrolling#2](~/add/codesnippet/cpp/e-system.windows.forms.t_46_1.cpp)]\n [!code-vb[System.Windows.Forms.TextBoxBaseScrolling#2](~/add/codesnippet/visualbasic/e-system.windows.forms.t_46_1.vb)]"
  syntax:
    content: public event EventHandler Click;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Copy
  id: Copy
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Copy()
  nameWithType: TextBoxBase.Copy()
  fullName: System.Windows.Forms.TextBoxBase.Copy()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Copies the current selection in the text box to the **Clipboard**."
  remarks: "You can use this method, instead of using the <xref:System.Windows.Forms.Clipboard> class, to copy text in the text box and place it in the **Clipboard**."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class. It provides <xref:System.Windows.Forms.MenuItem.Click> event handlers for <xref:System.Windows.Forms.MenuItem> objects that perform Cut, Copy, Paste, and Undo operations. This example requires that a <xref:System.Windows.Forms.TextBox> control named `textBox1` has been created.  \n  \n [!code-cs[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_0_1.cs)]\n [!code-vb[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_0_1.vb)]\n [!code-cpp[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_0_1.cpp)]"
  syntax:
    content: public void Copy ();
    parameters: []
  overload: System.Windows.Forms.TextBoxBase.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.CreateHandle
  id: CreateHandle
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: CreateHandle()
  nameWithType: TextBoxBase.CreateHandle()
  fullName: System.Windows.Forms.TextBoxBase.CreateHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Creates a handle for the control."
  syntax:
    content: protected override void CreateHandle ();
    parameters: []
  overload: System.Windows.Forms.TextBoxBase.CreateHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.CreateParams
  id: CreateParams
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: CreateParams
  nameWithType: TextBoxBase.CreateParams
  fullName: System.Windows.Forms.TextBoxBase.CreateParams
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the required creation parameters when the control handle is created."
  syntax:
    content: protected override System.Windows.Forms.CreateParams CreateParams { get; }
    return:
      type: System.Windows.Forms.CreateParams
      description: "A <xref href=&quot;System.Windows.Forms.CreateParams&quot;></xref> that contains the required creation parameters when the handle to the control is created."
  overload: System.Windows.Forms.TextBoxBase.CreateParams*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Cut
  id: Cut
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Cut()
  nameWithType: TextBoxBase.Cut()
  fullName: System.Windows.Forms.TextBoxBase.Cut()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Moves the current selection in the text box to the **Clipboard**."
  remarks: "This method will only cut text from the text box if text is selected in the control. You can use this method, instead of using the <xref:System.Windows.Forms.Clipboard> class, to copy text in the text box and move it to the **Clipboard**."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class. It provides <xref:System.Windows.Forms.MenuItem.Click> event handlers for <xref:System.Windows.Forms.MenuItem> objects that perform Cut, Copy, Paste, and Undo operations. This example requires that a <xref:System.Windows.Forms.TextBox> control named `textBox1` has been created.  \n  \n [!code-cs[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_47_1.cs)]\n [!code-vb[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_47_1.vb)]\n [!code-cpp[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_47_1.cpp)]"
  syntax:
    content: public void Cut ();
    parameters: []
  overload: System.Windows.Forms.TextBoxBase.Cut*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.DefaultCursor
  id: DefaultCursor
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: DefaultCursor
  nameWithType: TextBoxBase.DefaultCursor
  fullName: System.Windows.Forms.TextBoxBase.DefaultCursor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the default cursor for the control."
  remarks: "Override DefaultCursor to configure a default cursor for your control. This is more efficient than setting the cursor in the control&quot;s constructor, and gives automatic support for certain cursor-related designer functions."
  syntax:
    content: protected override System.Windows.Forms.Cursor DefaultCursor { get; }
    return:
      type: System.Windows.Forms.Cursor
      description: "An object of type <xref href=&quot;System.Windows.Forms.Cursor&quot;></xref> representing the current default cursor."
  overload: System.Windows.Forms.TextBoxBase.DefaultCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.DefaultSize
  id: DefaultSize
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: DefaultSize
  nameWithType: TextBoxBase.DefaultSize
  fullName: System.Windows.Forms.TextBoxBase.DefaultSize
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the default size of the control."
  syntax:
    content: protected override System.Drawing.Size DefaultSize { get; }
    return:
      type: System.Drawing.Size
      description: "The default <xref href=&quot;System.Drawing.Size&quot;></xref> of the control."
  overload: System.Windows.Forms.TextBoxBase.DefaultSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.DeselectAll
  id: DeselectAll
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: DeselectAll()
  nameWithType: TextBoxBase.DeselectAll()
  fullName: System.Windows.Forms.TextBoxBase.DeselectAll()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Specifies that the value of the <xref:System.Windows.Forms.TextBoxBase.SelectionLength*> property is zero so that no characters are selected in the control."
  syntax:
    content: public void DeselectAll ();
    parameters: []
  overload: System.Windows.Forms.TextBoxBase.DeselectAll*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.DoubleBuffered
  id: DoubleBuffered
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: DoubleBuffered
  nameWithType: TextBoxBase.DoubleBuffered
  fullName: System.Windows.Forms.TextBoxBase.DoubleBuffered
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether control drawing is done in a buffer before the control is displayed. This property is not relevant for this class."
  remarks: "This property is not relevant for this class."
  syntax:
    content: protected override bool DoubleBuffered { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to implement double buffering on the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.DoubleBuffered*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ForeColor
  id: ForeColor
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ForeColor
  nameWithType: TextBoxBase.ForeColor
  fullName: System.Windows.Forms.TextBoxBase.ForeColor
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the foreground color of the control."
  remarks: "You can use the ForeColor property to change the color of the text within the control to match the text of other controls on your form. You can also use this property to highlight a specific text box that contains an invalid value.       To change the background color of the control, use the <xref:System.Windows.Forms.TextBoxBase.BackColor%2A> property. When setting the ForeColor property of your text control, ensure that the color you choose does not cause the text of the control to disappear. For example, if the ForeColor and <xref:System.Windows.Forms.TextBoxBase.BackColor%2A> properties are both set to `Color.Black`, the text within your textbox control will not be visible.       This property might be over ridden if the <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> property of the <xref:System.Windows.Forms.TextBoxBase> is set to `true`."
  syntax:
    content: public override System.Drawing.Color ForeColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> that represents the control&quot;s foreground color."
  overload: System.Windows.Forms.TextBoxBase.ForeColor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)
  id: GetCharFromPosition(System.Drawing.Point)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: GetCharFromPosition(Point)
  nameWithType: TextBoxBase.GetCharFromPosition(Point)
  fullName: System.Windows.Forms.TextBoxBase.GetCharFromPosition(Point)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the character that is closest to the specified location within the control."
  remarks: "If the location specified in the `pt` parameter is outside the client area of the control, the first character of the string closest to the point specified in `pt` is returned. You can use this method to determine which characters are located near a specific point within the control. You can then use this value to perform operations on the text at that location.      > [!NOTE] >  If the specified location in the `pt` parameter is located on the right side of the client area of the control, the last character of the string closest to the point specified in `pt` is returned."
  syntax:
    content: public virtual char GetCharFromPosition (System.Drawing.Point pt);
    parameters:
    - id: pt
      type: System.Drawing.Point
      description: "The location from which to seek the nearest character."
    return:
      type: System.Char
      description: "The character at the specified location."
  overload: System.Windows.Forms.TextBoxBase.GetCharFromPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)
  id: GetCharIndexFromPosition(System.Drawing.Point)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: GetCharIndexFromPosition(Point)
  nameWithType: TextBoxBase.GetCharIndexFromPosition(Point)
  fullName: System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(Point)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the index of the character nearest to the specified location."
  remarks: "This method returns the character index that is closest to the position specified in the `pt` parameter. The character index is a zero-based index of text in the control, including spaces. You can use this method to determine where in the text the user has the mouse over by passing the mouse coordinates to this method. This can be useful if you want to perform tasks when the user rests the mouse pointer over a word in the text of the control.      > [!IMPORTANT] >  If the specified location is not within the client rectangle of the control, or is beyond the last character in the control, the return value is the index of the last character."
  syntax:
    content: public virtual int GetCharIndexFromPosition (System.Drawing.Point pt);
    parameters:
    - id: pt
      type: System.Drawing.Point
      description: "The location to search."
    return:
      type: System.Int32
      description: "The zero-based character index at the specified location."
  overload: System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.GetFirstCharIndexFromLine(System.Int32)
  id: GetFirstCharIndexFromLine(System.Int32)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: GetFirstCharIndexFromLine(Int32)
  nameWithType: TextBoxBase.GetFirstCharIndexFromLine(Int32)
  fullName: System.Windows.Forms.TextBoxBase.GetFirstCharIndexFromLine(Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the index of the first character of a given line."
  remarks: "Line numbering in the text box starts at zero. If the `lineNumber` parameter is greater than the last line in the text box, GetFirstCharIndexFromLine returns -1.       GetFirstCharIndexFromLine returns the first character index of a physical line. The physical line is the displayed line, not the assigned line. The number of displayed lines can be greater than the number of assigned lines due to word wrap. For example, if you assign two long lines to a <xref:System.Windows.Forms.RichTextBox> control and set <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> and <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> to `true`, the two long assigned lines result in four physical (or displayed lines)."
  syntax:
    content: public int GetFirstCharIndexFromLine (int lineNumber);
    parameters:
    - id: lineNumber
      type: System.Int32
      description: "The line for which to get the index of its first character."
    return:
      type: System.Int32
      description: "The zero-based index of the first character in the specified line."
  overload: System.Windows.Forms.TextBoxBase.GetFirstCharIndexFromLine*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value of the <code>lineNumber</code> parameter is less than zero."
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.GetFirstCharIndexOfCurrentLine
  id: GetFirstCharIndexOfCurrentLine
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: GetFirstCharIndexOfCurrentLine()
  nameWithType: TextBoxBase.GetFirstCharIndexOfCurrentLine()
  fullName: System.Windows.Forms.TextBoxBase.GetFirstCharIndexOfCurrentLine()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the index of the first character of the current line."
  syntax:
    content: public int GetFirstCharIndexOfCurrentLine ();
    parameters: []
    return:
      type: System.Int32
      description: "The zero-based character index in the current line."
  overload: System.Windows.Forms.TextBoxBase.GetFirstCharIndexOfCurrentLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.GetLineFromCharIndex(System.Int32)
  id: GetLineFromCharIndex(System.Int32)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: GetLineFromCharIndex(Int32)
  nameWithType: TextBoxBase.GetLineFromCharIndex(Int32)
  fullName: System.Windows.Forms.TextBoxBase.GetLineFromCharIndex(Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the line number from the specified character position within the text of the control."
  remarks: "This method enables you to determine the line number based on the character index specified in the `index` parameter of the method. The first line of text in the control returns the value zero. The GetLineFromCharIndex method returns the physical line number where the indexed character is located within the control. For example, if a portion of the first logical line of text in the control wraps to the next line, the GetLineFromCharIndex method returns 1 if the character at the specified character index has wrapped to the second physical line. If <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> is set to `false`, no portion of the line wraps to the next, and the method returns 0 for the specified character index. You can use this method to determine which line a specific character index is located within. For example, after calling the <xref:System.Windows.Forms.RichTextBox.Find%2A> method to search for text, you can obtain the character index to where the search results are found. You can call this method with the character index returned by the <xref:System.Windows.Forms.RichTextBox.Find%2A> method to determine which line the word was found.      > [!NOTE] >  If the character index specified in the `index` parameter is beyond the available number of lines contained within the control, the last line number is returned."
  syntax:
    content: public virtual int GetLineFromCharIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The character index position to search."
    return:
      type: System.Int32
      description: "The zero-based line number in which the character index is located."
  overload: System.Windows.Forms.TextBoxBase.GetLineFromCharIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)
  id: GetPositionFromCharIndex(System.Int32)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: GetPositionFromCharIndex(Int32)
  nameWithType: TextBoxBase.GetPositionFromCharIndex(Int32)
  fullName: System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the location within the control at the specified character index."
  remarks: "This method enables you to determine where in the control a specific character index is located. You can use this method for such tasks as displaying shortcut menu items or help information for a word in the control. For example, if you wanted to display a menu of options to the user when the user right clicks on a word in the control, you can use this method to determine the position of the word to properly display a <xref:System.Windows.Forms.ContextMenu> control."
  syntax:
    content: public virtual System.Drawing.Point GetPositionFromCharIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The index of the character for which to retrieve the location."
    return:
      type: System.Drawing.Point
      description: "The location of the specified character within the client rectangle of the control."
  overload: System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.HideSelection
  id: HideSelection
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: HideSelection
  nameWithType: TextBoxBase.HideSelection
  fullName: System.Windows.Forms.TextBoxBase.HideSelection
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the selected text in the text box control remains highlighted when the control loses focus."
  remarks: "You can use this property to keep text highlighted in a text box control while another form or a dialog box has focus, such as a spelling checker dialog box."
  example:
  - "The following code example demonstrates how to use the HideSelection property. To run the example, paste the following code in a form. Call the `InitializeTextBox` method in the form's constructor or `Load` method.  \n  \n [!code-cs[System.Windows.Forms.TextBoxBaseScrolling#3](~/add/codesnippet/csharp/p-system.windows.forms.t_76_1.cs)]\n [!code-cpp[System.Windows.Forms.TextBoxBaseScrolling#3](~/add/codesnippet/cpp/p-system.windows.forms.t_76_1.cpp)]\n [!code-vb[System.Windows.Forms.TextBoxBaseScrolling#3](~/add/codesnippet/visualbasic/p-system.windows.forms.t_76_1.vb)]"
  syntax:
    content: public bool HideSelection { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the selected text does not appear highlighted when the text box control loses focus; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>, if the selected text remains highlighted when the text box control loses focus. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.HideSelection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.HideSelectionChanged
  id: HideSelectionChanged
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: HideSelectionChanged
  nameWithType: TextBoxBase.HideSelectionChanged
  fullName: System.Windows.Forms.TextBoxBase.HideSelectionChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.TextBoxBase.HideSelection*> property has changed."
  remarks: 'For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the HideSelectionChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.TextBoxBase>, such as a <xref:System.Windows.Forms.TextBox> or <xref:System.Windows.Forms.TextBoxBase>. Then name the instance `TextBoxBase1` and ensure that the event handler is associated with the HideSelectionChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#245](~/add/codesnippet/csharp/e-system.windows.forms.t_114_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#245](~/add/codesnippet/visualbasic/e-system.windows.forms.t_114_1.vb)]"
  syntax:
    content: public event EventHandler HideSelectionChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ImeModeBase
  id: ImeModeBase
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ImeModeBase
  nameWithType: TextBoxBase.ImeModeBase
  fullName: System.Windows.Forms.TextBoxBase.ImeModeBase
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the Input Method Editor (IME) mode of a control."
  syntax:
    content: protected override System.Windows.Forms.ImeMode ImeModeBase { get; set; }
    return:
      type: System.Windows.Forms.ImeMode
      description: "The IME mode of the control."
  overload: System.Windows.Forms.TextBoxBase.ImeModeBase*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.IsInputKey(System.Windows.Forms.Keys)
  id: IsInputKey(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: IsInputKey(Keys)
  nameWithType: TextBoxBase.IsInputKey(Keys)
  fullName: System.Windows.Forms.TextBoxBase.IsInputKey(Keys)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Determines whether the specified key is an input key or a special key that requires preprocessing."
  remarks: "The IsInputKey method returns `true` when the `keyData` parameter includes the <xref:System.Windows.Forms.Keys> value and the <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A> property is `true`. IsInputKey returns `false` if `keyData` contains both <xref:System.Windows.Forms.Keys> and <xref:System.Windows.Forms.Keys>."
  syntax:
    content: protected override bool IsInputKey (System.Windows.Forms.Keys keyData);
    parameters:
    - id: keyData
      type: System.Windows.Forms.Keys
      description: "One of the Keys value."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified key is an input key; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.IsInputKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Lines
  id: Lines
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Lines
  nameWithType: TextBoxBase.Lines
  fullName: System.Windows.Forms.TextBoxBase.Lines
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the lines of text in a text box control."
  remarks: "Each element in the array becomes a line of text in the text box control. If the <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> property of the text box control is set to `true` and a newline character appears in the text, the text following the newline character is added to a new element in the array and displayed on a separate line.      > [!NOTE] >  By default, the collection of lines is a read-only copy of the lines in the <xref:System.Windows.Forms.TextBox>. To get a writable collection of lines, use code similar to the following: `textBox1.Lines = new string[] { &quot;abcd&quot; };`"
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class, to extract all strings of text from a multiline text box control and displays them using the <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=fullName> method. This example requires that a <xref:System.Windows.Forms.TextBox> control has been created, named `textBox1`, and that it has been filled with lines of text.  \n  \n [!code-cs[Classic TextBoxBase.Lines Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_111_1.cs)]\n [!code-vb[Classic TextBoxBase.Lines Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_111_1.vb)]\n [!code-cpp[Classic TextBoxBase.Lines Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_111_1.cpp)]"
  syntax:
    content: public string[] Lines { get; set; }
    return:
      type: System.String[]
      description: "An array of strings that contains the text in a text box control."
  overload: System.Windows.Forms.TextBoxBase.Lines*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.MaxLength
  id: MaxLength
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: MaxLength
  nameWithType: TextBoxBase.MaxLength
  fullName: System.Windows.Forms.TextBoxBase.MaxLength
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the maximum number of characters the user can type or paste into the text box control."
  remarks: "You can use this property to restrict the length of text entered in the control for values such as postal codes and telephone numbers, or to restrict the length of text entered when the data is to be entered in a database. You can limit the text entered into the control to the maximum length of the corresponding field in the database.      > [!NOTE] >  In code, you can set the value of the <xref:System.Windows.Forms.TextBoxBase.Text%2A> property to a value that has a length greater than the value specified by the MaxLength property. This property only affects text entered into the control at run time."
  example:
  - "The following code example uses the derived class, <xref:System.Windows.Forms.TextBox>, to create a text box that is used to accept a password. This example uses the <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> property to change all characters typed to uppercase and the MaxLength property to restrict the password length to eight characters. This example also uses the <xref:System.Windows.Forms.TextBox.TextAlign%2A> property to center the password in the <xref:System.Windows.Forms.TextBox> control.  \n  \n [!code-cs[Classic TextBoxBase.MaxLength Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_14_1.cs)]\n [!code-cpp[Classic TextBoxBase.MaxLength Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_14_1.cpp)]\n [!code-vb[Classic TextBoxBase.MaxLength Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_14_1.vb)]"
  syntax:
    content: public virtual int MaxLength { get; set; }
    return:
      type: System.Int32
      description: "The number of characters that can be entered into the control. The default is 32767."
  overload: System.Windows.Forms.TextBoxBase.MaxLength*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value assigned to the property is less than 0."
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Modified
  id: Modified
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Modified
  nameWithType: TextBoxBase.Modified
  fullName: System.Windows.Forms.TextBoxBase.Modified
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value that indicates that the text box control has been modified by the user since the control was created or its contents were last set."
  remarks: "You can use this property to determine if the user has modified the contents of the text box control. You can also set this property in code to indicate that changes were made to the text box control by the application. This property can be used by validation and data-saving methods to determine if changes were made in a text box control so the changed contents can be validated or saved.       If you change the <xref:System.Windows.Forms.TextBoxBase.Text%2A> property programmatically, the Modified property reverts to `false`. This does not raise the <xref:System.Windows.Forms.TextBoxBase.ModifiedChanged> event."
  example:
  - "The following code example uses the <xref:System.Windows.Forms.Control.TextChanged> event for a <xref:System.Windows.Forms.TextBox>, a derived class, to determine if the contents of the <xref:System.Windows.Forms.TextBox> control have changed since the control was filled with data. The example uses a string to store the original contents of the control and compares it against the contents of the <xref:System.Windows.Forms.TextBox> to determine if the contents have changed. If the contents have changed, the Modified property is set to `true`. Otherwise, it is reset to `false`. This example requires that a <xref:System.Windows.Forms.TextBox> control named `textBox1` has been created and that a `String` variable named `originalText` has been created to store the original text for the <xref:System.Windows.Forms.TextBox> control.  \n  \n [!code-cpp[Classic TextBoxBase.Modified Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_45_1.cpp)]\n [!code-cs[Classic TextBoxBase.Modified Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_45_1.cs)]\n [!code-vb[Classic TextBoxBase.Modified Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_45_1.vb)]"
  syntax:
    content: public bool Modified { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control&quot;s contents have been modified; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.Modified*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ModifiedChanged
  id: ModifiedChanged
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ModifiedChanged
  nameWithType: TextBoxBase.ModifiedChanged
  fullName: System.Windows.Forms.TextBoxBase.ModifiedChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.TextBoxBase.Modified*> property has changed."
  remarks: "If you change the <xref:System.Windows.Forms.TextBoxBase.Text%2A> property programmatically, the <xref:System.Windows.Forms.TextBoxBase.Modified%2A> property reverts to `false`. This does not raise the ModifiedChanged event.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ModifiedChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.TextBoxBase>, such as a <xref:System.Windows.Forms.TextBox> or <xref:System.Windows.Forms.TextBoxBase>. Then name the instance `TextBoxBase1` and ensure that the event handler is associated with the ModifiedChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#246](~/add/codesnippet/csharp/e-system.windows.forms.t_141_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#246](~/add/codesnippet/visualbasic/e-system.windows.forms.t_141_1.vb)]"
  syntax:
    content: public event EventHandler ModifiedChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.MouseClick
  id: MouseClick
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: MouseClick
  nameWithType: TextBoxBase.MouseClick
  fullName: System.Windows.Forms.TextBoxBase.MouseClick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is clicked by the mouse."
  remarks: "The <xref:System.Windows.Forms.RichTextBox> control does not raise a <xref:System.Windows.Forms.TextBoxBase.Click> event for right clicks. The MouseClick event provides the functional equivalent.       For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.TextBoxBase>, such as a <xref:System.Windows.Forms.TextBox> or <xref:System.Windows.Forms.TextBoxBase>. Then name the instance `TextBoxBase1` and ensure that the event handler is associated with the MouseClick event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#244](~/add/codesnippet/csharp/e-system.windows.forms.t_39_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#244](~/add/codesnippet/visualbasic/e-system.windows.forms.t_39_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.MouseEventHandler MouseClick;
    return:
      type: System.Windows.Forms.MouseEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Multiline
  id: Multiline
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Multiline
  nameWithType: TextBoxBase.Multiline
  fullName: System.Windows.Forms.TextBoxBase.Multiline
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether this is a multiline text box control."
  remarks: "A multiline text box allows you to display more than one line of text in the control. If the <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> property is set to `true`, text entered into the multiline text box is wrapped to the next line in the control. If the <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> property is set to `false`, text entered into the multiline text box control will be displayed on the same line until a newline character is entered.       The following can be used as newline characters:      -   <xref:System.Environment.NewLine%2A?displayProperty=fullName>      -   ControlChars.CrLf      -   vbCrLf (Visual Basic only)       You can add scroll bars to a text box using the <xref:System.Windows.Forms.TextBox.ScrollBars%2A> property to display horizontal and/or vertical scroll bars. This allows the user to scroll through the text that extends beyond the dimensions of the control.      > [!NOTE] >  Because the default value of the Multiline property is `false`, the default size of a <xref:System.Windows.Forms.TextBox> will be in accordance with the font size even if you resize the <xref:System.Windows.Forms.TextBox>. To get a consistent size for your <xref:System.Windows.Forms.TextBox>, set its <xref:System.Windows.Forms.TextBox.Multiline%2A> property to `true`.      > [!NOTE] >  On Japanese operating systems, if the Multiline property is set to `true`, setting the <xref:System.Windows.Forms.TextBox.PasswordChar%2A> property will display the text of the password, thus compromising system security. Therefore, on Japanese operating systems, set the Multiline property to `false` if you set the <xref:System.Windows.Forms.TextBox.PasswordChar%2A> property.      > [!NOTE] >  This property is set to `false` by default for all derived classes, with the exception of the <xref:System.Windows.Forms.RichTextBox> control.       For a <xref:System.Windows.Forms.RichTextBox> control, the <xref:System.Windows.Forms.RichTextBox.Multiline%2A?displayProperty=fullName> property affects whether or not the control will automatically resize, as follows:      -   If <xref:System.Windows.Forms.RichTextBox.AutoSize%2A?displayProperty=fullName> is set to `true` and <xref:System.Windows.Forms.RichTextBox.Multiline%2A?displayProperty=fullName> is set to `true`, <xref:System.Windows.Forms.RichTextBox> will not automatically resize.      -   If <xref:System.Windows.Forms.RichTextBox.AutoSize%2A?displayProperty=fullName> is set to `true` and <xref:System.Windows.Forms.RichTextBox.Multiline%2A?displayProperty=fullName> is set to `false`, <xref:System.Windows.Forms.RichTextBox> will automatically resize."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class, to create a multiline <xref:System.Windows.Forms.TextBox> control with vertical scroll bars. This example also uses the <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, and <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> properties to make the multiline text box control useful for creating text documents.  \n  \n [!code-cpp[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_170_1.cpp)]\n [!code-cs[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_170_1.cs)]\n [!code-vb[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_170_1.vb)]"
  syntax:
    content: public virtual bool Multiline { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control is a multiline text box control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.Multiline*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.MultilineChanged
  id: MultilineChanged
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: MultilineChanged
  nameWithType: TextBoxBase.MultilineChanged
  fullName: System.Windows.Forms.TextBoxBase.MultilineChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.TextBoxBase.Multiline*> property has changed."
  remarks: 'For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MultilineChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.TextBoxBase>, such as a <xref:System.Windows.Forms.TextBox> or <xref:System.Windows.Forms.TextBoxBase>. Then name the instance `TextBoxBase1` and ensure that the event handler is associated with the MultilineChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#247](~/add/codesnippet/csharp/e-system.windows.forms.t_111_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#247](~/add/codesnippet/visualbasic/e-system.windows.forms.t_111_1.vb)]"
  syntax:
    content: public event EventHandler MultilineChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged(System.EventArgs)
  id: OnAcceptsTabChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnAcceptsTabChanged(EventArgs)
  nameWithType: TextBoxBase.OnAcceptsTabChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.TextBoxBase.AcceptsTabChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnAcceptsTabChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnAcceptsTabChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnBorderStyleChanged(System.EventArgs)
  id: OnBorderStyleChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnBorderStyleChanged(EventArgs)
  nameWithType: TextBoxBase.OnBorderStyleChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnBorderStyleChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.TextBoxBase.BorderStyleChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnBorderStyleChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnBorderStyleChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnBorderStyleChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnFontChanged(System.EventArgs)
  id: OnFontChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnFontChanged(EventArgs)
  nameWithType: TextBoxBase.OnFontChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnFontChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.FontChanged&quot;></xref> event."
  syntax:
    content: protected override void OnFontChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnFontChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnHandleCreated(System.EventArgs)
  id: OnHandleCreated(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnHandleCreated(EventArgs)
  nameWithType: TextBoxBase.OnHandleCreated(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnHandleCreated(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.HandleCreated&quot;></xref> event."
  syntax:
    content: protected override void OnHandleCreated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnHandleCreated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnHandleDestroyed(System.EventArgs)
  id: OnHandleDestroyed(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnHandleDestroyed(EventArgs)
  nameWithType: TextBoxBase.OnHandleDestroyed(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnHandleDestroyed(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.HandleDestroyed&quot;></xref> event."
  syntax:
    content: protected override void OnHandleDestroyed (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnHandleDestroyed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnHideSelectionChanged(System.EventArgs)
  id: OnHideSelectionChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnHideSelectionChanged(EventArgs)
  nameWithType: TextBoxBase.OnHideSelectionChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnHideSelectionChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raise the <xref href=&quot;System.Windows.Forms.TextBoxBase.HideSelectionChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnHideSelectionChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnHideSelectionChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnHideSelectionChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnModifiedChanged(System.EventArgs)
  id: OnModifiedChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnModifiedChanged(EventArgs)
  nameWithType: TextBoxBase.OnModifiedChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnModifiedChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.TextBoxBase.ModifiedChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnModifiedChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnModifiedChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnModifiedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)
  id: OnMouseUp(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnMouseUp(MouseEventArgs)
  nameWithType: TextBoxBase.OnMouseUp(MouseEventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnMouseUp(MouseEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.MouseUp&quot;></xref> event."
  syntax:
    content: protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs mevent);
    parameters:
    - id: mevent
      type: System.Windows.Forms.MouseEventArgs
      description: "The event data."
  overload: System.Windows.Forms.TextBoxBase.OnMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnMultilineChanged(System.EventArgs)
  id: OnMultilineChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnMultilineChanged(EventArgs)
  nameWithType: TextBoxBase.OnMultilineChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnMultilineChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.TextBoxBase.MultilineChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnMultilineChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnMultilineChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnMultilineChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnPaddingChanged(System.EventArgs)
  id: OnPaddingChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnPaddingChanged(EventArgs)
  nameWithType: TextBoxBase.OnPaddingChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnPaddingChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This method is not relevant for this class."
  remarks: "This method is not relevant for this class."
  syntax:
    content: protected override void OnPaddingChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnPaddingChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnReadOnlyChanged(System.EventArgs)
  id: OnReadOnlyChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnReadOnlyChanged(EventArgs)
  nameWithType: TextBoxBase.OnReadOnlyChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnReadOnlyChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.TextBoxBase.ReadOnlyChanged&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnReadOnlyChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected virtual void OnReadOnlyChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnReadOnlyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.OnTextChanged(System.EventArgs)
  id: OnTextChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: OnTextChanged(EventArgs)
  nameWithType: TextBoxBase.OnTextChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnTextChanged(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Raises the <xref href=&quot;System.Windows.Forms.Control.TextChanged&quot;></xref> event."
  syntax:
    content: protected override void OnTextChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "An <xref:System.EventArgs> that contains the event data."
  overload: System.Windows.Forms.TextBoxBase.OnTextChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Padding
  id: Padding
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Padding
  nameWithType: TextBoxBase.Padding
  fullName: System.Windows.Forms.TextBoxBase.Padding
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This property is not relevant for this class."
  remarks: "This property is not relevant for this class."
  syntax:
    content: public System.Windows.Forms.Padding Padding { get; set; }
    return:
      type: System.Windows.Forms.Padding
      description: "A <xref href=&quot;System.Windows.Forms.Padding&quot;></xref> value."
  overload: System.Windows.Forms.TextBoxBase.Padding*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.PaddingChanged
  id: PaddingChanged
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: PaddingChanged
  nameWithType: TextBoxBase.PaddingChanged
  fullName: System.Windows.Forms.TextBoxBase.PaddingChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "This event is not relevant for this class."
  remarks: "This event is not relevant for this class."
  syntax:
    content: public event EventHandler PaddingChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Paint
  id: Paint
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Paint
  nameWithType: TextBoxBase.Paint
  fullName: System.Windows.Forms.TextBoxBase.Paint
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the control is redrawn. This event is not relevant for this class."
  remarks: "This event is not relevant for this class."
  syntax:
    content: public event System.Windows.Forms.PaintEventHandler Paint;
    return:
      type: System.Windows.Forms.PaintEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Paste
  id: Paste
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Paste()
  nameWithType: TextBoxBase.Paste()
  fullName: System.Windows.Forms.TextBoxBase.Paste()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Replaces the current selection in the text box with the contents of the **Clipboard**."
  remarks: "The Paste method will only paste text into the control if text is currently stored in the **Clipboard**."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class. It provides <xref:System.Windows.Forms.MenuItem.Click> event handlers for <xref:System.Windows.Forms.MenuItem> objects that perform Cut, Copy, Paste, and Undo operations. This example requires that a <xref:System.Windows.Forms.TextBox> control named `textBox1` has been created.  \n  \n [!code-cs[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_52_1.cs)]\n [!code-vb[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_52_1.vb)]\n [!code-cpp[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_52_1.cpp)]"
  syntax:
    content: public void Paste ();
    parameters: []
  overload: System.Windows.Forms.TextBoxBase.Paste*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.PreferredHeight
  id: PreferredHeight
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: PreferredHeight
  nameWithType: TextBoxBase.PreferredHeight
  fullName: System.Windows.Forms.TextBoxBase.PreferredHeight
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the preferred height for a text box."
  remarks: "The size returned by this property is based on the font height and border style of the text box. You can use this property to determine the appropriate size of the text box to ensure that text is properly displayed in the control. The value returned by this property is in pixels.       The value of PreferredHeight represents the minimum height the text box must have in order to display a single line of text without clipping the text on the top or bottom. This value is the same whether the <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> property is set to `true` or `false`."
  syntax:
    content: public int PreferredHeight { get; }
    return:
      type: System.Int32
      description: "The preferred height of a text box."
  overload: System.Windows.Forms.TextBoxBase.PreferredHeight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  id: ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ProcessCmdKey(Message,Keys)
  nameWithType: TextBoxBase.ProcessCmdKey(Message,Keys)
  fullName: System.Windows.Forms.TextBoxBase.ProcessCmdKey(Message,Keys)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processes a command key."
  syntax:
    content: protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);
    parameters:
    - id: msg
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;></xref>, passed by reference that represents the window message to process."
    - id: keyData
      type: System.Windows.Forms.Keys
      description: "One of the <xref href=&quot;System.Windows.Forms.Keys&quot;></xref> values that represents the shortcut key to process."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the command key was processed by the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.ProcessCmdKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ProcessDialogKey(System.Windows.Forms.Keys)
  id: ProcessDialogKey(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ProcessDialogKey(Keys)
  nameWithType: TextBoxBase.ProcessDialogKey(Keys)
  fullName: System.Windows.Forms.TextBoxBase.ProcessDialogKey(Keys)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processes a dialog key."
  syntax:
    content: protected override bool ProcessDialogKey (System.Windows.Forms.Keys keyData);
    parameters:
    - id: keyData
      type: System.Windows.Forms.Keys
      description: "One of the <xref href=&quot;System.Windows.Forms.Keys&quot;></xref> values that represents the key to process."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the key was processed by the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.ProcessDialogKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ReadOnly
  id: ReadOnly
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ReadOnly
  nameWithType: TextBoxBase.ReadOnly
  fullName: System.Windows.Forms.TextBoxBase.ReadOnly
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether text in the text box is read-only."
  remarks: "When this property is set to `true`, the contents of the control cannot be changed by the user at runtime. With this property set to `true`, you can still set the value of the <xref:System.Windows.Forms.TextBoxBase.Text%2A> property in code. You can use this feature instead of disabling the control with the <xref:System.Windows.Forms.Control.Enabled%2A> property to allow the contents to be copied and ToolTips to be shown."
  syntax:
    content: public bool ReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the text box is read-only; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.ReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ReadOnlyChanged
  id: ReadOnlyChanged
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ReadOnlyChanged
  nameWithType: TextBoxBase.ReadOnlyChanged
  fullName: System.Windows.Forms.TextBoxBase.ReadOnlyChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Occurs when the value of the <xref:System.Windows.Forms.TextBoxBase.ReadOnly*> property has changed."
  remarks: 'For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the ReadOnlyChanged event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.TextBoxBase>, such as a <xref:System.Windows.Forms.TextBox> or <xref:System.Windows.Forms.TextBoxBase>. Then name the instance `TextBoxBase1` and ensure that the event handler is associated with the ReadOnlyChanged event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#248](~/add/codesnippet/csharp/e-system.windows.forms.t_93_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#248](~/add/codesnippet/visualbasic/e-system.windows.forms.t_93_1.vb)]"
  syntax:
    content: public event EventHandler ReadOnlyChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ScrollToCaret
  id: ScrollToCaret
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ScrollToCaret()
  nameWithType: TextBoxBase.ScrollToCaret()
  fullName: System.Windows.Forms.TextBoxBase.ScrollToCaret()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Scrolls the contents of the control to the current caret position."
  remarks: "This method enables you to scroll the contents of the control until the caret is within the visible region of the control. If the caret is positioned below the visible region of the control, the ScrollToCaret method will scroll the contents of the control until the caret is visible at the bottom of the control. If the caret is positioned above the visible region of the control, this method scrolls the contents of the control until the caret is visible at the top of the control. You can use this method in a multiline text box to ensure that the current text entry point is within the visible region of the control.      > [!NOTE] >  This method has no effect if the control does not have focus or if the caret is already positioned in the visible region of the control."
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.Keys> enumeration and the ScrollToCaret method to ensure that the text insertion point, represented by the caret, is always visible on the screen after the ENTER key has been pressed. To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.TextBox> control called `TextBox1` and a <xref:System.Windows.Forms.RichTextBox> control called `RichTextBox1`. This example requires that the event-handling method has been associated with the <xref:System.Windows.Forms.Control.KeyDown> event.  \n  \n [!code-cs[System.Windows.Forms.TextBoxBaseScrolling#1](~/add/codesnippet/csharp/m-system.windows.forms.t_50_1.cs)]\n [!code-cpp[System.Windows.Forms.TextBoxBaseScrolling#1](~/add/codesnippet/cpp/m-system.windows.forms.t_50_1.cpp)]\n [!code-vb[System.Windows.Forms.TextBoxBaseScrolling#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_50_1.vb)]"
  syntax:
    content: public void ScrollToCaret ();
    parameters: []
  overload: System.Windows.Forms.TextBoxBase.ScrollToCaret*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)
  id: Select(System.Int32,System.Int32)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Select(Int32,Int32)
  nameWithType: TextBoxBase.Select(Int32,Int32)
  fullName: System.Windows.Forms.TextBoxBase.Select(Int32,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Selects a range of text in the text box."
  remarks: "If you want to set the start position to the first character in the control&quot;s text, set the `start` parameter to 0. You can use this method to select a substring of text, such as when searching through the text of the control and replacing information.      > [!NOTE] >  You can programmatically move the caret within the text box by setting the `start` parameter to the position within the text box where you want the caret to move to and set the `length` parameter to a value of zero (0). The text box must have focus in order for the caret to be moved.      > [!NOTE] >  If this method is called without any parameters, an alternative method is used. This alternative method inherits from the <xref:System.Windows.Forms.Control> class. When called, it sets the input focus to the control and selects the contents of the control. For more information, see the <xref:System.Windows.Forms.Control.Select%2A?displayProperty=fullName> method."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class, to search the contents of the control for the instance of the word \"fox\". If found, the code selects the word in the control using the Select method. This example requires that a <xref:System.Windows.Forms.TextBox> named `textBox1` has been created and its <xref:System.Windows.Forms.TextBoxBase.Text%2A> property contains the sentence \"The quick brown fox jumps over the lazy dog.\"  \n  \n [!code-vb[Classic TextBoxBase.Select Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_54_1.vb)]\n [!code-cpp[Classic TextBoxBase.Select Example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_54_1.cpp)]\n [!code-cs[Classic TextBoxBase.Select Example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_54_1.cs)]"
  syntax:
    content: public void Select (int start, int length);
    parameters:
    - id: start
      type: System.Int32
      description: "The position of the first character in the current text selection within the text box."
    - id: length
      type: System.Int32
      description: "The number of characters to select."
  overload: System.Windows.Forms.TextBoxBase.Select*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value of the <code>start</code> parameter is less than zero."
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.SelectAll
  id: SelectAll
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: SelectAll()
  nameWithType: TextBoxBase.SelectAll()
  fullName: System.Windows.Forms.TextBoxBase.SelectAll()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Selects all text in the text box."
  remarks: "This method enables you to select all text within the control. You can use this method in conjunction with the <xref:System.Windows.Forms.TextBoxBase.Cut%2A> method, which requires text to be selected in the control, to cut the entire contents of the control and paste them into the **Clipboard**."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class, to determine if any text is selected in the control. If no text is selected, a call is made to the SelectAll method before copying the contents of the control to the **Clipboard**. This example requires that a <xref:System.Windows.Forms.TextBox> has been created named `textBox1`.  \n  \n [!code-cpp[Classic TextBoxBase.SelectAll Example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_37_1.cpp)]\n [!code-vb[Classic TextBoxBase.SelectAll Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_37_1.vb)]\n [!code-cs[Classic TextBoxBase.SelectAll Example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_37_1.cs)]"
  syntax:
    content: public void SelectAll ();
    parameters: []
  overload: System.Windows.Forms.TextBoxBase.SelectAll*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.SelectedText
  id: SelectedText
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: SelectedText
  nameWithType: TextBoxBase.SelectedText
  fullName: System.Windows.Forms.TextBoxBase.SelectedText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating the currently selected text in the control."
  remarks: "You can assign text to this property to change the text currently selected in the text box. If no text is currently selected in the text box, this property returns a zero-length string."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class. It provides <xref:System.Windows.Forms.MenuItem.Click> event handlers for <xref:System.Windows.Forms.MenuItem> objects that perform Cut, Copy, Paste, and Undo operations. This example requires that a <xref:System.Windows.Forms.TextBox> control named `textBox1` has been created.  \n  \n [!code-cpp[Classic TextBoxBase.SelectedText Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_21_1.cpp)]\n [!code-vb[Classic TextBoxBase.SelectedText Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_21_1.vb)]\n [!code-cs[Classic TextBoxBase.SelectedText Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_21_1.cs)]"
  syntax:
    content: public virtual string SelectedText { get; set; }
    return:
      type: System.String
      description: "A string that represents the currently selected text in the text box."
  overload: System.Windows.Forms.TextBoxBase.SelectedText*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.SelectionLength
  id: SelectionLength
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: SelectionLength
  nameWithType: TextBoxBase.SelectionLength
  fullName: System.Windows.Forms.TextBoxBase.SelectionLength
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the number of characters selected in the text box."
  remarks: "You can use this property to determine if any characters are currently selected in the text box control before performing operations on the selected text. When the value of the SelectionLength property is set to a value that is larger than the number of characters within the text of the control, the value of the SelectionLength property is set to the entire length of text within the control minus the value of the <xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A> property (if any value is specified for the <xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A> property).      > [!NOTE] >  You can programmatically move the caret within the text box by setting the <xref:System.Windows.Forms.TextBoxBase.SelectionStart%2A> to the position within the text box where you want the caret to move to and set the SelectionLength property to a value of zero (0). The text box must have focus in order for the caret to be moved."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class. It provides <xref:System.Windows.Forms.MenuItem.Click> event handlers for <xref:System.Windows.Forms.MenuItem> objects that perform Cut, Copy, Paste, and Undo operations. This example requires that a <xref:System.Windows.Forms.TextBox> control named `textBox1` has been created.  \n  \n [!code-cs[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_216_1.cs)]\n [!code-vb[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_216_1.vb)]\n [!code-cpp[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_216_1.cpp)]"
  syntax:
    content: public virtual int SelectionLength { get; set; }
    return:
      type: System.Int32
      description: "The number of characters selected in the text box."
  overload: System.Windows.Forms.TextBoxBase.SelectionLength*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The assigned value is less than zero."
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.SelectionStart
  id: SelectionStart
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: SelectionStart
  nameWithType: TextBoxBase.SelectionStart
  fullName: System.Windows.Forms.TextBoxBase.SelectionStart
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the starting point of text selected in the text box."
  remarks: "If no text is selected in the control, this property indicates the insertion point, or caret, for new text. If you set this property to a location beyond the length of the text in the control, the selection start position will be placed after the last character. When text is selected in the text box control, changing this property might decrease the value of the <xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A> property. If the remaining text in the control after the position indicated by the SelectionStart property is less than the value of the <xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A> property, the value of the <xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A> property is automatically decreased. The value of the SelectionStart property never causes an increase in the <xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A> property.       You can programmatically move the selection within the text box by setting the SelectionStart and the <xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A> properties.       You can programmatically move the caret within the text box by setting the SelectionStart to the position within the text box where you want the caret to move to and set the <xref:System.Windows.Forms.TextBoxBase.SelectionLength%2A> property to a value of zero (0).       The <xref:System.Windows.Forms.TextBox> must have focus in order for the selection or the caret to be moved. You can set the SelectionStart property of a <xref:System.Windows.Forms.TextBox> that is <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> by giving it the <xref:System.Windows.Forms.Control.Focus%2A> first."
  example:
  - "**Example 1**  \n  \n The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class. It provides <xref:System.Windows.Forms.MenuItem.Click> event handlers for <xref:System.Windows.Forms.MenuItem> objects that perform Cut, Copy, Paste, and Undo operations. This example requires that a <xref:System.Windows.Forms.TextBox> control named `textBox1` has been created.  \n  \n [!code-cs[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_70_1.cs)]\n [!code-vb[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_70_1.vb)]\n [!code-cpp[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_70_1.cpp)]  \n  \n **Example 2**  \n  \n The following example sets the SelectionStart property of a <xref:System.Windows.Forms.TextBox> that is <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> by giving it the <xref:System.Windows.Forms.Control.Focus%2A> first.  \n  \n [!code-vb[SystemWindowsFormsTextBoxBase#1](~/add/codesnippet/visualbasic/SelectionStart/Form1.vb#1)]\n [!code-cs[SystemWindowsFormsTextBoxBase#1](~/add/codesnippet/csharp/SelectionStartCS/Form1.cs#1)]"
  syntax:
    content: public int SelectionStart { get; set; }
    return:
      type: System.Int32
      description: "The starting position of text selected in the text box."
  overload: System.Windows.Forms.TextBoxBase.SelectionStart*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The assigned value is less than zero."
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  id: SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
  nameWithType: TextBoxBase.SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
  fullName: System.Windows.Forms.TextBoxBase.SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Sets the specified bounds of the <xref href=&quot;System.Windows.Forms.TextBoxBase&quot;></xref> control."
  remarks: "The <xref:System.Windows.Forms.TextBoxBase> control uses the <xref:System.Windows.Forms.TextBoxBase.PreferredHeight%2A> property to set the bounds if the <xref:System.Windows.Forms.TextBoxBase.AutoSize%2A> property is `true` and the <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> property is `false`.       Typically, the parameters that correspond to the bounds not included in the `specified` parameter are passed in with their current values. For example, the <xref:System.Windows.Forms.Control.Height%2A>, <xref:System.Windows.Forms.Control.Width%2A>, or the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Windows.Forms.Control.Location%2A> property can be passed in with a reference to the current instance of the control. However all values passed in are honored and applied to the control.       The `specified` parameter represents the elements of the controls <xref:System.Windows.Forms.Control.Bounds%2A> changed by your application. For example, if you change the <xref:System.Windows.Forms.Control.Size%2A> of the control, the `specified` parameter value is the `Size` value of <xref:System.Windows.Forms.BoundsSpecified>. However, if the <xref:System.Windows.Forms.Control.Size%2A> is adjusted in response to the <xref:System.Windows.Forms.Control.Dock%2A> property being set, the `specified` parameter value is the `None` value of <xref:System.Windows.Forms.BoundsSpecified>."
  syntax:
    content: protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);
    parameters:
    - id: x
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Left*> property value of the control."
    - id: y
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Top*> property value of the control."
    - id: width
      type: System.Int32
      description: "The new <xref:System.Windows.Forms.Control.Width*> property value of the control."
    - id: height
      type: System.Int32
      description: "Not used."
    - id: specified
      type: System.Windows.Forms.BoundsSpecified
      description: "A bitwise combination of the <xref href=&quot;System.Windows.Forms.BoundsSpecified&quot;></xref> values."
  overload: System.Windows.Forms.TextBoxBase.SetBoundsCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ShortcutsEnabled
  id: ShortcutsEnabled
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ShortcutsEnabled
  nameWithType: TextBoxBase.ShortcutsEnabled
  fullName: System.Windows.Forms.TextBoxBase.ShortcutsEnabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets a value indicating whether the defined shortcuts are enabled."
  remarks: "Use the ShortcutsEnabled property to enable or disable the following shortcut key combinations and the control’s shortcut menu:      -   CTRL+Z      -   CTRL+E      -   CTRL+C      -   CTRL+Y      -   CTRL+X      -   CTRL+BACKSPACE      -   CTRL+V      -   CTRL+DELETE      -   CTRL+A      -   SHIFT+DELETE      -   CTRL+L      -   SHIFT+INSERT      -   CTRL+R       You can override this property to specify other shortcut keys."
  syntax:
    content: public virtual bool ShortcutsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to enable the shortcuts; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.ShortcutsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Text
  id: Text
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Text
  nameWithType: TextBoxBase.Text
  fullName: System.Windows.Forms.TextBoxBase.Text
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets or sets the current text in the text box."
  remarks: "To display multiple lines of text in a text box, set the <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> property to `true`. To read or set the text of a multiline text box, use the <xref:System.Windows.Forms.TextBoxBase.Lines%2A> property. The amount of text that can be entered in the <xref:System.Windows.Forms.RichTextBox> control is limited only by available system memory."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class, to create a multiline <xref:System.Windows.Forms.TextBox> control with vertical scroll bars. This example also uses the <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, and <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> properties to make the multiline text box control useful for creating text documents.  \n  \n [!code-cpp[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_187_1.cpp)]\n [!code-cs[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_187_1.cs)]\n [!code-vb[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_187_1.vb)]"
  syntax:
    content: public override string Text { get; set; }
    return:
      type: System.String
      description: "The text displayed in the control."
  overload: System.Windows.Forms.TextBoxBase.Text*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.TextLength
  id: TextLength
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: TextLength
  nameWithType: TextBoxBase.TextLength
  fullName: System.Windows.Forms.TextBoxBase.TextLength
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets the length of text in the control."
  remarks: "You can use this property to determine the number of characters in a string for tasks such as searching for specific strings of text within the text of the control, where knowledge of the total number of characters is needed."
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.TextBoxBase.AppendText%2A> method and the TextLength property to copy text from one <xref:System.Windows.Forms.TextBox> to another. This example requires that two <xref:System.Windows.Forms.TextBox> controls named, `textBox1` and `textBox2`, have been added to a form and that `textBox1` has text assigned to its <xref:System.Windows.Forms.Control.Text%2A> property.  \n  \n [!code-cpp[TextBoxBase.AppendText#1](~/add/codesnippet/cpp/p-system.windows.forms.t_275_1.cpp)]\n [!code-cs[TextBoxBase.AppendText#1](~/add/codesnippet/csharp/p-system.windows.forms.t_275_1.cs)]\n [!code-vb[TextBoxBase.AppendText#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_275_1.vb)]"
  syntax:
    content: public virtual int TextLength { get; }
    return:
      type: System.Int32
      description: "The number of characters contained in the text of the control."
  overload: System.Windows.Forms.TextBoxBase.TextLength*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.ToString
  id: ToString
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: ToString()
  nameWithType: TextBoxBase.ToString()
  fullName: System.Windows.Forms.TextBoxBase.ToString()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Returns a string that represents the <xref href=&quot;System.Windows.Forms.TextBoxBase&quot;></xref> control."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A string that represents the current <xref href=&quot;System.Windows.Forms.TextBoxBase&quot;></xref>. The string includes the type and the <xref href=&quot;System.Windows.Forms.TextBoxBase&quot;></xref> property of the control."
  overload: System.Windows.Forms.TextBoxBase.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.Undo
  id: Undo
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: Undo()
  nameWithType: TextBoxBase.Undo()
  fullName: System.Windows.Forms.TextBoxBase.Undo()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Undoes the last edit operation in the text box."
  remarks: "This method will undo the last **Clipboard** or text change operation performed in the text box control if the <xref:System.Windows.Forms.TextBoxBase.CanUndo%2A> property returns `true`.      > [!NOTE] >  The Undo method does not work with the <xref:System.Windows.Forms.Control.KeyPress> or <xref:System.Windows.Forms.Control.TextChanged> events."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class. It provides <xref:System.Windows.Forms.MenuItem.Click> event handlers for <xref:System.Windows.Forms.MenuItem> objects that perform Cut, Copy, Paste, and Undo operations. This example requires that a <xref:System.Windows.Forms.TextBox> control named `textBox1` has been created.  \n  \n [!code-cs[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/csharp/m-system.windows.forms.t_21_1.cs)]\n [!code-vb[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_21_1.vb)]\n [!code-cpp[Classic TextBoxBase.SelectionLength Example#1](~/add/codesnippet/cpp/m-system.windows.forms.t_21_1.cpp)]"
  syntax:
    content: public void Undo ();
    parameters: []
  overload: System.Windows.Forms.TextBoxBase.Undo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)
  id: WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: WndProc(Message)
  nameWithType: TextBoxBase.WndProc(Message)
  fullName: System.Windows.Forms.TextBoxBase.WndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Processes Windows messages."
  syntax:
    content: protected override void WndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "The Windows <xref href=&quot;System.Windows.Forms.Message&quot;></xref> to process."
  overload: System.Windows.Forms.TextBoxBase.WndProc*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.TextBoxBase.WordWrap
  id: WordWrap
  parent: System.Windows.Forms.TextBoxBase
  langs:
  - csharp
  name: WordWrap
  nameWithType: TextBoxBase.WordWrap
  fullName: System.Windows.Forms.TextBoxBase.WordWrap
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Indicates whether a multiline text box control automatically wraps words to the beginning of the next line when necessary."
  remarks: "If this property is set to `true`, horizontal scroll bars are not displayed regardless of the <xref:System.Windows.Forms.TextBox.ScrollBars%2A> property setting.      > [!NOTE] >  In the derived class, <xref:System.Windows.Forms.TextBox>, text within the control will always wrap regardless of the property setting of this property unless the <xref:System.Windows.Forms.TextBox.TextAlign%2A> property is set to `HorizontalAlignment.Left`."
  example:
  - "The following code example uses <xref:System.Windows.Forms.TextBox>, a derived class, to create a multiline <xref:System.Windows.Forms.TextBox> control with vertical scroll bars. This example also uses the <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, and WordWrap properties to make the multiline text box control useful for creating text documents.  \n  \n [!code-cpp[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/cpp/p-system.windows.forms.t_266_1.cpp)]\n [!code-cs[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/csharp/p-system.windows.forms.t_266_1.cs)]\n [!code-vb[Classic TextBoxBase.AcceptsTab Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_266_1.vb)]"
  syntax:
    content: public bool WordWrap { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the multiline text box control wraps words; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the text box control automatically scrolls horizontally when the user types past the right edge of the control. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.TextBoxBase.WordWrap*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Forms.Control
  isExternal: false
  name: System.Windows.Forms.Control
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Windows.Forms.TextBoxBase.AcceptsTab
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: AcceptsTab
  nameWithType: TextBoxBase.AcceptsTab
  fullName: System.Windows.Forms.TextBoxBase.AcceptsTab
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.TextBoxBase.AcceptsTabChanged
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: AcceptsTabChanged
  nameWithType: TextBoxBase.AcceptsTabChanged
  fullName: System.Windows.Forms.TextBoxBase.AcceptsTabChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.TextBoxBase.AppendText(System.String)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: AppendText(String)
  nameWithType: TextBoxBase.AppendText(String)
  fullName: System.Windows.Forms.TextBoxBase.AppendText(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.TextBoxBase.AutoSize
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: AutoSize
  nameWithType: TextBoxBase.AutoSize
  fullName: System.Windows.Forms.TextBoxBase.AutoSize
- uid: System.Windows.Forms.TextBoxBase.AutoSizeChanged
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: AutoSizeChanged
  nameWithType: TextBoxBase.AutoSizeChanged
  fullName: System.Windows.Forms.TextBoxBase.AutoSizeChanged
- uid: System.Windows.Forms.TextBoxBase.BackColor
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BackColor
  nameWithType: TextBoxBase.BackColor
  fullName: System.Windows.Forms.TextBoxBase.BackColor
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Windows.Forms.TextBoxBase.BackgroundImage
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BackgroundImage
  nameWithType: TextBoxBase.BackgroundImage
  fullName: System.Windows.Forms.TextBoxBase.BackgroundImage
- uid: System.Drawing.Image
  parent: System.Drawing
  isExternal: false
  name: Image
  nameWithType: Image
  fullName: System.Drawing.Image
- uid: System.Windows.Forms.TextBoxBase.BackgroundImageChanged
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BackgroundImageChanged
  nameWithType: TextBoxBase.BackgroundImageChanged
  fullName: System.Windows.Forms.TextBoxBase.BackgroundImageChanged
- uid: System.Windows.Forms.TextBoxBase.BackgroundImageLayout
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BackgroundImageLayout
  nameWithType: TextBoxBase.BackgroundImageLayout
  fullName: System.Windows.Forms.TextBoxBase.BackgroundImageLayout
- uid: System.Windows.Forms.ImageLayout
  parent: System.Windows.Forms
  isExternal: false
  name: ImageLayout
  nameWithType: ImageLayout
  fullName: System.Windows.Forms.ImageLayout
- uid: System.Windows.Forms.TextBoxBase.BackgroundImageLayoutChanged
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BackgroundImageLayoutChanged
  nameWithType: TextBoxBase.BackgroundImageLayoutChanged
  fullName: System.Windows.Forms.TextBoxBase.BackgroundImageLayoutChanged
- uid: System.Windows.Forms.TextBoxBase.BorderStyle
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BorderStyle
  nameWithType: TextBoxBase.BorderStyle
  fullName: System.Windows.Forms.TextBoxBase.BorderStyle
- uid: System.Windows.Forms.BorderStyle
  parent: System.Windows.Forms
  isExternal: false
  name: BorderStyle
  nameWithType: BorderStyle
  fullName: System.Windows.Forms.BorderStyle
- uid: System.Windows.Forms.TextBoxBase.BorderStyleChanged
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BorderStyleChanged
  nameWithType: TextBoxBase.BorderStyleChanged
  fullName: System.Windows.Forms.TextBoxBase.BorderStyleChanged
- uid: System.Windows.Forms.TextBoxBase.CanEnableIme
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: CanEnableIme
  nameWithType: TextBoxBase.CanEnableIme
  fullName: System.Windows.Forms.TextBoxBase.CanEnableIme
- uid: System.Windows.Forms.TextBoxBase.CanUndo
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: CanUndo
  nameWithType: TextBoxBase.CanUndo
  fullName: System.Windows.Forms.TextBoxBase.CanUndo
- uid: System.Windows.Forms.TextBoxBase.Clear
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Clear()
  nameWithType: TextBoxBase.Clear()
  fullName: System.Windows.Forms.TextBoxBase.Clear()
- uid: System.Windows.Forms.TextBoxBase.ClearUndo
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ClearUndo()
  nameWithType: TextBoxBase.ClearUndo()
  fullName: System.Windows.Forms.TextBoxBase.ClearUndo()
- uid: System.Windows.Forms.TextBoxBase.Click
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Click
  nameWithType: TextBoxBase.Click
  fullName: System.Windows.Forms.TextBoxBase.Click
- uid: System.Windows.Forms.TextBoxBase.Copy
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Copy()
  nameWithType: TextBoxBase.Copy()
  fullName: System.Windows.Forms.TextBoxBase.Copy()
- uid: System.Windows.Forms.TextBoxBase.CreateHandle
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: CreateHandle()
  nameWithType: TextBoxBase.CreateHandle()
  fullName: System.Windows.Forms.TextBoxBase.CreateHandle()
- uid: System.Windows.Forms.TextBoxBase.CreateParams
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: CreateParams
  nameWithType: TextBoxBase.CreateParams
  fullName: System.Windows.Forms.TextBoxBase.CreateParams
- uid: System.Windows.Forms.CreateParams
  parent: System.Windows.Forms
  isExternal: false
  name: CreateParams
  nameWithType: CreateParams
  fullName: System.Windows.Forms.CreateParams
- uid: System.Windows.Forms.TextBoxBase.Cut
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Cut()
  nameWithType: TextBoxBase.Cut()
  fullName: System.Windows.Forms.TextBoxBase.Cut()
- uid: System.Windows.Forms.TextBoxBase.DefaultCursor
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: DefaultCursor
  nameWithType: TextBoxBase.DefaultCursor
  fullName: System.Windows.Forms.TextBoxBase.DefaultCursor
- uid: System.Windows.Forms.Cursor
  parent: System.Windows.Forms
  isExternal: false
  name: Cursor
  nameWithType: Cursor
  fullName: System.Windows.Forms.Cursor
- uid: System.Windows.Forms.TextBoxBase.DefaultSize
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: DefaultSize
  nameWithType: TextBoxBase.DefaultSize
  fullName: System.Windows.Forms.TextBoxBase.DefaultSize
- uid: System.Drawing.Size
  parent: System.Drawing
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Drawing.Size
- uid: System.Windows.Forms.TextBoxBase.DeselectAll
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: DeselectAll()
  nameWithType: TextBoxBase.DeselectAll()
  fullName: System.Windows.Forms.TextBoxBase.DeselectAll()
- uid: System.Windows.Forms.TextBoxBase.DoubleBuffered
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: DoubleBuffered
  nameWithType: TextBoxBase.DoubleBuffered
  fullName: System.Windows.Forms.TextBoxBase.DoubleBuffered
- uid: System.Windows.Forms.TextBoxBase.ForeColor
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ForeColor
  nameWithType: TextBoxBase.ForeColor
  fullName: System.Windows.Forms.TextBoxBase.ForeColor
- uid: System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetCharFromPosition(Point)
  nameWithType: TextBoxBase.GetCharFromPosition(Point)
  fullName: System.Windows.Forms.TextBoxBase.GetCharFromPosition(Point)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Drawing.Point
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetCharIndexFromPosition(Point)
  nameWithType: TextBoxBase.GetCharIndexFromPosition(Point)
  fullName: System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(Point)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.TextBoxBase.GetFirstCharIndexFromLine(System.Int32)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetFirstCharIndexFromLine(Int32)
  nameWithType: TextBoxBase.GetFirstCharIndexFromLine(Int32)
  fullName: System.Windows.Forms.TextBoxBase.GetFirstCharIndexFromLine(Int32)
- uid: System.Windows.Forms.TextBoxBase.GetFirstCharIndexOfCurrentLine
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetFirstCharIndexOfCurrentLine()
  nameWithType: TextBoxBase.GetFirstCharIndexOfCurrentLine()
  fullName: System.Windows.Forms.TextBoxBase.GetFirstCharIndexOfCurrentLine()
- uid: System.Windows.Forms.TextBoxBase.GetLineFromCharIndex(System.Int32)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetLineFromCharIndex(Int32)
  nameWithType: TextBoxBase.GetLineFromCharIndex(Int32)
  fullName: System.Windows.Forms.TextBoxBase.GetLineFromCharIndex(Int32)
- uid: System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetPositionFromCharIndex(Int32)
  nameWithType: TextBoxBase.GetPositionFromCharIndex(Int32)
  fullName: System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(Int32)
- uid: System.Windows.Forms.TextBoxBase.HideSelection
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: HideSelection
  nameWithType: TextBoxBase.HideSelection
  fullName: System.Windows.Forms.TextBoxBase.HideSelection
- uid: System.Windows.Forms.TextBoxBase.HideSelectionChanged
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: HideSelectionChanged
  nameWithType: TextBoxBase.HideSelectionChanged
  fullName: System.Windows.Forms.TextBoxBase.HideSelectionChanged
- uid: System.Windows.Forms.TextBoxBase.ImeModeBase
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ImeModeBase
  nameWithType: TextBoxBase.ImeModeBase
  fullName: System.Windows.Forms.TextBoxBase.ImeModeBase
- uid: System.Windows.Forms.ImeMode
  parent: System.Windows.Forms
  isExternal: false
  name: ImeMode
  nameWithType: ImeMode
  fullName: System.Windows.Forms.ImeMode
- uid: System.Windows.Forms.TextBoxBase.IsInputKey(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: IsInputKey(Keys)
  nameWithType: TextBoxBase.IsInputKey(Keys)
  fullName: System.Windows.Forms.TextBoxBase.IsInputKey(Keys)
- uid: System.Windows.Forms.Keys
  parent: System.Windows.Forms
  isExternal: false
  name: Keys
  nameWithType: Keys
  fullName: System.Windows.Forms.Keys
- uid: System.Windows.Forms.TextBoxBase.Lines
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Lines
  nameWithType: TextBoxBase.Lines
  fullName: System.Windows.Forms.TextBoxBase.Lines
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.TextBoxBase.MaxLength
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: MaxLength
  nameWithType: TextBoxBase.MaxLength
  fullName: System.Windows.Forms.TextBoxBase.MaxLength
- uid: System.Windows.Forms.TextBoxBase.Modified
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Modified
  nameWithType: TextBoxBase.Modified
  fullName: System.Windows.Forms.TextBoxBase.Modified
- uid: System.Windows.Forms.TextBoxBase.ModifiedChanged
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ModifiedChanged
  nameWithType: TextBoxBase.ModifiedChanged
  fullName: System.Windows.Forms.TextBoxBase.ModifiedChanged
- uid: System.Windows.Forms.TextBoxBase.MouseClick
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: MouseClick
  nameWithType: TextBoxBase.MouseClick
  fullName: System.Windows.Forms.TextBoxBase.MouseClick
- uid: System.Windows.Forms.MouseEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Forms.MouseEventHandler
- uid: System.Windows.Forms.TextBoxBase.Multiline
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Multiline
  nameWithType: TextBoxBase.Multiline
  fullName: System.Windows.Forms.TextBoxBase.Multiline
- uid: System.Windows.Forms.TextBoxBase.MultilineChanged
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: MultilineChanged
  nameWithType: TextBoxBase.MultilineChanged
  fullName: System.Windows.Forms.TextBoxBase.MultilineChanged
- uid: System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnAcceptsTabChanged(EventArgs)
  nameWithType: TextBoxBase.OnAcceptsTabChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Forms.TextBoxBase.OnBorderStyleChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnBorderStyleChanged(EventArgs)
  nameWithType: TextBoxBase.OnBorderStyleChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnBorderStyleChanged(EventArgs)
- uid: System.Windows.Forms.TextBoxBase.OnFontChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnFontChanged(EventArgs)
  nameWithType: TextBoxBase.OnFontChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnFontChanged(EventArgs)
- uid: System.Windows.Forms.TextBoxBase.OnHandleCreated(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnHandleCreated(EventArgs)
  nameWithType: TextBoxBase.OnHandleCreated(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnHandleCreated(EventArgs)
- uid: System.Windows.Forms.TextBoxBase.OnHandleDestroyed(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnHandleDestroyed(EventArgs)
  nameWithType: TextBoxBase.OnHandleDestroyed(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnHandleDestroyed(EventArgs)
- uid: System.Windows.Forms.TextBoxBase.OnHideSelectionChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnHideSelectionChanged(EventArgs)
  nameWithType: TextBoxBase.OnHideSelectionChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnHideSelectionChanged(EventArgs)
- uid: System.Windows.Forms.TextBoxBase.OnModifiedChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnModifiedChanged(EventArgs)
  nameWithType: TextBoxBase.OnModifiedChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnModifiedChanged(EventArgs)
- uid: System.Windows.Forms.TextBoxBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnMouseUp(MouseEventArgs)
  nameWithType: TextBoxBase.OnMouseUp(MouseEventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnMouseUp(MouseEventArgs)
- uid: System.Windows.Forms.MouseEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Forms.MouseEventArgs
- uid: System.Windows.Forms.TextBoxBase.OnMultilineChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnMultilineChanged(EventArgs)
  nameWithType: TextBoxBase.OnMultilineChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnMultilineChanged(EventArgs)
- uid: System.Windows.Forms.TextBoxBase.OnPaddingChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnPaddingChanged(EventArgs)
  nameWithType: TextBoxBase.OnPaddingChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnPaddingChanged(EventArgs)
- uid: System.Windows.Forms.TextBoxBase.OnReadOnlyChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnReadOnlyChanged(EventArgs)
  nameWithType: TextBoxBase.OnReadOnlyChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnReadOnlyChanged(EventArgs)
- uid: System.Windows.Forms.TextBoxBase.OnTextChanged(System.EventArgs)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnTextChanged(EventArgs)
  nameWithType: TextBoxBase.OnTextChanged(EventArgs)
  fullName: System.Windows.Forms.TextBoxBase.OnTextChanged(EventArgs)
- uid: System.Windows.Forms.TextBoxBase.Padding
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Padding
  nameWithType: TextBoxBase.Padding
  fullName: System.Windows.Forms.TextBoxBase.Padding
- uid: System.Windows.Forms.Padding
  parent: System.Windows.Forms
  isExternal: false
  name: Padding
  nameWithType: Padding
  fullName: System.Windows.Forms.Padding
- uid: System.Windows.Forms.TextBoxBase.PaddingChanged
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: PaddingChanged
  nameWithType: TextBoxBase.PaddingChanged
  fullName: System.Windows.Forms.TextBoxBase.PaddingChanged
- uid: System.Windows.Forms.TextBoxBase.Paint
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Paint
  nameWithType: TextBoxBase.Paint
  fullName: System.Windows.Forms.TextBoxBase.Paint
- uid: System.Windows.Forms.PaintEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: PaintEventHandler
  nameWithType: PaintEventHandler
  fullName: System.Windows.Forms.PaintEventHandler
- uid: System.Windows.Forms.TextBoxBase.Paste
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Paste()
  nameWithType: TextBoxBase.Paste()
  fullName: System.Windows.Forms.TextBoxBase.Paste()
- uid: System.Windows.Forms.TextBoxBase.PreferredHeight
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: PreferredHeight
  nameWithType: TextBoxBase.PreferredHeight
  fullName: System.Windows.Forms.TextBoxBase.PreferredHeight
- uid: System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ProcessCmdKey(Message,Keys)
  nameWithType: TextBoxBase.ProcessCmdKey(Message,Keys)
  fullName: System.Windows.Forms.TextBoxBase.ProcessCmdKey(Message,Keys)
- uid: System.Windows.Forms.Message
  parent: System.Windows.Forms
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Windows.Forms.Message
- uid: System.Windows.Forms.TextBoxBase.ProcessDialogKey(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ProcessDialogKey(Keys)
  nameWithType: TextBoxBase.ProcessDialogKey(Keys)
  fullName: System.Windows.Forms.TextBoxBase.ProcessDialogKey(Keys)
- uid: System.Windows.Forms.TextBoxBase.ReadOnly
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ReadOnly
  nameWithType: TextBoxBase.ReadOnly
  fullName: System.Windows.Forms.TextBoxBase.ReadOnly
- uid: System.Windows.Forms.TextBoxBase.ReadOnlyChanged
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ReadOnlyChanged
  nameWithType: TextBoxBase.ReadOnlyChanged
  fullName: System.Windows.Forms.TextBoxBase.ReadOnlyChanged
- uid: System.Windows.Forms.TextBoxBase.ScrollToCaret
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ScrollToCaret()
  nameWithType: TextBoxBase.ScrollToCaret()
  fullName: System.Windows.Forms.TextBoxBase.ScrollToCaret()
- uid: System.Windows.Forms.TextBoxBase.Select(System.Int32,System.Int32)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Select(Int32,Int32)
  nameWithType: TextBoxBase.Select(Int32,Int32)
  fullName: System.Windows.Forms.TextBoxBase.Select(Int32,Int32)
- uid: System.Windows.Forms.TextBoxBase.SelectAll
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: SelectAll()
  nameWithType: TextBoxBase.SelectAll()
  fullName: System.Windows.Forms.TextBoxBase.SelectAll()
- uid: System.Windows.Forms.TextBoxBase.SelectedText
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: SelectedText
  nameWithType: TextBoxBase.SelectedText
  fullName: System.Windows.Forms.TextBoxBase.SelectedText
- uid: System.Windows.Forms.TextBoxBase.SelectionLength
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: SelectionLength
  nameWithType: TextBoxBase.SelectionLength
  fullName: System.Windows.Forms.TextBoxBase.SelectionLength
- uid: System.Windows.Forms.TextBoxBase.SelectionStart
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: SelectionStart
  nameWithType: TextBoxBase.SelectionStart
  fullName: System.Windows.Forms.TextBoxBase.SelectionStart
- uid: System.Windows.Forms.TextBoxBase.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
  nameWithType: TextBoxBase.SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
  fullName: System.Windows.Forms.TextBoxBase.SetBoundsCore(Int32,Int32,Int32,Int32,BoundsSpecified)
- uid: System.Windows.Forms.BoundsSpecified
  parent: System.Windows.Forms
  isExternal: false
  name: BoundsSpecified
  nameWithType: BoundsSpecified
  fullName: System.Windows.Forms.BoundsSpecified
- uid: System.Windows.Forms.TextBoxBase.ShortcutsEnabled
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ShortcutsEnabled
  nameWithType: TextBoxBase.ShortcutsEnabled
  fullName: System.Windows.Forms.TextBoxBase.ShortcutsEnabled
- uid: System.Windows.Forms.TextBoxBase.Text
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Text
  nameWithType: TextBoxBase.Text
  fullName: System.Windows.Forms.TextBoxBase.Text
- uid: System.Windows.Forms.TextBoxBase.TextLength
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: TextLength
  nameWithType: TextBoxBase.TextLength
  fullName: System.Windows.Forms.TextBoxBase.TextLength
- uid: System.Windows.Forms.TextBoxBase.ToString
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ToString()
  nameWithType: TextBoxBase.ToString()
  fullName: System.Windows.Forms.TextBoxBase.ToString()
- uid: System.Windows.Forms.TextBoxBase.Undo
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Undo()
  nameWithType: TextBoxBase.Undo()
  fullName: System.Windows.Forms.TextBoxBase.Undo()
- uid: System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: WndProc(Message)
  nameWithType: TextBoxBase.WndProc(Message)
  fullName: System.Windows.Forms.TextBoxBase.WndProc(Message)
- uid: System.Windows.Forms.TextBoxBase.WordWrap
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: WordWrap
  nameWithType: TextBoxBase.WordWrap
  fullName: System.Windows.Forms.TextBoxBase.WordWrap
- uid: System.Windows.Forms.TextBoxBase.AcceptsTab*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: AcceptsTab
  nameWithType: TextBoxBase.AcceptsTab
- uid: System.Windows.Forms.TextBoxBase.AppendText*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: AppendText
  nameWithType: TextBoxBase.AppendText
- uid: System.Windows.Forms.TextBoxBase.AutoSize*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: AutoSize
  nameWithType: TextBoxBase.AutoSize
- uid: System.Windows.Forms.TextBoxBase.BackColor*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BackColor
  nameWithType: TextBoxBase.BackColor
- uid: System.Windows.Forms.TextBoxBase.BackgroundImage*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BackgroundImage
  nameWithType: TextBoxBase.BackgroundImage
- uid: System.Windows.Forms.TextBoxBase.BackgroundImageLayout*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BackgroundImageLayout
  nameWithType: TextBoxBase.BackgroundImageLayout
- uid: System.Windows.Forms.TextBoxBase.BorderStyle*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: BorderStyle
  nameWithType: TextBoxBase.BorderStyle
- uid: System.Windows.Forms.TextBoxBase.CanEnableIme*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: CanEnableIme
  nameWithType: TextBoxBase.CanEnableIme
- uid: System.Windows.Forms.TextBoxBase.CanUndo*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: CanUndo
  nameWithType: TextBoxBase.CanUndo
- uid: System.Windows.Forms.TextBoxBase.Clear*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Clear
  nameWithType: TextBoxBase.Clear
- uid: System.Windows.Forms.TextBoxBase.ClearUndo*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ClearUndo
  nameWithType: TextBoxBase.ClearUndo
- uid: System.Windows.Forms.TextBoxBase.Copy*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Copy
  nameWithType: TextBoxBase.Copy
- uid: System.Windows.Forms.TextBoxBase.CreateHandle*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: CreateHandle
  nameWithType: TextBoxBase.CreateHandle
- uid: System.Windows.Forms.TextBoxBase.CreateParams*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: CreateParams
  nameWithType: TextBoxBase.CreateParams
- uid: System.Windows.Forms.TextBoxBase.Cut*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Cut
  nameWithType: TextBoxBase.Cut
- uid: System.Windows.Forms.TextBoxBase.DefaultCursor*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: DefaultCursor
  nameWithType: TextBoxBase.DefaultCursor
- uid: System.Windows.Forms.TextBoxBase.DefaultSize*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: DefaultSize
  nameWithType: TextBoxBase.DefaultSize
- uid: System.Windows.Forms.TextBoxBase.DeselectAll*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: DeselectAll
  nameWithType: TextBoxBase.DeselectAll
- uid: System.Windows.Forms.TextBoxBase.DoubleBuffered*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: DoubleBuffered
  nameWithType: TextBoxBase.DoubleBuffered
- uid: System.Windows.Forms.TextBoxBase.ForeColor*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ForeColor
  nameWithType: TextBoxBase.ForeColor
- uid: System.Windows.Forms.TextBoxBase.GetCharFromPosition*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetCharFromPosition
  nameWithType: TextBoxBase.GetCharFromPosition
- uid: System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetCharIndexFromPosition
  nameWithType: TextBoxBase.GetCharIndexFromPosition
- uid: System.Windows.Forms.TextBoxBase.GetFirstCharIndexFromLine*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetFirstCharIndexFromLine
  nameWithType: TextBoxBase.GetFirstCharIndexFromLine
- uid: System.Windows.Forms.TextBoxBase.GetFirstCharIndexOfCurrentLine*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetFirstCharIndexOfCurrentLine
  nameWithType: TextBoxBase.GetFirstCharIndexOfCurrentLine
- uid: System.Windows.Forms.TextBoxBase.GetLineFromCharIndex*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetLineFromCharIndex
  nameWithType: TextBoxBase.GetLineFromCharIndex
- uid: System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: GetPositionFromCharIndex
  nameWithType: TextBoxBase.GetPositionFromCharIndex
- uid: System.Windows.Forms.TextBoxBase.HideSelection*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: HideSelection
  nameWithType: TextBoxBase.HideSelection
- uid: System.Windows.Forms.TextBoxBase.ImeModeBase*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ImeModeBase
  nameWithType: TextBoxBase.ImeModeBase
- uid: System.Windows.Forms.TextBoxBase.IsInputKey*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: IsInputKey
  nameWithType: TextBoxBase.IsInputKey
- uid: System.Windows.Forms.TextBoxBase.Lines*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Lines
  nameWithType: TextBoxBase.Lines
- uid: System.Windows.Forms.TextBoxBase.MaxLength*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: MaxLength
  nameWithType: TextBoxBase.MaxLength
- uid: System.Windows.Forms.TextBoxBase.Modified*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Modified
  nameWithType: TextBoxBase.Modified
- uid: System.Windows.Forms.TextBoxBase.Multiline*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Multiline
  nameWithType: TextBoxBase.Multiline
- uid: System.Windows.Forms.TextBoxBase.OnAcceptsTabChanged*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnAcceptsTabChanged
  nameWithType: TextBoxBase.OnAcceptsTabChanged
- uid: System.Windows.Forms.TextBoxBase.OnBorderStyleChanged*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnBorderStyleChanged
  nameWithType: TextBoxBase.OnBorderStyleChanged
- uid: System.Windows.Forms.TextBoxBase.OnFontChanged*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnFontChanged
  nameWithType: TextBoxBase.OnFontChanged
- uid: System.Windows.Forms.TextBoxBase.OnHandleCreated*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnHandleCreated
  nameWithType: TextBoxBase.OnHandleCreated
- uid: System.Windows.Forms.TextBoxBase.OnHandleDestroyed*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnHandleDestroyed
  nameWithType: TextBoxBase.OnHandleDestroyed
- uid: System.Windows.Forms.TextBoxBase.OnHideSelectionChanged*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnHideSelectionChanged
  nameWithType: TextBoxBase.OnHideSelectionChanged
- uid: System.Windows.Forms.TextBoxBase.OnModifiedChanged*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnModifiedChanged
  nameWithType: TextBoxBase.OnModifiedChanged
- uid: System.Windows.Forms.TextBoxBase.OnMouseUp*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnMouseUp
  nameWithType: TextBoxBase.OnMouseUp
- uid: System.Windows.Forms.TextBoxBase.OnMultilineChanged*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnMultilineChanged
  nameWithType: TextBoxBase.OnMultilineChanged
- uid: System.Windows.Forms.TextBoxBase.OnPaddingChanged*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnPaddingChanged
  nameWithType: TextBoxBase.OnPaddingChanged
- uid: System.Windows.Forms.TextBoxBase.OnReadOnlyChanged*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnReadOnlyChanged
  nameWithType: TextBoxBase.OnReadOnlyChanged
- uid: System.Windows.Forms.TextBoxBase.OnTextChanged*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: OnTextChanged
  nameWithType: TextBoxBase.OnTextChanged
- uid: System.Windows.Forms.TextBoxBase.Padding*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Padding
  nameWithType: TextBoxBase.Padding
- uid: System.Windows.Forms.TextBoxBase.Paste*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Paste
  nameWithType: TextBoxBase.Paste
- uid: System.Windows.Forms.TextBoxBase.PreferredHeight*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: PreferredHeight
  nameWithType: TextBoxBase.PreferredHeight
- uid: System.Windows.Forms.TextBoxBase.ProcessCmdKey*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ProcessCmdKey
  nameWithType: TextBoxBase.ProcessCmdKey
- uid: System.Windows.Forms.TextBoxBase.ProcessDialogKey*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ProcessDialogKey
  nameWithType: TextBoxBase.ProcessDialogKey
- uid: System.Windows.Forms.TextBoxBase.ReadOnly*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ReadOnly
  nameWithType: TextBoxBase.ReadOnly
- uid: System.Windows.Forms.TextBoxBase.ScrollToCaret*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ScrollToCaret
  nameWithType: TextBoxBase.ScrollToCaret
- uid: System.Windows.Forms.TextBoxBase.Select*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Select
  nameWithType: TextBoxBase.Select
- uid: System.Windows.Forms.TextBoxBase.SelectAll*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: SelectAll
  nameWithType: TextBoxBase.SelectAll
- uid: System.Windows.Forms.TextBoxBase.SelectedText*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: SelectedText
  nameWithType: TextBoxBase.SelectedText
- uid: System.Windows.Forms.TextBoxBase.SelectionLength*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: SelectionLength
  nameWithType: TextBoxBase.SelectionLength
- uid: System.Windows.Forms.TextBoxBase.SelectionStart*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: SelectionStart
  nameWithType: TextBoxBase.SelectionStart
- uid: System.Windows.Forms.TextBoxBase.SetBoundsCore*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: SetBoundsCore
  nameWithType: TextBoxBase.SetBoundsCore
- uid: System.Windows.Forms.TextBoxBase.ShortcutsEnabled*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ShortcutsEnabled
  nameWithType: TextBoxBase.ShortcutsEnabled
- uid: System.Windows.Forms.TextBoxBase.Text*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Text
  nameWithType: TextBoxBase.Text
- uid: System.Windows.Forms.TextBoxBase.TextLength*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: TextLength
  nameWithType: TextBoxBase.TextLength
- uid: System.Windows.Forms.TextBoxBase.ToString*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: ToString
  nameWithType: TextBoxBase.ToString
- uid: System.Windows.Forms.TextBoxBase.Undo*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: Undo
  nameWithType: TextBoxBase.Undo
- uid: System.Windows.Forms.TextBoxBase.WndProc*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: WndProc
  nameWithType: TextBoxBase.WndProc
- uid: System.Windows.Forms.TextBoxBase.WordWrap*
  parent: System.Windows.Forms.TextBoxBase
  isExternal: false
  name: WordWrap
  nameWithType: TextBoxBase.WordWrap
