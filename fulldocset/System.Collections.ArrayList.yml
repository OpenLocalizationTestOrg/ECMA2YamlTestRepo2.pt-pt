### YamlMime:ManagedReference
items:
- uid: System.Collections.ArrayList
  id: ArrayList
  children:
  - System.Collections.ArrayList.#ctor
  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  - System.Collections.ArrayList.#ctor(System.Int32)
  - System.Collections.ArrayList.Adapter(System.Collections.IList)
  - System.Collections.ArrayList.Add(System.Object)
  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - System.Collections.ArrayList.BinarySearch(System.Object)
  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.Capacity
  - System.Collections.ArrayList.Clear
  - System.Collections.ArrayList.Clone
  - System.Collections.ArrayList.Contains(System.Object)
  - System.Collections.ArrayList.CopyTo(System.Array)
  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  - System.Collections.ArrayList.Count
  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  - System.Collections.ArrayList.FixedSize(System.Collections.IList)
  - System.Collections.ArrayList.GetEnumerator
  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.IsFixedSize
  - System.Collections.ArrayList.IsReadOnly
  - System.Collections.ArrayList.IsSynchronized
  - System.Collections.ArrayList.Item(System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  - System.Collections.ArrayList.Remove(System.Object)
  - System.Collections.ArrayList.RemoveAt(System.Int32)
  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  - System.Collections.ArrayList.Reverse
  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.Sort
  - System.Collections.ArrayList.Sort(System.Collections.IComparer)
  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  - System.Collections.ArrayList.Synchronized(System.Collections.IList)
  - System.Collections.ArrayList.SyncRoot
  - System.Collections.ArrayList.ToArray
  - System.Collections.ArrayList.ToArray(System.Type)
  - System.Collections.ArrayList.TrimToSize
  langs:
  - csharp
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
  type: Class
  summary: "Implementa o <xref:System.Collections.IList>interface a utilização de uma matriz cujo tamanho dinamicamente é aumentado conforme necessário.</xref:System.Collections.IList>       Para procurar o código de origem do .NET Framework para este tipo, consulte o [referência origem](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)."
  remarks: "> [!NOTE]> Para ver o código de origem do .NET Framework para este tipo, consulte o [referência origem](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). Pode percorrer o código de origem online, transfira a referência para visualização offline e siga os passos as origens (incluindo correções de erros e atualizações) durante a depuração; consulte [instruções](http://referencesource.microsoft.com/).       A classe de ArrayList foi concebida para conter heterogéneas coleções de objetos. No entanto, é sempre oferece o melhor desempenho. Em vez disso, recomendamos o seguinte: - para uma coleção heterogénea de objetos, utilize o `List<Object>` (em c#) ou `List(Of Object)` (em Visual Basic) escreva.      -Para uma coleção homogénea de objetos, utilize a <xref:System.Collections.Generic.List%601>classe.</xref:System.Collections.Generic.List%601>       Consulte a secção &quot;Considerações de desempenho&quot; o <xref:System.Collections.Generic.List%601>tópico de referência para um debate do desempenho relativo destas classes.</xref:System.Collections.Generic.List%601>       A ArrayList não é garantida a ser ordenada.  Deve ordenar a ArrayList chamando respetivo <xref:System.Collections.ArrayList.Sort%2A>método antes de efetuar operações (tal como <xref:System.Collections.ArrayList.BinarySearch%2A>) que requerem a ArrayList para ser ordenados.</xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Sort%2A> Para manter uma coleção que é automaticamente ordenada à medida que são adicionados novos elementos, pode utilizar a <xref:System.Collections.Generic.SortedSet%601>classe.</xref:System.Collections.Generic.SortedSet%601>       A capacidade de uma ArrayList é o número de elementos que a ArrayList pode conter. Elementos são adicionadas a uma ArrayList, a capacidade é aumentada automaticamente conforme necessário, através da reatribuição. A capacidade pode ser diminuída chamando <xref:System.Collections.ArrayList.TrimToSize%2A>ou definindo o <xref:System.Collections.ArrayList.Capacity%2A>propriedade explicitamente.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A>       Para objetos de ArrayList muito grandes, pode aumentar a capacidade máxima para 2 mil milhões de elementos num sistema de 64 bits, definindo o `enabled` atributo do elemento de configuração para `true` no ambiente de tempo de execução.       Elementos nesta colecção podem ser acedidos através de um índice de números inteiros.  Os índices desta coleção estão baseado em zero.       A coleção de ArrayList aceita `null` como um valor válido. Também permite elementos duplicados.       A utilização de matrizes multidimensionais como elementos numa coleção ArrayList não é suportada."
  example:
  - "The following code example shows how to create and initialize an ArrayList and how to display its values.  \n  \n [!code-cpp[Classic ArrayList Example#1](~/add/codesnippet/cpp/t-system.collections.arr_1.cpp)]\n [!code-cs[Classic ArrayList Example#1](~/add/codesnippet/csharp/t-system.collections.arr_1.cs)]\n [!code-vb[Classic ArrayList Example#1](~/add/codesnippet/visualbasic/t-system.collections.arr_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ArrayList : ICloneable, System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor
  id: '#ctor'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.ArrayList&quot;> </xref> classe que está vazio e tem a capacidade inicial predefinido."
  remarks: "A capacidade de um <xref:System.Collections.ArrayList>é o número de elementos que o <xref:System.Collections.ArrayList>pode conter.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Elementos são adicionadas a um <xref:System.Collections.ArrayList>, automaticamente aumenta a capacidade conforme requerido pelo reallocating matriz interna.</xref:System.Collections.ArrayList>       Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Este construtor é uma operação de O(1)."
  syntax:
    content: public ArrayList ();
    parameters: []
  overload: System.Collections.ArrayList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.ArrayList&quot;> </xref> classe que contém elementos copiados a partir da coleção especificada e que tenha a mesma capacidade inicial como o número de elementos copiados."
  remarks: "A capacidade de um <xref:System.Collections.ArrayList>é o número de elementos que o <xref:System.Collections.ArrayList>pode conter.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Elementos são adicionadas a um <xref:System.Collections.ArrayList>, automaticamente aumenta a capacidade conforme requerido pelo reallocating matriz interna.</xref:System.Collections.ArrayList>       Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Os elementos são copiados para o <xref:System.Collections.ArrayList>pela mesma ordem que são lidas <xref:System.Collections.IEnumerator>de <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.IEnumerator> </xref:System.Collections.ArrayList>       Este construtor é uma Nã (`n`) operação, onde `n` é o número de elementos na `c`."
  syntax:
    content: public ArrayList (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "O <xref:System.Collections.ICollection>cujos elementos são copiados para a nova lista.</xref:System.Collections.ICollection>"
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.ArrayList&quot;> </xref> classe que está vazio e tem a capacidade inicial especificada."
  remarks: "A capacidade de um <xref:System.Collections.ArrayList>é o número de elementos que o <xref:System.Collections.ArrayList>pode conter.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Elementos são adicionadas a um <xref:System.Collections.ArrayList>, automaticamente aumenta a capacidade conforme requerido pelo reallocating matriz interna.</xref:System.Collections.ArrayList>       Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Este construtor é uma Nã (`n`) operação, onde `n` é `capacity`."
  syntax:
    content: public ArrayList (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "O número de elementos que inicialmente pode armazenar a lista de novo."
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero."
  platform:
  - net462
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  id: Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cria um <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper para <xref:System.Collections.IList>.</xref:System.Collections.IList> específico"
  remarks: "Adaptador de não copiar o conteúdo do <xref:System.Collections.IList>.</xref:System.Collections.IList> Em vez disso, apenas cria um <xref:System.Collections.ArrayList>wrapper em torno <xref:System.Collections.IList>; por conseguinte, as alterações <xref:System.Collections.IList>afetam também <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.IList> </xref:System.Collections.IList> </xref:System.Collections.ArrayList>       O <xref:System.Collections.ArrayList>classe fornece genérico <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A>e <xref:System.Collections.ArrayList.Sort%2A>métodos.</xref:System.Collections.ArrayList.Sort%2A> </xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Reverse%2A> </xref:System.Collections.ArrayList> Este invólucro pode ser um meio para utilizar esses métodos em <xref:System.Collections.IList>; no entanto, efetuar estas operações genéricas através de wrapper poderá ser menos eficiente do que operações aplicadas diretamente nos <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.IList>       Este método é uma operação de O(1).      ## Versão de compatibilidade no .NET Framework versão 1.0 e 1.1, ao chamar o <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29>sobrecarga de método no <xref:System.Collections.ArrayList>wrapper devolveu um enumerador que Tratado o segundo argumento como um limite superior, em vez de uma contagem.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> No [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] o segundo argumento corretamente é tratado como uma contagem."
  syntax:
    content: public static System.Collections.ArrayList Adapter (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "O <xref:System.Collections.IList>Moldar.</xref:System.Collections.IList>"
    return:
      type: System.Collections.ArrayList
      description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper em torno <xref:System.Collections.IList>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Adapter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Adiciona um objeto ao fim do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.ArrayList>       Se <xref:System.Collections.ArrayList.Count%2A>já for igual a <xref:System.Collections.ArrayList.Capacity%2A>, a capacidade dos <xref:System.Collections.ArrayList>é aumentado por automaticamente reallocating matriz interna, e os elementos existentes são copiados para a matriz nova antes do novo elemento de é adicionado.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Se <xref:System.Collections.ArrayList.Count%2A>é inferior a <xref:System.Collections.ArrayList.Capacity%2A>, este método é uma operação O(1).</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> Se a capacidade tem de ser aumentado para o novo elemento, este método torna-se um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_4_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_4_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_4_1.cpp)]"
  syntax:
    content: public virtual int Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>a adicionar ao fim do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> índice no qual o <code> value </code> foi adicionado."
  overload: System.Collections.ArrayList.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  id: AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Adiciona os elementos de um <xref:System.Collections.ICollection>ao fim do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ArrayList>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.ArrayList>       A ordem dos elementos no <xref:System.Collections.ICollection>é preservado na <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Se o novo <xref:System.Collections.ArrayList.Count%2A>(atual <xref:System.Collections.ArrayList.Count%2A>juntamente com o tamanho da colecção) serão superiores a <xref:System.Collections.ArrayList.Capacity%2A>, a capacidade da <xref:System.Collections.ArrayList>é aumentado por reallocating automaticamente a matriz interna para acomodar os novos elementos, e os elementos existentes são copiados para a matriz nova antes dos novos elementos a serem adicionados.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Se o <xref:System.Collections.ArrayList>pode suportar os novos elementos sem aumentar a <xref:System.Collections.ArrayList.Capacity%2A>, este método é um Nã (`n`) operação, onde `n` é o número de elementos a adicionar.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList> Se a capacidade tem de ser aumentado para os novos elementos, este método torna-se um Nã (`n` + `m`) operação, onde `n` é o número de elementos a ser adicionado e `m` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_0_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_0_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_0_1.cpp)]"
  syntax:
    content: public virtual void AddRange (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "O <xref:System.Collections.ICollection>cujos elementos devem ser adicionados até ao fim do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> A própria coleção não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, mas pode conter elementos de <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  id: BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Pesquisa de todo o ordenados <xref href=&quot;System.Collections.ArrayList&quot;> </xref> para um elemento com o comparador predefinido e devolve o índice baseado em zero do elemento."
  remarks: "O `value` parâmetro e cada elemento do <xref:System.Collections.ArrayList>tem de implementar o <xref:System.IComparable>interface, o que é utilizado para efetuar comparações.</xref:System.IComparable> </xref:System.Collections.ArrayList> Os elementos do <xref:System.Collections.ArrayList>já tem de ser ordenada aumentar o valor de acordo com a sequência de ordenação definida pelo <xref:System.IComparable>implementação; caso contrário, o resultado poderá estar incorreto.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Comparar `null` com qualquer tipo é permitido e não gere uma exceção ao utilizar <xref:System.IComparable>.</xref:System.IComparable> Quando a ordenação, `null` considera é inferior a qualquer outro objeto.       Se o <xref:System.Collections.ArrayList>contém mais de um elemento com o mesmo valor, o método devolve apenas uma das ocorrências e poderá devolver qualquer uma das ocorrências, não necessariamente um primeiro.</xref:System.Collections.ArrayList>       Se o <xref:System.Collections.ArrayList>não contém o valor especificado, o método devolve um número inteiro negativo.</xref:System.Collections.ArrayList> Pode aplicar a operação de complemento bit a bit (~) para este número inteiro negativo para obter o índice do primeiro elemento que é maior do que o valor de pesquisa. Ao inserir o valor para o <xref:System.Collections.ArrayList>, este índice deve ser utilizado como ponto de inserção para manter a sequência de ordenação.</xref:System.Collections.ArrayList>       Este método é um Nã (registo `n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to use <xref:System.Collections.ArrayList.BinarySearch%2A> to locate a specific object in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_13_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_13_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_13_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>Localizar.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "O índice baseado em zero do <code> value </code> no ordenado <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, se <code> value </code> é encontrado; caso contrário, negativo number, que é o bit a bit complemento do índice do seguinte elemento que é maior do que <code> value </code> ou, se não existir nenhum elemento superior, o bit a bit complemento de <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Nem <code> value </code> nem os elementos de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementa o <xref:System.IComparable>interface.</xref:System.IComparable>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>value</code>Não é do mesmo tipo de que os elementos do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Pesquisa de todo o ordenados <xref href=&quot;System.Collections.ArrayList&quot;> </xref> para um elemento com o comparador especificado e devolve o índice baseado em zero do elemento."
  remarks: "O comparador customizes como os elementos são comparados. Por exemplo, pode utilizar um <xref:System.Collections.CaseInsensitiveComparer>instância como o comparador para executar pesquisas de cadeia sensível.</xref:System.Collections.CaseInsensitiveComparer>       Se `comparer` for fornecido, os elementos do <xref:System.Collections.ArrayList>são comparadas com o valor especificado utilizando especificado <xref:System.Collections.IComparer>implementação.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> Os elementos do <xref:System.Collections.ArrayList>já tem de ser ordenada aumentar o valor de acordo com a sequência de ordenação definida por `comparer`; caso contrário, o resultado poderá estar incorreto.</xref:System.Collections.ArrayList>       Se `comparer` é `null`, a comparação é feita utilizando a <xref:System.IComparable>implementação fornecida pelo próprio elemento ou o valor especificado.</xref:System.IComparable> Os elementos do <xref:System.Collections.ArrayList>já tem de ser ordenada aumentar o valor de acordo com a sequência de ordenação definida pelo <xref:System.IComparable>implementação; caso contrário, o resultado poderá estar incorreto.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Comparar `null` com qualquer tipo é permitido e não gere uma exceção ao utilizar <xref:System.IComparable>.</xref:System.IComparable> Quando a ordenação, `null` considera é inferior a qualquer outro objeto.       Se o <xref:System.Collections.ArrayList>contém mais de um elemento com o mesmo valor, o método devolve apenas uma das ocorrências e poderá devolver qualquer uma das ocorrências, não necessariamente um primeiro.</xref:System.Collections.ArrayList>       Se o <xref:System.Collections.ArrayList>não contém o valor especificado, o método devolve um número inteiro negativo.</xref:System.Collections.ArrayList> Pode aplicar a operação de complemento bit a bit (~) para este número inteiro negativo para obter o índice do primeiro elemento que é maior do que o valor de pesquisa. Ao inserir o valor para o <xref:System.Collections.ArrayList>, este índice deve ser utilizado como ponto de inserção para manter a sequência de ordenação.</xref:System.Collections.ArrayList>       Este método é um Nã (registo `n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following example creates an <xref:System.Collections.ArrayList> of colored animals. The provided <xref:System.Collections.IComparer> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/cpp/51ebb232-4223-422e-9ecb-_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/csharp/51ebb232-4223-422e-9ecb-_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/visualbasic/51ebb232-4223-422e-9ecb-_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value, System.Collections.IComparer comparer);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>Localizar.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>implementação a utilizar ao comparar elementos.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o comparador predefinido que é o <xref:System.IComparable>implementação de cada elemento.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "O índice baseado em zero do <code> value </code> no ordenado <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, se <code> value </code> é encontrado; caso contrário, negativo number, que é o bit a bit complemento do índice do seguinte elemento que é maior do que <code> value </code> ou, se não existir nenhum elemento superior, o bit a bit complemento de <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>comparer</code>é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e nem <code>value</code> nem os elementos de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementa o <xref:System.IComparable> interface."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e <code>value</code> não é do mesmo tipo de que os elementos do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Procura um intervalo de elementos no ordenado <xref href=&quot;System.Collections.ArrayList&quot;> </xref> para um elemento com o comparador especificado e devolve o índice baseado em zero do elemento."
  remarks: "O comparador customizes como os elementos são comparados. Por exemplo, pode utilizar um <xref:System.Collections.CaseInsensitiveComparer>instância como o comparador para executar pesquisas de cadeia sensível.</xref:System.Collections.CaseInsensitiveComparer>       Se `comparer` for fornecido, os elementos do <xref:System.Collections.ArrayList>são comparadas com o valor especificado utilizando especificado <xref:System.Collections.IComparer>implementação.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> Os elementos do <xref:System.Collections.ArrayList>já tem de ser ordenada aumentar o valor de acordo com a sequência de ordenação definida por `comparer`; caso contrário, o resultado poderá estar incorreto.</xref:System.Collections.ArrayList>       Se `comparer` é `null`, a comparação é feita utilizando a <xref:System.IComparable>implementação fornecida pelo próprio elemento ou o valor especificado.</xref:System.IComparable> Os elementos do <xref:System.Collections.ArrayList>já tem de ser ordenada aumentar o valor de acordo com a sequência de ordenação definida pelo <xref:System.IComparable>implementação; caso contrário, o resultado poderá estar incorreto.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Comparar `null` com qualquer tipo é permitido e não gere uma exceção ao utilizar <xref:System.IComparable>.</xref:System.IComparable> Quando a ordenação, `null` considera é inferior a qualquer outro objeto.       Se o <xref:System.Collections.ArrayList>contém mais de um elemento com o mesmo valor, o método devolve apenas uma das ocorrências e poderá devolver qualquer uma das ocorrências, não necessariamente um primeiro.</xref:System.Collections.ArrayList>       Se o <xref:System.Collections.ArrayList>não contém o valor especificado, o método devolve um número inteiro negativo.</xref:System.Collections.ArrayList> Pode aplicar a operação de complemento bit a bit (~) para este número inteiro negativo para obter o índice do primeiro elemento que é maior do que o valor de pesquisa. Ao inserir o valor para o <xref:System.Collections.ArrayList>, este índice deve ser utilizado como ponto de inserção para manter a sequência de ordenação.</xref:System.Collections.ArrayList>       Este método é um Nã (registo `n`) operação, onde `n` é `count`."
  syntax:
    content: public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero inicial do intervalo para procurar."
    - id: count
      type: System.Int32
      description: "O comprimento do intervalo para procurar."
    - id: value
      type: System.Object
      description: "O <xref:System.Object>Localizar.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>implementação a utilizar ao comparar elementos.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o comparador predefinido que é o <xref:System.IComparable>implementação de cada elemento.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "O índice baseado em zero do <code> value </code> no ordenado <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, se <code> value </code> é encontrado; caso contrário, negativo number, que é o bit a bit complemento do índice do seguinte elemento que é maior do que <code> value </code> ou, se não existir nenhum elemento superior, o bit a bit complemento de <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> denota um intervalo válido no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - ou - <code>comparer</code> é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e nem <code>value</code> nem os elementos de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementa o <xref:System.IComparable> interface."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e <code>value</code> não é do mesmo tipo de que os elementos do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>count</code> é menor que zero."
  platform:
  - net462
- uid: System.Collections.ArrayList.Capacity
  id: Capacity
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém ou define o número de elementos que o <xref href=&quot;System.Collections.ArrayList&quot;> </xref> pode conter."
  remarks: "A capacidade é o número de elementos que o <xref:System.Collections.ArrayList>pode armazenar.</xref:System.Collections.ArrayList> <xref:System.Collections.ArrayList.Count%2A>é o número de elementos que estão realmente a ser <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Count%2A>       Capacidade sempre é maior que ou igual a <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> Se <xref:System.Collections.ArrayList.Count%2A>excede a capacidade ao adicionar elementos, a capacidade é automaticamente aumentada por reallocating matriz interna antes de copiar os elementos antigos e adição de novos elementos.</xref:System.Collections.ArrayList.Count%2A>       A capacidade pode ser diminuída chamando <xref:System.Collections.ArrayList.TrimToSize%2A>ou definindo a propriedade de capacidade explicitamente.</xref:System.Collections.ArrayList.TrimToSize%2A> Quando o valor de capacidade está definido explicitamente, a matriz interna também é reatribuída para acomodar a capacidade especificada.       Obter o valor desta propriedade é uma operação de O(1); a definição da propriedade é um Nã (`n`) operação, onde `n` é a capacidade de novo."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "O número de elementos que o <xref href=&quot;System.Collections.ArrayList&quot;> </xref> pode conter."
  overload: System.Collections.ArrayList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Capacidade está definida como um valor inferior à <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Não há memória suficiente disponível no sistema."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clear
  id: Clear
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove todos os elementos do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Count%2A>está definido como zero e também são lançadas as referências a outros objetos de elementos da coleção.</xref:System.Collections.ArrayList.Count%2A>       <xref:System.Collections.ArrayList.Capacity%2A>permanece inalterado.</xref:System.Collections.ArrayList.Capacity%2A>  Para repor a capacidade dos <xref:System.Collections.ArrayList>, chamar <xref:System.Collections.ArrayList.TrimToSize%2A>ou defina o <xref:System.Collections.ArrayList.Capacity%2A>propriedade diretamente.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A> </xref:System.Collections.ArrayList> Trimming vazio <xref:System.Collections.ArrayList>define a capacidade dos <xref:System.Collections.ArrayList>para a capacidade predefinida.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_18_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_18_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_18_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.ArrayList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clone
  id: Clone
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cria uma cópia shallow o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Uma cópia de uma coleção shallow copia apenas os elementos da coleção, se são tipos de referência ou tipos de valor, mas não copia os objetos que consulte as referências. As referências a nova coleção apontam para os objetos do mesmos que as referências na coleção original apontam para.       Em contrapartida, uma cópia profunda de uma coleção copia os elementos e tudo direta ou indiretamente referenciada pelos elementos.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Uma cópia shallow o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se um elemento no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Este método efetua uma pesquisa linear; Por conseguinte, este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Este método determina igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  syntax:
    content: public virtual bool Contains (object item);
    parameters:
    - id: item
      type: System.Object
      description: "O <xref:System.Object>Localizar no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> is found in the <xref href=&quot;System.Collections.ArrayList&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.ArrayList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  id: CopyTo(System.Array)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia toda a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> para um ecrã compatível com unidimensional <xref:System.Array>, começando no início da matriz de destino.</xref:System.Array>"
  remarks: "A matriz especificada tem de ser um tipo compatível.       Este método utiliza <xref:System.Array.Copy%2A?displayProperty=fullName>para copiar os elementos.</xref:System.Array.Copy%2A?displayProperty=fullName>       Os elementos são copiados para o <xref:System.Array>pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cs[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.arr_6_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_6_1.vb)]\n [!code-cpp[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.arr_6_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array);
    parameters:
    - id: array
      type: System.Array
      description: "O unidimensional <xref:System.Array>que é o destino dos elementos copiados <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> O <xref:System.Array>tem de ter a indexação com base em zero.</xref:System.Array>"
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       - ou - o número de elementos na origem de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é superior ao número de elementos que o destino <code>array</code> pode conter."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da origem de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> não pode ser convertido automaticamente para o tipo de destino <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia toda a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> para um ecrã compatível com unidimensional <xref:System.Array>, começando no índice da matriz de destino especificado.</xref:System.Array>"
  remarks: "A matriz especificada tem de ser um tipo compatível.       Este método utiliza <xref:System.Array.Copy%2A?displayProperty=fullName>para copiar os elementos.</xref:System.Array.Copy%2A?displayProperty=fullName>       Os elementos são copiados para o <xref:System.Array>pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_27_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_27_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_27_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "O unidimensional <xref:System.Array>que é o destino dos elementos copiados <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> O <xref:System.Array>tem de ter a indexação com base em zero.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "O índice baseado em zero `array` em que copiar começa."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       - ou - o número de elementos na origem de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é superior ao espaço disponível desde o <code>arrayIndex</code> ao fim do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da origem de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> não pode ser convertido automaticamente para o tipo de destino <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia um intervalo de elementos desde o <xref href=&quot;System.Collections.ArrayList&quot;> </xref> para um ecrã compatível com unidimensional <xref:System.Array>, começando no índice da matriz de destino especificado.</xref:System.Array>"
  remarks: "A matriz especificada tem de ser um tipo compatível.       Este método utiliza <xref:System.Array.Copy%2A?displayProperty=fullName>para copiar os elementos.</xref:System.Array.Copy%2A?displayProperty=fullName>       Os elementos são copiados para o <xref:System.Array>pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Este método é um Nã (`n`) operação, onde `n` é `count`."
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/971aa346-8de3-42af-8cd4-_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/971aa346-8de3-42af-8cd4-_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/971aa346-8de3-42af-8cd4-_1.vb)]"
  syntax:
    content: public virtual void CopyTo (int index, Array array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero na origem de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> em que copiar começa."
    - id: array
      type: System.Array
      description: "O unidimensional <xref:System.Array>que é o destino dos elementos copiados <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> O <xref:System.Array>tem de ter a indexação com base em zero.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "O índice baseado em zero `array` em que copiar começa."
    - id: count
      type: System.Int32
      description: "O número de elementos para copiar."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>arrayIndex</code> é menor que zero.       - ou - <code>count</code> é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       - ou - <code>index</code> é igual ou maior do que o <xref:System.Collections.ArrayList.Count*> da origem de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - ou - o número de elementos desde <code>index</code> ao fim da origem de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é superior ao espaço disponível desde o <code>arrayIndex</code> ao fim do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da origem de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> não pode ser convertido automaticamente para o tipo de destino <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Count
  id: Count
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém o número de elementos contidos, na verdade, o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Capacity%2A>é o número de elementos que o <xref:System.Collections.ArrayList>pode armazenar.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A> Contagem é o número de elementos que estão realmente a ser <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       <xref:System.Collections.ArrayList.Capacity%2A>é sempre igual ou superior à contagem.</xref:System.Collections.ArrayList.Capacity%2A> Se a contagem de excede <xref:System.Collections.ArrayList.Capacity%2A>durante a adição de elementos, a capacidade é automaticamente aumento reallocating matriz interna antes de copiar os elementos antigos e adição de novos elementos.</xref:System.Collections.ArrayList.Capacity%2A>       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "O número de elementos contidos, na verdade, o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  id: FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper com um tamanho fixo."
  remarks: "Este invólucro pode ser utilizado para evitar adições ao e eliminações do original <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> Os elementos ainda podem ser modificados ou substituídos.       Uma coleção com um tamanho fixo é simplesmente uma coleção com um wrapper que impede a adição e remoção de elementos; Por conseguinte, caso sejam feitas alterações para a colecção subjacente, incluindo a adição ou remoção de elementos, a coleção de tamanho fixo reflete essas alterações.       Este método é uma operação de O(1)."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/m-system.collections.arr_12_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_12_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/m-system.collections.arr_12_1.cpp)]"
  syntax:
    content: public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> moldar."
    return:
      type: System.Collections.ArrayList
      description: "Um <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper com um tamanho fixo."
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  id: FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um <xref:System.Collections.IList>wrapper com um tamanho fixo.</xref:System.Collections.IList>"
  remarks: "Este invólucro pode ser utilizado para evitar adições ao e eliminações do original <xref:System.Collections.IList>.</xref:System.Collections.IList> Os elementos ainda podem ser modificados ou substituídos.       Uma coleção com um tamanho fixo é simplesmente uma coleção com um wrapper que impede a adição e remoção de elementos; Por conseguinte, caso sejam feitas alterações para a colecção subjacente, incluindo a adição ou remoção de elementos, a coleção de tamanho fixo reflete essas alterações.       Este método é uma operação de O(1)."
  syntax:
    content: public static System.Collections.IList FixedSize (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "O <xref:System.Collections.IList>Moldar.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Um <xref:System.Collections.IList>wrapper com um tamanho fixo.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um enumerador para todo o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "O `foreach` declaração do Estado de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Por conseguinte, utilizando `foreach` recomenda-se, em vez de manipular diretamente o enumerador.       Enumeradores podem ser utilizados para ler os dados da coleção, mas não pode ser utilizados para modificar a colecção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento da coleção. <xref:System.Collections.IEnumerator.Reset%2A>também oferece o enumerador novamente para nesta posição.</xref:System.Collections.IEnumerator.Reset%2A>  Nesta posição <xref:System.Collections.IEnumerator.Current%2A>não está definido.</xref:System.Collections.IEnumerator.Current%2A> Por conseguinte, tem de chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção de antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Devolve o mesmo objeto até ser <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>transmite o fim da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>devolve `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nesta posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também devolvem `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A>devolvido `false`, <xref:System.Collections.IEnumerator.Current%2A>não está definido.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Para definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção, pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permanece inalterada. Caso sejam feitas alterações à coleção, como adicionar, modificar ou eliminar elementos, o enumerador está irrevogavelmente inválido e o respetivo comportamento não está definido.       O enumerador não tem acesso exclusivo à coleção; Por conseguinte, a enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread.  Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda.  Para permitir a coleção ser acedido por vários threads para ler e escrever, tem de implementar a seus próprios sincronização.       Este método é uma operação de O(1)."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_2_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_2_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Um <xref:System.Collections.IEnumerator>para todo o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  id: GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um enumerador de um intervalo de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "O `foreach` declaração do Estado de linguagem c# (`for each` no Visual C++, `For Each` Visual Basic) oculta a complexidade dos enumeradores.  Por conseguinte, utilizando `foreach` recomenda-se, em vez de manipular diretamente o enumerador.       Enumeradores podem ser utilizados para ler os dados da coleção, mas não pode ser utilizados para modificar a colecção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento da coleção. <xref:System.Collections.IEnumerator.Reset%2A>também oferece o enumerador novamente para nesta posição.</xref:System.Collections.IEnumerator.Reset%2A>  Nesta posição <xref:System.Collections.IEnumerator.Current%2A>não está definido.</xref:System.Collections.IEnumerator.Current%2A> Por conseguinte, tem de chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção de antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Devolve o mesmo objeto até ser <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>transmite o fim da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>devolve `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nesta posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também devolvem `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A>devolvido `false`, <xref:System.Collections.IEnumerator.Current%2A>não está definido.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Para definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção, pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permanece inalterada. Caso sejam feitas alterações à coleção, como adicionar, modificar ou eliminar elementos, o enumerador está irrevogavelmente inválido e o respetivo comportamento não está definido.       O enumerador não tem acesso exclusivo à coleção; Por conseguinte, a enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread.  Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda.  Para permitir a coleção ser acedido por vários threads para ler e escrever, tem de implementar a seus próprios sincronização.       Este método é uma operação de O(1).      ## Versão de compatibilidade no .NET Framework versões 1.0 e 1.1, o enumerador para um <xref:System.Collections.ArrayList>wrapper devolvido pelo <xref:System.Collections.ArrayList.Adapter%2A>método Tratado o segundo argumento, como um limite superior, em vez de uma contagem.</xref:System.Collections.ArrayList.Adapter%2A> </xref:System.Collections.ArrayList> No [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] o segundo argumento corretamente é tratado como uma contagem."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_10_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_10_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero de início do <xref href=&quot;System.Collections.ArrayList&quot;> </xref> secção que o enumerador deve consultar a."
    - id: count
      type: System.Int32
      description: "O número de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> secção que o enumerador deve consultar a."
    return:
      type: System.Collections.IEnumerator
      description: "Um <xref:System.Collections.IEnumerator>para o intervalo especificado de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>count</code> é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> não especificar um intervalo válido no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um <xref href=&quot;System.Collections.ArrayList&quot;> </xref> que representa um subconjunto dos elementos de origem <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Este método não cria cópias dos elementos. O novo <xref:System.Collections.ArrayList>é apenas uma janela de vista na origem <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> No entanto, todas as alterações subsequentes para a origem <xref:System.Collections.ArrayList>tem de ser efetuada através desta janela de vista <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Caso sejam feitas alterações diretamente para a origem <xref:System.Collections.ArrayList>, a janela de vista <xref:System.Collections.ArrayList>é invalidado e quaisquer operações na mesma irão devolver um <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Este método é uma operação de O(1)."
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/m-system.collections.arr_7_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/m-system.collections.arr_7_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_7_1.vb)]"
  syntax:
    content: public virtual System.Collections.ArrayList GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "O baseado em zero <xref href=&quot;System.Collections.ArrayList&quot;> </xref> o índice em que o intervalo é iniciado."
    - id: count
      type: System.Int32
      description: "O número de elementos no intervalo."
    return:
      type: System.Collections.ArrayList
      description: "Um <xref href=&quot;System.Collections.ArrayList&quot;> </xref> que representa um subconjunto dos elementos de origem <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.GetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>count</code> é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> denota um intervalo válido de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Procura especificado <xref:System.Object>e devolve o índice baseado em zero da primeira ocorrência dentro de todo o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "O <xref:System.Collections.ArrayList>são procurados reencaminhar que começa no primeiro elemento e termina no último elemento.</xref:System.Collections.ArrayList>       Este método efetua uma pesquisa linear; Por conseguinte, este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Este método determina igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_28_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_28_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_28_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>Localizar no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "O índice baseado em zero da primeira ocorrência de <code> value </code> dentro de todo o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, se encontrado; caso contrário, -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  id: IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Procura especificado <xref:System.Object>e devolve o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> que expande desde o índice especificado para o último elemento.</xref:System.Object>"
  remarks: "O <xref:System.Collections.ArrayList>são procurados reencaminhar começando `startIndex` e termina no último elemento.</xref:System.Collections.ArrayList>       Este método efetua uma pesquisa linear; Por conseguinte, este método é um Nã (`n`) operação, onde `n` é o número de elementos desde `startIndex` ao fim do <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Este método determina igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_22_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_22_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_22_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>Localizar no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "O índice baseado em zero inicial da pesquisa. 0 (zero) é válido numa lista vazia."
    return:
      type: System.Int32
      description: "O índice baseado em zero da primeira ocorrência de <code> value </code> dentro do intervalo de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> que expande-se do <code> startIndex </code> para o último elemento, se encontrado; caso contrário, -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>está fora do intervalo dos índices válidos para o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Procura especificado <xref:System.Object>e devolve o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> que começa no índice especificado e contém o número especificado de elementos.</xref:System.Object>"
  remarks: "O <xref:System.Collections.ArrayList>são procurados reencaminhar começando `startIndex` e terminado em `startIndex` plus `count` menos 1, se `count` é maior que 0.</xref:System.Collections.ArrayList>       Este método efetua uma pesquisa linear; Por conseguinte, este método é um Nã (`n`) operação, onde `n` é `count`.       Este método determina igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_19_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_19_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_19_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>Localizar no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "O índice baseado em zero inicial da pesquisa. 0 (zero) é válido numa lista vazia."
    - id: count
      type: System.Int32
      description: "O número de elementos na secção para procurar."
    return:
      type: System.Int32
      description: "O índice baseado em zero da primeira ocorrência de <code> value </code> dentro do intervalo de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> que começa em <code> startIndex </code> e contém <code> count </code> número de elementos, se encontrado; caso contrário, -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>está fora do intervalo dos índices válidos para o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - ou - <code>count</code> é menor que zero.       - ou - <code>startIndex</code> e <code>count</code> não especificar uma secção válida a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Insere um elemento para a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> no índice especificado."
  remarks: "<xref:System.Collections.ArrayList>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.ArrayList>       Se <xref:System.Collections.ArrayList.Count%2A>já for igual a <xref:System.Collections.ArrayList.Capacity%2A>, a capacidade dos <xref:System.Collections.ArrayList>é aumentado por automaticamente reallocating matriz interna, e os elementos existentes são copiados para a matriz nova antes do novo elemento de é adicionado.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Se `index` é igual ao <xref:System.Collections.ArrayList.Count%2A>, `value` é adicionada ao fim do <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Count%2A>       Em coleções de elementos contíguas, tais como listas, os elementos que se seguem no ponto de inserção mover para baixo para acomodar o novo elemento. Se a coleção está indexada, os índices de elementos que são movidos também são atualizados. Este comportamento não é aplicável a coleções onde os elementos são, essencialmente, agrupados em registos, tais como uma tabela hash.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/m-system.collections.arr_15_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_15_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/m-system.collections.arr_15_1.cpp)]"
  syntax:
    content: public virtual void Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero que `value` devem ser inseridos."
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para inserir.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>index</code> é superior ao <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  id: InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Insere os elementos de uma coleção para o <xref href=&quot;System.Collections.ArrayList&quot;> </xref> no índice especificado."
  remarks: "<xref:System.Collections.ArrayList>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.ArrayList>       Se o novo <xref:System.Collections.ArrayList.Count%2A>(atual <xref:System.Collections.ArrayList.Count%2A>juntamente com o tamanho da colecção) serão superiores a <xref:System.Collections.ArrayList.Capacity%2A>, a capacidade da <xref:System.Collections.ArrayList>é aumentado por reallocating automaticamente a matriz interna para acomodar os novos elementos, e os elementos existentes são copiados para a matriz nova antes dos novos elementos a serem adicionados.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Se `index` é igual a <xref:System.Collections.ArrayList.Count%2A>, os elementos são adicionados ao fim do <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Count%2A>       A ordem dos elementos no <xref:System.Collections.ICollection>é preservado na <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Em coleções de elementos contíguas, tais como listas, os elementos que se seguem no ponto de inserção mover para baixo para acomodar o novo elemento. Se a coleção está indexada, os índices de elementos que são movidos também são atualizados. Este comportamento não é aplicável a coleções onde os elementos são, essencialmente, agrupados em registos, tais como uma tabela hash.       Este método é um Nã (`n` + `m`) operação, onde `n` é o número de elementos a ser adicionado e `m` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/2b051d32-7260-4f65-b4d6-_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/2b051d32-7260-4f65-b4d6-_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/2b051d32-7260-4f65-b4d6-_1.cpp)]"
  syntax:
    content: public virtual void InsertRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero à qual devem ser introduzidos novos elementos."
    - id: c
      type: System.Collections.ICollection
      description: "O <xref:System.Collections.ICollection>cujos elementos devem ser inseridos o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> A própria coleção não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, mas pode conter elementos de <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.InsertRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>index</code> é superior ao <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.ArrayList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem um tamanho fixo."
  remarks: "Uma coleção com um tamanho fixo não permite a adição ou remoção de elementos depois da coleção é criada, mas permite a modificação de elementos existentes.       Uma coleção com um tamanho fixo é simplesmente uma coleção com um wrapper que impede a adição e remoção de elementos; Por conseguinte, caso sejam feitas alterações para a colecção subjacente, incluindo a adição ou remoção de elementos, a coleção de tamanho fixo reflete essas alterações.       Obter o valor desta propriedade é uma operação de O(1)."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/p-system.collections.arr_2_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_2_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/p-system.collections.arr_2_1.cpp)]"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem fixa tamanho; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura."
  remarks: "Uma coleção que é só de leitura não permite a adição, remoção ou modificação de elementos depois de criar a coleção.       Uma coleção que é só de leitura é simplesmente uma coleção com um wrapper que impede a modificar a coleção; Por conseguinte, caso sejam feitas alterações para a colecção subjacente, a coleção só de leitura reflete essas alterações.       Obter o valor desta propriedade é uma operação de O(1)."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/p-system.collections.arr_3_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/p-system.collections.arr_3_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se o acesso à <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é sincronizado (seguros para threads)."
  remarks: "Para garantir a segurança de thread do <xref:System.Collections.ArrayList>, todas as operações tem de ser efetuadas através de wrapper devolvido pelo <xref:System.Collections.ArrayList.Synchronized%2A>método.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList>       Enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_0_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_0_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_0_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_0_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.arr_0_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.arr_0_2.cs)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o acesso à <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é sincronizado (seguros para threads); caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém ou define o elemento no índice especificado."
  remarks: "O Item devolve um <xref:System.Object>por isso terá de converter o valor devolvido para o tipo original para manipular a mesma.</xref:System.Object> É importante ter em atenção que <xref:System.Collections.ArrayList>não é uma coleção de tipo seguro.</xref:System.Collections.ArrayList> Para uma alternativa de tipo seguro, consulte <xref:System.Collections.Generic.List%601>.</xref:System.Collections.Generic.List%601>       <xref:System.Collections.ArrayList>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.ArrayList>       Esta propriedade fornece a capacidade de aceder um elemento específico da coleção, utilizando a seguinte sintaxe: `myCollection[index]`.       A linguagem c# utiliza a palavra-chave para definir os indexadores em vez de implementar a propriedade do Item. Visual Basic implementa Item como uma propriedade predefinida, que fornece a mesma funcionalidade de indexação.       Obter o valor desta propriedade é uma operação de O(1); definir a propriedade também é uma operação O(1)."
  example:
  - "The following code example creates an <xref:System.Collections.ArrayList> and adds several items. The example demonstrates accessing elements with the Item property (the indexer in C#), and changing an element by assigning a new value to the Item property for a specified index. The example also shows that the Item property cannot be used to access or add elements outside the current size of the list.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#1](~/add/codesnippet/cpp/p-system.collections.arr_1_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Item#1](~/add/codesnippet/csharp/p-system.collections.arr_1_1.cs)]\n [!code-vb[System.Collections.ArrayList.Item#1](~/add/codesnippet/visualbasic/p-system.collections.arr_1_1.vb)]  \n  \n The following example uses the Item property explicitly to assign values to items in the list. The example defines a class that inherits an <xref:System.Collections.ArrayList> and adds a method to scramble the list items.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#2](~/add/codesnippet/cpp/p-system.collections.arr_1_2.cpp)]\n [!code-vb[System.Collections.ArrayList.Item#2](~/add/codesnippet/visualbasic/p-system.collections.arr_1_2.vb)]\n [!code-cs[System.Collections.ArrayList.Item#2](~/add/codesnippet/csharp/p-system.collections.arr_1_2.cs)]"
  syntax:
    content: public virtual object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero do elemento para obter ou definir."
    return:
      type: System.Object
      description: "O elemento no índice especificado."
  overload: System.Collections.ArrayList.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>index</code> é igual ou maior do que <xref:System.Collections.ArrayList.Count*>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  id: LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Procura especificado <xref:System.Object>e devolve o índice baseado em zero da última ocorrência dentro de todo o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "O <xref:System.Collections.ArrayList>são procurados trás começando o último elemento e termina no primeiro elemento.</xref:System.Collections.ArrayList>       Este método efetua uma pesquisa linear; Por conseguinte, este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_14_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_14_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_14_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>Localizar no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "O índice baseado em zero da última ocorrência de <code> value </code> dentro de toda a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, se encontrado; caso contrário, -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  id: LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Procura especificado <xref:System.Object>e devolve o índice baseado em zero da última ocorrência dentro do intervalo de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> que expande-se do primeiro elemento para o índice especificado.</xref:System.Object>"
  remarks: "O <xref:System.Collections.ArrayList>está a procurar com versões anteriores começando `startIndex` e termina no primeiro elemento.</xref:System.Collections.ArrayList>       Este método efetua uma pesquisa linear; Por conseguinte, este método é um Nã (`n`) operação, onde `n` é o número de elementos desde o início do <xref:System.Collections.ArrayList>para `startIndex`.</xref:System.Collections.ArrayList>       Este método determina igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_26_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_26_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_26_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>Localizar no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "O índice baseado em zero inicial da pesquisa com versões anteriores."
    return:
      type: System.Int32
      description: "O índice baseado em zero da última ocorrência de <code> value </code> dentro do intervalo de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> que expande a partir do primeiro elemento para <code> startIndex </code>, se encontrado; caso contrário, -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>está fora do intervalo dos índices válidos para o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Procura especificado <xref:System.Object>e devolve o índice baseado em zero da última ocorrência dentro do intervalo de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> que contém o número especificado de elementos e termina no índice especificado.</xref:System.Object>"
  remarks: "O <xref:System.Collections.ArrayList>está a procurar com versões anteriores começando `startIndex` e terminado em `startIndex` menos `count` plus 1, se `count` é maior que 0.</xref:System.Collections.ArrayList>       Este método efetua uma pesquisa linear; Por conseguinte, este método é um Nã (`n`) operação, onde `n` é `count`.       Este método determina igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element. Note that `LastIndexOf` is a backward search; therefore, `count` must be less than or equal to `startIndex` + 1.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/62fe9219-7086-43ad-b565-_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/62fe9219-7086-43ad-b565-_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/62fe9219-7086-43ad-b565-_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>Localizar no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "O índice baseado em zero inicial da pesquisa com versões anteriores."
    - id: count
      type: System.Int32
      description: "O número de elementos na secção para procurar."
    return:
      type: System.Int32
      description: "O índice baseado em zero da última ocorrência de <code> value </code> dentro do intervalo de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref> que contenha <code> count </code> número de elementos e termina no <code> startIndex </code>, se encontrado; caso contrário, -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>está fora do intervalo dos índices válidos para o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - ou - <code>count</code> é menor que zero.       - ou - <code>startIndex</code> e <code>count</code> não especificar uma secção válida a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  id: ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um só de leitura <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper."
  remarks: "Para evitar quaisquer modificações a `list`, expor `list` apenas através deste wrapper.       Uma coleção que é só de leitura é simplesmente uma coleção com um wrapper que impede a modificar a coleção. Caso sejam feitas alterações para a colecção subjacente, a coleção só de leitura reflete essas alterações.       Este método é uma operação de O(1)."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_9_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_9_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_9_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> moldar."
    return:
      type: System.Collections.ArrayList
      description: "Um só de leitura <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper em torno <code> list </code>."
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  id: ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um só de leitura <xref:System.Collections.IList>wrapper.</xref:System.Collections.IList>"
  remarks: "Para evitar quaisquer modificações a `list`, expor `list` apenas através deste wrapper.       Uma coleção que é só de leitura é simplesmente uma coleção com um wrapper que impede a modificar a coleção. Caso sejam feitas alterações para a colecção subjacente, a coleção só de leitura reflete essas alterações.       Este método é uma operação de O(1)."
  syntax:
    content: public static System.Collections.IList ReadOnly (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "O <xref:System.Collections.IList>Moldar.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Um só de leitura <xref:System.Collections.IList>wrapper em torno <code> list </code>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove a primeira ocorrência de um objeto específico do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Se o <xref:System.Collections.ArrayList>não contém o objeto especificado, o <xref:System.Collections.ArrayList>permanece inalterada.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Sem exceção é emitida.       Este método efetua uma pesquisa linear; Por conseguinte, este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Este método determina igualdade chamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Em coleções de elementos contíguas, tais como listas, os elementos que se seguem o elemento removido mover para cima para ocupam o vacated lugar para cima. Se a coleção está indexada, os índices de elementos que são movidos também são atualizados. Este comportamento não é aplicável a coleções onde os elementos são, essencialmente, agrupados em registos, tais como uma tabela hash."
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_5_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_5_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_5_1.cs)]"
  syntax:
    content: public virtual void Remove (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "O <xref:System.Object>para remover o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove o elemento no índice especificado do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Depois de remover o elemento, o tamanho da colecção é ajustado e o valor do <xref:System.Collections.ArrayList.Count%2A>propriedade é diminuída por um.</xref:System.Collections.ArrayList.Count%2A>       Em coleções de elementos contíguas, tais como listas, os elementos que se seguem o elemento removido mover para cima para ocupam o vacated lugar para cima. Se a coleção está indexada, os índices de elementos que são movidos também são atualizados. Este comportamento não é aplicável a coleções onde os elementos são, essencialmente, agrupados em registos, tais como uma tabela hash.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_24_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_24_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_24_1.cs)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero do elemento para remover."
  overload: System.Collections.ArrayList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>index</code> é igual ou maior do que <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove um intervalo de elementos desde o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Em coleções de elementos contíguas, tais como listas, os elementos que se seguem o elemento removido mover para cima para ocupam o vacated lugar para cima. Se a coleção está indexada, os índices de elementos que são movidos também são atualizados. Este comportamento não é aplicável a coleções onde os elementos são, essencialmente, agrupados em registos, tais como uma tabela hash.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_21_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_21_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_21_1.cs)]"
  syntax:
    content: public virtual void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero inicial do intervalo de elementos para remover."
    - id: count
      type: System.Int32
      description: "O número de elementos para remover."
  overload: System.Collections.ArrayList.RemoveRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>count</code> é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> denota um intervalo válido de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  id: Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um <xref href=&quot;System.Collections.ArrayList&quot;> </xref> cujos elementos são cópias do valor especificado."
  remarks: "<xref:System.Collections.ArrayList>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.ArrayList>       Este método é um Nã (`n`) operação, onde `n` é `count`."
  example:
  - "The following code example shows how to create and initialize a new <xref:System.Collections.ArrayList> with the same value.  \n  \n [!code-cpp[Classic ArrayList.Repeat Example#1](~/add/codesnippet/cpp/m-system.collections.arr_1_1.cpp)]\n [!code-cs[Classic ArrayList.Repeat Example#1](~/add/codesnippet/csharp/m-system.collections.arr_1_1.cs)]\n [!code-vb[Classic ArrayList.Repeat Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_1_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList Repeat (object value, int count);
    parameters:
    - id: value
      type: System.Object
      description: "O <xref:System.Object>copiar várias vezes na nova <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: count
      type: System.Int32
      description: "O número de vezes `value` deve ser copiado."
    return:
      type: System.Collections.ArrayList
      description: "Um <xref href=&quot;System.Collections.ArrayList&quot;> </xref> com <code> count </code> número de elementos, as quais são as cópias do <code> value </code>."
  overload: System.Collections.ArrayList.Repeat*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code>é menor que zero."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse
  id: Reverse
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inverte a ordem dos elementos em todo o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Este método utiliza <xref:System.Array.Reverse%2A?displayProperty=fullName>para inverter a ordem dos elementos de forma a que o elemento no <xref:System.Collections.ArrayList>[i], onde i qualquer índice dentro do intervalo, move para <xref:System.Collections.ArrayList>[j], onde j igual a `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to reverse the sort order of the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Reverse Example#1](~/add/codesnippet/csharp/m-system.collections.arr_20_1.cs)]\n [!code-cpp[Classic ArrayList.Reverse Example#1](~/add/codesnippet/cpp/m-system.collections.arr_20_1.cpp)]\n [!code-vb[Classic ArrayList.Reverse Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_20_1.vb)]"
  syntax:
    content: public virtual void Reverse ();
    parameters: []
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inverte a ordem dos elementos no intervalo especificado."
  remarks: "Este método utiliza <xref:System.Array.Reverse%2A?displayProperty=fullName>para inverter a ordem dos elementos de forma a que o elemento no <xref:System.Collections.ArrayList>[i], onde i qualquer índice dentro do intervalo, move para <xref:System.Collections.ArrayList>[j], onde j igual a `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Este método é um Nã (`n`) operação, onde `n` é `count`."
  example:
  - "The following code example shows how to reverse the sort order of the values in a range of elements in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_3_1.cpp)]\n [!code-cs[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_3_1.cs)]\n [!code-vb[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero inicial do intervalo para inverter."
    - id: count
      type: System.Int32
      description: "O número de elementos no intervalo para inverter."
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>count</code> é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> denota um intervalo válido de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura."
  platform:
  - net462
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  id: SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia os elementos de uma coleção ao longo de um intervalo de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>aceita `null` como um valor válido e permite que os elementos duplicados.</xref:System.Collections.ArrayList>       A ordem dos elementos no <xref:System.Collections.ICollection>é preservado na <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Este método é um Nã (`n` + 1) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/23e2a8fa-8e09-46ee-8256-_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/23e2a8fa-8e09-46ee-8256-_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/23e2a8fa-8e09-46ee-8256-_1.vb)]"
  syntax:
    content: public virtual void SetRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "O baseado em zero <xref href=&quot;System.Collections.ArrayList&quot;> </xref> índice no qual pretende iniciar a copiar os elementos de `c`."
    - id: c
      type: System.Collections.ICollection
      description: "O <xref:System.Collections.ICollection>cujos elementos para copiar para o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> A própria coleção não pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, mas pode conter elementos de <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.SetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>index</code> mais o número de elementos na <code>c</code> é superior ao <xref:System.Collections.ArrayList.Count*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort
  id: Sort
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ordena os elementos em todo o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Este método utiliza <xref:System.Array.Sort%2A?displayProperty=fullName>, que utiliza o algoritmo de QuickSort.</xref:System.Array.Sort%2A?displayProperty=fullName> O algoritmo de QuickSort é uma comparação de ordenação (também denominada uma ordenação instável), que significa que um &quot;menor ou igual a&quot; a operação de comparação determina quais dos dois elementos devem ocorrer primeiro na lista ordenada final. No entanto, se dois elementos são iguais, respetiva ordem original não pode ser mantida. Em contrapartida, uma ordenação estável preserva a ordem dos elementos que são iguais. Para efetuar uma ordenação estável, tem de implementar um personalizado <xref:System.Collections.IComparer>interface para utilizar com as outras sobrecargas deste método.</xref:System.Collections.IComparer>       Em média, este método é um Nã (`n` registo `n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>; na pior das hipóteses é um Nã (`n`^&2;) operação.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Sort Example#1](~/add/codesnippet/csharp/m-system.collections.arr_11_1.cs)]\n [!code-vb[Classic ArrayList.Sort Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_11_1.vb)]\n [!code-cpp[Classic ArrayList.Sort Example#1](~/add/codesnippet/cpp/m-system.collections.arr_11_1.cpp)]"
  syntax:
    content: public virtual void Sort ();
    parameters: []
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ordena os elementos em todo o <xref href=&quot;System.Collections.ArrayList&quot;> </xref> utilizando o comparador especificado."
  remarks: "Utilize o método de ordenação para ordenar uma lista de objetos com um comparador personalizado que implementa o <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer> Se passa `null` para `comparer`, este método utiliza o <xref:System.IComparable>implementação de cada elemento.</xref:System.IComparable> Neste caso, tem de se certificar de que os objetos contidos na lista de implementam o <xref:System.Collections.IComparer>ocorrerá interface ou uma exceção.</xref:System.Collections.IComparer>       Além disso, utilizando o <xref:System.IComparable>implementação significa lista efetua uma ordenação de comparação (também denominada uma ordenação instável); ou seja, se dois elementos são iguais, respetiva ordem pode não ser mantida.</xref:System.IComparable> Em contrapartida, uma ordenação estável preserva a ordem dos elementos que são iguais. Para efetuar uma ordenação estável, tem de implementar um personalizado <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer>       Em média, este método é um Nã (`n` registo `n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>; na pior das hipóteses é um Nã (`n`^&2;) operação.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/cpp/m-system.collections.arr_16_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/csharp/m-system.collections.arr_16_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/visualbasic/m-system.collections.arr_16_1.vb)]"
  syntax:
    content: public virtual void Sort (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>implementação a utilizar ao comparar elementos.</xref:System.Collections.IComparer>       - ou - uma referência nula (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic) para utilizar o <xref:System.IComparable>implementação de cada elemento.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ocorreu um erro ao comparar dois elementos."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>foi transmitido para <code> comparer </code>, e os elementos na lista não implementam <xref:System.IComparable>.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ordena os elementos de um intervalo de elementos na <xref href=&quot;System.Collections.ArrayList&quot;> </xref> utilizando o comparador especificado."
  remarks: "Se `comparer` está definido como `null`, este método efetua uma ordenação de comparação (também denominada uma ordenação instável); ou seja, se dois elementos são iguais, respetiva ordem pode não ser mantida. Em contrapartida, uma ordenação estável preserva a ordem dos elementos que são iguais. Para efetuar uma ordenação estável, tem de implementar um personalizado <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer>       Em média, este método é um Nã (`n` registo `n`) operação, onde `n` é `count`; na pior das hipóteses é uma operação O(n^2)."
  example:
  - "The following code example shows how to sort the values in a range of elements in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/cpp/b0a7df76-2f5d-45d4-bb7a-_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/csharp/b0a7df76-2f5d-45d4-bb7a-_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/visualbasic/b0a7df76-2f5d-45d4-bb7a-_1.vb)]"
  syntax:
    content: public virtual void Sort (int index, int count, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero inicial do intervalo para ordenar."
    - id: count
      type: System.Int32
      description: "O comprimento do intervalo para ordenar."
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>implementação a utilizar ao comparar elementos.</xref:System.Collections.IComparer>       - ou - uma referência nula (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> no Visual Basic) para utilizar o <xref:System.IComparable>implementação de cada elemento.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>é menor que zero.       - ou - <code>count</code> é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> não especificar um intervalo válido no <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ocorreu um erro ao comparar dois elementos."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  id: Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper que seja sincronizado (seguros para threads)."
  remarks: "Para garantir a segurança de thread do <xref:System.Collections.ArrayList>, todas as operações tem de ser efetuadas através deste wrapper.</xref:System.Collections.ArrayList>       Enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_25_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_25_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_25_1.cs)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_25_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.arr_25_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.arr_25_2.cs)]"
  syntax:
    content: public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> a sincronizar."
    return:
      type: System.Collections.ArrayList
      description: "Um <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper que seja sincronizado (seguros para threads)."
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  id: Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um <xref:System.Collections.IList>wrapper que seja sincronizado (seguros para threads).</xref:System.Collections.IList>"
  remarks: "Para garantir a segurança de thread do <xref:System.Collections.ArrayList>, todas as operações tem de ser efetuadas através deste wrapper.</xref:System.Collections.ArrayList>       Enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_23_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_23_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_23_1.cs)]  \n  \n This method is an O(1) operation."
  syntax:
    content: public static System.Collections.IList Synchronized (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "O <xref:System.Collections.IList>a sincronizar.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Um <xref:System.Collections.IList>wrapper que seja sincronizado (seguros para threads).</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.SyncRoot
  id: SyncRoot
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um objeto que pode ser utilizado para sincronizar acesso para o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Para criar uma versão sincronizada a <xref:System.Collections.ArrayList>, utilize o <xref:System.Collections.ArrayList.Synchronized%2A>método.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList> No entanto, as classes derivadas podem fornecer os seus próprios versão sincronizado do <xref:System.Collections.ArrayList>utilizando a propriedade SyncRoot.</xref:System.Collections.ArrayList> O código de sincronização tem de efetuar operações em SyncRoot do <xref:System.Collections.ArrayList>, não diretamente no <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Isto assegura um funcionamento correto de coleções que são derivadas de outros objetos. Especificamente, mantém sincronização adequada com outros threads que podem ser simultaneamente modificar o <xref:System.Collections.ArrayList>objeto.</xref:System.Collections.ArrayList>       Enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_4_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_4_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_4_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Um objeto que pode ser utilizado para sincronizar acesso para o <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray
  id: ToArray
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia os elementos do <xref href=&quot;System.Collections.ArrayList&quot;> </xref> para um novo <xref:System.Object>matriz.</xref:System.Object>"
  remarks: "Os elementos são copiados utilizando <xref:System.Array.Copy%2A?displayProperty=fullName>, que é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  syntax:
    content: public virtual object[] ToArray ();
    parameters: []
    return:
      type: System.Object[]
      description: "Um <xref:System.Object>matriz contendo cópias dos elementos do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.ArrayList.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray(System.Type)
  id: ToArray(System.Type)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia os elementos do <xref href=&quot;System.Collections.ArrayList&quot;> </xref> a uma matriz nova do tipo de elemento especificado."
  remarks: "Todos os objetos no <xref:System.Collections.ArrayList>objecto será convertido para o <xref:System.Type>especificado no `type` parâmetro.</xref:System.Type> </xref:System.Collections.ArrayList>       Os elementos são copiados utilizando <xref:System.Array.Copy%2A?displayProperty=fullName>, que é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  example:
  - "The following copy example shows how to copy the elements of an <xref:System.Collections.ArrayList> to a string array.  \n  \n [!code-cs[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/csharp/m-system.collections.arr_17_1.cs)]\n [!code-cpp[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/cpp/m-system.collections.arr_17_1.cpp)]\n [!code-vb[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/visualbasic/m-system.collections.arr_17_1.vb)]"
  syntax:
    content: public virtual Array ToArray (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "O elemento <xref:System.Type>da matriz de destino para criar e copiar elementos.</xref:System.Type>"
    return:
      type: System.Array
      description: "Uma matriz do tipo de elemento especificado que contém cópias dos elementos do <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.ToArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da origem de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> não pode ser convertido automaticamente para o tipo especificado."
  platform:
  - net462
- uid: System.Collections.ArrayList.TrimToSize
  id: TrimToSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Define a capacidade para o número real de elementos a <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Este método pode ser utilizado para minimizar a sobrecarga memória de uma coleção se não existem novos elementos serão adicionados à coleção.       Para repor um <xref:System.Collections.ArrayList>para o estado inicial, chame o <xref:System.Collections.ArrayList.Clear%2A>método antes de chamar TrimToSize.</xref:System.Collections.ArrayList.Clear%2A> </xref:System.Collections.ArrayList> Trimming vazio <xref:System.Collections.ArrayList>define a capacidade dos <xref:System.Collections.ArrayList>para a capacidade predefinida.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_8_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_8_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_8_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.ArrayList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.ArrayList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.ArrayList.#ctor
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ArrayList.Add(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
- uid: System.Collections.ArrayList.Capacity
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
- uid: System.Collections.ArrayList.Clone
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
- uid: System.Collections.ArrayList.Contains(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
- uid: System.Collections.ArrayList.Count
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
- uid: System.Collections.ArrayList.GetEnumerator
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
- uid: System.Collections.ArrayList.IsFixedSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
- uid: System.Collections.ArrayList.Remove(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
- uid: System.Collections.ArrayList.Reverse
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
- uid: System.Collections.ArrayList.Sort
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
- uid: System.Collections.ArrayList.SyncRoot
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.ArrayList.ToArray(System.Type)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ArrayList.TrimToSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
- uid: System.Collections.ArrayList.#ctor*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList.ArrayList
- uid: System.Collections.ArrayList.Adapter*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter
  nameWithType: ArrayList.Adapter
- uid: System.Collections.ArrayList.Add*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add
  nameWithType: ArrayList.Add
- uid: System.Collections.ArrayList.AddRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange
  nameWithType: ArrayList.AddRange
- uid: System.Collections.ArrayList.BinarySearch*
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch
  nameWithType: ArrayList.BinarySearch
- uid: System.Collections.ArrayList.Capacity*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear
  nameWithType: ArrayList.Clear
- uid: System.Collections.ArrayList.Clone*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone
  nameWithType: ArrayList.Clone
- uid: System.Collections.ArrayList.Contains*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains
  nameWithType: ArrayList.Contains
- uid: System.Collections.ArrayList.CopyTo*
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo
  nameWithType: ArrayList.CopyTo
- uid: System.Collections.ArrayList.Count*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize
  nameWithType: ArrayList.FixedSize
- uid: System.Collections.ArrayList.GetEnumerator*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator
  nameWithType: ArrayList.GetEnumerator
- uid: System.Collections.ArrayList.GetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange
  nameWithType: ArrayList.GetRange
- uid: System.Collections.ArrayList.IndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf
  nameWithType: ArrayList.IndexOf
- uid: System.Collections.ArrayList.Insert*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert
  nameWithType: ArrayList.Insert
- uid: System.Collections.ArrayList.InsertRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange
  nameWithType: ArrayList.InsertRange
- uid: System.Collections.ArrayList.IsFixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item
  nameWithType: ArrayList.Item
- uid: System.Collections.ArrayList.LastIndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf
  nameWithType: ArrayList.LastIndexOf
- uid: System.Collections.ArrayList.ReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly
  nameWithType: ArrayList.ReadOnly
- uid: System.Collections.ArrayList.Remove*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove
  nameWithType: ArrayList.Remove
- uid: System.Collections.ArrayList.RemoveAt*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt
  nameWithType: ArrayList.RemoveAt
- uid: System.Collections.ArrayList.RemoveRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange
  nameWithType: ArrayList.RemoveRange
- uid: System.Collections.ArrayList.Repeat*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat
  nameWithType: ArrayList.Repeat
- uid: System.Collections.ArrayList.Reverse*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse
  nameWithType: ArrayList.Reverse
- uid: System.Collections.ArrayList.SetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange
  nameWithType: ArrayList.SetRange
- uid: System.Collections.ArrayList.Sort*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort
  nameWithType: ArrayList.Sort
- uid: System.Collections.ArrayList.Synchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized
  nameWithType: ArrayList.Synchronized
- uid: System.Collections.ArrayList.SyncRoot*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray
  nameWithType: ArrayList.ToArray
- uid: System.Collections.ArrayList.TrimToSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize
  nameWithType: ArrayList.TrimToSize
