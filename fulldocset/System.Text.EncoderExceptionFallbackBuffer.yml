### YamlMime:ManagedReference
items:
- uid: System.Text.EncoderExceptionFallbackBuffer
  id: EncoderExceptionFallbackBuffer
  children:
  - System.Text.EncoderExceptionFallbackBuffer.#ctor
  - System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)
  - System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)
  - System.Text.EncoderExceptionFallbackBuffer.GetNextChar
  - System.Text.EncoderExceptionFallbackBuffer.MovePrevious
  - System.Text.EncoderExceptionFallbackBuffer.Remaining
  langs:
  - csharp
  name: EncoderExceptionFallbackBuffer
  nameWithType: EncoderExceptionFallbackBuffer
  fullName: System.Text.EncoderExceptionFallbackBuffer
  type: Class
  summary: "Throws <xref:System.Text.EncoderFallbackException> when an input character cannot be converted to an encoded output byte sequence. This class cannot be inherited."
  remarks: "A common reason for an encoding or decoding operation to fail is if the underlying encoding class does not provide a mapping between a character and an equivalent byte sequence. If the input character cannot be converted to an output byte sequence, the encoding operation calls the <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A> method, which throws <xref:System.Text.EncoderFallbackException>.       The <xref:System.Text.EncoderFallbackBuffer?displayProperty=fullName> class, which represents a data buffer used in an encoding operation, is the base class for the EncoderExceptionFallbackBuffer class. However, instead of a data buffer, the EncoderExceptionFallbackBuffer class represents a standard behavior wherein an exception is thrown if an encoding operation fails. No actual data buffer exists, and the members designed to manipulate such a buffer do no significant work."
  syntax:
    content: 'public sealed class EncoderExceptionFallbackBuffer : System.Text.EncoderFallbackBuffer'
  inheritance:
  - System.Text.EncoderFallbackBuffer
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Text.EncoderExceptionFallbackBuffer.#ctor
  id: '#ctor'
  parent: System.Text.EncoderExceptionFallbackBuffer
  langs:
  - csharp
  name: EncoderExceptionFallbackBuffer()
  nameWithType: EncoderExceptionFallbackBuffer.EncoderExceptionFallbackBuffer()
  fullName: System.Text.EncoderExceptionFallbackBuffer.EncoderExceptionFallbackBuffer()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: "Initializes a new instance of the <xref href=&quot;System.Text.EncoderExceptionFallbackBuffer&quot;></xref> class."
  syntax:
    content: public EncoderExceptionFallbackBuffer ();
    parameters: []
  overload: System.Text.EncoderExceptionFallbackBuffer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)
  id: Fallback(System.Char,System.Int32)
  parent: System.Text.EncoderExceptionFallbackBuffer
  langs:
  - csharp
  name: Fallback(Char,Int32)
  nameWithType: EncoderExceptionFallbackBuffer.Fallback(Char,Int32)
  fullName: System.Text.EncoderExceptionFallbackBuffer.Fallback(Char,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: "Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the character that cannot be converted."
  remarks: "The <xref:System.Text.Encoding.GetBytes%2A> and <xref:System.Text.Encoder.Convert%2A> methods call Fallback if they encounter an unknown character in their input. In response, Fallback always throws <xref:System.Text.EncoderFallbackException>."
  syntax:
    content: public override bool Fallback (char charUnknown, int index);
    parameters:
    - id: charUnknown
      type: System.Char
      description: "An input character."
    - id: index
      type: System.Int32
      description: "The index position of the character in the input buffer."
    return:
      type: System.Boolean
      description: "None. No value is returned because the Fallback method always throws an exception."
  overload: System.Text.EncoderExceptionFallbackBuffer.Fallback*
  exceptions:
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "<code>charUnknown</code> cannot be encoded. This method always throws an exception that reports the value of the <code>charUnknown</code> and <code>index</code> parameters."
  platform:
  - net462
- uid: System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)
  id: Fallback(System.Char,System.Char,System.Int32)
  parent: System.Text.EncoderExceptionFallbackBuffer
  langs:
  - csharp
  name: Fallback(Char,Char,Int32)
  nameWithType: EncoderExceptionFallbackBuffer.Fallback(Char,Char,Int32)
  fullName: System.Text.EncoderExceptionFallbackBuffer.Fallback(Char,Char,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: "Throws an exception because the input character cannot be encoded. Parameters specify the value and index position of the surrogate pair in the input, and the nominal return value is not used."
  remarks: "The <xref:System.Text.Encoding.GetBytes%2A> and <xref:System.Text.Encoder.Convert%2A> methods call Fallback if they encounter a surrogate pair in their input. In response, Fallback always throws an exception."
  syntax:
    content: public override bool Fallback (char charUnknownHigh, char charUnknownLow, int index);
    parameters:
    - id: charUnknownHigh
      type: System.Char
      description: "The high surrogate of the input pair."
    - id: charUnknownLow
      type: System.Char
      description: "The low surrogate of the input pair."
    - id: index
      type: System.Int32
      description: "The index position of the surrogate pair in the input buffer."
    return:
      type: System.Boolean
      description: "None. No value is returned because the Fallback method always throws an exception."
  overload: System.Text.EncoderExceptionFallbackBuffer.Fallback*
  exceptions:
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "The character represented by <code>charUnknownHigh</code> and <code>charUnknownLow</code> cannot be encoded."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Either <code>charUnknownHigh</code> or <code>charUnknownLow</code> is invalid. <code>charUnknownHigh</code> is not between U+D800 and U+DBFF, inclusive, or <code>charUnknownLow</code> is not between U+DC00 and U+DFFF, inclusive."
  platform:
  - net462
- uid: System.Text.EncoderExceptionFallbackBuffer.GetNextChar
  id: GetNextChar
  parent: System.Text.EncoderExceptionFallbackBuffer
  langs:
  - csharp
  name: GetNextChar()
  nameWithType: EncoderExceptionFallbackBuffer.GetNextChar()
  fullName: System.Text.EncoderExceptionFallbackBuffer.GetNextChar()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: "Retrieves the next character in the exception fallback buffer."
  remarks: "Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the GetNextChar method always returns the Unicode NULL character."
  syntax:
    content: public override char GetNextChar ();
    parameters: []
    return:
      type: System.Char
      description: "The return value is always the Unicode character, NULL (U+0000).       A return value is defined, although it is unchanging, because this method implements an abstract method."
  overload: System.Text.EncoderExceptionFallbackBuffer.GetNextChar*
  exceptions: []
  platform:
  - net462
- uid: System.Text.EncoderExceptionFallbackBuffer.MovePrevious
  id: MovePrevious
  parent: System.Text.EncoderExceptionFallbackBuffer
  langs:
  - csharp
  name: MovePrevious()
  nameWithType: EncoderExceptionFallbackBuffer.MovePrevious()
  fullName: System.Text.EncoderExceptionFallbackBuffer.MovePrevious()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: "Causes the next call to the <xref:System.Text.EncoderExceptionFallbackBuffer.GetNextChar*> method to access the exception data buffer character position that is prior to the current position."
  remarks: "Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the MovePrevious method always returns `false`."
  syntax:
    content: public override bool MovePrevious ();
    parameters: []
    return:
      type: System.Boolean
      description: "The return value is always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>.       A return value is defined, although it is unchanging, because this method implements an abstract method."
  overload: System.Text.EncoderExceptionFallbackBuffer.MovePrevious*
  exceptions: []
  platform:
  - net462
- uid: System.Text.EncoderExceptionFallbackBuffer.Remaining
  id: Remaining
  parent: System.Text.EncoderExceptionFallbackBuffer
  langs:
  - csharp
  name: Remaining
  nameWithType: EncoderExceptionFallbackBuffer.Remaining
  fullName: System.Text.EncoderExceptionFallbackBuffer.Remaining
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: "Gets the number of characters in the current <xref href=&quot;System.Text.EncoderExceptionFallbackBuffer&quot;></xref> object that remain to be processed."
  remarks: "Because <xref:System.Text.EncoderExceptionFallbackBuffer> has no actual exception data buffer, the Remaining property always returns zero."
  syntax:
    content: public override int Remaining { get; }
    return:
      type: System.Int32
      description: "The return value is always zero.       A return value is defined, although it is unchanging, because this method implements an abstract method."
  overload: System.Text.EncoderExceptionFallbackBuffer.Remaining*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Text.EncoderFallbackBuffer
  isExternal: false
  name: System.Text.EncoderFallbackBuffer
- uid: System.Text.EncoderFallbackException
  isExternal: true
  name: System.Text.EncoderFallbackException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Text.EncoderExceptionFallbackBuffer.#ctor
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: EncoderExceptionFallbackBuffer()
  nameWithType: EncoderExceptionFallbackBuffer.EncoderExceptionFallbackBuffer()
  fullName: System.Text.EncoderExceptionFallbackBuffer.EncoderExceptionFallbackBuffer()
- uid: System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: Fallback(Char,Int32)
  nameWithType: EncoderExceptionFallbackBuffer.Fallback(Char,Int32)
  fullName: System.Text.EncoderExceptionFallbackBuffer.Fallback(Char,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: Fallback(Char,Char,Int32)
  nameWithType: EncoderExceptionFallbackBuffer.Fallback(Char,Char,Int32)
  fullName: System.Text.EncoderExceptionFallbackBuffer.Fallback(Char,Char,Int32)
- uid: System.Text.EncoderExceptionFallbackBuffer.GetNextChar
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: GetNextChar()
  nameWithType: EncoderExceptionFallbackBuffer.GetNextChar()
  fullName: System.Text.EncoderExceptionFallbackBuffer.GetNextChar()
- uid: System.Text.EncoderExceptionFallbackBuffer.MovePrevious
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: MovePrevious()
  nameWithType: EncoderExceptionFallbackBuffer.MovePrevious()
  fullName: System.Text.EncoderExceptionFallbackBuffer.MovePrevious()
- uid: System.Text.EncoderExceptionFallbackBuffer.Remaining
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: Remaining
  nameWithType: EncoderExceptionFallbackBuffer.Remaining
  fullName: System.Text.EncoderExceptionFallbackBuffer.Remaining
- uid: System.Text.EncoderExceptionFallbackBuffer.#ctor*
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: EncoderExceptionFallbackBuffer
  nameWithType: EncoderExceptionFallbackBuffer.EncoderExceptionFallbackBuffer
- uid: System.Text.EncoderExceptionFallbackBuffer.Fallback*
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: Fallback
  nameWithType: EncoderExceptionFallbackBuffer.Fallback
- uid: System.Text.EncoderExceptionFallbackBuffer.GetNextChar*
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: GetNextChar
  nameWithType: EncoderExceptionFallbackBuffer.GetNextChar
- uid: System.Text.EncoderExceptionFallbackBuffer.MovePrevious*
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: MovePrevious
  nameWithType: EncoderExceptionFallbackBuffer.MovePrevious
- uid: System.Text.EncoderExceptionFallbackBuffer.Remaining*
  parent: System.Text.EncoderExceptionFallbackBuffer
  isExternal: false
  name: Remaining
  nameWithType: EncoderExceptionFallbackBuffer.Remaining
