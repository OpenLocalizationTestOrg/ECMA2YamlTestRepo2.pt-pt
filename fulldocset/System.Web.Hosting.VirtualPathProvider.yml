### YamlMime:ManagedReference
items:
- uid: System.Web.Hosting.VirtualPathProvider
  id: VirtualPathProvider
  children:
  - System.Web.Hosting.VirtualPathProvider.#ctor
  - System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)
  - System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)
  - System.Web.Hosting.VirtualPathProvider.FileExists(System.String)
  - System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)
  - System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)
  - System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)
  - System.Web.Hosting.VirtualPathProvider.GetFile(System.String)
  - System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)
  - System.Web.Hosting.VirtualPathProvider.Initialize
  - System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService
  - System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)
  - System.Web.Hosting.VirtualPathProvider.Previous
  langs:
  - csharp
  name: VirtualPathProvider
  nameWithType: VirtualPathProvider
  fullName: System.Web.Hosting.VirtualPathProvider
  type: Class
  summary: "Fornece um conjunto de métodos que permitem uma aplicação Web para obter recursos a partir de um sistema de ficheiros virtual."
  remarks: "A classe de VirtualPathProvider fornece um conjunto de métodos para implementar um sistema de ficheiros virtual para uma aplicação Web. Num sistema de ficheiros virtual, os ficheiros e diretórios são geridos por um arquivo de dados que não seja o sistema de ficheiros fornecido pelo sistema operativo do servidor. Por exemplo, pode utilizar um sistema de ficheiros virtual para armazenar o conteúdo numa base de dados do SQL Server.       Pode armazenar qualquer ficheiro que está a ser processado no pedido num sistema de ficheiros virtual. Isto inclui:-as páginas ASP.NET, páginas principais, controlos de utilizador e outros objetos.      -Páginas Web padrão com extensões como. htm e. jpg.      -Qualquer extensão personalizado mapeado para um <xref:System.Web.Compilation.BuildProvider>instância.</xref:System.Web.Compilation.BuildProvider>      -Qualquer denominado tema no `App_Theme` pasta.       Não é possível armazenar ficheiros que geram assemblagens ao nível da aplicação num sistema de ficheiros virtual ou de pastas de aplicações do ASP.NET. Isto inclui:-ficheiro o global. asax.      -Ficheiros de Web. config.      -Ficheiros de dados de mapa de site utilizados pelo <xref:System.Web.XmlSiteMapProvider>.</xref:System.Web.XmlSiteMapProvider>      -Diretórios que contêm as assemblagens de aplicação ou que gerem as assemblagens de aplicação: `Bin`, `App_Code`, `App_GlobalResources`, qualquer `App_LocalResources`.      -A pasta de dados de aplicação, `App_Data`.      > [!NOTE] > Se um Web site é pré-compilada para a implementação, conteúdo fornecido por uma instância de VirtualPathProvider não está compilado e não existem instâncias de VirtualPathProvider são utilizadas pelo site pré-compilada.      ## Registar uma instância VirtualPathProvider personalizada VirtualPathProvider A deve ser registado com o sistema de compilação do ASP.NET, utilizando o <xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=fullName>método antes de qualquer página analisar ou compilação é executada a aplicação Web.</xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=fullName>       Normalmente, uma instância de VirtualPathProvider está registada num `AppInitialize` método definido no `App_Code` diretório, ou durante a `Application_Start` evento no `Global.asax` ficheiro. Para obter um exemplo de registar um VirtualPathProvider instância num `AppInitialize` método, consulte a secção de exemplo.       Pode registar uma instância de VirtualPathProvider durante a outros eventos, mas não serão invalidadas os páginas compilado e colocado na cache antes da instância de VirtualPathProvider está registada, mesmo que a nova instância de VirtualPathProvider iria fornecer a origem da página anteriormente compilados."
  example:
  - "The following code example is a VirtualPathProvider class implementation that creates a virtual file system using information stored in a <xref:System.Data.DataSet> object. The code example works with the code examples for the <xref:System.Web.Hosting.VirtualFile> and <xref:System.Web.Hosting.VirtualDirectory> classes to provide virtual resources from a data store that is loaded into a <xref:System.Data.DataSet> object.  \n  \n This example has four parts: the VirtualPathProvider class implementation, an XML data file used to populate the <xref:System.Data.DataSet> object, an `AppStart` object that contains an `AppInitialize` method used to register the VirtualPathProvider class with the compilation system, and an ASP.NET page that provides links to the virtual files.  \n  \n To use this sample code in an application, follow these steps.  \n  \n1.  Create a sample application on your Web server.  \n  \n2.  Copy the source code for the custom VirtualPathProvider object (see below) into a file in the application's `App_Code` directory.  \n  \n3.  Copy the source code for the custom <xref:System.Web.Hosting.VirtualDirectory> object (see the Example section in the <xref:System.Web.Hosting.VirtualDirectory> class overview topic) into a file in the application's `App_Code` directory.  \n  \n4.  Copy the source code for the custom <xref:System.Web.Hosting.VirtualFile> object (see the Example section in the <xref:System.Web.Hosting.VirtualFile> class overview topic) into a file in the application's `App_Code` directory.  \n  \n5.  Copy the source code for the `AppStart` object (see below) into a file in the application's `App_Code` directory.  \n  \n6.  Copy the XML data (see below) into a file named `XMLData.xml` into a file in the application's `App_Data` directory.  \n  \n7.  Copy the `default.aspx` file (see below) into the root directory of the sample application. Use a Web browser to open the `default.aspx` file, and then click the links on the page to see the contents of the virtual files.  \n  \n The first example is a custom VirtualPathProvider class. The <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> and <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> methods are overridden to indicate whether a requested directory is present in the virtual file system. The <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> and <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> methods are overridden to return custom <xref:System.Web.Hosting.VirtualDirectory> and <xref:System.Web.Hosting.VirtualFile> instances containing information from the virtual file system.  \n  \n The class also provides a `GetVirtualData` method used by the <xref:System.Web.Hosting.VirtualDirectory> and <xref:System.Web.Hosting.VirtualFile> classes to access the <xref:System.Data.DataSet> object containing the virtual file system data. In a production implementation, this method would typically be implemented in a business object responsible for interacting with the data store.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#20](~/add/codesnippet/csharp/t-system.web.hosting.vir_1_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#20](~/add/codesnippet/visualbasic/t-system.web.hosting.vir_1_1.vb)]  \n  \n The second example is the XML data file used to populate the <xref:System.Data.DataSet> object returned by the custom VirtualPathProvider object. This XML data is used to demonstrate using the VirtualPathProvider, <xref:System.Web.Hosting.VirtualDirectory>, and <xref:System.Web.Hosting.VirtualFile> objects to retrieve data from external data and is not intended to represent a production-quality data store.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n  <resource type=\"dir\"   \n    path=\"/vrDir\"   \n    parentPath=\"\"   \n    content=\"\">  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level1FileA.vrf\"  \n      parentPath=\"/vrDir\"   \n      content=\"This is the content of file Level1FileA.\">  \n    </resource>  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level1FileB.vrf\"  \n      parentPath=\"/vrDir\"   \n      content=\"This is the content of file Level1FileB.\">  \n    </resource>  \n    <resource type=\"dir\"   \n      path=\"/vrDir/Level2DirA\"   \n      parentPath=\"/vrDir\"   \n      content=\"\">  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level2DirA/Level2FileA.vrf\"   \n      parentPath=\"/vrDir/Level2DirA\"   \n      content=\"This is the content of file Level2FileA.\">  \n    </resource>  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level2DirA/Level2FileB.vrf\"  \n      parentPath=\"/vrDir/Level2DirA\"   \n      content=\"This is the content of file Level2FileB.\">  \n    </resource>  \n  </resource>  \n  <resource type=\"dir\"   \n    path=\"/vrDir/Level2DirB\"   \n    parentPath=\"/vrDir\"   \n    content=\"\">  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level2DirB/Level2FileA.vrf\"   \n      parentPath=\"/vrDir/Level2DirB\"   \n      content=\"This is the content of file Level2FileA.\">  \n    </resource>  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level2DirB/Level2FileB.vrf\"  \n      parentPath=\"/vrDir/Level2DirB\"   \n      content=\"This is the content of file Level2FileB.\">  \n    </resource>  \n  </resource>  \n</resource>  \n```  \n  \n The third example provides an `AppStart` object that contains an `AppInitialize` method. This method is called during the initialization of an ASP.NET application to perform any custom initialization required. In this case, it registers the custom VirtualPathProvider object with the ASP.NET build system.  \n  \n [!code-vb[System.Web.Hosting.VirtualPathProvider#10](~/add/codesnippet/visualbasic/t-system.web.hosting.vir_1_2.vb)]\n [!code-cs[System.Web.Hosting.VirtualPathProvider#10](~/add/codesnippet/csharp/t-system.web.hosting.vir_1_2.cs)]  \n  \n The last example is an ASP.NET page that contains links to the virtual files contained in the virtual file system.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#1](~/add/codesnippet/csharp/t-system.web.hosting.vir_1_3.aspx)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#1](~/add/codesnippet/visualbasic/t-system.web.hosting.vir_1_3.aspx)]"
  syntax:
    content: 'public abstract class VirtualPathProvider : MarshalByRefObject'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.#ctor
  id: '#ctor'
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: VirtualPathProvider()
  nameWithType: VirtualPathProvider.VirtualPathProvider()
  fullName: System.Web.Hosting.VirtualPathProvider.VirtualPathProvider()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Inicializa a classe para utilização por uma instância de classe herdada. Pode ser chamado este construtor apenas por uma classe herdada."
  remarks: "Ao substituir o construtor de VirtualPathProvider, diferir qualquer inicialização que tem de ocorrer depois do <xref:System.Web.Hosting.VirtualPathProvider>objeto se encontra registado junto do <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A>método.</xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> </xref:System.Web.Hosting.VirtualPathProvider>"
  example:
  - "The following code example is an implementation of the VirtualPathProvider constructor that initializes a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#25](~/add/codesnippet/csharp/m-system.web.hosting.vir_4_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#25](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_4_1.vb)]"
  syntax:
    content: protected VirtualPathProvider ();
    parameters: []
  overload: System.Web.Hosting.VirtualPathProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)
  id: CombineVirtualPaths(System.String,System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: CombineVirtualPaths(String,String)
  nameWithType: VirtualPathProvider.CombineVirtualPaths(String,String)
  fullName: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Combina um caminho de base com um caminho relativo para devolver um caminho completo para um recurso virtual."
  remarks: "Utilize o método CombineVirtualPaths para inspecionar os conteúdos de um caminho relativo a um recurso virtual e efetue quaisquer modificações necessárias.       A implementação predefinida combina o `basePath` e `relativePath` parâmetros, de acordo com o processamento padrão do caminho ASP.NET."
  syntax:
    content: public virtual string CombineVirtualPaths (string basePath, string relativePath);
    parameters:
    - id: basePath
      type: System.String
      description: "O caminho de base para a aplicação."
    - id: relativePath
      type: System.String
      description: "O caminho para o recurso virtual, relativo ao caminho da base."
    return:
      type: System.String
      description: "O caminho completo para um recurso virtual."
  overload: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)
  id: DirectoryExists(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: DirectoryExists(String)
  nameWithType: VirtualPathProvider.DirectoryExists(String)
  fullName: System.Web.Hosting.VirtualPathProvider.DirectoryExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Obtém um valor que indica se existe um diretório no sistema de ficheiros virtual."
  remarks: "Substitua o método de DirectoryExists para indicar ao sistema de compilação que o recurso representado pelo `virtualDir` existe no sistema de ficheiros virtual fornecido por este <xref:System.Web.Hosting.VirtualPathProvider>instância.</xref:System.Web.Hosting.VirtualPathProvider>       Se o personalizada <xref:System.Web.Hosting.VirtualPathProvider>classe não suporta diretórios, deverá devolver o método DirectoryExists `false`.</xref:System.Web.Hosting.VirtualPathProvider>      > [!NOTE] > Se o sistema de ficheiros virtual irá conter temas para o Web site (através da criação de um virtual `App_Themes` diretório), a personalizada <xref:System.Web.Hosting.VirtualPathProvider>classe tem de suportar diretórios.</xref:System.Web.Hosting.VirtualPathProvider>"
  example:
  - "The following code example is an implementation of the DirectoryExists method in a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#22](~/add/codesnippet/csharp/m-system.web.hosting.vir_5_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#22](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_5_1.vb)]"
  syntax:
    content: public virtual bool DirectoryExists (string virtualDir);
    parameters:
    - id: virtualDir
      type: System.String
      description: "O caminho para o diretório virtual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o diretório existe no sistema de ficheiros virtual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Hosting.VirtualPathProvider.DirectoryExists*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.FileExists(System.String)
  id: FileExists(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: FileExists(String)
  nameWithType: VirtualPathProvider.FileExists(String)
  fullName: System.Web.Hosting.VirtualPathProvider.FileExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Obtém um valor que indica se existe um ficheiro no sistema de ficheiros virtual."
  remarks: "Substitua o método de FileExists para indicar ao sistema de compilação que o recurso representado pelo `virtualPath` existe no sistema de ficheiros virtual fornecido por este <xref:System.Web.Hosting.VirtualPathProvider>instância.</xref:System.Web.Hosting.VirtualPathProvider>"
  example:
  - "The following code example is an implementation of the FileExists method in a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#21](~/add/codesnippet/csharp/m-system.web.hosting.vir_6_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#21](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_6_1.vb)]"
  syntax:
    content: public virtual bool FileExists (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "O caminho para o ficheiro virtual."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ficheiro existir no sistema de ficheiros virtual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Hosting.VirtualPathProvider.FileExists*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)
  id: GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: GetCacheDependency(String,IEnumerable,DateTime)
  nameWithType: VirtualPathProvider.GetCacheDependency(String,IEnumerable,DateTime)
  fullName: System.Web.Hosting.VirtualPathProvider.GetCacheDependency(String,IEnumerable,DateTime)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Cria uma dependência da cache com base nos caminhos de virtuais especificados."
  remarks: "Devolve a implementação predefinida do método GetCacheDependency `null`. Recursos virtuais cache para utilização posterior tem de substituir o método de GetCacheDependency ou <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A>método.</xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A>"
  example:
  - "The following code example implements the GetCacheDependency method for a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#28](~/add/codesnippet/csharp/a8fb412c-a81c-4f3f-b624-_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#28](~/add/codesnippet/visualbasic/a8fb412c-a81c-4f3f-b624-_1.vb)]"
  syntax:
    content: public virtual System.Web.Caching.CacheDependency GetCacheDependency (string virtualPath, System.Collections.IEnumerable virtualPathDependencies, DateTime utcStart);
    parameters:
    - id: virtualPath
      type: System.String
      description: "O caminho para o recurso virtual principal."
    - id: virtualPathDependencies
      type: System.Collections.IEnumerable
      description: "Uma matriz de caminhos para outros recursos de que o recurso virtual principal."
    - id: utcStart
      type: System.DateTime
      description: "A hora UTC em que os recursos virtuais foram de leitura."
    return:
      type: System.Web.Caching.CacheDependency
      description: "A <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> objeto para os recursos virtuais especificados."
  overload: System.Web.Hosting.VirtualPathProvider.GetCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)
  id: GetCacheKey(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: GetCacheKey(String)
  nameWithType: VirtualPathProvider.GetCacheKey(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetCacheKey(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Devolve uma chave de cache a utilizar para o caminho virtual especificado."
  remarks: "Utilize o método GetCacheKey para fornecer uma chave de cache personalizadas para recursos virtuais. Se não substitua o método de GetCacheKey, o caminho virtual é utilizado para a chave de cache."
  syntax:
    content: public virtual string GetCacheKey (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "O caminho para o recurso virtual."
    return:
      type: System.String
      description: "Uma chave de cache para o recurso virtual especificado."
  overload: System.Web.Hosting.VirtualPathProvider.GetCacheKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)
  id: GetDirectory(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: GetDirectory(String)
  nameWithType: VirtualPathProvider.GetDirectory(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetDirectory(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Obtém um diretório virtual do sistema de ficheiros virtual."
  remarks: "O método de GetDirectory devolve descende do <xref:System.Web.Hosting.VirtualDirectory>classe que contém os ficheiros e diretórios contidos no diretório especificado no `virtualDir` parâmetro.</xref:System.Web.Hosting.VirtualDirectory>       Se o personalizada <xref:System.Web.Hosting.VirtualPathProvider>classe não suporta diretórios, deverá devolver o método GetDirectory `null`.</xref:System.Web.Hosting.VirtualPathProvider>      > [!NOTE] > Se o sistema de ficheiros virtual irá conter temas para o Web site (através da criação de um virtual `App_Themes` diretório), a personalizada <xref:System.Web.Hosting.VirtualPathProvider>classe tem de suportar diretórios.</xref:System.Web.Hosting.VirtualPathProvider>"
  example:
  - "The following code example is an implementation of the GetDirectory method in a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#24](~/add/codesnippet/csharp/m-system.web.hosting.vir_8_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#24](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_8_1.vb)]"
  syntax:
    content: public virtual System.Web.Hosting.VirtualDirectory GetDirectory (string virtualDir);
    parameters:
    - id: virtualDir
      type: System.String
      description: "O caminho para o diretório virtual."
    return:
      type: System.Web.Hosting.VirtualDirectory
      description: "Descende do <xref href=&quot;System.Web.Hosting.VirtualDirectory&quot;> </xref> classe que representa um diretório no sistema de ficheiros virtual."
  overload: System.Web.Hosting.VirtualPathProvider.GetDirectory*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.GetFile(System.String)
  id: GetFile(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: GetFile(String)
  nameWithType: VirtualPathProvider.GetFile(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetFile(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Obtém um ficheiro virtual do sistema de ficheiros virtual."
  remarks: "O método de GetFile devolve descende do <xref:System.Web.Hosting.VirtualFile>classe que representa o ficheiro especificado pelo `virtualPath` parâmetro.</xref:System.Web.Hosting.VirtualFile>"
  example:
  - "The following code example is an implementation of the GetFile method in a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#23](~/add/codesnippet/csharp/m-system.web.hosting.vir_3_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_3_1.vb)]"
  syntax:
    content: public virtual System.Web.Hosting.VirtualFile GetFile (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "O caminho para o ficheiro virtual."
    return:
      type: System.Web.Hosting.VirtualFile
      description: "Descende do <xref href=&quot;System.Web.Hosting.VirtualFile&quot;> </xref> classe que representa um ficheiro no sistema de ficheiros virtual."
  overload: System.Web.Hosting.VirtualPathProvider.GetFile*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)
  id: GetFileHash(System.String,System.Collections.IEnumerable)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: GetFileHash(String,IEnumerable)
  nameWithType: VirtualPathProvider.GetFileHash(String,IEnumerable)
  fullName: System.Web.Hosting.VirtualPathProvider.GetFileHash(String,IEnumerable)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Devolve um valor de hash caminhos virtual especificados."
  remarks: "Utilize o método de GetFileHash para fornecer um hash de dependências de um recurso de sistema de ficheiros virtual."
  syntax:
    content: public virtual string GetFileHash (string virtualPath, System.Collections.IEnumerable virtualPathDependencies);
    parameters:
    - id: virtualPath
      type: System.String
      description: "O caminho para o recurso virtual principal."
    - id: virtualPathDependencies
      type: System.Collections.IEnumerable
      description: "Uma matriz de caminhos para outros recursos virtuais necessários para o recurso virtual principal."
    return:
      type: System.String
      description: "Um hash caminhos virtual especificados."
  overload: System.Web.Hosting.VirtualPathProvider.GetFileHash*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.Initialize
  id: Initialize
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: Initialize()
  nameWithType: VirtualPathProvider.Initialize()
  fullName: System.Web.Hosting.VirtualPathProvider.Initialize()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Inicializa a <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;> </xref> instância."
  remarks: "O método de inicialização é chamado depois do fornecedor está registado com o sistema de compilação do ASP.NET. O método de inicialização é utilizado para fornecer qualquer inicialização necessária depois do <xref:System.Web.Hosting.VirtualPathProvider>instância é colocada no ambiente a aplicação ocupar.</xref:System.Web.Hosting.VirtualPathProvider>"
  example:
  - "The following code example is an implementation of the Initialize method that sets the path to a data file from the application's <xref:System.Web.Hosting.HostingEnvironment> instance. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#26](~/add/codesnippet/csharp/m-system.web.hosting.vir_0_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#26](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_0_1.vb)]"
  syntax:
    content: protected virtual void Initialize ();
    parameters: []
  overload: System.Web.Hosting.VirtualPathProvider.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService
  id: InitializeLifetimeService
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: InitializeLifetimeService()
  nameWithType: VirtualPathProvider.InitializeLifetimeService()
  fullName: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Fornece o <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;> </xref> objeto uma duração infinita por a impedir que uma concessão a ser criada."
  remarks: "Este método substitui o <xref:System.MarshalByRefObject.InitializeLifetimeService%2A>método na sua classe base</xref:System.MarshalByRefObject.InitializeLifetimeService%2A> Devolve sempre `null` e, deste modo, impede que uma concessão de que está a ser criada, o que limita a <xref:System.Web.Hosting.VirtualPathProvider>duração do objeto.</xref:System.Web.Hosting.VirtualPathProvider>"
  syntax:
    content: public override object InitializeLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)
  id: OpenFile(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: OpenFile(String)
  nameWithType: VirtualPathProvider.OpenFile(String)
  fullName: System.Web.Hosting.VirtualPathProvider.OpenFile(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Devolve uma sequência de um ficheiro virtual."
  remarks: "O método OpenFile é um método de conveniência que permite-lhe obter um fluxo de um ficheiro virtual sem criar um <xref:System.Web.Hosting.VirtualPathProvider>instância.</xref:System.Web.Hosting.VirtualPathProvider>"
  syntax:
    content: public static System.IO.Stream OpenFile (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "O caminho para o ficheiro virtual."
    return:
      type: System.IO.Stream
      description: "Um só de leitura <xref:System.IO.Stream>objeto para o ficheiro virtual especificado ou o recurso.</xref:System.IO.Stream>"
  overload: System.Web.Hosting.VirtualPathProvider.OpenFile*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.Previous
  id: Previous
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: Previous
  nameWithType: VirtualPathProvider.Previous
  fullName: System.Web.Hosting.VirtualPathProvider.Previous
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Obtém uma referência para um anteriormente registado <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;> </xref> objeto no sistema de compilação."
  remarks: "Quando um <xref:System.Web.Hosting.VirtualPathProvider>objeto está registado com o sistema de compilação do ASP.NET, é adicionada a uma cadeia de fornecedores.</xref:System.Web.Hosting.VirtualPathProvider> Utilize a propriedade anterior à mão processamento desativar anterior <xref:System.Web.Hosting.VirtualPathProvider>objeto na cadeia, se o caminho solicitado não é fornecido por este <xref:System.Web.Hosting.VirtualPathProvider>instância.</xref:System.Web.Hosting.VirtualPathProvider> </xref:System.Web.Hosting.VirtualPathProvider>       A cadeia de fornecedores de caminho sempre termina com o fornecedor ASP.NET predefinida, que serve os ficheiros do sistema de ficheiros."
  example:
  - "The following code example is an implementation of the <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> method. If the requested virtual directory does not begin with the string `\"/vrdir\"`, the method uses the Previous property to pass the request to the next <xref:System.Web.Hosting.VirtualPathProvider> object in the chain. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#23](~/add/codesnippet/csharp/p-system.web.hosting.vir_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/add/codesnippet/visualbasic/p-system.web.hosting.vir_1.vb)]"
  syntax:
    content: protected System.Web.Hosting.VirtualPathProvider Previous { get; }
    return:
      type: System.Web.Hosting.VirtualPathProvider
      description: "A próxima <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;> </xref> objeto no sistema de compilação."
  overload: System.Web.Hosting.VirtualPathProvider.Previous*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Web.Hosting.VirtualPathProvider.#ctor
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: VirtualPathProvider()
  nameWithType: VirtualPathProvider.VirtualPathProvider()
  fullName: System.Web.Hosting.VirtualPathProvider.VirtualPathProvider()
- uid: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: CombineVirtualPaths(String,String)
  nameWithType: VirtualPathProvider.CombineVirtualPaths(String,String)
  fullName: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: DirectoryExists(String)
  nameWithType: VirtualPathProvider.DirectoryExists(String)
  fullName: System.Web.Hosting.VirtualPathProvider.DirectoryExists(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Hosting.VirtualPathProvider.FileExists(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: FileExists(String)
  nameWithType: VirtualPathProvider.FileExists(String)
  fullName: System.Web.Hosting.VirtualPathProvider.FileExists(String)
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetCacheDependency(String,IEnumerable,DateTime)
  nameWithType: VirtualPathProvider.GetCacheDependency(String,IEnumerable,DateTime)
  fullName: System.Web.Hosting.VirtualPathProvider.GetCacheDependency(String,IEnumerable,DateTime)
- uid: System.Web.Caching.CacheDependency
  parent: System.Web.Caching
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetCacheKey(String)
  nameWithType: VirtualPathProvider.GetCacheKey(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetCacheKey(String)
- uid: System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetDirectory(String)
  nameWithType: VirtualPathProvider.GetDirectory(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetDirectory(String)
- uid: System.Web.Hosting.VirtualDirectory
  parent: System.Web.Hosting
  isExternal: false
  name: VirtualDirectory
  nameWithType: VirtualDirectory
  fullName: System.Web.Hosting.VirtualDirectory
- uid: System.Web.Hosting.VirtualPathProvider.GetFile(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetFile(String)
  nameWithType: VirtualPathProvider.GetFile(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetFile(String)
- uid: System.Web.Hosting.VirtualFile
  parent: System.Web.Hosting
  isExternal: false
  name: VirtualFile
  nameWithType: VirtualFile
  fullName: System.Web.Hosting.VirtualFile
- uid: System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetFileHash(String,IEnumerable)
  nameWithType: VirtualPathProvider.GetFileHash(String,IEnumerable)
  fullName: System.Web.Hosting.VirtualPathProvider.GetFileHash(String,IEnumerable)
- uid: System.Web.Hosting.VirtualPathProvider.Initialize
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: Initialize()
  nameWithType: VirtualPathProvider.Initialize()
  fullName: System.Web.Hosting.VirtualPathProvider.Initialize()
- uid: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: VirtualPathProvider.InitializeLifetimeService()
  fullName: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: OpenFile(String)
  nameWithType: VirtualPathProvider.OpenFile(String)
  fullName: System.Web.Hosting.VirtualPathProvider.OpenFile(String)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Web.Hosting.VirtualPathProvider.Previous
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: Previous
  nameWithType: VirtualPathProvider.Previous
  fullName: System.Web.Hosting.VirtualPathProvider.Previous
- uid: System.Web.Hosting.VirtualPathProvider
  parent: System.Web.Hosting
  isExternal: false
  name: VirtualPathProvider
  nameWithType: VirtualPathProvider
  fullName: System.Web.Hosting.VirtualPathProvider
- uid: System.Web.Hosting.VirtualPathProvider.#ctor*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: VirtualPathProvider
  nameWithType: VirtualPathProvider.VirtualPathProvider
- uid: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: CombineVirtualPaths
  nameWithType: VirtualPathProvider.CombineVirtualPaths
- uid: System.Web.Hosting.VirtualPathProvider.DirectoryExists*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: DirectoryExists
  nameWithType: VirtualPathProvider.DirectoryExists
- uid: System.Web.Hosting.VirtualPathProvider.FileExists*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: FileExists
  nameWithType: VirtualPathProvider.FileExists
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheDependency*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetCacheDependency
  nameWithType: VirtualPathProvider.GetCacheDependency
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheKey*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetCacheKey
  nameWithType: VirtualPathProvider.GetCacheKey
- uid: System.Web.Hosting.VirtualPathProvider.GetDirectory*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetDirectory
  nameWithType: VirtualPathProvider.GetDirectory
- uid: System.Web.Hosting.VirtualPathProvider.GetFile*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetFile
  nameWithType: VirtualPathProvider.GetFile
- uid: System.Web.Hosting.VirtualPathProvider.GetFileHash*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetFileHash
  nameWithType: VirtualPathProvider.GetFileHash
- uid: System.Web.Hosting.VirtualPathProvider.Initialize*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: Initialize
  nameWithType: VirtualPathProvider.Initialize
- uid: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: InitializeLifetimeService
  nameWithType: VirtualPathProvider.InitializeLifetimeService
- uid: System.Web.Hosting.VirtualPathProvider.OpenFile*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: OpenFile
  nameWithType: VirtualPathProvider.OpenFile
- uid: System.Web.Hosting.VirtualPathProvider.Previous*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: Previous
  nameWithType: VirtualPathProvider.Previous
