### YamlMime:ManagedReference
items:
- uid: System.Net.WebPermission
  id: WebPermission
  children:
  - System.Net.WebPermission.#ctor
  - System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)
  - System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)
  - System.Net.WebPermission.AcceptList
  - System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)
  - System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)
  - System.Net.WebPermission.ConnectList
  - System.Net.WebPermission.Copy
  - System.Net.WebPermission.FromXml(System.Security.SecurityElement)
  - System.Net.WebPermission.Intersect(System.Security.IPermission)
  - System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)
  - System.Net.WebPermission.IsUnrestricted
  - System.Net.WebPermission.ToXml
  - System.Net.WebPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: WebPermission
  nameWithType: WebPermission
  fullName: System.Net.WebPermission
  type: Class
  summary: "Controls rights to access HTTP Internet resources."
  remarks: "WebPermission provides a set of methods and properties to control access to Internet resources. You can use a WebPermission to provide either restricted or unrestricted access to your resource, based on the <xref:System.Security.Permissions.PermissionState> that is set when the WebPermission is created.       Create a WebPermission instance by calling its constructor using one of the following sets of parameters:      -   No parameters. The default <xref:System.Security.Permissions.PermissionState> is <xref:System.Security.Permissions.PermissionState>.      -   A <xref:System.Security.Permissions.PermissionState>. Specify either <xref:System.Security.Permissions.PermissionState> to allow any URI to be used in the target class, or <xref:System.Security.Permissions.PermissionState> to allow access only to URIs that you specify through the use of the <xref:System.Net.WebPermission.AddPermission%2A> method.      -   A <xref:System.Net.NetworkAccess> value and a URI string. The specified URI has permissions granted by the <xref:System.Net.NetworkAccess> value.      -   A <xref:System.Net.NetworkAccess> specifier and URI regular expression.       The <xref:System.Net.WebPermission.ConnectList%2A> and <xref:System.Net.WebPermission.AcceptList%2A> hold the URIs to which you have granted access permission. To add a URI to either of these lists, use <xref:System.Net.WebPermission.AddPermission%2A>. If you pass <xref:System.Net.NetworkAccess> as the <xref:System.Net.NetworkAccess> parameter, the URI will be added to the <xref:System.Net.WebPermission.AcceptList%2A>. WebPermission will allow connections to your target class with URIs matching the <xref:System.Net.WebPermission.AcceptList%2A>.      > [!CAUTION] >  To deny access to an Internet resource, you must deny access to all the possible paths to that resource. This requires calling <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName> with state parameter set to <xref:System.Security.CodeAccessPermission.Deny%2A>. A better approach is to allow access to the specific resource only. For more information about this subject, refer to the [NIB: Using the Deny Method](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) topic.      > [!NOTE] >  You need to deny access using only the resource canonical path. There is no need to use all the path&quot;s syntactical variations.      > [!NOTE] >  User name and default port information is stripped from the <xref:System.Uri> before the comparison with the regular expression argument that is supplied to the <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> constructor. If the regular expression contains user information or the default port number, then all incoming <xref:System.Uri>s will fail to match the regular expression."
  example:
  - "The following example demonstrates how to create a new instance of WebPermission using a <xref:System.Text.RegularExpressions.Regex>. Additional hosts are added to the connect and accept list of WebPermission. Finally, the connect and accept list are displayed to the console.  \n  \n [!code-cpp[WebPermission_Regex#1](~/add/codesnippet/cpp/t-system.net.webpermission_1.cpp)]\n [!code-vb[WebPermission_Regex#1](~/add/codesnippet/visualbasic/t-system.net.webpermission_1.vb)]\n [!code-cs[WebPermission_Regex#1](~/add/codesnippet/csharp/t-system.net.webpermission_1.cs)]"
  syntax:
    content: 'public sealed class WebPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Net.WebPermission.#ctor
  id: '#ctor'
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: WebPermission()
  nameWithType: WebPermission.WebPermission()
  fullName: System.Net.WebPermission.WebPermission()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Creates a new instance of the <xref href=&quot;System.Net.WebPermission&quot;></xref> class."
  remarks: "Creates a new instance of the <xref:System.Net.WebPermission> class. This constructor creates an empty permission that does not grant any rights."
  syntax:
    content: public WebPermission ();
    parameters: []
  overload: System.Net.WebPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: WebPermission(PermissionState)
  nameWithType: WebPermission.WebPermission(PermissionState)
  fullName: System.Net.WebPermission.WebPermission(PermissionState)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Creates a new instance of the <xref href=&quot;System.Net.WebPermission&quot;></xref> class that passes all demands or fails all demands."
  remarks: "The value of the `state` parameter is either <xref:System.Security.Permissions.PermissionState?displayProperty=fullName> or <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, respectively yielding fully restricted or fully unrestricted access to all security variables. If you specify <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, then you can give access to individual URIs using <xref:System.Net.WebPermission.AddPermission%2A>."
  example:
  - "The following example creates an instance of <xref:System.Net.WebPermission> and gives access rights to specific URLs.  \n  \n [!code-vb[WebPermission_Copy#1](~/add/codesnippet/visualbasic/88c33480-1361-4059-add6-_1.vb)]\n [!code-cpp[WebPermission_Copy#1](~/add/codesnippet/cpp/88c33480-1361-4059-add6-_1.cpp)]\n [!code-cs[WebPermission_Copy#1](~/add/codesnippet/csharp/88c33480-1361-4059-add6-_1.cs)]"
  syntax:
    content: public WebPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "A <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref> value."
  overload: System.Net.WebPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)
  id: '#ctor(System.Net.NetworkAccess,System.String)'
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: WebPermission(NetworkAccess,String)
  nameWithType: WebPermission.WebPermission(NetworkAccess,String)
  fullName: System.Net.WebPermission.WebPermission(NetworkAccess,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.WebPermission&quot;></xref> class with the specified access rights for the specified URI."
  remarks: "This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriString` parameter."
  example:
  - "The following example creates a new instance of <xref:System.Net.WebPermission> with connect rights for the specified URI.  \n  \n [!code-cpp[WebPermission_Union#1](~/add/codesnippet/cpp/m-system.net.webpermissi_3_1.cpp)]\n [!code-vb[WebPermission_Union#1](~/add/codesnippet/visualbasic/m-system.net.webpermissi_3_1.vb)]\n [!code-cs[WebPermission_Union#1](~/add/codesnippet/csharp/m-system.net.webpermissi_3_1.cs)]"
  syntax:
    content: public WebPermission (System.Net.NetworkAccess access, string uriString);
    parameters:
    - id: access
      type: System.Net.NetworkAccess
      description: "A NetworkAccess value that indicates what kind of access to grant to the specified URI. <xref href=&quot;System.Net.NetworkAccess&quot;></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=&quot;System.Net.NetworkAccess&quot;></xref> indicates that the application is allowed to connect to specific Internet resources."
    - id: uriString
      type: System.String
      description: "A URI string to which access rights are granted."
  overload: System.Net.WebPermission.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>uriString</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)
  id: '#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)'
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: WebPermission(NetworkAccess,Regex)
  nameWithType: WebPermission.WebPermission(NetworkAccess,Regex)
  fullName: System.Net.WebPermission.WebPermission(NetworkAccess,Regex)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.WebPermission&quot;></xref> class with the specified access rights for the specified URI regular expression."
  remarks: "This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriRegex`parameter.      > [!NOTE] >  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."
  example:
  - "The following example creates a new instance of <xref:System.Net.WebPermission> with connect rights for the specified <xref:System.Text.RegularExpressions.Regex?displayProperty=fullName>.  \n  \n [!code-vb[WebPermission_Constructor4#1](~/add/codesnippet/visualbasic/c1b4c805-3099-4a42-8ab3-_1.vb)]\n [!code-cpp[WebPermission_Constructor4#1](~/add/codesnippet/cpp/c1b4c805-3099-4a42-8ab3-_1.cpp)]\n [!code-cs[WebPermission_Constructor4#1](~/add/codesnippet/csharp/c1b4c805-3099-4a42-8ab3-_1.cs)]"
  syntax:
    content: public WebPermission (System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex);
    parameters:
    - id: access
      type: System.Net.NetworkAccess
      description: "A <xref href=&quot;System.Net.NetworkAccess&quot;></xref> value that indicates what kind of access to grant to the specified URI. <xref href=&quot;System.Net.NetworkAccess&quot;></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=&quot;System.Net.NetworkAccess&quot;></xref> indicates that the application is allowed to connect to specific Internet resources."
    - id: uriRegex
      type: System.Text.RegularExpressions.Regex
      description: "A regular expression that describes the URI to which access is to be granted."
  overload: System.Net.WebPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebPermission.AcceptList
  id: AcceptList
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: AcceptList
  nameWithType: WebPermission.AcceptList
  fullName: System.Net.WebPermission.AcceptList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "This property returns an enumeration of a single accept permissions held by this <xref href=&quot;System.Net.WebPermission&quot;></xref>. The possible objects types contained in the returned enumeration are <xref:System.String> and &lt;xref:System.Text.RegularExpressions.Regex?displayProperty=fullName&gt;."
  remarks: "This property gets a list of local resources permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to receive an incoming connection to local resources found in this list.      > [!NOTE] >  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (AcceptList or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."
  example:
  - "The following example prints the URLs in the AcceptList to the console.  \n  \n [!code-vb[WebPermission_AcceptConnectList#2](~/add/codesnippet/visualbasic/p-system.net.webpermissi_5_1.vb)]\n [!code-cs[WebPermission_AcceptConnectList#2](~/add/codesnippet/csharp/p-system.net.webpermissi_5_1.cs)]\n [!code-cpp[WebPermission_AcceptConnectList#2](~/add/codesnippet/cpp/p-system.net.webpermissi_5_1.cpp)]"
  syntax:
    content: public System.Collections.IEnumerator AcceptList { get; }
    return:
      type: System.Collections.IEnumerator
      description: "The <xref:System.Collections.IEnumerator> interface that contains accept permissions."
  overload: System.Net.WebPermission.AcceptList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)
  id: AddPermission(System.Net.NetworkAccess,System.String)
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: AddPermission(NetworkAccess,String)
  nameWithType: WebPermission.AddPermission(NetworkAccess,String)
  fullName: System.Net.WebPermission.AddPermission(NetworkAccess,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Adds the specified URI string with the specified access rights to the current <xref href=&quot;System.Net.WebPermission&quot;></xref>."
  remarks: "If you have specified <xref:System.Security.Permissions.PermissionState> as the <xref:System.Security.Permissions.PermissionState>, use AddPermission to permit the use of `uriString` in the target class. The way that `uriString` can be used by the target class is specified by `access`. Specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI specified by the `uriString` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI to the list of URI connect strings.      > [!NOTE] >  Calling AddPermission on <xref:System.Security.Permissions.PermissionState><xref:System.Net.WebPermission> will have no effect, because permission is granted to all URIs.      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."
  example:
  - "The following example demonstrates how to add access rights to particular URL strings.  \n  \n [!code-cs[WebPermission_Intersect#2](~/add/codesnippet/csharp/m-system.net.webpermissi_2_1.cs)]\n [!code-cpp[WebPermission_Intersect#2](~/add/codesnippet/cpp/m-system.net.webpermissi_2_1.cpp)]\n [!code-vb[WebPermission_Intersect#2](~/add/codesnippet/visualbasic/m-system.net.webpermissi_2_1.vb)]"
  syntax:
    content: public void AddPermission (System.Net.NetworkAccess access, string uriString);
    parameters:
    - id: access
      type: System.Net.NetworkAccess
      description: "A <xref href=&quot;System.Net.NetworkAccess&quot;></xref> that specifies the access rights that are granted to the URI."
    - id: uriString
      type: System.String
      description: "A string that describes the URI to which access rights are granted."
  overload: System.Net.WebPermission.AddPermission*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>uriString</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)
  id: AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: AddPermission(NetworkAccess,Regex)
  nameWithType: WebPermission.AddPermission(NetworkAccess,Regex)
  fullName: System.Net.WebPermission.AddPermission(NetworkAccess,Regex)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Adds the specified URI with the specified access rights to the current <xref href=&quot;System.Net.WebPermission&quot;></xref>."
  remarks: "If you have specified <xref:System.Security.Permissions.PermissionState> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to allow the use of `uriRegex` in the target class. Specify <xref:System.Net.NetworkAccess> as the `access` parameter to add the URI specified by the `uriRegex` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess> as the access parameter to add the URI to the list of URI connect strings.      > [!NOTE] >  Calling <xref:System.Net.WebPermission.AddPermission%2A> on an <xref:System.Security.Permissions.PermissionState><xref:System.Net.WebPermission> instance will have no effect as permission is granted to all URIs.      > [!NOTE] >  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."
  example:
  - "The following example uses <xref:System.Net.WebPermission.AddPermission%2A> to give access rights for the specified URI.  \n  \n [!code-vb[WebPermission_IsSubset#1](~/add/codesnippet/visualbasic/38330477-33f7-43a1-bcd6-_1.vb)]\n [!code-cs[WebPermission_IsSubset#1](~/add/codesnippet/csharp/38330477-33f7-43a1-bcd6-_1.cs)]\n [!code-cpp[WebPermission_IsSubset#1](~/add/codesnippet/cpp/38330477-33f7-43a1-bcd6-_1.cpp)]"
  syntax:
    content: public void AddPermission (System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex);
    parameters:
    - id: access
      type: System.Net.NetworkAccess
      description: "A NetworkAccess that specifies the access rights that are granted to the URI."
    - id: uriRegex
      type: System.Text.RegularExpressions.Regex
      description: "A regular expression that describes the set of URIs to which access rights are granted."
  overload: System.Net.WebPermission.AddPermission*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>uriRegex</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.WebPermission.ConnectList
  id: ConnectList
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: ConnectList
  nameWithType: WebPermission.ConnectList
  fullName: System.Net.WebPermission.ConnectList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "This property returns an enumeration of a single connect permissions held by this <xref href=&quot;System.Net.WebPermission&quot;></xref>. The possible objects types contained in the returned enumeration are <xref:System.String> and &lt;xref:System.Text.RegularExpressions.Regex?displayProperty=fullName&gt;."
  remarks: "This property gets a list of remote resources that are permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to connect with resources found in this list.      > [!NOTE] >  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.      > [!NOTE] >  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or ConnectList) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."
  example:
  - "The following example prints the URLs in the ConnectList to the console.  \n  \n [!code-vb[WebPermission_AcceptConnectList#1](~/add/codesnippet/visualbasic/p-system.net.webpermissi_2_1.vb)]\n [!code-cs[WebPermission_AcceptConnectList#1](~/add/codesnippet/csharp/p-system.net.webpermissi_2_1.cs)]\n [!code-cpp[WebPermission_AcceptConnectList#1](~/add/codesnippet/cpp/p-system.net.webpermissi_2_1.cpp)]"
  syntax:
    content: public System.Collections.IEnumerator ConnectList { get; }
    return:
      type: System.Collections.IEnumerator
      description: "The <xref:System.Collections.IEnumerator> interface that contains connect permissions."
  overload: System.Net.WebPermission.ConnectList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebPermission.Copy
  id: Copy
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: WebPermission.Copy()
  fullName: System.Net.WebPermission.Copy()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Creates a copy of a <xref href=&quot;System.Net.WebPermission&quot;></xref>."
  remarks: "The <xref:System.Security.IPermission> returned by this method represents the same access to resources as the original <xref:System.Net.WebPermission>. This method overrides <xref:System.Security.CodeAccessPermission.Copy%2A> and is implemented to support the <xref:System.Security.IPermission> interface."
  example:
  - "The following example demonstrates how to create a second instance of <xref:System.Net.WebPermission> using Copy. This second instance is identical to the first.  \n  \n [!code-vb[WebPermission_Copy#2](~/add/codesnippet/visualbasic/m-system.net.webpermissi_6_1.vb)]\n [!code-cpp[WebPermission_Copy#2](~/add/codesnippet/cpp/m-system.net.webpermissi_6_1.cpp)]\n [!code-cs[WebPermission_Copy#2](~/add/codesnippet/csharp/m-system.net.webpermissi_6_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A new instance of the <xref href=&quot;System.Net.WebPermission&quot;></xref> class that has the same values as the original."
  overload: System.Net.WebPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: WebPermission.FromXml(SecurityElement)
  fullName: System.Net.WebPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Reconstructs a <xref href=&quot;System.Net.WebPermission&quot;></xref> from an XML encoding."
  remarks: "The FromXml method reconstructs a <xref:System.Net.WebPermission> from an XML encoding that is defined by the <xref:System.Security.SecurityElement> class.       Use the <xref:System.Net.WebPermission.ToXml%2A> method to XML-encode the <xref:System.Net.WebPermission>, including state information."
  example:
  - "The following example creates a <xref:System.Security.SecurityElement?displayProperty=fullName>, populates its attributes, and uses FromXml to transfer this information to an instance of <xref:System.Net.WebPermission>.  \n  \n [!code-vb[WebPermission_FromToXml#1](~/add/codesnippet/visualbasic/m-system.net.webpermissi_7_1.vb)]\n [!code-cpp[WebPermission_FromToXml#1](~/add/codesnippet/cpp/m-system.net.webpermissi_7_1.cpp)]\n [!code-cs[WebPermission_FromToXml#1](~/add/codesnippet/csharp/m-system.net.webpermissi_7_1.cs)]"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement securityElement);
    parameters:
    - id: securityElement
      type: System.Security.SecurityElement
      description: "The XML encoding from which to reconstruct the <xref href=&quot;System.Net.WebPermission&quot;></xref>."
  overload: System.Net.WebPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>securityElement</code> parameter is <xref uid=&quot;langword_csharp_null.&quot; name=&quot;null.&quot; href=&quot;&quot;></xref>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>securityElement</code> is not a permission element for this type."
  platform:
  - net462
- uid: System.Net.WebPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: WebPermission.Intersect(IPermission)
  fullName: System.Net.WebPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Returns the logical intersection of two <xref href=&quot;System.Net.WebPermission&quot;></xref> instances."
  remarks: "Intersect returns a <xref:System.Net.WebPermission> that contains those permissions that are common in both `target` and the current instance.       This method overrides <xref:System.Security.CodeAccessPermission.Intersect%2A> and is implemented to support the <xref:System.Security.IPermission> interface."
  example:
  - "The following example shows how to create an instance of <xref:System.Net.WebPermission> using the logical intersection of two existing <xref:System.Net.WebPermission> instances.  \n  \n [!code-cs[WebPermission_Intersect#3](~/add/codesnippet/csharp/m-system.net.webpermissi_5_1.cs)]\n [!code-cpp[WebPermission_Intersect#3](~/add/codesnippet/cpp/m-system.net.webpermissi_5_1.cpp)]\n [!code-vb[WebPermission_Intersect#3](~/add/codesnippet/visualbasic/m-system.net.webpermissi_5_1.vb)]"
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "The <xref href=&quot;System.Net.WebPermission&quot;></xref> to compare with the current instance."
    return:
      type: System.Security.IPermission
      description: "A new <xref href=&quot;System.Net.WebPermission&quot;></xref> that represents the intersection of the current instance and the <code>target</code> parameter. If the intersection is empty, the method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Net.WebPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>target</code> is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or of type <xref href=&quot;System.Net.WebPermission&quot;></xref>"
  platform:
  - net462
- uid: System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: WebPermission.IsSubsetOf(IPermission)
  fullName: System.Net.WebPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Determines whether the current <xref href=&quot;System.Net.WebPermission&quot;></xref> is a subset of the specified object."
  remarks: "If the current <xref:System.Net.WebPermission> specifies a set of associated resources that is wholly contained by the `target` parameter, then the current <xref:System.Net.WebPermission> is a subset of `target`. This method overrides IsSubsetOf and is implemented to support the <xref:System.Security.IPermission> interface."
  example:
  - "The following example uses IsSubsetOf to determine whether the access rights found in one instance of <xref:System.Net.WebPermission> are found in another instance of <xref:System.Net.WebPermission>.  \n  \n [!code-cs[WebPermission_IsSubset2#1](~/add/codesnippet/csharp/m-system.net.webpermissi_1_1.cs)]\n [!code-vb[WebPermission_IsSubset2#1](~/add/codesnippet/visualbasic/m-system.net.webpermissi_1_1.vb)]\n [!code-cpp[WebPermission_IsSubset2#1](~/add/codesnippet/cpp/m-system.net.webpermissi_1_1.cpp)]"
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "The <xref href=&quot;System.Net.WebPermission&quot;></xref> to compare to the current <xref href=&quot;System.Net.WebPermission&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current instance is a subset of the <code>target</code> parameter; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. If the target is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the method returns <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> for an empty current permission that is not unrestricted and <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> otherwise."
  overload: System.Net.WebPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The target parameter is not an instance of <xref href=&quot;System.Net.WebPermission&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The current instance contains a Regex-encoded right and there is not exactly the same right found in the target instance."
  platform:
  - net462
- uid: System.Net.WebPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: WebPermission.IsUnrestricted()
  fullName: System.Net.WebPermission.IsUnrestricted()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Checks the overall permission state of the <xref href=&quot;System.Net.WebPermission&quot;></xref>."
  remarks: "If <xref:System.Net.WebPermission> is <xref:System.Security.Permissions.PermissionState>, then the target class can use all URIs. Otherwise, specific permission must be given for any URI you want to use with the target class.      > [!NOTE] >  Use <xref:System.Net.WebPermission.AddPermission%2A> to add a URI and specify its permissions."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Net.WebPermission&quot;></xref> was created with the <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref><xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Net.WebPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebPermission.ToXml
  id: ToXml
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: WebPermission.ToXml()
  fullName: System.Net.WebPermission.ToXml()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Creates an XML encoding of a <xref href=&quot;System.Net.WebPermission&quot;></xref> and its current state."
  remarks: "Use the <xref:System.Net.WebPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>."
  example:
  - "The following example demonstrates how to use ToXml to create a <xref:System.Security.SecurityElement?displayProperty=fullName> and print its attributes to the console.  \n  \n [!code-vb[WebPermission_FromToXml#1](~/add/codesnippet/visualbasic/m-system.net.webpermissi_4_1.vb)]\n [!code-cpp[WebPermission_FromToXml#1](~/add/codesnippet/cpp/m-system.net.webpermissi_4_1.cpp)]\n [!code-cs[WebPermission_FromToXml#1](~/add/codesnippet/csharp/m-system.net.webpermissi_4_1.cs)]"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "A <xref href=&quot;System.Security.SecurityElement&quot;></xref> that contains an XML-encoded representation of the <xref href=&quot;System.Net.WebPermission&quot;></xref>, including state information."
  overload: System.Net.WebPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Net.WebPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: WebPermission.Union(IPermission)
  fullName: System.Net.WebPermission.Union(IPermission)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Returns the logical union between two instances of the <xref href=&quot;System.Net.WebPermission&quot;></xref> class."
  remarks: "Union returns a <xref:System.Net.WebPermission> that contains all the permissions in both `target` and the current instance."
  example:
  - "The following example takes the logical union of two <xref:System.Net.WebPermission> instances to create a third instance of <xref:System.Net.WebPermission>.  \n  \n [!code-cpp[WebPermission_Union#2](~/add/codesnippet/cpp/m-system.net.webpermissi_0_1.cpp)]\n [!code-vb[WebPermission_Union#2](~/add/codesnippet/visualbasic/m-system.net.webpermissi_0_1.vb)]\n [!code-cs[WebPermission_Union#2](~/add/codesnippet/csharp/m-system.net.webpermissi_0_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "The <xref href=&quot;System.Net.WebPermission&quot;></xref> to combine with the current <xref href=&quot;System.Net.WebPermission&quot;></xref>."
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Net.WebPermission&quot;></xref> that represents the union of the current instance and the <code>target</code> parameter. If either <xref uid=&quot;langword_csharp_WebPermission&quot; name=&quot;WebPermission&quot; href=&quot;&quot;></xref> is <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>, the method returns a <xref href=&quot;System.Net.WebPermission&quot;></xref> that is <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>. If the target is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the method returns a copy of the current <xref href=&quot;System.Net.WebPermission&quot;></xref>."
  overload: System.Net.WebPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "target is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or of type <xref href=&quot;System.Net.WebPermission&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.WebPermission.#ctor
  parent: System.Net.WebPermission
  isExternal: false
  name: WebPermission()
  nameWithType: WebPermission.WebPermission()
  fullName: System.Net.WebPermission.WebPermission()
- uid: System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Net.WebPermission
  isExternal: false
  name: WebPermission(PermissionState)
  nameWithType: WebPermission.WebPermission(PermissionState)
  fullName: System.Net.WebPermission.WebPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)
  parent: System.Net.WebPermission
  isExternal: false
  name: WebPermission(NetworkAccess,String)
  nameWithType: WebPermission.WebPermission(NetworkAccess,String)
  fullName: System.Net.WebPermission.WebPermission(NetworkAccess,String)
- uid: System.Net.NetworkAccess
  parent: System.Net
  isExternal: false
  name: NetworkAccess
  nameWithType: NetworkAccess
  fullName: System.Net.NetworkAccess
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)
  parent: System.Net.WebPermission
  isExternal: false
  name: WebPermission(NetworkAccess,Regex)
  nameWithType: WebPermission.WebPermission(NetworkAccess,Regex)
  fullName: System.Net.WebPermission.WebPermission(NetworkAccess,Regex)
- uid: System.Text.RegularExpressions.Regex
  parent: System.Text.RegularExpressions
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: System.Text.RegularExpressions.Regex
- uid: System.Net.WebPermission.AcceptList
  parent: System.Net.WebPermission
  isExternal: false
  name: AcceptList
  nameWithType: WebPermission.AcceptList
  fullName: System.Net.WebPermission.AcceptList
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)
  parent: System.Net.WebPermission
  isExternal: false
  name: AddPermission(NetworkAccess,String)
  nameWithType: WebPermission.AddPermission(NetworkAccess,String)
  fullName: System.Net.WebPermission.AddPermission(NetworkAccess,String)
- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)
  parent: System.Net.WebPermission
  isExternal: false
  name: AddPermission(NetworkAccess,Regex)
  nameWithType: WebPermission.AddPermission(NetworkAccess,Regex)
  fullName: System.Net.WebPermission.AddPermission(NetworkAccess,Regex)
- uid: System.Net.WebPermission.ConnectList
  parent: System.Net.WebPermission
  isExternal: false
  name: ConnectList
  nameWithType: WebPermission.ConnectList
  fullName: System.Net.WebPermission.ConnectList
- uid: System.Net.WebPermission.Copy
  parent: System.Net.WebPermission
  isExternal: false
  name: Copy()
  nameWithType: WebPermission.Copy()
  fullName: System.Net.WebPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Net.WebPermission.FromXml(System.Security.SecurityElement)
  parent: System.Net.WebPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: WebPermission.FromXml(SecurityElement)
  fullName: System.Net.WebPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Net.WebPermission.Intersect(System.Security.IPermission)
  parent: System.Net.WebPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: WebPermission.Intersect(IPermission)
  fullName: System.Net.WebPermission.Intersect(IPermission)
- uid: System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Net.WebPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: WebPermission.IsSubsetOf(IPermission)
  fullName: System.Net.WebPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebPermission.IsUnrestricted
  parent: System.Net.WebPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: WebPermission.IsUnrestricted()
  fullName: System.Net.WebPermission.IsUnrestricted()
- uid: System.Net.WebPermission.ToXml
  parent: System.Net.WebPermission
  isExternal: false
  name: ToXml()
  nameWithType: WebPermission.ToXml()
  fullName: System.Net.WebPermission.ToXml()
- uid: System.Net.WebPermission.Union(System.Security.IPermission)
  parent: System.Net.WebPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: WebPermission.Union(IPermission)
  fullName: System.Net.WebPermission.Union(IPermission)
- uid: System.Net.WebPermission.#ctor*
  parent: System.Net.WebPermission
  isExternal: false
  name: WebPermission
  nameWithType: WebPermission.WebPermission
- uid: System.Net.WebPermission.AcceptList*
  parent: System.Net.WebPermission
  isExternal: false
  name: AcceptList
  nameWithType: WebPermission.AcceptList
- uid: System.Net.WebPermission.AddPermission*
  parent: System.Net.WebPermission
  isExternal: false
  name: AddPermission
  nameWithType: WebPermission.AddPermission
- uid: System.Net.WebPermission.ConnectList*
  parent: System.Net.WebPermission
  isExternal: false
  name: ConnectList
  nameWithType: WebPermission.ConnectList
- uid: System.Net.WebPermission.Copy*
  parent: System.Net.WebPermission
  isExternal: false
  name: Copy
  nameWithType: WebPermission.Copy
- uid: System.Net.WebPermission.FromXml*
  parent: System.Net.WebPermission
  isExternal: false
  name: FromXml
  nameWithType: WebPermission.FromXml
- uid: System.Net.WebPermission.Intersect*
  parent: System.Net.WebPermission
  isExternal: false
  name: Intersect
  nameWithType: WebPermission.Intersect
- uid: System.Net.WebPermission.IsSubsetOf*
  parent: System.Net.WebPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: WebPermission.IsSubsetOf
- uid: System.Net.WebPermission.IsUnrestricted*
  parent: System.Net.WebPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: WebPermission.IsUnrestricted
- uid: System.Net.WebPermission.ToXml*
  parent: System.Net.WebPermission
  isExternal: false
  name: ToXml
  nameWithType: WebPermission.ToXml
- uid: System.Net.WebPermission.Union*
  parent: System.Net.WebPermission
  isExternal: false
  name: Union
  nameWithType: WebPermission.Union
