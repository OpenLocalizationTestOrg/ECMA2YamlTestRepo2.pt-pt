### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  id: IDesignerSerializationManager
  children:
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)
  langs:
  - csharp
  name: IDesignerSerializationManager
  nameWithType: IDesignerSerializationManager
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  type: Interface
  summary: "Fornece uma interface que pode gerir a serialização do momento da concepção."
  remarks: "Um designer pode utilizar IDesignerSerializationManager útil para gerir processos de serialização de tempo de criação de serviços de acesso. Por exemplo, uma classe que implementa o Gestor de serialização estruturador pode utilizar esta interface para criar objetos, procurar tipos, identificar objetos e personalizar a serialização dos tipos específicos."
  example:
  - "The following example illustrates how to use IDesignerSerializationManager to serialize and deserialize Code DOM statements.  \n  \n [!code-cs[IDesignerSerializationManagerSample#1](~/add/codesnippet/csharp/t-system.componentmodel._71_1.cs)]\n [!code-cpp[IDesignerSerializationManagerSample#1](~/add/codesnippet/cpp/t-system.componentmodel._71_1.cpp)]\n [!code-vb[IDesignerSerializationManagerSample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._71_1.vb)]"
  syntax:
    content: 'public interface IDesignerSerializationManager : IServiceProvider'
  implements:
  - System.IServiceProvider
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  id: AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: AddSerializationProvider(IDesignerSerializationProvider)
  nameWithType: IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Adiciona o fornecedor de serialização especificado para o Gestor de serialização."
  remarks: "Este método adiciona um fornecedor de serialização personalizada para o Gestor de serialização. Fornecedores de serialização podem fornecer serializers personalizados para um determinado tipo de objeto ou um conjunto de tipos de objetos. Durante a serialização, cada fornecedor de serialização personalizada está a ser consultado para devolver um serializador para um tipo de dados específicas, se pode fornecer um. O Gestor de serialização utiliza o serializador personalizado fornecido através deste método antes de utilizar o serializador de predefinido para um tipo específico."
  syntax:
    content: public void AddSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);
    parameters:
    - id: provider
      type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
      description: "O fornecedor de serialização para adicionar."
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  id: Context
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: Context
  nameWithType: IDesignerSerializationManager.Context
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Obtém uma área de armazenamento baseado em pilha, definido pelo utilizador que é útil para a comunicação entre serializers."
  remarks: "Esta área de armazenamento permitem a comunicação das informações de contexto de objeto para serializers. Informações de contexto sobre os objetos que estão a ser serializada podem ser armazenadas e acedidas através deste <xref:System.ComponentModel.Design.Serialization.ContextStack>.</xref:System.ComponentModel.Design.Serialization.ContextStack>"
  syntax:
    content: public System.ComponentModel.Design.Serialization.ContextStack Context { get; }
    return:
      type: System.ComponentModel.Design.Serialization.ContextStack
      description: "A <xref href=&quot;System.ComponentModel.Design.Serialization.ContextStack&quot;> </xref> que armazena os dados."
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  id: CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: CreateInstance(Type,ICollection,String,Boolean)
  nameWithType: IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Cria uma instância do tipo especificado e adiciona-o a uma coleção de instâncias nomeadas."
  remarks: "Objetos que implemente <xref:System.ComponentModel.IComponent>são adicionados ao contentor do momento da conceção, se o `addToContainer` parâmetro é `true`.</xref:System.ComponentModel.IComponent>"
  syntax:
    content: public object CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);
    parameters:
    - id: type
      type: System.Type
      description: "O tipo de dados a criar."
    - id: arguments
      type: System.Collections.ICollection
      description: "Os argumentos transmitidos para o construtor para este tipo."
    - id: name
      type: System.String
      description: "O nome do objeto. Este nome pode ser utilizado para aceder ao objeto mais tarde através de <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*>.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*> Se <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> é transmitido, o objeto ainda está criado, mas não pode ser acedido por nome."
    - id: addToContainer
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, este objeto é adicionado ao contentor do design. O objecto tem de implementar <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> para este ter qualquer efeito."
    return:
      type: System.Object
      description: "A instância de objeto acabado de criar."
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)
  id: GetInstance(System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: GetInstance(String)
  nameWithType: IDesignerSerializationManager.GetInstance(String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Obtém uma instância de um objeto de nome especificado, criado ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se esse objeto não existe."
  remarks: "O nome do objeto obter deverá ter sido definido através de uma chamada anterior para <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>"
  syntax:
    content: public object GetInstance (string name);
    parameters:
    - id: name
      type: System.String
      description: "O nome do objecto a obter."
    return:
      type: System.Object
      description: "Uma instância do objeto com o nome especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> não se é possível encontrar nenhum objeto com este nome."
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)
  id: GetName(System.Object)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: GetName(Object)
  nameWithType: IDesignerSerializationManager.GetName(Object)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Obtém o nome do objeto especificado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o objeto não tem nome."
  syntax:
    content: public string GetName (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Obter o nome para o objeto."
    return:
      type: System.String
      description: "O nome do objeto, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o objeto é sem nome."
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)
  id: GetSerializer(System.Type,System.Type)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: GetSerializer(Type,Type)
  nameWithType: IDesignerSerializationManager.GetSerializer(Type,Type)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Obtém um serializador do tipo pedido para o tipo de objeto especificado."
  syntax:
    content: public object GetSerializer (Type objectType, Type serializerType);
    parameters:
    - id: objectType
      type: System.Type
      description: "O tipo de objeto para obter o serializador para."
    - id: serializerType
      type: System.Type
      description: "O tipo de serializador obter."
    return:
      type: System.Object
      description: "Uma instância do serializador solicitado, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se nenhum serializador adequado pode ser localizado."
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)
  id: GetType(System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: GetType(String)
  nameWithType: IDesignerSerializationManager.GetType(String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Obtém um tipo com o nome especificado."
  syntax:
    content: public Type GetType (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "O nome completamente qualificado do tipo a carregar."
    return:
      type: System.Type
      description: "Uma instância do tipo, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o tipo não pode ser carregado."
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  id: Properties
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: Properties
  nameWithType: IDesignerSerializationManager.Properties
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Indica as propriedades personalizadas que podem ser serializáveis com serializers disponíveis."
  remarks: "Esta propriedade pode conter uma coleção vazia. Um serializador deve nunca partem do princípio de que existem propriedades. Uma classe derivada ou implementação de <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>define o conjunto de propriedades que são expostos aqui.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection Properties { get; }
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> que contém as propriedades para ser serializado."
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  id: RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: RemoveSerializationProvider(IDesignerSerializationProvider)
  nameWithType: IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Remove um fornecedor de serialização personalizada do Gestor de serialização."
  syntax:
    content: public void RemoveSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);
    parameters:
    - id: provider
      type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
      description: "O fornecedor para remover. Este objeto tem foram adicionado utilizando a <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*>.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*>"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)
  id: ReportError(System.Object)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: ReportError(Object)
  nameWithType: IDesignerSerializationManager.ReportError(Object)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Relatórios de um erro de serialização."
  remarks: "Se o Gestor de serialização suporta o registo de vários erros na sua implementação do ReportError, pode armazenar o objeto de informações de erro para um relatório futuro onde todos os erros encontrados podem ser apresentados em simultâneo. Se este método armazena vários erros, serialização pode continuar após uma chamada para este método. Se este método não suporta o registo de vários erros, este método deve acionar uma exceção, o que interrompe a serialização.      > [!NOTE] > O Gestor de serialização nunca deve acionar uma excepção para erros encontrados durante a serialização. -Só deve acionar uma excepção durante a desserialização. Caso contrário, os utilizadores ficam confundidos porque guardar o documento nunca devem falhar."
  syntax:
    content: public void ReportError (object errorInformation);
    parameters:
    - id: errorInformation
      type: System.Object
      description: "Erro ao relatório. Este objeto de informações pode ser de qualquer tipo de objeto. Se se tratar de uma exceção, a mensagem da exceção é extraída e reportada para o utilizador. Se se tratar de qualquer outro tipo, <xref:System.Object.ToString*>é chamado para apresentar as informações ao utilizador.</xref:System.Object.ToString*>"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName
  id: ResolveName
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: ResolveName
  nameWithType: IDesignerSerializationManager.ResolveName
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Ocorre quando <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*>não é possível localizar o nome especificado na tabela de nome do Gestor de serialização.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*>"
  remarks: "Este evento é uma forma de um serializador criar um objeto a pedido, para que o serializador não tenham de criação do objecto de ordem pela dependência. O delegado para este evento é limpa imediatamente após a serialização ou anulação da serialização está concluída."
  syntax:
    content: public event System.ComponentModel.Design.Serialization.ResolveNameEventHandler ResolveName;
    return:
      type: System.ComponentModel.Design.Serialization.ResolveNameEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete
  id: SerializationComplete
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: SerializationComplete
  nameWithType: IDesignerSerializationManager.SerializationComplete
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Ocorre quando a serialização estiver concluída."
  remarks: "Este evento é desencadeado quando a serialização ou anulação da serialização estiver concluída.       Geralmente, o código de serialização foi escrito para emitir dados de serialização e não requer, normalmente, relacionados com o estado de verificação e processamento. Se for necessário manter os dados de estado em toda a serialização, dados podem ser definidos e acedidos por um serializador, que pode escutar eventos SerializationComplete e limpar os dados depois de serialização. Restaurar o estado correto depois de serialização pode ser importante porque serializers podem ser reutilizados durante a serialização e dados de estado representada ou abra fluxos poderão não estar corretos.       Por exemplo, se um serializador tem de escrever para outro ficheiro, tal como um ficheiro de recursos, é ineficaz para estruturar o serializador para fechar o ficheiro quando terminar. Serialização de um gráfico de objeto, normalmente, requer serializers várias. O ficheiro de recursos deverá ser aberto e fechado demasiadas vezes. Em vez disso, pode ser fechado o ficheiro de recurso no fim da serialização por um objeto que listened SerializationComplete eventos."
  syntax:
    content: public event EventHandler SerializationComplete;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)
  id: SetName(System.Object,System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: SetName(Object,String)
  nameWithType: IDesignerSerializationManager.SetName(Object,String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "Define o nome do objeto especificado existente."
  remarks: "Este método é útil quando é necessário criar e, em seguida, atribua o nome uma instância de um objeto sem utilizar <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A> Se tentar mudar o nome de um objeto existente ou se tentar dar um nome que já foi atribuído um novo objeto, é emitida uma exceção."
  syntax:
    content: public void SetName (object instance, string name);
    parameters:
    - id: instance
      type: System.Object
      description: "A instância de objeto para o nome."
    - id: name
      type: System.String
      description: "O nome a atribuir a instância."
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: AddSerializationProvider(IDesignerSerializationProvider)
  nameWithType: IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: IDesignerSerializationProvider
  nameWithType: IDesignerSerializationProvider
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: Context
  nameWithType: IDesignerSerializationManager.Context
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
- uid: System.ComponentModel.Design.Serialization.ContextStack
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: ContextStack
  nameWithType: ContextStack
  fullName: System.ComponentModel.Design.Serialization.ContextStack
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: CreateInstance(Type,ICollection,String,Boolean)
  nameWithType: IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetInstance(String)
  nameWithType: IDesignerSerializationManager.GetInstance(String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(String)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetName(Object)
  nameWithType: IDesignerSerializationManager.GetName(Object)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(Object)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetSerializer(Type,Type)
  nameWithType: IDesignerSerializationManager.GetSerializer(Type,Type)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type,Type)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetType(String)
  nameWithType: IDesignerSerializationManager.GetType(String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(String)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: Properties
  nameWithType: IDesignerSerializationManager.Properties
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: RemoveSerializationProvider(IDesignerSerializationProvider)
  nameWithType: IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: ReportError(Object)
  nameWithType: IDesignerSerializationManager.ReportError(Object)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(Object)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: ResolveName
  nameWithType: IDesignerSerializationManager.ResolveName
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName
- uid: System.ComponentModel.Design.Serialization.ResolveNameEventHandler
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: ResolveNameEventHandler
  nameWithType: ResolveNameEventHandler
  fullName: System.ComponentModel.Design.Serialization.ResolveNameEventHandler
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: SerializationComplete
  nameWithType: IDesignerSerializationManager.SerializationComplete
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: SetName(Object,String)
  nameWithType: IDesignerSerializationManager.SetName(Object,String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(Object,String)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: AddSerializationProvider
  nameWithType: IDesignerSerializationManager.AddSerializationProvider
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: Context
  nameWithType: IDesignerSerializationManager.Context
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: CreateInstance
  nameWithType: IDesignerSerializationManager.CreateInstance
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetInstance
  nameWithType: IDesignerSerializationManager.GetInstance
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetName
  nameWithType: IDesignerSerializationManager.GetName
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetSerializer
  nameWithType: IDesignerSerializationManager.GetSerializer
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetType
  nameWithType: IDesignerSerializationManager.GetType
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: Properties
  nameWithType: IDesignerSerializationManager.Properties
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: RemoveSerializationProvider
  nameWithType: IDesignerSerializationManager.RemoveSerializationProvider
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: ReportError
  nameWithType: IDesignerSerializationManager.ReportError
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: SetName
  nameWithType: IDesignerSerializationManager.SetName
