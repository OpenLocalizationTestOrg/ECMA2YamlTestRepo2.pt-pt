### YamlMime:ManagedReference
items:
- uid: System.Globalization.GregorianCalendar
  id: GregorianCalendar
  children:
  - System.Globalization.GregorianCalendar.#ctor
  - System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)
  - System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.GregorianCalendar.ADEra
  - System.Globalization.GregorianCalendar.AlgorithmType
  - System.Globalization.GregorianCalendar.CalendarType
  - System.Globalization.GregorianCalendar.Eras
  - System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.GetEra(System.DateTime)
  - System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.GetMonth(System.DateTime)
  - System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.GetYear(System.DateTime)
  - System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.MaxSupportedDateTime
  - System.Globalization.GregorianCalendar.MinSupportedDateTime
  - System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.GregorianCalendar.TwoDigitYearMax
  langs:
  - csharp
  name: GregorianCalendar
  nameWithType: GregorianCalendar
  fullName: System.Globalization.GregorianCalendar
  type: Class
  summary: "Represents the Gregorian calendar."
  remarks: "The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the GregorianCalendar class recognizes only the current era (A.D. or C.E.).      > [!NOTE] >  For information about using the GregorianCalendar class and the other calendar classes in the .NET Framework, see [Working with Calendars](~/add/includes/ajax-current-ext-md.md).       A leap year in the Gregorian calendar is defined as a year that is evenly divisible by 4, unless it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       The Gregorian calendar has 12 months with 28 to 31 days each: January (31 days), February (28 or 29 days), March (31 days), April (30 days), May (31 days), June (30 days), July (31 days), August (31 days), September (30 days), October (31 days), November (30 days), and December (31 days). February has 29 days during leap years and 28 during common years.      > [!IMPORTANT] >  By default, all <xref:System.DateTime> and <xref:System.DateTimeOffset> values express dates and times in the Gregorian calendar.       The Gregorian calendar was developed as a replacement for the Julian calendar (which is represented by the <xref:System.Globalization.JulianCalendar> class) and was first introduced in a small number of cultures on October 15, 1582. When working with historic dates that precede a culture&quot;s adoption of the Gregorian calendar, you should use the original calendar if it is available in the .NET Framework. For example, Denmark changed from the Julian calendar to the Gregorian calendar on February 19 (in the Julian calendar) or March 1 (in the Gregorian calendar) of 1700. In this case, for dates before the adoption of the Gregorian calendar, you should use the Julian calendar. However, note that no culture offers intrinsic support for the <xref:System.Globalization.JulianCalendar> class. You must use the <xref:System.Globalization.JulianCalendar> class as a standalone calendar. For more information, see .       The following example illustrates that February 18, 1700 in the Julian calendar, which is the last day the Julian calendar was officially used in Denmark, is one day earlier than March 1, 1700 in the Gregorian calendar.       [!code-cs[System.Globalization.GregorianCalendar.Class#1](~/add/codesnippet/csharp/t-system.globalization.g_0_1.cs)]  [!code-vb[System.Globalization.GregorianCalendar.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.g_0_1.vb)]       Each <xref:System.Globalization.CultureInfo> supports a set of calendars. The <xref:System.Globalization.CultureInfo.Calendar%2A> property returns the default calendar for the culture, and the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref:System.Globalization.CultureInfo>, the application can set the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property to a new <xref:System.Globalization.Calendar>.       <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> ignores punctuation in abbreviated era names, only if the GregorianCalendar is selected in <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> and the culture uses &quot;A.D.&quot; as the era name, that is, &quot;A.D.&quot; is equivalent to &quot;AD&quot;."
  example:
  - "The following code example shows that <xref:System.Globalization.DateTimeFormatInfo> ignores the punctuation in the era name, only if the calendar is Gregorian and the culture uses the era name \"A.D.\".  \n  \n [!code-cs[System.Globalization.GregorianCalendar.GetEra#1](~/add/codesnippet/csharp/t-system.globalization.g_0_2.cs)]\n [!code-cpp[System.Globalization.GregorianCalendar.GetEra#1](~/add/codesnippet/cpp/t-system.globalization.g_0_2.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar.GetEra#1](~/add/codesnippet/visualbasic/t-system.globalization.g_0_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class GregorianCalendar : System.Globalization.Calendar
  inheritance:
  - System.Globalization.Calendar
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GregorianCalendar()
  nameWithType: GregorianCalendar.GregorianCalendar()
  fullName: System.Globalization.GregorianCalendar.GregorianCalendar()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Initializes a new instance of the <xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref> class using the default <xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref> value."
  remarks: "The default <xref:System.Globalization.GregorianCalendarTypes> value is <xref:System.Globalization.GregorianCalendarTypes>. If the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> property of the <xref:System.Globalization.CultureInfo> is set to a <xref:System.Globalization.GregorianCalendar> that is created with this constructor, the dates and times are localized in the language associated with the <xref:System.Globalization.CultureInfo>."
  example:
  - "The following code example prints a <xref:System.DateTime> using a <xref:System.Globalization.GregorianCalendar> that is localized.  \n  \n [!code-vb[System.Globalization.GregorianCalendarLocalized#1](~/add/codesnippet/visualbasic/m-system.globalization.g_2_1.vb)]\n [!code-cs[System.Globalization.GregorianCalendarLocalized#1](~/add/codesnippet/csharp/m-system.globalization.g_2_1.cs)]\n [!code-cpp[System.Globalization.GregorianCalendarLocalized#1](~/add/codesnippet/cpp/m-system.globalization.g_2_1.cpp)]"
  syntax:
    content: public GregorianCalendar ();
    parameters: []
  overload: System.Globalization.GregorianCalendar.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)
  id: '#ctor(System.Globalization.GregorianCalendarTypes)'
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GregorianCalendar(GregorianCalendarTypes)
  nameWithType: GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)
  fullName: System.Globalization.GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Initializes a new instance of the <xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref> class using the specified <xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref> value."
  syntax:
    content: public GregorianCalendar (System.Globalization.GregorianCalendarTypes type);
    parameters:
    - id: type
      type: System.Globalization.GregorianCalendarTypes
      description: "The <xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref> value that denotes which language version of the calendar to create."
  overload: System.Globalization.GregorianCalendar.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>type</code> is not a member of the <xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref> enumeration."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: AddMonths(DateTime,Int32)
  nameWithType: GregorianCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.GregorianCalendar.AddMonths(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns a <xref:System.DateTime> that is the specified number of months away from the specified <xref:System.DateTime>."
  remarks: "The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref:System.DateTime> is affected if the resulting month is outside the year of the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, if the specified month is October, which has 31 days, the specified day is the 31st day of that month, and the value of the `months` parameter is 6, the resulting year is one more than the specified year, the resulting month is April, and the resulting day is the 30th day, which is the last day in April.       If the value of the `months` parameter is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.g_8_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/csharp/m-system.globalization.g_8_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_8_2.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_8_2.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_8_2.cpp)]"
  syntax:
    content: public override DateTime AddMonths (DateTime time, int months);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to which to add months."
    - id: months
      type: System.Int32
      description: "The number of months to add."
    return:
      type: System.DateTime
      description: "The <xref:System.DateTime> that results from adding the specified number of months to the specified <xref:System.DateTime>."
  overload: System.Globalization.GregorianCalendar.AddMonths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The resulting <xref:System.DateTime> is outside the supported range."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>months</code> is less than -120000.       -or-       <code>months</code> is greater than 120000."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: AddYears(DateTime,Int32)
  nameWithType: GregorianCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.GregorianCalendar.AddYears(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns a <xref:System.DateTime> that is the specified number of years away from the specified <xref:System.DateTime>."
  remarks: "The day part of the resulting <xref:System.DateTime> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The month part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>. This implementation supports only the current era. Therefore, <xref:System.ArgumentException> is thrown if the resulting year is outside the era of the specified <xref:System.DateTime>. The time-of-day part of the resulting <xref:System.DateTime> remains the same as the specified <xref:System.DateTime>.       For example, February has 28 days, except during leap years when it has 29 days. If the specified date is the 29th day of February in a leap year and the value of `years` is 1, the resulting date will be the 28th day of February in the following year.       If `years` is negative, the resulting <xref:System.DateTime> is earlier than the specified <xref:System.DateTime>.       The<xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> value always equals <xref:System.DateTimeKind?displayProperty=fullName>. You can preserve the <xref:System.DateTime.Kind%2A> property of the `time` parameter by calling the <xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> method, as the following example shows.       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.g_4_1.vb)]  [!code-cs[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/csharp/m-system.globalization.g_4_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_4_2.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_4_2.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_4_2.cpp)]"
  syntax:
    content: public override DateTime AddYears (DateTime time, int years);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to which to add years."
    - id: years
      type: System.Int32
      description: "The number of years to add."
    return:
      type: System.DateTime
      description: "The <xref:System.DateTime> that results from adding the specified number of years to the specified <xref:System.DateTime>."
  overload: System.Globalization.GregorianCalendar.AddYears*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The resulting <xref:System.DateTime> is outside the supported range."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.ADEra
  id: ADEra
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: ADEra
  nameWithType: GregorianCalendar.ADEra
  fullName: System.Globalization.GregorianCalendar.ADEra
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Represents the current era. This field is constant."
  remarks: 'The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.). This field always returns 1.'
  syntax:
    content: public const int ADEra = 1;
    return:
      type: System.Int32
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.AlgorithmType
  id: AlgorithmType
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: AlgorithmType
  nameWithType: GregorianCalendar.AlgorithmType
  fullName: System.Globalization.GregorianCalendar.AlgorithmType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets a value that indicates whether the current calendar is solar-based, lunar-based, or a combination of both."
  remarks: ''
  example:
  - "The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \n  \n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.g_2_1.cs)]\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.g_2_1.vb)]"
  syntax:
    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }
    return:
      type: System.Globalization.CalendarAlgorithmType
      description: "Always returns <xref href=&quot;System.Globalization.CalendarAlgorithmType&quot;></xref>."
  overload: System.Globalization.GregorianCalendar.AlgorithmType*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.CalendarType
  id: CalendarType
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: CalendarType
  nameWithType: GregorianCalendar.CalendarType
  fullName: System.Globalization.GregorianCalendar.CalendarType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets or sets the <xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref> value that denotes the language version of the current <xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref>."
  remarks: ''
  example:
  - "The following code example demonstrates how to determine the GregorianCalendar language version supported by the culture.  \n  \n [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/add/codesnippet/visualbasic/p-system.globalization.g_3_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/add/codesnippet/cpp/p-system.globalization.g_3_1.cpp)]\n [!code-cs[System.Globalization.GregorianCalendarTypes#1](~/add/codesnippet/csharp/p-system.globalization.g_3_1.cs)]"
  syntax:
    content: public virtual System.Globalization.GregorianCalendarTypes CalendarType { get; set; }
    return:
      type: System.Globalization.GregorianCalendarTypes
      description: "A <xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref> value that denotes the language version of the current <xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref>."
  overload: System.Globalization.GregorianCalendar.CalendarType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value specified in a set operation is not a member of the <xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref> enumeration."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "In a set operation, the current instance is read-only."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.Eras
  id: Eras
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: Eras
  nameWithType: GregorianCalendar.Eras
  fullName: System.Globalization.GregorianCalendar.Eras
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets the list of eras in the <xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref>."
  remarks: 'The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.). This property always returns an array with only one element.'
  syntax:
    content: public override int[] Eras { get; }
    return:
      type: System.Int32[]
      description: "An array of integers that represents the eras in the <xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref>."
  overload: System.Globalization.GregorianCalendar.Eras*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetDayOfMonth(DateTime)
  nameWithType: GregorianCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the day of the month in the specified <xref:System.DateTime>."
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_5_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_5_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_5_1.cpp)]"
  syntax:
    content: public override int GetDayOfMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.Int32
      description: "An integer from 1 to 31 that represents the day of the month in <code>time</code>."
  overload: System.Globalization.GregorianCalendar.GetDayOfMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetDayOfWeek(DateTime)
  nameWithType: GregorianCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfWeek(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the day of the week in the specified <xref:System.DateTime>."
  remarks: "The <xref:System.DayOfWeek> values are Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday."
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_0_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_0_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_0_1.cpp)]"
  syntax:
    content: public override DayOfWeek GetDayOfWeek (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.DayOfWeek
      description: "A <xref:System.DayOfWeek> value that represents the day of the week in <code>time</code>."
  overload: System.Globalization.GregorianCalendar.GetDayOfWeek*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetDayOfYear(DateTime)
  nameWithType: GregorianCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the day of the year in the specified <xref:System.DateTime>."
  remarks: "The day of the year is defined as the number of days from the first day of the year. For example, GetDayOfYear for the first day of the first month returns 1, and GetDayOfYear for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref:System.Globalization.GregorianCalendar.GetDaysInYear%2A>."
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_3_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_3_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_3_1.cpp)]"
  syntax:
    content: public override int GetDayOfYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.Int32
      description: "An integer from 1 to 366 that represents the day of the year in <code>time</code>."
  overload: System.Globalization.GregorianCalendar.GetDayOfYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the number of days in the specified month in the specified year in the specified era."
  remarks: "For example, this method returns 28 or 29 for February (`month` = 2), depending on whether `year` is a leap year."
  example:
  - "The following code example calls GetDaysInMonth for the second month in each of five years in each era.  \n  \n [!code-cpp[System.Globalization.GregorianCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/5d22c0c3-8560-4ab0-878f-_1.cpp)]\n [!code-cs[System.Globalization.GregorianCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/5d22c0c3-8560-4ab0-878f-_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/5d22c0c3-8560-4ab0-878f-_1.vb)]"
  syntax:
    content: public override int GetDaysInMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: month
      type: System.Int32
      description: "An integer from 1 to 12 that represents the month."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Int32
      description: "The number of days in the specified month in the specified year in the specified era."
  overload: System.Globalization.GregorianCalendar.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetDaysInYear(Int32,Int32)
  nameWithType: GregorianCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetDaysInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the number of days in the specified year in the specified era."
  remarks: "For example, this method returns 365 or 366, depending on whether `year` is a leap year."
  example:
  - "The following code example calls GetDaysInYear for five years in each era.  \n  \n [!code-cpp[System.Globalization.GregorianCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/a71f2fe7-84c1-4827-ac70-_1.cpp)]\n [!code-cs[System.Globalization.GregorianCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/a71f2fe7-84c1-4827-ac70-_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/a71f2fe7-84c1-4827-ac70-_1.vb)]"
  syntax:
    content: public override int GetDaysInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Int32
      description: "The number of days in the specified year in the specified era."
  overload: System.Globalization.GregorianCalendar.GetDaysInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetEra(DateTime)
  nameWithType: GregorianCalendar.GetEra(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetEra(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the era in the specified <xref:System.DateTime>."
  remarks: 'The Gregorian calendar recognizes two eras: B.C. or B.C.E., and A.D. or C.E. This implementation of the <xref:System.Globalization.GregorianCalendar> class recognizes only the current era (A.D. or C.E.).'
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_6_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_6_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_6_1.cpp)]"
  syntax:
    content: public override int GetEra (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.Int32
      description: "An integer that represents the era in <code>time</code>."
  overload: System.Globalization.GregorianCalendar.GetEra*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetLeapMonth(Int32,Int32)
  nameWithType: GregorianCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetLeapMonth(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Calculates the leap month for a specified year and era."
  syntax:
    content: public override int GetLeapMonth (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "A year."
    - id: era
      type: System.Int32
      description: "An era. Specify either <xref href=&quot;System.Globalization.GregorianCalendar.ADEra&quot;></xref> or <xref uid=&quot;langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;GregorianCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Int32
      description: "Always 0 because the Gregorian calendar does not recognize leap months."
  overload: System.Globalization.GregorianCalendar.GetLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is less than the Gregorian calendar year 1 or greater than the Gregorian calendar year 9999.       -or-       <code>era</code> is not <xref href=&quot;System.Globalization.GregorianCalendar.ADEra&quot;></xref> or <xref uid=&quot;langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;GregorianCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetMonth(DateTime)
  nameWithType: GregorianCalendar.GetMonth(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the month in the specified <xref:System.DateTime>."
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_9_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_9_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_9_1.cpp)]"
  syntax:
    content: public override int GetMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.Int32
      description: "An integer from 1 to 12 that represents the month in <code>time</code>."
  overload: System.Globalization.GregorianCalendar.GetMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: GregorianCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetMonthsInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the number of months in the specified year in the specified era."
  remarks: ''
  example:
  - "The following code example calls GetMonthsInYear for five years in each era.  \n  \n [!code-cs[System.Globalization.GregorianCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/401ca427-6c60-47eb-91ba-_1.cs)]\n [!code-cpp[System.Globalization.GregorianCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/401ca427-6c60-47eb-91ba-_1.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/401ca427-6c60-47eb-91ba-_1.vb)]"
  syntax:
    content: public override int GetMonthsInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Int32
      description: "The number of months in the specified year in the specified era."
  overload: System.Globalization.GregorianCalendar.GetMonthsInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetYear(DateTime)
  nameWithType: GregorianCalendar.GetYear(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns the year in the specified <xref:System.DateTime>."
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_7_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_7_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_7_1.cpp)]"
  syntax:
    content: public override int GetYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "The <xref:System.DateTime> to read."
    return:
      type: System.Int32
      description: "An integer that represents the year in <code>time</code>."
  overload: System.Globalization.GregorianCalendar.GetYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determines whether the specified date in the specified era is a leap day."
  remarks: "A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       A leap day is a day that occurs only in a leap year. In the Gregorian calendar, the 29th day of February is the only leap day."
  example:
  - "The following code example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  \n  \n [!code-cpp[System.Globalization.GregorianCalendar.IsLeapDay#1](~/add/codesnippet/cpp/f70e7f67-7d6a-4484-9fbf-_1.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/f70e7f67-7d6a-4484-9fbf-_1.vb)]\n [!code-cs[System.Globalization.GregorianCalendar.IsLeapDay#1](~/add/codesnippet/csharp/f70e7f67-7d6a-4484-9fbf-_1.cs)]"
  syntax:
    content: public override bool IsLeapDay (int year, int month, int day, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: month
      type: System.Int32
      description: "An integer from 1 to 12 that represents the month."
    - id: day
      type: System.Int32
      description: "An integer from 1 to 31 that represents the day."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified day is a leap day; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Globalization.GregorianCalendar.IsLeapDay*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>day</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determines whether the specified month in the specified year in the specified era is a leap month."
  remarks: "A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days.       A leap month is an entire month that occurs only in a leap year. The Gregorian calendar does not have any leap months."
  example:
  - "The following code example calls IsLeapMonth for all the months in five years in the current era.  \n  \n [!code-cpp[System.Globalization.GregorianCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/de7e90b6-6a1d-4ed0-8d65-_1.cpp)]\n [!code-cs[System.Globalization.GregorianCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/de7e90b6-6a1d-4ed0-8d65-_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/de7e90b6-6a1d-4ed0-8d65-_1.vb)]"
  syntax:
    content: public override bool IsLeapMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: month
      type: System.Int32
      description: "An integer from 1 to 12 that represents the month."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Boolean
      description: "This method always returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>, unless overridden by a derived class."
  overload: System.Globalization.GregorianCalendar.IsLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: IsLeapYear(Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Determines whether the specified year in the specified era is a leap year."
  remarks: "A leap year in the Gregorian calendar is defined as a year that is evenly divisible by four, except if it is divisible by 100. However, years that are divisible by 400 are leap years. For example, the year 1900 was not a leap year, but the year 2000 was. A common year has 365 days and a leap year has 366 days."
  example:
  - "The following code example calls IsLeapYear for five years in each of the eras.  \n  \n [!code-cs[System.Globalization.GregorianCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.g_1_1.cs)]\n [!code-cpp[System.Globalization.GregorianCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.g_1_1.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.g_1_1.vb)]"
  syntax:
    content: public override bool IsLeapYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified year is a leap year; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Globalization.GregorianCalendar.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: MaxSupportedDateTime
  nameWithType: GregorianCalendar.MaxSupportedDateTime
  fullName: System.Globalization.GregorianCalendar.MaxSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets the latest date and time supported by the <xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref> type."
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.g_1_1.cs)]\n [!code-cpp[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.g_1_1.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.g_1_1.vb)]"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "The latest date and time supported by the <xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref> type, which is the last moment of December 31, 9999 C.E. and is equivalent to <xref:System.DateTime.MaxValue>."
  overload: System.Globalization.GregorianCalendar.MaxSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: MinSupportedDateTime
  nameWithType: GregorianCalendar.MinSupportedDateTime
  fullName: System.Globalization.GregorianCalendar.MinSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets the earliest date and time supported by the <xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref> type."
  remarks: "Although the value of the MinSupportedDateTime property is the first moment of January 1, 0001 C.E., the Gregorian calendar was not introduced until October 15, 1582, and its adoption throughout the European continent and worldwide was slow. Until they adopted the Gregorian calendar, most cultures in the European, American, and Australian continents used the Julian calendar, which is represented by the <xref:System.Globalization.JulianCalendar> class."
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.g_0_1.cs)]\n [!code-cpp[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.g_0_1.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.g_0_1.vb)]"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "The earliest date and time supported by the <xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref> type, which is the first moment of January 1, 0001 C.E. and is equivalent to <xref:System.DateTime.MinValue>."
  overload: System.Globalization.GregorianCalendar.MinSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Returns a <xref:System.DateTime> that is set to the specified date and time in the specified era."
  syntax:
    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "An integer that represents the year."
    - id: month
      type: System.Int32
      description: "An integer from 1 to 12 that represents the month."
    - id: day
      type: System.Int32
      description: "An integer from 1 to 31 that represents the day."
    - id: hour
      type: System.Int32
      description: "An integer from 0 to 23 that represents the hour."
    - id: minute
      type: System.Int32
      description: "An integer from 0 to 59 that represents the minute."
    - id: second
      type: System.Int32
      description: "An integer from 0 to 59 that represents the second."
    - id: millisecond
      type: System.Int32
      description: "An integer from 0 to 999 that represents the millisecond."
    - id: era
      type: System.Int32
      description: "An integer that represents the era."
    return:
      type: System.DateTime
      description: "The <xref:System.DateTime> that is set to the specified date and time in the current era."
  overload: System.Globalization.GregorianCalendar.ToDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code> is outside the range supported by the calendar.       -or-       <code>year</code> is outside the range supported by the calendar.       -or-       <code>month</code> is outside the range supported by the calendar.       -or-       <code>day</code> is outside the range supported by the calendar.       -or-       <code>hour</code> is less than zero or greater than 23.       -or-       <code>minute</code> is less than zero or greater than 59.       -or-       <code>second</code> is less than zero or greater than 59.       -or-       <code>millisecond</code> is less than zero or greater than 999."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: ToFourDigitYear(Int32)
  nameWithType: GregorianCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.GregorianCalendar.ToFourDigitYear(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Converts the specified year to a four-digit year by using the <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax*> property to determine the appropriate century."
  remarks: "<xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> is the last year in the 100-year range that can be represented by a two-digit year. The century is determined by finding the sole occurrence of the two-digit `year` within that 100-year range. For example, if <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       ToFourDigitYear supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to ToFourDigitYear, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception."
  syntax:
    content: public override int ToFourDigitYear (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "A two-digit or four-digit integer that represents the year to convert."
    return:
      type: System.Int32
      description: "An integer that contains the four-digit representation of <code>year</code>."
  overload: System.Globalization.GregorianCalendar.ToFourDigitYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code> is outside the range supported by the calendar."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: TwoDigitYearMax
  nameWithType: GregorianCalendar.TwoDigitYearMax
  fullName: System.Globalization.GregorianCalendar.TwoDigitYearMax
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "Gets or sets the last year of a 100-year range that can be represented by a 2-digit year."
  remarks: "This property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 2029, the 100-year range is from 1930 to 2029. Therefore, a 2-digit value of 30 is interpreted as 1930, while a 2-digit value of 29 is interpreted as 2029.       The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.GregorianCalendar> class does not detect changes in the system settings automatically.       The application should set this value to 99 to indicate that 2-digit years are to be taken literally. For example, if this property is set to 99, the 100-year range is from 0 (not a valid value for most calendars) to 99. Therefore, a 2-digit value of 30 is interpreted as 30."
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    return:
      type: System.Int32
      description: "The last year of a 100-year range that can be represented by a 2-digit year."
  overload: System.Globalization.GregorianCalendar.TwoDigitYearMax*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value specified in a set operation is less than 99.       -or-       The value specified in a set operation is greater than <xref uid=&quot;langword_csharp_MaxSupportedDateTime.Year&quot; name=&quot;MaxSupportedDateTime.Year&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "In a set operation, the current instance is read-only."
  platform:
  - net462
references:
- uid: System.Globalization.Calendar
  isExternal: false
  name: System.Globalization.Calendar
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Globalization.GregorianCalendar.#ctor
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GregorianCalendar()
  nameWithType: GregorianCalendar.GregorianCalendar()
  fullName: System.Globalization.GregorianCalendar.GregorianCalendar()
- uid: System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GregorianCalendar(GregorianCalendarTypes)
  nameWithType: GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)
  fullName: System.Globalization.GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)
- uid: System.Globalization.GregorianCalendarTypes
  parent: System.Globalization
  isExternal: false
  name: GregorianCalendarTypes
  nameWithType: GregorianCalendarTypes
  fullName: System.Globalization.GregorianCalendarTypes
- uid: System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AddMonths(DateTime,Int32)
  nameWithType: GregorianCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.GregorianCalendar.AddMonths(DateTime,Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AddYears(DateTime,Int32)
  nameWithType: GregorianCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.GregorianCalendar.AddYears(DateTime,Int32)
- uid: System.Globalization.GregorianCalendar.ADEra
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: ADEra
  nameWithType: GregorianCalendar.ADEra
  fullName: System.Globalization.GregorianCalendar.ADEra
- uid: System.Globalization.GregorianCalendar.AlgorithmType
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: GregorianCalendar.AlgorithmType
  fullName: System.Globalization.GregorianCalendar.AlgorithmType
- uid: System.Globalization.CalendarAlgorithmType
  parent: System.Globalization
  isExternal: false
  name: CalendarAlgorithmType
  nameWithType: CalendarAlgorithmType
  fullName: System.Globalization.CalendarAlgorithmType
- uid: System.Globalization.GregorianCalendar.CalendarType
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: CalendarType
  nameWithType: GregorianCalendar.CalendarType
  fullName: System.Globalization.GregorianCalendar.CalendarType
- uid: System.Globalization.GregorianCalendar.Eras
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: Eras
  nameWithType: GregorianCalendar.Eras
  fullName: System.Globalization.GregorianCalendar.Eras
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfMonth(DateTime)
  nameWithType: GregorianCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfMonth(DateTime)
- uid: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfWeek(DateTime)
  nameWithType: GregorianCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfWeek(DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfYear(DateTime)
  nameWithType: GregorianCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfYear(DateTime)
- uid: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)
- uid: System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDaysInYear(Int32,Int32)
  nameWithType: GregorianCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetDaysInYear(Int32,Int32)
- uid: System.Globalization.GregorianCalendar.GetEra(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetEra(DateTime)
  nameWithType: GregorianCalendar.GetEra(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetEra(DateTime)
- uid: System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetLeapMonth(Int32,Int32)
  nameWithType: GregorianCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetLeapMonth(Int32,Int32)
- uid: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetMonth(DateTime)
  nameWithType: GregorianCalendar.GetMonth(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetMonth(DateTime)
- uid: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: GregorianCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetMonthsInYear(Int32,Int32)
- uid: System.Globalization.GregorianCalendar.GetYear(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetYear(DateTime)
  nameWithType: GregorianCalendar.GetYear(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetYear(DateTime)
- uid: System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)
- uid: System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapYear(Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapYear(Int32,Int32)
- uid: System.Globalization.GregorianCalendar.MaxSupportedDateTime
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: GregorianCalendar.MaxSupportedDateTime
  fullName: System.Globalization.GregorianCalendar.MaxSupportedDateTime
- uid: System.Globalization.GregorianCalendar.MinSupportedDateTime
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: GregorianCalendar.MinSupportedDateTime
  fullName: System.Globalization.GregorianCalendar.MinSupportedDateTime
- uid: System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: ToFourDigitYear(Int32)
  nameWithType: GregorianCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.GregorianCalendar.ToFourDigitYear(Int32)
- uid: System.Globalization.GregorianCalendar.TwoDigitYearMax
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: GregorianCalendar.TwoDigitYearMax
  fullName: System.Globalization.GregorianCalendar.TwoDigitYearMax
- uid: System.Globalization.GregorianCalendar.#ctor*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GregorianCalendar
  nameWithType: GregorianCalendar.GregorianCalendar
- uid: System.Globalization.GregorianCalendar.AddMonths*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AddMonths
  nameWithType: GregorianCalendar.AddMonths
- uid: System.Globalization.GregorianCalendar.AddYears*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AddYears
  nameWithType: GregorianCalendar.AddYears
- uid: System.Globalization.GregorianCalendar.AlgorithmType*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: GregorianCalendar.AlgorithmType
- uid: System.Globalization.GregorianCalendar.CalendarType*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: CalendarType
  nameWithType: GregorianCalendar.CalendarType
- uid: System.Globalization.GregorianCalendar.Eras*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: Eras
  nameWithType: GregorianCalendar.Eras
- uid: System.Globalization.GregorianCalendar.GetDayOfMonth*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfMonth
  nameWithType: GregorianCalendar.GetDayOfMonth
- uid: System.Globalization.GregorianCalendar.GetDayOfWeek*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfWeek
  nameWithType: GregorianCalendar.GetDayOfWeek
- uid: System.Globalization.GregorianCalendar.GetDayOfYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfYear
  nameWithType: GregorianCalendar.GetDayOfYear
- uid: System.Globalization.GregorianCalendar.GetDaysInMonth*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDaysInMonth
  nameWithType: GregorianCalendar.GetDaysInMonth
- uid: System.Globalization.GregorianCalendar.GetDaysInYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDaysInYear
  nameWithType: GregorianCalendar.GetDaysInYear
- uid: System.Globalization.GregorianCalendar.GetEra*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetEra
  nameWithType: GregorianCalendar.GetEra
- uid: System.Globalization.GregorianCalendar.GetLeapMonth*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetLeapMonth
  nameWithType: GregorianCalendar.GetLeapMonth
- uid: System.Globalization.GregorianCalendar.GetMonth*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetMonth
  nameWithType: GregorianCalendar.GetMonth
- uid: System.Globalization.GregorianCalendar.GetMonthsInYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetMonthsInYear
  nameWithType: GregorianCalendar.GetMonthsInYear
- uid: System.Globalization.GregorianCalendar.GetYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetYear
  nameWithType: GregorianCalendar.GetYear
- uid: System.Globalization.GregorianCalendar.IsLeapDay*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapDay
  nameWithType: GregorianCalendar.IsLeapDay
- uid: System.Globalization.GregorianCalendar.IsLeapMonth*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapMonth
  nameWithType: GregorianCalendar.IsLeapMonth
- uid: System.Globalization.GregorianCalendar.IsLeapYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapYear
  nameWithType: GregorianCalendar.IsLeapYear
- uid: System.Globalization.GregorianCalendar.MaxSupportedDateTime*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: GregorianCalendar.MaxSupportedDateTime
- uid: System.Globalization.GregorianCalendar.MinSupportedDateTime*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: GregorianCalendar.MinSupportedDateTime
- uid: System.Globalization.GregorianCalendar.ToDateTime*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: ToDateTime
  nameWithType: GregorianCalendar.ToDateTime
- uid: System.Globalization.GregorianCalendar.ToFourDigitYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: ToFourDigitYear
  nameWithType: GregorianCalendar.ToFourDigitYear
- uid: System.Globalization.GregorianCalendar.TwoDigitYearMax*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: GregorianCalendar.TwoDigitYearMax
