### YamlMime:ManagedReference
items:
- uid: System.Web.DynamicData.DynamicFilter
  id: DynamicFilter
  children:
  - System.Web.DynamicData.DynamicFilter.#ctor
  - System.Web.DynamicData.DynamicFilter.Column
  - System.Web.DynamicData.DynamicFilter.DataField
  - System.Web.DynamicData.DynamicFilter.FilterChanged
  - System.Web.DynamicData.DynamicFilter.FilterTemplate
  - System.Web.DynamicData.DynamicFilter.FilterUIHint
  - System.Web.DynamicData.DynamicFilter.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)
  - System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)
  langs:
  - csharp
  name: DynamicFilter
  nameWithType: DynamicFilter
  fullName: System.Web.DynamicData.DynamicFilter
  type: Class
  summary: "Displays the UI for filtering table rows using a specified column."
  remarks: "In this topic:  \n  \n-   [Introduction](#introduction)  \n  \n-   [ClassContext](#ClassContext)  \n  \n-   [Declarative Syntax](#DeclarativeSyntax)  \n  \n<a name=\"introduction\"></a>   \n## Introduction  \n The DynamicFilter control is used in a page markup to generate the UI for filtering table rows. Dynamic Data creates the UI by using the default filter templates that are in the ~\\DynamicData\\Filters folder. These templates support foreign-key, Boolean, and enumeration column types.  \n  \n The following table shows some of the tasks you can perform.  \n  \n|Scenario|Description|  \n|--------------|-----------------|  \n|Specify the column to use for table row filtering.|Use the property <xref:System.Web.DynamicData.DynamicFilter.DataField%2A> to specify the column to use for table row filtering.|  \n|Specify the name of the filter template to use to create the UI.|Use the property <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> to specify the name of the filter template to use to create the UI.|  \n|Perform custom operations before the UI is rendered.|Use the <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> to perform custom operations before the UI is rendered.|  \n  \n You can specify the filter template to use in the following ways:  \n  \n-   By using the <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> property in page markup. This approach is a presentation-layer customization, which is independent of the schema (database), and which applies to a single page.  \n  \n-   By using the <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> attribute in the model. This approach is a data-layer customization, which depends on the specific schema (database), and which applies to the entire application.  \n  \n If you use both approaches, the filter template that is specified in the markup takes precedence over the template that is specified in the data model.  \n  \n<a name=\"ClassContext\"></a>   \n## Class Context  \n The DynamicFilter control is designed to work with the <xref:System.Web.UI.WebControls.QueryExtender> control. The DynamicFilter control is referenced by a <xref:System.Web.DynamicData.DynamicFilterExpression> instance inside a <xref:System.Web.UI.WebControls.QueryExtender> object in the page markup.  \n  \n The following figure shows the steps that Dynamic Data follows in order to implement table row filtering by a foreign-key column.  \n  \n ![Dynamic Data Query Elements](~/add/media/dynamic-dataquery.png \"Dynamic Data Query Elements\")  \n  \n1.  The DynamicFilter control passes the selected value to the <xref:System.Web.UI.WebControls.QueryExtender> control.  \n  \n2.  The <xref:System.Web.UI.WebControls.QueryExtender> control uses the value to create the query filtering information. It then passes this information to the data source control.  \n  \n3.  The data source control passes the filtering query information to the data source provider.  \n  \n4.  The data source provider passes the query to the database.  \n  \n5.  The database returns the filtered table rows.  \n  \n6.  The data source provider sends this data back to the data source control.  \n  \n7.  The data source control passes the filtered table rows to the data-bound control for display.  \n  \n<a name=\"DeclarativeSyntax\"></a>   \n## Declarative Syntax  \n  \n```  \n<asp:DynamicFilter  \n    ID=\"Control ID\"  \n    DataField=\"Name of the data field to use for filtering\"  \n    EnableViewState=\"True|False\"   \n    FilterUIHint=\"Name of the filter template to generate the UI\"  \n    OnFilterChanged=\"Filter changed event handler\"  \n    OnDataBinding=\"DataBinding event handler\"  \n    OnDisposed=\"Disposed event handler\"  \n    OnInit=\"Init event handler\"  \n    OnLoad=\"Load event handler\"  \n    OnPreRender=\"PreRender event handler\"  \n    OnUnload=\"Unload event handler\"   \n    Visible=\"True|False\"  \n    runat=\"server\"/>  \n```"
  example:
  - "A Visual Studio project with source code is available at this location: [Download](http://go.microsoft.com/fwlink/?LinkId=168914).  \n  \n The following examples use the default ForeignKey.ascx filter template to create the UI for filtering the Products table rows by the ProductCategory foreign-key column. When the user selects a ProductCategory value, only the rows that contain that value are displayed.  \n  \n The example requires the following:  \n  \n-   A Dynamic Data Web site or a Dynamic Data Web application. This enables you to create the `AdventureWorksLTDataContext` data context for the database and to create the classes for the tables to access. For more information, see `Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding`.  \n  \n [!code-cs[System.Web.DynamicData.DynamicFilter#1](~/add/codesnippet/csharp/t-system.web.dynamicdata_5_1.aspx)]\n [!code-vb[System.Web.DynamicData.DynamicFilter#1](~/add/codesnippet/visualbasic/t-system.web.dynamicdata_5_1.aspx)]  \n  \n [!code-cs[System.Web.DynamicData.DynamicFilter#2](~/add/codesnippet/csharp/t-system.web.dynamicdata_5_2.cs)]\n [!code-vb[System.Web.DynamicData.DynamicFilter#2](~/add/codesnippet/visualbasic/t-system.web.dynamicdata_5_2.vb)]"
  syntax:
    content: 'public class DynamicFilter : System.Web.UI.Control, System.Web.DynamicData.IFilterExpressionProvider'
  inheritance:
  - System.Object
  - System.Web.UI.Control
  implements:
  - System.Web.DynamicData.IFilterExpressionProvider
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.Controls
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.CreateControlCollection
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableTheming
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.Focus
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnInit(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SaveViewState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.SkinID
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.TrackViewState
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.Control.Visible
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilter.#ctor
  id: '#ctor'
  parent: System.Web.DynamicData.DynamicFilter
  langs:
  - csharp
  name: DynamicFilter()
  nameWithType: DynamicFilter.DynamicFilter()
  fullName: System.Web.DynamicData.DynamicFilter.DynamicFilter()
  type: Constructor
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.DynamicData.DynamicFilter&quot;></xref> class."
  remarks: "Typically you do not call the DynamicFilter constructor directly. Instead, you use the <xref:System.Web.DynamicData.DynamicFilter> class in page markup and the class is initialized when the page is loaded."
  syntax:
    content: public DynamicFilter ();
    parameters: []
  overload: System.Web.DynamicData.DynamicFilter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilter.Column
  id: Column
  parent: System.Web.DynamicData.DynamicFilter
  langs:
  - csharp
  name: Column
  nameWithType: DynamicFilter.Column
  fullName: System.Web.DynamicData.DynamicFilter.Column
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets the table column to use for filtering."
  remarks: "This property is for internal use only."
  syntax:
    content: protected System.Web.DynamicData.MetaColumn Column { get; }
    return:
      type: System.Web.DynamicData.MetaColumn
      description: "The table column to use for filtering."
  overload: System.Web.DynamicData.DynamicFilter.Column*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilter.DataField
  id: DataField
  parent: System.Web.DynamicData.DynamicFilter
  langs:
  - csharp
  name: DataField
  nameWithType: DynamicFilter.DataField
  fullName: System.Web.DynamicData.DynamicFilter.DataField
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets the name of the column to use for table row filtering."
  remarks: ''
  example:
  - "The following example shows how to specify the column for table row filtering in markup.  \n  \n```  \n<asp:DynamicFilter ID=\"CategoryFilter\" runat=\"server\"   \n    DataField=\"ProductCategory\" />  \n```"
  syntax:
    content: public string DataField { get; set; }
    return:
      type: System.String
      description: "The name of the column used for table row filtering."
  overload: System.Web.DynamicData.DynamicFilter.DataField*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilter.FilterChanged
  id: FilterChanged
  parent: System.Web.DynamicData.DynamicFilter
  langs:
  - csharp
  name: FilterChanged
  nameWithType: DynamicFilter.FilterChanged
  fullName: System.Web.DynamicData.DynamicFilter.FilterChanged
  type: Event
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Occurs when the user select a value for the foreign key."
  remarks: "The FilterChanged event is raised when the user selects a foreign-key value and before the new value is rendered. This enables you to provide an event-handling method that can perform custom operations, such as custom paging."
  example:
  - "The following example shows how to handle a filter-changed event. The handler resets the page index before the filtered rows are displayed.  \n  \n [!code-cs[System.Web.DynamicData.DynamicFilter#3](~/add/codesnippet/csharp/e-system.web.dynamicdata_1.cs)]\n [!code-vb[System.Web.DynamicData.DynamicFilter#3](~/add/codesnippet/visualbasic/e-system.web.dynamicdata_1.vb)]"
  syntax:
    content: public event EventHandler FilterChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilter.FilterTemplate
  id: FilterTemplate
  parent: System.Web.DynamicData.DynamicFilter
  langs:
  - csharp
  name: FilterTemplate
  nameWithType: DynamicFilter.FilterTemplate
  fullName: System.Web.DynamicData.DynamicFilter.FilterTemplate
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets the filter template that is associated with the current instance of this control."
  remarks: "Dynamic Data generates the UI for filtering table rows for supported column types. It uses the default filter templates that are in the ~\\DynamicData\\Filters folder."
  syntax:
    content: public System.Web.UI.Control FilterTemplate { get; }
    return:
      type: System.Web.UI.Control
      description: "The filter template that is associated with the current instance of this control."
  overload: System.Web.DynamicData.DynamicFilter.FilterTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilter.FilterUIHint
  id: FilterUIHint
  parent: System.Web.DynamicData.DynamicFilter
  langs:
  - csharp
  name: FilterUIHint
  nameWithType: DynamicFilter.FilterUIHint
  fullName: System.Web.DynamicData.DynamicFilter.FilterUIHint
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets the name of the filter template that is used to create the UI."
  remarks: "The FilterUIHint property lets you specify the filter template to create the UI for table row filtering. You can specify the filter template to use in the following ways:      -   By using the FilterUIHint property in page markup. This approach is a presentation-layer customization, which is independent of the schema (database) and which applies to a single page.      -   By using the <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> attribute in the model. This approach is a data-layer customization, which depends on the specific schema (database) and which applies to the entire application.       If you use both approaches, the filter template specified in the markup takes precedence over the template specified in the data model."
  example:
  - "The following example shows how to specify the filter template in markup to use for filtering.  \n  \n```  \n<asp:DynamicFilter ID=\"CategoryFilter\" runat=\"server\"   \n    FilterUIHint=\"ForeignKey\" />  \n```"
  syntax:
    content: public string FilterUIHint { get; set; }
    return:
      type: System.String
      description: "The name of the filter template."
  overload: System.Web.DynamicData.DynamicFilter.FilterUIHint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilter.Render(System.Web.UI.HtmlTextWriter)
  id: Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.DynamicData.DynamicFilter
  langs:
  - csharp
  name: Render(HtmlTextWriter)
  nameWithType: DynamicFilter.Render(HtmlTextWriter)
  fullName: System.Web.DynamicData.DynamicFilter.Render(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Sends server control content to the specified <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;></xref> object."
  remarks: "The writer renders the content to the page."
  syntax:
    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "The object that receives the server control content."
  overload: System.Web.DynamicData.DynamicFilter.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)
  id: System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)
  isEii: true
  parent: System.Web.DynamicData.DynamicFilter
  langs:
  - csharp
  name: System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(IQueryable)
  nameWithType: DynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(IQueryable)
  fullName: System.Web.DynamicData.DynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(IQueryable)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets the modified query using the current filter value."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.DynamicData.DynamicFilter> instance is cast to an <xref:System.Web.DynamicData.IFilterExpressionProvider> interface."
  syntax:
    content: System.Linq.IQueryable IFilterExpressionProvider.GetQueryable (System.Linq.IQueryable source);
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: "The data source query."
    return:
      type: System.Linq.IQueryable
      description: "The filter."
  overload: System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)
  id: System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)
  isEii: true
  parent: System.Web.DynamicData.DynamicFilter
  langs:
  - csharp
  name: System.Web.DynamicData.IFilterExpressionProvider.Initialize(IQueryableDataSource)
  nameWithType: DynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.Initialize(IQueryableDataSource)
  fullName: System.Web.DynamicData.DynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.Initialize(IQueryableDataSource)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.DynamicData.DynamicFilter&quot;></xref> class."
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Web.DynamicData.DynamicFilter> instance is cast to an <xref:System.Web.DynamicData.IFilterExpressionProvider> interface."
  syntax:
    content: void IFilterExpressionProvider.Initialize (System.Web.UI.WebControls.IQueryableDataSource dataSource);
    parameters:
    - id: dataSource
      type: System.Web.UI.WebControls.IQueryableDataSource
      description: "The data source."
  overload: System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.Control
  isExternal: false
  name: System.Web.UI.Control
- uid: System.Web.DynamicData.DynamicFilter.#ctor
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: DynamicFilter()
  nameWithType: DynamicFilter.DynamicFilter()
  fullName: System.Web.DynamicData.DynamicFilter.DynamicFilter()
- uid: System.Web.DynamicData.DynamicFilter.Column
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: Column
  nameWithType: DynamicFilter.Column
  fullName: System.Web.DynamicData.DynamicFilter.Column
- uid: System.Web.DynamicData.MetaColumn
  parent: System.Web.DynamicData
  isExternal: false
  name: MetaColumn
  nameWithType: MetaColumn
  fullName: System.Web.DynamicData.MetaColumn
- uid: System.Web.DynamicData.DynamicFilter.DataField
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: DataField
  nameWithType: DynamicFilter.DataField
  fullName: System.Web.DynamicData.DynamicFilter.DataField
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.DynamicData.DynamicFilter.FilterChanged
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: FilterChanged
  nameWithType: DynamicFilter.FilterChanged
  fullName: System.Web.DynamicData.DynamicFilter.FilterChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.DynamicData.DynamicFilter.FilterTemplate
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: FilterTemplate
  nameWithType: DynamicFilter.FilterTemplate
  fullName: System.Web.DynamicData.DynamicFilter.FilterTemplate
- uid: System.Web.DynamicData.DynamicFilter.FilterUIHint
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: FilterUIHint
  nameWithType: DynamicFilter.FilterUIHint
  fullName: System.Web.DynamicData.DynamicFilter.FilterUIHint
- uid: System.Web.DynamicData.DynamicFilter.Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: Render(HtmlTextWriter)
  nameWithType: DynamicFilter.Render(HtmlTextWriter)
  fullName: System.Web.DynamicData.DynamicFilter.Render(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(IQueryable)
  nameWithType: DynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(IQueryable)
  fullName: System.Web.DynamicData.DynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(IQueryable)
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: System.Web.DynamicData.IFilterExpressionProvider.Initialize(IQueryableDataSource)
  nameWithType: DynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.Initialize(IQueryableDataSource)
  fullName: System.Web.DynamicData.DynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.Initialize(IQueryableDataSource)
- uid: System.Web.UI.WebControls.IQueryableDataSource
  parent: System.Web.UI.WebControls
  isExternal: false
  name: IQueryableDataSource
  nameWithType: IQueryableDataSource
  fullName: System.Web.UI.WebControls.IQueryableDataSource
- uid: System.Web.DynamicData.DynamicFilter.#ctor*
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: DynamicFilter
  nameWithType: DynamicFilter.DynamicFilter
- uid: System.Web.DynamicData.DynamicFilter.Column*
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: Column
  nameWithType: DynamicFilter.Column
- uid: System.Web.DynamicData.DynamicFilter.DataField*
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: DataField
  nameWithType: DynamicFilter.DataField
- uid: System.Web.DynamicData.DynamicFilter.FilterTemplate*
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: FilterTemplate
  nameWithType: DynamicFilter.FilterTemplate
- uid: System.Web.DynamicData.DynamicFilter.FilterUIHint*
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: FilterUIHint
  nameWithType: DynamicFilter.FilterUIHint
- uid: System.Web.DynamicData.DynamicFilter.Render*
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: Render
  nameWithType: DynamicFilter.Render
- uid: System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable*
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: System.Web.DynamicData.IFilterExpressionProvider.GetQueryable
  nameWithType: DynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.GetQueryable
- uid: System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize*
  parent: System.Web.DynamicData.DynamicFilter
  isExternal: false
  name: System.Web.DynamicData.IFilterExpressionProvider.Initialize
  nameWithType: DynamicFilter.System.Web.DynamicData.IFilterExpressionProvider.Initialize
