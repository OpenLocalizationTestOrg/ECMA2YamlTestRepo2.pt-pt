### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.FocusManager
  id: FocusManager
  children:
  - System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.FocusedElementProperty
  - System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GotFocusEvent
  - System.Windows.Input.FocusManager.IsFocusScopeProperty
  - System.Windows.Input.FocusManager.LostFocusEvent
  - System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  - System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  langs:
  - csharp
  name: FocusManager
  nameWithType: FocusManager
  fullName: System.Windows.Input.FocusManager
  type: Class
  summary: "Provides a set of static methods, attached properties, and events for determining and setting focus scopes and for setting the focused element within the scope."
  remarks: "In [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] there are two concepts concerning focus: keyboard focus and logical focus.       Keyboard focus pertains to the element which is currently receiving keyboard input.  There can be only one element with keyboard focus.  This element with keyboard focus has <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> set to `true`.  <xref:System.Windows.Input.Keyboard.FocusedElement%2A?displayProperty=fullName> returns the element with keyboard focus.       Logical focus pertains to the <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName> within a specific focus scope.       A focus scope is a container element that keeps track of the <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName> within its scope.  By default, the <xref:System.Windows.Window> class is a focus scope as are the <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, and <xref:System.Windows.Controls.ToolBar> classes.  An element which is a focus scope has <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> set to `true`.       There can be multiple elements with logical focus, but there can only be one element with logical focus within a single focus scope.  An element with logical focus does not necessarily have keyboard focus, but an element with keyboard focus will have logical focus.  It is possible to define a focus scope within a focus scope.  In this case, both the parent focus scope and the child focus scope can have a <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>.       The following scenario illustrates how keyboard focus and logical focus change in a [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] application that has a <xref:System.Windows.Window> with a <xref:System.Windows.Controls.TextBox> and a <xref:System.Windows.Controls.Menu> which has a <xref:System.Windows.Controls.MenuItem>.  When keyboard focus changes from the <xref:System.Windows.Controls.TextBox> to the <xref:System.Windows.Controls.MenuItem>, the <xref:System.Windows.Controls.TextBox> losses keyboard focus but retains logical focus for the <xref:System.Windows.Window> focus scope.  The <xref:System.Windows.Controls.MenuItem> obtains keyboard focus and obtains logical focus for the <xref:System.Windows.Controls.Menu> focus scope.  When keyboard focus returns to the root <xref:System.Windows.Window>, the element in <xref:System.Windows.Window> focus scope with logical focus will obtain keyboard focus, which in this case is the <xref:System.Windows.Controls.TextBox>.  The <xref:System.Windows.Controls.TextBox> now has keyboard focus and logical focus.  The <xref:System.Windows.Controls.MenuItem> loses keyboard focus, but retains logical focus for the <xref:System.Windows.Controls.Menu> focus scope.       The default value of <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> on a <xref:System.Windows.Window>, <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ToolBar>, and <xref:System.Windows.Controls.ContextMenu> is `true`.       For more information on focus, see the [Input Overview](~/add/includes/ajax-current-ext-md.md) and the [Focus Overview](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static class FocusManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Adds a handler for the <xref:System.Windows.Input.FocusManager.GotFocus> attached event."
  syntax:
    content: public static void AddGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The <xref href=&quot;System.Windows.UIElement&quot;></xref> or <xref href=&quot;System.Windows.ContentElement&quot;></xref> that listens to this event."
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "The event handler to be added."
  overload: System.Windows.Input.FocusManager.AddGotFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Adds a handler for the <xref:System.Windows.Input.FocusManager.LostFocus> attached event."
  syntax:
    content: public static void AddLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The <xref href=&quot;System.Windows.UIElement&quot;></xref> or <xref href=&quot;System.Windows.ContentElement&quot;></xref> that listens to this event."
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "The event handler to be added."
  overload: System.Windows.Input.FocusManager.AddLostFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.FocusedElementProperty
  id: FocusedElementProperty
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: FocusedElementProperty
  nameWithType: FocusManager.FocusedElementProperty
  fullName: System.Windows.Input.FocusManager.FocusedElementProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifies the <xref:System.Windows.Input.FocusManager.FocusedElement*> attached property."
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusedElementProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  id: GetFocusedElement(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetFocusedElement(DependencyObject)
  nameWithType: FocusManager.GetFocusedElement(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusedElement(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Gets the element with logical focus within the specified focus scope."
  remarks: "The <xref:System.Windows.Input.FocusManager.FocusedElement%2A> is the element which has logical focus for a specific focus scope.  This object may or may not have keyboard focus.  Keyboard focus refers to the element that receives keyboard input.  For more information on focus, keyboard focus, and logical focus, see the [Input Overview](~/add/includes/ajax-current-ext-md.md).       If `element` is not a focus scope, this method will return `null`.       Use <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>, to specify the element with logical focus within a specified focus scope."
  example:
  - "The following example sets the element with logical focus by using the <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A> and it gets the element with logical focus by using the GetFocusedElement.  \n  \n [!code-cs[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focusgetsetfocusedelement)]\n [!code-vb[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focusgetsetfocusedelement)]"
  syntax:
    content: public static System.Windows.IInputElement GetFocusedElement (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The element with logical focus in the specified focus scope."
    return:
      type: System.Windows.IInputElement
      description: "The element in the specified focus scope with logical focus."
  overload: System.Windows.Input.FocusManager.GetFocusedElement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  id: GetFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetFocusScope(DependencyObject)
  nameWithType: FocusManager.GetFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Determines the closest ancestor of the specified element that has <xref:System.Windows.Input.FocusManager.IsFocusScope*> set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  remarks: "The default value of <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> on a <xref:System.Windows.Window>, <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ToolBar>, <xref:System.Windows.Controls.ContextMenu> is `true`.       A focus scope is a container element that keeps track of the <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName> within its scope.  By default, the <xref:System.Windows.Window> class is a focus scope as are the <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, and <xref:System.Windows.Controls.ToolBar> classes.  An element which is a focus scope has <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> set to `true`.       For more information on focus, keyboard focus, and logical focus, see the [Input Overview](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.DependencyObject GetFocusScope (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The element to get the closest focus scope for."
    return:
      type: System.Windows.DependencyObject
      description: "The focus scope for the specified element."
  overload: System.Windows.Input.FocusManager.GetFocusScope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  id: GetIsFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetIsFocusScope(DependencyObject)
  nameWithType: FocusManager.GetIsFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetIsFocusScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Determines whether the specified <xref href=&quot;System.Windows.DependencyObject&quot;></xref> is a focus scope."
  remarks: "A focus scope is a container element that keeps track of the <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName> within its scope.  By default, the <xref:System.Windows.Window> class is a focus scope as are the <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, and <xref:System.Windows.Controls.ToolBar> classes.  An element which is a focus scope has <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> set to `true`.       For more information on focus, keyboard focus, and logical focus, see the [Input Overview](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static bool GetIsFocusScope (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The element from which to read the attached property."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <xref:System.Windows.Input.FocusManager.IsFocusScope*> is set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> on the specified element; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Input.FocusManager.GetIsFocusScope*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: FocusManager.GotFocusEvent
  fullName: System.Windows.Input.FocusManager.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifies the <xref:System.Windows.Input.FocusManager.GotFocus> attached event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.IsFocusScopeProperty
  id: IsFocusScopeProperty
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: IsFocusScopeProperty
  nameWithType: FocusManager.IsFocusScopeProperty
  fullName: System.Windows.Input.FocusManager.IsFocusScopeProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifies the <xref:System.Windows.Input.FocusManager.IsFocusScope*> attached property."
  remarks: "The default value of <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> on a <xref:System.Windows.Window>, <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ToolBar>, <xref:System.Windows.Controls.ContextMenu> is `true`.       A focus scope is a container element that keeps track of the <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName> within its scope.  By default, the <xref:System.Windows.Window> class is a focus scope as are the <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, and <xref:System.Windows.Controls.ToolBar> classes.  An element which is a focus scope has <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> set to `true`.       For more information on focus, keyboard focus, and logical focus, see the [Input Overview](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusScopeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: FocusManager.LostFocusEvent
  fullName: System.Windows.Input.FocusManager.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Identifies the <xref:System.Windows.Input.FocusManager.LostFocus> attached event."
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Removes a handler for the <xref:System.Windows.Input.FocusManager.GotFocus> attached event."
  syntax:
    content: public static void RemoveGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The <xref href=&quot;System.Windows.UIElement&quot;></xref> or <xref href=&quot;System.Windows.ContentElement&quot;></xref> that listens to this event."
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "The event handler to be removed."
  overload: System.Windows.Input.FocusManager.RemoveGotFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Removes a handler for the <xref:System.Windows.Input.FocusManager.LostFocus> attached event."
  syntax:
    content: public static void RemoveLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The <xref href=&quot;System.Windows.UIElement&quot;></xref> or <xref href=&quot;System.Windows.ContentElement&quot;></xref> that listens to this event."
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "The event handler to be removed."
  overload: System.Windows.Input.FocusManager.RemoveLostFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  id: SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: SetFocusedElement(DependencyObject,IInputElement)
  nameWithType: FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  fullName: System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Sets logical focus on the specified element."
  remarks: "The <xref:System.Windows.Input.FocusManager.FocusedElement%2A> is the element which has logical focus for the specific focus scope.  This object may or may not have keyboard focus.  Keyboard focus refers to the element that receives keyboard input.  For more information on focus, keyboard focus, and logical focus, see the [Input Overview](~/add/includes/ajax-current-ext-md.md).       It is possible to specify a focus scope that is an ancestor of the focus scope the element is in.  For example, if a <xref:System.Windows.Controls.StackPanel> is a focus scope and its parent <xref:System.Windows.Window> is a focus scope, a <xref:System.Windows.Controls.TextBox> child of the <xref:System.Windows.Controls.StackPanel> could specify the <xref:System.Windows.Window> as the focus scope when calling SetFocusedElement.  The <xref:System.Windows.Controls.TextBox> is then <xref:System.Windows.Input.FocusManager.FocusedElement%2A> for both the <xref:System.Windows.Window> focus scope and the <xref:System.Windows.Controls.StackPanel> focus scope.       SetFocusedElement will give the specified element logical focus in the specified focus scope and will attempt to give the element keyboard focus."
  example:
  - "The following example sets the element with logical focus by using the SetFocusedElement and it gets the element with logical focus by using the <xref:System.Windows.Input.FocusManager.GetFocusedElement%2A>.  \n  \n [!code-cs[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focusgetsetfocusedelement)]\n [!code-vb[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focusgetsetfocusedelement)]"
  syntax:
    content: public static void SetFocusedElement (System.Windows.DependencyObject element, System.Windows.IInputElement value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The focus scope in which to make the specified element the <xref:System.Windows.Input.FocusManager.FocusedElement*>."
    - id: value
      type: System.Windows.IInputElement
      description: "The element to give logical focus to."
  overload: System.Windows.Input.FocusManager.SetFocusedElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  id: SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: SetIsFocusScope(DependencyObject,Boolean)
  nameWithType: FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  fullName: System.Windows.Input.FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Sets the specified <xref href=&quot;System.Windows.DependencyObject&quot;></xref> as a focus scope."
  remarks: "A focus scope is a container element that keeps track of the <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName> within its scope.  By default, the <xref:System.Windows.Window> class is a focus scope as are the <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, and <xref:System.Windows.Controls.ToolBar> classes.  An element which is a focus scope has <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> set to `true`.       For more information on focus, keyboard focus, and logical focus, see the [Input Overview](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The follow example makes an element a focus scope by using SetIsFocusScope.  \n  \n [!code-cs[focussnippets#FocusSetIsFocusScope](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focussetisfocusscope)]\n [!code-vb[focussnippets#FocusSetIsFocusScope](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focussetisfocusscope)]"
  syntax:
    content: public static void SetIsFocusScope (System.Windows.DependencyObject element, bool value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The element to make a focus scope."
    - id: value
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if `element` is a focus scope; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Input.FocusManager.SetIsFocusScope*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.FocusedElementProperty
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: FocusedElementProperty
  nameWithType: FocusManager.FocusedElementProperty
  fullName: System.Windows.Input.FocusManager.FocusedElementProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusedElement(DependencyObject)
  nameWithType: FocusManager.GetFocusedElement(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusedElement(DependencyObject)
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusScope(DependencyObject)
  nameWithType: FocusManager.GetFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusScope(DependencyObject)
- uid: System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetIsFocusScope(DependencyObject)
  nameWithType: FocusManager.GetIsFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetIsFocusScope(DependencyObject)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.FocusManager.GotFocusEvent
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GotFocusEvent
  nameWithType: FocusManager.GotFocusEvent
  fullName: System.Windows.Input.FocusManager.GotFocusEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Input.FocusManager.IsFocusScopeProperty
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: IsFocusScopeProperty
  nameWithType: FocusManager.IsFocusScopeProperty
  fullName: System.Windows.Input.FocusManager.IsFocusScopeProperty
- uid: System.Windows.Input.FocusManager.LostFocusEvent
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: LostFocusEvent
  nameWithType: FocusManager.LostFocusEvent
  fullName: System.Windows.Input.FocusManager.LostFocusEvent
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetFocusedElement(DependencyObject,IInputElement)
  nameWithType: FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  fullName: System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject,IInputElement)
- uid: System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetIsFocusScope(DependencyObject,Boolean)
  nameWithType: FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  fullName: System.Windows.Input.FocusManager.SetIsFocusScope(DependencyObject,Boolean)
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddGotFocusHandler
  nameWithType: FocusManager.AddGotFocusHandler
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddLostFocusHandler
  nameWithType: FocusManager.AddLostFocusHandler
- uid: System.Windows.Input.FocusManager.GetFocusedElement*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusedElement
  nameWithType: FocusManager.GetFocusedElement
- uid: System.Windows.Input.FocusManager.GetFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusScope
  nameWithType: FocusManager.GetFocusScope
- uid: System.Windows.Input.FocusManager.GetIsFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetIsFocusScope
  nameWithType: FocusManager.GetIsFocusScope
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveGotFocusHandler
  nameWithType: FocusManager.RemoveGotFocusHandler
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveLostFocusHandler
  nameWithType: FocusManager.RemoveLostFocusHandler
- uid: System.Windows.Input.FocusManager.SetFocusedElement*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetFocusedElement
  nameWithType: FocusManager.SetFocusedElement
- uid: System.Windows.Input.FocusManager.SetIsFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetIsFocusScope
  nameWithType: FocusManager.SetIsFocusScope
