### YamlMime:ManagedReference
items:
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream
  id: IsolatedStorageFileStream
  children:
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Lock(System.Int64,System.Int64)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Unlock(System.Int64,System.Int64)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  langs:
  - csharp
  name: IsolatedStorageFileStream
  nameWithType: IsolatedStorageFileStream
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream
  type: Class
  summary: "Exposes a file within isolated storage."
  remarks: "Use this class to read, write and create files in isolated storage.       Since this class extends <xref:System.IO.FileStream>, you can use an instance of IsolatedStorageFileStream in most situations where a <xref:System.IO.FileStream> might otherwise be used, such as to construct a <xref:System.IO.StreamReader> or <xref:System.IO.StreamWriter>.       This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.      > [!IMPORTANT] >  Isolated storage is not available for [!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)] apps. Instead, use the application data classes in the `Windows.Storage` namespaces included in the [!INCLUDE[wrt](~/add/includes/wrt-md.md)] API to store local data and files. For more information, see [Application data](http://go.microsoft.com/fwlink/?LinkId=229175) in the Windows Dev Center."
  example:
  - "The following console application demonstrates how you can use <xref:System.IO.IsolatedStorage.IsolatedStorageFile> and IsolatedStorageFileStream to write data to an Isolated Storage file. The user is requested to log in. If the user is a new user, a News URL and a Sports URL are recorded as personal preferences in Isolated Storage. If the user is a returning user, the user's current preferences are displayed. The code examples used throughout this namespace are presented in the context of this sample application. You can use the [Storeadm.exe (Isolated Storage Tool)](~/add/includes/ajax-current-ext-md.md) utility to list and remove the Isolated Storage files that are created with this console application.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#1](~/add/codesnippet/visualbasic/t-system.io.isolatedstor_2_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#1](~/add/codesnippet/cpp/t-system.io.isolatedstor_2_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#1](~/add/codesnippet/csharp/t-system.io.isolatedstor_2_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class IsolatedStorageFileStream : System.IO.FileStream
  inheritance:
  - System.IO.Stream
  - System.IO.FileStream
  implements: []
  inheritedMembers:
  - System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.FileStream.GetAccessControl
  - System.IO.FileStream.Name
  - System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)
  - System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode)
  id: '#ctor(System.String,System.IO.FileMode)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: IsolatedStorageFileStream(String,FileMode)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Initializes a new instance of an <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object giving access to the file designated by <code>path</code> in the specified <code>mode</code>."
  remarks: "The isolated store that is used is scoped by the current executing assembly&quot;s identity and that of the application domain in which it is running. This store will remain open only for the lifetime of the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object. To specify a different isolated storage scope, or to allow the store to remain open (so multiple <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> objects can be opened from it), use the form of the constructor that accepts an <xref:System.IO.IsolatedStorage.IsolatedStorageFile> object.       The `mode` parameter indicates whether a new file should be created, an existing one used, and so on.      > [!CAUTION] >  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and can cause an exception to be thrown."
  syntax:
    content: public IsolatedStorageFileStream (string path, System.IO.FileMode mode);
    parameters:
    - id: path
      type: System.String
      description: "The relative path of the file within isolated storage."
    - id: mode
      type: System.IO.FileMode
      description: "One of the <xref href=&quot;System.IO.FileMode&quot;></xref> values."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> is badly formed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory in <code>path</code> does not exist."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "No file was found and the <code>mode</code> is set to <xref href=&quot;System.IO.FileMode&quot;></xref>"
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: IsolatedStorageFileStream(String,FileMode,FileAccess)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Initializes a new instance of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> class giving access to the file designated by <code>path</code>, in the specified <code>mode</code>, with the kind of <code>access</code> requested."
  remarks: "The isolated store that is used is scoped by the current executing assembly&quot;s identity and that of the application domain in which it is running. This store will remain open only for the lifetime of the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object. To specify a different isolated storage scope, or to allow the store to remain open (so multiple <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> objects can be opened from it), use the form of the constructor that accepts an <xref:System.IO.IsolatedStorage.IsolatedStorageFile> object.       The `mode` parameter indicates whether a new file should be created or an existing one used. The `access` parameter includes read-only, read/write, and write-only.      > [!CAUTION] >  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown."
  syntax:
    content: public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access);
    parameters:
    - id: path
      type: System.String
      description: "The relative path of the file within isolated storage."
    - id: mode
      type: System.IO.FileMode
      description: "One of the <xref href=&quot;System.IO.FileMode&quot;></xref> values."
    - id: access
      type: System.IO.FileAccess
      description: "A bitwise combination of the <xref href=&quot;System.IO.FileAccess&quot;></xref> values."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> is badly formed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "No file was found and the <code>mode</code> is set to <xref href=&quot;System.IO.FileMode&quot;></xref>."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: IsolatedStorageFileStream(String,FileMode,IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,IsolatedStorageFile)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Initializes a new instance of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> class giving access to the file designated by <code>path</code>, in the specified <code>mode</code>, and in the context of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFile&quot;></xref> specified by <code>isf</code>."
  remarks: "The `mode` parameter indicates whether a new file should be created, an existing one used, and so on.      > [!CAUTION] >  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown."
  example:
  - "The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#11](~/add/codesnippet/visualbasic/ed0ff8fa-778f-4b06-9af8-_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#11](~/add/codesnippet/cpp/ed0ff8fa-778f-4b06-9af8-_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#11](~/add/codesnippet/csharp/ed0ff8fa-778f-4b06-9af8-_1.cs)]"
  syntax:
    content: public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.IsolatedStorage.IsolatedStorageFile isf);
    parameters:
    - id: path
      type: System.String
      description: "The relative path of the file within isolated storage."
    - id: mode
      type: System.IO.FileMode
      description: "One of the <xref href=&quot;System.IO.FileMode&quot;></xref> values."
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: "The <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFile&quot;></xref> in which to open the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref>."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> is badly formed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "No file was found and the <code>mode</code> is set to <xref href=&quot;System.IO.FileMode&quot;></xref>."
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "<code>isf</code> does not have a quota."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Initializes a new instance of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> class giving access to the file designated by <code>path</code>, in the specified <code>mode</code>, with the specified file <code>access</code>, using the file sharing mode specified by <code>share</code>."
  remarks: "The isolated store that is used is scoped by the current executing assembly&quot;s identity and that of the application domain in which it is running. This store will remain open only for the lifetime of the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object. To specify a different isolated storage scope, or to allow the store to remain open (so multiple <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> objects can be opened from it), use the form of the constructor that accepts an <xref:System.IO.IsolatedStorage.IsolatedStorageFile> object.      > [!CAUTION] >  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and can cause an exception to be thrown."
  example:
  - "The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#15](~/add/codesnippet/visualbasic/16e66ff6-8db3-485d-ac06-_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#15](~/add/codesnippet/cpp/16e66ff6-8db3-485d-ac06-_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#15](~/add/codesnippet/csharp/16e66ff6-8db3-485d-ac06-_1.cs)]"
  syntax:
    content: public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
    parameters:
    - id: path
      type: System.String
      description: "The relative path of the file within isolated storage."
    - id: mode
      type: System.IO.FileMode
      description: "One of the <xref href=&quot;System.IO.FileMode&quot;></xref> values."
    - id: access
      type: System.IO.FileAccess
      description: "A bitwise combination of the <xref href=&quot;System.IO.FileAccess&quot;></xref> values."
    - id: share
      type: System.IO.FileShare
      description: "A bitwise combination of the <xref href=&quot;System.IO.FileShare&quot;></xref> values."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> is badly formed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "No file was found and the <code>mode</code> is set to <xref href=&quot;System.IO.FileMode&quot;></xref>."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: IsolatedStorageFileStream(String,FileMode,FileAccess,IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,IsolatedStorageFile)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Initializes a new instance of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> class giving access to the file designated by <code>path</code> in the specified <code>mode</code>, with the specified file <code>access</code>, and in the context of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFile&quot;></xref> specified by <code>isf</code>."
  remarks: "The `mode` parameter indicates whether a new file should be created or an existing one used. The `access` parameter includes read-only, read/write, and write-only.      > [!CAUTION] >  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown."
  example:
  - "The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#10](~/add/codesnippet/visualbasic/404bef15-453e-4818-ab5f-_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#10](~/add/codesnippet/cpp/404bef15-453e-4818-ab5f-_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#10](~/add/codesnippet/csharp/404bef15-453e-4818-ab5f-_1.cs)]"
  syntax:
    content: public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.IsolatedStorage.IsolatedStorageFile isf);
    parameters:
    - id: path
      type: System.String
      description: "The relative path of the file within isolated storage."
    - id: mode
      type: System.IO.FileMode
      description: "One of the <xref href=&quot;System.IO.FileMode&quot;></xref> values."
    - id: access
      type: System.IO.FileAccess
      description: "A bitwise combination of the <xref href=&quot;System.IO.FileAccess&quot;></xref> values."
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: "The <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFile&quot;></xref> in which to open the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref>."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> is badly formed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The isolated store is closed."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "No file was found and the <code>mode</code> is set to <xref href=&quot;System.IO.FileMode&quot;></xref>."
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "<code>isf</code> does not have a quota."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Initializes a new instance of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> class giving access to the file designated by <code>path</code>, in the specified <code>mode</code>, with the specified file <code>access</code>, using the file sharing mode specified by <code>share</code>, with the <code>buffersize</code> specified."
  remarks: "The isolated store that is used is scoped by the current executing assembly&quot;s identity and that of the application domain in which it is running. This store will remain open only for the lifetime of the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object. To specify a different isolated storage scope, or to allow the store to remain open (so multiple <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> objects can be opened from it), use the form of the constructor that accepts an <xref:System.IO.IsolatedStorage.IsolatedStorageFile> object.       The `mode` parameter indicates whether a new file should be created or an existing one used. The `access` parameter includes read-only, read/write, and write-only.      > [!CAUTION] >  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown."
  syntax:
    content: public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);
    parameters:
    - id: path
      type: System.String
      description: "The relative path of the file within isolated storage."
    - id: mode
      type: System.IO.FileMode
      description: "One of the <xref href=&quot;System.IO.FileMode&quot;></xref> values."
    - id: access
      type: System.IO.FileAccess
      description: "A bitwise combination of the <xref href=&quot;System.IO.FileAccess&quot;></xref> values."
    - id: share
      type: System.IO.FileShare
      description: "A bitwise combination of the <xref href=&quot;System.IO.FileShare&quot;></xref> values."
    - id: bufferSize
      type: System.Int32
      description: "The <xref href=&quot;System.IO.FileStream&quot;></xref> buffer size."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> is badly formed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "No file was found and the <code>mode</code> is set to <xref href=&quot;System.IO.FileMode&quot;></xref>."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,IsolatedStorageFile)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Initializes a new instance of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> class giving access to the file designated by <code>path</code>, in the specified <code>mode</code>, with the specified file <code>access</code>, using the file sharing mode specified by <code>share</code>, and in the context of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFile&quot;></xref> specified by <code>isf</code>."
  remarks: "The `mode` parameter indicates whether a new file should be created or an existing one used. The `access` parameter includes read-only, read/write, and write-only.      > [!CAUTION] >  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown."
  example:
  - "The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#11](~/add/codesnippet/visualbasic/d6e9d0e2-c3f3-4d3d-941f-_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#11](~/add/codesnippet/cpp/d6e9d0e2-c3f3-4d3d-941f-_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#11](~/add/codesnippet/csharp/d6e9d0e2-c3f3-4d3d-941f-_1.cs)]"
  syntax:
    content: public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.IsolatedStorage.IsolatedStorageFile isf);
    parameters:
    - id: path
      type: System.String
      description: "The relative path of the file within isolated storage."
    - id: mode
      type: System.IO.FileMode
      description: "One of the <xref href=&quot;System.IO.FileMode&quot;></xref> values."
    - id: access
      type: System.IO.FileAccess
      description: "A bitwise combination of the <xref href=&quot;System.IO.FileAccess&quot;></xref> values."
    - id: share
      type: System.IO.FileShare
      description: "A bitwise combination of the <xref href=&quot;System.IO.FileShare&quot;></xref> values."
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: "The <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFile&quot;></xref> in which to open the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref>."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> is badly formed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "No file was found and the <code>mode</code> is set to <xref href=&quot;System.IO.FileMode&quot;></xref>."
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "<code>isf</code> does not have a quota."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32,IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32,IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32,IsolatedStorageFile)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Initializes a new instance of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> class giving access to the file designated by <code>path</code>, in the specified <code>mode</code>, with the specified file <code>access</code>, using the file sharing mode specified by <code>share</code>, with the <code>buffersize</code> specified, and in the context of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFile&quot;></xref> specified by <code>isf</code>."
  remarks: "The `mode` parameter indicates whether a new file should be created or an existing one used. The `access` parameter includes read-only, read/write, and write-only.      > [!CAUTION] >  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown."
  example:
  - "The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#12](~/add/codesnippet/visualbasic/992df1ce-aff0-4ca4-9ce4-_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#12](~/add/codesnippet/cpp/992df1ce-aff0-4ca4-9ce4-_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#12](~/add/codesnippet/csharp/992df1ce-aff0-4ca4-9ce4-_1.cs)]"
  syntax:
    content: public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.IsolatedStorage.IsolatedStorageFile isf);
    parameters:
    - id: path
      type: System.String
      description: "The relative path of the file within isolated storage."
    - id: mode
      type: System.IO.FileMode
      description: "One of the <xref href=&quot;System.IO.FileMode&quot;></xref> values."
    - id: access
      type: System.IO.FileAccess
      description: "A bitwise combination of the <xref href=&quot;System.IO.FileAccess&quot;></xref> values."
    - id: share
      type: System.IO.FileShare
      description: "A bitwise combination of the <xref href=&quot;System.IO.FileShare&quot;></xref> values"
    - id: bufferSize
      type: System.Int32
      description: "The <xref href=&quot;System.IO.FileStream&quot;></xref> buffer size."
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: "The <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFile&quot;></xref> in which to open the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref>."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> is badly formed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "No file was found and the <code>mode</code> is set to <xref href=&quot;System.IO.FileMode&quot;></xref>."
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "<code>isf</code> does not have a quota."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: IsolatedStorageFileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Begins an asynchronous read."
  remarks: "The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.       You must call <xref:System.IO.Stream.EndRead%2A> with this <xref:System.IAsyncResult> to find out how many bytes were read."
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "The buffer to read data into."
    - id: offset
      type: System.Int32
      description: "The byte offset in `buffer` at which to begin reading."
    - id: numBytes
      type: System.Int32
      description: "The maximum number of bytes to read."
    - id: userCallback
      type: System.AsyncCallback
      description: "The method to call when the asynchronous read operation is completed. This parameter is optional."
    - id: stateObject
      type: System.Object
      description: "The status of the asynchronous read."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> object that represents the asynchronous read, which is possibly still pending. This <xref:System.IAsyncResult> must be passed to this stream&quot;s <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead*> method to determine how many bytes were read. This can be done either by the same code that called BeginRead or in a callback passed to BeginRead."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An asynchronous read was attempted past the end of the file."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: IsolatedStorageFileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Begins an asynchronous write."
  remarks: "If a <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object is writable, writing at the end of the stream expands the stream.       The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.       You must call <xref:System.IO.Stream.EndWrite%2A> with the <xref:System.IAsyncResult> object that this method returns to find out how many bytes were written."
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "The buffer to write data to."
    - id: offset
      type: System.Int32
      description: "The byte offset in `buffer` at which to begin writing."
    - id: numBytes
      type: System.Int32
      description: "The maximum number of bytes to write."
    - id: userCallback
      type: System.AsyncCallback
      description: "The method to call when the asynchronous write operation is completed. This parameter is optional."
    - id: stateObject
      type: System.Object
      description: "The status of the asynchronous write."
    return:
      type: System.IAsyncResult
      description: "An <xref:System.IAsyncResult> that represents the asynchronous write, which is possibly still pending. This <xref:System.IAsyncResult> must be passed to this stream&quot;s <xref:System.IO.Stream.EndWrite*> method to ensure that the write is complete, then frees resources appropriately. This can be done either by the same code that called <xref:System.IO.Stream.BeginWrite*> or in a callback passed to <xref:System.IO.Stream.BeginWrite*>."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An asynchronous write was attempted past the end of the file."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  id: CanRead
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: CanRead
  nameWithType: IsolatedStorageFileStream.CanRead
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Gets a Boolean value indicating whether the file can be read."
  remarks: "Use this property to determine whether the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object can be read."
  example:
  - "The following code example demonstrates how you could use the CanRead property, as a check to see whether a stream can be read before calling the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read%2A> or <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead%2A> methods. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#11](~/add/codesnippet/visualbasic/p-system.io.isolatedstor_1_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#11](~/add/codesnippet/cpp/p-system.io.isolatedstor_1_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#11](~/add/codesnippet/csharp/p-system.io.isolatedstor_1_1.cs)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if an <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object can be read; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  id: CanSeek
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: IsolatedStorageFileStream.CanSeek
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Gets a Boolean value indicating whether seek operations are supported."
  remarks: "Use this property to determine whether the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object supports seek operations."
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if an <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object supports seek operations; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  id: CanWrite
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: IsolatedStorageFileStream.CanWrite
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Gets a Boolean value indicating whether you can write to the file."
  remarks: "Use this property to determine whether the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object can be written."
  example:
  - "The following code example demonstrates how you could use the CanWrite property, as a check to see whether a stream can be read before calling the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write%2A> or <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite%2A> methods. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#13](~/add/codesnippet/visualbasic/p-system.io.isolatedstor_3_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#13](~/add/codesnippet/cpp/p-system.io.isolatedstor_3_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#13](~/add/codesnippet/csharp/p-system.io.isolatedstor_3_1.cs)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if an <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object can be written; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: IsolatedStorageFileStream.Dispose(Boolean)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> and optionally releases the managed resources."
  remarks: "This method is called by the public <xref:System.IDisposable.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.IDisposable.Dispose%2A> invokes the protected Dispose method with the `disposing` parameter set to true. <xref:System.Object.Finalize%2A> invokes Dispose with `disposing` set to false.       When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> references. This method invokes the <xref:System.IDisposable.Dispose%2A> method of each referenced object."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources"
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: IsolatedStorageFileStream.EndRead(IAsyncResult)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Ends a pending asynchronous read request."
  remarks: "EndRead must be called exactly once on every <xref:System.IAsyncResult> object from <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead%2A>, and calling EndRead is the only way to know how many bytes were read from the <xref:System.IO.Stream>. EndRead will block until the I/O operation has completed."
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "The pending asynchronous request."
    return:
      type: System.Int32
      description: "The number of bytes read from the stream, between zero and the number of requested bytes. Streams will only return zero at the end of the stream. Otherwise, they will block until at least one byte is available."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>asyncResult</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: IsolatedStorageFileStream.EndWrite(IAsyncResult)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Ends an asynchronous write."
  remarks: "EndWrite must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite%2A>.       EndWrite will block until the I/O operation has completed."
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "The pending asynchronous I/O request to end."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>asyncResult</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  id: Flush
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Flush()
  nameWithType: IsolatedStorageFileStream.Flush()
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Clears buffers for this stream and causes any buffered data to be written to the file."
  remarks: "Because a buffer can be used for either reading or writing, but not both simultaneously, Flush performs two functions. First, any data previously written to the buffer is copied to the file and the buffer is cleared. Second, if <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek%2A> is `true` and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer. The buffer is then cleared.       Use the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush%28System.Boolean%29> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk."
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)
  id: Flush(System.Boolean)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Flush(Boolean)
  nameWithType: IsolatedStorageFileStream.Flush(Boolean)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers."
  remarks: "Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk."
  syntax:
    content: public override void Flush (bool flushToDisk);
    parameters:
    - id: flushToDisk
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to flush all intermediate file buffers; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle
  id: Handle
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Handle
  nameWithType: IsolatedStorageFileStream.Handle
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Gets the file handle for the file that the current <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object encapsulates. Accessing this property is not permitted on an <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object, and throws an <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageException&quot;></xref>."
  remarks: "For more information, see <xref:System.IO.FileStream.Handle%2A>."
  example:
  - "The following code example demonstrates the Handle property.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#4](~/add/codesnippet/visualbasic/p-system.io.isolatedstor_4_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#4](~/add/codesnippet/cpp/p-system.io.isolatedstor_4_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#4](~/add/codesnippet/csharp/p-system.io.isolatedstor_4_1.cs)]"
  syntax:
    content: public override IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "The file handle for the file that the current <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object encapsulates."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle*
  exceptions:
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "The Handle property always generates this exception."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync
  id: IsAsync
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: IsAsync
  nameWithType: IsolatedStorageFileStream.IsAsync
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Gets a Boolean value indicating whether the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object was opened asynchronously or synchronously."
  remarks: "Asynchronous <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> objects cannot be created, unlike <xref:System.IO.FileStream>. However, the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite%2A>, <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead%2A>, <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite%2A>, and <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead%2A> methods are supported on synchronous instances, with some performance penalties."
  example:
  - "The following code example demonstrates how you can use the IsAsync property to verify that an <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> is synchronous. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#7](~/add/codesnippet/visualbasic/p-system.io.isolatedstor_7_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#7](~/add/codesnippet/cpp/p-system.io.isolatedstor_7_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#7](~/add/codesnippet/csharp/p-system.io.isolatedstor_7_1.cs)]"
  syntax:
    content: public override bool IsAsync { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object supports asynchronous access; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync*
  exceptions: []
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  id: Length
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Length
  nameWithType: IsolatedStorageFileStream.Length
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Gets the length of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object."
  remarks: "Length represents the number of bytes currently in the file. It is not affected by isolated storage quota."
  example:
  - "The following code example demonstrates the Length property.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/visualbasic/p-system.io.isolatedstor_6_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/cpp/p-system.io.isolatedstor_6_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/csharp/p-system.io.isolatedstor_6_1.cs)]"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "The length of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object in bytes."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length*
  exceptions: []
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Lock(System.Int64,System.Int64)
  id: Lock(System.Int64,System.Int64)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Lock(Int64,Int64)
  nameWithType: IsolatedStorageFileStream.Lock(Int64,Int64)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Lock(Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Prevents other processes from reading from or writing to the stream."
  remarks: "Locking a range of a file stream gives the threads of the locking process exclusive access to that range of the file stream."
  syntax:
    content: public override void Lock (long position, long length);
    parameters:
    - id: position
      type: System.Int64
      description: "The starting position of the range to lock. The value of this parameter must be equal to or greater than 0 (zero)."
    - id: length
      type: System.Int64
      description: "The number of bytes to lock."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Lock*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code> or <code>length</code> is negative."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The file is closed."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The process cannot access the file because another process has locked a portion of the file."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  id: Position
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Position
  nameWithType: IsolatedStorageFileStream.Position
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Gets or sets the current position of the current <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object."
  remarks: "Setting this property works when the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek%2A> property is `true`."
  example:
  - "The following code example uses the Position property to write data to a file.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/visualbasic/p-system.io.isolatedstor_0_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/cpp/p-system.io.isolatedstor_0_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/csharp/p-system.io.isolatedstor_0_1.cs)]"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "The current position of this <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The position cannot be set to a negative number."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: IsolatedStorageFileStream.Read(Byte[],Int32,Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Copies bytes from the current buffered <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object to an array."
  remarks: "The `buffer` parameter can be an instance of the <xref:System.Buffer> class, or an array of one of the following types: <xref:System.Byte>, <xref:System.SByte>, <xref:System.Char>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, or <xref:System.Double>. The `offset` parameter gives the offset of the byte in buffer at which to begin writing (index in the buffer), and the `count` parameter gives the maximum number of bytes that will be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.       The Read method treats the `buffer` parameter as a block of bytes, regardless of its actual type. Likewise, the `offset` and `count` parameters are always specified in bytes. For `buffer` parameters other than byte arrays, this means that an element index must be multiplied by the element size in bytes to form a correct value for `offset` or `count`.       The Read method will return zero only if the end of the stream is reached. In all other cases, Read always reads at least one byte from the stream before returning. If no data is available from the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object upon a call to Read, the method will block until at least one byte of data can be returned."
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "The buffer to read."
    - id: offset
      type: System.Int32
      description: "The offset in the buffer at which to begin writing."
    - id: count
      type: System.Int32
      description: "The maximum number of bytes to read."
    return:
      type: System.Int32
      description: "The total number of bytes read into the <code>buffer</code>. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream is reached."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read*
  exceptions: []
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  id: ReadByte
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: ReadByte()
  nameWithType: IsolatedStorageFileStream.ReadByte()
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Reads a single byte from the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object in isolated storage."
  remarks: ''
  example:
  - "The following code example demonstrates how the ReadByte method can be used to read data from an <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/visualbasic/m-system.io.isolatedstor_13_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/cpp/m-system.io.isolatedstor_13_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/csharp/m-system.io.isolatedstor_13_1.cs)]"
  syntax:
    content: public override int ReadByte ();
    parameters: []
    return:
      type: System.Int32
      description: "The 8-bit unsigned integer value read from the isolated storage file."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte*
  exceptions: []
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle
  id: SafeFileHandle
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: SafeFileHandle
  nameWithType: IsolatedStorageFileStream.SafeFileHandle
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Gets a <xref href=&quot;Microsoft.Win32.SafeHandles.SafeFileHandle&quot;></xref> object that represents the operating system file handle for the file that the current <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object encapsulates."
  remarks: "The SafeFileHandle property is not supported and always generates an <xref:System.IO.IsolatedStorage.IsolatedStorageException> exception."
  syntax:
    content: public override Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: "A <xref href=&quot;Microsoft.Win32.SafeHandles.SafeFileHandle&quot;></xref> object that represents the operating system file handle for the file that the current <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object encapsulates."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle*
  exceptions:
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "The SafeFileHandle property always generates this exception."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: IsolatedStorageFileStream.Seek(Int64,SeekOrigin)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Sets the current position of this <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object to the specified value."
  remarks: "Some <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> objects support positioning beyond the length of the stream, others will throw an exception in this case."
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "The new position of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object."
    - id: origin
      type: System.IO.SeekOrigin
      description: "One of the <xref:System.IO.SeekOrigin> values."
    return:
      type: System.Int64
      description: "The new position in the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>origin</code> must be one of the <xref:System.IO.SeekOrigin> values."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: IsolatedStorageFileStream.SetLength(Int64)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Sets the length of this <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object to the specified <code>value</code>."
  remarks: "If the specified `value` is less than the current length of the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object, the stream is truncated. If the specified `value` is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are undefined. In order to use this method, an <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object must support both writing and seeking."
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "The new length of the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>value</code> is a negative number."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Unlock(System.Int64,System.Int64)
  id: Unlock(System.Int64,System.Int64)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Unlock(Int64,Int64)
  nameWithType: IsolatedStorageFileStream.Unlock(Int64,Int64)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Unlock(Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Allows other processes to access all or part of a file that was previously locked."
  syntax:
    content: public override void Unlock (long position, long length);
    parameters:
    - id: position
      type: System.Int64
      description: "The starting position of the range to unlock. The value of this parameter must be equal to or greater than 0 (zero)."
    - id: length
      type: System.Int64
      description: "The number of bytes to unlock."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Unlock*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code> or <code>length</code> is negative."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: IsolatedStorageFileStream.Write(Byte[],Int32,Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Writes a block of bytes to the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object using data read from a byte array."
  remarks: "The `offset` parameter gives the offset of the byte in the `buffer` at which to begin reading, and the `count` parameter gives the number of bytes that will be written to this <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object. If the write operation is successful, the current position of the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object is advanced by the number of bytes written. If an exception occurs, the current position of the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object is unchanged."
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "The buffer to write."
    - id: offset
      type: System.Int32
      description: "The byte offset in buffer from which to begin."
    - id: count
      type: System.Int32
      description: "The maximum number of bytes to write."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write*
  exceptions:
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "The write attempt exceeds the quota for the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object."
  platform:
  - net462
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  name: WriteByte(Byte)
  nameWithType: IsolatedStorageFileStream.WriteByte(Byte)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO.IsolatedStorage
  summary: "Writes a single byte to the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object."
  remarks: ''
  example:
  - "The following code example demonstrates how the WriteByte method can be used to read data from an <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  \n  \n [!code-vb[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/visualbasic/m-system.io.isolatedstor_8_1.vb)]\n [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/cpp/m-system.io.isolatedstor_8_1.cpp)]\n [!code-cs[System.IO.IsolatedStorage.IsolatedStorage#14](~/add/codesnippet/csharp/m-system.io.isolatedstor_8_1.cs)]"
  syntax:
    content: public override void WriteByte (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: "The byte value to write to the isolated storage file."
  overload: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte*
  exceptions:
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "The write attempt exceeds the quota for the <xref href=&quot;System.IO.IsolatedStorage.IsolatedStorageFileStream&quot;></xref> object."
  platform:
  - net462
references:
- uid: System.IO.FileStream
  isExternal: false
  name: System.IO.FileStream
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.IsolatedStorage.IsolatedStorageException
  parent: System.IO.IsolatedStorage
  isExternal: false
  name: IsolatedStorageException
  nameWithType: IsolatedStorageException
  fullName: System.IO.IsolatedStorage.IsolatedStorageException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsolatedStorageFileStream(String,FileMode)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsolatedStorageFileStream(String,FileMode,FileAccess)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsolatedStorageFileStream(String,FileMode,IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,IsolatedStorageFile)
- uid: System.IO.IsolatedStorage.IsolatedStorageFile
  parent: System.IO.IsolatedStorage
  isExternal: false
  name: IsolatedStorageFile
  nameWithType: IsolatedStorageFile
  fullName: System.IO.IsolatedStorage.IsolatedStorageFile
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsolatedStorageFileStream(String,FileMode,FileAccess,IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,IsolatedStorageFile)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,IsolatedStorageFile)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.IsolatedStorage.IsolatedStorageFile)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32,IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32,IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(String,FileMode,FileAccess,FileShare,Int32,IsolatedStorageFile)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: IsolatedStorageFileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: IsolatedStorageFileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: CanRead
  nameWithType: IsolatedStorageFileStream.CanRead
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: CanSeek
  nameWithType: IsolatedStorageFileStream.CanSeek
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: CanWrite
  nameWithType: IsolatedStorageFileStream.CanWrite
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: IsolatedStorageFileStream.Dispose(Boolean)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(Boolean)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: IsolatedStorageFileStream.EndRead(IAsyncResult)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(IAsyncResult)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: IsolatedStorageFileStream.EndWrite(IAsyncResult)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(IAsyncResult)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Flush()
  nameWithType: IsolatedStorageFileStream.Flush()
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush()
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Flush(Boolean)
  nameWithType: IsolatedStorageFileStream.Flush(Boolean)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(Boolean)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Handle
  nameWithType: IsolatedStorageFileStream.Handle
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsAsync
  nameWithType: IsolatedStorageFileStream.IsAsync
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Length
  nameWithType: IsolatedStorageFileStream.Length
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Lock(System.Int64,System.Int64)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Lock(Int64,Int64)
  nameWithType: IsolatedStorageFileStream.Lock(Int64,Int64)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Lock(Int64,Int64)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Position
  nameWithType: IsolatedStorageFileStream.Position
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: IsolatedStorageFileStream.Read(Byte[],Int32,Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(Byte[],Int32,Int32)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: ReadByte()
  nameWithType: IsolatedStorageFileStream.ReadByte()
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte()
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: SafeFileHandle
  nameWithType: IsolatedStorageFileStream.SafeFileHandle
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle
- uid: Microsoft.Win32.SafeHandles.SafeFileHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeFileHandle
  nameWithType: SafeFileHandle
  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: IsolatedStorageFileStream.Seek(Int64,SeekOrigin)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: IsolatedStorageFileStream.SetLength(Int64)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(Int64)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Unlock(System.Int64,System.Int64)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Unlock(Int64,Int64)
  nameWithType: IsolatedStorageFileStream.Unlock(Int64,Int64)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Unlock(Int64,Int64)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: IsolatedStorageFileStream.Write(Byte[],Int32,Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(Byte[],Int32,Int32)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: WriteByte(Byte)
  nameWithType: IsolatedStorageFileStream.WriteByte(Byte)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsolatedStorageFileStream
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: BeginRead
  nameWithType: IsolatedStorageFileStream.BeginRead
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: BeginWrite
  nameWithType: IsolatedStorageFileStream.BeginWrite
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: CanRead
  nameWithType: IsolatedStorageFileStream.CanRead
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: CanSeek
  nameWithType: IsolatedStorageFileStream.CanSeek
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: CanWrite
  nameWithType: IsolatedStorageFileStream.CanWrite
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Dispose
  nameWithType: IsolatedStorageFileStream.Dispose
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: EndRead
  nameWithType: IsolatedStorageFileStream.EndRead
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: EndWrite
  nameWithType: IsolatedStorageFileStream.EndWrite
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Flush
  nameWithType: IsolatedStorageFileStream.Flush
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Handle
  nameWithType: IsolatedStorageFileStream.Handle
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: IsAsync
  nameWithType: IsolatedStorageFileStream.IsAsync
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Length
  nameWithType: IsolatedStorageFileStream.Length
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Lock*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Lock
  nameWithType: IsolatedStorageFileStream.Lock
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Position
  nameWithType: IsolatedStorageFileStream.Position
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Read
  nameWithType: IsolatedStorageFileStream.Read
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: ReadByte
  nameWithType: IsolatedStorageFileStream.ReadByte
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: SafeFileHandle
  nameWithType: IsolatedStorageFileStream.SafeFileHandle
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Seek
  nameWithType: IsolatedStorageFileStream.Seek
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: SetLength
  nameWithType: IsolatedStorageFileStream.SetLength
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Unlock*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Unlock
  nameWithType: IsolatedStorageFileStream.Unlock
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: Write
  nameWithType: IsolatedStorageFileStream.Write
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte*
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  isExternal: false
  name: WriteByte
  nameWithType: IsolatedStorageFileStream.WriteByte
