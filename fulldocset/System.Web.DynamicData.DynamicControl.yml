### YamlMime:ManagedReference
items:
- uid: System.Web.DynamicData.DynamicControl
  id: DynamicControl
  children:
  - System.Web.DynamicData.DynamicControl.#ctor
  - System.Web.DynamicData.DynamicControl.#ctor(System.Web.UI.WebControls.DataBoundControlMode)
  - System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode
  - System.Web.DynamicData.DynamicControl.Column
  - System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull
  - System.Web.DynamicData.DynamicControl.CssClass
  - System.Web.DynamicData.DynamicControl.DataField
  - System.Web.DynamicData.DynamicControl.DataFormatString
  - System.Web.DynamicData.DynamicControl.FieldTemplate
  - System.Web.DynamicData.DynamicControl.GetAttribute(System.String)
  - System.Web.DynamicData.DynamicControl.HtmlEncode
  - System.Web.DynamicData.DynamicControl.Mode
  - System.Web.DynamicData.DynamicControl.NullDisplayText
  - System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)
  - System.Web.DynamicData.DynamicControl.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)
  - System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions
  - System.Web.DynamicData.DynamicControl.Table
  - System.Web.DynamicData.DynamicControl.UIHint
  - System.Web.DynamicData.DynamicControl.ValidationGroup
  langs:
  - csharp
  name: DynamicControl
  nameWithType: DynamicControl
  fullName: System.Web.DynamicData.DynamicControl
  type: Class
  summary: "Displays the content that is defined for the field in templated data-bound controls, using ASP.NET Dynamic Data features."
  remarks: "In this topic:      -   [Introduction](#introduction)      -   [Declarative Syntax](#declarative_syntax)      <a name=&quot;introduction&quot;></a>    ## Introduction    The DynamicControl control is used by templated data-bound controls, such as <xref:System.Web.UI.WebControls.FormView> or <xref:System.Web.UI.WebControls.ListView>, to display a data field that uses ASP.NET Dynamic Data features in a custom page. You can also use a DynamicControl control in a <xref:System.Web.UI.WebControls.TemplateField> field of a <xref:System.Web.UI.WebControls.GridView> or a <xref:System.Web.UI.WebControls.DetailsView> control.       The DynamicControl control provides functionality that is similar to that of the <xref:System.Web.DynamicData.DynamicField> field. However, because the DynamicControl control is only used inside templates, it gives you more flexibility in controlling how the data is displayed since you can add other HTML elements around the field. When you use a DynamicControl control, you can take advantage of the following Dynamic Data features:      -   Automatically rendering the proper control for a field by using field templates, based on the data type. The field templates can be globally modified for the entire application.      -   Providing built-in data validation based on the database schema. You can also add validation types by customizing the data model.      -   Customizing data rendering for individual fields by using attributes in the data model or by using the <xref:System.Web.DynamicData.DynamicField.UIHint%2A> property.       To specify the field to display in a DynamicControl control, set the <xref:System.Web.DynamicData.DynamicControl.DataField%2A> property to the field name. You can apply a custom formatting string to the field value by setting the <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> property. By default, the formatting string is applied to field values only when the data-bound control is in read-only mode. To apply the formatting string to values displayed while the data-bound control is in edit mode, set the <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> property to `true`. If a field value is `null`, you can display a custom caption by setting the <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> property. The DynamicControl control can also automatically convert empty string (&quot;&quot;) field values to null values by setting the <xref:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull%2A> property to `true`.       The DynamicControl control supports different display modes. To specify the mode in which to display the DynamicControl control, set the <xref:System.Web.DynamicData.DynamicControl.Mode%2A> property. The following table shows the different modes.       <xref:System.Web.UI.WebControls.DataBoundControlMode>    for display mode. This prevents the user from modifying the values of a record or a data field. It can be used in any of the templates.       <xref:System.Web.UI.WebControls.DataBoundControlMode>    for edit mode. This enables users to update the values of an existing record. It is used in the edit template (typically named `EditItemTemplate`).       <xref:System.Web.UI.WebControls.DataBoundControlMode>    for insert mode. This enables users to enter values for a new record. It is used in the insert template (typically named `InsertItemTemplate`).       You can hide a DynamicControl control in a data-bound control by setting the <xref:System.Web.UI.Control.Visible%2A> property to `false`.      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:DynamicControl       ApplyFormatInEditMode=&quot;True|False&quot;       ConvertEmptyStringToNull=&quot;True|False&quot;       CssClass=&quot;string&quot;       DataField=&quot;string&quot;       DataFormatString=&quot;string&quot;       EnableViewState=&quot;True|False&quot;       HtmlEncode=&quot;True|False&quot;       ID=&quot;string&quot;       Mode=&quot;Edit|Insert|ReadOnly&quot;       NullDisplayText=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnInit=&quot;Init event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnUnload=&quot;Unload event handler&quot;       runat=&quot;server&quot;       UIHint=&quot;string&quot;       ValidationGroup=&quot;string&quot;       Visible=&quot;True|False&quot;   >   </asp:DynamicControl>   ```"
  example:
  - "See a run-time code example of this feature: [Run](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl).  \n  \n The following example demonstrates how to use the DynamicControl control in a <xref:System.Web.UI.WebControls.ListView> control to display, insert, delete and edit values from a database table. It is important to notice that in order to make the insert operation to work, the <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A> property of the `rowguid` and `ModifiedDate` columns are set to `true`.  \n  \n [!code-vb[System.Web.DynamicData.DynamicControl#1](~/add/codesnippet/visualbasic/t-system.web.dynamicdata_0_1.aspx)]\n [!code-cs[System.Web.DynamicData.DynamicControl#1](~/add/codesnippet/csharp/t-system.web.dynamicdata_0_1.aspx)]"
  syntax:
    content: >-
      [System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.bmp")]

      public class DynamicControl : System.Web.UI.Control, System.Web.DynamicData.IFieldFormattingOptions, System.Web.DynamicData.IFieldTemplateHost, System.Web.UI.IAttributeAccessor
  inheritance:
  - System.Object
  - System.Web.UI.Control
  implements:
  - System.Web.DynamicData.IFieldFormattingOptions
  - System.Web.DynamicData.IFieldTemplateHost
  - System.Web.UI.IAttributeAccessor
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.Controls
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.CreateControlCollection
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableTheming
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.Focus
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SaveViewState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.SkinID
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.TrackViewState
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.Control.Visible
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.#ctor
  id: '#ctor'
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: DynamicControl()
  nameWithType: DynamicControl.DynamicControl()
  fullName: System.Web.DynamicData.DynamicControl.DynamicControl()
  type: Constructor
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.DynamicData.DynamicControl&quot;></xref> class."
  syntax:
    content: public DynamicControl ();
    parameters: []
  overload: System.Web.DynamicData.DynamicControl.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.#ctor(System.Web.UI.WebControls.DataBoundControlMode)
  id: '#ctor(System.Web.UI.WebControls.DataBoundControlMode)'
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: DynamicControl(DataBoundControlMode)
  nameWithType: DynamicControl.DynamicControl(DataBoundControlMode)
  fullName: System.Web.DynamicData.DynamicControl.DynamicControl(DataBoundControlMode)
  type: Constructor
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.DynamicData.DynamicControl&quot;></xref> class with the specified mode."
  syntax:
    content: public DynamicControl (System.Web.UI.WebControls.DataBoundControlMode mode);
    parameters:
    - id: mode
      type: System.Web.UI.WebControls.DataBoundControlMode
      description: "One of the enumeration values that specifies the mode of the control."
  overload: System.Web.DynamicData.DynamicControl.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode
  id: ApplyFormatInEditMode
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: ApplyFormatInEditMode
  nameWithType: DynamicControl.ApplyFormatInEditMode
  fullName: System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets a value that indicates whether the formatting string specified by the <xref:System.Web.DynamicData.DynamicControl.DataFormatString*> property is applied to field values when the field is in edit mode."
  remarks: "The <xref:System.Web.DynamicData.DynamicControl> control has different display modes that allow the user to read, edit, or insert a field. By default, the formatting string specified by the <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> property is applied to a field value only when the <xref:System.Web.DynamicData.DynamicControl> control is in read-only mode. To apply the formatting string to values displayed while the data-bound control is in edit mode, set the ApplyFormatInEditMode property to `true`.      > [!NOTE] >  The <xref:System.Web.DynamicData.DynamicControl> control does not automatically remove the formatting when the field is updated in the data source. If you do not want the formatting as part of the value stored, you will need to remove the formatting programmatically."
  syntax:
    content: public bool ApplyFormatInEditMode { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the formatting string is applied; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.Column
  id: Column
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: Column
  nameWithType: DynamicControl.Column
  fullName: System.Web.DynamicData.DynamicControl.Column
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets the column object that is associated with the control."
  remarks: "You can use the Column property to obtain metadata information about a specific column. The Column property is automatically set by the <xref:System.Web.DynamicData.DynamicControl> control based on the field name provided for the <xref:System.Web.DynamicData.DynamicControl.DataField%2A> property."
  syntax:
    content: public System.Web.DynamicData.MetaColumn Column { get; set; }
    return:
      type: System.Web.DynamicData.MetaColumn
      description: "The column object that is associated with the control."
  overload: System.Web.DynamicData.DynamicControl.Column*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull
  id: ConvertEmptyStringToNull
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: ConvertEmptyStringToNull
  nameWithType: DynamicControl.ConvertEmptyStringToNull
  fullName: System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets a value that indicates whether empty string values (&quot;&quot;) are automatically converted to null values when the data field is updated in the data source."
  remarks: "The <xref:System.Web.UI.WebControls.Parameter> object of the data source control also has a property named <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=fullName>. This property performs the same function. Make sure that both properties are set appropriately."
  syntax:
    content: public bool ConvertEmptyStringToNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if empty string values are automatically converted to null values; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.CssClass
  id: CssClass
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: CssClass
  nameWithType: DynamicControl.CssClass
  fullName: System.Web.DynamicData.DynamicControl.CssClass
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets the Cascading Style Sheet (CSS) class that specifies the display styles for the <xref href=&quot;System.Web.DynamicData.DynamicControl&quot;></xref> control content."
  syntax:
    content: public virtual string CssClass { get; set; }
    return:
      type: System.String
      description: "The name of the CSS class."
  overload: System.Web.DynamicData.DynamicControl.CssClass*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.DataField
  id: DataField
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: DataField
  nameWithType: DynamicControl.DataField
  fullName: System.Web.DynamicData.DynamicControl.DataField
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets the name of the data field that the <xref href=&quot;System.Web.DynamicData.DynamicControl&quot;></xref> control is bound to."
  remarks: "Use the DataField property to specify the data field to bind to the <xref:System.Web.DynamicData.DynamicControl> control. The data field can be the column name or, for foreign key columns, the relationship name.       By default, the specified data field is displayed by the <xref:System.Web.DynamicData.DynamicControl> control using the field template that is associated with the field data type. You can change the field template that is rendered for the data field by setting the <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> property. You can also format the displayed text by setting the <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> property.       **Note** If you want to change the display and behavior of a data field globally, you must apply attributes to your data model instead of setting this in a particular instance of the <xref:System.Web.DynamicData.DynamicControl> control. For more information, see [ASP.NET Dynamic Data](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the DataField property to specify which field to display in a <xref:System.Web.DynamicData.DynamicControl> control.  \n  \n [!code-cs[System.Web.DynamicData.DynamicControl.DataField#1](~/add/codesnippet/csharp/p-system.web.dynamicdata_4_1.aspx)]\n [!code-vb[System.Web.DynamicData.DynamicControl.DataField#1](~/add/codesnippet/visualbasic/p-system.web.dynamicdata_4_1.aspx)]"
  syntax:
    content: public string DataField { get; set; }
    return:
      type: System.String
      description: "The name of the data field to bind the <xref href=&quot;System.Web.DynamicData.DynamicControl&quot;></xref> control to. The default is an empty string (&quot;&quot;), which indicates that this property is not set."
  overload: System.Web.DynamicData.DynamicControl.DataField*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.DataFormatString
  id: DataFormatString
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: DataFormatString
  nameWithType: DynamicControl.DataFormatString
  fullName: System.Web.DynamicData.DynamicControl.DataFormatString
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets a string that specifies the display format for the value of the field."
  remarks: "Use the DataFormatString property to specify a custom display format for the values displayed in the <xref:System.Web.DynamicData.DynamicControl> control. If the DataFormatString property is not set, the field value is displayed without any special formatting.       By default, the formatting string is applied to the field value only when the <xref:System.Web.DynamicData.DynamicControl.Mode%2A> property is set to <xref:System.Web.UI.WebControls.DataBoundControlMode>. To apply the formatting string to the field value while in edit mode, set the <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> property to `true`.       The display format that you specify using the DataFormatString property is specific to this instance of the <xref:System.Web.DynamicData.DynamicControl> control. You can also change the display format for a data field across the entire application by applying the <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute> to your data model and setting the <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString%2A?displayProperty=fullName> named parameter in the constructor. For more information, see [ASP.NET Dynamic Data](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public string DataFormatString { get; set; }
    return:
      type: System.String
      description: "A formatting string that specifies the display format for the value of the field. The default is an empty string (&quot;&quot;), which indicates that no special formatting is applied to the field value."
  overload: System.Web.DynamicData.DynamicControl.DataFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.FieldTemplate
  id: FieldTemplate
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: FieldTemplate
  nameWithType: DynamicControl.FieldTemplate
  fullName: System.Web.DynamicData.DynamicControl.FieldTemplate
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets the field template that is created for the <xref href=&quot;System.Web.DynamicData.DynamicControl&quot;></xref> control."
  syntax:
    content: public System.Web.UI.Control FieldTemplate { get; }
    return:
      type: System.Web.UI.Control
      description: "The field template that is created for the <xref href=&quot;System.Web.DynamicData.DynamicControl&quot;></xref> control."
  overload: System.Web.DynamicData.DynamicControl.FieldTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: GetAttribute(String)
  nameWithType: DynamicControl.GetAttribute(String)
  fullName: System.Web.DynamicData.DynamicControl.GetAttribute(String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Retrieves the attribute value by using the specified key."
  remarks: "If the attributes collection is `null`, this method returns an empty string."
  syntax:
    content: public string GetAttribute (string key);
    parameters:
    - id: key
      type: System.String
      description: "The name of the attribute."
    return:
      type: System.String
      description: "The value of the attribute."
  overload: System.Web.DynamicData.DynamicControl.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.HtmlEncode
  id: HtmlEncode
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: HtmlEncode
  nameWithType: DynamicControl.HtmlEncode
  fullName: System.Web.DynamicData.DynamicControl.HtmlEncode
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets a value that indicates whether the data for the control is HTML-encoded before rendering."
  remarks: "Use the HtmlEncode property to specify whether field values are HTML-encoded to their respective string representations before they are displayed.      > [!NOTE] >  HTML-encoding field values helps to prevent cross-site scripting attacks and malicious content from being displayed. This property should be enabled whenever possible. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool HtmlEncode { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the data for the control is HTML-encoded before rendering; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Web.DynamicData.DynamicControl.HtmlEncode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.Mode
  id: Mode
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: Mode
  nameWithType: DynamicControl.Mode
  fullName: System.Web.DynamicData.DynamicControl.Mode
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets the rendering mode."
  remarks: "Use the Mode property to specify which rendering mode to use to display the <xref:System.Web.DynamicData.DynamicControl> control. The following table shows the different modes.      |Mode|Description|   |----------|-----------------|   |<xref:System.Web.UI.WebControls.DataBoundControlMode>|for display mode. This prevents the user from modifying the values of a record or a data field. It can be used in any of the templates. This is the default value.|   |<xref:System.Web.UI.WebControls.DataBoundControlMode>|for edit mode. This enables users to update the values of an existing record. It is used in the `EditItemTemplate` template.|   |<xref:System.Web.UI.WebControls.DataBoundControlMode>|for insert mode. This enables users to enter values for a new record. It is used in the `InsertItemTemplate` template.|"
  syntax:
    content: public System.Web.UI.WebControls.DataBoundControlMode Mode { get; set; }
    return:
      type: System.Web.UI.WebControls.DataBoundControlMode
      description: "One of the enumeration values that specifies the rendering mode for the control. The default is <xref href=&quot;System.Web.UI.WebControls.DataBoundControlMode&quot;></xref>."
  overload: System.Web.DynamicData.DynamicControl.Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.NullDisplayText
  id: NullDisplayText
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: NullDisplayText
  nameWithType: DynamicControl.NullDisplayText
  fullName: System.Web.DynamicData.DynamicControl.NullDisplayText
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets the caption that is displayed for a data field when the field value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  remarks: "Sometimes a field value is stored as null in the data source. You can specify a custom caption to display for fields that have a null value by setting the NullDisplayText property. If this property is not set, null field values are displayed as empty strings (&quot;&quot;)."
  syntax:
    content: public string NullDisplayText { get; set; }
    return:
      type: System.String
      description: "The caption that is displayed for a data field when the field value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. The default is an empty string (&quot;&quot;), which indicates that this property is not set."
  overload: System.Web.DynamicData.DynamicControl.NullDisplayText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: DynamicControl.OnInit(EventArgs)
  fullName: System.Web.DynamicData.DynamicControl.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Raises the <xref href=&quot;System.Web.UI.Control.Init&quot;></xref> event."
  remarks: "Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).       The OnInit method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "The event data."
  overload: System.Web.DynamicData.DynamicControl.OnInit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Web.DynamicData.DynamicControl.DataField*> property is not set."
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.Render(System.Web.UI.HtmlTextWriter)
  id: Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: Render(HtmlTextWriter)
  nameWithType: DynamicControl.Render(HtmlTextWriter)
  fullName: System.Web.DynamicData.DynamicControl.Render(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Renders the <xref href=&quot;System.Web.DynamicData.DynamicControl&quot;></xref> control content to the client&quot;s browser by using the specified <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;></xref> object."
  remarks: "The Render method is primarily used by control developers to extend the <xref:System.Web.DynamicData.DynamicControl> control."
  syntax:
    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "The object that is used to render the <xref href=&quot;System.Web.DynamicData.DynamicControl&quot;></xref> control content on the client&quot;s browser."
  overload: System.Web.DynamicData.DynamicControl.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: SetAttribute(String,String)
  nameWithType: DynamicControl.SetAttribute(String,String)
  fullName: System.Web.DynamicData.DynamicControl.SetAttribute(String,String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Sets the specified attribute to the specified value."
  syntax:
    content: public void SetAttribute (string key, string value);
    parameters:
    - id: key
      type: System.String
      description: "The name of the attribute to set."
    - id: value
      type: System.String
      description: "The value to assign to the attribute."
  overload: System.Web.DynamicData.DynamicControl.SetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions
  id: System#Web#DynamicData#IFieldTemplateHost#FormattingOptions
  isEii: true
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: System.Web.DynamicData.IFieldTemplateHost.FormattingOptions
  nameWithType: DynamicControl.System.Web.DynamicData.IFieldTemplateHost.FormattingOptions
  fullName: System.Web.DynamicData.DynamicControl.System.Web.DynamicData.IFieldTemplateHost.FormattingOptions
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "For a description of this member, see <xref:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions*>."
  syntax:
    content: System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { get; }
    return:
      type: System.Web.DynamicData.IFieldFormattingOptions
      description: "The formatting options to be applied to the field template."
  overload: System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.Table
  id: Table
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: Table
  nameWithType: DynamicControl.Table
  fullName: System.Web.DynamicData.DynamicControl.Table
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets the table object that is associated with the control."
  remarks: "Use the Table property to access metadata information about the table that is associated with the data-bound control that contains the <xref:System.Web.DynamicData.DynamicControl> control."
  syntax:
    content: public virtual System.Web.DynamicData.MetaTable Table { get; }
    return:
      type: System.Web.DynamicData.MetaTable
      description: "The table object that is associated with the control."
  overload: System.Web.DynamicData.DynamicControl.Table*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "The <xref href=&quot;System.Web.DynamicData.DynamicControl&quot;></xref> control is inside a data-bound control that is not bound to a data source control that implements the <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;></xref> interface."
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.UIHint
  id: UIHint
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: UIHint
  nameWithType: DynamicControl.UIHint
  fullName: System.Web.DynamicData.DynamicControl.UIHint
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets the name of the field template that is used to render the data field."
  remarks: "Use the UIHint property to specify the field template to use to display the UI for a data field. Field templates by default are user controls and their names contain a suffix to identify field templates that are used for edit operations and insert operations. The suffixes are _edit and _insert, respectively. When you set a value to the UIHint property, you set the name without the suffixes. Dynamic Data will identify the correct mode by evaluating the <xref:System.Web.DynamicData.DynamicControl.Mode%2A> property value and will render the correct field template.       If the UIHint property is not set, by default Dynamic Data will render the field template based on the field type. For more information, see [ASP.NET Dynamic Data Scaffolding](~/add/includes/ajax-current-ext-md.md).       The field template that you specify using the UIHint property is specific to this instance of the <xref:System.Web.DynamicData.DynamicControl> control. You can also change the field template used by a data field across the entire application by applying the <xref:System.ComponentModel.DataAnnotations.UIHintAttribute> to your data model. Setting the UIHint property overrides the metadata applied to the data model. For more information about metadata attributes, see [ASP.NET Dynamic Data](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "See a run-time code example of this feature: [Run](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl.UIHint).  \n  \n The following example shows how you can specify a data field to use a different field template to render its contents. The second example shows the custom field template specified by the UIHint property.  \n  \n [!code-cs[System.Web.DynamicData.DynamicControl.UIHint#1](~/add/codesnippet/csharp/p-system.web.dynamicdata_2_1.aspx)]\n [!code-vb[System.Web.DynamicData.DynamicControl.UIHint#1](~/add/codesnippet/visualbasic/p-system.web.dynamicdata_2_1.aspx)]  \n  \n [!code-vb[System.Web.DynamicData.DynamicControl.UIHint#2](~/add/codesnippet/visualbasic/p-system.web.dynamicdata_2_2.ascx)]\n [!code-cs[System.Web.DynamicData.DynamicControl.UIHint#2](~/add/codesnippet/csharp/p-system.web.dynamicdata_2_2.ascx)]"
  syntax:
    content: public virtual string UIHint { get; set; }
    return:
      type: System.String
      description: "The name of the field template that is used to render the data field. The default is an empty string (&quot;&quot;), which indicates that the field template will be rendered based on the data field type or on metadata information applied to the data model."
  overload: System.Web.DynamicData.DynamicControl.UIHint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicControl.ValidationGroup
  id: ValidationGroup
  parent: System.Web.DynamicData.DynamicControl
  langs:
  - csharp
  name: ValidationGroup
  nameWithType: DynamicControl.ValidationGroup
  fullName: System.Web.DynamicData.DynamicControl.ValidationGroup
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Gets or sets the validation group name for the control."
  remarks: "Validation groups allow you to assign validation controls on a page to a specific category. Each validation group can be validated independently from other validation groups on the page. Use the ValidationGroup property to specify the name of the validation group for which the <xref:System.Web.DynamicData.DynamicControl> control causes validation when the page posts back to the server."
  syntax:
    content: public virtual string ValidationGroup { get; set; }
    return:
      type: System.String
      description: "The validation group name for the control."
  overload: System.Web.DynamicData.DynamicControl.ValidationGroup*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.Control
  isExternal: false
  name: System.Web.UI.Control
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Web.DynamicData.DynamicControl.#ctor
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: DynamicControl()
  nameWithType: DynamicControl.DynamicControl()
  fullName: System.Web.DynamicData.DynamicControl.DynamicControl()
- uid: System.Web.DynamicData.DynamicControl.#ctor(System.Web.UI.WebControls.DataBoundControlMode)
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: DynamicControl(DataBoundControlMode)
  nameWithType: DynamicControl.DynamicControl(DataBoundControlMode)
  fullName: System.Web.DynamicData.DynamicControl.DynamicControl(DataBoundControlMode)
- uid: System.Web.UI.WebControls.DataBoundControlMode
  parent: System.Web.UI.WebControls
  isExternal: false
  name: DataBoundControlMode
  nameWithType: DataBoundControlMode
  fullName: System.Web.UI.WebControls.DataBoundControlMode
- uid: System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: ApplyFormatInEditMode
  nameWithType: DynamicControl.ApplyFormatInEditMode
  fullName: System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.DynamicData.DynamicControl.Column
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: Column
  nameWithType: DynamicControl.Column
  fullName: System.Web.DynamicData.DynamicControl.Column
- uid: System.Web.DynamicData.MetaColumn
  parent: System.Web.DynamicData
  isExternal: false
  name: MetaColumn
  nameWithType: MetaColumn
  fullName: System.Web.DynamicData.MetaColumn
- uid: System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: ConvertEmptyStringToNull
  nameWithType: DynamicControl.ConvertEmptyStringToNull
  fullName: System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull
- uid: System.Web.DynamicData.DynamicControl.CssClass
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: CssClass
  nameWithType: DynamicControl.CssClass
  fullName: System.Web.DynamicData.DynamicControl.CssClass
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.DynamicData.DynamicControl.DataField
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: DataField
  nameWithType: DynamicControl.DataField
  fullName: System.Web.DynamicData.DynamicControl.DataField
- uid: System.Web.DynamicData.DynamicControl.DataFormatString
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: DataFormatString
  nameWithType: DynamicControl.DataFormatString
  fullName: System.Web.DynamicData.DynamicControl.DataFormatString
- uid: System.Web.DynamicData.DynamicControl.FieldTemplate
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: FieldTemplate
  nameWithType: DynamicControl.FieldTemplate
  fullName: System.Web.DynamicData.DynamicControl.FieldTemplate
- uid: System.Web.DynamicData.DynamicControl.GetAttribute(System.String)
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: GetAttribute(String)
  nameWithType: DynamicControl.GetAttribute(String)
  fullName: System.Web.DynamicData.DynamicControl.GetAttribute(String)
- uid: System.Web.DynamicData.DynamicControl.HtmlEncode
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: HtmlEncode
  nameWithType: DynamicControl.HtmlEncode
  fullName: System.Web.DynamicData.DynamicControl.HtmlEncode
- uid: System.Web.DynamicData.DynamicControl.Mode
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: Mode
  nameWithType: DynamicControl.Mode
  fullName: System.Web.DynamicData.DynamicControl.Mode
- uid: System.Web.DynamicData.DynamicControl.NullDisplayText
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: NullDisplayText
  nameWithType: DynamicControl.NullDisplayText
  fullName: System.Web.DynamicData.DynamicControl.NullDisplayText
- uid: System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: DynamicControl.OnInit(EventArgs)
  fullName: System.Web.DynamicData.DynamicControl.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.DynamicData.DynamicControl.Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: Render(HtmlTextWriter)
  nameWithType: DynamicControl.Render(HtmlTextWriter)
  fullName: System.Web.DynamicData.DynamicControl.Render(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: SetAttribute(String,String)
  nameWithType: DynamicControl.SetAttribute(String,String)
  fullName: System.Web.DynamicData.DynamicControl.SetAttribute(String,String)
- uid: System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: System.Web.DynamicData.IFieldTemplateHost.FormattingOptions
  nameWithType: DynamicControl.System.Web.DynamicData.IFieldTemplateHost.FormattingOptions
  fullName: System.Web.DynamicData.DynamicControl.System.Web.DynamicData.IFieldTemplateHost.FormattingOptions
- uid: System.Web.DynamicData.IFieldFormattingOptions
  parent: System.Web.DynamicData
  isExternal: false
  name: IFieldFormattingOptions
  nameWithType: IFieldFormattingOptions
  fullName: System.Web.DynamicData.IFieldFormattingOptions
- uid: System.Web.DynamicData.DynamicControl.Table
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: Table
  nameWithType: DynamicControl.Table
  fullName: System.Web.DynamicData.DynamicControl.Table
- uid: System.Web.DynamicData.MetaTable
  parent: System.Web.DynamicData
  isExternal: false
  name: MetaTable
  nameWithType: MetaTable
  fullName: System.Web.DynamicData.MetaTable
- uid: System.Web.DynamicData.DynamicControl.UIHint
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: UIHint
  nameWithType: DynamicControl.UIHint
  fullName: System.Web.DynamicData.DynamicControl.UIHint
- uid: System.Web.DynamicData.DynamicControl.ValidationGroup
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: ValidationGroup
  nameWithType: DynamicControl.ValidationGroup
  fullName: System.Web.DynamicData.DynamicControl.ValidationGroup
- uid: System.Web.DynamicData.DynamicControl.#ctor*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: DynamicControl
  nameWithType: DynamicControl.DynamicControl
- uid: System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: ApplyFormatInEditMode
  nameWithType: DynamicControl.ApplyFormatInEditMode
- uid: System.Web.DynamicData.DynamicControl.Column*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: Column
  nameWithType: DynamicControl.Column
- uid: System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: ConvertEmptyStringToNull
  nameWithType: DynamicControl.ConvertEmptyStringToNull
- uid: System.Web.DynamicData.DynamicControl.CssClass*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: CssClass
  nameWithType: DynamicControl.CssClass
- uid: System.Web.DynamicData.DynamicControl.DataField*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: DataField
  nameWithType: DynamicControl.DataField
- uid: System.Web.DynamicData.DynamicControl.DataFormatString*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: DataFormatString
  nameWithType: DynamicControl.DataFormatString
- uid: System.Web.DynamicData.DynamicControl.FieldTemplate*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: FieldTemplate
  nameWithType: DynamicControl.FieldTemplate
- uid: System.Web.DynamicData.DynamicControl.GetAttribute*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: GetAttribute
  nameWithType: DynamicControl.GetAttribute
- uid: System.Web.DynamicData.DynamicControl.HtmlEncode*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: HtmlEncode
  nameWithType: DynamicControl.HtmlEncode
- uid: System.Web.DynamicData.DynamicControl.Mode*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: Mode
  nameWithType: DynamicControl.Mode
- uid: System.Web.DynamicData.DynamicControl.NullDisplayText*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: NullDisplayText
  nameWithType: DynamicControl.NullDisplayText
- uid: System.Web.DynamicData.DynamicControl.OnInit*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: OnInit
  nameWithType: DynamicControl.OnInit
- uid: System.Web.DynamicData.DynamicControl.Render*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: Render
  nameWithType: DynamicControl.Render
- uid: System.Web.DynamicData.DynamicControl.SetAttribute*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: SetAttribute
  nameWithType: DynamicControl.SetAttribute
- uid: System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: System.Web.DynamicData.IFieldTemplateHost.FormattingOptions
  nameWithType: DynamicControl.System.Web.DynamicData.IFieldTemplateHost.FormattingOptions
- uid: System.Web.DynamicData.DynamicControl.Table*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: Table
  nameWithType: DynamicControl.Table
- uid: System.Web.DynamicData.DynamicControl.UIHint*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: UIHint
  nameWithType: DynamicControl.UIHint
- uid: System.Web.DynamicData.DynamicControl.ValidationGroup*
  parent: System.Web.DynamicData.DynamicControl
  isExternal: false
  name: ValidationGroup
  nameWithType: DynamicControl.ValidationGroup
