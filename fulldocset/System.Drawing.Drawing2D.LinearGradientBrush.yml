### YamlMime:ManagedReference
items:
- uid: System.Drawing.Drawing2D.LinearGradientBrush
  id: LinearGradientBrush
  children:
  - System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)
  - System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)
  - System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)
  - System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single)
  - System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)
  - System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single)
  - System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)
  - System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)
  - System.Drawing.Drawing2D.LinearGradientBrush.Blend
  - System.Drawing.Drawing2D.LinearGradientBrush.Clone
  - System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection
  - System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors
  - System.Drawing.Drawing2D.LinearGradientBrush.LinearColors
  - System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.LinearGradientBrush.Rectangle
  - System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform
  - System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single)
  - System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single)
  - System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single)
  - System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single,System.Single)
  - System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single)
  - System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single,System.Single)
  - System.Drawing.Drawing2D.LinearGradientBrush.Transform
  - System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single)
  - System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.LinearGradientBrush.WrapMode
  langs:
  - csharp
  name: LinearGradientBrush
  nameWithType: LinearGradientBrush
  fullName: System.Drawing.Drawing2D.LinearGradientBrush
  type: Class
  summary: "Encapsulates a <xref href=&quot;System.Drawing.Brush&quot;></xref> with a linear gradient. This class cannot be inherited."
  remarks: "This class encapsulates both two-color gradients and custom multicolor gradients.       All linear gradients are defined along a line specified either by the width of a rectangle or by two points.       By default, a two-color linear gradient is an even horizontal linear blend from the starting color to the ending color along the specified line. Customize the blend pattern using the <xref:System.Drawing.Drawing2D.Blend> class, the <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape%2A> methods, or the <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape%2A> methods. Customize the direction of the gradient by specifying the <xref:System.Drawing.Drawing2D.LinearGradientMode> enumeration or the angle in the constructor.       Use the <xref:System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors%2A> property to create a multicolor gradient.       The <xref:System.Drawing.Drawing2D.LinearGradientBrush.Transform%2A> property specifies a local geometric transform applied to the gradient."
  example:
  - "The following example creates a horizontal LinearGradientBrush; the color components change linearly as you move from a horizontal coordinate of 0 to a horizontal coordinate of 200. For example, a point whose first coordinate is halfway between 0 and 200 will have a blue component that is halfway between 0 and 255. This example is designed for use with Windows Forms. The following code example is designed for use with Windows Forms, and it requires the <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of <xref:System.Windows.Forms.PaintEventHandler>.  \n  \n [!code-vb[System.Drawing.UsingaGradientBrush#21](~/add/codesnippet/visualbasic/t-system.drawing.drawing_3_1.vb)]\n [!code-cs[System.Drawing.UsingaGradientBrush#21](~/add/codesnippet/csharp/t-system.drawing.drawing_3_1.cs)]"
  syntax:
    content: 'public sealed class LinearGradientBrush : System.Drawing.Brush'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Drawing.Brush
  implements: []
  inheritedMembers:
  - System.Drawing.Brush.Dispose
  - System.Drawing.Brush.Dispose(System.Boolean)
  - System.Drawing.Brush.SetNativeBrush(System.IntPtr)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)
  id: '#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)'
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: LinearGradientBrush(Point,Point,Color,Color)
  nameWithType: LinearGradientBrush.LinearGradientBrush(Point,Point,Color,Color)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(Point,Point,Color,Color)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Initializes a new instance of the <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> class with the specified points and colors."
  syntax:
    content: public LinearGradientBrush (System.Drawing.Point point1, System.Drawing.Point point2, System.Drawing.Color color1, System.Drawing.Color color2);
    parameters:
    - id: point1
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;></xref> structure that represents the starting point of the linear gradient."
    - id: point2
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;></xref> structure that represents the endpoint of the linear gradient."
    - id: color1
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the starting color of the linear gradient."
    - id: color2
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the ending color of the linear gradient."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)
  id: '#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)'
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: LinearGradientBrush(PointF,PointF,Color,Color)
  nameWithType: LinearGradientBrush.LinearGradientBrush(PointF,PointF,Color,Color)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(PointF,PointF,Color,Color)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Initializes a new instance of the <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> class with the specified points and colors."
  syntax:
    content: public LinearGradientBrush (System.Drawing.PointF point1, System.Drawing.PointF point2, System.Drawing.Color color1, System.Drawing.Color color2);
    parameters:
    - id: point1
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;></xref> structure that represents the starting point of the linear gradient."
    - id: point2
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;></xref> structure that represents the endpoint of the linear gradient."
    - id: color1
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the starting color of the linear gradient."
    - id: color2
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the ending color of the linear gradient."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)
  id: '#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)'
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: LinearGradientBrush(Rectangle,Color,Color,LinearGradientMode)
  nameWithType: LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,LinearGradientMode)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,LinearGradientMode)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates a new instance of the <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> class based on a rectangle, starting and ending colors, and orientation."
  syntax:
    content: public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, System.Drawing.Drawing2D.LinearGradientMode linearGradientMode);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> structure that specifies the bounds of the linear gradient."
    - id: color1
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the starting color for the gradient."
    - id: color2
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the ending color for the gradient."
    - id: linearGradientMode
      type: System.Drawing.Drawing2D.LinearGradientMode
      description: "A <xref href=&quot;System.Drawing.Drawing2D.LinearGradientMode&quot;></xref> enumeration element that specifies the orientation of the gradient. The orientation determines the starting and ending points of the gradient. For example, <xref uid=&quot;langword_csharp_LinearGradientMode.ForwardDiagonal&quot; name=&quot;LinearGradientMode.ForwardDiagonal&quot; href=&quot;&quot;></xref> specifies that the starting point is the upper-left corner of the rectangle and the ending point is the lower-right corner of the rectangle."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single)
  id: '#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single)'
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: LinearGradientBrush(Rectangle,Color,Color,Single)
  nameWithType: LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,Single)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates a new instance of the <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> class based on a rectangle, starting and ending colors, and an orientation angle."
  remarks: "All points along any line perpendicular to the orientation line are the same color.       The starting line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the starting line are the starting color. Then ending line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the ending line are the ending color.       The angle of the orientation line determines which corners the starting and ending lines pass through. For example, if the angle is between 0 and 90 degrees, the starting line passes through the upper-left corner, and the ending line passes through the lower-right corner."
  syntax:
    content: public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> structure that specifies the bounds of the linear gradient."
    - id: color1
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the starting color for the gradient."
    - id: color2
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the ending color for the gradient."
    - id: angle
      type: System.Single
      description: "The angle, measured in degrees clockwise from the x-axis, of the gradient&quot;s orientation line."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)
  id: '#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)'
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: LinearGradientBrush(RectangleF,Color,Color,LinearGradientMode)
  nameWithType: LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,LinearGradientMode)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,LinearGradientMode)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates a new instance of the <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> based on a rectangle, starting and ending colors, and an orientation mode."
  syntax:
    content: public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, System.Drawing.Drawing2D.LinearGradientMode linearGradientMode);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;></xref> structure that specifies the bounds of the linear gradient."
    - id: color1
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the starting color for the gradient."
    - id: color2
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the ending color for the gradient."
    - id: linearGradientMode
      type: System.Drawing.Drawing2D.LinearGradientMode
      description: "A <xref href=&quot;System.Drawing.Drawing2D.LinearGradientMode&quot;></xref> enumeration element that specifies the orientation of the gradient. The orientation determines the starting and ending points of the gradient. For example, <xref uid=&quot;langword_csharp_LinearGradientMode.ForwardDiagonal&quot; name=&quot;LinearGradientMode.ForwardDiagonal&quot; href=&quot;&quot;></xref> specifies that the starting point is the upper-left corner of the rectangle and the ending point is the lower-right corner of the rectangle."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single)
  id: '#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single)'
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: LinearGradientBrush(RectangleF,Color,Color,Single)
  nameWithType: LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,Single)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates a new instance of the <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> class based on a rectangle, starting and ending colors, and an orientation angle."
  remarks: "All points along any line perpendicular to the orientation line are the same color.       The starting line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the starting line are the starting color. Then ending line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the ending line are the ending color.       The angle of the orientation line determines which corners the starting and ending lines pass through. For example, if the angle is between 0 and 90 degrees, the starting line passes through the upper-left corner, and the ending line passes through the lower-right corner."
  syntax:
    content: public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;></xref> structure that specifies the bounds of the linear gradient."
    - id: color1
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the starting color for the gradient."
    - id: color2
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the ending color for the gradient."
    - id: angle
      type: System.Single
      description: "The angle, measured in degrees clockwise from the x-axis, of the gradient&quot;s orientation line."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)
  id: '#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)'
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: LinearGradientBrush(Rectangle,Color,Color,Single,Boolean)
  nameWithType: LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,Single,Boolean)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,Single,Boolean)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates a new instance of the <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> class based on a rectangle, starting and ending colors, and an orientation angle."
  remarks: "All points along any line perpendicular to the orientation line are the same color.       The starting line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the starting line are the starting color. Then ending line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the ending line are the ending color.       The angle of the orientation line determines which corners the starting and ending lines pass through. For example, if the angle is between 0 and 90 degrees, the starting line passes through the upper-left corner, and the ending line passes through the lower-right corner."
  syntax:
    content: public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle, bool isAngleScaleable);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;></xref> structure that specifies the bounds of the linear gradient."
    - id: color1
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the starting color for the gradient."
    - id: color2
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the ending color for the gradient."
    - id: angle
      type: System.Single
      description: "The angle, measured in degrees clockwise from the x-axis, of the gradient&quot;s orientation line."
    - id: isAngleScaleable
      type: System.Boolean
      description: "Set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to specify that the angle is affected by the transform associated with this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)
  id: '#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)'
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: LinearGradientBrush(RectangleF,Color,Color,Single,Boolean)
  nameWithType: LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,Single,Boolean)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,Single,Boolean)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates a new instance of the <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> class based on a rectangle, starting and ending colors, and an orientation angle."
  remarks: "All points along any line perpendicular to the orientation line are the same color.       The starting line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the starting line are the starting color. Then ending line is perpendicular to the orientation line and passes through one of the corners of the rectangle. All points on the ending line are the ending color.       The angle of the orientation line determines which corners the starting and ending lines pass through. For example, if the angle is between 0 and 90 degrees, the starting line passes through the upper-left corner, and the ending line passes through the lower-right corner."
  syntax:
    content: public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle, bool isAngleScaleable);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;></xref> structure that specifies the bounds of the linear gradient."
    - id: color1
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the starting color for the gradient."
    - id: color2
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> structure that represents the ending color for the gradient."
    - id: angle
      type: System.Single
      description: "The angle, measured in degrees clockwise from the x-axis, of the gradient&quot;s orientation line."
    - id: isAngleScaleable
      type: System.Boolean
      description: "Set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to specify that the angle is affected by the transform associated with this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Blend
  id: Blend
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: Blend
  nameWithType: LinearGradientBrush.Blend
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.Blend
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets or sets a <xref href=&quot;System.Drawing.Drawing2D.Blend&quot;></xref> that specifies positions and factors that define a custom falloff for the gradient."
  remarks: "A <xref:System.Drawing.Drawing2D.Blend> contains corresponding arrays of blend factors and positions. The blend factors specify the percentages of the starting color and ending color to use at the corresponding position. The positions are given as a percentage of distance along the gradient line."
  syntax:
    content: public System.Drawing.Drawing2D.Blend Blend { get; set; }
    return:
      type: System.Drawing.Drawing2D.Blend
      description: "A <xref href=&quot;System.Drawing.Drawing2D.Blend&quot;></xref> that represents a custom falloff for the gradient."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.Blend*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Clone
  id: Clone
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: Clone()
  nameWithType: LinearGradientBrush.Clone()
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.Clone()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates an exact copy of this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref>."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a new <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  \n  \n-   Draws an ellipse to the screen using this brush.  \n  \n-   Clones the <xref:System.Drawing.Drawing2D.LinearGradientBrush> (`clonedLGBrush`).  \n  \n-   Draws an ellipse to the screen directly below the first ellipse, using the cloned brush.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/add/codesnippet/visualbasic/m-system.drawing.drawing_18_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/add/codesnippet/cpp/m-system.drawing.drawing_18_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/add/codesnippet/csharp/m-system.drawing.drawing_18_1.cs)]"
  syntax:
    content: public override object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "The <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> this method creates, cast as an object."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection
  id: GammaCorrection
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: GammaCorrection
  nameWithType: LinearGradientBrush.GammaCorrection
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets or sets a value indicating whether gamma correction is enabled for this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref>."
  syntax:
    content: public bool GammaCorrection { get; set; }
    return:
      type: System.Boolean
      description: "The value is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if gamma correction is enabled for this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors
  id: InterpolationColors
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: InterpolationColors
  nameWithType: LinearGradientBrush.InterpolationColors
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets or sets a <xref href=&quot;System.Drawing.Drawing2D.ColorBlend&quot;></xref> that defines a multicolor linear gradient."
  remarks: "A <xref:System.Drawing.Drawing2D.ColorBlend> contains corresponding arrays of colors and positions. The positions are values from 0 through 1 that specify the percentage of the distance along the gradient line where the corresponding color is located.       Setting this property creates a multicolor gradient with one color at each position along the gradient line. Setting this property nullifies all previous color, position, and falloff settings for this <xref:System.Drawing.Drawing2D.LinearGradientBrush>."
  syntax:
    content: public System.Drawing.Drawing2D.ColorBlend InterpolationColors { get; set; }
    return:
      type: System.Drawing.Drawing2D.ColorBlend
      description: "A <xref href=&quot;System.Drawing.Drawing2D.ColorBlend&quot;></xref> that defines a multicolor linear gradient."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.LinearColors
  id: LinearColors
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: LinearColors
  nameWithType: LinearGradientBrush.LinearColors
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearColors
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets or sets the starting and ending colors of the gradient."
  syntax:
    content: public System.Drawing.Color[] LinearColors { get; set; }
    return:
      type: System.Drawing.Color[]
      description: "An array of two <xref href=&quot;System.Drawing.Color&quot;></xref> structures that represents the starting and ending colors of the gradient."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.LinearColors*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix)
  id: MultiplyTransform(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: MultiplyTransform(Matrix)
  nameWithType: LinearGradientBrush.MultiplyTransform(Matrix)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Multiplies the <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref> that represents the local geometric transform of this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> by the specified <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref> by prepending the specified <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>."
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A>.
  syntax:
    content: public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "The <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref> by which to multiply the geometric transform."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  id: MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: MultiplyTransform(Matrix,MatrixOrder)
  nameWithType: LinearGradientBrush.MultiplyTransform(Matrix,MatrixOrder)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(Matrix,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Multiplies the <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref> that represents the local geometric transform of this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> by the specified <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref> in the specified order."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a new <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  \n  \n-   Draws an ellipse to the screen using this brush.  \n  \n-   Calls the <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A> method, to transform the <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  \n  \n-   Draws an ellipse to the screen directly below the first ellipse, using the transformed brush.  \n  \n Notice that the lower ellipse is stretched in the horizontal direction, and that the gradient is stretched to match the new shape.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/add/codesnippet/visualbasic/90c76832-46c2-4578-8b9f-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/add/codesnippet/cpp/90c76832-46c2-4578-8b9f-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/add/codesnippet/csharp/90c76832-46c2-4578-8b9f-_1.cs)]"
  syntax:
    content: public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "The <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref> by which to multiply the geometric transform."
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;></xref> that specifies in which order to multiply the two matrices."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Rectangle
  id: Rectangle
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: Rectangle
  nameWithType: LinearGradientBrush.Rectangle
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.Rectangle
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets a rectangular region that defines the starting and ending points of the gradient."
  remarks: "The left side of the rectangle specifies the starting point of the linear gradient, and the right side of the rectangle specifies the endpoint."
  syntax:
    content: public System.Drawing.RectangleF Rectangle { get; }
    return:
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;></xref> structure that specifies the starting and ending points of the gradient."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.Rectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform
  id: ResetTransform
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: ResetTransform()
  nameWithType: LinearGradientBrush.ResetTransform()
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Resets the <xref:System.Drawing.Drawing2D.LinearGradientBrush.Transform*> property to identity."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a new <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  \n  \n-   Draws an ellipse to the screen using this brush.  \n  \n-   Calls the <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A> method to transform the <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  \n  \n-   Draws an ellipse to the screen directly below the first ellipse, using the transformed brush.  \n  \n-   Resets the transform.  \n  \n-   Draws a third ellipse to the screen below the first two.  \n  \n Notice that the lowest ellipse is drawn the same size as the first, and that, due to the call to the ResetTransform method, the gradient has been reduced to match.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/add/codesnippet/visualbasic/m-system.drawing.drawing_6_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/add/codesnippet/cpp/m-system.drawing.drawing_6_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/add/codesnippet/csharp/m-system.drawing.drawing_6_1.cs)]"
  syntax:
    content: public void ResetTransform ();
    parameters: []
  overload: System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single)
  id: RotateTransform(System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: RotateTransform(Single)
  nameWithType: LinearGradientBrush.RotateTransform(Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Rotates the local geometric transform by the specified amount. This method prepends the rotation to the transform."
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform%2A>.
  syntax:
    content: public void RotateTransform (float angle);
    parameters:
    - id: angle
      type: System.Single
      description: "The angle of rotation."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: RotateTransform(Single,MatrixOrder)
  nameWithType: LinearGradientBrush.RotateTransform(Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Rotates the local geometric transform by the specified amount in the specified order."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code  \n  \n-   Creates a new <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  \n  \n-   Draws an ellipse to the screen using this brush.  \n  \n-   Rotates the <xref:System.Drawing.Drawing2D.LinearGradientBrush> 45 degrees by calling the <xref:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform%2A> method.  \n  \n-   Draws an ellipse to the screen directly below the first ellipse, using the rotated brush.  \n  \n Notice that the gradient of the lower ellipse is at a 45 degree angle to the x-axis of the top ellipse. Also notice that a call to the <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A> method is used to justify the left edge of the gradient fill with the left edge of the lower ellipse.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/add/codesnippet/visualbasic/6302de64-3f75-4fc9-b2c4-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/add/codesnippet/cpp/6302de64-3f75-4fc9-b2c4-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/add/codesnippet/csharp/6302de64-3f75-4fc9-b2c4-_1.cs)]"
  syntax:
    content: public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: angle
      type: System.Single
      description: "The angle of rotation."
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;></xref> that specifies whether to append or prepend the rotation matrix."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single)
  id: ScaleTransform(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: ScaleTransform(Single,Single)
  nameWithType: LinearGradientBrush.ScaleTransform(Single,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Scales the local geometric transform by the specified amounts. This method prepends the scaling matrix to the transform."
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform%2A>.
  syntax:
    content: public void ScaleTransform (float sx, float sy);
    parameters:
    - id: sx
      type: System.Single
      description: "The amount by which to scale the transform in the x-axis direction."
    - id: sy
      type: System.Single
      description: "The amount by which to scale the transform in the y-axis direction."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: ScaleTransform(Single,Single,MatrixOrder)
  nameWithType: LinearGradientBrush.ScaleTransform(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(Single,Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Scales the local geometric transform by the specified amounts in the specified order."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a new <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  \n  \n-   Draw an ellipse to the screen using this brush.  \n  \n-   Scales the <xref:System.Drawing.Drawing2D.LinearGradientBrush> by a factor of two in the x-axis.  \n  \n-   Draws an ellipse to the screen directly below the first ellipse, using the scaled brush.  \n  \n Notice that the gradient of the lower ellipse is stretched by a factor of two. Also notice that a call to the <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A> method is used to justify the left edge of the gradient fill with the left edge of ellipse.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/add/codesnippet/visualbasic/e0c3e704-6b4f-48bc-83d2-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/add/codesnippet/cpp/e0c3e704-6b4f-48bc-83d2-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/add/codesnippet/csharp/e0c3e704-6b4f-48bc-83d2-_1.cs)]"
  syntax:
    content: public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: sx
      type: System.Single
      description: "The amount by which to scale the transform in the x-axis direction."
    - id: sy
      type: System.Single
      description: "The amount by which to scale the transform in the y-axis direction."
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;></xref> that specifies whether to append or prepend the scaling matrix."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single)
  id: SetBlendTriangularShape(System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: SetBlendTriangularShape(Single)
  nameWithType: LinearGradientBrush.SetBlendTriangularShape(Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates a linear gradient with a center color and a linear falloff to a single color on both ends."
  remarks: "This method specifies a `focus`, which is the point where the gradient is composed only of the ending color. The `focus` parameter represents a location as a proportion of the distance along the gradient line. The gradient falls off to the starting color linearly to either side."
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape%2A>.
  syntax:
    content: public void SetBlendTriangularShape (float focus);
    parameters:
    - id: focus
      type: System.Single
      description: "A value from 0 through 1 that specifies the center of the gradient (the point where the gradient is composed of only the ending color)."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single,System.Single)
  id: SetBlendTriangularShape(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: SetBlendTriangularShape(Single,Single)
  nameWithType: LinearGradientBrush.SetBlendTriangularShape(Single,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates a linear gradient with a center color and a linear falloff to a single color on both ends."
  remarks: "This method specifies a `focus`, which is the point where the gradient is composed only of the ending color. The `focus` parameter represents a location as a proportion of the distance along the gradient line. The gradient falls off to the starting color linearly to either side."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a new <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  \n  \n-   Uses this brush to draw an ellipse to the screen that has a linear, left-to-right transition of colors.  \n  \n-   Transforms the <xref:System.Drawing.Drawing2D.LinearGradientBrush> into a triangular shape with its peak in the center.  \n  \n-   Draws a second ellipse to the screen using the transformed brush.  \n  \n Notice that the gradient of the lower ellipse transitions from blue to red and then back to blue.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/add/codesnippet/visualbasic/e6c3d0c9-aed2-4364-946f-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/add/codesnippet/cpp/e6c3d0c9-aed2-4364-946f-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/add/codesnippet/csharp/e6c3d0c9-aed2-4364-946f-_1.cs)]"
  syntax:
    content: public void SetBlendTriangularShape (float focus, float scale);
    parameters:
    - id: focus
      type: System.Single
      description: "A value from 0 through 1 that specifies the center of the gradient (the point where the gradient is composed of only the ending color)."
    - id: scale
      type: System.Single
      description: "A value from 0 through1 that specifies how fast the colors falloff from the starting color to `focus` (ending color)"
  overload: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single)
  id: SetSigmaBellShape(System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: SetSigmaBellShape(Single)
  nameWithType: LinearGradientBrush.SetSigmaBellShape(Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates a gradient falloff based on a bell-shaped curve."
  remarks: "This method specifies a `focus`, which is the point where the gradient is composed only of the ending color. The `focus` parameter represents a location as a proportion of the distance along the gradient line. The gradient falls off to the starting color based on a bell curve shape (normal distribution) to either side."
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape%2A>`.`
  syntax:
    content: public void SetSigmaBellShape (float focus);
    parameters:
    - id: focus
      type: System.Single
      description: "A value from 0 through 1 that specifies the center of the gradient (the point where the starting color and ending color are blended equally)."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single,System.Single)
  id: SetSigmaBellShape(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: SetSigmaBellShape(Single,Single)
  nameWithType: LinearGradientBrush.SetSigmaBellShape(Single,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Creates a gradient falloff based on a bell-shaped curve."
  remarks: "This method specifies a `focus`, which is the point where the gradient is composed only of the ending color. The `focus` parameter represents a location as a proportion of the distance along the gradient line. The gradient falls off to the starting color based on a bell curve shape (normal distribution) to either side."
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a new <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  \n  \n-   Uses this brush to draw an ellipse to the screen that has a linear, left-to-right transition of colors.  \n  \n-   Transforms the <xref:System.Drawing.Drawing2D.LinearGradientBrush> to have a bell shaped curve with its peak in the center.  \n  \n-   Draws a second ellipse to the screen using the bell-shaped brush.  \n  \n Notice that the gradient of the lower ellipse transitions from blue to red and then back to blue.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/add/codesnippet/visualbasic/06854fcf-f315-4b99-b3db-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/add/codesnippet/cpp/06854fcf-f315-4b99-b3db-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/add/codesnippet/csharp/06854fcf-f315-4b99-b3db-_1.cs)]"
  syntax:
    content: public void SetSigmaBellShape (float focus, float scale);
    parameters:
    - id: focus
      type: System.Single
      description: "A value from 0 through 1 that specifies the center of the gradient (the point where the gradient is composed of only the ending color)."
    - id: scale
      type: System.Single
      description: "A value from 0 through 1 that specifies how fast the colors falloff from the `focus`."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Transform
  id: Transform
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: Transform
  nameWithType: LinearGradientBrush.Transform
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.Transform
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets or sets a copy <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref> that defines a local geometric transform for this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref>."
  remarks: "A geometric transform can be used to translate, scale, rotate, or skew the gradient fill. Because the matrix returned and by the Transform property is a copy of the brush&quot;s geometric transform, you should dispose of the matrix when you no longer need it."
  syntax:
    content: public System.Drawing.Drawing2D.Matrix Transform { get; set; }
    return:
      type: System.Drawing.Drawing2D.Matrix
      description: "A copy of the <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref> that defines a geometric transform that applies only to fills drawn with this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref>."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single)
  id: TranslateTransform(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: TranslateTransform(Single,Single)
  nameWithType: LinearGradientBrush.TranslateTransform(Single,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Translates the local geometric transform by the specified dimensions. This method prepends the translation to the transform."
  remarks: ''
  example:
  - For an example, see TranslateTransform.
  syntax:
    content: public void TranslateTransform (float dx, float dy);
    parameters:
    - id: dx
      type: System.Single
      description: "The value of the translation in x."
    - id: dy
      type: System.Single
      description: "The value of the translation in y."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: TranslateTransform(Single,Single,MatrixOrder)
  nameWithType: LinearGradientBrush.TranslateTransform(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(Single,Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Translates the local geometric transform by the specified dimensions in the specified order."
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a new <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  \n  \n-   Uses this brush to draw a rectangle to the screen that has a linear, left-to-right transition of colors.  \n  \n-   Rotates the <xref:System.Drawing.Drawing2D.LinearGradientBrush> by 90 degrees and scales the gradient.  \n  \n-   Draws the rectangle, with the rotated and scaled gradient, to the screen.  \n  \n-   Translates the rectangle so that it has a linear gradient running from top to bottom.  \n  \n-   Draws the translated rectangle to the screen.  \n  \n Notice that there are three rectangles displayed the top one showing the left-to-right gradient, the middle one showing the rotated and scaled gradient, and the bottom one showing the final, translated gradient.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/add/codesnippet/visualbasic/245473a1-ce62-4749-b877-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/add/codesnippet/cpp/245473a1-ce62-4749-b877-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/add/codesnippet/csharp/245473a1-ce62-4749-b877-_1.cs)]"
  syntax:
    content: public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: dx
      type: System.Single
      description: "The value of the translation in x."
    - id: dy
      type: System.Single
      description: "The value of the translation in y."
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "The order (prepend or append) in which to apply the translation."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.LinearGradientBrush.WrapMode
  id: WrapMode
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  langs:
  - csharp
  name: WrapMode
  nameWithType: LinearGradientBrush.WrapMode
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.WrapMode
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "Gets or sets a <xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;></xref> enumeration that indicates the wrap mode for this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref>."
  syntax:
    content: public System.Drawing.Drawing2D.WrapMode WrapMode { get; set; }
    return:
      type: System.Drawing.Drawing2D.WrapMode
      description: "A <xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;></xref> that specifies how fills drawn with this <xref href=&quot;System.Drawing.Drawing2D.LinearGradientBrush&quot;></xref> are tiled."
  overload: System.Drawing.Drawing2D.LinearGradientBrush.WrapMode*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Drawing.Brush
  isExternal: false
  name: System.Drawing.Brush
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearGradientBrush(Point,Point,Color,Color)
  nameWithType: LinearGradientBrush.LinearGradientBrush(Point,Point,Color,Color)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(Point,Point,Color,Color)
- uid: System.Drawing.Point
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearGradientBrush(PointF,PointF,Color,Color)
  nameWithType: LinearGradientBrush.LinearGradientBrush(PointF,PointF,Color,Color)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(PointF,PointF,Color,Color)
- uid: System.Drawing.PointF
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearGradientBrush(Rectangle,Color,Color,LinearGradientMode)
  nameWithType: LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,LinearGradientMode)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,LinearGradientMode)
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Drawing2D.LinearGradientMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: LinearGradientMode
  nameWithType: LinearGradientMode
  fullName: System.Drawing.Drawing2D.LinearGradientMode
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearGradientBrush(Rectangle,Color,Color,Single)
  nameWithType: LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearGradientBrush(RectangleF,Color,Color,LinearGradientMode)
  nameWithType: LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,LinearGradientMode)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,LinearGradientMode)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearGradientBrush(RectangleF,Color,Color,Single)
  nameWithType: LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,Single)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearGradientBrush(Rectangle,Color,Color,Single,Boolean)
  nameWithType: LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,Single,Boolean)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(Rectangle,Color,Color,Single,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearGradientBrush(RectangleF,Color,Color,Single,Boolean)
  nameWithType: LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,Single,Boolean)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearGradientBrush(RectangleF,Color,Color,Single,Boolean)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Blend
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: Blend
  nameWithType: LinearGradientBrush.Blend
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.Blend
- uid: System.Drawing.Drawing2D.Blend
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: Blend
  nameWithType: Blend
  fullName: System.Drawing.Drawing2D.Blend
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Clone
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: Clone()
  nameWithType: LinearGradientBrush.Clone()
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: GammaCorrection
  nameWithType: LinearGradientBrush.GammaCorrection
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection
- uid: System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: InterpolationColors
  nameWithType: LinearGradientBrush.InterpolationColors
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors
- uid: System.Drawing.Drawing2D.ColorBlend
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: ColorBlend
  nameWithType: ColorBlend
  fullName: System.Drawing.Drawing2D.ColorBlend
- uid: System.Drawing.Drawing2D.LinearGradientBrush.LinearColors
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearColors
  nameWithType: LinearGradientBrush.LinearColors
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.LinearColors
- uid: System.Drawing.Color[]
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color[]
  spec.csharp:
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: Color[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: MultiplyTransform(Matrix)
  nameWithType: LinearGradientBrush.MultiplyTransform(Matrix)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(Matrix)
- uid: System.Drawing.Drawing2D.Matrix
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Drawing.Drawing2D.Matrix
- uid: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: MultiplyTransform(Matrix,MatrixOrder)
  nameWithType: LinearGradientBrush.MultiplyTransform(Matrix,MatrixOrder)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(Matrix,MatrixOrder)
- uid: System.Drawing.Drawing2D.MatrixOrder
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: MatrixOrder
  nameWithType: MatrixOrder
  fullName: System.Drawing.Drawing2D.MatrixOrder
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Rectangle
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: Rectangle
  nameWithType: LinearGradientBrush.Rectangle
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.Rectangle
- uid: System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: ResetTransform()
  nameWithType: LinearGradientBrush.ResetTransform()
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform()
- uid: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: RotateTransform(Single)
  nameWithType: LinearGradientBrush.RotateTransform(Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(Single)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: RotateTransform(Single,MatrixOrder)
  nameWithType: LinearGradientBrush.RotateTransform(Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: ScaleTransform(Single,Single)
  nameWithType: LinearGradientBrush.ScaleTransform(Single,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(Single,Single)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: ScaleTransform(Single,Single,MatrixOrder)
  nameWithType: LinearGradientBrush.ScaleTransform(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(Single,Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: SetBlendTriangularShape(Single)
  nameWithType: LinearGradientBrush.SetBlendTriangularShape(Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(Single)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: SetBlendTriangularShape(Single,Single)
  nameWithType: LinearGradientBrush.SetBlendTriangularShape(Single,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(Single,Single)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: SetSigmaBellShape(Single)
  nameWithType: LinearGradientBrush.SetSigmaBellShape(Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(Single)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: SetSigmaBellShape(Single,Single)
  nameWithType: LinearGradientBrush.SetSigmaBellShape(Single,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(Single,Single)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Transform
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: Transform
  nameWithType: LinearGradientBrush.Transform
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.Transform
- uid: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: TranslateTransform(Single,Single)
  nameWithType: LinearGradientBrush.TranslateTransform(Single,Single)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(Single,Single)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: TranslateTransform(Single,Single,MatrixOrder)
  nameWithType: LinearGradientBrush.TranslateTransform(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(Single,Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.LinearGradientBrush.WrapMode
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: WrapMode
  nameWithType: LinearGradientBrush.WrapMode
  fullName: System.Drawing.Drawing2D.LinearGradientBrush.WrapMode
- uid: System.Drawing.Drawing2D.WrapMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: WrapMode
  nameWithType: WrapMode
  fullName: System.Drawing.Drawing2D.WrapMode
- uid: System.Drawing.Drawing2D.LinearGradientBrush.#ctor*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearGradientBrush
  nameWithType: LinearGradientBrush.LinearGradientBrush
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Blend*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: Blend
  nameWithType: LinearGradientBrush.Blend
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Clone*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: Clone
  nameWithType: LinearGradientBrush.Clone
- uid: System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: GammaCorrection
  nameWithType: LinearGradientBrush.GammaCorrection
- uid: System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: InterpolationColors
  nameWithType: LinearGradientBrush.InterpolationColors
- uid: System.Drawing.Drawing2D.LinearGradientBrush.LinearColors*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: LinearColors
  nameWithType: LinearGradientBrush.LinearColors
- uid: System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: MultiplyTransform
  nameWithType: LinearGradientBrush.MultiplyTransform
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Rectangle*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: Rectangle
  nameWithType: LinearGradientBrush.Rectangle
- uid: System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: ResetTransform
  nameWithType: LinearGradientBrush.ResetTransform
- uid: System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: RotateTransform
  nameWithType: LinearGradientBrush.RotateTransform
- uid: System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: ScaleTransform
  nameWithType: LinearGradientBrush.ScaleTransform
- uid: System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: SetBlendTriangularShape
  nameWithType: LinearGradientBrush.SetBlendTriangularShape
- uid: System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: SetSigmaBellShape
  nameWithType: LinearGradientBrush.SetSigmaBellShape
- uid: System.Drawing.Drawing2D.LinearGradientBrush.Transform*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: Transform
  nameWithType: LinearGradientBrush.Transform
- uid: System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: TranslateTransform
  nameWithType: LinearGradientBrush.TranslateTransform
- uid: System.Drawing.Drawing2D.LinearGradientBrush.WrapMode*
  parent: System.Drawing.Drawing2D.LinearGradientBrush
  isExternal: false
  name: WrapMode
  nameWithType: LinearGradientBrush.WrapMode
