### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  id: EncryptedSecurityTokenHandler
  children:
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  langs:
  - csharp
  name: EncryptedSecurityTokenHandler
  nameWithType: EncryptedSecurityTokenHandler
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  type: Class
  summary: "Um processador de token para os tokens de segurança encriptado. Processa tokens do tipo <xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;> </xref>."
  remarks: "Um processador de token que serializa e deserializes <xref:System.IdentityModel.Tokens.EncryptedSecurityToken>objetos de `<xenc:EncryptedData>` elementos e <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause>objetos de `<xenc:EncryptedKey>` elementos tal como definido na especificação XML sintaxe de encriptação e de processamento (http://www.w3.org/TR/2002/REC-xmlenc-core-20021210).</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause> </xref:System.IdentityModel.Tokens.EncryptedSecurityToken>"
  syntax:
    content: 'public class EncryptedSecurityTokenHandler : System.IdentityModel.Tokens.SecurityTokenHandler'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityTokenHandler
  implements: []
  inheritedMembers:
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  - System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  - System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: EncryptedSecurityTokenHandler()
  nameWithType: EncryptedSecurityTokenHandler.EncryptedSecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.EncryptedSecurityTokenHandler()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityTokenHandler&quot;> </xref> classe."
  syntax:
    content: public EncryptedSecurityTokenHandler ();
    parameters: []
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  id: CanReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: CanReadKeyIdentifierClause(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Devolve um valor que indica se o elemento XML atual está a apontar para um <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedKey&gt;&quot; name=&quot;&lt;xenc:EncryptedKey&gt;&quot; href=&quot;&quot;> </xref> elemento pode anular a serialização para um <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> por esta instância."
  syntax:
    content: public override bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Um leitor de XML posicionado o elemento de início. O leitor não deve ser avançado."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o leitor de XML está posicionado um <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedKey&gt;&quot; name=&quot;&lt;xenc:EncryptedKey&gt;&quot; href=&quot;&quot;> </xref> elemento conforme definido na secção 3.5.1 a especificação de processamento e a sintaxe de encriptação de XML (http://www.w3.org/TR/2002/REC-xmlenc-core-20021210); caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  id: CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: CanReadToken(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Devolve um valor que indica se o leitor está a apontar para um <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedData&gt;&quot; name=&quot;&lt;xenc:EncryptedData&gt;&quot; href=&quot;&quot;> </xref> elemento."
  remarks: "Não move o leitor quando se retomam `false`."
  syntax:
    content: public override bool CanReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O leitor posicionado um token de segurança (<xref uid=&quot;langword_csharp_&lt;xenc:EncryptedData&gt;&quot; name=&quot;&lt;xenc:EncryptedData&gt;&quot; href=&quot;&quot;> </xref> elemento.)"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o leitor está posicionado um <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedData&gt;&quot; name=&quot;&lt;xenc:EncryptedData&gt;&quot; href=&quot;&quot;> </xref> elemento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken
  id: CanWriteToken
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: CanWriteToken
  nameWithType: EncryptedSecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém um valor que indica se o processador fornece a funcionalidade de serialização para tokens."
  syntax:
    content: public override bool CanWriteToken { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o processador pode serializar tokens; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers
  id: GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: GetTokenTypeIdentifiers()
  nameWithType: EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o identificador de tipo URIs de tokens processados pela instância atual."
  syntax:
    content: public override string[] GetTokenTypeIdentifiers ();
    parameters: []
    return:
      type: System.String[]
      description: "Por predefinição, devolve uma matriz com um único <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> cadeia porque não é um identificador de tipo de token específico que está associado a <xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;> </xref> tipo."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer
  id: KeyInfoSerializer
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: KeyInfoSerializer
  nameWithType: EncryptedSecurityTokenHandler.KeyInfoSerializer
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém ou define o <xref href=&quot;System.IdentityModel.Selectors.SecurityTokenSerializer&quot;> </xref> que será utilizado para serializar e anular a serialização de identificadores de chaves do <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedData&gt;&quot; name=&quot;&lt;xenc:EncryptedData&gt;&quot; href=&quot;&quot;> </xref> elemento."
  syntax:
    content: public System.IdentityModel.Selectors.SecurityTokenSerializer KeyInfoSerializer { get; set; }
    return:
      type: System.IdentityModel.Selectors.SecurityTokenSerializer
      description: "O serializador de tokens que será utilizado para ler e escrever os identificadores de chaves de chave."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Uma tentativa para definir a propriedade <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ocorre."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  id: ReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: ReadKeyIdentifierClause(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Lê um <xref href=&quot;System.IdentityModel.Tokens.EncryptedKeyIdentifierClause&quot;> </xref> de um fluxo XML."
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Um leitor de XML posicionado um <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedKey&gt;&quot; name=&quot;&lt;xenc:EncryptedKey&gt;&quot; href=&quot;&quot;> </xref> elemento como definido em &quot;http://www.w3.org/TR/2002/REC-xmlenc-core-20021210&quot;; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "Uma cláusula do identificador da chave do tipo <xref href=&quot;System.IdentityModel.Tokens.EncryptedKeyIdentifierClause&quot;> </xref>."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>reader</code>não está posicionado um <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedKey&gt;&quot; name=&quot;&lt;xenc:EncryptedKey&gt;&quot; href=&quot;&quot;> </xref> elemento."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  id: ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Lê um token de segurança encriptado."
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "O leitor de qual é possível ler o token."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "Um token de segurança do tipo <xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;> </xref>."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Não há nenhuma resolução de token de serviço configurado. (Ou o &lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A?displayProperty=fullName&gt; propriedade ou o &lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver%2A?displayProperty=fullName&gt; é propriedade da configuração de processador de token referenciado <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. Resolução de token de serviço é necessário para obter as chaves de desencriptação.       - ou - o <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandlerCollection&quot;> </xref>referenciada através de <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*>propriedade não é possível encontrar um <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandler&quot;> </xref> que pode ler o XML desencriptado e devolver um <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*>"
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> não está dentro do XML indicado pelo leitor.       -or-       The <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;></xref> is not a <xref href=&quot;System.IdentityModel.Tokens.SymmetricSecurityKey&quot;></xref>."
  - type: System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException
    commentId: T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException
    description: "O <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> encontrado dentro do XML não pode ser resolvido pela resolução de token de serviço configurado para um <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType
  id: TokenType
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: TokenType
  nameWithType: EncryptedSecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o tipo de token processado pela instância atual."
  syntax:
    content: public override Type TokenType { get; }
    return:
      type: System.Type
      description: "O tipo de token processado pela instância atual. The default is <xref uid=&quot;langword_csharp_typeof&quot; name=&quot;typeof&quot; href=&quot;&quot;></xref><xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;></xref>."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: EncryptedSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Escreve um token de segurança encriptado utilizando o escritor XML."
  syntax:
    content: public override void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "O escritor XML ao qual pretende escrever o token encriptado."
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "O token de segurança encriptado, tem de ser uma instância de <xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;> </xref>."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>writer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>token</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>token</code>Não é atribuível como <xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O &lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A?displayProperty=fullName&gt; propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. Esta propriedade é necessária para obter chaves de encriptação.       - ou - a coleção de processador token devolvido pelo <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*>propriedade não foi possível encontrar um <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandler&quot;> </xref> que pode escrever o <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref> devolvido pelo &lt;xref:System.IdentityModel.Tokens.EncryptedSecurityToken.Token%2A?displayProperty=fullName&gt; propriedade.</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*>"
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "O &lt;xref:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKey%2A?displayProperty=fullName&gt; propriedade não é atribuível como <xref href=&quot;System.IdentityModel.Tokens.SymmetricSecurityKey&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: System.IdentityModel.Tokens.SecurityTokenHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Tokens.SecurityTokenException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenException
  nameWithType: SecurityTokenException
  fullName: System.IdentityModel.Tokens.SecurityTokenException
- uid: System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: EncryptedTokenDecryptionFailedException
  nameWithType: EncryptedTokenDecryptionFailedException
  fullName: System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: EncryptedSecurityTokenHandler()
  nameWithType: EncryptedSecurityTokenHandler.EncryptedSecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.EncryptedSecurityTokenHandler()
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanReadKeyIdentifierClause(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanReadToken(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(XmlReader)
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: EncryptedSecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers()
  nameWithType: EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: KeyInfoSerializer
  nameWithType: EncryptedSecurityTokenHandler.KeyInfoSerializer
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer
- uid: System.IdentityModel.Selectors.SecurityTokenSerializer
  parent: System.IdentityModel.Selectors
  isExternal: false
  name: SecurityTokenSerializer
  nameWithType: SecurityTokenSerializer
  fullName: System.IdentityModel.Selectors.SecurityTokenSerializer
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: ReadKeyIdentifierClause(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: ReadToken(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(XmlReader)
- uid: System.IdentityModel.Tokens.SecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: EncryptedSecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: EncryptedSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: EncryptedSecurityTokenHandler
  nameWithType: EncryptedSecurityTokenHandler.EncryptedSecurityTokenHandler
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanReadKeyIdentifierClause
  nameWithType: EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanReadToken
  nameWithType: EncryptedSecurityTokenHandler.CanReadToken
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: EncryptedSecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers
  nameWithType: EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: KeyInfoSerializer
  nameWithType: EncryptedSecurityTokenHandler.KeyInfoSerializer
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: ReadKeyIdentifierClause
  nameWithType: EncryptedSecurityTokenHandler.ReadKeyIdentifierClause
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: ReadToken
  nameWithType: EncryptedSecurityTokenHandler.ReadToken
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: EncryptedSecurityTokenHandler.TokenType
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: WriteToken
  nameWithType: EncryptedSecurityTokenHandler.WriteToken
