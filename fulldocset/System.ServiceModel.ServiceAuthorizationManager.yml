### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.ServiceAuthorizationManager
  id: ServiceAuthorizationManager
  children:
  - System.ServiceModel.ServiceAuthorizationManager.#ctor
  - System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)
  - System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)
  - System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)
  - System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)
  langs:
  - csharp
  name: ServiceAuthorizationManager
  nameWithType: ServiceAuthorizationManager
  fullName: System.ServiceModel.ServiceAuthorizationManager
  type: Class
  summary: "Provides authorization access checking for service operations."
  remarks: "This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <xref:System.IdentityModel.Policy.AuthorizationContext> to the <xref:System.ServiceModel.ServiceSecurityContext>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller.  \n  \n The <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method is called by the [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] infrastructure each time an attempt to access a resource is made. The method returns `true` or `false` to allow or deny access, respectively.  \n  \n The ServiceAuthorizationManager is part of the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]*Identity Model* infrastructure. The Identity Model enables you to create custom authorization policies and custom authorization schemes. [!INCLUDE[crabout](~/add/includes/ajax-current-ext-md.md)] how the Identity Model works, see [Managing Claims and Authorization with the Identity Model](~/add/includes/ajax-current-ext-md.md).  \n  \n## Custom Authorization  \n This class does not perform any authorization and allows users to access all service operations. To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies. To do this, inherit from this class and override the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method. Specify the instance of the derived class through the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> property.  \n  \n In <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, the application can use the <xref:System.ServiceModel.OperationContext> object to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).  \n  \n By getting the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, which returns a <xref:System.ServiceModel.Channels.MessageHeaders> object, the application can access the service (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>), and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).  \n  \n By getting the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, which returns a <xref:System.ServiceModel.Channels.RequestContext> object, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) and perform the authorization decision accordingly.  \n  \n For an example, see [How to: Create a Custom Authorization Manager for a Service](~/add/includes/ajax-current-ext-md.md).  \n  \n To create custom authorization policies, implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class.  For an example, see [How to: Create a Custom Authorization Policy](~/add/includes/ajax-current-ext-md.md).  \n  \n To create a custom claim, use the <xref:System.IdentityModel.Claims.Claim> class.  For an example, see [How to: Create a Custom Claim](~/add/includes/ajax-current-ext-md.md). To compare custom claims, you must compare claims, as shown in [How to: Compare Claims](~/add/includes/ajax-current-ext-md.md).  \n  \n [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)] [Custom Authorization](~/add/includes/ajax-current-ext-md.md).  \n  \n You can set the type of a custom authorization manager using the [\\&lt;serviceAuthorization\\&gt;](../Topic/%3CserviceAuthorization%3E%20element.md) in a client application configuration file."
  example:
  - "The following example shows a class named `MyServiceAuthorizationManager` that inherits from the ServiceAuthorizationManager and overrides the <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> method.  \n  \n [!code-cs[c_CustomAuthMgr#2](~/add/codesnippet/csharp/t-system.servicemodel.se_16_1.cs)]\n [!code-vb[c_CustomAuthMgr#2](~/add/codesnippet/visualbasic/t-system.servicemodel.se_16_1.vb)]"
  syntax:
    content: public class ServiceAuthorizationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor
  id: '#ctor'
  parent: System.ServiceModel.ServiceAuthorizationManager
  langs:
  - csharp
  name: ServiceAuthorizationManager()
  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager()
  fullName: System.ServiceModel.ServiceAuthorizationManager.ServiceAuthorizationManager()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ServiceModel.ServiceAuthorizationManager&quot;></xref> class."
  syntax:
    content: public ServiceAuthorizationManager ();
    parameters: []
  overload: System.ServiceModel.ServiceAuthorizationManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)
  id: CheckAccess(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  langs:
  - csharp
  name: CheckAccess(OperationContext)
  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Checks authorization for the given operation context."
  remarks: "In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method.       Override CheckAccess if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> or provide a different policy evaluation (chaining) model.       This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>."
  example:
  - "The following code shows how to override this method to enforce custom access control requirements.  \n  \n [!code-vb[c_Federation#1](~/add/codesnippet/visualbasic/c7a50227-d4bd-484e-89da-_1.vb)]\n [!code-cs[c_Federation#1](~/add/codesnippet/csharp/c7a50227-d4bd-484e-89da-_1.cs)]"
  syntax:
    content: public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);
    parameters:
    - id: operationContext
      type: System.ServiceModel.OperationContext
      description: "The <xref:System.ServiceModel.OperationContext>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if access is granted; otherwise; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)
  id: CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.ServiceAuthorizationManager
  langs:
  - csharp
  name: CheckAccess(OperationContext,Message)
  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext,Message)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Checks authorization for the given operation context when access to a message is required."
  remarks: "In general, applications should override <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> instead of this method, which should only be used if the authorization decision depends on the message body. Because of performance issues, if possible you should redesign your application so that the authorization decision does not require access to the message body.       Override this method if the application associates or introduces a different set of policies for the resulting <xref:System.ServiceModel.ServiceSecurityContext> and <xref:System.ServiceModel.Channels.Message> or provide a different policy evaluation (chaining) model.       This method is responsible for calling <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>."
  example:
  - "The following code shows how to override this method to enforce custom access control requirements that require access to the message body.  \n  \n [!code-vb[c_Federation#6](~/add/codesnippet/visualbasic/97d69923-0462-4e77-9c7c-_1.vb)]\n [!code-cs[c_Federation#6](~/add/codesnippet/csharp/97d69923-0462-4e77-9c7c-_1.cs)]"
  syntax:
    content: public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);
    parameters:
    - id: operationContext
      type: System.ServiceModel.OperationContext
      description: "The <xref:System.ServiceModel.OperationContext>."
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "The <xref:System.ServiceModel.Channels.Message> to be examined to determine authorization."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if access is granted; otherwise; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)
  id: CheckAccessCore(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  langs:
  - csharp
  name: CheckAccessCore(OperationContext)
  nameWithType: ServiceAuthorizationManager.CheckAccessCore(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(OperationContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Checks authorization for the given operation context based on default policy evaluation."
  remarks: "<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> is generally the result from the default policy evaluation.       Override this method to provide custom authorization decisions.       This method can be used to make authorization decisions based on claim sets that are inferred based on incoming tokens, or added through external authorization policies. It can also make authorization decisions based on properties of the incoming message: for example, the action header.       In this method, the application can use the `operationContext` parameter to access the caller identity (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). By returning the <xref:System.ServiceModel.Channels.RequestContext> object from the <xref:System.ServiceModel.OperationContext.RequestContext%2A> property, the application can access the entire request message (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>). By returning the <xref:System.ServiceModel.Channels.MessageHeaders> object from the <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> property, the application can access the service URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) and the operation (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). With this information, the application can perform the authorization decision accordingly.       The claims made by a user are found in the <xref:System.IdentityModel.Claims.ClaimSet> returned by the <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> property of the `AuthorizationContext`. The current `AuthorizationContext` is returned by the <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> property of the <xref:System.ServiceModel.OperationContext> class."
  example:
  - "The following example shows an override of the CheckAccessCore method.  \n  \n [!code-cs[c_CustomAuthMgr#6](~/add/codesnippet/csharp/63a6c8ce-190f-4cc1-a5b3-_1.cs)]\n [!code-vb[c_CustomAuthMgr#6](~/add/codesnippet/visualbasic/63a6c8ce-190f-4cc1-a5b3-_1.vb)]  \n  \n For another example, see [How to: Create a Custom Authorization Manager for a Service](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);
    parameters:
    - id: operationContext
      type: System.ServiceModel.OperationContext
      description: "The <xref:System.ServiceModel.OperationContext> for the current authorization request."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if access is granted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)
  id: GetAuthorizationPolicies(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  langs:
  - csharp
  name: GetAuthorizationPolicies(OperationContext)
  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Gets the set of policies that participate in policy evaluation."
  remarks: "The [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] implementation provides a default set of authorization policies. These include the primary token that contains the credentials of the requester and all supporting tokens, transport tokens, and external policies if specified.       You can override this implementation and provide a different set of policies."
  syntax:
    content: protected virtual System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);
    parameters:
    - id: operationContext
      type: System.ServiceModel.OperationContext
      description: "The <xref:System.ServiceModel.OperationContext> of the current authorization request."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of type <xref href=&quot;System.IdentityModel.Policy.IAuthorizationPolicy&quot;></xref>."
  overload: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: ServiceAuthorizationManager()
  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager()
  fullName: System.ServiceModel.ServiceAuthorizationManager.ServiceAuthorizationManager()
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: CheckAccess(OperationContext)
  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.OperationContext
  parent: System.ServiceModel
  isExternal: true
  name: OperationContext
  nameWithType: OperationContext
  fullName: System.ServiceModel.OperationContext
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: CheckAccess(OperationContext,Message)
  nameWithType: ServiceAuthorizationManager.CheckAccess(OperationContext,Message)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccess(OperationContext,Message)
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: CheckAccessCore(OperationContext)
  nameWithType: ServiceAuthorizationManager.CheckAccessCore(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(OperationContext)
- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: GetAuthorizationPolicies(OperationContext)
  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)
  fullName: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(OperationContext)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<IAuthorizationPolicy>
  nameWithType: ReadOnlyCollection<IAuthorizationPolicy>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: IAuthorizationPolicy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.ServiceAuthorizationManager.#ctor*
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: ServiceAuthorizationManager
  nameWithType: ServiceAuthorizationManager.ServiceAuthorizationManager
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccess*
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: CheckAccess
  nameWithType: ServiceAuthorizationManager.CheckAccess
- uid: System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore*
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: CheckAccessCore
  nameWithType: ServiceAuthorizationManager.CheckAccessCore
- uid: System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies*
  parent: System.ServiceModel.ServiceAuthorizationManager
  isExternal: false
  name: GetAuthorizationPolicies
  nameWithType: ServiceAuthorizationManager.GetAuthorizationPolicies
