### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.PrincipalPermissionAttribute
  id: PrincipalPermissionAttribute
  children:
  - System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  - System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  - System.Security.Permissions.PrincipalPermissionAttribute.Name
  - System.Security.Permissions.PrincipalPermissionAttribute.Role
  langs:
  - csharp
  name: PrincipalPermissionAttribute
  nameWithType: PrincipalPermissionAttribute
  fullName: System.Security.Permissions.PrincipalPermissionAttribute
  type: Class
  summary: "Permite que as ações de segurança para <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> seja aplicada ao código utilizando a segurança declarativa. Esta classe não pode ser herdada."
  remarks: "PrincipalPermissionAttribute pode ser utilizado para exigir que os utilizadores executar o seu código pertencem a uma função especificada ou tenham sido autenticadas de forma declarativa. A utilização de <xref:System.Security.Permissions.PermissionState>cria um <xref:System.Security.Permissions.PrincipalPermission>com <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A>definido como `true` e <xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A>e <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>definido como `null`.</xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> </xref:System.Security.Permissions.PrincipalPermission> </xref:System.Security.Permissions.PermissionState>       Depende do âmbito da declaração de que está autorizado a <xref:System.Security.Permissions.SecurityAction>que é utilizado.</xref:System.Security.Permissions.SecurityAction> Não é possível aplicar PrincipalPermissionAttribute ao nível da assemblagem.       As informações de segurança declaradas por um atributo de segurança são armazenadas nos metadados do destino de atributo e são acedidas pelo sistema em tempo de execução. Atributos de segurança são utilizados apenas para a segurança declarativa. Para segurança imperativo, utilize a classe de permissão correspondente.      > [!IMPORTANT] > Antes de utilizar esta classe para a permissão principal a pedido, tem de definir política de principal do domínio de aplicação atual com o valor de enumeração <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Por predefinição, a política de principal está definida como <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Se definir a política de principal <xref:System.Security.Principal.PrincipalPolicy>, uma pedido da permissão principal irá falhar.</xref:System.Security.Principal.PrincipalPolicy> O seguinte código deve ser executado antes da permissão principal é demanded:`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  example:
  - "The following example demonstrates how the PrincipalPermissionAttribute class is used declaratively to demand that the current user be an administrator.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/t-system.security.permis_17_1.cpp)]\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_17_1.vb)]\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/t-system.security.permis_17_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PrincipalPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: PrincipalPermissionAttribute(SecurityAction)
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Permissions.PrincipalPermissionAttribute&quot;> </xref> classe com especificado <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>."
  remarks: '`Demand`, `InheritanceDemand`, e `LinkDemand` são os únicos valores de <xref:System.Security.Permissions.SecurityAction>que têm um significado para este atributo.</xref:System.Security.Permissions.SecurityAction> Outras ações não aplicar as permissões que não são as permissões de acesso de código.'
  example:
  - "The following example demonstrates how to use the PrincipalPermissionAttribute constructor to demand that the current user be an administrator.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/b59d1850-818f-411e-9c11-_1.cpp)]\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/b59d1850-818f-411e-9c11-_1.vb)]\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/b59d1850-818f-411e-9c11-_1.cs)]"
  syntax:
    content: public PrincipalPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "Um do <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref> valores."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  id: Authenticated
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Obtém ou define um valor que indica se o principal atual ter sido autenticado pelo fornecedor de segurança baseada em funções subjacente."
  syntax:
    content: public bool Authenticated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o principal atual ter sido autenticado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: PrincipalPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Cria e devolve um novo <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>."
  remarks: "Este método só deve ser chamado pelo sistema de segurança, nunca pelo código da aplicação.       No momento da compilação, atributos converter declarações de segurança para um formato serializado nos metadados. Dados de segurança declarativos nos metadados são criados a partir a permissão que este método devolve que corresponde a este atributo."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> que corresponde a este atributo."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name
  id: Name
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Obtém ou define o nome da identidade associada com o principal atual."
  remarks: "Se o fornecedor de autenticação do Windows NT, o nome é igual ao nome de início de sessão do utilizador do Windows NT (no formato &quot;DomainName\\UserName&quot;). Consulte a documentação do seu anfitrião para determinar que utiliza o fornecedor de autenticação e como determina a identidade do principal atual."
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "Um nome para que corresponda ao contra fornecidas pelo fornecedor de segurança baseada em funções subjacente."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role
  id: Role
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Obtém ou define a associação a uma função de segurança especificados."
  remarks: "As funções disponíveis variam consoante o fornecedor de autenticação utilizado pelo anfitrião. Se o fornecedor de autenticação do Windows NT, as funções são grupos de utilizadores do Windows NT (no formato &quot;DomainName\\GroupName&quot;). Consulte a documentação do seu anfitrião para determinar que utiliza o fornecedor de autenticação e de que os utilizadores de funções podem pertencer a."
  syntax:
    content: public string Role { get; set; }
    return:
      type: System.String
      description: "O nome de uma função do fornecedor de segurança baseada em funções subjacente."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Role*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: PrincipalPermissionAttribute(SecurityAction)
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: PrincipalPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: PrincipalPermissionAttribute
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: PrincipalPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
