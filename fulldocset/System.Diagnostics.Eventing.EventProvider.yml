### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Eventing.EventProvider
  id: EventProvider
  children:
  - System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)
  - System.Diagnostics.Eventing.EventProvider.Close
  - System.Diagnostics.Eventing.EventProvider.CreateActivityId
  - System.Diagnostics.Eventing.EventProvider.Dispose
  - System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)
  - System.Diagnostics.Eventing.EventProvider.Finalize
  - System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError
  - System.Diagnostics.Eventing.EventProvider.IsEnabled
  - System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)
  - System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)
  - System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])
  - System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)
  - System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)
  - System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)
  - System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)
  - System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])
  - System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)
  langs:
  - csharp
  name: EventProvider
  nameWithType: EventProvider
  fullName: System.Diagnostics.Eventing.EventProvider
  type: Class
  summary: "Use this class to write events."
  remarks: "To consume events written using the <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A> and <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> methods, the events must be defined in a manifest; events written using the <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A> method do not require a manifest.       Events can contain the following managed data types:      -   bool      -   Boolean      -   byte      -   char      -   decimal      -   double      -   float      -   Guid      -   int      -   IntPtr      -   long      -   sbyte      -   short      -   string      -   uint      -   UInt64       If an event in your manifest uses the `Boolean` in-type, you cannot write the data element using a `Boolean` data type in your managed code. The `Boolean` in-type in your manifest expects a 4-byte value, and a `Boolean` data type in managed code is 1-byte. Instead, you must use an `int` data type to write the value. If you want to log a `Boolean` value, use the UInt8 in-type in your manifest."
  syntax:
    content: 'public class EventProvider : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)
  id: '#ctor(System.Guid)'
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: EventProvider(Guid)
  nameWithType: EventProvider.EventProvider(Guid)
  fullName: System.Diagnostics.Eventing.EventProvider.EventProvider(Guid)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.Eventing.EventProvider&quot;></xref> class."
  remarks: "Registers the provider. To remove the registration when finished, call the <xref:System.Diagnostics.Eventing.EventProvider.Close%2A> method."
  syntax:
    content: public EventProvider (Guid providerGuid);
    parameters:
    - id: providerGuid
      type: System.Guid
      description: "Guid that uniquely identifies the provider."
  overload: System.Diagnostics.Eventing.EventProvider.#ctor*
  exceptions:
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "There is not enough memory to complete the operation."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The classes in the <xref href=&quot;System.Diagnostics.Eventing&quot;></xref> namespace work only on Windows Vista."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>providerGuid</code> parameter cannot be null."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error returned by the ETW subsystem."
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.Close
  id: Close
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: Close()
  nameWithType: EventProvider.Close()
  fullName: System.Diagnostics.Eventing.EventProvider.Close()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Removes the provider&quot;s registration from the ETW subsystem and releases all unmanaged resources."
  remarks: "You should call this method when finished instead of waiting for the system to dispose of the resources."
  syntax:
    content: public virtual void Close ();
    parameters: []
  overload: System.Diagnostics.Eventing.EventProvider.Close*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "An error returned by the ETW subsystem."
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.CreateActivityId
  id: CreateActivityId
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: CreateActivityId()
  nameWithType: EventProvider.CreateActivityId()
  fullName: System.Diagnostics.Eventing.EventProvider.CreateActivityId()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Creates a unique activity identifier for the provider."
  remarks: "This is a static method."
  syntax:
    content: public static Guid CreateActivityId ();
    parameters: []
    return:
      type: System.Guid
      description: "A unique Guid that you use when calling the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId*> method to set the activity identifier for the provider."
  overload: System.Diagnostics.Eventing.EventProvider.CreateActivityId*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.Dispose
  id: Dispose
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: Dispose()
  nameWithType: EventProvider.Dispose()
  fullName: System.Diagnostics.Eventing.EventProvider.Dispose()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Releases the resources used by this <xref href=&quot;System.Diagnostics.Eventing.EventProvider&quot;></xref> object."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.Eventing.EventProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventProvider.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.EventProvider.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Releases the resources used by this <xref href=&quot;System.Diagnostics.Eventing.EventProvider&quot;></xref> object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "This parameter is ignored by this method since there are no unmanaged resources."
  overload: System.Diagnostics.Eventing.EventProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.Finalize
  id: Finalize
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: Finalize()
  nameWithType: EventProvider.Finalize()
  fullName: System.Diagnostics.Eventing.EventProvider.Finalize()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection."
  syntax:
    content: ~EventProvider ();
    parameters: []
  overload: System.Diagnostics.Eventing.EventProvider.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError
  id: GetLastWriteEventError
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: GetLastWriteEventError()
  nameWithType: EventProvider.GetLastWriteEventError()
  fullName: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Gets the last error associated with an event write failure."
  remarks: "The <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A>, <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A>, and <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> methods set this value if they fail to write the event.       This is a static method."
  syntax:
    content: public static System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode GetLastWriteEventError ();
    parameters: []
    return:
      type: System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode
      description: "Use the value to determine the cause of an event write failure."
  overload: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled
  id: IsEnabled
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: IsEnabled()
  nameWithType: EventProvider.IsEnabled()
  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Determines whether any session enabled the provider, regardless of the level and keyword values used to enable the provider."
  remarks: "Typically, a provider does not call this method to determine whether the provider has been enabled by a session; the provider simply writes the event, and ETW determines whether the event is logged to the session. A provider may want to call this function if the provider needs to perform extra work to generate the event. In this case, calling this function first may save resources and time."
  syntax:
    content: public bool IsEnabled ();
    parameters: []
    return:
      type: System.Boolean
      description: "Is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the provider is enabled to any session; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.Eventing.EventProvider.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)
  id: IsEnabled(System.Byte,System.Int64)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: IsEnabled(Byte,Int64)
  nameWithType: EventProvider.IsEnabled(Byte,Int64)
  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled(Byte,Int64)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Determines whether any session is requesting the specified event from the provider."
  remarks: "Typically, a provider does not call this method to determine whether a session requested the specified event; the provider simply writes the event, and ETW determines whether the event is logged to a session. A provider may want to call this function if the provider needs to perform extra work to generate the event. In this case, calling this function first to determine if a session requested the event or not, may save resources and time."
  syntax:
    content: public bool IsEnabled (byte level, long keywords);
    parameters:
    - id: level
      type: System.Byte
      description: "Level of detail included in the event."
    - id: keywords
      type: System.Int64
      description: "Bit mask that specifies the event category. This mask should be the same keyword mask that is defined in the manifest for the event."
    return:
      type: System.Boolean
      description: "Is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if any session is requesting the specified event; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Diagnostics.Eventing.EventProvider.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)
  id: SetActivityId(System.Guid@)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: SetActivityId(Guid)
  nameWithType: EventProvider.SetActivityId(Guid)
  fullName: System.Diagnostics.Eventing.EventProvider.SetActivityId(Guid)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Sets the current activity identifier used by the <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent*> methods."
  remarks: "The identifier is stored in the thread context.       Note that in version 3.5 of the .NET framework, you had to set the `id` parameter of this method and the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property value to the same identifier value. However, in version 4.0 of the framework, the SetActivityId method automatically sets the correlation activity identifier for you.       This is a static method."
  syntax:
    content: public static void SetActivityId (ref Guid id);
    parameters:
    - id: id
      type: System.Guid
      description: "A unique activity identifier that the <xref:System.Diagnostics.Eventing.EventProvider.CreateActivityId*> method returns."
  overload: System.Diagnostics.Eventing.EventProvider.SetActivityId*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])
  id: WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteEvent(EventDescriptor,Object[])
  nameWithType: EventProvider.WriteEvent(EventDescriptor,Object[])
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Object[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Writes an event. The event data is specified as an array of objects."
  remarks: "If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.       If the object type is not supported, the method writes the value of the object&quot;s <xref:System.Object.ToString%2A?displayProperty=fullName> method in the payload. For a list of supported object types, see the Remarks for the <xref:System.Diagnostics.Eventing.EventProvider> class."
  example:
  - "```  \nprivate static Guid providerId = new Guid(\"{FB33FDA8-45FB-4df0-8A55-EEB4BA88E7E7}\");  \n  \nenum Keyword  \n{  \n    Read = 0x1,  \n    Write = 0x2,  \n    Local = 0x4,  \n    Remote = 0x8  \n}  \n  \nenum Level  \n{  \n    Critical = 1,  \n    Error,  \n    Warning,  \n    Information,  \n    Verbose  \n}  \n  \n    EventProvider provider = new EventProvider(providerId);  \n    EventDescriptor readEvent;  \n    string path = @\"<PATHGOESHERE>\";  \n    UInt64 bytesRead = <ASSIGNVALUE>;  \n  \n    if (provider.IsEnabled(Level.Information, (long)Keyword.Read))  \n    {  \n        unchecked  \n        {  \n            readEvent = new EventDescriptor(0x1, 0x0, 0x10, 0x4, 0x0, 0x0, (long)0x8000000000000005);  \n        }  \n  \n        if (!provider.WriteEvent(ref readEvent, new object[] { path, bytesRead }))  \n            Console.WriteLine(EventProvider.GetLastWriteEventError());  \n    }  \n  \n    provider.Close();  \n```"
  syntax:
    content: public bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, object[] eventPayload);
    parameters:
    - id: eventDescriptor
      type: System.Diagnostics.Eventing.EventDescriptor
      description: "An instance of <xref href=&quot;System.Diagnostics.Eventing.EventDescriptor&quot;></xref> that identifies the event to write."
    - id: eventPayload
      type: System.Object[]
      description: "An array of objects that contain the event data to write. The object must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session&quot;s buffer size is less and the session includes extended data items with the event.       This parameter can be null."
    return:
      type: System.Boolean
      description: "Is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the event is written; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure."
  overload: System.Diagnostics.Eventing.EventProvider.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>eventPayload</code> parameter contains too many objects or strings."
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)
  id: WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteEvent(EventDescriptor,String)
  nameWithType: EventProvider.WriteEvent(EventDescriptor,String)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Writes an event. The event data is specified as a string."
  remarks: "If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event.       The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session&quot;s buffer size is less and the session includes extended data items with the event."
  example:
  - "```  \nprivate static Guid providerId = new Guid(\"{FB33FDA8-45FB-4df0-8A55-EEB4BA88E7E7}\");  \n  \nEventProvider provider = new EventProvider(providerId);  \nEventDescriptor writeEvent;  \n  \nif (provider.IsEnabled())  \n{  \n     unchecked  \n     {  \n          writeEvent = new EventDescriptor(0x2, 0x0, 0x10, 0x3, 0x0, 0x0, (long)0x8000000000000006);  \n     }  \n  \n     if (!provider.WriteEvent(ref writeEvent, \"Write event.\"))  \n          Console.WriteLine(EventProvider.GetLastWriteEventError());  \n}  \n  \nprovider.Close();  \n```"
  syntax:
    content: public bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, string data);
    parameters:
    - id: eventDescriptor
      type: System.Diagnostics.Eventing.EventDescriptor
      description: "An instance of <xref href=&quot;System.Diagnostics.Eventing.EventDescriptor&quot;></xref> that identifies the event to write."
    - id: data
      type: System.String
      description: "The string to write as the event data."
    return:
      type: System.Boolean
      description: "Is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the event is written; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure."
  overload: System.Diagnostics.Eventing.EventProvider.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If <code>data</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)
  id: WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteEvent(EventDescriptor,Int32,IntPtr)
  nameWithType: EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Writes an event. The event data is specified as a block of memory."
  remarks: "If you call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify an activity identifier for the event, this method retrieves the identifier from the thread context and includes it with the event."
  syntax:
    content: protected bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, int dataCount, IntPtr data);
    parameters:
    - id: eventDescriptor
      type: System.Diagnostics.Eventing.EventDescriptor
      description: "An instance of <xref href=&quot;System.Diagnostics.Eventing.EventDescriptor&quot;></xref> that identifies the event to write."
    - id: dataCount
      type: System.Int32
      description: "Size of the event data to which the `data` parameter points. The maximum event data size is limited to 64 KB minus the size of the event headers. The event size is less if the session&quot;s buffer size is less and the session includes extended data items with the event."
    - id: data
      type: System.IntPtr
      description: "Pointer to the event data to write."
    return:
      type: System.Boolean
      description: "Is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the event is written; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure."
  overload: System.Diagnostics.Eventing.EventProvider.WriteEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)
  id: WriteMessageEvent(System.String)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteMessageEvent(String)
  nameWithType: EventProvider.WriteMessageEvent(String)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Writes an event that contains a string as its data."
  remarks: "The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session&quot;s buffer size is less and the session includes extended data items with the event."
  example:
  - "```  \nif (!provider.WriteMessageEvent(\"Event string.\"))  \n    Console.WriteLine(EventProvider.GetLastWriteEventError());  \n```"
  syntax:
    content: public bool WriteMessageEvent (string eventMessage);
    parameters:
    - id: eventMessage
      type: System.String
      description: "String to write as the event data."
    return:
      type: System.Boolean
      description: "Is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the event is written; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure."
  overload: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If <code>eventMessage</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)
  id: WriteMessageEvent(System.String,System.Byte,System.Int64)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteMessageEvent(String,Byte,Int64)
  nameWithType: EventProvider.WriteMessageEvent(String,Byte,Int64)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String,Byte,Int64)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Writes an event that contains a string as its data if the level and keyword value match the events requested by the session."
  remarks: "The maximum string length is limited to 64 KB minus the size of the event headers. The event size is less if the session&quot;s buffer size is less and the session includes extended data items with the event."
  example:
  - "```  \n// Calling this method with level and keyword set to zero is the same  \n// as calling WriteMessageEvent(string); the event is always written.  \nif (!provider.WriteMessageEvent(\"Event string.\", 0, 0))  \n    Console.WriteLine(EventProvider.GetLastWriteEventError());  \n  \n// Event is written if the level value of the session is less than or equal to 3, and bit 1 of the session  \n// keyword bit-mask is set.  \nif (!provider.WriteMessageEvent(\"Event string.\", 3, 2))  \n    Console.WriteLine(EventProvider.GetLastWriteEventError());  \n```"
  syntax:
    content: public bool WriteMessageEvent (string eventMessage, byte eventLevel, long eventKeywords);
    parameters:
    - id: eventMessage
      type: System.String
      description: "String to write as the event data."
    - id: eventLevel
      type: System.Byte
      description: "Level of detail included in the event. If the provider uses a manifest to define the event, set this value to the same level defined in the manifest."
    - id: eventKeywords
      type: System.Int64
      description: "Bit mask that specifies the event category. If the provider uses a manifest to define the event, set this value to the same keyword mask defined in the manifest."
    return:
      type: System.Boolean
      description: "Is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the event is written; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. If false, call the &lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt; method to determine the cause of the failure."
  overload: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If <code>eventMessage</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])
  id: WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteTransferEvent(EventDescriptor,Guid,Object[])
  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])
  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Links events together when tracing events in an end-to-end scenario. The event data is specified as an array of objects."
  remarks: "The method uses the activity ID set in the thread context to identify this component. To set the activity ID, call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method.       If you use the <xref:System.Diagnostics.Trace> class, you do not use the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method to specify the activity ID. Instead, access the <xref:System.Diagnostics.Trace.CorrelationManager%2A> property to get the <xref:System.Diagnostics.CorrelationManager> object. Then, set the <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> property to the activity ID. You must also set the `relatedActivityId` to a <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> value."
  syntax:
    content: public bool WriteTransferEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, Guid relatedActivityId, object[] eventPayload);
    parameters:
    - id: eventDescriptor
      type: System.Diagnostics.Eventing.EventDescriptor
      description: "An instance of <xref href=&quot;System.Diagnostics.Eventing.EventDescriptor&quot;></xref> that identifies the event to write."
    - id: relatedActivityId
      type: System.Guid
      description: "Activity identifier from the previous component. Use this parameter to link your component&quot;s events to the previous component&quot;s events."
    - id: eventPayload
      type: System.Object[]
      description: "An array of objects that contain the event data to write. The data must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session&quot;s buffer size is less and the session includes extended data items with the event."
    return:
      type: System.Boolean
      description: "Is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the event is written; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. If false, call the <xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*> method to determine the cause of the failure."
  overload: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If <code>eventPayload</code> contains too many objects or strings."
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)
  id: WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "Links events together when tracing events in an end-to-end scenario. The event data is specified as a block of memory."
  remarks: "The method uses the activity ID set in the thread context to identify this component. To set the activity ID, call the <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> method."
  syntax:
    content: protected bool WriteTransferEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, Guid relatedActivityId, int dataCount, IntPtr data);
    parameters:
    - id: eventDescriptor
      type: System.Diagnostics.Eventing.EventDescriptor
      description: "An instance of <xref href=&quot;System.Diagnostics.Eventing.EventDescriptor&quot;></xref> that identifies the event to write."
    - id: relatedActivityId
      type: System.Guid
      description: "Activity identifier from the previous component. Use this parameter to link your component&quot;s events to the previous component&quot;s events."
    - id: dataCount
      type: System.Int32
      description: "Size of the event data to which the `data` parameter points. The maximum event data size is limited to 64 KB minus the size of the event headers. The event size is less if the session&quot;s buffer size is less and the session includes extended data items with the event."
    - id: data
      type: System.IntPtr
      description: "Pointer to the event data to write."
    return:
      type: System.Boolean
      description: "Is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the event is written; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. If false, call the <xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*> method to determine the cause of the failure."
  overload: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: EventProvider(Guid)
  nameWithType: EventProvider.EventProvider(Guid)
  fullName: System.Diagnostics.Eventing.EventProvider.EventProvider(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Diagnostics.Eventing.EventProvider.Close
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Close()
  nameWithType: EventProvider.Close()
  fullName: System.Diagnostics.Eventing.EventProvider.Close()
- uid: System.Diagnostics.Eventing.EventProvider.CreateActivityId
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: CreateActivityId()
  nameWithType: EventProvider.CreateActivityId()
  fullName: System.Diagnostics.Eventing.EventProvider.CreateActivityId()
- uid: System.Diagnostics.Eventing.EventProvider.Dispose
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Dispose()
  nameWithType: EventProvider.Dispose()
  fullName: System.Diagnostics.Eventing.EventProvider.Dispose()
- uid: System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventProvider.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.EventProvider.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Eventing.EventProvider.Finalize
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Finalize()
  nameWithType: EventProvider.Finalize()
  fullName: System.Diagnostics.Eventing.EventProvider.Finalize()
- uid: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: GetLastWriteEventError()
  nameWithType: EventProvider.GetLastWriteEventError()
  fullName: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError()
- uid: System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode
  parent: System.Diagnostics.Eventing
  isExternal: false
  name: EventProvider+WriteEventErrorCode
  nameWithType: EventProvider+WriteEventErrorCode
  fullName: System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode
- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: IsEnabled()
  nameWithType: EventProvider.IsEnabled()
  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled()
- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: IsEnabled(Byte,Int64)
  nameWithType: EventProvider.IsEnabled(Byte,Int64)
  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled(Byte,Int64)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: SetActivityId(Guid)
  nameWithType: EventProvider.SetActivityId(Guid)
  fullName: System.Diagnostics.Eventing.EventProvider.SetActivityId(Guid)
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteEvent(EventDescriptor,Object[])
  nameWithType: EventProvider.WriteEvent(EventDescriptor,Object[])
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Object[])
- uid: System.Diagnostics.Eventing.EventDescriptor
  parent: System.Diagnostics.Eventing
  isExternal: false
  name: EventDescriptor
  nameWithType: EventDescriptor
  fullName: System.Diagnostics.Eventing.EventDescriptor
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteEvent(EventDescriptor,String)
  nameWithType: EventProvider.WriteEvent(EventDescriptor,String)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteEvent(EventDescriptor,Int32,IntPtr)
  nameWithType: EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteMessageEvent(String)
  nameWithType: EventProvider.WriteMessageEvent(String)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String)
- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteMessageEvent(String,Byte,Int64)
  nameWithType: EventProvider.WriteMessageEvent(String,Byte,Int64)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String,Byte,Int64)
- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteTransferEvent(EventDescriptor,Guid,Object[])
  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])
  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])
- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
- uid: System.Diagnostics.Eventing.EventProvider.#ctor*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: EventProvider
  nameWithType: EventProvider.EventProvider
- uid: System.Diagnostics.Eventing.EventProvider.Close*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Close
  nameWithType: EventProvider.Close
- uid: System.Diagnostics.Eventing.EventProvider.CreateActivityId*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: CreateActivityId
  nameWithType: EventProvider.CreateActivityId
- uid: System.Diagnostics.Eventing.EventProvider.Dispose*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Dispose
  nameWithType: EventProvider.Dispose
- uid: System.Diagnostics.Eventing.EventProvider.Finalize*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Finalize
  nameWithType: EventProvider.Finalize
- uid: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: GetLastWriteEventError
  nameWithType: EventProvider.GetLastWriteEventError
- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: IsEnabled
  nameWithType: EventProvider.IsEnabled
- uid: System.Diagnostics.Eventing.EventProvider.SetActivityId*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: SetActivityId
  nameWithType: EventProvider.SetActivityId
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteEvent
  nameWithType: EventProvider.WriteEvent
- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteMessageEvent
  nameWithType: EventProvider.WriteMessageEvent
- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteTransferEvent
  nameWithType: EventProvider.WriteTransferEvent
