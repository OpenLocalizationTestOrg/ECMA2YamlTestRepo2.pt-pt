### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.IEditableCollectionView
  id: IEditableCollectionView
  children:
  - System.ComponentModel.IEditableCollectionView.AddNew
  - System.ComponentModel.IEditableCollectionView.CanAddNew
  - System.ComponentModel.IEditableCollectionView.CanCancelEdit
  - System.ComponentModel.IEditableCollectionView.CancelEdit
  - System.ComponentModel.IEditableCollectionView.CancelNew
  - System.ComponentModel.IEditableCollectionView.CanRemove
  - System.ComponentModel.IEditableCollectionView.CommitEdit
  - System.ComponentModel.IEditableCollectionView.CommitNew
  - System.ComponentModel.IEditableCollectionView.CurrentAddItem
  - System.ComponentModel.IEditableCollectionView.CurrentEditItem
  - System.ComponentModel.IEditableCollectionView.EditItem(System.Object)
  - System.ComponentModel.IEditableCollectionView.IsAddingNew
  - System.ComponentModel.IEditableCollectionView.IsEditingItem
  - System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition
  - System.ComponentModel.IEditableCollectionView.Remove(System.Object)
  - System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)
  langs:
  - csharp
  name: IEditableCollectionView
  nameWithType: IEditableCollectionView
  fullName: System.ComponentModel.IEditableCollectionView
  type: Interface
  summary: "Defines methods and properties that a <xref href=&quot;System.Windows.Data.CollectionView&quot;></xref> implements to provide editing capabilities to a collection."
  remarks: "When a collection view implements the IEditableCollectionView interface, you can directly change the underlying collection, if it allows changes to be made, by using the methods and properties that IEditableCollectionView exposes, regardless of the collection&quot;s type.       The types <xref:System.Windows.Controls.ItemCollection>, <xref:System.Windows.Data.BindingListCollectionView>, and <xref:System.Windows.Data.ListCollectionView> are the types that ship with [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] that inherit from <xref:System.Windows.Data.CollectionView>.  These types also implement the IEditableCollectionView, so you can edit a collection that uses one of those types.  <xref:System.Windows.Controls.ItemCollection>, in particular, is often used because the <xref:System.Windows.Controls.ItemsControl.Items%2A?displayProperty=fullName> property is an <xref:System.Windows.Controls.ItemCollection>."
  example:
  - "The following example shows how to add an item to a collection by using methods that are defined by IEditableCollectionView.  This application displays a list of items for sale and gives the user the option of adding, editing, or removing an item.  When the user adds or edits an item, a form prompts the user to enter a new item.  If the user submits the form, the item is committed to the collection.  If the user cancels the form, the item is discarded. For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974).  \n  \n [!code-cs[EditingCollectionsSnippets#AddItem](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#additem)]\n [!code-vb[EditingCollectionsSnippets#AddItem](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#additem)]"
  syntax:
    content: public interface IEditableCollectionView
  implements: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.AddNew
  id: AddNew
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: AddNew()
  nameWithType: IEditableCollectionView.AddNew()
  fullName: System.ComponentModel.IEditableCollectionView.AddNew()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Adds a new item to the collection."
  remarks: "Calling AddNew begins an add transaction.  You should call <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> or <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> to end the add transaction. A new item always appears in the collection view. Any filtering, sorting, or grouping that is applied to the view is applied to the new item when <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> is called."
  example:
  - "The following example creates a <xref:System.Windows.Window> that prompts the user to add a new item.  Then it calls AddNew to create a new object and sets the <xref:System.Windows.FrameworkElement.DataContext%2A> of the <xref:System.Windows.Window> to that object. For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974).  \n  \n [!code-cs[EditingCollectionsSnippets#AddItem](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#additem)]\n [!code-vb[EditingCollectionsSnippets#AddItem](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#additem)]"
  syntax:
    content: public object AddNew ();
    parameters: []
    return:
      type: System.Object
      description: "The new item that is added to the collection."
  overload: System.ComponentModel.IEditableCollectionView.AddNew*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.CanAddNew
  id: CanAddNew
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: CanAddNew
  nameWithType: IEditableCollectionView.CanAddNew
  fullName: System.ComponentModel.IEditableCollectionView.CanAddNew
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Gets a value that indicates whether a new item can be added to the collection."
  remarks: "An <xref:System.ComponentModel.IEditableCollectionView> can add a new item if the following are true:      -   An item can be added to the underlying collection.  For example, if the collection is read-only, CanAddNew is `false`.      -   The <xref:System.ComponentModel.IEditableCollectionView> can create an object of the type that is in the collection.  For example, if the collection is of type <xref:System.Collections.ObjectModel.ObservableCollection%601>, the <xref:System.ComponentModel.IEditableCollectionView> must be able to create an object of type `T`."
  example:
  - "The following example checks whether an item can be added to the collection.  If CanAddNew is `false`, the example tells the user that an item cannot be added.  Otherwise, it shows a form that prompts the user to add a new item. For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974) .  \n  \n [!code-cs[EditingCollectionsSnippets#AddItem](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#additem)]\n [!code-vb[EditingCollectionsSnippets#AddItem](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#additem)]"
  syntax:
    content: public bool CanAddNew { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if a new item can be added to the collection; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.IEditableCollectionView.CanAddNew*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.CanCancelEdit
  id: CanCancelEdit
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: CanCancelEdit
  nameWithType: IEditableCollectionView.CanCancelEdit
  fullName: System.ComponentModel.IEditableCollectionView.CanCancelEdit
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object."
  remarks: "CanCancelEdit is `true` if the view supports the notion of &quot;pending changes&quot; on the currently edited item.   For example, a collection view might return `true` if the edited item implements <xref:System.ComponentModel.IEditableObject>, or if the view has information about the item&quot;s state that it can use to roll back changes. CanCancelEdit is `false` if the view cannot revert changes on an object.  In that case, call <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> to cause the view to exit the edit state and provide logic to revert the changes on the object that was edited."
  example:
  - "The following example gets CanCancelEdit to check whether the original values of the edited item can be restored before it calls <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.  If the values cannot be restored, you must supply additional logic to do so.  If they can be, the values are restored when the example calls <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.   For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974).  \n  \n [!code-cs[EditingCollectionsSnippets#CancelEdit](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#canceledit)]\n [!code-vb[EditingCollectionsSnippets#CancelEdit](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#canceledit)]"
  syntax:
    content: public bool CanCancelEdit { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the collection view can discard pending changes and restore the original values of an edited object; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.IEditableCollectionView.CanCancelEdit*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.CancelEdit
  id: CancelEdit
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: CancelEdit()
  nameWithType: IEditableCollectionView.CancelEdit()
  fullName: System.ComponentModel.IEditableCollectionView.CancelEdit()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Ends the edit transaction and, if possible, restores the original value to the item."
  remarks: "CancelEdit sets <xref:System.ComponentModel.IEditableCollectionView.CurrentEditItem%2A> to `null` and causes the collection view to exit the edit state.  If <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> is `true`, CancelEdit also restores the original values of the edited object."
  example:
  - "The following example gets <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> to check whether the original values of the edited item can be restored before it calls CancelEdit.  If the values cannot be restored, you must supply additional logic to do so.  If they can be, the values are restored when the example calls CancelEdit. For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974).  \n  \n [!code-cs[EditingCollectionsSnippets#CancelEdit](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#canceledit)]\n [!code-vb[EditingCollectionsSnippets#CancelEdit](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#canceledit)]"
  syntax:
    content: public void CancelEdit ();
    parameters: []
  overload: System.ComponentModel.IEditableCollectionView.CancelEdit*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.CancelNew
  id: CancelNew
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: CancelNew()
  nameWithType: IEditableCollectionView.CancelNew()
  fullName: System.ComponentModel.IEditableCollectionView.CancelNew()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Ends the add transaction and discards the pending new item."
  remarks: ''
  example:
  - "The following example displays a form that prompts the user to add a new item.  If the user submits the form, the example calls <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> to add the item to the collection.  If the user cancels the form, the example calls CancelNew to discard the item. For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974).  \n  \n [!code-cs[EditingCollectionsSnippets#AddItem](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#additem)]\n [!code-vb[EditingCollectionsSnippets#AddItem](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#additem)]"
  syntax:
    content: public void CancelNew ();
    parameters: []
  overload: System.ComponentModel.IEditableCollectionView.CancelNew*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.CanRemove
  id: CanRemove
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: CanRemove
  nameWithType: IEditableCollectionView.CanRemove
  fullName: System.ComponentModel.IEditableCollectionView.CanRemove
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Gets a value that indicates whether an item can be removed from the collection."
  remarks: "CanRemove is `false` if the underlying collection is read-only."
  example:
  - "The following example calls CanRemove to check whether an item can be removed from the collection.  If an item can be removed, the example prompts the user to confirm the action and calls <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> if the user clicks **Yes**. For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974).  \n  \n [!code-cs[EditingCollectionsSnippets#RemoveItem](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#removeitem)]\n [!code-vb[EditingCollectionsSnippets#RemoveItem](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#removeitem)]"
  syntax:
    content: public bool CanRemove { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if an item can be removed from the collection; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.IEditableCollectionView.CanRemove*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.CommitEdit
  id: CommitEdit
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: CommitEdit()
  nameWithType: IEditableCollectionView.CommitEdit()
  fullName: System.ComponentModel.IEditableCollectionView.CommitEdit()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Ends the edit transaction and saves the pending changes."
  remarks: ''
  example:
  - "The following example creates a form that prompts the user to edit an existing item.  If the user submits the form, the example calls CommitEdit to save the changes to the collection.  If the user cancels the form, the example calls <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> to discard the changes. For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974).  \n  \n [!code-cs[EditingCollectionsSnippets#EditItem](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#edititem)]\n [!code-vb[EditingCollectionsSnippets#EditItem](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#edititem)]"
  syntax:
    content: public void CommitEdit ();
    parameters: []
  overload: System.ComponentModel.IEditableCollectionView.CommitEdit*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.CommitNew
  id: CommitNew
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: CommitNew()
  nameWithType: IEditableCollectionView.CommitNew()
  fullName: System.ComponentModel.IEditableCollectionView.CommitNew()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Ends the add transaction and saves the pending new item."
  remarks: "Any filtering, sorting, or grouping that is applied to the <xref:System.Windows.Data.CollectionView> is applied to the new item when CommitNew is called."
  example:
  - "The following example displays a form that prompts the user to add a new item.  If the user submits the form, the example calls CommitNew to add the item to the collection.  If the user cancels the form, the example calls <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> to discard the item. For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974).  \n  \n [!code-cs[EditingCollectionsSnippets#AddItem](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#additem)]\n [!code-vb[EditingCollectionsSnippets#AddItem](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#additem)]"
  syntax:
    content: public void CommitNew ();
    parameters: []
  overload: System.ComponentModel.IEditableCollectionView.CommitNew*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.CurrentAddItem
  id: CurrentAddItem
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: CurrentAddItem
  nameWithType: IEditableCollectionView.CurrentAddItem
  fullName: System.ComponentModel.IEditableCollectionView.CurrentAddItem
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Gets the item that is being added during the current add transaction."
  syntax:
    content: public object CurrentAddItem { get; }
    return:
      type: System.Object
      description: "The item that is being added if <xref:System.ComponentModel.IEditableCollectionView.IsAddingNew*> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.IEditableCollectionView.CurrentAddItem*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.CurrentEditItem
  id: CurrentEditItem
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: CurrentEditItem
  nameWithType: IEditableCollectionView.CurrentEditItem
  fullName: System.ComponentModel.IEditableCollectionView.CurrentEditItem
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Gets the item in the collection that is being edited."
  syntax:
    content: public object CurrentEditItem { get; }
    return:
      type: System.Object
      description: "The item in the collection that is being edited if <xref:System.ComponentModel.IEditableCollectionView.IsEditingItem*> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.IEditableCollectionView.CurrentEditItem*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.EditItem(System.Object)
  id: EditItem(System.Object)
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: EditItem(Object)
  nameWithType: IEditableCollectionView.EditItem(Object)
  fullName: System.ComponentModel.IEditableCollectionView.EditItem(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Begins an edit transaction of the specified item."
  remarks: ''
  example:
  - "The following example creates a form that prompts the user to edit an existing item.  If the user submits the form, the changes are committed to the collection.  If the user cancels the form, the changes are discarded. For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974) .  \n  \n [!code-cs[EditingCollectionsSnippets#EditItem](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#edititem)]\n [!code-vb[EditingCollectionsSnippets#EditItem](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#edititem)]"
  syntax:
    content: public void EditItem (object item);
    parameters:
    - id: item
      type: System.Object
      description: "The item to edit."
  overload: System.ComponentModel.IEditableCollectionView.EditItem*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.IsAddingNew
  id: IsAddingNew
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: IsAddingNew
  nameWithType: IEditableCollectionView.IsAddingNew
  fullName: System.ComponentModel.IEditableCollectionView.IsAddingNew
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Gets a value that indicates whether an add transaction is in progress."
  remarks: "You begin an add transaction by calling <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> and end the add transaction by calling <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> or <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A>."
  syntax:
    content: public bool IsAddingNew { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if an add transaction is in progress; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.IEditableCollectionView.IsAddingNew*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.IsEditingItem
  id: IsEditingItem
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: IsEditingItem
  nameWithType: IEditableCollectionView.IsEditingItem
  fullName: System.ComponentModel.IEditableCollectionView.IsEditingItem
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Gets a value that indicates whether an edit transaction is in progress."
  remarks: "You begin an edit transaction by calling <xref:System.ComponentModel.IEditableCollectionView.EditItem%2A> and end the transaction by calling <xref:System.ComponentModel.IEditableCollectionView.CommitEdit%2A> or <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>."
  syntax:
    content: public bool IsEditingItem { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if an edit transaction is in progress; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.IEditableCollectionView.IsEditingItem*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition
  id: NewItemPlaceholderPosition
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: NewItemPlaceholderPosition
  nameWithType: IEditableCollectionView.NewItemPlaceholderPosition
  fullName: System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Gets or sets the position of the new item placeholder in the collection view."
  syntax:
    content: public System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition { get; set; }
    return:
      type: System.ComponentModel.NewItemPlaceholderPosition
      description: "One of the enumeration values that specifies the position of the new item placeholder in the collection view."
  overload: System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: IEditableCollectionView.Remove(Object)
  fullName: System.ComponentModel.IEditableCollectionView.Remove(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Removes the specified item from the collection."
  remarks: "If `item` is not in the collection, Remove does nothing."
  example:
  - "The following example calls <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> to check whether an item can be removed from the collection.  If an item can be removed, the example prompts the user to confirm the action and calls Remove if the user clicks **Yes**. For the entire sample, see [Changing a Collection by Using IEditableCollectionView Sample](http://go.microsoft.com/fwlink/?LinkID=159974).  \n  \n [!code-cs[EditingCollectionsSnippets#RemoveItem](~/add/codesnippet/csharp/EditingCollectionsSnippets/Window1.xaml.cs#removeitem)]\n [!code-vb[EditingCollectionsSnippets#RemoveItem](~/add/codesnippet/visualbasic/editingcollectionssnippets/window1.xaml.vb#removeitem)]"
  syntax:
    content: public void Remove (object item);
    parameters:
    - id: item
      type: System.Object
      description: "The item to remove."
  overload: System.ComponentModel.IEditableCollectionView.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.ComponentModel.IEditableCollectionView
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: IEditableCollectionView.RemoveAt(Int32)
  fullName: System.ComponentModel.IEditableCollectionView.RemoveAt(Int32)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.ComponentModel
  summary: "Removes the item at the specified position from the collection."
  remarks: '`index` is relative to the collection view, not the collection.  For example, if the collection has 10 items and the view has a <xref:System.ComponentModel.ICollectionView.Filter%2A> so that 7 items appear, the valid values of `index` are 0 through 6.'
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The position of the item to remove."
  overload: System.ComponentModel.IEditableCollectionView.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0 or greater than the number of items in the collection view."
  platform:
  - net462
references:
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ComponentModel.IEditableCollectionView.AddNew
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: AddNew()
  nameWithType: IEditableCollectionView.AddNew()
  fullName: System.ComponentModel.IEditableCollectionView.AddNew()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.IEditableCollectionView.CanAddNew
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CanAddNew
  nameWithType: IEditableCollectionView.CanAddNew
  fullName: System.ComponentModel.IEditableCollectionView.CanAddNew
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.IEditableCollectionView.CanCancelEdit
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CanCancelEdit
  nameWithType: IEditableCollectionView.CanCancelEdit
  fullName: System.ComponentModel.IEditableCollectionView.CanCancelEdit
- uid: System.ComponentModel.IEditableCollectionView.CancelEdit
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CancelEdit()
  nameWithType: IEditableCollectionView.CancelEdit()
  fullName: System.ComponentModel.IEditableCollectionView.CancelEdit()
- uid: System.ComponentModel.IEditableCollectionView.CancelNew
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CancelNew()
  nameWithType: IEditableCollectionView.CancelNew()
  fullName: System.ComponentModel.IEditableCollectionView.CancelNew()
- uid: System.ComponentModel.IEditableCollectionView.CanRemove
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CanRemove
  nameWithType: IEditableCollectionView.CanRemove
  fullName: System.ComponentModel.IEditableCollectionView.CanRemove
- uid: System.ComponentModel.IEditableCollectionView.CommitEdit
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CommitEdit()
  nameWithType: IEditableCollectionView.CommitEdit()
  fullName: System.ComponentModel.IEditableCollectionView.CommitEdit()
- uid: System.ComponentModel.IEditableCollectionView.CommitNew
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CommitNew()
  nameWithType: IEditableCollectionView.CommitNew()
  fullName: System.ComponentModel.IEditableCollectionView.CommitNew()
- uid: System.ComponentModel.IEditableCollectionView.CurrentAddItem
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CurrentAddItem
  nameWithType: IEditableCollectionView.CurrentAddItem
  fullName: System.ComponentModel.IEditableCollectionView.CurrentAddItem
- uid: System.ComponentModel.IEditableCollectionView.CurrentEditItem
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CurrentEditItem
  nameWithType: IEditableCollectionView.CurrentEditItem
  fullName: System.ComponentModel.IEditableCollectionView.CurrentEditItem
- uid: System.ComponentModel.IEditableCollectionView.EditItem(System.Object)
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: EditItem(Object)
  nameWithType: IEditableCollectionView.EditItem(Object)
  fullName: System.ComponentModel.IEditableCollectionView.EditItem(Object)
- uid: System.ComponentModel.IEditableCollectionView.IsAddingNew
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: IsAddingNew
  nameWithType: IEditableCollectionView.IsAddingNew
  fullName: System.ComponentModel.IEditableCollectionView.IsAddingNew
- uid: System.ComponentModel.IEditableCollectionView.IsEditingItem
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: IsEditingItem
  nameWithType: IEditableCollectionView.IsEditingItem
  fullName: System.ComponentModel.IEditableCollectionView.IsEditingItem
- uid: System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: NewItemPlaceholderPosition
  nameWithType: IEditableCollectionView.NewItemPlaceholderPosition
  fullName: System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition
- uid: System.ComponentModel.NewItemPlaceholderPosition
  parent: System.ComponentModel
  isExternal: false
  name: NewItemPlaceholderPosition
  nameWithType: NewItemPlaceholderPosition
  fullName: System.ComponentModel.NewItemPlaceholderPosition
- uid: System.ComponentModel.IEditableCollectionView.Remove(System.Object)
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: Remove(Object)
  nameWithType: IEditableCollectionView.Remove(Object)
  fullName: System.ComponentModel.IEditableCollectionView.Remove(Object)
- uid: System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IEditableCollectionView.RemoveAt(Int32)
  fullName: System.ComponentModel.IEditableCollectionView.RemoveAt(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.IEditableCollectionView.AddNew*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: AddNew
  nameWithType: IEditableCollectionView.AddNew
- uid: System.ComponentModel.IEditableCollectionView.CanAddNew*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CanAddNew
  nameWithType: IEditableCollectionView.CanAddNew
- uid: System.ComponentModel.IEditableCollectionView.CanCancelEdit*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CanCancelEdit
  nameWithType: IEditableCollectionView.CanCancelEdit
- uid: System.ComponentModel.IEditableCollectionView.CancelEdit*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CancelEdit
  nameWithType: IEditableCollectionView.CancelEdit
- uid: System.ComponentModel.IEditableCollectionView.CancelNew*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CancelNew
  nameWithType: IEditableCollectionView.CancelNew
- uid: System.ComponentModel.IEditableCollectionView.CanRemove*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CanRemove
  nameWithType: IEditableCollectionView.CanRemove
- uid: System.ComponentModel.IEditableCollectionView.CommitEdit*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CommitEdit
  nameWithType: IEditableCollectionView.CommitEdit
- uid: System.ComponentModel.IEditableCollectionView.CommitNew*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CommitNew
  nameWithType: IEditableCollectionView.CommitNew
- uid: System.ComponentModel.IEditableCollectionView.CurrentAddItem*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CurrentAddItem
  nameWithType: IEditableCollectionView.CurrentAddItem
- uid: System.ComponentModel.IEditableCollectionView.CurrentEditItem*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: CurrentEditItem
  nameWithType: IEditableCollectionView.CurrentEditItem
- uid: System.ComponentModel.IEditableCollectionView.EditItem*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: EditItem
  nameWithType: IEditableCollectionView.EditItem
- uid: System.ComponentModel.IEditableCollectionView.IsAddingNew*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: IsAddingNew
  nameWithType: IEditableCollectionView.IsAddingNew
- uid: System.ComponentModel.IEditableCollectionView.IsEditingItem*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: IsEditingItem
  nameWithType: IEditableCollectionView.IsEditingItem
- uid: System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: NewItemPlaceholderPosition
  nameWithType: IEditableCollectionView.NewItemPlaceholderPosition
- uid: System.ComponentModel.IEditableCollectionView.Remove*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: Remove
  nameWithType: IEditableCollectionView.Remove
- uid: System.ComponentModel.IEditableCollectionView.RemoveAt*
  parent: System.ComponentModel.IEditableCollectionView
  isExternal: false
  name: RemoveAt
  nameWithType: IEditableCollectionView.RemoveAt
