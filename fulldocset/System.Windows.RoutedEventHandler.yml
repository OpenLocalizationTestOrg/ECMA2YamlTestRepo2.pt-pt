### YamlMime:ManagedReference
items:
- uid: System.Windows.RoutedEventHandler
  id: RoutedEventHandler
  langs:
  - csharp
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
  type: Delegate
  summary: "Representa o método que irá processar vários eventos encaminhados que não têm dados de evento específico, para além dos dados que é comuns para todos os eventos encaminhados."
  remarks: "O delegado de RoutedEventHandler é utilizado para qualquer evento encaminhado que não comunicarão as informações de eventos específicos nos dados de eventos. Existem muitos esses eventos encaminhados; prominent exemplos <xref:System.Windows.Controls.Primitives.ButtonBase.Click>e <xref:System.Windows.FrameworkElement.Loaded>.</xref:System.Windows.FrameworkElement.Loaded> </xref:System.Windows.Controls.Primitives.ButtonBase.Click>       A diferença entre escrever um processador para um evento encaminhado por oposição a um geral mais noteworthy [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] evento é que o `sender` do evento (o elemento em que o processador está ligado e invocado) não pode ser considerada necessariamente a origem do evento. A origem é reportada como uma propriedade dos dados de eventos (<xref:System.Windows.RoutedEventArgs.Source%2A>).</xref:System.Windows.RoutedEventArgs.Source%2A> Uma diferença entre `sender`e <xref:System.Windows.RoutedEventArgs.Source%2A>é o resultado do evento que está a ser encaminhado para diferentes elementos, durante a transversal do evento encaminhado através de uma árvore de elemento.</xref:System.Windows.RoutedEventArgs.Source%2A>       Pode utilizar tanto `sender` ou <xref:System.Windows.RoutedEventArgs.Source%2A>para um objeto de referência se deliberadamente não está interessado no comportamento de encaminhamento de um evento encaminhado direto ou bubbling e pretende processar os eventos encaminhados nos elementos onde primeiro são gerados.</xref:System.Windows.RoutedEventArgs.Source%2A> Nesta circunstância, `sender` e <xref:System.Windows.RoutedEventArgs.Source%2A>são o mesmo objeto.</xref:System.Windows.RoutedEventArgs.Source%2A>       Se pretender tirar partido das funcionalidades de eventos encaminhados inerentes e escrever os processadores em conformidade, as duas propriedades mais importantes dos dados do evento que irá trabalhar com ao escrever processadores de eventos são <xref:System.Windows.RoutedEventArgs.Source%2A>e <xref:System.Windows.RoutedEventArgs.Handled%2A>.</xref:System.Windows.RoutedEventArgs.Handled%2A> </xref:System.Windows.RoutedEventArgs.Source%2A>       Para determinados combinações de eventos de entrada e [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] classes de controlo, o elemento que desencadeia o evento não é o primeiro elemento que tem a oportunidade para processá-lo. Se o entrada evento tem uma versão de pré-visualização do evento, em seguida, a raiz da árvore de elemento tem primeira oportunidade, pode definir <xref:System.Windows.RoutedEventArgs.Handled%2A>para `true` nos dados de evento partilhado e pode influenciar a como o evento de entrada é comunicado para elementos restantes na respetiva rota de evento.</xref:System.Windows.RoutedEventArgs.Handled%2A> A pré-visualização do comportamento de processamento pode dar o aspeto que um determinado evento encaminhado não é gerado conforme esperado. Para obter mais informações, consulte [eventos de pré-visualização](~/add/includes/ajax-current-ext-md.md) e [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public delegate void RoutedEventHandler(object sender, RoutedEventArgs e);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
