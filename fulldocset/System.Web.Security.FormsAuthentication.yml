### YamlMime:ManagedReference
items:
- uid: System.Web.Security.FormsAuthentication
  id: FormsAuthentication
  children:
  - System.Web.Security.FormsAuthentication.#ctor
  - System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)
  - System.Web.Security.FormsAuthentication.CookieDomain
  - System.Web.Security.FormsAuthentication.CookieMode
  - System.Web.Security.FormsAuthentication.CookiesSupported
  - System.Web.Security.FormsAuthentication.Decrypt(System.String)
  - System.Web.Security.FormsAuthentication.DefaultUrl
  - System.Web.Security.FormsAuthentication.EnableCrossAppRedirects
  - System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)
  - System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)
  - System.Web.Security.FormsAuthentication.FormsCookieName
  - System.Web.Security.FormsAuthentication.FormsCookiePath
  - System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)
  - System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)
  - System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)
  - System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)
  - System.Web.Security.FormsAuthentication.Initialize
  - System.Web.Security.FormsAuthentication.IsEnabled
  - System.Web.Security.FormsAuthentication.LoginUrl
  - System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)
  - System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)
  - System.Web.Security.FormsAuthentication.RedirectToLoginPage
  - System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)
  - System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)
  - System.Web.Security.FormsAuthentication.RequireSSL
  - System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)
  - System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)
  - System.Web.Security.FormsAuthentication.SignOut
  - System.Web.Security.FormsAuthentication.SlidingExpiration
  - System.Web.Security.FormsAuthentication.TicketCompatibilityMode
  - System.Web.Security.FormsAuthentication.Timeout
  langs:
  - csharp
  name: FormsAuthentication
  nameWithType: FormsAuthentication
  fullName: System.Web.Security.FormsAuthentication
  type: Class
  summary: "Manages forms-authentication services for Web applications. This class cannot be inherited."
  remarks: "Forms authentication enables user and password validation for Web applications that do not require Windows authentication. With forms authentication, user information is stored in an external data source, such as a <xref:System.Web.Security.Membership> database, or in the configuration file for an application. Once a user is authenticated, forms authentication maintains an authentication ticket in a cookie or in the URL so that an authenticated user does not need to supply credentials with each request.       Forms authentication is enabled by setting the `mode` attribute of the  configuration element to `Forms`. You can require that all requests to an application contain a valid user authentication ticket by using the  configuration element to deny the request of any unknown user, as shown in the following example.      ```   <system.web>     <authentication mode=&quot;Forms&quot;>       <forms loginUrl=&quot;login.aspx&quot; />     </authentication>     <authorization>       <deny users=&quot;?&quot; />     </authorization>   </system.web>   ```       In the previous example, any request for an ASP.NET page that is part of the application requires a valid user name that is supplied by forms authentication. If no user name exists, then the request is redirected to the configured <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>.       The FormsAuthentication class provides access to methods and properties that you can use in an application that authenticates users. The <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> method redirects a browser to the configured <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> for users to log into an application. The <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> method redirects an authenticated user back to the original protected URL that was requested or to the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>. There are also methods that enable you to manage forms-authentication tickets, if needed."
  example:
  - "The following code example shows the Web.config file for an ASP.NET application that uses the ASP.NET membership provider for forms authentication and requires all users to be authenticated.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;\" />  \n  </connectionStrings>  \n  <system.web>  \n    <membership defaultProvider=\"SqlProvider\" userIsOnlineTimeWindow=\"20\">  \n      <providers>  \n        <add name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlMembershipProvider\"  \n          connectionStringName=\"SqlServices\"  \n          enablePasswordRetrieval=\"false\"  \n          enablePasswordReset=\"true\"  \n          requiresQuestionAndAnswer=\"true\"  \n          passwordFormat=\"Hashed\"  \n          applicationName=\"/\" />  \n      </providers>  \n    </membership>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following code example shows the login page for an ASP.NET application that uses forms authentication and ASP.NET membership.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlMembershipProvider#1](~/add/codesnippet/csharp/t-system.web.security.fo_5_1.aspx)]\n [!code-vb[System.Web.Security.SqlMembershipProvider#1](~/add/codesnippet/visualbasic/t-system.web.security.fo_5_1.aspx)]"
  syntax:
    content: public sealed class FormsAuthentication
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.#ctor
  id: '#ctor'
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: FormsAuthentication()
  nameWithType: FormsAuthentication.FormsAuthentication()
  fullName: System.Web.Security.FormsAuthentication.FormsAuthentication()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Security.FormsAuthentication&quot;></xref> class."
  remarks: "This constructor is not intended to be used from your code."
  syntax:
    content: public FormsAuthentication ();
    parameters: []
  overload: System.Web.Security.FormsAuthentication.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)
  id: Authenticate(System.String,System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: Authenticate(String,String)
  nameWithType: FormsAuthentication.Authenticate(String,String)
  fullName: System.Web.Security.FormsAuthentication.Authenticate(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Validates a user name and password against credentials stored in the configuration file for an application."
  remarks: "The Authenticate method verifies user credentials that are stored in the  section of the application configuration file. Alternatively, you can use ASP.NET membership to store user credentials and call the <xref:System.Web.Security.MembershipProvider.ValidateUser%2A> to verify the credentials. For more information, see [Managing Users by Using Membership](~/add/includes/ajax-current-ext-md.md).       For improved security, you can encrypt passwords stored in the configuration file for an application by using the <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> method."
  example:
  - "The following code example shows user credentials stored in the Web.config file for an application. The password values have been hashed using the <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> method.  \n  \n `<authentication mode=\"Forms\">`  \n  \n `<forms loginUrl=\"login.aspx\">`  \n  \n `<credentials passwordFormat=\"SHA1\">`  \n  \n `<user name=\"user1\"   password=\"27CE4CA7FBF00685AF2F617E3F5BBCAFF7B7403C\" />`  \n  \n `<user name=\"user2\"   password=\"D108F80936F78DFDD333141EBC985B0233A30C7A\" />`  \n  \n `<user name=\"user3\" password=\"7BDB09781A3F23885CD43177C0508B375CB1B7E9\"/>`  \n  \n `</credentials>`  \n  \n `</forms>`  \n  \n `</authentication>`  \n  \n The following code example shows a login page that uses the Authenticate method to validate user credentials.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.Security.FormsAuthentication#1](~/add/codesnippet/visualbasic/5b51c766-1819-4817-a951-_1.aspx)]\n [!code-cs[System.Web.Security.FormsAuthentication#1](~/add/codesnippet/csharp/5b51c766-1819-4817-a951-_1.aspx)]"
  syntax:
    content: public static bool Authenticate (string name, string password);
    parameters:
    - id: name
      type: System.String
      description: "The user name."
    - id: password
      type: System.String
      description: "The password for the user."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the user name and password are valid; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.FormsAuthentication.Authenticate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.CookieDomain
  id: CookieDomain
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: CookieDomain
  nameWithType: FormsAuthentication.CookieDomain
  fullName: System.Web.Security.FormsAuthentication.CookieDomain
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets the value of the domain of the forms-authentication cookie."
  remarks: "The CookieDomain property value is set in the configuration file for an ASP.NET application by using the `domain` attribute of the  configuration element. The CookieDomain property value determines the <xref:System.Web.HttpCookie.Domain%2A> that the cookie will be used for."
  example:
  - "The following code example sets the `domain` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseCookies\"  \n    domain=\"contoso.com\" />  \n</authentication>  \n```"
  syntax:
    content: public static string CookieDomain { get; }
    return:
      type: System.String
      description: "The <xref:System.Web.HttpCookie.Domain*> of the forms-authentication cookie. The default is an empty string (&quot;&quot;)."
  overload: System.Web.Security.FormsAuthentication.CookieDomain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.CookieMode
  id: CookieMode
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: CookieMode
  nameWithType: FormsAuthentication.CookieMode
  fullName: System.Web.Security.FormsAuthentication.CookieMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a value that indicates whether the application is configured for cookieless forms authentication."
  remarks: "The CookieMode property reflects the value for the `cookieless` attribute of the  configuration element. The CookieMode property determines whether the <xref:System.Web.Security.FormsAuthenticationTicket> value will be stored in a session cookie in the browser or stored in the <xref:System.Web.HttpRequest.QueryString%2A> property.      > [!NOTE] >  When the <xref:System.Web.Security.FormsAuthenticationTicket> value is stored in the URI, the length of the generated URI may be longer than the maximum length allowed. This is most likely to occur when the <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> property is set to the application name and the application name is long (40 or more characters), when user names in the application are long, or when long <xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A> strings are stored in the <xref:System.Web.Security.FormsAuthenticationTicket> value. If the generated URI is too long, the Web server will return a `400 - Bad Request` error."
  example:
  - "The following code example sets the `cookieless` attribute to `AutoDetect` in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"AutoDetect\" />  \n</authentication>  \n```"
  syntax:
    content: public static System.Web.HttpCookieMode CookieMode { get; }
    return:
      type: System.Web.HttpCookieMode
      description: "One of the <xref href=&quot;System.Web.HttpCookieMode&quot;></xref> values that indicates whether the application is configured for cookieless forms authentication. The default is <xref href=&quot;System.Web.HttpCookieMode&quot;></xref>."
  overload: System.Web.Security.FormsAuthentication.CookieMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.CookiesSupported
  id: CookiesSupported
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: CookiesSupported
  nameWithType: FormsAuthentication.CookiesSupported
  fullName: System.Web.Security.FormsAuthentication.CookiesSupported
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a value that indicates whether the application is configured to support cookieless forms authentication."
  remarks: "The CookiesSupported property returns a value based on the <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> value and the capabilities of the browser.      -   If the <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> property is set to <xref:System.Web.HttpCookieMode>, the CookiesSupported property will return `true`.      -   If the <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> property is set to <xref:System.Web.HttpCookieMode>, the CookiesSupported property will return `false`.      -   If the <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> property is set to <xref:System.Web.HttpCookieMode>, the CookiesSupported property will return `true` if the browser supports cookies and cookies are enabled; otherwise, the CookiesSupported property will return `false`.      -   If the <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> property is set to <xref:System.Web.HttpCookieMode>, the CookiesSupported property will return `true` if the <xref:System.Web.HttpRequest.Browser%2A> for the current <xref:System.Web.HttpContext.Request%2A> supports both cookies and redirecting with cookies; otherwise, the CookiesSupported property will return `false`."
  example:
  - "The following code example sets the `cookieless` attribute to <xref:System.Web.HttpCookieMode> in the Web.config file. This configuration will result in the CookiesSupported property returning `false`.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseUri\" />  \n</authentication>  \n```"
  syntax:
    content: public static bool CookiesSupported { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the application is configured to support cookieless forms authentication; otherwise, <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.FormsAuthentication.CookiesSupported*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.Decrypt(System.String)
  id: Decrypt(System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: Decrypt(String)
  nameWithType: FormsAuthentication.Decrypt(String)
  fullName: System.Web.Security.FormsAuthentication.Decrypt(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Creates a <xref href=&quot;System.Web.Security.FormsAuthenticationTicket&quot;></xref> object based on the encrypted forms-authentication ticket passed to the method."
  syntax:
    content: public static System.Web.Security.FormsAuthenticationTicket Decrypt (string encryptedTicket);
    parameters:
    - id: encryptedTicket
      type: System.String
      description: "The encrypted authentication ticket."
    return:
      type: System.Web.Security.FormsAuthenticationTicket
      description: "A <xref href=&quot;System.Web.Security.FormsAuthenticationTicket&quot;></xref> object. If the <code>encryptedTicket</code> parameter is not a valid ticket, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> is returned."
  overload: System.Web.Security.FormsAuthentication.Decrypt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>encryptedTicket</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>encryptedTicket</code> is an empty string (\"\").  \n  \n \\- or -  \n  \n The length of <code>encryptedTicket</code> is greater than 4096 characters.  \n  \n \\- or -  \n  \n <code>encryptedTicket</code> is of an invalid format."
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.DefaultUrl
  id: DefaultUrl
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: DefaultUrl
  nameWithType: FormsAuthentication.DefaultUrl
  fullName: System.Web.Security.FormsAuthentication.DefaultUrl
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets the URL that the <xref href=&quot;System.Web.Security.FormsAuthentication&quot;></xref> class will redirect to if no redirect URL is specified."
  remarks: "The DefaultUrl property value is set in the configuration file for an ASP.NET application by using the `defaultUrl` attribute of the  configuration element. The DefaultUrl property is used by the <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> method if no return URL is included in the request. Similarly, the <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> method will return the DefaultUrl if no return URL is included in the request."
  example:
  - "The following code example sets the `defaultUrl` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    defaultUrl=\"index.aspx\" />  \n</authentication>  \n```"
  syntax:
    content: public static string DefaultUrl { get; }
    return:
      type: System.String
      description: "The URL that the <xref href=&quot;System.Web.Security.FormsAuthentication&quot;></xref> class will redirect to if no redirect URL is specified. The default is &quot;default.aspx.&quot;"
  overload: System.Web.Security.FormsAuthentication.DefaultUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects
  id: EnableCrossAppRedirects
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: EnableCrossAppRedirects
  nameWithType: FormsAuthentication.EnableCrossAppRedirects
  fullName: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a value indicating whether authenticated users can be redirected to URLs in other Web applications."
  remarks: "The EnableCrossAppRedirects property value is set using the `enableCrossAppRedirects` attribute of the  configuration element.       The EnableCrossAppRedirects property is checked within the <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> method when the redirect URL does not point to a page in the current application. If EnableCrossAppRedirects is `true`, then the redirect is performed; if EnableCrossAppRedirects is `false`, the browser is redirected to the page defined in the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> property.      > [!NOTE] >  When you redirect pages across applications, you must make sure that specific attributes in the  configuration element are duplicated across the authenticated applications. For more information and an example, see [Forms Authentication Across Applications](~/add/includes/ajax-current-ext-md.md).      > [!IMPORTANT] >  When cross-application redirects are allowed, your site is vulnerable to an exploit that directs users to a malicious Web site but uses the login page for your site. Always verify that the redirect URL that is returned by the <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> method is a URL that you expect so that you can make sure that you allow redirects only to approved Web sites. You must also verify that the redirect URL uses the appropriate protocol (HTTP or HTTPS). To perform these verifications, you can add a postback event handler to your login page, or you can add a handler for the <xref:System.Web.UI.WebControls.Login.LoggedIn> event of the <xref:System.Web.UI.WebControls.Login> control."
  example:
  - "The following code example sets the `enableCrossAppRedirects` attribute to `true` in the Web.config file for an ASP.NET application.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseUri\"  \n    requireSSL=\"true\"   \n    enableCrossAppRedirects=\"true\" />  \n</authentication>  \n```"
  syntax:
    content: public static bool EnableCrossAppRedirects { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if authenticated users can be redirected to URLs in other Web applications; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)
  id: EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: EnableFormsAuthentication(NameValueCollection)
  nameWithType: FormsAuthentication.EnableFormsAuthentication(NameValueCollection)
  fullName: System.Web.Security.FormsAuthentication.EnableFormsAuthentication(NameValueCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Enables forms authentication."
  remarks: "If the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> property is `null`, that property is set to the default URL value from the `configurationData` parameter. If the <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> property is `null`, that property is set to the login URL value from the `configurationData` parameter."
  syntax:
    content: public static void EnableFormsAuthentication (System.Collections.Specialized.NameValueCollection configurationData);
    parameters:
    - id: configurationData
      type: System.Collections.Specialized.NameValueCollection
      description: "A name-value collection that contains values for &quot;defaultUrl&quot; and/or &quot;loginUrl&quot;. The parameter can be null if there are no values for the default URL or the login URL."
  overload: System.Web.Security.FormsAuthentication.EnableFormsAuthentication*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The application is not in the pre-start initialization phase."
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)
  id: Encrypt(System.Web.Security.FormsAuthenticationTicket)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: Encrypt(FormsAuthenticationTicket)
  nameWithType: FormsAuthentication.Encrypt(FormsAuthenticationTicket)
  fullName: System.Web.Security.FormsAuthentication.Encrypt(FormsAuthenticationTicket)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Creates a string containing an encrypted forms-authentication ticket suitable for use in an HTTP cookie."
  remarks: ''
  example:
  - "The following code example stores the result of the Encrypt method in a cookie by using the <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> property and redirects the user to the URL returned from the <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> method.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[FormsAuthenticationTicketClass#1](~/add/codesnippet/csharp/d209d6db-e50b-4c64-961a-_1.aspx)]\n [!code-vb[FormsAuthenticationTicketClass#1](~/add/codesnippet/visualbasic/d209d6db-e50b-4c64-961a-_1.aspx)]"
  syntax:
    content: public static string Encrypt (System.Web.Security.FormsAuthenticationTicket ticket);
    parameters:
    - id: ticket
      type: System.Web.Security.FormsAuthenticationTicket
      description: "The <xref href=&quot;System.Web.Security.FormsAuthenticationTicket&quot;></xref> object with which to create the encrypted forms-authentication ticket."
    return:
      type: System.String
      description: "A string containing an encrypted forms-authentication ticket."
  overload: System.Web.Security.FormsAuthentication.Encrypt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ticket</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.FormsCookieName
  id: FormsCookieName
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: FormsCookieName
  nameWithType: FormsAuthentication.FormsCookieName
  fullName: System.Web.Security.FormsAuthentication.FormsCookieName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets the name of the cookie used to store the forms-authentication ticket."
  remarks: "The FormsCookieName property value is set in the configuration file for an ASP.NET application by using the `name` attribute of the  configuration element. The FormsCookieName is used to reference the cookie that stores the <xref:System.Web.Security.FormsAuthenticationTicket> information."
  example:
  - "The following code example sets the FormsCookieName property value by using the `name` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseCookies\"  \n    name=\".ASPXFORMSAUTH\" />  \n</authentication>  \n```"
  syntax:
    content: public static string FormsCookieName { get; }
    return:
      type: System.String
      description: "The name of the cookie used to store the forms-authentication ticket. The default is &quot;.ASPXAUTH&quot;."
  overload: System.Web.Security.FormsAuthentication.FormsCookieName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.FormsCookiePath
  id: FormsCookiePath
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: FormsCookiePath
  nameWithType: FormsAuthentication.FormsCookiePath
  fullName: System.Web.Security.FormsAuthentication.FormsCookiePath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets the path for the forms-authentication cookie."
  remarks: "The FormsCookiePath property value is set in the configuration file for an ASP.NET application using the `path` attribute of the  configuration element. The FormsCookiePath specifies the <xref:System.Web.HttpCookie.Path%2A> for the cookie that stores the <xref:System.Web.Security.FormsAuthenticationTicket> information."
  example:
  - "The following code example sets the FormsCookiePath property value by using the `path` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseCookies\"  \n    path=\"/MyApplication\" />  \n</authentication>  \n```"
  syntax:
    content: public static string FormsCookiePath { get; }
    return:
      type: System.String
      description: "The path of the cookie where the forms-authentication ticket information is stored. The default is &quot;/&quot;."
  overload: System.Web.Security.FormsAuthentication.FormsCookiePath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)
  id: GetAuthCookie(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: GetAuthCookie(String,Boolean)
  nameWithType: FormsAuthentication.GetAuthCookie(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.GetAuthCookie(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Creates an authentication cookie for a given user name. This does not set the cookie as part of the outgoing response, so that an application can have more control over how the cookie is issued."
  remarks: "The path of the cookie is determined by the <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> property."
  syntax:
    content: public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie);
    parameters:
    - id: userName
      type: System.String
      description: "The name of the authenticated user."
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to create a durable cookie (one that is saved across browser sessions); otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Web.HttpCookie
      description: "An <xref href=&quot;System.Web.HttpCookie&quot;></xref> that contains encrypted forms-authentication ticket information. The default value for the <xref:System.Web.Security.FormsAuthentication.FormsCookiePath*> property is used."
  overload: System.Web.Security.FormsAuthentication.GetAuthCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)
  id: GetAuthCookie(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: GetAuthCookie(String,Boolean,String)
  nameWithType: FormsAuthentication.GetAuthCookie(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.GetAuthCookie(String,Boolean,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Creates an authentication cookie for a given user name. This does not set the cookie as part of the outgoing response."
  syntax:
    content: public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);
    parameters:
    - id: userName
      type: System.String
      description: "The name of the authenticated user."
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to create a durable cookie (one that is saved across browser sessions); otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: strCookiePath
      type: System.String
      description: "The <xref:System.Web.HttpCookie.Path*> of the authentication cookie."
    return:
      type: System.Web.HttpCookie
      description: "An <xref href=&quot;System.Web.HttpCookie&quot;></xref> that contains encrypted forms-authentication ticket information."
  overload: System.Web.Security.FormsAuthentication.GetAuthCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)
  id: GetRedirectUrl(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: GetRedirectUrl(String,Boolean)
  nameWithType: FormsAuthentication.GetRedirectUrl(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.GetRedirectUrl(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Returns the redirect URL for the original request that caused the redirect to the login page."
  remarks: "You can use this method when you want to perform the redirect in your application code instead of using the <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> method.       The GetRedirectUrl method returns the URL specified in the query string using the `ReturnURL` variable name. For example, in the URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`, the GetRedirectUrl method returns the return URL `caller.aspx`. If the `ReturnURL` variable does not exist, the GetRedirectUrl method returns the URL in the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> property.       ASP.NET automatically adds the return URL when the browser is redirected to the login page.       By default, the `ReturnUrl` variable must refer to a page within the current application. If `ReturnUrl` refers to a page in a different application or on a different server, the GetRedirectUrl methods returns the URL in the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> property. If you want to allow the return URL to refer to a page outside the current application, you must set the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property to `true` using the `enableCrossAppRedirects` attribute of the  configuration element.      > [!IMPORTANT] >  Setting the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property to `true` to allow cross-application redirects is a potential security threat. For more information, see the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property."
  example:
  - "The following code example redirects authenticated users to the URL returned from the GetRedirectUrl method.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[FormsAuthenticationTicketClass#1](~/add/codesnippet/csharp/41a9cd2e-33ed-4156-8c31-_1.aspx)]\n [!code-vb[FormsAuthenticationTicketClass#1](~/add/codesnippet/visualbasic/41a9cd2e-33ed-4156-8c31-_1.aspx)]"
  syntax:
    content: public static string GetRedirectUrl (string userName, bool createPersistentCookie);
    parameters:
    - id: userName
      type: System.String
      description: "The name of the authenticated user."
    - id: createPersistentCookie
      type: System.Boolean
      description: "This parameter is ignored."
    return:
      type: System.String
      description: "A string that contains the redirect URL."
  overload: System.Web.Security.FormsAuthentication.GetRedirectUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)
  id: HashPasswordForStoringInConfigFile(System.String,System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: HashPasswordForStoringInConfigFile(String,String)
  nameWithType: FormsAuthentication.HashPasswordForStoringInConfigFile(String,String)
  fullName: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Produces a hash password suitable for storing in a configuration file based on the specified password and hash algorithm."
  remarks: "The HashPasswordForStoringInConfigFile method creates a hashed password value that can be used when storing forms-authentication credentials in the configuration file for an application.       Authentication credentials stored in the configuration file for an application are used by the <xref:System.Web.Security.FormsAuthentication.Authenticate%2A> method to verify passwords for users of an application. Alternatively, you can use ASP.NET membership to store user credentials. For more information, see [Managing Users by Using Membership](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example takes a user name, password, and hash type and displays the  section of the configuration that includes the user definition and hashed password.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[FormsAuthenticationHashPassword#1](~/add/codesnippet/visualbasic/60863efe-d1c9-47ee-90e6-_1.aspx)]\n [!code-cs[FormsAuthenticationHashPassword#1](~/add/codesnippet/csharp/60863efe-d1c9-47ee-90e6-_1.aspx)]"
  syntax:
    content: public static string HashPasswordForStoringInConfigFile (string password, string passwordFormat);
    parameters:
    - id: password
      type: System.String
      description: "The password to hash."
    - id: passwordFormat
      type: System.String
      description: "The hash algorithm to use. `passwordFormat` is a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref> that represents one of the <xref href=&quot;System.Web.Configuration.FormsAuthPasswordFormat&quot;></xref> enumeration values."
    return:
      type: System.String
      description: "The hashed password."
  overload: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>password</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>       -or-       <code>passwordFormat</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>passwordFormat</code> is not a valid <xref href=&quot;System.Web.Configuration.FormsAuthPasswordFormat&quot;></xref> value."
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.Initialize
  id: Initialize
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: Initialize()
  nameWithType: FormsAuthentication.Initialize()
  fullName: System.Web.Security.FormsAuthentication.Initialize()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Initializes the <xref href=&quot;System.Web.Security.FormsAuthentication&quot;></xref> object based on the configuration settings for the application."
  remarks: "The Initialize method is called when the <xref:System.Web.Security.FormsAuthenticationModule> creates an instance of the <xref:System.Web.Security.FormsAuthentication> class. This method is not intended to be called from your code."
  syntax:
    content: public static void Initialize ();
    parameters: []
  overload: System.Web.Security.FormsAuthentication.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.IsEnabled
  id: IsEnabled
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: IsEnabled
  nameWithType: FormsAuthentication.IsEnabled
  fullName: System.Web.Security.FormsAuthentication.IsEnabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a value that indicates whether forms authentication is enabled."
  syntax:
    content: public static bool IsEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if forms authentication is enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.FormsAuthentication.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.LoginUrl
  id: LoginUrl
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: LoginUrl
  nameWithType: FormsAuthentication.LoginUrl
  fullName: System.Web.Security.FormsAuthentication.LoginUrl
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets the URL for the login page that the <xref href=&quot;System.Web.Security.FormsAuthentication&quot;></xref> class will redirect to."
  remarks: "The LoginUrl property value is set in the configuration file for an ASP.NET application by using the `loginUrl` attribute of the  configuration element. The LoginUrl is used by the <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> method."
  example:
  - "The following code example sets the `loginUrl` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    defaultUrl=\"index.aspx\" />  \n</authentication>  \n```"
  syntax:
    content: public static string LoginUrl { get; }
    return:
      type: System.String
      description: "The URL for the login page that the <xref href=&quot;System.Web.Security.FormsAuthentication&quot;></xref> class will redirect to. The default is &quot;login.aspx.&quot;"
  overload: System.Web.Security.FormsAuthentication.LoginUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)
  id: RedirectFromLoginPage(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RedirectFromLoginPage(String,Boolean)
  nameWithType: FormsAuthentication.RedirectFromLoginPage(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Redirects an authenticated user back to the originally requested URL or the default URL."
  remarks: "The RedirectFromLoginPage method redirects to the URL specified in the query string using the `ReturnURL` variable name. For example, in the URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`, the RedirectFromLoginPage method redirects tothe return URL `caller.aspx`. If the `ReturnURL` variable does not exist, the RedirectFromLoginPage method redirects to the URL in the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> property.       ASP.NET automatically adds the return URL when the browser is redirected to the login page.       By default, the `ReturnUrl` variable must refer to a page within the current application. If `ReturnUrl` refers to a page in a different application or on a different server, the RedirectFromLoginPage methods redirects to the URL in the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> property. If you want to allow redirects to a page outside the current application, you must set the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property to `true` using the `enableCrossAppRedirects` attribute of the  configuration element.      > [!IMPORTANT] >  Setting the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property to `true` to allow cross-application redirects is a potential security threat. For more information, see the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property.       If the <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> property is `true`, and either the `ReturnUrl` variable is within the current application or the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property is `true`, then the RedirectFromLoginPage method issues an authentication ticket and places it in the default cookie using the <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> method.       If <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> is `false` and the redirect path is to a URL in the current application, the ticket is issued as part of the redirect URL. If <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> is `false`, <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> is `true`, and the redirect URL does not refer to a page within the current application, the RedirectFromLoginPage method issues an authentication ticket and places it in the <xref:System.Web.HttpRequest.QueryString%2A> property."
  example:
  - "The following code example redirects validated users to either the originally requested URL or the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>. The code example uses ASP.NET membership to validate users. For more information about ASP.NET membership, see [Managing Users by Using Membership](~/add/includes/ajax-current-ext-md.md).  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlMembershipProvider#1](~/add/codesnippet/csharp/1b30741b-7340-4c63-b342-_1.aspx)]\n [!code-vb[System.Web.Security.SqlMembershipProvider#1](~/add/codesnippet/visualbasic/1b30741b-7340-4c63-b342-_1.aspx)]"
  syntax:
    content: public static void RedirectFromLoginPage (string userName, bool createPersistentCookie);
    parameters:
    - id: userName
      type: System.String
      description: "The authenticated user name."
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to create a durable cookie (one that is saved across browser sessions); otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.FormsAuthentication.RedirectFromLoginPage*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: 'The return URL specified in the query string contains a protocol other than HTTP: or HTTPS:.'
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)
  id: RedirectFromLoginPage(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RedirectFromLoginPage(String,Boolean,String)
  nameWithType: FormsAuthentication.RedirectFromLoginPage(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(String,Boolean,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Redirects an authenticated user back to the originally requested URL or the default URL using the specified cookie path for the forms-authentication cookie."
  remarks: "The RedirectFromLoginPage method redirects to the return URL specified in the query string using the `ReturnURL` variable name. For example, in the URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`, the RedirectFromLoginPage method redirects tothe return URL `caller.aspx`. If the `ReturnURL` variable does not exist, the RedirectFromLoginPage method redirects to the URL in the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> property.       ASP.NET automatically adds the return URL when the browser is redirected to the login page.       By default, the `ReturnUrl` variable must refer to a page within the current application. If `ReturnUrl` refers to a page in a different application or on a different server, the RedirectFromLoginPage method redirects to the URL in the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> property. If you want to allow redirects to a page outside the current application, you must set the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property to `true` using the `enableCrossAppRedirects` attribute of the  configuration element.      > [!IMPORTANT] >  Setting the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property to `true` to allow cross-application redirects is a potential security threat. For more information, see the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property.       If the <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> property is `true`, and either the `ReturnUrl` variable is within the current application or the <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> property is `true`, then the RedirectFromLoginPage method issues an authentication ticket and places it in the cookie specified by the `strCookiePath` parameter using the <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> method.       If <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> is `false` and the redirect path is to a URL in the current application, the ticket is issued as part of the redirect URL. If <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> is `false`, <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> is `true`, and the redirect URL does not refer to a page within the current application, the RedirectFromLoginPage method issues an authentication ticket and places it in the <xref:System.Web.HttpRequest.QueryString%2A> property."
  syntax:
    content: public static void RedirectFromLoginPage (string userName, bool createPersistentCookie, string strCookiePath);
    parameters:
    - id: userName
      type: System.String
      description: "The authenticated user name."
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to create a durable cookie (one that is saved across browser sessions); otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: strCookiePath
      type: System.String
      description: "The cookie path for the forms-authentication ticket."
  overload: System.Web.Security.FormsAuthentication.RedirectFromLoginPage*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: 'The return URL specified in the query string contains a protocol other than HTTP: or HTTPS:.'
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RedirectToLoginPage
  id: RedirectToLoginPage
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RedirectToLoginPage()
  nameWithType: FormsAuthentication.RedirectToLoginPage()
  fullName: System.Web.Security.FormsAuthentication.RedirectToLoginPage()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Redirects the browser to the login URL."
  remarks: "The RedirectToLoginPage method redirects the browser to the <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>.       The RedirectToLoginPage method does not clear the forms-authentication cookie. You can use the RedirectToLoginPage method in conjunction with the <xref:System.Web.Security.FormsAuthentication.SignOut%2A> method to log one user out and allow a different user to log in."
  example:
  - "The following code example clears the forms-authentication cookie using the <xref:System.Web.Security.FormsAuthentication.SignOut%2A> method and redirects the user to the login page using the RedirectToLoginPage method.  \n  \n [!code-cs[System.Web.Security.FormsAuthentication#2](~/add/codesnippet/csharp/m-system.web.security.fo_0_1.aspx)]\n [!code-vb[System.Web.Security.FormsAuthentication#2](~/add/codesnippet/visualbasic/m-system.web.security.fo_0_1.aspx)]"
  syntax:
    content: public static void RedirectToLoginPage ();
    parameters: []
  overload: System.Web.Security.FormsAuthentication.RedirectToLoginPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)
  id: RedirectToLoginPage(System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RedirectToLoginPage(String)
  nameWithType: FormsAuthentication.RedirectToLoginPage(String)
  fullName: System.Web.Security.FormsAuthentication.RedirectToLoginPage(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Redirects the browser to the login URL with the specified query string."
  remarks: "The RedirectToLoginPage method redirects the browser to the <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> and includes the `extraQueryString` value as the <xref:System.Management.ManagementQuery.QueryString%2A> for the redirected URL.       The RedirectToLoginPage method does not clear the forms-authentication cookie. You can use the RedirectToLoginPage method in conjunction with the <xref:System.Web.Security.FormsAuthentication.SignOut%2A> method to log one user out and allow a different user to log in."
  example:
  - "The following code example clears the forms-authentication cookie using the <xref:System.Web.Security.FormsAuthentication.SignOut%2A> method and redirects the user to the login page using the RedirectToLoginPage method.  \n  \n [!code-cs[System.Web.Security.FormsAuthentication#3](~/add/codesnippet/csharp/m-system.web.security.fo_1_1.aspx)]\n [!code-vb[System.Web.Security.FormsAuthentication#3](~/add/codesnippet/visualbasic/m-system.web.security.fo_1_1.aspx)]"
  syntax:
    content: public static void RedirectToLoginPage (string extraQueryString);
    parameters:
    - id: extraQueryString
      type: System.String
      description: "The query string to include with the redirect URL."
  overload: System.Web.Security.FormsAuthentication.RedirectToLoginPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)
  id: RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RenewTicketIfOld(FormsAuthenticationTicket)
  nameWithType: FormsAuthentication.RenewTicketIfOld(FormsAuthenticationTicket)
  fullName: System.Web.Security.FormsAuthentication.RenewTicketIfOld(FormsAuthenticationTicket)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Conditionally updates the issue date and time and expiration date and time for a <xref href=&quot;System.Web.Security.FormsAuthenticationTicket&quot;></xref>."
  remarks: "The RenewTicketIfOld method updates the expiration date and time of the supplied <xref:System.Web.Security.FormsAuthenticationTicket> if the current date and time minus the <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> value is greater than the <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> value minus the current date and time.       The ticket is updated with the <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> property set to the current date and time and the <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> property set to the current date and time plus the original <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> value minus the original <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> value."
  syntax:
    content: public static System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld (System.Web.Security.FormsAuthenticationTicket tOld);
    parameters:
    - id: tOld
      type: System.Web.Security.FormsAuthenticationTicket
      description: "The forms-authentication ticket to update."
    return:
      type: System.Web.Security.FormsAuthenticationTicket
      description: "The updated <xref href=&quot;System.Web.Security.FormsAuthenticationTicket&quot;></xref>."
  overload: System.Web.Security.FormsAuthentication.RenewTicketIfOld*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RequireSSL
  id: RequireSSL
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RequireSSL
  nameWithType: FormsAuthentication.RequireSSL
  fullName: System.Web.Security.FormsAuthentication.RequireSSL
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a value indicating whether the forms-authentication cookie requires SSL in order to be returned to the server."
  remarks: "The RequireSSL property value is set in the configuration file for an ASP.NET application by using the `requireSSL` attribute of the  configuration element. You can specify in the Web.config file for your ASP.NET application whether SSL (Secure Sockets Layer) is required to return the forms-authentication cookie to the server by setting the `requireSSL` attribute . For more information, see <xref:System.Web.HttpCookie.Secure%2A>.       It is recommended that if you configure `requireSSL` as `false`, you also configure `slidingExpiration` as `false`, to reduce the amount of time for which a ticket is valid."
  example:
  - "The following code example sets the `requireSSL` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseCookies\"  \n    requireSSL=\"true\"  \n    path=\"/MyApplication\" />  \n</authentication>  \n```"
  syntax:
    content: public static bool RequireSSL { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if SSL is required to return the forms-authentication cookie to the server; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.FormsAuthentication.RequireSSL*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)
  id: SetAuthCookie(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: SetAuthCookie(String,Boolean)
  nameWithType: FormsAuthentication.SetAuthCookie(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.SetAuthCookie(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Creates an authentication ticket for the supplied user name and adds it to the cookies collection of the response, or to the URL if you are using cookieless authentication."
  remarks: "The SetAuthCookie method adds a forms-authentication ticket to either the cookies collection, or to the URL if <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> is `false`. The forms-authentication ticket supplies forms-authentication information to the next request made by the browser. With forms authentication, you can use the SetAuthCookie method when you want to authenticate a user but still retain control of the navigation with redirects."
  syntax:
    content: public static void SetAuthCookie (string userName, bool createPersistentCookie);
    parameters:
    - id: userName
      type: System.String
      description: "The name of an authenticated user. This does not have to map to a Windows account."
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to create a persistent cookie (one that is saved across browser sessions); otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.FormsAuthentication.SetAuthCookie*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref:System.Web.Security.FormsAuthentication.RequireSSL*> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> and <xref:System.Web.HttpRequest.IsSecureConnection*> is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)
  id: SetAuthCookie(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: SetAuthCookie(String,Boolean,String)
  nameWithType: FormsAuthentication.SetAuthCookie(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.SetAuthCookie(String,Boolean,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Creates an authentication ticket for the supplied user name and adds it to the cookies collection of the response, using the supplied cookie path, or using the URL if you are using cookieless authentication."
  remarks: "The SetAuthCookie method adds a forms-authentication ticket to either the cookies collection or the URL if <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> is `false`. The forms-authentication ticket supplies forms-authentication information to the next request made by the browser. With forms authentication, you can use the SetAuthCookie method when you want to authenticate a user but still retain control of the navigation with redirects."
  syntax:
    content: public static void SetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);
    parameters:
    - id: userName
      type: System.String
      description: "The name of an authenticated user."
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to create a durable cookie (one that is saved across browser sessions); otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: strCookiePath
      type: System.String
      description: "The cookie path for the forms-authentication ticket."
  overload: System.Web.Security.FormsAuthentication.SetAuthCookie*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref:System.Web.Security.FormsAuthentication.RequireSSL*> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> and <xref:System.Web.HttpRequest.IsSecureConnection*> is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.SignOut
  id: SignOut
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: SignOut()
  nameWithType: FormsAuthentication.SignOut()
  fullName: System.Web.Security.FormsAuthentication.SignOut()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Removes the forms-authentication ticket from the browser."
  remarks: "The SignOut method removes the forms-authentication ticket information from the cookie or the URL if <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> is `false`. You can use the SignOut method in conjunction with the <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> method to log one user out and allow a different user to log in.       If you run exclusively in cookieless mode, or if you support both authenticated and anonymous users, you should explicitly control the redirect to the login page if you require special business logic to execute as a result of removing the anonymous identifier.       When the SignOut method is called, a redirect to the application&quot;s login page is made by calling the <xref:System.Web.HttpResponse.Redirect%2A> method with the `endResponse` parameter set to `false`. The redirect does not take place until the current page has finished executing, so additional code can be run. If the code does not contain an explicit redirect to another page, the user is redirected to the login page configured in the application&quot;s configuration file.       Calling the SignOut method only removes the forms authentication cookie. The Web server does not store valid and expired authentication tickets for later comparison. This makes your site vulnerable to a replay attack if a malicious user obtains a valid forms authentication cookie. To improve security when using a forms authentication cookie, you should do the following:      -   Use absolute expiration for forms authentication cookies by setting the <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A> property to `false`. This limits the window in which a hijacked cookie can be replayed.      -   Only issue and accept authentication cookies over Secure Sockets Layer (SSL), by setting the <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> property to `true` and by running the entire Web site under SSL. Setting the <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> property to `true` ensures that ASP.NET will never send an authentication cookie to the browser over a non-SSL connection; however, the client might not honor the secure setting on the cookie. This means the client might send the forms authentication cookie over a non-SSL connection, thus leaving it vulnerable to hijack. You can prevent a client from sending the forms authentication cookie in the clear by running the entire Web site under SSL.      -   Use persistent storage on the server to record when a user logs out of the Web site, and then use an application event such as <xref:System.Web.HttpApplication.PostAuthenticateRequest> event to determine whether the current user was authenticated with forms authentication. If the user was authenticated with forms authentication, and if the information in persistent storage indicates the user is logged out, immediately clear the authentication cookie and redirect the browser back to the login page. After a successful login, update storage to reflect that the user is logged in. When you use this method, your application must track the logged-in status of the user, and must force idle users to log out."
  example:
  - "The following code example clears the forms-authentication cookie using the SignOut method and redirects the user to the login page using the <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> method.  \n  \n [!code-cs[System.Web.Security.FormsAuthentication#2](~/add/codesnippet/csharp/m-system.web.security.fo_2_1.aspx)]\n [!code-vb[System.Web.Security.FormsAuthentication#2](~/add/codesnippet/visualbasic/m-system.web.security.fo_2_1.aspx)]"
  syntax:
    content: public static void SignOut ();
    parameters: []
  overload: System.Web.Security.FormsAuthentication.SignOut*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.SlidingExpiration
  id: SlidingExpiration
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: SlidingExpiration
  nameWithType: FormsAuthentication.SlidingExpiration
  fullName: System.Web.Security.FormsAuthentication.SlidingExpiration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a value indicating whether sliding expiration is enabled."
  remarks: "The SlidingExpiration property value is set using the `slidingExpiration` attribute of the  configuration element.       Sliding expiration resets the expiration time for a valid authentication cookie if a request is made and more than half of the timeout interval has elapsed. If the cookie expires, the user must re-authenticate. Setting the SlidingExpiration property to `false` can improve the security of an application by limiting the time for which an authentication cookie is valid, based on the configured `timeout` value.       We recommend that if you configure `requireSSL` as `false`, you also configure `slidingExpiration` as `false`, to reduce the amount of time for which a ticket is valid."
  example:
  - "The following code example sets the `slidingExpiration` attribute to `false` in the Web.config file for an ASP.NET application.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    name=\".ASPXFORMSAUTH\"  \n    cookieless=\"UseCookies\"  \n    requireSSL=\"true\"   \n    slidingExpiration=\"false\" />  \n</authentication>  \n```"
  syntax:
    content: public static bool SlidingExpiration { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if sliding expiration is enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.FormsAuthentication.SlidingExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.TicketCompatibilityMode
  id: TicketCompatibilityMode
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: TicketCompatibilityMode
  nameWithType: FormsAuthentication.TicketCompatibilityMode
  fullName: System.Web.Security.FormsAuthentication.TicketCompatibilityMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets a value that indicates whether to use Coordinated Universal Time (UTC) or local time for the ticket expiration date."
  syntax:
    content: public static System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode { get; }
    return:
      type: System.Web.Configuration.TicketCompatibilityMode
      description: "A value that indicates whether to use Coordinated Universal Time (UTC) or local time for the ticket expiration date."
  overload: System.Web.Security.FormsAuthentication.TicketCompatibilityMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.Timeout
  id: Timeout
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: Timeout
  nameWithType: FormsAuthentication.Timeout
  fullName: System.Web.Security.FormsAuthentication.Timeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Gets the amount of time before an authentication ticket expires."
  syntax:
    content: public static TimeSpan Timeout { get; }
    return:
      type: System.TimeSpan
      description: "The amount of time before an authentication ticket expires."
  overload: System.Web.Security.FormsAuthentication.Timeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.Security.FormsAuthentication.#ctor
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsAuthentication()
  nameWithType: FormsAuthentication.FormsAuthentication()
  fullName: System.Web.Security.FormsAuthentication.FormsAuthentication()
- uid: System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Authenticate(String,String)
  nameWithType: FormsAuthentication.Authenticate(String,String)
  fullName: System.Web.Security.FormsAuthentication.Authenticate(String,String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.FormsAuthentication.CookieDomain
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookieDomain
  nameWithType: FormsAuthentication.CookieDomain
  fullName: System.Web.Security.FormsAuthentication.CookieDomain
- uid: System.Web.Security.FormsAuthentication.CookieMode
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookieMode
  nameWithType: FormsAuthentication.CookieMode
  fullName: System.Web.Security.FormsAuthentication.CookieMode
- uid: System.Web.HttpCookieMode
  parent: System.Web
  isExternal: false
  name: HttpCookieMode
  nameWithType: HttpCookieMode
  fullName: System.Web.HttpCookieMode
- uid: System.Web.Security.FormsAuthentication.CookiesSupported
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookiesSupported
  nameWithType: FormsAuthentication.CookiesSupported
  fullName: System.Web.Security.FormsAuthentication.CookiesSupported
- uid: System.Web.Security.FormsAuthentication.Decrypt(System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Decrypt(String)
  nameWithType: FormsAuthentication.Decrypt(String)
  fullName: System.Web.Security.FormsAuthentication.Decrypt(String)
- uid: System.Web.Security.FormsAuthenticationTicket
  parent: System.Web.Security
  isExternal: false
  name: FormsAuthenticationTicket
  nameWithType: FormsAuthenticationTicket
  fullName: System.Web.Security.FormsAuthenticationTicket
- uid: System.Web.Security.FormsAuthentication.DefaultUrl
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: DefaultUrl
  nameWithType: FormsAuthentication.DefaultUrl
  fullName: System.Web.Security.FormsAuthentication.DefaultUrl
- uid: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: EnableCrossAppRedirects
  nameWithType: FormsAuthentication.EnableCrossAppRedirects
  fullName: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects
- uid: System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: EnableFormsAuthentication(NameValueCollection)
  nameWithType: FormsAuthentication.EnableFormsAuthentication(NameValueCollection)
  fullName: System.Web.Security.FormsAuthentication.EnableFormsAuthentication(NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Encrypt(FormsAuthenticationTicket)
  nameWithType: FormsAuthentication.Encrypt(FormsAuthenticationTicket)
  fullName: System.Web.Security.FormsAuthentication.Encrypt(FormsAuthenticationTicket)
- uid: System.Web.Security.FormsAuthentication.FormsCookieName
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsCookieName
  nameWithType: FormsAuthentication.FormsCookieName
  fullName: System.Web.Security.FormsAuthentication.FormsCookieName
- uid: System.Web.Security.FormsAuthentication.FormsCookiePath
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsCookiePath
  nameWithType: FormsAuthentication.FormsCookiePath
  fullName: System.Web.Security.FormsAuthentication.FormsCookiePath
- uid: System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: GetAuthCookie(String,Boolean)
  nameWithType: FormsAuthentication.GetAuthCookie(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.GetAuthCookie(String,Boolean)
- uid: System.Web.HttpCookie
  parent: System.Web
  isExternal: false
  name: HttpCookie
  nameWithType: HttpCookie
  fullName: System.Web.HttpCookie
- uid: System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: GetAuthCookie(String,Boolean,String)
  nameWithType: FormsAuthentication.GetAuthCookie(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.GetAuthCookie(String,Boolean,String)
- uid: System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: GetRedirectUrl(String,Boolean)
  nameWithType: FormsAuthentication.GetRedirectUrl(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.GetRedirectUrl(String,Boolean)
- uid: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: HashPasswordForStoringInConfigFile(String,String)
  nameWithType: FormsAuthentication.HashPasswordForStoringInConfigFile(String,String)
  fullName: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(String,String)
- uid: System.Web.Security.FormsAuthentication.Initialize
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Initialize()
  nameWithType: FormsAuthentication.Initialize()
  fullName: System.Web.Security.FormsAuthentication.Initialize()
- uid: System.Web.Security.FormsAuthentication.IsEnabled
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: IsEnabled
  nameWithType: FormsAuthentication.IsEnabled
  fullName: System.Web.Security.FormsAuthentication.IsEnabled
- uid: System.Web.Security.FormsAuthentication.LoginUrl
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: LoginUrl
  nameWithType: FormsAuthentication.LoginUrl
  fullName: System.Web.Security.FormsAuthentication.LoginUrl
- uid: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectFromLoginPage(String,Boolean)
  nameWithType: FormsAuthentication.RedirectFromLoginPage(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(String,Boolean)
- uid: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectFromLoginPage(String,Boolean,String)
  nameWithType: FormsAuthentication.RedirectFromLoginPage(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(String,Boolean,String)
- uid: System.Web.Security.FormsAuthentication.RedirectToLoginPage
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectToLoginPage()
  nameWithType: FormsAuthentication.RedirectToLoginPage()
  fullName: System.Web.Security.FormsAuthentication.RedirectToLoginPage()
- uid: System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectToLoginPage(String)
  nameWithType: FormsAuthentication.RedirectToLoginPage(String)
  fullName: System.Web.Security.FormsAuthentication.RedirectToLoginPage(String)
- uid: System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RenewTicketIfOld(FormsAuthenticationTicket)
  nameWithType: FormsAuthentication.RenewTicketIfOld(FormsAuthenticationTicket)
  fullName: System.Web.Security.FormsAuthentication.RenewTicketIfOld(FormsAuthenticationTicket)
- uid: System.Web.Security.FormsAuthentication.RequireSSL
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RequireSSL
  nameWithType: FormsAuthentication.RequireSSL
  fullName: System.Web.Security.FormsAuthentication.RequireSSL
- uid: System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SetAuthCookie(String,Boolean)
  nameWithType: FormsAuthentication.SetAuthCookie(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.SetAuthCookie(String,Boolean)
- uid: System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SetAuthCookie(String,Boolean,String)
  nameWithType: FormsAuthentication.SetAuthCookie(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.SetAuthCookie(String,Boolean,String)
- uid: System.Web.Security.FormsAuthentication.SignOut
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SignOut()
  nameWithType: FormsAuthentication.SignOut()
  fullName: System.Web.Security.FormsAuthentication.SignOut()
- uid: System.Web.Security.FormsAuthentication.SlidingExpiration
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SlidingExpiration
  nameWithType: FormsAuthentication.SlidingExpiration
  fullName: System.Web.Security.FormsAuthentication.SlidingExpiration
- uid: System.Web.Security.FormsAuthentication.TicketCompatibilityMode
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: TicketCompatibilityMode
  nameWithType: FormsAuthentication.TicketCompatibilityMode
  fullName: System.Web.Security.FormsAuthentication.TicketCompatibilityMode
- uid: System.Web.Configuration.TicketCompatibilityMode
  parent: System.Web.Configuration
  isExternal: false
  name: TicketCompatibilityMode
  nameWithType: TicketCompatibilityMode
  fullName: System.Web.Configuration.TicketCompatibilityMode
- uid: System.Web.Security.FormsAuthentication.Timeout
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Timeout
  nameWithType: FormsAuthentication.Timeout
  fullName: System.Web.Security.FormsAuthentication.Timeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Web.Security.FormsAuthentication.#ctor*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsAuthentication
  nameWithType: FormsAuthentication.FormsAuthentication
- uid: System.Web.Security.FormsAuthentication.Authenticate*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Authenticate
  nameWithType: FormsAuthentication.Authenticate
- uid: System.Web.Security.FormsAuthentication.CookieDomain*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookieDomain
  nameWithType: FormsAuthentication.CookieDomain
- uid: System.Web.Security.FormsAuthentication.CookieMode*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookieMode
  nameWithType: FormsAuthentication.CookieMode
- uid: System.Web.Security.FormsAuthentication.CookiesSupported*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookiesSupported
  nameWithType: FormsAuthentication.CookiesSupported
- uid: System.Web.Security.FormsAuthentication.Decrypt*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Decrypt
  nameWithType: FormsAuthentication.Decrypt
- uid: System.Web.Security.FormsAuthentication.DefaultUrl*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: DefaultUrl
  nameWithType: FormsAuthentication.DefaultUrl
- uid: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: EnableCrossAppRedirects
  nameWithType: FormsAuthentication.EnableCrossAppRedirects
- uid: System.Web.Security.FormsAuthentication.EnableFormsAuthentication*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: EnableFormsAuthentication
  nameWithType: FormsAuthentication.EnableFormsAuthentication
- uid: System.Web.Security.FormsAuthentication.Encrypt*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Encrypt
  nameWithType: FormsAuthentication.Encrypt
- uid: System.Web.Security.FormsAuthentication.FormsCookieName*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsCookieName
  nameWithType: FormsAuthentication.FormsCookieName
- uid: System.Web.Security.FormsAuthentication.FormsCookiePath*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsCookiePath
  nameWithType: FormsAuthentication.FormsCookiePath
- uid: System.Web.Security.FormsAuthentication.GetAuthCookie*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: GetAuthCookie
  nameWithType: FormsAuthentication.GetAuthCookie
- uid: System.Web.Security.FormsAuthentication.GetRedirectUrl*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: GetRedirectUrl
  nameWithType: FormsAuthentication.GetRedirectUrl
- uid: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: HashPasswordForStoringInConfigFile
  nameWithType: FormsAuthentication.HashPasswordForStoringInConfigFile
- uid: System.Web.Security.FormsAuthentication.Initialize*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Initialize
  nameWithType: FormsAuthentication.Initialize
- uid: System.Web.Security.FormsAuthentication.IsEnabled*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: IsEnabled
  nameWithType: FormsAuthentication.IsEnabled
- uid: System.Web.Security.FormsAuthentication.LoginUrl*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: LoginUrl
  nameWithType: FormsAuthentication.LoginUrl
- uid: System.Web.Security.FormsAuthentication.RedirectFromLoginPage*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectFromLoginPage
  nameWithType: FormsAuthentication.RedirectFromLoginPage
- uid: System.Web.Security.FormsAuthentication.RedirectToLoginPage*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectToLoginPage
  nameWithType: FormsAuthentication.RedirectToLoginPage
- uid: System.Web.Security.FormsAuthentication.RenewTicketIfOld*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RenewTicketIfOld
  nameWithType: FormsAuthentication.RenewTicketIfOld
- uid: System.Web.Security.FormsAuthentication.RequireSSL*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RequireSSL
  nameWithType: FormsAuthentication.RequireSSL
- uid: System.Web.Security.FormsAuthentication.SetAuthCookie*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SetAuthCookie
  nameWithType: FormsAuthentication.SetAuthCookie
- uid: System.Web.Security.FormsAuthentication.SignOut*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SignOut
  nameWithType: FormsAuthentication.SignOut
- uid: System.Web.Security.FormsAuthentication.SlidingExpiration*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SlidingExpiration
  nameWithType: FormsAuthentication.SlidingExpiration
- uid: System.Web.Security.FormsAuthentication.TicketCompatibilityMode*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: TicketCompatibilityMode
  nameWithType: FormsAuthentication.TicketCompatibilityMode
- uid: System.Web.Security.FormsAuthentication.Timeout*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Timeout
  nameWithType: FormsAuthentication.Timeout
