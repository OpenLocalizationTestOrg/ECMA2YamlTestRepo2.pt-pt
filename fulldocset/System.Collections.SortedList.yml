### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  id: SortedList
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  summary: "Representa uma coleção de pares chave/valor que são ordenados pelas chaves e estão acessíveis através da chave e o índice."
  remarks: "Para a versão genérica desta coleção, consulte <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.</xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>       Um elemento de SortedList pode ser acedido pela respetiva chave, como um elemento em qualquer <xref:System.Collections.IDictionary>implementação, ou pelo respetivo índice, como um elemento em qualquer <xref:System.Collections.IList>implementação.</xref:System.Collections.IList> </xref:System.Collections.IDictionary>       Um objeto de SortedList internamente mantém duas matrizes para armazenar os elementos da lista; ou seja, uma matriz para as chaves e outra matriz para os valores associados. Cada elemento é um par chave/valor que pode ser acedido como um <xref:System.Collections.DictionaryEntry>objeto.</xref:System.Collections.DictionaryEntry> Não pode ser uma chave `null`, mas pode ser um valor.       A capacidade de um objeto de SortedList é o número de elementos que de SortedList pode conter. Elementos são adicionadas a um SortedList, a capacidade é aumentada automaticamente conforme necessário, através da reatribuição. A capacidade pode ser diminuída chamando <xref:System.Collections.SortedList.TrimToSize%2A>ou definindo o <xref:System.Collections.SortedList.Capacity%2A>propriedade explicitamente.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A>       Para objetos de SortedList muito grandes, pode aumentar a capacidade máxima para 2 mil milhões de elementos num sistema de 64 bits, definindo o `enabled` atributo do elemento de configuração para `true` no ambiente de tempo de execução.       Os elementos de um objeto de SortedList são ordenados pelas chaves de qualquer um, de acordo com um específico <xref:System.Collections.IComparer>implementação especificada quando é criada a SortedList ou de acordo com o <xref:System.IComparable>implementação fornecida as chaves de si próprios.</xref:System.IComparable> </xref:System.Collections.IComparer> Em ambos os casos, um SortedList não permitem que as chaves duplicadas.       A sequência de índice baseia-se a sequência de ordenação. Quando é adicionado um elemento, é inserido SortedList pela ordem correta de ordenação e a indexação ajusta em conformidade. Quando um elemento for removido, também a indexação ajusta em conformidade. Por conseguinte, o índice de um par chave/valor específico poderá alterar como elementos são adicionados ou removidos do objeto SortedList.       Operações de um objeto de SortedList tendem a ser mais lenta do que as operações um <xref:System.Collections.Hashtable>objeto devido a ordenação.</xref:System.Collections.Hashtable> No entanto, o SortedList oferece mais flexibilidade ao permitir o acesso aos valores através as chaves associadas ou através dos índices.       Elementos nesta colecção podem ser acedidos através de um índice de números inteiros.  Os índices desta coleção estão baseado em zero.       O `foreach` declaração do Estado de linguagem c# (`for each` no Visual Basic) devolve um objeto do tipo de elementos na colecção. Uma vez que cada elemento do objeto SortedList um par chave/valor, o tipo de elemento não é o tipo de chave ou o tipo do valor. Em vez disso, o tipo de elemento é <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Por exemplo: [!code-cpp [clássico SortedList exemplo n. º&2;](~/add/codesnippet/cpp/t-system.collections.sor_1.cpp)][!code-cs[clássico SortedList exemplo n. º&2;](~/add/codesnippet/csharp/t-system.collections.sor_1.cs)][!code-vb[clássico SortedList exemplo n. º&2;](~/add/codesnippet/visualbasic/t-system.collections.sor_1.vb) ] o `foreach` instrução é um wrapper em torno do enumerador, permitindo apenas ler, escrever não para a coleção.    "
  example:
  - "The following code example shows how to create and initialize a SortedList object and how to print out its keys and values.  \n  \n [!code-cpp[Classic SortedList Example#1](~/add/codesnippet/cpp/t-system.collections.sor_2.cpp)]\n [!code-cs[Classic SortedList Example#1](~/add/codesnippet/csharp/t-system.collections.sor_2.cs)]\n [!code-vb[Classic SortedList Example#1](~/add/codesnippet/visualbasic/t-system.collections.sor_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortedList : ICloneable, System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe que está vazia, tem a capacidade inicial predefinido e é ordenada de acordo com o <xref:System.IComparable>interface implementada pela cada chave adicionada a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.IComparable>"
  remarks: "Cada chave tem de implementar o <xref:System.IComparable>interface para ser capaz de comparações com todos os outro chave no <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.IComparable> São ordenados os elementos de acordo com a <xref:System.IComparable>implementação de cada chave adicionada <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       A capacidade de um <xref:System.Collections.SortedList>objeto é o número de elementos que o <xref:System.Collections.SortedList>pode conter.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Elementos são adicionadas a um <xref:System.Collections.SortedList>, automaticamente aumenta a capacidade conforme requerido pelo reallocating matriz interna.</xref:System.Collections.SortedList>       Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Este construtor é uma operação de O(1)."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_7_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_7_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_7_1.cpp)]"
  syntax:
    content: public SortedList ();
    parameters: []
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe que está vazia, tem a capacidade inicial predefinido e é ordenada, de acordo com a especificado <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer>"
  remarks: "São ordenados os elementos de acordo com a especificado <xref:System.Collections.IComparer>implementação.</xref:System.Collections.IComparer> Se o `comparer` parâmetro é `null`, a <xref:System.IComparable>é utilizada a implementação de cada chave; por conseguinte, cada chave tem de implementar o <xref:System.IComparable>interface para ser capaz de comparações com todos os outro chave no <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       A capacidade de um <xref:System.Collections.SortedList>objeto é o número de elementos que o <xref:System.Collections.SortedList>pode conter.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Elementos são adicionadas a um <xref:System.Collections.SortedList>, automaticamente aumenta a capacidade conforme requerido pelo reallocating matriz interna.</xref:System.Collections.SortedList>       Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Este construtor é uma operação de O(1)."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_18_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_18_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_18_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>implementação a utilizar quando a comparação com as chaves.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o <xref:System.IComparable>implementação de cada chave.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe que contém elementos copiados do dicionário especificado, tem a mesma capacidade inicial como o número de elementos copiados e é ordenada de acordo com o <xref:System.IComparable>interface implementada pela cada chave.</xref:System.IComparable>"
  remarks: "Cada chave tem de implementar o <xref:System.IComparable>interface para ser capaz de comparações com todos os outro chave no <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.IComparable> São ordenados os elementos de acordo com a <xref:System.IComparable>implementação de cada chave adicionada <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       A <xref:System.Collections.Hashtable>objeto é um exemplo de um <xref:System.Collections.IDictionary>implementação que pode ser transmitida a este construtor.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> O novo <xref:System.Collections.SortedList>objeto contém uma cópia as chaves e valores armazenados no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.SortedList>       A capacidade de um <xref:System.Collections.SortedList>objeto é o número de elementos que o <xref:System.Collections.SortedList>pode conter.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Elementos são adicionadas a um <xref:System.Collections.SortedList>, automaticamente aumenta a capacidade conforme requerido pelo reallocating matriz interna.</xref:System.Collections.SortedList>       Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Este construtor é uma Nã (`n`) operação, onde `n` é o número de elementos na `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.sor_9_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.sor_9_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.sor_9_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>implementação para copiar para uma nova <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Um ou mais elementos <code> d </code> não implementam a <xref:System.IComparable>interface.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe que está vazia, tem a capacidade inicial especificada e é ordenada de acordo com o <xref:System.IComparable>interface implementada pela cada chave adicionada a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.IComparable>"
  remarks: "Cada chave tem de implementar o <xref:System.IComparable>interface para ser capaz de comparações com todos os outro chave no <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.IComparable> São ordenados os elementos de acordo com a <xref:System.IComparable>implementação de cada chave adicionada <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       A capacidade de um <xref:System.Collections.SortedList>objeto é o número de elementos que o <xref:System.Collections.SortedList>pode conter.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Elementos são adicionadas a um <xref:System.Collections.SortedList>, automaticamente aumenta a capacidade conforme requerido pelo reallocating matriz interna.</xref:System.Collections.SortedList>       Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Este construtor é uma Nã (`n`) operação, onde `n` é `initialCapacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.sor_15_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.sor_15_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.sor_15_1.cpp)]"
  syntax:
    content: public SortedList (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "O número inicial de elementos que o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto pode conter."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>é menor que zero."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Não há memória suficiente disponível para criar um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto especificado com <code> initialCapacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe que está vazia, tem a capacidade inicial especificada e é ordenada, de acordo com a especificado <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer>"
  remarks: "São ordenados os elementos de acordo com a especificado <xref:System.Collections.IComparer>implementação.</xref:System.Collections.IComparer> Se o `comparer` parâmetro é `null`, a <xref:System.IComparable>é utilizada a implementação de cada chave; por conseguinte, cada chave tem de implementar o <xref:System.IComparable>interface para ser capaz de comparações com todos os outro chave no <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       A capacidade de um <xref:System.Collections.SortedList>objeto é o número de elementos que o <xref:System.Collections.SortedList>pode conter.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Elementos são adicionadas a um <xref:System.Collections.SortedList>, automaticamente aumenta a capacidade conforme requerido pelo reallocating matriz interna.</xref:System.Collections.SortedList>       Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Este construtor é uma Nã (`n`) operação, onde `n` é `capacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/1806b376-56fc-45e2-aff7-_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/1806b376-56fc-45e2-aff7-_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/1806b376-56fc-45e2-aff7-_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer, int capacity);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>implementação a utilizar quando a comparação com as chaves.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o <xref:System.IComparable>implementação de cada chave.</xref:System.IComparable>"
    - id: capacity
      type: System.Int32
      description: "O número inicial de elementos que o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto pode conter."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>é menor que zero."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Não há memória suficiente disponível para criar um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto especificado com <code> capacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe que contém elementos copiados do dicionário especificado, tem a mesma capacidade inicial como o número de elementos copiados e é ordenada, de acordo com a especificado <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer>"
  remarks: "São ordenados os elementos de acordo com a especificado <xref:System.Collections.IComparer>implementação.</xref:System.Collections.IComparer> Se o `comparer` parâmetro é `null`, a <xref:System.IComparable>é utilizada a implementação de cada chave; por conseguinte, cada chave tem de implementar o <xref:System.IComparable>interface para ser capaz de comparações com todos os outro chave no <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       A <xref:System.Collections.Hashtable>objeto é um exemplo de um <xref:System.Collections.IDictionary>implementação que pode ser transmitida a este construtor.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> O novo <xref:System.Collections.SortedList>objeto contém uma cópia as chaves e valores armazenados no <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.SortedList>       A capacidade de um <xref:System.Collections.SortedList>objeto é o número de elementos que o <xref:System.Collections.SortedList>pode conter.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Elementos são adicionadas a um <xref:System.Collections.SortedList>, automaticamente aumenta a capacidade conforme requerido pelo reallocating matriz interna.</xref:System.Collections.SortedList>       Se o tamanho da coleção pode ser estimado, especificando a capacidade inicial elimina a necessidade de executar um número de operações de redimensionamento durante a adição de elementos para o <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Este construtor é uma Nã (`n`) operação, onde `n` é o número de elementos na `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/653e16d8-524e-4544-8674-_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/653e16d8-524e-4544-8674-_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/653e16d8-524e-4544-8674-_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "O <xref:System.Collections.IDictionary>implementação para copiar para uma nova <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.Collections.IDictionary>"
    - id: comparer
      type: System.Collections.IComparer
      description: "O <xref:System.Collections.IComparer>implementação a utilizar quando a comparação com as chaves.</xref:System.Collections.IComparer>       - ou - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> para utilizar o <xref:System.IComparable>implementação de cada chave.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>comparer</code>é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>e um ou mais elementos <code>d</code> não implementam a <xref:System.IComparable> interface."
  platform:
  - net462
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Adiciona um elemento com o nome da chave e valor para um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "O ponto de inserção é determinado com base na comparação selecionada, explicitamente ou por predefinição, quando o <xref:System.Collections.SortedList>objeto foi criado.</xref:System.Collections.SortedList>       Se <xref:System.Collections.SortedList.Count%2A>já for igual a <xref:System.Collections.SortedList.Capacity%2A>, a capacidade dos <xref:System.Collections.SortedList>objeto é aumentado ao automaticamente reallocating matriz interna e os elementos existentes são copiados para a matriz nova antes do novo elemento de é adicionado.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.Count%2A>       Também pode utilizar o <xref:System.Collections.SortedList.Item%2A>para adicionar novos elementos, definindo o valor de uma chave que não existe propriedade no <xref:System.Collections.SortedList>objeto (por exemplo, `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Item%2A> No entanto, se a chave especificada já existe no <xref:System.Collections.SortedList>, definição de <xref:System.Collections.SortedList.Item%2A>propriedade substitui o valor antigo.</xref:System.Collections.SortedList.Item%2A> </xref:System.Collections.SortedList> Em contrapartida, o método Add não modificar elementos existentes.       Os elementos de um <xref:System.Collections.SortedList>objeto são ordenados pelas chaves de qualquer um, de acordo com um específico <xref:System.Collections.IComparer>implementação especificado quando o <xref:System.Collections.SortedList>é criado ou de acordo com o <xref:System.IComparable>implementação fornecida as chaves de si próprios.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Não pode ser uma chave `null`, mas pode ser um valor.       Este método é um Nã (`n`) operação para dados ordenadas, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> É um Nã (registo `n`) operação se o novo elemento é adicionado ao fim da lista. Se a inserção faz com que um redimensionamento, a operação é Nã (`n`)."
  example:
  - "The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.sor_4_1.cpp)]\n [!code-vb[Classic SortedList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_4_1.vb)]\n [!code-cs[Classic SortedList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.sor_4_1.cs)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "A chave do elemento para adicionar."
    - id: value
      type: System.Object
      description: "O valor do elemento para adicionar. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Um elemento com especificado <code> key </code> já existe no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.       - ou - <xref href=&quot;System.Collections.SortedList&quot;> </xref> está configurado para utilizar o <xref:System.IComparable>interface, e <code> key </code> não implementa o <xref:System.IComparable>interface.</xref:System.IComparable> </xref:System.IComparable>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.SortedList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.SortedList&quot;> </xref> tem um tamanho fixo."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Não há memória suficiente disponível para adicionar o elemento para a <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O comparador emite uma exceção."
  platform:
  - net462
- uid: System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém ou define a capacidade de um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "A capacidade é o número de elementos que o <xref:System.Collections.SortedList>objeto pode armazenar.</xref:System.Collections.SortedList> <xref:System.Collections.SortedList.Count%2A>é o número de elementos que estão realmente a ser <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Count%2A>       Capacidade sempre é maior que ou igual a <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Se <xref:System.Collections.SortedList.Count%2A>excede a capacidade ao adicionar elementos, a capacidade é automaticamente aumentada por reallocating matriz interna antes de copiar os elementos antigos e adição de novos elementos.</xref:System.Collections.SortedList.Count%2A>       A capacidade pode ser diminuída chamando <xref:System.Collections.SortedList.TrimToSize%2A>ou definindo a propriedade de capacidade explicitamente.</xref:System.Collections.SortedList.TrimToSize%2A> Quando o valor de capacidade está definido explicitamente, a matriz interna também é reatribuída para acomodar a capacidade especificada.       Obter o valor desta propriedade é uma operação de O(1); a definição da propriedade é um Nã (`n`) operação, onde `n` é a capacidade de novo."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "O número de elementos que o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto pode conter."
  overload: System.Collections.SortedList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor atribuído é inferior ao número atual de elementos a <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Não há memória suficiente disponível no sistema."
  platform:
  - net462
- uid: System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove todos os elementos de um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "<xref:System.Collections.SortedList.Count%2A>está definido como zero e também são lançadas as referências a outros objetos de elementos da coleção.</xref:System.Collections.SortedList.Count%2A>       <xref:System.Collections.SortedList.Capacity%2A>permanece inalterado.</xref:System.Collections.SortedList.Capacity%2A> Para repor a capacidade dos <xref:System.Collections.SortedList>objeto, chamar <xref:System.Collections.SortedList.TrimToSize%2A>ou defina o <xref:System.Collections.SortedList.Capacity%2A>propriedade diretamente.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A> </xref:System.Collections.SortedList> Trimming vazio <xref:System.Collections.SortedList>define a capacidade dos <xref:System.Collections.SortedList>para a capacidade predefinida.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_14_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_14_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_14_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.SortedList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto é só de leitura.       - ou - <xref href=&quot;System.Collections.SortedList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cria uma cópia shallow um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "Uma cópia de uma coleção shallow copia apenas os elementos da coleção, se são tipos de referência ou valor de tipos, mas não copia os objetos que consulte as referências. As referências a nova coleção apontam para os objetos do mesmos que as referências na coleção original apontam para.       Em contrapartida, uma cópia profunda de uma coleção copia os elementos e tudo direta ou indiretamente referenciada pelos elementos.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Uma cópia shallow o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  overload: System.Collections.SortedList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto contém uma chave específica."
  remarks: "Os elementos de um <xref:System.Collections.SortedList>objeto são ordenados pelas chaves de qualquer um, de acordo com um específico <xref:System.Collections.IComparer>implementação especificado quando o <xref:System.Collections.SortedList>é criado ou de acordo com o <xref:System.IComparable>implementação fornecida as chaves de si próprios.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Contém implementa <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> Esta se comporta exatamente como <xref:System.Collections.SortedList.ContainsKey%2A>.</xref:System.Collections.SortedList.ContainsKey%2A>       Este método utiliza um algoritmo de pesquisa binário; Por conseguinte, este método é um Nã (registo `n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_12_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_12_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave para localizar no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto contém um elemento com especificado <code> key </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O comparador emite uma exceção."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto contém uma chave específica."
  remarks: "Os elementos de um <xref:System.Collections.SortedList>objeto são ordenados pelas chaves de qualquer um, de acordo com um específico <xref:System.Collections.IComparer>implementação especificado quando o <xref:System.Collections.SortedList>é criado ou de acordo com o <xref:System.IComparable>implementação fornecida as chaves de si próprios.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Este método funciona exatamente como o <xref:System.Collections.SortedList.Contains%2A>método.</xref:System.Collections.SortedList.Contains%2A>       Este método utiliza um algoritmo de pesquisa binário; Por conseguinte, este método é um Nã (registo `n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_16_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_16_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_16_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave para localizar no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto contém um elemento com especificado <code> key </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O comparador emite uma exceção."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto contém um valor específico."
  remarks: "Os valores dos elementos do <xref:System.Collections.SortedList>objeto estão em comparação com o valor especificado utilizando o <xref:System.Object.Equals%2A>método.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Este método efetua uma pesquisa linear; Por conseguinte, o tempo de execução médio é proporcional ao <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Ou seja, este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_0_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_0_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_0_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O valor a localizar no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto contém um elemento com especificado <code> value </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cópias <xref href=&quot;System.Collections.SortedList&quot;> </xref> elementos um unidimensional <xref:System.Array>objeto, que começa no índice especificado na matriz.</xref:System.Array>"
  remarks: "Os pares chave/valor são copiados para o <xref:System.Array>objeto pela mesma ordem na qual o enumerador itera através de <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.Array>       Para copiar apenas as chaves no <xref:System.Collections.SortedList>, utilize `SortedList.Keys.CopyTo`.</xref:System.Collections.SortedList>       Para copiar apenas os valores existentes no <xref:System.Collections.SortedList>, utilize `SortedList.Values.CopyTo`.</xref:System.Collections.SortedList>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \n  \n [!code-cs[Classic SortedList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sor_20_1.cs)]\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sor_20_1.cpp)]\n [!code-vb[Classic SortedList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_20_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "O unidimensional <xref:System.Array>objeto que é o destino de <xref:System.Collections.DictionaryEntry>objetos copiados <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> O <xref:System.Array>tem de ter a indexação com base em zero.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "O índice baseado em zero `array` em que copiar começa."
  overload: System.Collections.SortedList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>é menor que zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>é multidimensional.       - ou - o número de elementos na origem de <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto é superior ao espaço disponível desde o <code>arrayIndex</code> ao fim do destino <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "O tipo da origem de <xref href=&quot;System.Collections.SortedList&quot;> </xref> não pode ser convertido automaticamente para o tipo de destino <code> array </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém o número de elementos contidos num <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "Cada elemento é um par chave/valor que pode ser acedido como um <xref:System.Collections.DictionaryEntry>objeto.</xref:System.Collections.DictionaryEntry>       <xref:System.Collections.SortedList.Capacity%2A>é o número de elementos que o <xref:System.Collections.SortedList>objeto pode armazenar.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Capacity%2A> Contagem é o número de elementos que estão realmente a ser <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>       <xref:System.Collections.SortedList.Capacity%2A>é sempre igual ou superior à contagem.</xref:System.Collections.SortedList.Capacity%2A> Se a contagem de excede <xref:System.Collections.SortedList.Capacity%2A>durante a adição de elementos, a capacidade é automaticamente aumento reallocating matriz interna antes de copiar os elementos antigos e adição de novos elementos.</xref:System.Collections.SortedList.Capacity%2A>       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "O número de elementos contidos no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  overload: System.Collections.SortedList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém o valor no índice especificado de uma <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "A sequência de índice baseia-se a sequência de ordenação. Quando é adicionado um elemento, é inserido <xref:System.Collections.SortedList>na ordenação correta ordem e a indexação ajusta em conformidade.</xref:System.Collections.SortedList> Quando um elemento for removido, também a indexação ajusta em conformidade. Por conseguinte, o índice de um par chave/valor específico pode ser alterado como elementos são adicionados ou removidos a <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Este método é uma operação de O(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_8_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_8_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_8_1.vb)]"
  syntax:
    content: public virtual object GetByIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero do valor a obter."
    return:
      type: System.Object
      description: "O valor no índice especificado do <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  overload: System.Collections.SortedList.GetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>está fora do intervalo dos índices válidos para o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  platform:
  - net462
- uid: System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um <xref:System.Collections.IDictionaryEnumerator>objeto itera através de um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "O `foreach` declaração do Estado de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Por conseguinte, utilizando `foreach` recomenda-se, em vez de manipular diretamente o enumerador.       Enumeradores podem ser utilizados para ler os dados da coleção, mas não pode ser utilizados para modificar a colecção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento da coleção. <xref:System.Collections.IEnumerator.Reset%2A>também oferece o enumerador novamente para nesta posição.</xref:System.Collections.IEnumerator.Reset%2A>  Nesta posição <xref:System.Collections.IEnumerator.Current%2A>não está definido.</xref:System.Collections.IEnumerator.Current%2A> Por conseguinte, tem de chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção de antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Devolve o mesmo objeto até ser <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>transmite o fim da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>devolve `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nesta posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também devolvem `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A>devolvido `false`, <xref:System.Collections.IEnumerator.Current%2A>não está definido.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Para definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção, pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permanece inalterada. Caso sejam feitas alterações à coleção, como adicionar, modificar ou eliminar elementos, o enumerador está irrevogavelmente inválido e o respetivo comportamento não está definido.       O enumerador não tem acesso exclusivo à coleção; Por conseguinte, a enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread.  Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda.  Para permitir a coleção ser acedido por vários threads para ler e escrever, tem de implementar a seus próprios sincronização.       Este método é uma operação de O(1)."
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "Um <xref:System.Collections.IDictionaryEnumerator>do objeto para o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.SortedList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém a chave no índice especificado de uma <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "A sequência de índice baseia-se a sequência de ordenação. Quando é adicionado um elemento, é inserido <xref:System.Collections.SortedList>na ordenação correta ordem e a indexação ajusta em conformidade.</xref:System.Collections.SortedList> Quando um elemento for removido, também a indexação ajusta em conformidade. Por conseguinte, o índice de um par chave/valor específico pode ser alterado como elementos são adicionados ou removidos a <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Este método é uma operação de O(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_19_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_19_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_19_1.vb)]"
  syntax:
    content: public virtual object GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero da chave a obter."
    return:
      type: System.Object
      description: "A chave no índice especificado do <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  overload: System.Collections.SortedList.GetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>está fora do intervalo dos índices válidos para o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  platform:
  - net462
- uid: System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém as chaves num <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "O devolvido <xref:System.Collections.IList>objeto é uma vista só de leitura das chaves do <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Modificações efetuadas subjacente <xref:System.Collections.SortedList>são imediatamente refletidas no <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList>       Os elementos de devolvido <xref:System.Collections.IList>são ordenados pela mesma ordem como as chaves de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.IList>       Este método é semelhante a <xref:System.Collections.SortedList.Keys%2A>propriedade, mas devolve um <xref:System.Collections.IList>objeto em vez de um <xref:System.Collections.ICollection>objeto.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Keys%2A>       Este método é uma operação de O(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_1_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetKeyList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Um <xref:System.Collections.IList>objeto que contém as chaves no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetKeyList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém os valores <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "O devolvido <xref:System.Collections.IList>objeto é uma vista só de leitura dos valores do <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Modificações efetuadas subjacente <xref:System.Collections.SortedList>são imediatamente refletidas no <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList>       Os elementos de devolvido <xref:System.Collections.IList>são ordenados pela mesma ordem como os valores de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.IList>       Este método é semelhante a <xref:System.Collections.SortedList.Values%2A>propriedade, mas devolve um <xref:System.Collections.IList>objeto em vez de um <xref:System.Collections.ICollection>objeto.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Values%2A>       Este método é uma operação de O(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_11_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_11_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_11_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetValueList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Um <xref:System.Collections.IList>objeto que contém os valores existentes no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetValueList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve o índice baseado em zero de chave especificada num <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "Os elementos de um <xref:System.Collections.SortedList>objeto são ordenados pelas chaves de qualquer um, de acordo com um específico <xref:System.Collections.IComparer>implementação especificado quando o <xref:System.Collections.SortedList>é criado ou de acordo com o <xref:System.IComparable>implementação fornecida as chaves de si próprios.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       A sequência de índice baseia-se a sequência de ordenação. Quando é adicionado um elemento, é inserido <xref:System.Collections.SortedList>na ordenação correta ordem e a indexação ajusta em conformidade.</xref:System.Collections.SortedList> Quando um elemento for removido, também a indexação ajusta em conformidade. Por conseguinte, o índice de um par chave/valor específico pode ser alterado como elementos são adicionados ou removidos <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>       Este método utiliza um algoritmo de pesquisa binário; Por conseguinte, este método é um Nã (registo `n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_2_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_2_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_2_1.cs)]"
  syntax:
    content: public virtual int IndexOfKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave para localizar no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
    return:
      type: System.Int32
      description: "O índice baseado em zero do <code> key </code> parâmetro, se <code> key </code> se encontra no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto; caso contrário, -1."
  overload: System.Collections.SortedList.IndexOfKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O comparador emite uma exceção."
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve o índice baseado em zero da primeira ocorrência do valor especificado num <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "A sequência de índice baseia-se a sequência de ordenação. Quando é adicionado um elemento, é inserido <xref:System.Collections.SortedList>na ordenação correta ordem e a indexação ajusta em conformidade.</xref:System.Collections.SortedList> Quando um elemento for removido, também a indexação ajusta em conformidade. Por conseguinte, o índice de um par chave/valor específico pode ser alterado como elementos são adicionados ou removidos a <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Os valores dos elementos do <xref:System.Collections.SortedList>em comparação com o valor especificado utilizando o <xref:System.Object.Equals%2A>método.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Este método utiliza uma pesquisa linear; Por conseguinte, este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Começando com o .NET Framework 2.0, este método utiliza dos objetos da coleção <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos em `item` para determinar se existe item.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nas versões anteriores do .NET Framework, esta determinação foi efetuada utilizando o <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>métodos para o `item` parâmetro nos objetos na coleção.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_5_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_5_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_5_1.cs)]"
  syntax:
    content: public virtual int IndexOfValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "O valor a localizar no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto. O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "O índice baseado em zero da primeira ocorrência da <code> value </code> parâmetro, se <code> value </code> se encontra no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto; caso contrário, -1."
  overload: System.Collections.SortedList.IndexOfValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto tem um tamanho fixo."
  remarks: "Uma coleção com um tamanho fixo não permite a adição ou remoção de elementos depois da coleção é criada, mas permitir a modificação de elementos existentes.       Uma coleção com um tamanho fixo é simplesmente uma coleção com um wrapper que impede a adição e remoção de elementos; Por conseguinte, caso sejam feitas alterações para a colecção subjacente, incluindo a adição ou remoção de elementos, a coleção de tamanho fixo reflete essas alterações.       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto tem um fixo tamanho; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto é só de leitura."
  remarks: "Uma coleção que é só de leitura não permite a adição, remoção ou modificação de elementos depois de criar a coleção.       Uma coleção que é só de leitura é simplesmente uma coleção com um wrapper que impede a modificar a coleção; Por conseguinte, caso sejam feitas alterações para a colecção subjacente, a coleção só de leitura reflete essas alterações.       Obter o valor desta propriedade é uma operação de O(1)."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto é só de leitura; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um valor que indica se o acesso a um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto está sincronizado (seguros para threads)."
  remarks: "Para garantir a segurança de thread de um <xref:System.Collections.SortedList>objeto, todas as operações tem de ser efetuadas através de wrapper devolvido pelo <xref:System.Collections.SortedList.Synchronized%2A>método.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList>       Enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads."
  example:
  - "The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sor_1_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sor_1_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sor_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o acesso à <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto está sincronizado (seguros para threads); caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém e define o valor associado uma chave específica num <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "Pode utilizar a propriedade do Item para aceder a um elemento de uma coleção específico, especificando a seguinte sintaxe: `myCollection[key]`.       Também pode utilizar esta propriedade para adicionar novos elementos definindo o valor de uma chave que não existe no <xref:System.Collections.SortedList>objeto (por exemplo, `myCollection[&quot;myNonexistentKey&quot;] = myValue)`.</xref:System.Collections.SortedList> No entanto, se a chave especificada já existe no <xref:System.Collections.SortedList>, definir a propriedade do Item substitui o valor antigo.</xref:System.Collections.SortedList> Em contrapartida, o <xref:System.Collections.SortedList.Add%2A>método não modifica os elementos existentes.</xref:System.Collections.SortedList.Add%2A>       Não pode ser uma chave `null`, mas pode ser um valor. Para distinguir entre `null` que é devolvido porque a chave especificada não foi encontrada e `null` que é devolvido porque o valor da chave especificada é `null`, utilize o <xref:System.Collections.SortedList.Contains%2A>método ou <xref:System.Collections.SortedList.ContainsKey%2A>método para determinar se a chave existe na lista.</xref:System.Collections.SortedList.ContainsKey%2A> </xref:System.Collections.SortedList.Contains%2A>       Os elementos de um <xref:System.Collections.SortedList>são ordenados pelas chaves de qualquer um, de acordo com um específico <xref:System.Collections.IComparer>implementação especificado quando o <xref:System.Collections.SortedList>é criado ou de acordo com o <xref:System.IComparable>implementação fornecida as chaves de si próprios.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       A linguagem c# utiliza a palavra-chave para definir os indexadores em vez de implementar o <xref:System.Collections.SortedList.Keys%2A>propriedade.</xref:System.Collections.SortedList.Keys%2A> Visual Basic implementa Item como uma propriedade predefinida, que fornece a mesma funcionalidade de indexação.       Obter o valor desta propriedade é um Nã (registo `n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> A definição da propriedade é um Nã (registo `n`) operação se a chave já está a ser <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> Se a chave não estiver na lista, a definição da propriedade é um Nã (`n`) operação de dados não ordenados ou Nã (registo `n`) se o novo elemento é adicionado ao fim da lista. Se a inserção faz com que um redimensionamento, a operação é Nã (`n`)."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "A chave associada ao valor obter ou definir."
    return:
      type: System.Object
      description: "O valor associado a <code> key </code> parâmetro o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto se <code> key </code> é encontrado; caso contrário, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A propriedade está definida e o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto é só de leitura.       - ou - a propriedade está definida, <code> key </code> não existe na coleção e o <xref href=&quot;System.Collections.SortedList&quot;> </xref> tem um tamanho fixo."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Não há memória suficiente disponível para adicionar o elemento para a <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O comparador emite uma exceção."
  platform:
  - net462
- uid: System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém as chaves num <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "O <xref:System.Collections.ICollection>objeto é uma vista só de leitura das chaves do <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Modificações efetuadas subjacente <xref:System.Collections.SortedList>são imediatamente refletidas no <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList>       Os elementos de <xref:System.Collections.ICollection>são ordenados pela mesma ordem como as chaves de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection>       Esta propriedade é semelhante a <xref:System.Collections.SortedList.GetKeyList%2A>método, mas devolve um <xref:System.Collections.ICollection>objeto em vez de um <xref:System.Collections.IList>objeto.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetKeyList%2A>       Este método é uma operação de O(1)."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>objeto que contém as chaves no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove o elemento com a chave especificada de um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "Se o <xref:System.Collections.SortedList>objecto não contém um elemento com a chave especificada, o <xref:System.Collections.SortedList>permanece inalterada.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Sem exceção é emitida.       Em coleções de elementos contíguas, tais como listas, os elementos que se seguem o elemento removido mover para cima para ocupam o vacated lugar para cima. Se a coleção está indexada, os índices de elementos que são movidos também são atualizados. Este comportamento não é aplicável a coleções onde os elementos são, essencialmente, agrupados em registos, tais como uma tabela hash.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_6_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_6_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_6_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "A chave do elemento para remover."
  overload: System.Collections.SortedList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto é só de leitura.       - ou - <xref href=&quot;System.Collections.SortedList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Remove o elemento no índice especificado de uma <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "A sequência de índice baseia-se a sequência de ordenação. Quando é adicionado um elemento, é inserido <xref:System.Collections.SortedList>na ordenação correta ordem e a indexação ajusta em conformidade.</xref:System.Collections.SortedList> Quando um elemento for removido, também a indexação ajusta em conformidade. Por conseguinte, o índice de um par chave/valor específico pode ser alterado como elementos são adicionados ou removidos a <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Em coleções de elementos contíguas, tais como listas, os elementos que se seguem o elemento removido mover para cima para ocupam o vacated lugar para cima. Se a coleção está indexada, os índices de elementos que são movidos também são atualizados. Este comportamento não é aplicável a coleções onde os elementos são, essencialmente, agrupados em registos, tais como uma tabela hash.       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_17_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_17_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_17_1.vb)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero do elemento para remover."
  overload: System.Collections.SortedList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>está fora do intervalo dos índices válidos para o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.SortedList&quot;> </xref> é só de leitura.       - ou - <xref href=&quot;System.Collections.SortedList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Substitui o valor de um índice específico num <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "A sequência de índice baseia-se a sequência de ordenação. Quando é adicionado um elemento, é inserido <xref:System.Collections.SortedList>na ordenação correta ordem e a indexação ajusta em conformidade.</xref:System.Collections.SortedList> Quando um elemento for removido, também a indexação ajusta em conformidade. Por conseguinte, o índice de um par chave/valor específico pode ser alterado como elementos são adicionados ou removidos a <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Este método é uma operação de O(1)."
  example:
  - "The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \n  \n [!code-vb[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_13_1.vb)]\n [!code-cs[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_13_1.cs)]\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_13_1.cpp)]"
  syntax:
    content: public virtual void SetByIndex (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "O índice baseado em zero no qual pretende guardar `value`."
    - id: value
      type: System.Object
      description: "O <xref:System.Object>para guardar para o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.Object> O valor pode ser <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.SetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>está fora do intervalo dos índices válidos para o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  platform:
  - net462
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um wrapper (seguro para thread) sincronizado para um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "Para garantir a segurança de thread de um <xref:System.Collections.SortedList>objeto, todas as operações tem de ser efetuadas através deste wrapper apenas.</xref:System.Collections.SortedList>       Enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sor_10_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sor_10_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sor_10_1.vb)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sor_10_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sor_10_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_10_2.vb)]"
  syntax:
    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "O <xref href=&quot;System.Collections.SortedList&quot;> </xref> objetos a sincronizar."
    return:
      type: System.Collections.SortedList
      description: "A sincronizar wrapper (seguro para thread) para o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  overload: System.Collections.SortedList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém um objeto que pode ser utilizado para sincronizar o acesso a um <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "Para criar uma versão sincronizada a <xref:System.Collections.SortedList>objeto, utilize o <xref:System.Collections.SortedList.Synchronized%2A>método.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList> No entanto, as classes derivadas podem fornecer os seus próprios versão sincronizado do <xref:System.Collections.SortedList>utilizando a propriedade SyncRoot.</xref:System.Collections.SortedList> O código de sincronização tem de efetuar operações em SyncRoot do <xref:System.Collections.SortedList>, não diretamente no <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Isto assegura um funcionamento correto de coleções que são derivadas de outros objetos. Especificamente, mantém sincronização adequada com outros threads que podem ser simultaneamente modificar o <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList>       Enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_0_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_0_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_0_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Um objeto que pode ser utilizado para sincronizar acesso para o <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  overload: System.Collections.SortedList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Devolve um <xref:System.Collections.IEnumerator>que itera através de <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic, c#]       O `foreach` declaração do Estado de linguagem c# (`for each` no Visual Basic) oculta a complexidade dos enumeradores.  Por conseguinte, utilizando `foreach` recomenda-se, em vez de manipular diretamente o enumerador.       Enumeradores podem ser utilizados para ler os dados da coleção, mas não pode ser utilizados para modificar a colecção subjacente.       Inicialmente, o enumerador está posicionado antes do primeiro elemento da coleção. <xref:System.Collections.IEnumerator.Reset%2A>também oferece o enumerador novamente para nesta posição.</xref:System.Collections.IEnumerator.Reset%2A> AT isto posicionar, chamar <xref:System.Collections.IEnumerator.Current%2A>emite uma exceção.</xref:System.Collections.IEnumerator.Current%2A> Por conseguinte, tem de chamar <xref:System.Collections.IEnumerator.MoveNext%2A>para avançar o enumerador para o primeiro elemento da coleção de antes de ler o valor de <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Devolve o mesmo objeto até ser <xref:System.Collections.IEnumerator.MoveNext%2A>ou <xref:System.Collections.IEnumerator.Reset%2A>é chamado.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Define <xref:System.Collections.IEnumerator.Current%2A>para o próximo elemento.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>transmite o fim da coleção, o enumerador está posicionado após o último elemento da coleção e <xref:System.Collections.IEnumerator.MoveNext%2A>devolve `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando o enumerador está nesta posição, as chamadas subsequentes para <xref:System.Collections.IEnumerator.MoveNext%2A>também devolvem `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se a última chamada para <xref:System.Collections.IEnumerator.MoveNext%2A>devolvido `false`, chamar <xref:System.Collections.IEnumerator.Current%2A>emite uma exceção.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Para definir <xref:System.Collections.IEnumerator.Current%2A>para o primeiro elemento da coleção, pode chamar <xref:System.Collections.IEnumerator.Reset%2A>seguido <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Um enumerador permanece válido desde que a coleção permanece inalterada. Caso sejam feitas alterações à coleção, tais como adicionar, modificar ou eliminar elementos, o enumerador está irrevogavelmente invalidado e a próxima chamada ou <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A>emitir um <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se a coleção é modificada entre <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>devolve o elemento que está definido, mesmo que o enumerador já é invalidado.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       O enumerador não tem acesso exclusivo à coleção; Por conseguinte, a enumerar através de uma coleção intrinsecamente não é um procedimento seguro para thread. Mesmo quando uma coleção está sincronizada, outros threads ainda podem modificar a coleção, o que faz com que o enumerador acionar uma excepção. Para garantir a segurança de thread durante a enumeração, pode bloquear a coleção durante a enumeração de toda ou detetar exceções resultantes das alterações efetuadas por outros threads.       Este método é uma operação de O(1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.SortedList&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Define a capacidade para o número real de elementos num <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "Este método pode ser utilizado para minimizar a sobrecarga memória de uma coleção se não existem novos elementos serão adicionados à coleção.       Para repor um <xref:System.Collections.SortedList>objeto para o estado inicial, a chamada de <xref:System.Collections.SortedList.Clear%2A>método antes de chamar TrimToSize.</xref:System.Collections.SortedList.Clear%2A> </xref:System.Collections.SortedList> Trimming vazio <xref:System.Collections.SortedList>define a capacidade dos <xref:System.Collections.SortedList>para a capacidade predefinida.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Este método é um Nã (`n`) operação, onde `n` é <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_3_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_3_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_3_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.SortedList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto é só de leitura.       - ou - <xref href=&quot;System.Collections.SortedList&quot;> </xref> tem um tamanho fixo."
  platform:
  - net462
- uid: System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Obtém os valores <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto."
  remarks: "O <xref:System.Collections.ICollection>objeto é uma vista só de leitura dos valores do <xref:System.Collections.SortedList>objeto.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Modificações efetuadas subjacente <xref:System.Collections.SortedList>são imediatamente refletidas no <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList>       Os elementos de <xref:System.Collections.ICollection>são ordenados pela mesma ordem como os valores de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection>       Esta propriedade é semelhante a <xref:System.Collections.SortedList.GetValueList%2A>método, mas devolve um <xref:System.Collections.ICollection>objeto em vez de um <xref:System.Collections.IList>objeto.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetValueList%2A>       Este método é uma operação de O(1)."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Um <xref:System.Collections.ICollection>objeto que contém os valores existentes no <xref href=&quot;System.Collections.SortedList&quot;> </xref> objeto.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.SortedList.#ctor
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.SortedList.#ctor(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
- uid: System.Collections.SortedList.Capacity
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
- uid: System.Collections.SortedList.Clear
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
- uid: System.Collections.SortedList.Clone
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
- uid: System.Collections.SortedList.Contains(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.SortedList.Count
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
- uid: System.Collections.SortedList.GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.SortedList.GetKey(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
- uid: System.Collections.SortedList.GetKeyList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.SortedList.GetValueList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
- uid: System.Collections.SortedList.IsFixedSize
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
- uid: System.Collections.SortedList.Keys
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.SortedList.Remove(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.SortedList.SyncRoot
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.SortedList.TrimToSize
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
- uid: System.Collections.SortedList.Values
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
- uid: System.Collections.SortedList.#ctor*
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList
  nameWithType: SortedList.SortedList
- uid: System.Collections.SortedList.Add*
  parent: System.Collections.SortedList
  isExternal: false
  name: Add
  nameWithType: SortedList.Add
- uid: System.Collections.SortedList.Capacity*
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
- uid: System.Collections.SortedList.Clear*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear
  nameWithType: SortedList.Clear
- uid: System.Collections.SortedList.Clone*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone
  nameWithType: SortedList.Clone
- uid: System.Collections.SortedList.Contains*
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains
  nameWithType: SortedList.Contains
- uid: System.Collections.SortedList.ContainsKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey
  nameWithType: SortedList.ContainsKey
- uid: System.Collections.SortedList.ContainsValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue
  nameWithType: SortedList.ContainsValue
- uid: System.Collections.SortedList.CopyTo*
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo
  nameWithType: SortedList.CopyTo
- uid: System.Collections.SortedList.Count*
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
- uid: System.Collections.SortedList.GetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex
  nameWithType: SortedList.GetByIndex
- uid: System.Collections.SortedList.GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedList.GetEnumerator
- uid: System.Collections.SortedList.GetKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey
  nameWithType: SortedList.GetKey
- uid: System.Collections.SortedList.GetKeyList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList
  nameWithType: SortedList.GetKeyList
- uid: System.Collections.SortedList.GetValueList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList
  nameWithType: SortedList.GetValueList
- uid: System.Collections.SortedList.IndexOfKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey
  nameWithType: SortedList.IndexOfKey
- uid: System.Collections.SortedList.IndexOfValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue
  nameWithType: SortedList.IndexOfValue
- uid: System.Collections.SortedList.IsFixedSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item*
  parent: System.Collections.SortedList
  isExternal: false
  name: Item
  nameWithType: SortedList.Item
- uid: System.Collections.SortedList.Keys*
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
- uid: System.Collections.SortedList.Remove*
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove
  nameWithType: SortedList.Remove
- uid: System.Collections.SortedList.RemoveAt*
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt
  nameWithType: SortedList.RemoveAt
- uid: System.Collections.SortedList.SetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex
  nameWithType: SortedList.SetByIndex
- uid: System.Collections.SortedList.Synchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized
  nameWithType: SortedList.Synchronized
- uid: System.Collections.SortedList.SyncRoot*
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.SortedList.TrimToSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize
  nameWithType: SortedList.TrimToSize
- uid: System.Collections.SortedList.Values*
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
