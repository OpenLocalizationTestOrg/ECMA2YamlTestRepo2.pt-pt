### YamlMime:ManagedReference
items:
- uid: System.Web.Hosting.VirtualFile
  id: VirtualFile
  children:
  - System.Web.Hosting.VirtualFile.#ctor(System.String)
  - System.Web.Hosting.VirtualFile.IsDirectory
  - System.Web.Hosting.VirtualFile.Open
  langs:
  - csharp
  name: VirtualFile
  nameWithType: VirtualFile
  fullName: System.Web.Hosting.VirtualFile
  type: Class
  summary: "Represents a file object in a virtual file or resource space."
  remarks: "The VirtualFile class is the base class for objects that represent files in a virtual file system. Typically, you would implement a descendent of the VirtualFile class for each <xref:System.Web.Hosting.VirtualPathProvider> object descendent in your Web application."
  example:
  - "The following code example is a VirtualFile class implementation that combines information stored in a <xref:System.Data.DataSet> object with a template file to return HTML data. This code example works with the code examples for the <xref:System.Web.Hosting.VirtualPathProvider> and <xref:System.Web.Hosting.VirtualDirectory> classes to provide virtual resources from a data store that is loaded into a <xref:System.Data.DataSet> object. For the complete instructions for compiling and running the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview.  \n  \n This example has three parts: the VirtualFile class implementation, an XML data file used to populate the <xref:System.Data.DataSet> object, and the page template file.  \n  \n The first code example is an implementation of the VirtualFile class. Its constructor uses a method on a custom <xref:System.Web.Hosting.VirtualPathProvider> object to return a <xref:System.Data.DataSet> object. It then searches the <xref:System.Data.DataSet> object to retrieve the information associated with the virtual file path provided. In the <xref:System.Web.Hosting.VirtualFile.Open%2A> method, it combines the information from the <xref:System.Data.DataSet> object with a template file and returns the combination as a <xref:System.IO.Stream> object.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#40](~/add/codesnippet/csharp/t-system.web.hosting.vir_2_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/add/codesnippet/visualbasic/t-system.web.hosting.vir_2_1.vb)]  \n  \n The second example is the XML data file used to populate the <xref:System.Data.DataSet> object returned by the custom <xref:System.Web.Hosting.VirtualPathProvider> object. This XML data is used to demonstrate using the <xref:System.Web.Hosting.VirtualPathProvider>, VirtualFile, and <xref:System.Web.Hosting.VirtualDirectory> classes to retrieve data from external data, and is not intended to represent a production-quality data store.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<resource type=\"dir\"   \n          path=\"/vrDir\"   \n          parentPath=\"\"   \n          content=\"\">  \n  <resource type=\"file\"   \n            path=\"/vrDir/Level1FileA.vrf\"  \n            parentPath=\"/vrDir\"   \n            content=\"This is the content of file Level1FileA.\">  \n  </resource>  \n  <resource type=\"file\"   \n            path=\"/vrDir/Level1FileB.vrf\"  \n            parentPath=\"/vrDir\"   \n            content=\"This is the content of file Level1FileB.\">  \n  </resource>  \n  <resource type=\"dir\"   \n            path=\"/vrDir/Level2DirA\"   \n            parentPath=\"/vrDir\"   \n            content=\"\">  \n    <resource type=\"file\"   \n              path=\"/vrDir/Level2DirA/Level2FileA.vrf\"   \n              parentPath=\"/vrDir/Level2DirA\"   \n              content=\"This is the content of file Level2FileA.\">  \n    </resource>  \n    <resource type=\"file\"   \n              path=\"/vrDir/Level2DirA/Level2FileB.vrf\"  \n              parentPath=\"/vrDir/Level2DirA\"   \n              content=\"This is the content of file Level2FileB.\">  \n    </resource>  \n  </resource>  \n  <resource type=\"dir\"   \n            path=\"/vrDir/Level2DirB\"   \n            parentPath=\"/vrDir\"   \n            content=\"\">  \n    <resource type=\"file\"   \n              path=\"/vrDir/Level2DirB/Level2FileA.vrf\"   \n              parentPath=\"/vrDir/Level2DirB\"   \n              content=\"This is the content of file Level2FileA.\">  \n    </resource>  \n    <resource type=\"file\"   \n              path=\"/vrDir/Level2DirB/Level2FileB.vrf\"  \n              parentPath=\"/vrDir/Level2DirB\"   \n              content=\"This is the content of file Level2FileB.\">  \n    </resource>  \n  </resource>  \n</resource>  \n```  \n  \n The third example is the text file used as a template for the virtual file. Placeholders in the file are represented by text between percent (%) marks, such as `%file%` and `%content%`. Timestamps are used to monitor changes to cached virtual file data.  \n  \n```  \n<html>  \n  <head>  \n    <title>File name: %file%</title>  \n  </head>  \n  \n  <body>  \n    <h1>%file%</h1>  \n    <p>%content%</p>  \n    <p>Page timestamp: %pageTimestamp%<br>  \n       Data timestamp: %dataTimestamp%<br>  \n       Template timestamp: %templateTimestamp%</p>  \n  </body>  \n</html>  \n```"
  syntax:
    content: 'public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Web.Hosting.VirtualFileBase
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Web.Hosting.VirtualFileBase.InitializeLifetimeService
  - System.Web.Hosting.VirtualFileBase.Name
  - System.Web.Hosting.VirtualFileBase.VirtualPath
  platform:
  - net462
- uid: System.Web.Hosting.VirtualFile.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Hosting.VirtualFile
  langs:
  - csharp
  name: VirtualFile(String)
  nameWithType: VirtualFile.VirtualFile(String)
  fullName: System.Web.Hosting.VirtualFile.VirtualFile(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Hosting.VirtualFile&quot;></xref> class."
  remarks: ''
  example:
  - "The following code example is an implementation of the VirtualFile constructor that retrieves virtual file information from a <xref:System.Data.DataSet> object provided by a custom <xref:System.Web.Hosting.VirtualPathProvider> object. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualFile> class overview.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#41](~/add/codesnippet/csharp/m-system.web.hosting.vir_2_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_2_1.vb)]"
  syntax:
    content: protected VirtualFile (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "The virtual path to the resource represented by this instance."
  overload: System.Web.Hosting.VirtualFile.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualFile.IsDirectory
  id: IsDirectory
  parent: System.Web.Hosting.VirtualFile
  langs:
  - csharp
  name: IsDirectory
  nameWithType: VirtualFile.IsDirectory
  fullName: System.Web.Hosting.VirtualFile.IsDirectory
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Gets a value that indicates that this is a virtual resource that should be treated as a file."
  syntax:
    content: public override bool IsDirectory { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Hosting.VirtualFile.IsDirectory*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualFile.Open
  id: Open
  parent: System.Web.Hosting.VirtualFile
  langs:
  - csharp
  name: Open()
  nameWithType: VirtualFile.Open()
  fullName: System.Web.Hosting.VirtualFile.Open()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "When overridden in a derived class, returns a read-only stream to the virtual resource."
  remarks: "The Open method returns a stream containing the data treated as a file by the <xref:System.Web.Hosting.VirtualPathProvider> class. The stream is read-only and is seekable (the <xref:System.IO.Stream.CanSeek%2A> property is true)."
  example:
  - "The following code example is an implementation of the Open method that combines virtual-file-specific information with a template file and then returns the combination. The template file is cached to reduce the overhead of reading the file system multiple times to retrieve the template file. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualFile> class overview.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#42](~/add/codesnippet/csharp/m-system.web.hosting.vir_7_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_7_1.vb)]"
  syntax:
    content: public abstract System.IO.Stream Open ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "A read-only stream to the virtual file."
  overload: System.Web.Hosting.VirtualFile.Open*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Hosting.VirtualFileBase
  isExternal: false
  name: System.Web.Hosting.VirtualFileBase
- uid: System.Web.Hosting.VirtualFile.#ctor(System.String)
  parent: System.Web.Hosting.VirtualFile
  isExternal: false
  name: VirtualFile(String)
  nameWithType: VirtualFile.VirtualFile(String)
  fullName: System.Web.Hosting.VirtualFile.VirtualFile(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Hosting.VirtualFile.IsDirectory
  parent: System.Web.Hosting.VirtualFile
  isExternal: false
  name: IsDirectory
  nameWithType: VirtualFile.IsDirectory
  fullName: System.Web.Hosting.VirtualFile.IsDirectory
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Hosting.VirtualFile.Open
  parent: System.Web.Hosting.VirtualFile
  isExternal: false
  name: Open()
  nameWithType: VirtualFile.Open()
  fullName: System.Web.Hosting.VirtualFile.Open()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Web.Hosting.VirtualFile.#ctor*
  parent: System.Web.Hosting.VirtualFile
  isExternal: false
  name: VirtualFile
  nameWithType: VirtualFile.VirtualFile
- uid: System.Web.Hosting.VirtualFile.IsDirectory*
  parent: System.Web.Hosting.VirtualFile
  isExternal: false
  name: IsDirectory
  nameWithType: VirtualFile.IsDirectory
- uid: System.Web.Hosting.VirtualFile.Open*
  parent: System.Web.Hosting.VirtualFile
  isExternal: false
  name: Open
  nameWithType: VirtualFile.Open
