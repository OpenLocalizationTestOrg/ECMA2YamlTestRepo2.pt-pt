### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.BindingGroup
  id: BindingGroup
  children:
  - System.Windows.Data.BindingGroup.#ctor
  - System.Windows.Data.BindingGroup.BeginEdit
  - System.Windows.Data.BindingGroup.BindingExpressions
  - System.Windows.Data.BindingGroup.CancelEdit
  - System.Windows.Data.BindingGroup.CanRestoreValues
  - System.Windows.Data.BindingGroup.CommitEdit
  - System.Windows.Data.BindingGroup.GetValue(System.Object,System.String)
  - System.Windows.Data.BindingGroup.HasValidationError
  - System.Windows.Data.BindingGroup.IsDirty
  - System.Windows.Data.BindingGroup.Items
  - System.Windows.Data.BindingGroup.Name
  - System.Windows.Data.BindingGroup.NotifyOnValidationError
  - System.Windows.Data.BindingGroup.Owner
  - System.Windows.Data.BindingGroup.SharesProposedValues
  - System.Windows.Data.BindingGroup.TryGetValue(System.Object,System.String,System.Object@)
  - System.Windows.Data.BindingGroup.UpdateSources
  - System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError
  - System.Windows.Data.BindingGroup.ValidateWithoutUpdate
  - System.Windows.Data.BindingGroup.ValidationErrors
  - System.Windows.Data.BindingGroup.ValidationRules
  langs:
  - csharp
  name: BindingGroup
  nameWithType: BindingGroup
  fullName: System.Windows.Data.BindingGroup
  type: Class
  summary: "Contains a collection of bindings and <xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref> objects that are used to validate an object."
  remarks: "A BindingGroup creates a relationship between multiple bindings, which can be validated and updated together. For example, suppose that an application prompts the user to enter an address. The application then populates an object of type `Address`, which has the properties, `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided. The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is data bound to one of the objectâ€™s properties. You can use a <xref:System.Windows.Controls.ValidationRule> in a BindingGroup to validate the `Address` object. If the bindings participate in the same BindingGroup, you can ensure that the zip-code is valid for the country of the address.       You set the <xref:System.Windows.FrameworkElement.BindingGroup%2A> property on <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>. Child elements inherit the BindingGroup from their parent elements, just as with any other inheritable property. A binding on a descendent element is added to a BindingGroup if one of the following situations occurs:      -   The binding&quot;s source and the <xref:System.Windows.FrameworkElement.DataContext%2A> of the element that has the BindingGroup are the same object and the <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> property is not set.      -   The <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> property of the binding is equal to the <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.FrameworkContentElement.BindingGroup%2A> and they are not explicitly set to `null`.       In the example of the address, suppose that the <xref:System.Windows.FrameworkElement.DataContext%2A> of the <xref:System.Windows.Controls.Panel> is set to the object of type `Address`. The binding for each <xref:System.Windows.Controls.TextBox> is added to the BindingGroup of the panel.       You add <xref:System.Windows.Controls.ValidationRule> objects to a BindingGroup. The BindingGroup is passed as the first parameter of the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method when the <xref:System.Windows.Controls.ValidationRule> runs. You can use the <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> or <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> method on that BindingGroup to get the proposed values of the object, and the <xref:System.Windows.Data.BindingGroup.Items%2A> property to get the sources of the bindings.       A BindingGroup updates the sources of the binding at the same time instead of each binding being updated separately. When you call one of the methods to validate the data (<xref:System.Windows.Data.BindingGroup.ValidateWithoutUpdate%2A>, <xref:System.Windows.Data.BindingGroup.UpdateSources%2A>, or <xref:System.Windows.Data.BindingGroup.CommitEdit%2A>), the binding for each <xref:System.Windows.Controls.TextBox> in the example is validated and potentially updated. When a binding is part of a BindingGroup, the source of the binding is not updated until you call <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> or <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> on the BindingGroup, unless you explicitly set the <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> property."
  example:
  - "The following examples create an application that prompts the user to enter the description and price of an item and the date that the offer expires. The application displays the current information for the item below the form. The user can submit or cancel the changes.  \n  \n The application does the following to achieve this behavior.  \n  \n-   Creates a BindingGroup and adds it the root <xref:System.Windows.Controls.StackPanel> when it creates the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] of the application.  \n  \n-   Calls <xref:System.Windows.Data.BindingGroup.BeginEdit%2A>, <xref:System.Windows.Data.BindingGroup.CommitEdit%2A>, and <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> in the application's logic to enable rolling back changes.  \n  \n-   Calls <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> in a <xref:System.Windows.Controls.ValidationRule.Validate%2A> method to get the user's input and then check that an item over 100 dollars is available for at least seven days.  \n  \n The following example creates the [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] of the application. The root <xref:System.Windows.Controls.StackPanel> has a BindingGroup that contains a <xref:System.Windows.Controls.ValidationRule> that validates the item, as described previously. The binding objects on the `Price` property and the `OfferExpires` property become part of the BindingGroup and each binding has a <xref:System.Windows.Controls.ValidationRule> to make sure that price and date, respectively, are valid values. The validation rules for the individual properties run before the <xref:System.Windows.Controls.ValidationRule> on the BindingGroup.  \n  \n [!code-xml[BindingGroupSnippets#WindowLayout](~/add/codesnippet/xaml/BindingGroupSnippets/Window1.xaml#windowlayout)]  \n  \n The following example shows the event handlers for the application. When the user clicks the Submit button, the application calls <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> to run each <xref:System.Windows.Controls.ValidationRule> that is associated with the BindingGroup. If each <xref:System.Windows.Controls.ValidationRule> succeeds, <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> saves the values to the object and ends the edit transaction. If <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> is successful, the application begins another edit transaction. When a <xref:System.Windows.Controls.ValidationRule> fails, the <xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> event occurs because the application set <xref:System.Windows.Data.BindingGroup.NotifyOnValidationError%2A> to `true` on the BindingGroup (in the previous example). `ItemError` handles the <xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> event and displays information about the validation error to the user. The example also handles the <xref:System.Windows.FrameworkElement.Loaded> event for the <xref:System.Windows.Controls.StackPanel> and the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event for the **Cancel** button.  \n  \n [!code-cs[BindingGroupSnippets#WindowLogic](~/add/codesnippet/csharp/BindingGroupSnippets/Window1.xaml.cs#windowlogic)]\n [!code-vb[BindingGroupSnippets#WindowLogic](~/add/codesnippet/visualbasic/bindinggroupsnippets/window1.xaml.vb#windowlogic)]  \n  \n The following example shows the custom <xref:System.Windows.Controls.ValidationRule> `ValidateDateAndPrice`, which was added to the BindingGroup in the first example. The <xref:System.Windows.Controls.ValidationRule> uses the BindingGroup in its <xref:System.Windows.Controls.ValidationRule.Validate%2A> method to get the values the user entered into the form, and checks that if an item is over 100 dollars, it will be available for at least seven days.  \n  \n [!code-cs[BindingGroupSnippets#ValidateObject](~/add/codesnippet/csharp/BindingGroupSnippets/Data.cs#validateobject)]\n [!code-vb[BindingGroupSnippets#ValidateObject](~/add/codesnippet/visualbasic/bindinggroupsnippets/data.vb#validateobject)]"
  syntax:
    content: 'public class BindingGroup : System.Windows.DependencyObject'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.#ctor
  id: '#ctor'
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: BindingGroup()
  nameWithType: BindingGroup.BindingGroup()
  fullName: System.Windows.Data.BindingGroup.BindingGroup()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> class."
  syntax:
    content: public BindingGroup ();
    parameters: []
  overload: System.Windows.Data.BindingGroup.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.BeginEdit
  id: BeginEdit
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: BeginEdit()
  nameWithType: BindingGroup.BeginEdit()
  fullName: System.Windows.Data.BindingGroup.BeginEdit()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Begins an edit transaction on the sources in the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>."
  remarks: "If the sources in the <xref:System.Windows.Data.BindingGroup> support discarding pending changes, you can call BeginEdit to begin the edit transaction, call <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> to save the pending changes, call <xref:System.Windows.Data.BindingGroup.CancelEdit%2A> to discard the pending changes.       For each object in <xref:System.Windows.Data.BindingGroup.Items%2A> that implements <xref:System.ComponentModel.IEditableObject>, BeginEdit calls <xref:System.ComponentModel.IEditableObject.BeginEdit%2A?displayProperty=fullName>"
  example:
  - "The following example calls BeginEdit when a window loads to begin the edit transaction.  \n  \n [!code-cs[BindingGroupSnippets#BeginEdit](~/add/codesnippet/csharp/BindingGroupSnippets/Window1.xaml.cs#beginedit)]\n [!code-vb[BindingGroupSnippets#BeginEdit](~/add/codesnippet/visualbasic/bindinggroupsnippets/window1.xaml.vb#beginedit)]"
  syntax:
    content: public void BeginEdit ();
    parameters: []
  overload: System.Windows.Data.BindingGroup.BeginEdit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.BindingExpressions
  id: BindingExpressions
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: BindingExpressions
  nameWithType: BindingGroup.BindingExpressions
  fullName: System.Windows.Data.BindingGroup.BindingExpressions
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets a collection of <xref href=&quot;System.Windows.Data.BindingExpression&quot;></xref> objects that contains information for each Binding in the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>."
  remarks: "A <xref:System.Windows.Data.BindingExpression> belongs to a <xref:System.Windows.Data.BindingGroup> if one of the following cases occurs:      -   The binding&quot;s source and the <xref:System.Windows.FrameworkElement.DataContext%2A> of the element that has the <xref:System.Windows.Data.BindingGroup> are the same object and the <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> is not set.      -   The <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> property of the binding and the <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> are set to the same non-null value and the <xref:System.Windows.Data.BindingGroup> belongs to a parent element of the binding&quot;s target element.      -   You add a <xref:System.Windows.Data.BindingExpression> to BindingExpressions."
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Windows.Data.BindingExpressionBase> BindingExpressions { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Windows.Data.BindingExpressionBase}
      description: "A collection of <xref href=&quot;System.Windows.Data.BindingExpression&quot;></xref> objects that contains information for each binding in the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.BindingExpressions*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.CancelEdit
  id: CancelEdit
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: CancelEdit()
  nameWithType: BindingGroup.CancelEdit()
  fullName: System.Windows.Data.BindingGroup.CancelEdit()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Ends the edit transaction and discards the pending changes."
  remarks: "This method causes the sources to discard the pending changes, if a source object is capable of doing so and end the edit transaction. Then the method updates the target properties with the saved source values.       For each object in <xref:System.Windows.Data.BindingGroup.Items%2A> that implements <xref:System.ComponentModel.IEditableObject>, CancelEdit calls <xref:System.ComponentModel.IEditableObject.CancelEdit%2A?displayProperty=fullName>"
  example:
  - "The following example calls CancelEdit to discard the pending changes and then calls <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> to prepare the source to be re-edited.  \n  \n [!code-cs[BindingGroupSnippets#CancelEdit](~/add/codesnippet/csharp/BindingGroupSnippets/Window1.xaml.cs#canceledit)]\n [!code-vb[BindingGroupSnippets#CancelEdit](~/add/codesnippet/visualbasic/bindinggroupsnippets/window1.xaml.vb#canceledit)]"
  syntax:
    content: public void CancelEdit ();
    parameters: []
  overload: System.Windows.Data.BindingGroup.CancelEdit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.CanRestoreValues
  id: CanRestoreValues
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: CanRestoreValues
  nameWithType: BindingGroup.CanRestoreValues
  fullName: System.Windows.Data.BindingGroup.CanRestoreValues
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets whether each source in the binding can discard pending changes and restore the original values."
  remarks: "A source can discard pending changes if it implements <xref:System.ComponentModel.IEditableObject>."
  syntax:
    content: public bool CanRestoreValues { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if each source in the binding can discard pending changes and restore the original values; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.CanRestoreValues*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.CommitEdit
  id: CommitEdit
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: CommitEdit()
  nameWithType: BindingGroup.CommitEdit()
  fullName: System.Windows.Data.BindingGroup.CommitEdit()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Runs all the <xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref> objects and updates the binding sources if all validation rules succeed."
  remarks: "If every <xref:System.Windows.Controls.ValidationRule> succeeds, this method causes the sources to commit the pending changes and end the edit transaction, if a source object is capable of doing so.       For each object in <xref:System.Windows.Data.BindingGroup.Items%2A> that implements <xref:System.ComponentModel.IEditableObject>, CommitEdit calls <xref:System.ComponentModel.IEditableObject.EndEdit%2A?displayProperty=fullName>"
  example:
  - "The following example calls CommitEdit to save the pending changes and then calls <xref:System.Windows.Data.BindingGroup.BeginEdit%2A> to prepare the source to be re-edited.  \n  \n [!code-cs[BindingGroupSnippets#BeginEdit](~/add/codesnippet/csharp/BindingGroupSnippets/Window1.xaml.cs#beginedit)]\n [!code-vb[BindingGroupSnippets#BeginEdit](~/add/codesnippet/visualbasic/bindinggroupsnippets/window1.xaml.vb#beginedit)]"
  syntax:
    content: public bool CommitEdit ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if every <xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref> succeeds and the values are committed to the sources; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.CommitEdit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.GetValue(System.Object,System.String)
  id: GetValue(System.Object,System.String)
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: GetValue(Object,String)
  nameWithType: BindingGroup.GetValue(Object,String)
  fullName: System.Windows.Data.BindingGroup.GetValue(Object,String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Returns the proposed value for the specified property and item."
  remarks: "Use this method in the <xref:System.Windows.Controls.ValidationRule.Validate%2A?displayProperty=fullName> method to get the value to be committed to the source. The type of the return value depends on the stage at which the <xref:System.Windows.Controls.ValidationRule> occurs. For example, if a <xref:System.Windows.Controls.TextBox> is data bound to a property of type integer and the <xref:System.Windows.Controls.ValidationRule> that calls GetValue has its <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> set to <xref:System.Windows.Controls.ValidationStep>, the method returns a string. If the <xref:System.Windows.Controls.ValidationRule> has its <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> set to <xref:System.Windows.Controls.ValidationStep>, the method returns whatever type that is returned by the binding&quot;s converter. In this example, GetValue usually returns an integer."
  example:
  - "The following example is part of an application that prompts the user to enter multiple customers and assign a sales representative to each customer. The application checks that the sales representative and the customer belong to the same region. The example shows the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method, which uses the GetValue method to get values that the customer entered.  \n  \n [!code-cs[BindingGroupSnippets#ItemBindGroupValidationRule](~/add/codesnippet/csharp/BindingGroupSnippets/Window2.xaml.cs#itembindgroupvalidationrule)]\n [!code-vb[BindingGroupSnippets#ItemBindGroupValidationRule](~/add/codesnippet/visualbasic/bindinggroupsnippets/window2.xaml.vb#itembindgroupvalidationrule)]"
  syntax:
    content: public object GetValue (object item, string propertyName);
    parameters:
    - id: item
      type: System.Object
      description: "The object that contains the specified property."
    - id: propertyName
      type: System.String
      description: "The property whose proposed value to get."
    return:
      type: System.Object
      description: "The proposed property value."
  overload: System.Windows.Data.BindingGroup.GetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "There is not a binding for the specified item and property."
  - type: System.Windows.Data.ValueUnavailableException
    commentId: T:System.Windows.Data.ValueUnavailableException
    description: "The value of the specified property is not available, due to a conversion error or because an earlier validation rule failed."
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.HasValidationError
  id: HasValidationError
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: HasValidationError
  nameWithType: BindingGroup.HasValidationError
  fullName: System.Windows.Data.BindingGroup.HasValidationError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets a value that indicates whether the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> has a failed validation rule."
  syntax:
    content: public bool HasValidationError { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> has a failed validation rule; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.HasValidationError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.IsDirty
  id: IsDirty
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: IsDirty
  nameWithType: BindingGroup.IsDirty
  fullName: System.Windows.Data.BindingGroup.IsDirty
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets or sets a value that indicates whether the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> contains a proposed value that has not been written to the source."
  syntax:
    content: public bool IsDirty { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> contains a proposed value that has not been written to the source; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.IsDirty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.Items
  id: Items
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: Items
  nameWithType: BindingGroup.Items
  fullName: System.Windows.Data.BindingGroup.Items
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets the sources that are used by the Binding objects in the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>."
  remarks: "Each object that is used as a source is added into the Items property once, even if the object is used as the source for multiple bindings. Often, there is just one item in Items, which is the object that is the <xref:System.Windows.FrameworkElement.DataContext%2A> of the element that uses the <xref:System.Windows.Data.BindingGroup>. It is possible for a <xref:System.Windows.Data.BindingGroup> to have multiple sources, however. For example, if Binding objects share the same <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> but use different source objects, each object that is used as a source is in Items.       There can also be multiple objects in Items if the path of a Binding resolves to a nested property of the source. For example, suppose a <xref:System.Windows.Controls.TextBox> control&quot;s binding is a part of a <xref:System.Windows.Data.BindingGroup> and its <xref:System.Windows.FrameworkElement.DataContext%2A> is a `Customer` object, which has a property of type `Address`. If the <xref:System.Windows.Data.Binding.Path%2A> of the <xref:System.Windows.Data.Binding> is the `Address.ZipCode` property, the `Address` is added to the Items property."
  example:
  - "The following examples are part of an application that checks whether the user has set the properties of two objects to equal values. The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which are data bound to a different source. The binding of the first <xref:System.Windows.Controls.TextBox> gets its source, `object1`, from the <xref:System.Windows.FrameworkElement.DataContext%2A> of the <xref:System.Windows.Controls.TextBox> control's parent element (the <xref:System.Windows.Controls.StackPanel>). On the second <xref:System.Windows.Controls.TextBox>, the source of the binding is set to `object2`. The example also creates a <xref:System.Windows.Controls.Label> that displays validation errors.  \n  \n [!code-xml[BindingGroupSnippets#BindingGroupName](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#bindinggroupname)]  \n[!code-xml[BindingGroupSnippets#ValidationAdornerSite](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#validationadornersite)]  \n  \n The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses. In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.  \n  \n [!code-cs[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/csharp/BindingGroupSnippets/Window3.xaml.cs#bindinggroupnamevalidationrule)]\n [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/visualbasic/bindinggroupsnippets/window3.xaml.vb#bindinggroupnamevalidationrule)]"
  syntax:
    content: public System.Collections.IList Items { get; }
    return:
      type: System.Collections.IList
      description: "The sources that are used by the Binding objects in the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.Items*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.Name
  id: Name
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: Name
  nameWithType: BindingGroup.Name
  fullName: System.Windows.Data.BindingGroup.Name
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets or sets the name that identifies the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>, which can be used to include and exclude Binding objects in the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>."
  remarks: "If Name is `null`, bindings that have a source that is the same object as the <xref:System.Windows.FrameworkElement.DataContext%2A> of the element that has the <xref:System.Windows.Data.BindingGroup> participate in the <xref:System.Windows.Data.BindingGroup>.       You can include bindings that have a source that is different from the <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> by setting Name of the <xref:System.Windows.Data.BindingGroup> and the <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> property of a binding to the same value. You can exclude bindings that have the same source as <xref:System.Windows.FrameworkElement.DataContext%2A> of the parent element that has the <xref:System.Windows.Data.BindingGroup> by setting Name of the <xref:System.Windows.Data.BindingGroup> and the <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> property of a binding to different values."
  example:
  - "The following examples are part of an application that checks whether the user has set the properties of two objects to equal values. The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which are data bound to a different source. The binding of the first <xref:System.Windows.Controls.TextBox> is part of the <xref:System.Windows.Data.BindingGroup> because the <xref:System.Windows.Controls.TextBox> inherits the <xref:System.Windows.FrameworkElement.DataContext%2A> and <xref:System.Windows.Data.BindingGroup> from its parent <xref:System.Windows.Controls.StackPanel>.  \n  \n The binding on the second <xref:System.Windows.Controls.TextBox> is part of the <xref:System.Windows.Data.BindingGroup> because the Name of the <xref:System.Windows.Data.BindingGroup> and the <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> of the <xref:System.Windows.Data.Binding> are both set to `bindingGroup`.  \n  \n [!code-xml[BindingGroupSnippets#BindingGroupName](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#bindinggroupname)]  \n[!code-xml[BindingGroupSnippets#ValidationAdornerSite](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#validationadornersite)]  \n  \n The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses. In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.  \n  \n [!code-cs[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/csharp/BindingGroupSnippets/Window3.xaml.cs#bindinggroupnamevalidationrule)]\n [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/visualbasic/bindinggroupsnippets/window3.xaml.vb#bindinggroupnamevalidationrule)]"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "The name that identifies the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.NotifyOnValidationError
  id: NotifyOnValidationError
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: NotifyOnValidationError
  nameWithType: BindingGroup.NotifyOnValidationError
  fullName: System.Windows.Data.BindingGroup.NotifyOnValidationError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets or sets whether the &lt;xref:System.Windows.Controls.Validation.Error?displayProperty=fullName&gt; event occurs when the state of a <xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref> changes."
  remarks: "The <xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> attached event occurs on the element that has the <xref:System.Windows.Data.BindingGroup>."
  example:
  - "The following example creates a <xref:System.Windows.Data.BindingGroup> and sets NotifyOnValidationError to `true` so that the application can handle the <xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> event when a <xref:System.Windows.Controls.ValidationRule> fails.  \n  \n [!code-xml[BindingGroupSnippets#BindingGroup](~/add/codesnippet/xaml/BindingGroupSnippets/Window1.xaml#bindinggroup)]  \n  \n The following example handles the <xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> event.  \n  \n [!code-cs[BindingGroupSnippets#ErrorHandler](~/add/codesnippet/csharp/BindingGroupSnippets/Window1.xaml.cs#errorhandler)]\n [!code-vb[BindingGroupSnippets#ErrorHandler](~/add/codesnippet/visualbasic/bindinggroupsnippets/window1.xaml.vb#errorhandler)]"
  syntax:
    content: public bool NotifyOnValidationError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the &lt;xref:System.Windows.Controls.Validation.Error?displayProperty=fullName&gt; event occurs when the state of a <xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref> changes; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.NotifyOnValidationError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.Owner
  id: Owner
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: Owner
  nameWithType: BindingGroup.Owner
  fullName: System.Windows.Data.BindingGroup.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets the object that this <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> is assigned to."
  syntax:
    content: public System.Windows.DependencyObject Owner { get; }
    return:
      type: System.Windows.DependencyObject
      description: "The object that this <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> is assigned to."
  overload: System.Windows.Data.BindingGroup.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.SharesProposedValues
  id: SharesProposedValues
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: SharesProposedValues
  nameWithType: BindingGroup.SharesProposedValues
  fullName: System.Windows.Data.BindingGroup.SharesProposedValues
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets or sets a value that indicates whether the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> reuses target values that have not been committed to the source."
  remarks: "A proposed value is a value that has been changed on the target of a binding, but has not been committed to the source. For example, suppose that there is a two-way binding on a <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> property is set to <xref:System.Windows.Data.UpdateSourceTrigger>. If the user changes the value of the <xref:System.Windows.Controls.TextBox>, the proposed value is the value that is in the <xref:System.Windows.Controls.TextBox> before it is committed to source.       When SharesProposedValues is `true`, the <xref:System.Windows.Data.BindingGroup> uses the proposed value when one binding leaves the BindingGroup and another Binding with the same source joins the BindingGroup.  For example, suppose that an application enables a user to edit multiple fields and update the source object by clicking a button. When a field is not being edited, the application displays it in a <xref:System.Windows.Controls.TextBlock>. When the user begins to edit a field, the application replaces the <xref:System.Windows.Controls.TextBlock> with a <xref:System.Windows.Controls.TextBox>. When the user finishes editing that field, the application replaces the <xref:System.Windows.Controls.TextBox> with a <xref:System.Windows.Controls.TextBlock>. Because the source is not updated until the user clicks the button, there must be a way for the <xref:System.Windows.Controls.TextBlock> to display the proposed value. By setting SharesProposedValues to `true`, the application will display the user&quot;s changes to a field even when the source has not been updated."
  syntax:
    content: public bool SharesProposedValues { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> reuses target values that have not been committed to the source; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.SharesProposedValues*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.TryGetValue(System.Object,System.String,System.Object@)
  id: TryGetValue(System.Object,System.String,System.Object@)
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: TryGetValue(Object,String,Object)
  nameWithType: BindingGroup.TryGetValue(Object,String,Object)
  fullName: System.Windows.Data.BindingGroup.TryGetValue(Object,String,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Attempts to get the proposed value for the specified property and item."
  remarks: "TryGetValue returns `false` if there is not a binding for the specified item and property or if the value of the specified property is not available, due to a conversion error or because an earlier validation rule failed.       Use this method in the <xref:System.Windows.Controls.ValidationRule.Validate%2A?displayProperty=fullName> method to get the value to be committed to the source. The type `value` depends on the stage at which the <xref:System.Windows.Controls.ValidationRule> occurs. For example, if a <xref:System.Windows.Controls.TextBox> is data bound to a property of type integer, `value` is a string if the <xref:System.Windows.Controls.ValidationRule> that calls TryGetValue has its <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> set to <xref:System.Windows.Controls.ValidationStep>. If the <xref:System.Windows.Controls.ValidationRule> has its <xref:System.Windows.Controls.ValidationRule.ValidationStep%2A> set to <xref:System.Windows.Controls.ValidationStep>, the type of `value` is whatever type that is returned by the binding&quot;s converter. In this example, `value` is usually an integer."
  example:
  - "The following example creates a custom <xref:System.Windows.Controls.ValidationRule> named `ValidateDateAndPrice`. In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method, the example uses the TryGetValue method and the <xref:System.Windows.Data.BindingGroup.Items%2A> property to get the values the user entered into the form. Then the example checks that if an item is over 100 dollars, it will be available for at least seven days. This example is part of a larger example on the <xref:System.Windows.Data.BindingGroup> class  \n  \n [!code-cs[BindingGroupSnippets#ValidateObject](~/add/codesnippet/csharp/BindingGroupSnippets/Data.cs#validateobject)]\n [!code-vb[BindingGroupSnippets#ValidateObject](~/add/codesnippet/visualbasic/bindinggroupsnippets/data.vb#validateobject)]"
  syntax:
    content: public bool TryGetValue (object item, string propertyName, out object value);
    parameters:
    - id: item
      type: System.Object
      description: "The object that contains the specified property."
    - id: propertyName
      type: System.String
      description: "The property whose proposed value to get."
    - id: value
      type: System.Object
      description: "When this method returns, contains an object that represents the proposed property value. This parameter is passed uninitialized."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if value is the proposed value for the specified property; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.TryGetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.UpdateSources
  id: UpdateSources
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: UpdateSources()
  nameWithType: BindingGroup.UpdateSources()
  fullName: System.Windows.Data.BindingGroup.UpdateSources()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Runs the converter on the binding and the <xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref> objects that have the <xref:System.Windows.Controls.ValidationRule.ValidationStep*> property set to <xref href=&quot;System.Windows.Controls.ValidationStep&quot;></xref>, <xref href=&quot;System.Windows.Controls.ValidationStep&quot;></xref>, or <xref href=&quot;System.Windows.Controls.ValidationStep&quot;></xref> and saves the values of the targets to the source objects if all the validation rules succeed."
  remarks: "This method updates the source if every <xref:System.Windows.Controls.ValidationRule> succeeds, but it does not cause the sources to commit the pending changes and end the edit transaction. That is, if the source object implements <xref:System.ComponentModel.IEditableObject>. Calling this method does not cause <xref:System.ComponentModel.IEditableObject.EndEdit%2A> to be called. Use the <xref:System.Windows.Data.BindingGroup.CommitEdit%2A> method to have the sources commit the pending changes."
  example:
  - "The following example is part of an application that prompts the user to enter multiple customers and assign a sales representative to each customer. The application checks that the sales representative and the customer belong to the same region. The example calls UpdateSources to validate the bindings and save the values to the source if all the validation rules succeed.  \n  \n [!code-cs[BindingGroupSnippets#UpdateSources](~/add/codesnippet/csharp/BindingGroupSnippets/Window2.xaml.cs#updatesources)]\n [!code-vb[BindingGroupSnippets#UpdateSources](~/add/codesnippet/visualbasic/bindinggroupsnippets/window2.xaml.vb#updatesources)]"
  syntax:
    content: public bool UpdateSources ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if all validation rules succeed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.UpdateSources*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError
  id: ValidatesOnNotifyDataError
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: ValidatesOnNotifyDataError
  nameWithType: BindingGroup.ValidatesOnNotifyDataError
  fullName: System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets or sets a value that indicates whether to include the <xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;></xref>."
  remarks: "When ValidatesOnNotifyDataError is `true`, the binding checks for and reports errors that are raised by a data source that implements <xref:System.ComponentModel.INotifyDataErrorInfo>."
  syntax:
    content: public bool ValidatesOnNotifyDataError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include the <xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.ValidateWithoutUpdate
  id: ValidateWithoutUpdate
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: ValidateWithoutUpdate()
  nameWithType: BindingGroup.ValidateWithoutUpdate()
  fullName: System.Windows.Data.BindingGroup.ValidateWithoutUpdate()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Runs the converter on the binding and the <xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref> objects that have the <xref:System.Windows.Controls.ValidationRule.ValidationStep*> property set to <xref href=&quot;System.Windows.Controls.ValidationStep&quot;></xref> or <xref href=&quot;System.Windows.Controls.ValidationStep&quot;></xref>."
  remarks: "The sources are not updated when you call this method."
  syntax:
    content: public bool ValidateWithoutUpdate ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the validation rules succeed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.ValidateWithoutUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.ValidationErrors
  id: ValidationErrors
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: ValidationErrors
  nameWithType: BindingGroup.ValidationErrors
  fullName: System.Windows.Data.BindingGroup.ValidationErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets a collection of <xref href=&quot;System.Windows.Controls.ValidationError&quot;></xref> objects that caused the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> to be invalid."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Controls.ValidationError> ValidationErrors { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Windows.Controls.ValidationError}
      description: "A collection of <xref href=&quot;System.Windows.Controls.ValidationError&quot;></xref> objects that caused <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref> to be invalid.  The value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if there are no errors."
  overload: System.Windows.Data.BindingGroup.ValidationErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingGroup.ValidationRules
  id: ValidationRules
  parent: System.Windows.Data.BindingGroup
  langs:
  - csharp
  name: ValidationRules
  nameWithType: BindingGroup.ValidationRules
  fullName: System.Windows.Data.BindingGroup.ValidationRules
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Gets a collection of <xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref> objects that validate the source objects in the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>."
  remarks: "When a <xref:System.Windows.Controls.ValidationRule> is added to a <xref:System.Windows.Data.BindingGroup>, the <xref:System.Windows.Data.BindingGroup> is passed in as the first parameter of the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. You can get the proposed values of the object by using the <xref:System.Windows.Data.BindingGroup.TryGetValue%2A> or <xref:System.Windows.Data.BindingGroup.GetValue%28System.Object%2CSystem.String%29> method. You can get the objects that are the sources of the bindings from the <xref:System.Windows.Data.BindingGroup.Items%2A> property."
  example:
  - "The following example adds the custom <xref:System.Windows.Controls.ValidationRule>, `ValidateDateAndPrice`, to the <xref:System.Windows.Data.BindingGroup>.  \n  \n [!code-xml[BindingGroupSnippets#BindingGroup](~/add/codesnippet/xaml/BindingGroupSnippets/Window1.xaml#bindinggroup)]  \n  \n The following example shows the `ValidateDateAndPrice` class. The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method uses the <xref:System.Windows.Data.BindingGroup> to get the values the user entered into the form, and checks that if an item is over 100 dollars, it will be available for at least seven days.  \n  \n [!code-cs[BindingGroupSnippets#ValidateObject](~/add/codesnippet/csharp/BindingGroupSnippets/Data.cs#validateobject)]\n [!code-vb[BindingGroupSnippets#ValidateObject](~/add/codesnippet/visualbasic/bindinggroupsnippets/data.vb#validateobject)]"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule> ValidationRules { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
      description: "A collection of <xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref> objects that validate the source objects in the <xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>."
  overload: System.Windows.Data.BindingGroup.ValidationRules*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.DependencyObject
  isExternal: false
  name: System.Windows.DependencyObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Data.ValueUnavailableException
  parent: System.Windows.Data
  isExternal: false
  name: ValueUnavailableException
  nameWithType: ValueUnavailableException
  fullName: System.Windows.Data.ValueUnavailableException
- uid: System.Windows.Data.BindingGroup.#ctor
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: BindingGroup()
  nameWithType: BindingGroup.BindingGroup()
  fullName: System.Windows.Data.BindingGroup.BindingGroup()
- uid: System.Windows.Data.BindingGroup.BeginEdit
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: BeginEdit()
  nameWithType: BindingGroup.BeginEdit()
  fullName: System.Windows.Data.BindingGroup.BeginEdit()
- uid: System.Windows.Data.BindingGroup.BindingExpressions
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: BindingExpressions
  nameWithType: BindingGroup.BindingExpressions
  fullName: System.Windows.Data.BindingGroup.BindingExpressions
- uid: System.Collections.ObjectModel.Collection{System.Windows.Data.BindingExpressionBase}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<BindingExpressionBase>
  nameWithType: Collection<BindingExpressionBase>
  fullName: System.Collections.ObjectModel.Collection<System.Windows.Data.BindingExpressionBase>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Windows.Data.BindingExpressionBase>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Data.BindingExpressionBase
    name: BindingExpressionBase
    nameWithType: BindingExpressionBase
    fullName: BindingExpressionBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.BindingGroup.CancelEdit
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: CancelEdit()
  nameWithType: BindingGroup.CancelEdit()
  fullName: System.Windows.Data.BindingGroup.CancelEdit()
- uid: System.Windows.Data.BindingGroup.CanRestoreValues
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: CanRestoreValues
  nameWithType: BindingGroup.CanRestoreValues
  fullName: System.Windows.Data.BindingGroup.CanRestoreValues
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Data.BindingGroup.CommitEdit
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: CommitEdit()
  nameWithType: BindingGroup.CommitEdit()
  fullName: System.Windows.Data.BindingGroup.CommitEdit()
- uid: System.Windows.Data.BindingGroup.GetValue(System.Object,System.String)
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: GetValue(Object,String)
  nameWithType: BindingGroup.GetValue(Object,String)
  fullName: System.Windows.Data.BindingGroup.GetValue(Object,String)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Data.BindingGroup.HasValidationError
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: HasValidationError
  nameWithType: BindingGroup.HasValidationError
  fullName: System.Windows.Data.BindingGroup.HasValidationError
- uid: System.Windows.Data.BindingGroup.IsDirty
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: IsDirty
  nameWithType: BindingGroup.IsDirty
  fullName: System.Windows.Data.BindingGroup.IsDirty
- uid: System.Windows.Data.BindingGroup.Items
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: Items
  nameWithType: BindingGroup.Items
  fullName: System.Windows.Data.BindingGroup.Items
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Windows.Data.BindingGroup.Name
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: Name
  nameWithType: BindingGroup.Name
  fullName: System.Windows.Data.BindingGroup.Name
- uid: System.Windows.Data.BindingGroup.NotifyOnValidationError
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: BindingGroup.NotifyOnValidationError
  fullName: System.Windows.Data.BindingGroup.NotifyOnValidationError
- uid: System.Windows.Data.BindingGroup.Owner
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: Owner
  nameWithType: BindingGroup.Owner
  fullName: System.Windows.Data.BindingGroup.Owner
- uid: System.Windows.Data.BindingGroup.SharesProposedValues
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: SharesProposedValues
  nameWithType: BindingGroup.SharesProposedValues
  fullName: System.Windows.Data.BindingGroup.SharesProposedValues
- uid: System.Windows.Data.BindingGroup.TryGetValue(System.Object,System.String,System.Object@)
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: TryGetValue(Object,String,Object)
  nameWithType: BindingGroup.TryGetValue(Object,String,Object)
  fullName: System.Windows.Data.BindingGroup.TryGetValue(Object,String,Object)
- uid: System.Windows.Data.BindingGroup.UpdateSources
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: UpdateSources()
  nameWithType: BindingGroup.UpdateSources()
  fullName: System.Windows.Data.BindingGroup.UpdateSources()
- uid: System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: ValidatesOnNotifyDataError
  nameWithType: BindingGroup.ValidatesOnNotifyDataError
  fullName: System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError
- uid: System.Windows.Data.BindingGroup.ValidateWithoutUpdate
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: ValidateWithoutUpdate()
  nameWithType: BindingGroup.ValidateWithoutUpdate()
  fullName: System.Windows.Data.BindingGroup.ValidateWithoutUpdate()
- uid: System.Windows.Data.BindingGroup.ValidationErrors
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: ValidationErrors
  nameWithType: BindingGroup.ValidationErrors
  fullName: System.Windows.Data.BindingGroup.ValidationErrors
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Windows.Controls.ValidationError}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ValidationError>
  nameWithType: ReadOnlyCollection<ValidationError>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Controls.ValidationError>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Windows.Controls.ValidationError>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.ValidationError
    name: ValidationError
    nameWithType: ValidationError
    fullName: ValidationError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.BindingGroup.ValidationRules
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: ValidationRules
  nameWithType: BindingGroup.ValidationRules
  fullName: System.Windows.Data.BindingGroup.ValidationRules
- uid: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ValidationRule>
  nameWithType: Collection<ValidationRule>
  fullName: System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Windows.Controls.ValidationRule>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.ValidationRule
    name: ValidationRule
    nameWithType: ValidationRule
    fullName: ValidationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.BindingGroup.#ctor*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: BindingGroup
  nameWithType: BindingGroup.BindingGroup
- uid: System.Windows.Data.BindingGroup.BeginEdit*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: BeginEdit
  nameWithType: BindingGroup.BeginEdit
- uid: System.Windows.Data.BindingGroup.BindingExpressions*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: BindingExpressions
  nameWithType: BindingGroup.BindingExpressions
- uid: System.Windows.Data.BindingGroup.CancelEdit*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: CancelEdit
  nameWithType: BindingGroup.CancelEdit
- uid: System.Windows.Data.BindingGroup.CanRestoreValues*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: CanRestoreValues
  nameWithType: BindingGroup.CanRestoreValues
- uid: System.Windows.Data.BindingGroup.CommitEdit*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: CommitEdit
  nameWithType: BindingGroup.CommitEdit
- uid: System.Windows.Data.BindingGroup.GetValue*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: GetValue
  nameWithType: BindingGroup.GetValue
- uid: System.Windows.Data.BindingGroup.HasValidationError*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: HasValidationError
  nameWithType: BindingGroup.HasValidationError
- uid: System.Windows.Data.BindingGroup.IsDirty*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: IsDirty
  nameWithType: BindingGroup.IsDirty
- uid: System.Windows.Data.BindingGroup.Items*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: Items
  nameWithType: BindingGroup.Items
- uid: System.Windows.Data.BindingGroup.Name*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: Name
  nameWithType: BindingGroup.Name
- uid: System.Windows.Data.BindingGroup.NotifyOnValidationError*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: BindingGroup.NotifyOnValidationError
- uid: System.Windows.Data.BindingGroup.Owner*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: Owner
  nameWithType: BindingGroup.Owner
- uid: System.Windows.Data.BindingGroup.SharesProposedValues*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: SharesProposedValues
  nameWithType: BindingGroup.SharesProposedValues
- uid: System.Windows.Data.BindingGroup.TryGetValue*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: TryGetValue
  nameWithType: BindingGroup.TryGetValue
- uid: System.Windows.Data.BindingGroup.UpdateSources*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: UpdateSources
  nameWithType: BindingGroup.UpdateSources
- uid: System.Windows.Data.BindingGroup.ValidatesOnNotifyDataError*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: ValidatesOnNotifyDataError
  nameWithType: BindingGroup.ValidatesOnNotifyDataError
- uid: System.Windows.Data.BindingGroup.ValidateWithoutUpdate*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: ValidateWithoutUpdate
  nameWithType: BindingGroup.ValidateWithoutUpdate
- uid: System.Windows.Data.BindingGroup.ValidationErrors*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: ValidationErrors
  nameWithType: BindingGroup.ValidationErrors
- uid: System.Windows.Data.BindingGroup.ValidationRules*
  parent: System.Windows.Data.BindingGroup
  isExternal: false
  name: ValidationRules
  nameWithType: BindingGroup.ValidationRules
