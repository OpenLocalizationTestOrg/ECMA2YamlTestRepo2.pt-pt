### YamlMime:ManagedReference
items:
- uid: System.Configuration.IdnElement
  id: IdnElement
  children:
  - System.Configuration.IdnElement.#ctor
  - System.Configuration.IdnElement.Enabled
  - System.Configuration.IdnElement.Properties
  langs:
  - csharp
  name: IdnElement
  nameWithType: IdnElement
  fullName: System.Configuration.IdnElement
  type: Class
  summary: "Provides the configuration setting for International Domain Name (IDN) processing in the &lt;xref:System.Uri?displayProperty=fullName&gt; class."
  remarks: "The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) based on RFC 3987. Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.       The configuration setting for the IdnElement is indirectly controlled by the <xref:System.Configuration.IriParsingElement> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.       The Internationalized Domain Name (IDN) attribute only controls IDN processing. All other IRI processing (character normalization, for example) is performed by default.       The configuration setting for the IdnElement will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed. Changes to configuration settings after that time are ignored.       For more information on IRI support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class."
  syntax:
    content: 'public sealed class IdnElement : System.Configuration.ConfigurationElement'
  inheritance:
  - System.Object
  - System.Configuration.ConfigurationElement
  implements: []
  inheritedMembers:
  - System.Configuration.ConfigurationElement.CurrentConfiguration
  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  - System.Configuration.ConfigurationElement.ElementInformation
  - System.Configuration.ConfigurationElement.ElementProperty
  - System.Configuration.ConfigurationElement.Equals(System.Object)
  - System.Configuration.ConfigurationElement.EvaluationContext
  - System.Configuration.ConfigurationElement.GetHashCode
  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  - System.Configuration.ConfigurationElement.HasContext
  - System.Configuration.ConfigurationElement.Init
  - System.Configuration.ConfigurationElement.InitializeDefault
  - System.Configuration.ConfigurationElement.IsModified
  - System.Configuration.ConfigurationElement.IsReadOnly
  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationElement.Item(System.String)
  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  - System.Configuration.ConfigurationElement.LockAllAttributesExcept
  - System.Configuration.ConfigurationElement.LockAllElementsExcept
  - System.Configuration.ConfigurationElement.LockAttributes
  - System.Configuration.ConfigurationElement.LockElements
  - System.Configuration.ConfigurationElement.LockItem
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  - System.Configuration.ConfigurationElement.PostDeserialize
  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElement.ResetModified
  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  - System.Configuration.ConfigurationElement.SetReadOnly
  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  platform:
  - net462
- uid: System.Configuration.IdnElement.#ctor
  id: '#ctor'
  parent: System.Configuration.IdnElement
  langs:
  - csharp
  name: IdnElement()
  nameWithType: IdnElement.IdnElement()
  fullName: System.Configuration.IdnElement.IdnElement()
  type: Constructor
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Initializes a new instance of the <xref href=&quot;System.Configuration.IdnElement&quot;></xref> class."
  remarks: "This constructor creates a <xref:System.Configuration.IdnElement> instance"
  syntax:
    content: public IdnElement ();
    parameters: []
  overload: System.Configuration.IdnElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IdnElement.Enabled
  id: Enabled
  parent: System.Configuration.IdnElement
  langs:
  - csharp
  name: Enabled
  nameWithType: IdnElement.Enabled
  fullName: System.Configuration.IdnElement.Enabled
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Gets or sets the value of the <xref href=&quot;System.Configuration.IdnElement&quot;></xref> configuration setting."
  remarks: "The International Domain Name (IDN) attribute only controls IDN processing. All other International Resource Identifiers (IRI)  processing (character normalization, for example) is performed by default.       The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.       The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed. Changes to configuration settings after that time are ignored.       For more information on IRI support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class."
  syntax:
    content: public UriIdnScope Enabled { get; set; }
    return:
      type: System.UriIdnScope
      description: "A <xref href=&quot;System.UriIdnScope&quot;></xref> that contains the current configuration setting for IDN processing."
  overload: System.Configuration.IdnElement.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IdnElement.Properties
  id: Properties
  parent: System.Configuration.IdnElement
  langs:
  - csharp
  name: Properties
  nameWithType: IdnElement.Properties
  fullName: System.Configuration.IdnElement.Properties
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  syntax:
    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }
    return:
      type: System.Configuration.ConfigurationPropertyCollection
      description: "To be added."
  overload: System.Configuration.IdnElement.Properties*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.ConfigurationElement
  isExternal: false
  name: System.Configuration.ConfigurationElement
- uid: System.Configuration.IdnElement.#ctor
  parent: System.Configuration.IdnElement
  isExternal: false
  name: IdnElement()
  nameWithType: IdnElement.IdnElement()
  fullName: System.Configuration.IdnElement.IdnElement()
- uid: System.Configuration.IdnElement.Enabled
  parent: System.Configuration.IdnElement
  isExternal: false
  name: Enabled
  nameWithType: IdnElement.Enabled
  fullName: System.Configuration.IdnElement.Enabled
- uid: System.UriIdnScope
  parent: System
  isExternal: false
  name: UriIdnScope
  nameWithType: UriIdnScope
  fullName: System.UriIdnScope
- uid: System.Configuration.IdnElement.Properties
  parent: System.Configuration.IdnElement
  isExternal: false
  name: Properties
  nameWithType: IdnElement.Properties
  fullName: System.Configuration.IdnElement.Properties
- uid: System.Configuration.ConfigurationPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationPropertyCollection
  nameWithType: ConfigurationPropertyCollection
  fullName: System.Configuration.ConfigurationPropertyCollection
- uid: System.Configuration.IdnElement.#ctor*
  parent: System.Configuration.IdnElement
  isExternal: false
  name: IdnElement
  nameWithType: IdnElement.IdnElement
- uid: System.Configuration.IdnElement.Enabled*
  parent: System.Configuration.IdnElement
  isExternal: false
  name: Enabled
  nameWithType: IdnElement.Enabled
- uid: System.Configuration.IdnElement.Properties*
  parent: System.Configuration.IdnElement
  isExternal: false
  name: Properties
  nameWithType: IdnElement.Properties
