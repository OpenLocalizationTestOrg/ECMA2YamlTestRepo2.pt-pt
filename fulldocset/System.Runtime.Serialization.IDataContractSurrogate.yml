### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.IDataContractSurrogate
  id: IDataContractSurrogate
  children:
  - System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)
  - System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)
  - System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)
  - System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)
  - System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})
  - System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)
  - System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)
  - System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)
  langs:
  - csharp
  name: IDataContractSurrogate
  nameWithType: IDataContractSurrogate
  fullName: System.Runtime.Serialization.IDataContractSurrogate
  type: Interface
  summary: "Provides the methods needed to substitute one type for another by the <xref:System.Runtime.Serialization.DataContractSerializer> during serialization, deserialization, and export and import of XML schema documents (XSD)."
  remarks: "Use the IDataContractSurrogate when using the <xref:System.Runtime.Serialization.DataContractSerializer> if you need to do one of the following: substitute one type or object for another, or to dynamically generate schema variations. For a sample application, see [DataContract Surrogate](~/add/includes/ajax-current-ext-md.md). For more information about data contracts, see [Using Data Contracts](~/add/includes/ajax-current-ext-md.md).       At run time, you can find the specific <xref:System.Runtime.Serialization.DataContractSerializer> for any operation in a service by using the <xref:System.ServiceModel.Description.OperationDescription> to find the <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior> instance. For more information about implementing the interface to create a surrogate, see [Data Contract Surrogates](~/add/includes/ajax-current-ext-md.md).       You can also use the IDataContractSurrogate to affect the import and export of XML schemas when you are using the <xref:System.Runtime.Serialization.XsdDataContractExporter> and <xref:System.Runtime.Serialization.XsdDataContractImporter> classes. You can do so by assigning the IDataContractSurrogate to the <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> property of the <xref:System.Runtime.Serialization.ExportOptions> class, or to the <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> property of the <xref:System.Runtime.Serialization.ImportOptions> class.  For more information, see [Schema Import and Export](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows an implementation of the IDataContractSurrogate interface. The code substitutes the serialization of the `Person` type for a `PersonSurrogated` class.  \n  \n [!code-vb[IDataContractSurrogate#0](~/add/codesnippet/visualbasic/t-system.runtime.seriali_6_1.vb)]\n [!code-cs[IDataContractSurrogate#0](~/add/codesnippet/csharp/t-system.runtime.seriali_6_1.cs)]"
  syntax:
    content: public interface IDataContractSurrogate
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)
  id: GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetCustomDataToExport(MemberInfo,Type)
  nameWithType: IDataContractSurrogate.GetCustomDataToExport(MemberInfo,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(MemberInfo,Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "During schema export operations, inserts annotations into the schema for non-null return values."
  syntax:
    content: public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);
    parameters:
    - id: memberInfo
      type: System.Reflection.MemberInfo
      description: "A <xref:System.Reflection.MemberInfo> that describes the member."
    - id: dataContractType
      type: System.Type
      description: "A <xref:System.Type>."
    return:
      type: System.Object
      description: "An object that represents the annotation to be inserted into the XML schema definition."
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)
  id: GetCustomDataToExport(System.Type,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetCustomDataToExport(Type,Type)
  nameWithType: IDataContractSurrogate.GetCustomDataToExport(Type,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(Type,Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "During schema export operations, inserts annotations into the schema for non-null return values."
  syntax:
    content: public object GetCustomDataToExport (Type clrType, Type dataContractType);
    parameters:
    - id: clrType
      type: System.Type
      description: "The CLR type to be replaced."
    - id: dataContractType
      type: System.Type
      description: "The data contract type to be annotated."
    return:
      type: System.Object
      description: "An object that represents the annotation to be inserted into the XML schema definition."
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)
  id: GetDataContractType(System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetDataContractType(Type)
  nameWithType: IDataContractSurrogate.GetDataContractType(Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type."
  remarks: ''
  example:
  - "The following example shows an implementation of the GetDataContractType method.  \n  \n [!code-vb[IDataContractSurrogate#1](~/add/codesnippet/visualbasic/90968a41-34e3-48fc-8e53-_1.vb)]\n [!code-cs[IDataContractSurrogate#1](~/add/codesnippet/csharp/90968a41-34e3-48fc-8e53-_1.cs)]"
  syntax:
    content: public Type GetDataContractType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "The CLR type <xref:System.Type> to substitute."
    return:
      type: System.Type
      description: "The <xref:System.Type> to substitute for the <code>type</code> value. This type must be serializable by the <xref:System.Runtime.Serialization.DataContractSerializer>. For example, it must be marked with the <xref:System.Runtime.Serialization.DataContractAttribute> attribute or other mechanisms that the serializer recognizes."
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)
  id: GetDeserializedObject(System.Object,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetDeserializedObject(Object,Type)
  nameWithType: IDataContractSurrogate.GetDeserializedObject(Object,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(Object,Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "During deserialization, returns an object that is a substitute for the specified object."
  remarks: "In a simple implementation, use an if…then…else control structure to test whether the `obj` value is of the surrogated type. If so, transform it as necessary and return the substituted object. The substituted object can be a new instance or the same `obj` instance."
  example:
  - "The following example shows an implementation of the GetDeserializedObject method.  \n  \n [!code-vb[IDataContractSurrogate#3](~/add/codesnippet/visualbasic/98dab246-6ee5-4fc3-8a64-_1.vb)]\n [!code-cs[IDataContractSurrogate#3](~/add/codesnippet/csharp/98dab246-6ee5-4fc3-8a64-_1.cs)]"
  syntax:
    content: public object GetDeserializedObject (object obj, Type targetType);
    parameters:
    - id: obj
      type: System.Object
      description: "The deserialized object to be substituted."
    - id: targetType
      type: System.Type
      description: "The <xref:System.Type> that the substituted object should be assigned to."
    return:
      type: System.Object
      description: "The substituted deserialized object. This object must be of a type that is serializable by the <xref:System.Runtime.Serialization.DataContractSerializer>. For example, it must be marked with the <xref:System.Runtime.Serialization.DataContractAttribute> attribute or other mechanisms that the serializer recognizes."
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})
  id: GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetKnownCustomDataTypes(Collection<Type>)
  nameWithType: IDataContractSurrogate.GetKnownCustomDataTypes(Collection<Type>)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(Collection<Type>)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Sets the collection of known types to use for serialization and deserialization of the custom data objects."
  remarks: "This method is required during schema export or schema import only if annotations are inserted into the schema using the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A> method."
  syntax:
    content: public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection<Type> customDataTypes);
    parameters:
    - id: customDataTypes
      type: System.Collections.ObjectModel.Collection{System.Type}
      description: "A &lt;xref:System.Collections.ObjectModel.Collection%601&gt; of <xref:System.Type> to add known types to."
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)
  id: GetObjectToSerialize(System.Object,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetObjectToSerialize(Object,Type)
  nameWithType: IDataContractSurrogate.GetObjectToSerialize(Object,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(Object,Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "During serialization, returns an object that substitutes the specified object."
  remarks: "This method must not return `null` because on deserialization the data will be cast to type <xref:System.Object> and an <xref:System.InvalidCastException> is thrown."
  example:
  - "The following example shows an implementation of the GetObjectToSerialize method.  \n  \n [!code-vb[IDataContractSurrogate#2](~/add/codesnippet/visualbasic/5c78fc6a-caaf-4bc0-ab0d-_1.vb)]\n [!code-cs[IDataContractSurrogate#2](~/add/codesnippet/csharp/5c78fc6a-caaf-4bc0-ab0d-_1.cs)]"
  syntax:
    content: public object GetObjectToSerialize (object obj, Type targetType);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to substitute."
    - id: targetType
      type: System.Type
      description: "The <xref:System.Type> that the substituted object should be assigned to."
    return:
      type: System.Object
      description: "The substituted object that will be serialized. The object must be serializable by the <xref:System.Runtime.Serialization.DataContractSerializer>. For example, it must be marked with the <xref:System.Runtime.Serialization.DataContractAttribute> attribute or other mechanisms that the serializer recognizes."
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)
  id: GetReferencedTypeOnImport(System.String,System.String,System.Object)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetReferencedTypeOnImport(String,String,Object)
  nameWithType: IDataContractSurrogate.GetReferencedTypeOnImport(String,String,Object)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(String,String,Object)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "During schema import, returns the type referenced by the schema."
  remarks: '`Null` should be returned if a CLR type does not exist for representing the schema type. This will cause a new type to be generated during schema import.'
  example:
  - "The following example shows an implementation of the GetReferencedTypeOnImport method.  \n  \n [!code-vb[IDataContractSurrogate#4](~/add/codesnippet/visualbasic/9ffa3127-8c36-42f6-862b-_1.vb)]\n [!code-cs[IDataContractSurrogate#4](~/add/codesnippet/csharp/9ffa3127-8c36-42f6-862b-_1.cs)]"
  syntax:
    content: public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);
    parameters:
    - id: typeName
      type: System.String
      description: "The name of the type in schema."
    - id: typeNamespace
      type: System.String
      description: "The namespace of the type in schema."
    - id: customData
      type: System.Object
      description: "The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type."
    return:
      type: System.Type
      description: "The <xref:System.Type> to use for the referenced type."
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)
  id: ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
  nameWithType: IDataContractSurrogate.ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Processes the type that has been generated from the imported schema."
  remarks: "The input <xref:System.CodeDom.CodeTypeDeclaration> or other information in the <xref:System.CodeDom.CodeCompileUnit> can be modified by the user in this method. If `null` is returned, it will cause the type to not be generated. If a new <xref:System.CodeDom.CodeTypeDeclaration> is returned, it will replace the original type generated."
  syntax:
    content: public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);
    parameters:
    - id: typeDeclaration
      type: System.CodeDom.CodeTypeDeclaration
      description: "A <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;></xref> to process that represents the type declaration generated during schema import."
    - id: compileUnit
      type: System.CodeDom.CodeCompileUnit
      description: "The <xref href=&quot;System.CodeDom.CodeCompileUnit&quot;></xref> that contains the other code generated during schema import."
    return:
      type: System.CodeDom.CodeTypeDeclaration
      description: "A <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;></xref> that contains the processed type."
  overload: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetCustomDataToExport(MemberInfo,Type)
  nameWithType: IDataContractSurrogate.GetCustomDataToExport(MemberInfo,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(MemberInfo,Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetCustomDataToExport(Type,Type)
  nameWithType: IDataContractSurrogate.GetCustomDataToExport(Type,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(Type,Type)
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetDataContractType(Type)
  nameWithType: IDataContractSurrogate.GetDataContractType(Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(Type)
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetDeserializedObject(Object,Type)
  nameWithType: IDataContractSurrogate.GetDeserializedObject(Object,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(Object,Type)
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetKnownCustomDataTypes(Collection<Type>)
  nameWithType: IDataContractSurrogate.GetKnownCustomDataTypes(Collection<Type>)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(Collection<Type>)
- uid: System.Collections.ObjectModel.Collection{System.Type}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Type>
  nameWithType: Collection<Type>
  fullName: System.Collections.ObjectModel.Collection<System.Type>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetObjectToSerialize(Object,Type)
  nameWithType: IDataContractSurrogate.GetObjectToSerialize(Object,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(Object,Type)
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetReferencedTypeOnImport(String,String,Object)
  nameWithType: IDataContractSurrogate.GetReferencedTypeOnImport(String,String,Object)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(String,String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
  nameWithType: IDataContractSurrogate.ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
- uid: System.CodeDom.CodeTypeDeclaration
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration
  fullName: System.CodeDom.CodeTypeDeclaration
- uid: System.CodeDom.CodeCompileUnit
  parent: System.CodeDom
  isExternal: false
  name: CodeCompileUnit
  nameWithType: CodeCompileUnit
  fullName: System.CodeDom.CodeCompileUnit
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetCustomDataToExport
  nameWithType: IDataContractSurrogate.GetCustomDataToExport
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetDataContractType
  nameWithType: IDataContractSurrogate.GetDataContractType
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetDeserializedObject
  nameWithType: IDataContractSurrogate.GetDeserializedObject
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetKnownCustomDataTypes
  nameWithType: IDataContractSurrogate.GetKnownCustomDataTypes
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetObjectToSerialize
  nameWithType: IDataContractSurrogate.GetObjectToSerialize
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetReferencedTypeOnImport
  nameWithType: IDataContractSurrogate.GetReferencedTypeOnImport
- uid: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: ProcessImportedType
  nameWithType: IDataContractSurrogate.ProcessImportedType
