### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.ReadOnlyAttribute
  id: ReadOnlyAttribute
  children:
  - System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  - System.ComponentModel.ReadOnlyAttribute.Default
  - System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  - System.ComponentModel.ReadOnlyAttribute.GetHashCode
  - System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
  - System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  - System.ComponentModel.ReadOnlyAttribute.No
  - System.ComponentModel.ReadOnlyAttribute.Yes
  langs:
  - csharp
  name: ReadOnlyAttribute
  nameWithType: ReadOnlyAttribute
  fullName: System.ComponentModel.ReadOnlyAttribute
  type: Class
  summary: "Especifica se a propriedade este atributo está vinculado a é só de leitura ou de leitura/escrita. Esta classe não pode ser herdada"
  remarks: "Membros que são marcados com o ReadOnlyAttribute definido como `true` ou que não tenham um `Set` método não pode ser alterado. Membros que não têm este atributo ou que estão marcados com o ReadOnlyAttribute definido como `false` são leitura/escrita, e podem ser alterados. A predefinição é <xref:System.ComponentModel.ReadOnlyAttribute.No>.</xref:System.ComponentModel.ReadOnlyAttribute.No>      > [!IMPORTANT] > O <xref:System.ComponentModel.PropertyDescriptor>classe impõe ReadOnlyAttribute no ambiente de estrutura e em tempo de execução.</xref:System.ComponentModel.PropertyDescriptor> Ao marcar uma propriedade com o ReadOnlyAttribute definido como `true`, o valor deste atributo é definido para o membro constante <xref:System.ComponentModel.ReadOnlyAttribute.Yes>.</xref:System.ComponentModel.ReadOnlyAttribute.Yes> Para uma propriedade marcado com ReadOnlyAttribute definido como `false`, o valor é <xref:System.ComponentModel.ReadOnlyAttribute.No>.</xref:System.ComponentModel.ReadOnlyAttribute.No> Por conseguinte, quando pretende verificar o valor deste atributo no seu código, tem de especificar o atributo como <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>ou <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.</xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName> </xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>       Para obter mais informações, consulte [atributos](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example marks a property as read-only.  \n  \n [!code-cs[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/csharp/t-system.componentmodel._82_1.cs)]\n [!code-vb[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._82_1.vb)]\n [!code-cpp[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/cpp/t-system.componentmodel._82_1.cpp)]  \n  \n The next code example shows how to check the value of the ReadOnlyAttribute for `MyProperty`. First, the code gets a <xref:System.ComponentModel.PropertyDescriptorCollection> with all the properties for the object. Next, it indexes into the <xref:System.ComponentModel.PropertyDescriptorCollection> to get `MyProperty`. Then it returns the attributes for this property and saves them in the attributes variable.  \n  \n The example presents two different ways of checking the value of the ReadOnlyAttribute. In the second code fragment, the example calls the <xref:System.ComponentModel.ReadOnlyAttribute.Equals%2A> method. In the last code fragment, the example uses the <xref:System.ComponentModel.ReadOnlyAttribute.IsReadOnly%2A> property to check the value.  \n  \n [!code-cs[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/csharp/t-system.componentmodel._82_2.cs)]\n [!code-vb[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._82_2.vb)]\n [!code-cpp[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/cpp/t-system.componentmodel._82_2.cpp)]  \n  \n If you marked a class with the ReadOnlyAttribute, use the following code example to check the value.  \n  \n [!code-cs[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/csharp/t-system.componentmodel._82_3.cs)]\n [!code-vb[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/visualbasic/t-system.componentmodel._82_3.vb)]\n [!code-cpp[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/cpp/t-system.componentmodel._82_3.cpp)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.All)]

      public sealed class ReadOnlyAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: ReadOnlyAttribute(Boolean)
  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
  fullName: System.ComponentModel.ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inicializa uma nova instância do <xref href=&quot;System.ComponentModel.ReadOnlyAttribute&quot;> </xref> classe."
  remarks: "Membros que são marcados com o <xref:System.ComponentModel.ReadOnlyAttribute>definido como `true` ou que não tenham um `Set` método não pode ser alterado.</xref:System.ComponentModel.ReadOnlyAttribute> Membros que não têm este atributo ou que estão marcados com o <xref:System.ComponentModel.ReadOnlyAttribute>definido como `false` são leitura/escrita, e podem ser alterados.</xref:System.ComponentModel.ReadOnlyAttribute> A predefinição é <xref:System.ComponentModel.ReadOnlyAttribute.No>.</xref:System.ComponentModel.ReadOnlyAttribute.No>      > [!NOTE] > Quando marcar uma propriedade com o <xref:System.ComponentModel.ReadOnlyAttribute>definido como `true`, o valor deste atributo é definido para o membro constante <xref:System.ComponentModel.ReadOnlyAttribute.Yes>.</xref:System.ComponentModel.ReadOnlyAttribute.Yes> </xref:System.ComponentModel.ReadOnlyAttribute> Para uma propriedade marcados com o <xref:System.ComponentModel.ReadOnlyAttribute>definido como `false`, o valor é <xref:System.ComponentModel.ReadOnlyAttribute.No>.</xref:System.ComponentModel.ReadOnlyAttribute.No> </xref:System.ComponentModel.ReadOnlyAttribute> Por conseguinte, quando pretende verificar o valor deste atributo no seu código, tem de especificar o atributo como <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>ou <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.</xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName> </xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>"
  example:
  - "The following code example marks a property as read-only. This code creates a new <xref:System.ComponentModel.ReadOnlyAttribute>, sets its value to <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>, and binds it to the property.  \n  \n [!code-cpp[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/cpp/m-system.componentmodel._35_1.cpp)]\n [!code-vb[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._35_1.vb)]\n [!code-cs[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/csharp/m-system.componentmodel._35_1.cs)]"
  syntax:
    content: public ReadOnlyAttribute (bool isReadOnly);
    parameters:
    - id: isReadOnly
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para mostrar que a propriedade que este atributo está vinculado ao é só de leitura; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para mostrar que a propriedade de leitura/escrita."
  overload: System.ComponentModel.ReadOnlyAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.Default
  id: Default
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: Default
  nameWithType: ReadOnlyAttribute.Default
  fullName: System.ComponentModel.ReadOnlyAttribute.Default
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Especifica o valor predefinido para o <xref href=&quot;System.ComponentModel.ReadOnlyAttribute&quot;> </xref>, que é <xref href=&quot;System.ComponentModel.ReadOnlyAttribute.No&quot;> </xref> (ou seja, a propriedade este atributo está vinculado ao é leitura/escrita). Isto <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;> </xref> campo é só de leitura."
  remarks: "Ao marcar uma propriedade com este valor, este atributo é definido para o membro constante <xref:System.ComponentModel.ReadOnlyAttribute>.</xref:System.ComponentModel.ReadOnlyAttribute> Por conseguinte, quando pretender verificar se o atributo está definido para este valor no seu código, tem de especificar o atributo como <xref:System.ComponentModel.ReadOnlyAttribute?displayProperty=fullName>.</xref:System.ComponentModel.ReadOnlyAttribute?displayProperty=fullName>"
  syntax:
    content: public static readonly System.ComponentModel.ReadOnlyAttribute Default;
    return:
      type: System.ComponentModel.ReadOnlyAttribute
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ReadOnlyAttribute.Equals(Object)
  fullName: System.ComponentModel.ReadOnlyAttribute.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Indica se esta instância e um objeto especificado são iguais."
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Outro objecto para comparar a."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> value </code> é igual a esta instância; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.ReadOnlyAttribute.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ReadOnlyAttribute.GetHashCode()
  fullName: System.ComponentModel.ReadOnlyAttribute.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Devolve o código hash para esta instância."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código hash para o atual <xref href=&quot;System.ComponentModel.ReadOnlyAttribute&quot;> </xref>."
  overload: System.ComponentModel.ReadOnlyAttribute.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
  id: IsDefaultAttribute
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: IsDefaultAttribute()
  nameWithType: ReadOnlyAttribute.IsDefaultAttribute()
  fullName: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se este atributo é a predefinição."
  syntax:
    content: public override bool IsDefaultAttribute ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o atributo é o valor predefinido para esta classe de atributo; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  id: IsReadOnly
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ReadOnlyAttribute.IsReadOnly
  fullName: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Obtém um valor que indica se a propriedade que este atributo está vinculado ao é só de leitura."
  remarks: ''
  example:
  - "The following code example checks to see whether `MyProperty` is read-only. First, the code gets the attributes for `MyProperty` by doing the following:  \n  \n-   Retrieving a <xref:System.ComponentModel.PropertyDescriptorCollection> with all the properties for the object.  \n  \n-   Indexing into the <xref:System.ComponentModel.PropertyDescriptorCollection> to get `MyProperty`.  \n  \n-   Saving the attributes for this property in the attributes variable.  \n  \n Then the code sets `myAttribute` to the value of the <xref:System.ComponentModel.ReadOnlyAttribute> in the <xref:System.ComponentModel.AttributeCollection> and checks whether the property is read-only.  \n  \n [!code-cs[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/csharp/p-system.componentmodel._25_1.cs)]\n [!code-cpp[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/cpp/p-system.componentmodel._25_1.cpp)]\n [!code-vb[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._25_1.vb)]"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a propriedade com este atributo está vinculado é só de leitura; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se a propriedade é leitura/escrita."
  overload: System.ComponentModel.ReadOnlyAttribute.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.No
  id: No
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: No
  nameWithType: ReadOnlyAttribute.No
  fullName: System.ComponentModel.ReadOnlyAttribute.No
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Especifica que a propriedade que este atributo está vinculado a leitura/escrita e pode ser modificada. Isto <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;> </xref> campo é só de leitura."
  remarks: "Este campo é a predefinição para este atributo.       Ao marcar uma propriedade com o <xref:System.ComponentModel.ReadOnlyAttribute>definido como `false`, o valor deste atributo é definido para o membro constante um número</xref:System.ComponentModel.ReadOnlyAttribute> Por conseguinte, quando pretender verificar se o atributo está definido para este valor no seu código, tem de especificar o atributo como não."
  syntax:
    content: public static readonly System.ComponentModel.ReadOnlyAttribute No;
    return:
      type: System.ComponentModel.ReadOnlyAttribute
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.Yes
  id: Yes
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: Yes
  nameWithType: ReadOnlyAttribute.Yes
  fullName: System.ComponentModel.ReadOnlyAttribute.Yes
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Especifica que a propriedade que este atributo está vinculado ao é só de leitura e não pode ser modificada no Explorador de servidores. Isto <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;> </xref> campo é só de leitura."
  remarks: "Ao marcar uma propriedade com o <xref:System.ComponentModel.ReadOnlyAttribute>definido como `true`, o valor deste atributo é definido para o membro constante Sim.</xref:System.ComponentModel.ReadOnlyAttribute> Por conseguinte, quando pretender verificar se o atributo está definido para este valor no seu código, tem de especificar o atributo como Sim."
  syntax:
    content: public static readonly System.ComponentModel.ReadOnlyAttribute Yes;
    return:
      type: System.ComponentModel.ReadOnlyAttribute
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: ReadOnlyAttribute(Boolean)
  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
  fullName: System.ComponentModel.ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.ReadOnlyAttribute.Default
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Default
  nameWithType: ReadOnlyAttribute.Default
  fullName: System.ComponentModel.ReadOnlyAttribute.Default
- uid: System.ComponentModel.ReadOnlyAttribute
  parent: System.ComponentModel
  isExternal: false
  name: ReadOnlyAttribute
  nameWithType: ReadOnlyAttribute
  fullName: System.ComponentModel.ReadOnlyAttribute
- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Equals(Object)
  nameWithType: ReadOnlyAttribute.Equals(Object)
  fullName: System.ComponentModel.ReadOnlyAttribute.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: GetHashCode()
  nameWithType: ReadOnlyAttribute.GetHashCode()
  fullName: System.ComponentModel.ReadOnlyAttribute.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsDefaultAttribute()
  nameWithType: ReadOnlyAttribute.IsDefaultAttribute()
  fullName: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute()
- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsReadOnly
  nameWithType: ReadOnlyAttribute.IsReadOnly
  fullName: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
- uid: System.ComponentModel.ReadOnlyAttribute.No
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: No
  nameWithType: ReadOnlyAttribute.No
  fullName: System.ComponentModel.ReadOnlyAttribute.No
- uid: System.ComponentModel.ReadOnlyAttribute.Yes
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Yes
  nameWithType: ReadOnlyAttribute.Yes
  fullName: System.ComponentModel.ReadOnlyAttribute.Yes
- uid: System.ComponentModel.ReadOnlyAttribute.#ctor*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: ReadOnlyAttribute
  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute
- uid: System.ComponentModel.ReadOnlyAttribute.Equals*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Equals
  nameWithType: ReadOnlyAttribute.Equals
- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: GetHashCode
  nameWithType: ReadOnlyAttribute.GetHashCode
- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsDefaultAttribute
  nameWithType: ReadOnlyAttribute.IsDefaultAttribute
- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsReadOnly
  nameWithType: ReadOnlyAttribute.IsReadOnly
