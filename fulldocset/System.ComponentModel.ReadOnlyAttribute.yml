### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.ReadOnlyAttribute
  id: ReadOnlyAttribute
  children:
  - System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  - System.ComponentModel.ReadOnlyAttribute.Default
  - System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  - System.ComponentModel.ReadOnlyAttribute.GetHashCode
  - System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
  - System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  - System.ComponentModel.ReadOnlyAttribute.No
  - System.ComponentModel.ReadOnlyAttribute.Yes
  langs:
  - csharp
  name: ReadOnlyAttribute
  nameWithType: ReadOnlyAttribute
  fullName: System.ComponentModel.ReadOnlyAttribute
  type: Class
  summary: "Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited"
  remarks: "Members that are marked with the ReadOnlyAttribute set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the ReadOnlyAttribute set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.      > [!IMPORTANT] >  The <xref:System.ComponentModel.PropertyDescriptor> class enforces the ReadOnlyAttribute in the design environment and at run time. When you mark a property with the ReadOnlyAttribute set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the ReadOnlyAttribute set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.       For more information, see [Attributes](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example marks a property as read-only.  \n  \n [!code-cs[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/csharp/t-system.componentmodel._82_1.cs)]\n [!code-vb[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._82_1.vb)]\n [!code-cpp[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/cpp/t-system.componentmodel._82_1.cpp)]  \n  \n The next code example shows how to check the value of the ReadOnlyAttribute for `MyProperty`. First, the code gets a <xref:System.ComponentModel.PropertyDescriptorCollection> with all the properties for the object. Next, it indexes into the <xref:System.ComponentModel.PropertyDescriptorCollection> to get `MyProperty`. Then it returns the attributes for this property and saves them in the attributes variable.  \n  \n The example presents two different ways of checking the value of the ReadOnlyAttribute. In the second code fragment, the example calls the <xref:System.ComponentModel.ReadOnlyAttribute.Equals%2A> method. In the last code fragment, the example uses the <xref:System.ComponentModel.ReadOnlyAttribute.IsReadOnly%2A> property to check the value.  \n  \n [!code-cs[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/csharp/t-system.componentmodel._82_2.cs)]\n [!code-vb[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._82_2.vb)]\n [!code-cpp[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/cpp/t-system.componentmodel._82_2.cpp)]  \n  \n If you marked a class with the ReadOnlyAttribute, use the following code example to check the value.  \n  \n [!code-cs[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/csharp/t-system.componentmodel._82_3.cs)]\n [!code-vb[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/visualbasic/t-system.componentmodel._82_3.vb)]\n [!code-cpp[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/cpp/t-system.componentmodel._82_3.cpp)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.All)]

      public sealed class ReadOnlyAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: ReadOnlyAttribute(Boolean)
  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
  fullName: System.ComponentModel.ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ComponentModel.ReadOnlyAttribute&quot;></xref> class."
  remarks: "Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.      > [!NOTE] >  When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>."
  example:
  - "The following code example marks a property as read-only. This code creates a new <xref:System.ComponentModel.ReadOnlyAttribute>, sets its value to <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>, and binds it to the property.  \n  \n [!code-cpp[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/cpp/m-system.componentmodel._35_1.cpp)]\n [!code-vb[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._35_1.vb)]\n [!code-cs[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/csharp/m-system.componentmodel._35_1.cs)]"
  syntax:
    content: public ReadOnlyAttribute (bool isReadOnly);
    parameters:
    - id: isReadOnly
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to show that the property this attribute is bound to is read-only; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to show that the property is read/write."
  overload: System.ComponentModel.ReadOnlyAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.Default
  id: Default
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: Default
  nameWithType: ReadOnlyAttribute.Default
  fullName: System.ComponentModel.ReadOnlyAttribute.Default
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Specifies the default value for the <xref href=&quot;System.ComponentModel.ReadOnlyAttribute&quot;></xref>, which is <xref href=&quot;System.ComponentModel.ReadOnlyAttribute.No&quot;></xref> (that is, the property this attribute is bound to is read/write). This <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref> field is read-only."
  remarks: "When you mark a property with this value, this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute?displayProperty=fullName>."
  syntax:
    content: public static readonly System.ComponentModel.ReadOnlyAttribute Default;
    return:
      type: System.ComponentModel.ReadOnlyAttribute
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ReadOnlyAttribute.Equals(Object)
  fullName: System.ComponentModel.ReadOnlyAttribute.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Indicates whether this instance and a specified object are equal."
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Another object to compare to."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>value</code> is equal to this instance; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.ReadOnlyAttribute.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ReadOnlyAttribute.GetHashCode()
  fullName: System.ComponentModel.ReadOnlyAttribute.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the hash code for this instance."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "A hash code for the current <xref href=&quot;System.ComponentModel.ReadOnlyAttribute&quot;></xref>."
  overload: System.ComponentModel.ReadOnlyAttribute.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
  id: IsDefaultAttribute
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: IsDefaultAttribute()
  nameWithType: ReadOnlyAttribute.IsDefaultAttribute()
  fullName: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines if this attribute is the default."
  syntax:
    content: public override bool IsDefaultAttribute ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the attribute is the default value for this attribute class; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  id: IsReadOnly
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ReadOnlyAttribute.IsReadOnly
  fullName: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a value indicating whether the property this attribute is bound to is read-only."
  remarks: ''
  example:
  - "The following code example checks to see whether `MyProperty` is read-only. First, the code gets the attributes for `MyProperty` by doing the following:  \n  \n-   Retrieving a <xref:System.ComponentModel.PropertyDescriptorCollection> with all the properties for the object.  \n  \n-   Indexing into the <xref:System.ComponentModel.PropertyDescriptorCollection> to get `MyProperty`.  \n  \n-   Saving the attributes for this property in the attributes variable.  \n  \n Then the code sets `myAttribute` to the value of the <xref:System.ComponentModel.ReadOnlyAttribute> in the <xref:System.ComponentModel.AttributeCollection> and checks whether the property is read-only.  \n  \n [!code-cs[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/csharp/p-system.componentmodel._25_1.cs)]\n [!code-cpp[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/cpp/p-system.componentmodel._25_1.cpp)]\n [!code-vb[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._25_1.vb)]"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the property this attribute is bound to is read-only; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the property is read/write."
  overload: System.ComponentModel.ReadOnlyAttribute.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.No
  id: No
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: No
  nameWithType: ReadOnlyAttribute.No
  fullName: System.ComponentModel.ReadOnlyAttribute.No
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Specifies that the property this attribute is bound to is read/write and can be modified. This <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref> field is read-only."
  remarks: "This field is the default setting for this attribute.       When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value of this attribute is set to the constant member No. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as No."
  syntax:
    content: public static readonly System.ComponentModel.ReadOnlyAttribute No;
    return:
      type: System.ComponentModel.ReadOnlyAttribute
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.Yes
  id: Yes
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: Yes
  nameWithType: ReadOnlyAttribute.Yes
  fullName: System.ComponentModel.ReadOnlyAttribute.Yes
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer. This <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref> field is read-only."
  remarks: "When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member Yes. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as Yes."
  syntax:
    content: public static readonly System.ComponentModel.ReadOnlyAttribute Yes;
    return:
      type: System.ComponentModel.ReadOnlyAttribute
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: ReadOnlyAttribute(Boolean)
  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
  fullName: System.ComponentModel.ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.ReadOnlyAttribute.Default
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Default
  nameWithType: ReadOnlyAttribute.Default
  fullName: System.ComponentModel.ReadOnlyAttribute.Default
- uid: System.ComponentModel.ReadOnlyAttribute
  parent: System.ComponentModel
  isExternal: false
  name: ReadOnlyAttribute
  nameWithType: ReadOnlyAttribute
  fullName: System.ComponentModel.ReadOnlyAttribute
- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Equals(Object)
  nameWithType: ReadOnlyAttribute.Equals(Object)
  fullName: System.ComponentModel.ReadOnlyAttribute.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: GetHashCode()
  nameWithType: ReadOnlyAttribute.GetHashCode()
  fullName: System.ComponentModel.ReadOnlyAttribute.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsDefaultAttribute()
  nameWithType: ReadOnlyAttribute.IsDefaultAttribute()
  fullName: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute()
- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsReadOnly
  nameWithType: ReadOnlyAttribute.IsReadOnly
  fullName: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
- uid: System.ComponentModel.ReadOnlyAttribute.No
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: No
  nameWithType: ReadOnlyAttribute.No
  fullName: System.ComponentModel.ReadOnlyAttribute.No
- uid: System.ComponentModel.ReadOnlyAttribute.Yes
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Yes
  nameWithType: ReadOnlyAttribute.Yes
  fullName: System.ComponentModel.ReadOnlyAttribute.Yes
- uid: System.ComponentModel.ReadOnlyAttribute.#ctor*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: ReadOnlyAttribute
  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute
- uid: System.ComponentModel.ReadOnlyAttribute.Equals*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Equals
  nameWithType: ReadOnlyAttribute.Equals
- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: GetHashCode
  nameWithType: ReadOnlyAttribute.GetHashCode
- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsDefaultAttribute
  nameWithType: ReadOnlyAttribute.IsDefaultAttribute
- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsReadOnly
  nameWithType: ReadOnlyAttribute.IsReadOnly
