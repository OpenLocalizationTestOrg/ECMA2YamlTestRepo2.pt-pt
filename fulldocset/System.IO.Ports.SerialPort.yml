### YamlMime:ManagedReference
items:
- uid: System.IO.Ports.SerialPort
  id: SerialPort
  children:
  - System.IO.Ports.SerialPort.#ctor
  - System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)
  - System.IO.Ports.SerialPort.#ctor(System.String)
  - System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)
  - System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)
  - System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)
  - System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)
  - System.IO.Ports.SerialPort.BaseStream
  - System.IO.Ports.SerialPort.BaudRate
  - System.IO.Ports.SerialPort.BreakState
  - System.IO.Ports.SerialPort.BytesToRead
  - System.IO.Ports.SerialPort.BytesToWrite
  - System.IO.Ports.SerialPort.CDHolding
  - System.IO.Ports.SerialPort.Close
  - System.IO.Ports.SerialPort.CtsHolding
  - System.IO.Ports.SerialPort.DataBits
  - System.IO.Ports.SerialPort.DataReceived
  - System.IO.Ports.SerialPort.DiscardInBuffer
  - System.IO.Ports.SerialPort.DiscardNull
  - System.IO.Ports.SerialPort.DiscardOutBuffer
  - System.IO.Ports.SerialPort.Dispose(System.Boolean)
  - System.IO.Ports.SerialPort.DsrHolding
  - System.IO.Ports.SerialPort.DtrEnable
  - System.IO.Ports.SerialPort.Encoding
  - System.IO.Ports.SerialPort.ErrorReceived
  - System.IO.Ports.SerialPort.GetPortNames
  - System.IO.Ports.SerialPort.Handshake
  - System.IO.Ports.SerialPort.InfiniteTimeout
  - System.IO.Ports.SerialPort.IsOpen
  - System.IO.Ports.SerialPort.NewLine
  - System.IO.Ports.SerialPort.Open
  - System.IO.Ports.SerialPort.Parity
  - System.IO.Ports.SerialPort.ParityReplace
  - System.IO.Ports.SerialPort.PinChanged
  - System.IO.Ports.SerialPort.PortName
  - System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)
  - System.IO.Ports.SerialPort.ReadBufferSize
  - System.IO.Ports.SerialPort.ReadByte
  - System.IO.Ports.SerialPort.ReadChar
  - System.IO.Ports.SerialPort.ReadExisting
  - System.IO.Ports.SerialPort.ReadLine
  - System.IO.Ports.SerialPort.ReadTimeout
  - System.IO.Ports.SerialPort.ReadTo(System.String)
  - System.IO.Ports.SerialPort.ReceivedBytesThreshold
  - System.IO.Ports.SerialPort.RtsEnable
  - System.IO.Ports.SerialPort.StopBits
  - System.IO.Ports.SerialPort.Write(System.String)
  - System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)
  - System.IO.Ports.SerialPort.WriteBufferSize
  - System.IO.Ports.SerialPort.WriteLine(System.String)
  - System.IO.Ports.SerialPort.WriteTimeout
  langs:
  - csharp
  name: SerialPort
  nameWithType: SerialPort
  fullName: System.IO.Ports.SerialPort
  type: Class
  summary: "Representa um recurso de porta série.       Para procurar o código de origem do .NET Framework para este tipo, consulte o [referência origem](http://referencesource.microsoft.com/#System/sys/system/io/ports/SerialPort.cs#ae0a3218c6c9f7fe)."
  remarks: "> [!NOTE]> Para ver o código de origem do .NET Framework para este tipo, consulte o [referência origem](http://referencesource.microsoft.com/#System/sys/system/io/ports/SerialPort.cs#ae0a3218c6c9f7fe). Pode percorrer o código de origem online, transfira a referência para visualização offline e siga os passos as origens (incluindo correções de erros e atualizações) durante a depuração; consulte [instruções](http://referencesource.microsoft.com/).       Utilize esta classe para controlar um recurso de porta série de ficheiros. Esta classe fornece síncrona condicionada por eventos e/s, acesso aos Estados de pin e quebra e acesso às propriedades do controlador de série. Além disso, a funcionalidade desta classe pode ser moldada num interno <xref:System.IO.Stream>objeto, acessível através de <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade e transmitidos para as classes que moldam ou utilizam streams.</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Stream>       A classe de SerialPort suporta as seguintes codificações: <xref:System.Text.ASCIIEncoding>, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, <xref:System.Text.UTF32Encoding>e quaisquer codificação definido na mscorlib.dll onde a página de código é menor que 50000 ou com a página de códigos 54936.</xref:System.Text.UTF32Encoding> </xref:System.Text.UnicodeEncoding> </xref:System.Text.UTF8Encoding> </xref:System.Text.ASCIIEncoding>  Pode utilizar codificações alternativas, mas tem de utilizar o <xref:System.IO.Ports.SerialPort.ReadByte%2A>ou <xref:System.IO.Ports.SerialPort.Write%2A>método e efetuar a codificação.</xref:System.IO.Ports.SerialPort.Write%2A> </xref:System.IO.Ports.SerialPort.ReadByte%2A>       Utilizar o <xref:System.IO.Ports.SerialPort.GetPortNames%2A>método para obter as portas válidas para o computador atual.</xref:System.IO.Ports.SerialPort.GetPortNames%2A>       Se um objeto de SerialPort fica bloqueado durante uma operação de leitura, não abortar o thread. Em vez disso, a fechar a base de transmitir ou eliminar o objeto da SerialPort."
  example:
  - "The following code example demonstrates the use of the SerialPort class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. Both computers must be executing the program to achieve full functionality of this example.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#10](~/add/codesnippet/cpp/t-system.io.ports.serial_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#10](~/add/codesnippet/csharp/t-system.io.ports.serial_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#10](~/add/codesnippet/visualbasic/t-system.io.ports.serial_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.MonitoringDescription("SerialPortDesc")]

      public class SerialPort : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor
  id: '#ctor'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort()
  nameWithType: SerialPort.SerialPort()
  fullName: System.IO.Ports.SerialPort.SerialPort()
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> classe."
  remarks: "Este construtor utiliza valores de propriedade predefinidos quando none são especificadas. Por exemplo, o <xref:System.IO.Ports.SerialPort.DataBits%2A>propriedade por predefinição, 8, o <xref:System.IO.Ports.SerialPort.Parity%2A>propriedade predefinições para o `None` valor de enumeração, o <xref:System.IO.Ports.SerialPort.StopBits%2A>predefinições de propriedade para 1 e um nome de porta predefinido de COM1.</xref:System.IO.Ports.SerialPort.StopBits%2A> </xref:System.IO.Ports.SerialPort.Parity%2A> </xref:System.IO.Ports.SerialPort.DataBits%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/m-system.io.ports.serial_4_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/m-system.io.ports.serial_4_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/m-system.io.ports.serial_4_1.vb)]"
  syntax:
    content: public SerialPort ();
    parameters: []
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)
  id: '#ctor(System.ComponentModel.IContainer)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(IContainer)
  nameWithType: SerialPort.SerialPort(IContainer)
  fullName: System.IO.Ports.SerialPort.SerialPort(IContainer)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> classe utilizando especificado <xref href=&quot;System.ComponentModel.IContainer&quot;> </xref> objeto."
  remarks: "Este construtor utiliza valores de propriedade predefinidos quando none são especificadas. Por exemplo, o <xref:System.IO.Ports.SerialPort.DataBits%2A>propriedade por predefinição, 8, o <xref:System.IO.Ports.SerialPort.Parity%2A>propriedade predefinições para o `None` valor de enumeração, o <xref:System.IO.Ports.SerialPort.StopBits%2A>predefinições de propriedade para 1 e um nome de porta predefinido de COM1.</xref:System.IO.Ports.SerialPort.StopBits%2A> </xref:System.IO.Ports.SerialPort.Parity%2A> </xref:System.IO.Ports.SerialPort.DataBits%2A>"
  syntax:
    content: public SerialPort (System.ComponentModel.IContainer container);
    parameters:
    - id: container
      type: System.ComponentModel.IContainer
      description: "Uma interface para um contentor."
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A porta especificada não foi possível encontrar ou abrir."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(String)
  nameWithType: SerialPort.SerialPort(String)
  fullName: System.IO.Ports.SerialPort.SerialPort(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> classe com o nome de porta especificada."
  remarks: "Utilize este construtor para criar uma nova instância do <xref:System.IO.Ports.SerialPort>quando pretender especificar o nome de porta de classe.</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public SerialPort (string portName);
    parameters:
    - id: portName
      type: System.String
      description: "A porta a utilizar (por exemplo, COM1)."
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A porta especificada não foi possível encontrar ou abrir."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(String,Int32)
  nameWithType: SerialPort.SerialPort(String,Int32)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> classe com a taxa de nome e a transmissão de porta especificada."
  remarks: "Utilize este construtor para criar uma nova instância do <xref:System.IO.Ports.SerialPort>quando pretender especificar o nome de porta e a velocidade de transmissão de classe.</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public SerialPort (string portName, int baudRate);
    parameters:
    - id: portName
      type: System.String
      description: "A porta a utilizar (por exemplo, COM1)."
    - id: baudRate
      type: System.Int32
      description: "A velocidade de transmissão."
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A porta especificada não foi possível encontrar ou abrir."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)
  id: '#ctor(System.String,System.Int32,System.IO.Ports.Parity)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(String,Int32,Parity)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> classe com o nome de porta especificado, a velocidade de transmissão e o bit de paridade."
  remarks: "Utilize este construtor para criar uma nova instância do <xref:System.IO.Ports.SerialPort>classe quando pretender especificar o nome de porta, a velocidade de transmissão e o bit de paridade.</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity);
    parameters:
    - id: portName
      type: System.String
      description: "A porta a utilizar (por exemplo, COM1)."
    - id: baudRate
      type: System.Int32
      description: "A velocidade de transmissão."
    - id: parity
      type: System.IO.Ports.Parity
      description: "Um do <xref:System.IO.Ports.SerialPort.Parity*>valores.</xref:System.IO.Ports.SerialPort.Parity*>"
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A porta especificada não foi possível encontrar ou abrir."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)
  id: '#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(String,Int32,Parity,Int32)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity,Int32)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> classe com o nome de porta especificado, velocidade de transmissão., o bit de paridade e bits de dados."
  remarks: "Utilize este construtor para criar uma nova instância do <xref:System.IO.Ports.SerialPort>classe quando pretender especificar o nome de porta, a velocidade de transmissão, o bit de paridade e bits de dados.</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits);
    parameters:
    - id: portName
      type: System.String
      description: "A porta a utilizar (por exemplo, COM1)."
    - id: baudRate
      type: System.Int32
      description: "A velocidade de transmissão."
    - id: parity
      type: System.IO.Ports.Parity
      description: "Um do <xref:System.IO.Ports.SerialPort.Parity*>valores.</xref:System.IO.Ports.SerialPort.Parity*>"
    - id: dataBits
      type: System.Int32
      description: "O valor de bits de dados."
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A porta especificada não foi possível encontrar ou abrir."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)
  id: '#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(String,Int32,Parity,Int32,StopBits)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity,Int32,StopBits)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity,Int32,StopBits)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> classe utilizando o nome de porta especificado, a velocidade de transmissão., o bit de paridade, a bits de dados e pare o bits."
  remarks: "Utilize este construtor para criar uma nova instância do <xref:System.IO.Ports.SerialPort>classe quando pretender especificar o nome de porta, a velocidade de transmissão, o bit de paridade, bits de dados e pare o bits.</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits, System.IO.Ports.StopBits stopBits);
    parameters:
    - id: portName
      type: System.String
      description: "A porta a utilizar (por exemplo, COM1)."
    - id: baudRate
      type: System.Int32
      description: "A velocidade de transmissão."
    - id: parity
      type: System.IO.Ports.Parity
      description: "Um do <xref:System.IO.Ports.SerialPort.Parity*>valores.</xref:System.IO.Ports.SerialPort.Parity*>"
    - id: dataBits
      type: System.Int32
      description: "O valor de bits de dados."
    - id: stopBits
      type: System.IO.Ports.StopBits
      description: "Um do <xref:System.IO.Ports.SerialPort.StopBits*>valores.</xref:System.IO.Ports.SerialPort.StopBits*>"
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A porta especificada não foi possível encontrar ou abrir."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.BaseStream
  id: BaseStream
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: BaseStream
  nameWithType: SerialPort.BaseStream
  fullName: System.IO.Ports.SerialPort.BaseStream
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém o subjacente <xref:System.IO.Stream>do objeto para uma <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> objeto.</xref:System.IO.Stream>"
  remarks: "Utilize esta propriedade para operações de e/s assíncronas explícitas ou para passar o <xref:System.IO.Ports.SerialPort>objeto a uma <xref:System.IO.Stream>classe de wrapper como <xref:System.IO.StreamWriter>.</xref:System.IO.StreamWriter> </xref:System.IO.Stream> </xref:System.IO.Ports.SerialPort>       Abra qualquer devolve de propriedade da porta série BaseStream um objeto que deriva de abstrato <xref:System.IO.Stream>classe e implementa de leitura e escrita métodos utilizando prototypes herdadas o <xref:System.IO.Stream>classe: <xref:System.IO.Stream.BeginRead%2A>, <xref:System.IO.Stream.BeginWrite%2A>, <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, <xref:System.IO.Stream.Write%2A>e <xref:System.IO.Stream.WriteByte%2A>.</xref:System.IO.Stream.WriteByte%2A> </xref:System.IO.Stream.Write%2A> </xref:System.IO.Stream.ReadByte%2A> </xref:System.IO.Stream.Read%2A> </xref:System.IO.Stream.BeginWrite%2A> </xref:System.IO.Stream.BeginRead%2A> </xref:System.IO.Stream> </xref:System.IO.Stream> Estes métodos podem ser útil ao transmitir um recurso de série encapsulado para uma <xref:System.IO.Stream>classe de wrapper.</xref:System.IO.Stream>       Devido a inaccessibility do identificador de ficheiro encapsulada, o <xref:System.IO.Stream.Length%2A>e <xref:System.IO.Stream.Position%2A>Propriedades não são suportadas e o <xref:System.IO.Stream.Seek%2A>e <xref:System.IO.Stream.SetLength%2A>métodos não são suportados.</xref:System.IO.Stream.SetLength%2A> </xref:System.IO.Stream.Seek%2A> </xref:System.IO.Stream.Position%2A> </xref:System.IO.Stream.Length%2A>"
  syntax:
    content: public System.IO.Stream BaseStream { get; }
    return:
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>objeto.</xref:System.IO.Stream>"
  overload: System.IO.Ports.SerialPort.BaseStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está fechado. Isto pode ocorrer porque o <> </> *> não tiver sido chamado o método ou <> </> *> método foi chamado."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O fluxo está numa aplicação .NET Compact Framework e um dos seguintes métodos foi chamado: <> </> *> <> </> *> <> </> *> <> </> *> do .NET Compact Framework não suporta o modelo assíncrono com fluxos de base."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.BaudRate
  id: BaudRate
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: BaudRate
  nameWithType: SerialPort.BaudRate
  fullName: System.IO.Ports.SerialPort.BaudRate
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define a velocidade de transmissão de série."
  remarks: "A velocidade de transmissão deve ser suportada pelo controlador de série do utilizador. O valor predefinido é 9600 bits por segundo (bps)."
  example:
  - "The following example shows how to set the BaudRate property to `9600`.  \n  \n [!code-cs[System.IO.Ports.SerialPort#20](~/add/codesnippet/csharp/p-system.io.ports.serial_3_1.cs)]\n [!code-cpp[System.IO.Ports.SerialPort#20](~/add/codesnippet/cpp/p-system.io.ports.serial_3_1.cpp)]\n [!code-vb[System.IO.Ports.SerialPort#20](~/add/codesnippet/visualbasic/p-system.io.ports.serial_3_1.vb)]  \n  \n The following example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_3_2.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_3_2.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_3_2.vb)]"
  syntax:
    content: public int BaudRate { get; set; }
    return:
      type: System.Int32
      description: "A velocidade de transmissão."
  overload: System.IO.Ports.SerialPort.BaudRate*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A velocidade de transmissão especificada é menor ou igual a zero ou é maior do que a velocidade de transmissão permitido máximo para o dispositivo."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.BreakState
  id: BreakState
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: BreakState
  nameWithType: SerialPort.BreakState
  fullName: System.IO.Ports.SerialPort.BreakState
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o estado de sinal de break."
  remarks: "O estado de sinal de quebra ocorre quando um transmissão está suspenso e a linha é colocada num Estado quebra (todos os baixa, nenhum bits de paragem) até lançada. Para introduzir um Estado de quebra, defina esta propriedade como `true`. Se a porta já está num Estado quebra, definir esta propriedade novamente ao `true` não resulta numa exceção. Não é possível escrever o <xref:System.IO.Ports.SerialPort>objeto enquanto BreakState `true`.</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public bool BreakState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a porta está num Estado quebra; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.BreakState*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está fechado. Isto pode ocorrer porque o <> </> *> não tiver sido chamado o método ou <> </> *> método foi chamado."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.BytesToRead
  id: BytesToRead
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: BytesToRead
  nameWithType: SerialPort.BytesToRead
  fullName: System.IO.Ports.SerialPort.BytesToRead
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém o número de bytes de dados na memória intermédia de receção."
  remarks: "A memória intermédia de receção inclui o controlador série memória intermédia de receção, bem como a memória intermédia interna no <xref:System.IO.Ports.SerialPort>objeto propriamente dito.</xref:System.IO.Ports.SerialPort>       Porque a propriedade BytesToRead representa ambos o <xref:System.IO.Ports.SerialPort>memória intermédia e a memória intermédia criada do Windows, pode devolver um valor maior do que o <xref:System.IO.Ports.SerialPort.ReadBufferSize%2A>propriedade, o que representa apenas a Windows criados memória intermédia.</xref:System.IO.Ports.SerialPort.ReadBufferSize%2A> </xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public int BytesToRead { get; }
    return:
      type: System.Int32
      description: "O número de bytes de dados na memória intermédia de receção."
  overload: System.IO.Ports.SerialPort.BytesToRead*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta não está aberta."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.BytesToWrite
  id: BytesToWrite
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: BytesToWrite
  nameWithType: SerialPort.BytesToWrite
  fullName: System.IO.Ports.SerialPort.BytesToWrite
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém o número de bytes de dados na memória intermédia de envio."
  remarks: "A memória intermédia de envio inclui o controlador série memória intermédia de envio, bem como a memória intermédia interna no <xref:System.IO.Ports.SerialPort>objeto propriamente dito.</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public int BytesToWrite { get; }
    return:
      type: System.Int32
      description: "O número de bytes de dados na memória intermédia de envio."
  overload: System.IO.Ports.SerialPort.BytesToWrite*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A porta está num estado inválido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está fechado. Isto pode ocorrer porque o <> </> *> não tiver sido chamado o método ou <> </> *> método foi chamado."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.CDHolding
  id: CDHolding
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: CDHolding
  nameWithType: SerialPort.CDHolding
  fullName: System.IO.Ports.SerialPort.CDHolding
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém o estado da linha de detetar Carrier da porta."
  remarks: "Esta propriedade pode ser utilizada para monitorizar o estado da linha de deteção de carrier para uma porta. Não existem operadora normalmente indica que o recetor tem desligou e operadora foi removida."
  syntax:
    content: public bool CDHolding { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se for detetada operadora; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.CDHolding*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está fechado. Isto pode ocorrer porque o <> </> *> não tiver sido chamado o método ou <> </> *> método foi chamado."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Close
  id: Close
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Close()
  nameWithType: SerialPort.Close()
  fullName: System.IO.Ports.SerialPort.Close()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Fecha a ligação de porta, define o <xref:System.IO.Ports.SerialPort.IsOpen*>propriedade <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>e disposes interna de <xref:System.IO.Stream>objeto.</xref:System.IO.Stream> </xref:System.IO.Ports.SerialPort.IsOpen*>"
  remarks: "Chamar este método fecha o <xref:System.IO.Ports.SerialPort>objeto e limpa os dois a receção e transmitir memórias intermédias.</xref:System.IO.Ports.SerialPort> Este método chama o <xref:System.ComponentModel.Component.Dispose?displayProperty=fullName>método, o que invoca protegida <xref:System.IO.Ports.SerialPort.Dispose%28System.Boolean%29?displayProperty=fullName>método com o `disposing` parâmetro definido como `true`.</xref:System.IO.Ports.SerialPort.Dispose%28System.Boolean%29?displayProperty=fullName> </xref:System.ComponentModel.Component.Dispose?displayProperty=fullName>       A melhor prática para qualquer aplicação está a aguardar algum período de tempo depois de chamar o método fechar antes de tentar chamar o <xref:System.IO.Ports.SerialPort.Open%2A>método, como a porta pode não ser fechado instantaneamente.</xref:System.IO.Ports.SerialPort.Open%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/m-system.io.ports.serial_5_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/m-system.io.ports.serial_5_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/m-system.io.ports.serial_5_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.IO.Ports.SerialPort.Close*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.CtsHolding
  id: CtsHolding
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: CtsHolding
  nameWithType: SerialPort.CtsHolding
  fullName: System.IO.Ports.SerialPort.CtsHolding
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém o estado da linha de limpar a enviar."
  remarks: "A linha de limpar Send (CTS) é utilizada no pedido de envio/Limpar para enviar handshaking de hardware (RTS/CTS). A linha CTS é consultada através de uma porta antes do envio de dados."
  syntax:
    content: public bool CtsHolding { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a linha de limpar a enviar é detetada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.CtsHolding*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está fechado. Isto pode ocorrer porque o <> </> *> não tiver sido chamado o método ou <> </> *> método foi chamado."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DataBits
  id: DataBits
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DataBits
  nameWithType: SerialPort.DataBits
  fullName: System.IO.Ports.SerialPort.DataBits
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o comprimento de bits de dados por byte padrão."
  remarks: "O intervalo de valores para esta propriedade é de 5 a 8. O valor predefinido é de 8."
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_7_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_7_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_7_1.vb)]"
  syntax:
    content: public int DataBits { get; set; }
    return:
      type: System.Int32
      description: "O comprimento de bits de dados."
  overload: System.IO.Ports.SerialPort.DataBits*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor de bits de dados é inferior a 5 ou mais 8."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DataReceived
  id: DataReceived
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DataReceived
  nameWithType: SerialPort.DataReceived
  fullName: System.IO.Ports.SerialPort.DataReceived
  type: Event
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Indica que foram recebidos dados através de uma porta representada pelo <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> objeto."
  remarks: "Eventos de dados podem ser causados por qualquer um dos itens no <xref:System.IO.Ports.SerialData>enumeração.</xref:System.IO.Ports.SerialData> Porque o sistema operativo determina se quer emitir este evento ou não, podem ser comunicados nem todos os erros de paridade.       O evento de DataReceived também é gerado se um caráter de Eof é recebido, independentemente do número de bytes na memória intermédia interna e o valor da <xref:System.IO.Ports.SerialPort.ReceivedBytesThreshold%2A>propriedade.</xref:System.IO.Ports.SerialPort.ReceivedBytesThreshold%2A>       <xref:System.IO.Ports.SerialPort.PinChanged>, DataReceived, e <xref:System.IO.Ports.SerialPort.ErrorReceived>eventos podem ser chamados para fora de ordem, e pode existir um ligeiro atraso entre quando o fluxo subjacente relatórios de erro e quando é executado o processador de eventos.</xref:System.IO.Ports.SerialPort.ErrorReceived></xref:System.IO.Ports.SerialPort.PinChanged> Pode executar o processador de eventos apenas um cada vez.       O evento DataReceived não é garantido gerado para cada byte recebido. Utilize o <xref:System.IO.Ports.SerialPort.BytesToRead%2A>propriedade para determinar a quantidade de dados for deixado na memória intermédia de leitura.</xref:System.IO.Ports.SerialPort.BytesToRead%2A>       O evento de DataReceived é gerado num thread secundário quando são recebidos dados a partir de <xref:System.IO.Ports.SerialPort>objeto.</xref:System.IO.Ports.SerialPort> Uma vez que este evento é desencadeado num thread secundário e não o thread principal, a tentar modificar alguns elementos no thread principal, tais como elementos de IU, pode emitir uma exceção de thread. Se for necessário modificar os elementos da principal <xref:System.Windows.Forms.Form>ou <xref:System.Windows.Forms.Control>, pedidos de alteração de post novamente utilizando <xref:System.Windows.Forms.Control.Invoke%2A>, que será efetuado o trabalho no thread correcto.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control> </xref:System.Windows.Forms.Form>       Para obter mais informações sobre como lidar com eventos, consulte [eventos](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example adds a <xref:System.IO.Ports.SerialDataReceivedEventHandler> to DataReceived to read all the available data received on the COM1 port. Note that to test this code it is necessary to have hardware attached to COM1 that will send data.  \n  \n [!code-cs[System.IO.Ports.SerialPort#06](~/add/codesnippet/csharp/e-system.io.ports.serial_1.cs)]\n [!code-cpp[System.IO.Ports.SerialPort#06](~/add/codesnippet/cpp/e-system.io.ports.serial_1.cpp)]\n [!code-vb[System.IO.Ports.SerialPort#06](~/add/codesnippet/visualbasic/e-system.io.ports.serial_1.vb)]"
  syntax:
    content: public event System.IO.Ports.SerialDataReceivedEventHandler DataReceived;
    return:
      type: System.IO.Ports.SerialDataReceivedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DiscardInBuffer
  id: DiscardInBuffer
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DiscardInBuffer()
  nameWithType: SerialPort.DiscardInBuffer()
  fullName: System.IO.Ports.SerialPort.DiscardInBuffer()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Rejeições dados a partir do controlador série recebem da memória intermédia."
  remarks: 'Este método é equivalente para o seguinte código Visual Basic: `MSComm1.InBufferCount = 0`. Limpa a memória intermédia de receção, mas não afeta a memória intermédia transmit.'
  syntax:
    content: public void DiscardInBuffer ();
    parameters: []
  overload: System.IO.Ports.SerialPort.DiscardInBuffer*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está fechado. Isto pode ocorrer porque o <> </> *> não tiver sido chamado o método ou <> </> *> método foi chamado."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DiscardNull
  id: DiscardNull
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DiscardNull
  nameWithType: SerialPort.DiscardNull
  fullName: System.IO.Ports.SerialPort.DiscardNull
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define um valor que indica se os bytes nulos são ignorados quando transmitidas entre a porta e a memória intermédia de receção."
  remarks: "Este valor normalmente deve ser definido como `false`, especialmente para as transmissões de binárias.  Definição desta propriedade como `true` pode causar resultados inesperados para codificado de UTF32 e UTF16 bytes."
  syntax:
    content: public bool DiscardNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se bytes nulos são ignorados; caso contrário <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.DiscardNull*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está fechado. Isto pode ocorrer porque o <> </> *> não tiver sido chamado o método ou <> </> *> método foi chamado."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DiscardOutBuffer
  id: DiscardOutBuffer
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DiscardOutBuffer()
  nameWithType: SerialPort.DiscardOutBuffer()
  fullName: System.IO.Ports.SerialPort.DiscardOutBuffer()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Rejeições dados a partir do controlador série transmitem da memória intermédia."
  remarks: 'Este método é equivalente para o seguinte código Visual Basic: `MSComm1.OutBufferCount = 0`. Limpa a memória intermédia transmit, mas não afeta a memória intermédia de receção.'
  syntax:
    content: public void DiscardOutBuffer ();
    parameters: []
  overload: System.IO.Ports.SerialPort.DiscardOutBuffer*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está fechado. Isto pode ocorrer porque o <> </> *> não tiver sido chamado o método ou <> </> *> método foi chamado."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SerialPort.Dispose(Boolean)
  fullName: System.IO.Ports.SerialPort.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> e opcionalmente liberta os recursos geridos."
  remarks: "Este método é denominado pelo público <xref:System.ComponentModel.Component.Dispose%2A>método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>Invoca o método de Dispose protegido com o `disposing` parâmetro definido como `true`.</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>invoca Dispose com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro é `true`, este método versões retidos por quaisquer objetos geridos de todos os recursos que este <xref:System.IO.Ports.SerialPort>referências.</xref:System.IO.Ports.SerialPort> Este método invoca o <xref:System.ComponentModel.Component.Dispose%2A>método de cada objeto referenciado.</xref:System.ComponentModel.Component.Dispose%2A>       Este método esvaziamentos da e fecha o objeto de sequência <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade.</xref:System.IO.Ports.SerialPort.BaseStream%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.IO.Ports.SerialPort.Dispose*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DsrHolding
  id: DsrHolding
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DsrHolding
  nameWithType: SerialPort.DsrHolding
  fullName: System.IO.Ports.SerialPort.DsrHolding
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém o estado do sinal de conjunto de dados pronta (DSR)."
  remarks: "Esta propriedade é utilizada na handshaking de conjunto de dados pronta/dados Terminal pronto (DSR/DTR). O sinal de conjunto de dados pronta (DSR), normalmente, é enviado por um modem de acesso a uma porta para indicar que está pronto para a transmissão de dados ou a receção de dados."
  syntax:
    content: public bool DsrHolding { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se um sinal de conjunto de dados preparada foi enviado para a porta; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.DsrHolding*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O fluxo está fechado. Isto pode ocorrer porque o <> </> *> não tiver sido chamado o método ou <> </> *> método foi chamado."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DtrEnable
  id: DtrEnable
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DtrEnable
  nameWithType: SerialPort.DtrEnable
  fullName: System.IO.Ports.SerialPort.DtrEnable
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define um valor que permite que o sinal de Data Terminal Ready (DTR) durante a comunicação de série."
  remarks: "Data Terminal Ready (DTR), normalmente, é ativado durante handshaking de software XON/XOFF e pedido de envio/limpar enviar handshaking de hardware (RTS/CTS) e as comunicações do modem."
  syntax:
    content: public bool DtrEnable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para ativar a Data Terminal Ready (DTR); caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.DtrEnable*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Encoding
  id: Encoding
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Encoding
  nameWithType: SerialPort.Encoding
  fullName: System.IO.Ports.SerialPort.Encoding
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define a codificação de bytes para a conversão de pré e pós-implementação transmissão de texto."
  syntax:
    content: public System.Text.Encoding Encoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "Um <xref:System.Text.Encoding>objeto.</xref:System.Text.Encoding> A predefinição é <xref:System.Text.ASCIIEncoding>.</xref:System.Text.ASCIIEncoding>"
  overload: System.IO.Ports.SerialPort.Encoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A propriedade de codificação foi definida como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A propriedade de codificação foi definida como uma codificação não é <xref:System.Text.ASCIIEncoding>, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UTF32Encoding>, <xref:System.Text.UnicodeEncoding>, um das codificações de byte único do Windows ou um das codificações de byte duplo do Windows.</xref:System.Text.UnicodeEncoding> </xref:System.Text.UTF32Encoding> </xref:System.Text.UTF8Encoding> </xref:System.Text.ASCIIEncoding>"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ErrorReceived
  id: ErrorReceived
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ErrorReceived
  nameWithType: SerialPort.ErrorReceived
  fullName: System.IO.Ports.SerialPort.ErrorReceived
  type: Event
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Indica que ocorreu um erro com uma porta representada por um <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> objeto."
  remarks: "Eventos de erro podem ser causados por qualquer um dos itens no <xref:System.IO.Ports.SerialError>enumeração.</xref:System.IO.Ports.SerialError> Porque o sistema operativo determina se quer emitir este evento ou não, podem ser comunicados nem todos os erros de paridade.       <xref:System.IO.Ports.SerialPort.PinChanged>, <xref:System.IO.Ports.SerialPort.DataReceived>, ErrorReceived eventos podem ser chamados para fora de ordem e pode existir um ligeiro atraso entre quando o fluxo subjacente relatórios de erro e quando o código pode quando é executado o processador de eventos.</xref:System.IO.Ports.SerialPort.DataReceived></xref:System.IO.Ports.SerialPort.PinChanged> Pode executar o processador de eventos apenas um cada vez.       Se ocorrer um erro de paridade no byte à direita de um fluxo, será adicionado um byte adicional na memória intermédia de entrada com um valor de 126.       O evento de ErrorReceived é gerado num thread secundário quando é recebido um erro do <xref:System.IO.Ports.SerialPort>objeto.</xref:System.IO.Ports.SerialPort> Uma vez que este evento é desencadeado num thread secundário e não o thread principal, a tentar modificar alguns elementos no thread principal, tais como elementos de IU, pode emitir uma exceção de thread. Se for necessário modificar os elementos da principal <xref:System.Windows.Forms.Form>ou <xref:System.Windows.Forms.Control>, pedidos de alteração de post novamente utilizando <xref:System.Windows.Forms.Control.Invoke%2A>, que será efetuado o trabalho no thread correcto.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control> </xref:System.Windows.Forms.Form>       Para obter mais informações sobre como lidar com eventos, consulte [eventos](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event System.IO.Ports.SerialErrorReceivedEventHandler ErrorReceived;
    return:
      type: System.IO.Ports.SerialErrorReceivedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.GetPortNames
  id: GetPortNames
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: GetPortNames()
  nameWithType: SerialPort.GetPortNames()
  fullName: System.IO.Ports.SerialPort.GetPortNames()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém uma matriz de nomes de porta série para o computador atual."
  remarks: "The order of port names returned from GetPortNames is not specified.  \n  \n Use the GetPortNames method to query the current computer for a list of valid serial port names. For example, you can use this method to determine whether COM1 and COM2 are valid serial ports for the current computer.  \n  \n The port names are obtained from the system registry (for example, HKEY_LOCAL_MACHINE\\HARDWARE\\DEVICEMAP\\SERIALCOMM). If the registry contains stale or otherwise incorrect data then the GetPortNames method will return incorrect data."
  example:
  - "The following code example uses the GetPortNames method to display serial port names to the console.  \n  \n [!code-cs[IO.Ports.GetPortNames#1](~/add/codesnippet/csharp/m-system.io.ports.serial_3_1.cs)]\n [!code-cpp[IO.Ports.GetPortNames#1](~/add/codesnippet/cpp/m-system.io.ports.serial_3_1.cpp)]\n [!code-vb[IO.Ports.GetPortNames#1](~/add/codesnippet/visualbasic/m-system.io.ports.serial_3_1.vb)]"
  syntax:
    content: public static string[] GetPortNames ();
    parameters: []
    return:
      type: System.String[]
      description: "Uma matriz de nomes de porta série para o computador atual."
  overload: System.IO.Ports.SerialPort.GetPortNames*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Não foi possível consultar os nomes de porta série."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Handshake
  id: Handshake
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Handshake
  nameWithType: SerialPort.Handshake
  fullName: System.IO.Ports.SerialPort.Handshake
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o protocolo de transmissão de porta série de dados através de um valor de handshaking <xref href=&quot;System.IO.Ports.Handshake&quot;> </xref>."
  remarks: "Quando é utilizado handshaking, o dispositivo ligado ao <xref:System.IO.Ports.SerialPort>objeto é instruído para parar de enviar dados quando existe, pelo menos, (<xref:System.IO.Ports.SerialPort.ReadBufferSize%2A>-1024) bytes na memória intermédia.</xref:System.IO.Ports.SerialPort.ReadBufferSize%2A> </xref:System.IO.Ports.SerialPort> O dispositivo é instruído para começar a enviar dados novamente quando existirem menos ou 1024 bytes na memória intermédia. Se o dispositivo está a enviar dados em blocos que são maiores do que 1024 bytes, isto pode fazer com que a memória intermédia de capacidade excedida.       Se a propriedade de Handshake estiver definida como <xref:System.IO.Ports.Handshake>e <xref:System.IO.Ports.SerialPort.CtsHolding%2A>está definido como `false`, o caráter de XOFF de entrada não será enviado.</xref:System.IO.Ports.SerialPort.CtsHolding%2A> </xref:System.IO.Ports.Handshake> Se <xref:System.IO.Ports.SerialPort.CtsHolding%2A>, em seguida, está definida como `true`, é necessário enviar mais dados antes do caráter de XOff será enviado.</xref:System.IO.Ports.SerialPort.CtsHolding%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_0_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_0_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_0_1.vb)]"
  syntax:
    content: public System.IO.Ports.Handshake Handshake { get; set; }
    return:
      type: System.IO.Ports.Handshake
      description: "Um do <xref href=&quot;System.IO.Ports.Handshake&quot;> </xref> valores. A predefinição é <xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.Handshake*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor transmitido não é um valor válido de <xref href=&quot;System.IO.Ports.Handshake&quot;> </xref> enumeração."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.InfiniteTimeout
  id: InfiniteTimeout
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: InfiniteTimeout
  nameWithType: SerialPort.InfiniteTimeout
  fullName: System.IO.Ports.SerialPort.InfiniteTimeout
  type: Field
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Indica que nenhum limite de tempo deve ocorrer."
  remarks: "Este valor é utilizado com o <xref:System.IO.Ports.SerialPort.ReadTimeout%2A>e <xref:System.IO.Ports.SerialPort.WriteTimeout%2A>Propriedades.</xref:System.IO.Ports.SerialPort.WriteTimeout%2A> </xref:System.IO.Ports.SerialPort.ReadTimeout%2A>"
  syntax:
    content: public const int InfiniteTimeout = -1;
    return:
      type: System.Int32
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.IsOpen
  id: IsOpen
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: IsOpen
  nameWithType: SerialPort.IsOpen
  fullName: System.IO.Ports.SerialPort.IsOpen
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém um valor que indica o estado open ou closed do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> objeto."
  remarks: "A propriedade IsOpen controla se a porta está aberta para utilização pelo chamador, não se a porta está aberta por qualquer aplicação na máquina."
  syntax:
    content: public bool IsOpen { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a porta série está aberta; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.IsOpen*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O valor de IsOpen transmitido é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor de IsOpen transmitido é uma cadeia vazia (&quot;&quot;)."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.NewLine
  id: NewLine
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: NewLine
  nameWithType: SerialPort.NewLine
  fullName: System.IO.Ports.SerialPort.NewLine
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o valor utilizado para interpretar o fim de uma chamada para o <> </> *> e <> </> *> métodos."
  remarks: "Esta propriedade determina o valor (bytes) define o fim de uma linha para o <xref:System.IO.Ports.SerialPort.ReadLine%2A>e <xref:System.IO.Ports.SerialPort.WriteLine%2A>métodos.</xref:System.IO.Ports.SerialPort.WriteLine%2A> </xref:System.IO.Ports.SerialPort.ReadLine%2A> Por predefinição, o valor de extremidade de linha é <xref:System.Environment.NewLine%2A>.</xref:System.Environment.NewLine%2A> Deverá alterar isto para um valor diferente se o dispositivo de série específico que está a trabalhar com utiliza um valor diferente para a mesma finalidade."
  syntax:
    content: public string NewLine { get; set; }
    return:
      type: System.String
      description: "Um valor que representa o fim de uma linha. A predefinição é uma linha, <xref:System.Environment.NewLine*>.</xref:System.Environment.NewLine*>"
  overload: System.IO.Ports.SerialPort.NewLine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor da propriedade está vazio."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "O valor da propriedade é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Open
  id: Open
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Open()
  nameWithType: SerialPort.Open()
  fullName: System.IO.Ports.SerialPort.Open()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Abre uma nova ligação de porta série."
  remarks: "Pode existir apenas uma ligação aberta por <xref:System.IO.Ports.SerialPort>objeto.</xref:System.IO.Ports.SerialPort>       A melhor prática para qualquer aplicação está a aguardar algum período de tempo após chamar o <xref:System.IO.Ports.SerialPort.Close%2A>método antes de tentar chamar o método Open, como a porta não pode ser fechada instantaneamente.</xref:System.IO.Ports.SerialPort.Close%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/m-system.io.ports.serial_2_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/m-system.io.ports.serial_2_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/m-system.io.ports.serial_2_1.vb)]"
  syntax:
    content: public void Open ();
    parameters: []
  overload: System.IO.Ports.SerialPort.Open*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Access is denied to the port.  \n  \n \\- or -  \n  \n The current process, or another process on the system, already has the specified COM port open either by a <xref href=\"System.IO.Ports.SerialPort\"></xref> instance or in unmanaged code."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Uma ou mais das propriedades para esta instância são inválidas. Por exemplo, o <> </> *>, <> </> *>, ou <> </> *> propriedades não são valores válidos; o <> </> *> é menor ou igual a zero; o <> </> *> ou <> </> *> propriedade é inferior a zero e não é <xref href=&quot;System.IO.Ports.SerialPort.InfiniteTimeout&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The port name does not begin with \"COM\".  \n  \n \\- or -  \n  \n The file type of the port is not supported."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada na instância atual do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> já está aberto."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Parity
  id: Parity
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Parity
  nameWithType: SerialPort.Parity
  fullName: System.IO.Ports.SerialPort.Parity
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o protocolo a verificação de paridade."
  remarks: "Paridade é um procedimento de verificação de erro em que o número de 1s tem sempre de ser o mesmo — mesmo ou ímpar — para cada grupo de bits que é transmitido sem erros. Comunicações de modem para modem, paridade é frequentemente um dos parâmetros que tem de ser acordados por entidades confiadoras de envio e receção de colocar as partes antes de transmissão pode demorar.       Se ocorrer um erro de paridade no byte à direita de um fluxo, será adicionado um byte adicional na memória intermédia de entrada com um valor de 126."
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_6_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_6_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_6_1.vb)]"
  syntax:
    content: public System.IO.Ports.Parity Parity { get; set; }
    return:
      type: System.IO.Ports.Parity
      description: "Um dos valores da enumeração que representa o protocolo a verificação de paridade. A predefinição é <xref href=&quot;System.IO.Ports.Parity&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.Parity*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor de paridade transmitido não é um valor válido no <xref href=&quot;System.IO.Ports.Parity&quot;> </xref> enumeração."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ParityReplace
  id: ParityReplace
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ParityReplace
  nameWithType: SerialPort.ParityReplace
  fullName: System.IO.Ports.SerialPort.ParityReplace
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o byte que substitui bytes inválidos no fluxo de dados quando ocorre um erro de paridade."
  remarks: "Se o valor é definido para o carácter de nulo, a substituição de paridade está desativada."
  syntax:
    content: public byte ParityReplace { get; set; }
    return:
      type: System.Byte
      description: "Um byte substitui bytes inválidos."
  overload: System.IO.Ports.SerialPort.ParityReplace*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.PinChanged
  id: PinChanged
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: PinChanged
  nameWithType: SerialPort.PinChanged
  fullName: System.IO.Ports.SerialPort.PinChanged
  type: Event
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Indica se tiver ocorrido um evento de sinal não sejam de dados na porta representada pelo <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> objeto."
  remarks: "Série pin alterado eventos podem ser causados por qualquer um dos itens no <xref:System.IO.Ports.SerialPinChange>enumeração.</xref:System.IO.Ports.SerialPinChange> Porque o sistema operativo determina se quer emitir este evento ou não, podem ser comunicados nem todos os erros de paridade. Como parte do evento, o novo valor de pin está definido.       O evento de PinChanged é gerado quando um <xref:System.IO.Ports.SerialPort>objeto introduz o <xref:System.IO.Ports.SerialPort.BreakState%2A>, mas não quando a porta sai <xref:System.IO.Ports.SerialPort.BreakState%2A>.</xref:System.IO.Ports.SerialPort.BreakState%2A> </xref:System.IO.Ports.SerialPort.BreakState%2A> </xref:System.IO.Ports.SerialPort> Este comportamento não é aplicável a outros valores de <xref:System.IO.Ports.SerialPinChange>enumeração.</xref:System.IO.Ports.SerialPinChange>       PinChanged, <xref:System.IO.Ports.SerialPort.DataReceived>, e <xref:System.IO.Ports.SerialPort.ErrorReceived>eventos podem ser chamados para fora de ordem, e pode existir um ligeiro atraso entre quando o fluxo subjacente relatórios de erro e quando é executado o processador de eventos.</xref:System.IO.Ports.SerialPort.ErrorReceived> </xref:System.IO.Ports.SerialPort.DataReceived> Pode executar o processador de eventos apenas um cada vez.       O evento de PinChanged é gerado num thread secundário. Uma vez que este evento é desencadeado num thread secundário e não o thread principal, a tentar modificar alguns elementos no thread principal, tais como elementos de IU, pode emitir uma exceção de thread. Se for necessário modificar os elementos da principal <xref:System.Windows.Forms.Form>ou <xref:System.Windows.Forms.Control>, pedidos de alteração de post novamente utilizando <xref:System.Windows.Forms.Control.Invoke%2A>, que será efetuado o trabalho no thread correcto.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control> </xref:System.Windows.Forms.Form>       Para obter mais informações sobre como lidar com eventos, consulte [eventos](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event System.IO.Ports.SerialPinChangedEventHandler PinChanged;
    return:
      type: System.IO.Ports.SerialPinChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.PortName
  id: PortName
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: PortName
  nameWithType: SerialPort.PortName
  fullName: System.IO.Ports.SerialPort.PortName
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define a porta de comunicações, incluindo mas não limitado a todas as portas COM disponíveis."
  remarks: "Uma lista de nomes de porta válido pode ser obtida utilizando o <xref:System.IO.Ports.SerialPort.GetPortNames%2A>método.</xref:System.IO.Ports.SerialPort.GetPortNames%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_4_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_4_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_4_1.vb)]"
  syntax:
    content: public string PortName { get; set; }
    return:
      type: System.String
      description: "A porta de comunicações. A predefinição é COM1."
  overload: System.IO.Ports.SerialPort.PortName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The PortName property was set to a value with a length of zero.  \n  \n -or-  \n  \n The PortName property was set to a value that starts with \"\\\\\\\\\".  \n  \n -or-  \n  \n The port name was not valid."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A propriedade de PortName foi definida como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada está aberta."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: SerialPort.Read(Byte[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Lê um número de bytes do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> memória intermédia de entrada e escreve os bytes para uma matriz de bytes no desvio especificado."
  remarks: "Se for necessário alternar entre ler texto e leitura de dados binários do stream, selecione um protocolo que cuidadosamente define os limites entre texto e os dados binários, tal como ler bytes e descodificar os dados manualmente.       Porque o <xref:System.IO.Ports.SerialPort>classe coloca dados e o fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade não, os dois poderão entrar em conflito sobre quantos bytes estão disponíveis para ler.</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  O <xref:System.IO.Ports.SerialPort.BytesToRead%2A>propriedade pode indicar que existem bytes a ler, mas estes bytes podem não estar acessíveis no fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade porque tem colocado na memória intermédia para a <xref:System.IO.Ports.SerialPort>classe</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>       O método de leitura não bloqueia outras operações quando o número de bytes de leitura é igual a `count` mas existem ainda unread bytes na porta série."
  syntax:
    content: public int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A matriz de bytes a escrever a entrada para."
    - id: offset
      type: System.Int32
      description: "O desvio em `buffer` no qual pretende escrever os bytes."
    - id: count
      type: System.Int32
      description: "O número máximo de bytes a ler. Bytes menos são lidas se `count` é superior ao número de bytes na memória intermédia de entrada."
    return:
      type: System.Int32
      description: "O número de bytes lidos."
  overload: System.IO.Ports.SerialPort.Read*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A memória intermédia transmitida é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O <code> offset </code> ou <code> count </code> parâmetros estão fora de uma região válida do <code> buffer </code> a ser passadas. Either <code>offset</code> or <code>count</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>Plus <code>count</code> é superior ao comprimento do <code>buffer</code>."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Não existem bytes estavam disponíveis para leitura."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Read(Char[],Int32,Int32)
  nameWithType: SerialPort.Read(Char[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Read(Char[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Lê um número de carateres da <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> memória intermédia de entrada e escreve-as para uma matriz de carateres num desvio especificado."
  remarks: "Utilize este método para a leitura de carateres da porta série.       Se for necessário alternar entre ler texto e leitura de dados binários do stream, selecione um protocolo que cuidadosamente define os limites entre texto e os dados binários, tal como ler bytes e descodificar os dados manualmente.       Porque o <xref:System.IO.Ports.SerialPort>classe coloca dados e o fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade não, os dois poderão entrar em conflito sobre quantos carateres existem disponíveis para leitura.</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  O <xref:System.IO.Ports.SerialPort.BytesToRead%2A>propriedade pode indicar que existem carateres para ler, mas estes carateres poderão não estar acessíveis no fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade porque tem colocado na memória intermédia para a <xref:System.IO.Ports.SerialPort>classe</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>       O método de leitura não bloqueia outras operações quando o número de bytes de leitura é igual a `count` mas existem ainda unread bytes na porta série."
  syntax:
    content: public int Read (char[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "A matriz de caracteres ao escrever a entrada para."
    - id: offset
      type: System.Int32
      description: "O desvio em `buffer` no qual pretende escrever os carateres."
    - id: count
      type: System.Int32
      description: "O número máximo de carateres a ler. Menos carateres são lidas se `count` é maior do que o número de carateres na memória intermédia de entrada."
    return:
      type: System.Int32
      description: "O número de carateres de leitura."
  overload: System.IO.Ports.SerialPort.Read*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code> plus <code>count</code> is greater than the length of the buffer.  \n  \n \\- or -  \n  \n <code>count</code> is 1 and there is a surrogate character in the buffer."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>buffer</code> passed is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O <code> offset </code> ou <code> count </code> parâmetros estão fora de uma região válida do <code> buffer </code> a ser passadas. Either <code>offset</code> or <code>count</code> is less than zero."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Não estavam disponíveis para leitura."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadBufferSize
  id: ReadBufferSize
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadBufferSize
  nameWithType: SerialPort.ReadBufferSize
  fullName: System.IO.Ports.SerialPort.ReadBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o tamanho do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> memória intermédia de entrada."
  remarks: "A propriedade ReadBufferSize ignora qualquer valor inferior a 4096.       Porque a propriedade ReadBufferSize representa apenas a Windows criados memória intermédia, pode devolver um valor menor que o <xref:System.IO.Ports.SerialPort.BytesToRead%2A>propriedade, o que representa a ambos os <xref:System.IO.Ports.SerialPort>memória intermédia e a memória intermédia criados pelo Windows.</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>"
  syntax:
    content: public int ReadBufferSize { get; set; }
    return:
      type: System.Int32
      description: "O tamanho de memória intermédia, em bytes. O valor predefinido é 4096; o valor máximo é de um int positivo ou 2147483647."
  overload: System.IO.Ports.SerialPort.ReadBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O conjunto de valor ReadBufferSize é menor ou igual a zero."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A propriedade de ReadBufferSize estava definida enquanto o fluxo foi aberto."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A propriedade ReadBufferSize foi definida para um valor de número inteiro ímpar."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadByte
  id: ReadByte
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadByte()
  nameWithType: SerialPort.ReadByte()
  fullName: System.IO.Ports.SerialPort.ReadByte()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Em sincronia lê um byte do <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> memória intermédia de entrada."
  remarks: "Este método lê um byte.       Tenha cuidado quando utilizar ReadByte e <xref:System.IO.Ports.SerialPort.ReadChar%2A>em conjunto.</xref:System.IO.Ports.SerialPort.ReadChar%2A> Alternar entre ler bytes e ler carateres pode fazer com que dados adicionais para ser de leitura e/ou noutros comportamentos indesejados. Se for necessário alternar entre ler texto e leitura de dados binários do stream, selecione um protocolo que cuidadosamente define os limites entre texto e os dados binários, tal como ler bytes e descodificar os dados manualmente.      > [!NOTE] > Porque o <xref:System.IO.Ports.SerialPort>classe coloca dados e o fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade não, os dois poderão entrar em conflito sobre quantos bytes estão disponíveis para ler.</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  O <xref:System.IO.Ports.SerialPort.BytesToRead%2A>propriedade pode indicar que existem bytes a ler, mas estes bytes podem não estar acessíveis no fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade porque tem colocado na memória intermédia para a <xref:System.IO.Ports.SerialPort>classe</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>"
  syntax:
    content: public int ReadByte ();
    parameters: []
    return:
      type: System.Int32
      description: "O byte, converter para um <xref:System.Int32>, ou -1 se o fim da sequência foram lidos.</xref:System.Int32>"
  overload: System.IO.Ports.SerialPort.ReadByte*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "The operation did not complete before the time-out period ended.  \n  \n \\- or -  \n  \n No byte was read."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadChar
  id: ReadChar
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadChar()
  nameWithType: SerialPort.ReadChar()
  fullName: System.IO.Ports.SerialPort.ReadChar()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Em sincronia lê um caráter da <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> memória intermédia de entrada."
  remarks: "Este método lê um caráter completado com base na codificação.       Tenha cuidado quando utilizar <xref:System.IO.Ports.SerialPort.ReadByte%2A>e ReadChar em conjunto.</xref:System.IO.Ports.SerialPort.ReadByte%2A> Alternar entre ler bytes e ler carateres pode fazer com que dados adicionais para ser de leitura e/ou noutros comportamentos indesejados. Se for necessário alternar entre ler texto e leitura de dados binários do stream, selecione um protocolo que cuidadosamente define os limites entre texto e os dados binários, tal como ler bytes e descodificar os dados manualmente.      > [!NOTE] > Porque o <xref:System.IO.Ports.SerialPort>classe coloca dados e o fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade não, os dois poderão entrar em conflito sobre quantos bytes estão disponíveis para ler.</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  O <xref:System.IO.Ports.SerialPort.BytesToRead%2A>propriedade pode indicar que existem bytes a ler, mas estes bytes podem não estar acessíveis no fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade porque tem colocado na memória intermédia para a <xref:System.IO.Ports.SerialPort>classe</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>"
  syntax:
    content: public int ReadChar ();
    parameters: []
    return:
      type: System.Int32
      description: "O caráter que foi lido."
  overload: System.IO.Ports.SerialPort.ReadChar*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "The operation did not complete before the time-out period ended.  \n  \n \\- or -  \n  \n No character was available in the allotted time-out period."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadExisting
  id: ReadExisting
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadExisting()
  nameWithType: SerialPort.ReadExisting()
  fullName: System.IO.Ports.SerialPort.ReadExisting()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Lê todos os bytes disponíveis imediatamente, com base na codificação, no fluxo e da memória intermédia de entrada a <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> objeto."
  remarks: "Este método devolve os conteúdos do fluxo e da memória intermédia interna do <xref:System.IO.Ports.SerialPort>objeto como uma cadeia.</xref:System.IO.Ports.SerialPort> Este método não utiliza um tempo limite. Tenha em atenção que este método pode deixar à direita bytes de oportunidades potenciais na memória intermédia interna, o que torna o <xref:System.IO.Ports.SerialPort.BytesToRead%2A>valor maior que zero.</xref:System.IO.Ports.SerialPort.BytesToRead%2A>       Se for necessário alternar entre ler texto e leitura de dados binários do stream, selecione um protocolo que cuidadosamente define os limites entre texto e os dados binários, tal como ler bytes e descodificar os dados manualmente.      > [!NOTE] > O <xref:System.IO.Ports.SerialPort>classe coloca dados, mas o objeto de fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A?displayProperty=fullName>propriedade não.</xref:System.IO.Ports.SerialPort.BaseStream%2A?displayProperty=fullName> </xref:System.IO.Ports.SerialPort> Por conseguinte, o <xref:System.IO.Ports.SerialPort>objeto e o objeto de fluxo poderão ser diferente do número de bytes que estão disponíveis para ler.</xref:System.IO.Ports.SerialPort> Quando bytes são colocado na memória intermédia para a <xref:System.IO.Ports.SerialPort>objeto, o <xref:System.IO.Ports.SerialPort.BytesToRead%2A>propriedade inclui estes bytes no respectivo valor; no entanto, estes bytes podem não estar acessíveis no fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade.</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A> </xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public string ReadExisting ();
    parameters: []
    return:
      type: System.String
      description: "O conteúdo de fluxo e da memória intermédia de entrada a <xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> objeto."
  overload: System.IO.Ports.SerialPort.ReadExisting*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadLine
  id: ReadLine
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadLine()
  nameWithType: SerialPort.ReadLine()
  fullName: System.IO.Ports.SerialPort.ReadLine()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Lê até o <xref:System.IO.Ports.SerialPort.NewLine*>valor na memória intermédia de entrada.</xref:System.IO.Ports.SerialPort.NewLine*>"
  remarks: "Tenha em atenção que enquanto este método não devolve o <xref:System.IO.Ports.SerialPort.NewLine%2A>valor, o <xref:System.IO.Ports.SerialPort.NewLine%2A>valor é removido da memória intermédia.</xref:System.IO.Ports.SerialPort.NewLine%2A> </xref:System.IO.Ports.SerialPort.NewLine%2A>       Por predefinição, o método ReadLine irá bloquear até que uma linha é recebida. Se este comportamento é desejável, defina a <xref:System.IO.Ports.SerialPort.ReadTimeout%2A>propriedade para qualquer valor diferente de zero para forçar o método ReadLine para acionar uma <xref:System.TimeoutException>se uma linha não está disponível na porta.</xref:System.TimeoutException> </xref:System.IO.Ports.SerialPort.ReadTimeout%2A>       Se for necessário alternar entre ler texto e leitura de dados binários do stream, selecione um protocolo que cuidadosamente define os limites entre texto e os dados binários, tal como ler bytes e descodificar os dados manualmente.      > [!NOTE] > Porque o <xref:System.IO.Ports.SerialPort>classe coloca dados e o fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade não, os dois poderão entrar em conflito sobre quantos bytes estão disponíveis para ler.</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  O <xref:System.IO.Ports.SerialPort.BytesToRead%2A>propriedade pode indicar que existem bytes a ler, mas estes bytes podem não estar acessíveis no fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade porque tem colocado na memória intermédia para a <xref:System.IO.Ports.SerialPort>classe</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/m-system.io.ports.serial_0_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/m-system.io.ports.serial_0_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/m-system.io.ports.serial_0_1.vb)]"
  syntax:
    content: public string ReadLine ();
    parameters: []
    return:
      type: System.String
      description: "O conteúdo da memória intermédia até a primeira ocorrência de um <xref:System.IO.Ports.SerialPort.NewLine*>valor.</xref:System.IO.Ports.SerialPort.NewLine*>"
  overload: System.IO.Ports.SerialPort.ReadLine*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "The operation did not complete before the time-out period ended.  \n  \n \\- or -  \n  \n No bytes were read."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadTimeout
  id: ReadTimeout
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: SerialPort.ReadTimeout
  fullName: System.IO.Ports.SerialPort.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o número de milissegundos antes de um tempo limite ocorre quando uma operação de leitura não for concluída."
  remarks: "O valor de limite de tempo de leitura foi originalmente definido em 500 milissegundos na API Win32 comunicações. Esta propriedade permite-lhe definir este valor. O tempo limite pode ser definido para qualquer valor maior que zero ou definido como <xref:System.IO.Ports.SerialPort.InfiniteTimeout>, caso em que não ocorre nenhum limite de tempo.</xref:System.IO.Ports.SerialPort.InfiniteTimeout> <xref:System.IO.Ports.SerialPort.InfiniteTimeout>é a predefinição.</xref:System.IO.Ports.SerialPort.InfiniteTimeout>      > [!NOTE] > Utilizadores de não gerido `COMMTIMEOUTS` estrutura seria de esperar definir o valor de limite de tempo a zero para suprimir tempos limite. Para evitar tempos limite com a propriedade ReadTimeout, no entanto, tem de especificar <xref:System.IO.Ports.SerialPort.InfiniteTimeout>.</xref:System.IO.Ports.SerialPort.InfiniteTimeout>       Esta propriedade não afeta o <xref:System.IO.Stream.BeginRead%2A>método da sequência devolvida pelo <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade.</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Stream.BeginRead%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_1_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_1_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_1_1.vb)]"
  syntax:
    content: public int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "O número de milissegundos antes de um tempo limite ocorre quando uma operação de leitura não for concluída."
  overload: System.IO.Ports.SerialPort.ReadTimeout*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor de limite de tempo de leitura é menor que zero e não igual a <xref href=&quot;System.IO.Ports.SerialPort.InfiniteTimeout&quot;> </xref>."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadTo(System.String)
  id: ReadTo(System.String)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadTo(String)
  nameWithType: SerialPort.ReadTo(String)
  fullName: System.IO.Ports.SerialPort.ReadTo(String)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Lê uma cadeia até especificado <code> value </code> na memória intermédia de entrada."
  remarks: "Este método lê uma cadeia até especificado `value`. Enquanto a cadeia devolvida não inclui o `value`, a `value` é removido da memória intermédia.       Se for necessário alternar entre ler texto e leitura de dados binários do stream, selecione um protocolo que cuidadosamente define os limites entre texto e os dados binários, tal como ler bytes e descodificar os dados manualmente.      > [!NOTE] > Porque o <xref:System.IO.Ports.SerialPort>classe coloca dados e o fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade não, os dois poderão entrar em conflito sobre quantos bytes estão disponíveis para ler.</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  O <xref:System.IO.Ports.SerialPort.BytesToRead%2A>propriedade pode indicar que existem bytes a ler, mas estes bytes podem não estar acessíveis no fluxo contidas no <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade porque tem colocado na memória intermédia para a <xref:System.IO.Ports.SerialPort>classe</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>"
  syntax:
    content: public string ReadTo (string value);
    parameters:
    - id: value
      type: System.String
      description: "Um valor que indica onde interrompe a operação de leitura."
    return:
      type: System.String
      description: "O conteúdo da memória intermédia especificado até <code> value </code>."
  overload: System.IO.Ports.SerialPort.ReadTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O comprimento do <code> value </code> parâmetro é 0."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>value</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "A operação não foi concluída antes do período de limite de tempo terminou."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReceivedBytesThreshold
  id: ReceivedBytesThreshold
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReceivedBytesThreshold
  nameWithType: SerialPort.ReceivedBytesThreshold
  fullName: System.IO.Ports.SerialPort.ReceivedBytesThreshold
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o número de bytes na memória intermédia interna de entrada antes de um <xref href=&quot;System.IO.Ports.SerialPort.DataReceived&quot;> </xref> evento ocorre."
  remarks: "O <xref:System.IO.Ports.SerialPort.DataReceived>evento também é gerado se um <xref:System.IO.Ports.SerialData>caráter é recebido, independentemente do número de bytes na memória intermédia interna e o valor da propriedade ReceivedBytesThreshold.</xref:System.IO.Ports.SerialData> </xref:System.IO.Ports.SerialPort.DataReceived>"
  syntax:
    content: public int ReceivedBytesThreshold { get; set; }
    return:
      type: System.Int32
      description: "O número de bytes na memória intermédia interna de entrada antes de um <xref href=&quot;System.IO.Ports.SerialPort.DataReceived&quot;> </xref> desencadeou o evento. A predefinição é 1."
  overload: System.IO.Ports.SerialPort.ReceivedBytesThreshold*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor de ReceivedBytesThreshold é menor ou igual a zero."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.RtsEnable
  id: RtsEnable
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: RtsEnable
  nameWithType: SerialPort.RtsEnable
  fullName: System.IO.Ports.SerialPort.RtsEnable
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define um valor que indica se o pedido para sinal Send (RTS) está ativado durante a comunicação de série."
  remarks: "O pedido para transmitir (RTS) sinal é normalmente utilizado no pedido de envio/Limpar para enviar handshaking de hardware (RTS/CTS)."
  syntax:
    content: public bool RtsEnable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para ativar o pedido para transmitir (RTS); caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.RtsEnable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "O valor da propriedade RtsEnable foi definido ou obtido enquanto o <xref:System.IO.Ports.SerialPort.Handshake*>propriedade está definida como o <xref href=&quot;System.IO.Ports.Handshake&quot;> </xref> valor ou o <xref href=&quot;System.IO.Ports.Handshake&quot;> </xref> valor.</xref:System.IO.Ports.SerialPort.Handshake*>"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.StopBits
  id: StopBits
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: StopBits
  nameWithType: SerialPort.StopBits
  fullName: System.IO.Ports.SerialPort.StopBits
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o número de padrão de stopbits por byte."
  remarks: "O valor predefinido para StopBits é <xref:System.IO.Ports.StopBits>.</xref:System.IO.Ports.StopBits>       O <xref:System.IO.Ports.StopBits?displayProperty=fullName>valor não é suportado.</xref:System.IO.Ports.StopBits?displayProperty=fullName>"
  example:
  - "The following example shows how to set the StopBits property to `One`.  \n  \n [!code-cs[System.IO.Ports.SerialPort#20](~/add/codesnippet/csharp/p-system.io.ports.serial_2_1.cs)]\n [!code-cpp[System.IO.Ports.SerialPort#20](~/add/codesnippet/cpp/p-system.io.ports.serial_2_1.cpp)]\n [!code-vb[System.IO.Ports.SerialPort#20](~/add/codesnippet/visualbasic/p-system.io.ports.serial_2_1.vb)]  \n  \n The following example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_2_2.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_2_2.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_2_2.vb)]"
  syntax:
    content: public System.IO.Ports.StopBits StopBits { get; set; }
    return:
      type: System.IO.Ports.StopBits
      description: "Um do <xref href=&quot;System.IO.Ports.StopBits&quot;> </xref> valores."
  overload: System.IO.Ports.SerialPort.StopBits*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor de StopBits é <xref href=&quot;System.IO.Ports.StopBits&quot;> </xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Write(System.String)
  id: Write(System.String)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Write(String)
  nameWithType: SerialPort.Write(String)
  fullName: System.IO.Ports.SerialPort.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Escreve a cadeia especificada para a porta série."
  remarks: "Utilize este método quando pretender escrever uma cadeia como saída para uma porta série.       Se existirem demasiados bytes na memória intermédia de saída e <xref:System.IO.Ports.SerialPort.Handshake%2A>está definido como <xref:System.IO.Ports.Handshake>a <xref:System.IO.Ports.SerialPort>objeto pode gerar um <xref:System.ServiceProcess.TimeoutException>enquanto que aguarda que o dispositivo para estar pronto para aceitar mais dados.</xref:System.ServiceProcess.TimeoutException> </xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.Handshake> </xref:System.IO.Ports.SerialPort.Handshake%2A>       Por predefinição, <xref:System.IO.Ports.SerialPort>utiliza <xref:System.Text.ASCIIEncoding>de codificar os carateres.</xref:System.Text.ASCIIEncoding> </xref:System.IO.Ports.SerialPort> <xref:System.Text.ASCIIEncoding>codifica todos os caracteres maiores 127 como (char) 63 ou &quot;?&quot;.</xref:System.Text.ASCIIEncoding> Para suportar carateres adicionais nesse intervalo, definir <xref:System.IO.Ports.SerialPort.Encoding%2A>para <xref:System.Text.UTF8Encoding>, <xref:System.Text.UTF32Encoding>, ou <xref:System.Text.UnicodeEncoding>.</xref:System.Text.UnicodeEncoding> </xref:System.Text.UTF32Encoding> </xref:System.Text.UTF8Encoding> </xref:System.IO.Ports.SerialPort.Encoding%2A>"
  syntax:
    content: public void Write (string text);
    parameters:
    - id: text
      type: System.String
      description: "A cadeia de saída."
  overload: System.IO.Ports.SerialPort.Write*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>str</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "A operação não foi concluída antes do período de limite de tempo terminou."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: SerialPort.Write(Byte[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Escreve um número especificado de bytes a utilizar dados a partir de uma memória intermédia de porta série."
  remarks: "Utilize este método quando pretender escrever numa memória intermédia de bytes para criar a saída para uma porta série.       Se existirem demasiados bytes na memória intermédia de saída e <xref:System.IO.Ports.SerialPort.Handshake%2A>está definido como <xref:System.IO.Ports.Handshake>a <xref:System.IO.Ports.SerialPort>objeto pode gerar um <xref:System.ServiceProcess.TimeoutException>enquanto que aguarda que o dispositivo para estar pronto para aceitar mais dados.</xref:System.ServiceProcess.TimeoutException> </xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.Handshake> </xref:System.IO.Ports.SerialPort.Handshake%2A>       Por predefinição, <xref:System.IO.Ports.SerialPort>utiliza <xref:System.Text.ASCIIEncoding>de codificar os carateres.</xref:System.Text.ASCIIEncoding> </xref:System.IO.Ports.SerialPort> <xref:System.Text.ASCIIEncoding>codifica todos os caracteres maiores 127 como (char) 63 ou &quot;?&quot;.</xref:System.Text.ASCIIEncoding> Para suportar carateres adicionais nesse intervalo, definir <xref:System.IO.Ports.SerialPort.Encoding%2A>para <xref:System.Text.UTF8Encoding>, <xref:System.Text.UTF32Encoding>, ou <xref:System.Text.UnicodeEncoding>.</xref:System.Text.UnicodeEncoding> </xref:System.Text.UTF32Encoding> </xref:System.Text.UTF8Encoding> </xref:System.IO.Ports.SerialPort.Encoding%2A>"
  syntax:
    content: public void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A matriz de bytes que contém os dados a escrever para a porta."
    - id: offset
      type: System.Int32
      description: "O deslocamento de byte baseado em zero no `buffer` parâmetro no qual pretende começar a copiar bytes para a porta."
    - id: count
      type: System.Int32
      description: "O número de bytes para escrita."
  overload: System.IO.Ports.SerialPort.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>buffer</code> passed is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O <code> offset </code> ou <code> count </code> parâmetros estão fora de uma região válida do <code> buffer </code> a ser passadas. Either <code>offset</code> or <code>count</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>Plus <code>count</code> é superior ao comprimento do <code>buffer</code>."
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "A operação não foi concluída antes do período de limite de tempo terminou."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Write(Char[],Int32,Int32)
  nameWithType: SerialPort.Write(Char[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Write(Char[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Escreve um número especificado de carateres a utilizar dados a partir de uma memória intermédia de porta série."
  remarks: "Utilize este método quando pretender escrever numa memória intermédia de carateres para criar a saída para uma porta série.       Se existirem demasiados bytes na memória intermédia de saída e <xref:System.IO.Ports.SerialPort.Handshake%2A>está definido como <xref:System.IO.Ports.Handshake>a <xref:System.IO.Ports.SerialPort>objeto pode gerar um <xref:System.ServiceProcess.TimeoutException>enquanto que aguarda que o dispositivo para estar pronto para aceitar mais dados.</xref:System.ServiceProcess.TimeoutException> </xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.Handshake> </xref:System.IO.Ports.SerialPort.Handshake%2A>       Por predefinição, <xref:System.IO.Ports.SerialPort>utiliza <xref:System.Text.ASCIIEncoding>de codificar os carateres.</xref:System.Text.ASCIIEncoding> </xref:System.IO.Ports.SerialPort> <xref:System.Text.ASCIIEncoding>codifica todos os caracteres maiores 127 como (char) 63 ou &quot;?&quot;.</xref:System.Text.ASCIIEncoding> Para suportar carateres adicionais nesse intervalo, definir <xref:System.IO.Ports.SerialPort.Encoding%2A>para <xref:System.Text.UTF8Encoding>, <xref:System.Text.UTF32Encoding>, ou <xref:System.Text.UnicodeEncoding>.</xref:System.Text.UnicodeEncoding> </xref:System.Text.UTF32Encoding> </xref:System.Text.UTF8Encoding> </xref:System.IO.Ports.SerialPort.Encoding%2A>"
  syntax:
    content: public void Write (char[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "A matriz de caracteres que contém os dados a escrever para a porta."
    - id: offset
      type: System.Int32
      description: "O deslocamento de byte baseado em zero no `buffer` parâmetro no qual pretende começar a copiar bytes para a porta."
    - id: count
      type: System.Int32
      description: "O número de carateres a escrever."
  overload: System.IO.Ports.SerialPort.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>buffer</code> passed is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O <code> offset </code> ou <code> count </code> parâmetros estão fora de uma região válida do <code> buffer </code> a ser passadas. Either <code>offset</code> or <code>count</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>Plus <code>count</code> é superior ao comprimento do <code>buffer</code>."
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "A operação não foi concluída antes do período de limite de tempo terminou."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.WriteBufferSize
  id: WriteBufferSize
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: WriteBufferSize
  nameWithType: SerialPort.WriteBufferSize
  fullName: System.IO.Ports.SerialPort.WriteBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o tamanho da memória intermédia de saída de porta série."
  remarks: "A propriedade WriteBufferSize ignora qualquer valor com menos de 2048."
  syntax:
    content: public int WriteBufferSize { get; set; }
    return:
      type: System.Int32
      description: "O tamanho da memória intermédia de saída. A predefinição é de 2048."
  overload: System.IO.Ports.SerialPort.WriteBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor de WriteBufferSize é menor ou igual a zero."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A propriedade de WriteBufferSize estava definida enquanto o fluxo foi aberto."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A propriedade WriteBufferSize foi definida para um valor de número inteiro ímpar."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: SerialPort.WriteLine(String)
  fullName: System.IO.Ports.SerialPort.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Escreve a cadeia especificada e <xref:System.IO.Ports.SerialPort.NewLine*>valor da memória intermédia de saída.</xref:System.IO.Ports.SerialPort.NewLine*>"
  remarks: "Se existirem demasiados bytes na memória intermédia de entrada e <xref:System.IO.Ports.SerialPort.Handshake%2A>está definido como <xref:System.IO.Ports.Handshake>a <xref:System.IO.Ports.SerialPort>objeto pode gerar um <xref:System.ServiceProcess.TimeoutException>enquanto que aguarda que o dispositivo para estar pronto para aceitar mais dados.</xref:System.ServiceProcess.TimeoutException> </xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.Handshake> </xref:System.IO.Ports.SerialPort.Handshake%2A>       O resultado escrito inclui o <xref:System.IO.Ports.SerialPort.NewLine%2A>cadeia.</xref:System.IO.Ports.SerialPort.NewLine%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/m-system.io.ports.serial_1_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/m-system.io.ports.serial_1_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/m-system.io.ports.serial_1_1.vb)]"
  syntax:
    content: public void WriteLine (string text);
    parameters:
    - id: text
      type: System.String
      description: "A cadeia a escrever na memória intermédia de saída."
  overload: System.IO.Ports.SerialPort.WriteLine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>str</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A porta especificada não está aberta."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "O método WriteLine não foi possível escrever no fluxo."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.WriteTimeout
  id: WriteTimeout
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: SerialPort.WriteTimeout
  fullName: System.IO.Ports.SerialPort.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "Obtém ou define o número de milissegundos antes de um tempo limite ocorre quando uma operação de escrita não for concluída."
  remarks: "O valor de tempo limite de escrita foi originalmente definido em 500 milissegundos na API Win32 comunicações. Esta propriedade permite-lhe definir este valor. O tempo limite pode ser definido para qualquer valor maior que zero ou definido como <xref:System.IO.Ports.SerialPort.InfiniteTimeout>, caso em que não ocorre nenhum limite de tempo.</xref:System.IO.Ports.SerialPort.InfiniteTimeout> <xref:System.IO.Ports.SerialPort.InfiniteTimeout>é a predefinição.</xref:System.IO.Ports.SerialPort.InfiniteTimeout>      > [!NOTE] > Utilizadores de não gerido `COMMTIMEOUTS` estrutura seria de esperar definir o valor de limite de tempo a zero para suprimir tempos limite. Para evitar tempos limite com a propriedade WriteTimeout, no entanto, tem de especificar <xref:System.IO.Ports.SerialPort.InfiniteTimeout>.</xref:System.IO.Ports.SerialPort.InfiniteTimeout>       Esta propriedade não afeta o <xref:System.IO.Stream.BeginWrite%2A>método da sequência devolvida pelo <xref:System.IO.Ports.SerialPort.BaseStream%2A>propriedade.</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Stream.BeginWrite%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_5_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_5_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_5_1.vb)]"
  syntax:
    content: public int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "O número de milissegundos antes de ocorre um tempo limite. A predefinição é <xref href=&quot;System.IO.Ports.SerialPort.InfiniteTimeout&quot;> </xref>."
  overload: System.IO.Ports.SerialPort.WriteTimeout*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "O valor de WriteTimeout é menor que zero e não igual a <xref href=&quot;System.IO.Ports.SerialPort.InfiniteTimeout&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.TimeoutException
  isExternal: true
  name: System.TimeoutException
- uid: System.ServiceProcess.TimeoutException
  parent: System.ServiceProcess
  isExternal: false
  name: TimeoutException
  nameWithType: TimeoutException
  fullName: System.ServiceProcess.TimeoutException
- uid: System.IO.Ports.SerialPort.#ctor
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort()
  nameWithType: SerialPort.SerialPort()
  fullName: System.IO.Ports.SerialPort.SerialPort()
- uid: System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(IContainer)
  nameWithType: SerialPort.SerialPort(IContainer)
  fullName: System.IO.Ports.SerialPort.SerialPort(IContainer)
- uid: System.ComponentModel.IContainer
  parent: System.ComponentModel
  isExternal: false
  name: IContainer
  nameWithType: IContainer
  fullName: System.ComponentModel.IContainer
- uid: System.IO.Ports.SerialPort.#ctor(System.String)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(String)
  nameWithType: SerialPort.SerialPort(String)
  fullName: System.IO.Ports.SerialPort.SerialPort(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(String,Int32)
  nameWithType: SerialPort.SerialPort(String,Int32)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(String,Int32,Parity)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity)
- uid: System.IO.Ports.Parity
  parent: System.IO.Ports
  isExternal: false
  name: Parity
  nameWithType: Parity
  fullName: System.IO.Ports.Parity
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(String,Int32,Parity,Int32)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity,Int32)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity,Int32)
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(String,Int32,Parity,Int32,StopBits)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity,Int32,StopBits)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity,Int32,StopBits)
- uid: System.IO.Ports.StopBits
  parent: System.IO.Ports
  isExternal: false
  name: StopBits
  nameWithType: StopBits
  fullName: System.IO.Ports.StopBits
- uid: System.IO.Ports.SerialPort.BaseStream
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BaseStream
  nameWithType: SerialPort.BaseStream
  fullName: System.IO.Ports.SerialPort.BaseStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Ports.SerialPort.BaudRate
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BaudRate
  nameWithType: SerialPort.BaudRate
  fullName: System.IO.Ports.SerialPort.BaudRate
- uid: System.IO.Ports.SerialPort.BreakState
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BreakState
  nameWithType: SerialPort.BreakState
  fullName: System.IO.Ports.SerialPort.BreakState
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Ports.SerialPort.BytesToRead
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BytesToRead
  nameWithType: SerialPort.BytesToRead
  fullName: System.IO.Ports.SerialPort.BytesToRead
- uid: System.IO.Ports.SerialPort.BytesToWrite
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BytesToWrite
  nameWithType: SerialPort.BytesToWrite
  fullName: System.IO.Ports.SerialPort.BytesToWrite
- uid: System.IO.Ports.SerialPort.CDHolding
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: CDHolding
  nameWithType: SerialPort.CDHolding
  fullName: System.IO.Ports.SerialPort.CDHolding
- uid: System.IO.Ports.SerialPort.Close
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Close()
  nameWithType: SerialPort.Close()
  fullName: System.IO.Ports.SerialPort.Close()
- uid: System.IO.Ports.SerialPort.CtsHolding
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: CtsHolding
  nameWithType: SerialPort.CtsHolding
  fullName: System.IO.Ports.SerialPort.CtsHolding
- uid: System.IO.Ports.SerialPort.DataBits
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DataBits
  nameWithType: SerialPort.DataBits
  fullName: System.IO.Ports.SerialPort.DataBits
- uid: System.IO.Ports.SerialPort.DataReceived
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DataReceived
  nameWithType: SerialPort.DataReceived
  fullName: System.IO.Ports.SerialPort.DataReceived
- uid: System.IO.Ports.SerialDataReceivedEventHandler
  parent: System.IO.Ports
  isExternal: false
  name: SerialDataReceivedEventHandler
  nameWithType: SerialDataReceivedEventHandler
  fullName: System.IO.Ports.SerialDataReceivedEventHandler
- uid: System.IO.Ports.SerialPort.DiscardInBuffer
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardInBuffer()
  nameWithType: SerialPort.DiscardInBuffer()
  fullName: System.IO.Ports.SerialPort.DiscardInBuffer()
- uid: System.IO.Ports.SerialPort.DiscardNull
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardNull
  nameWithType: SerialPort.DiscardNull
  fullName: System.IO.Ports.SerialPort.DiscardNull
- uid: System.IO.Ports.SerialPort.DiscardOutBuffer
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardOutBuffer()
  nameWithType: SerialPort.DiscardOutBuffer()
  fullName: System.IO.Ports.SerialPort.DiscardOutBuffer()
- uid: System.IO.Ports.SerialPort.Dispose(System.Boolean)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SerialPort.Dispose(Boolean)
  fullName: System.IO.Ports.SerialPort.Dispose(Boolean)
- uid: System.IO.Ports.SerialPort.DsrHolding
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DsrHolding
  nameWithType: SerialPort.DsrHolding
  fullName: System.IO.Ports.SerialPort.DsrHolding
- uid: System.IO.Ports.SerialPort.DtrEnable
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DtrEnable
  nameWithType: SerialPort.DtrEnable
  fullName: System.IO.Ports.SerialPort.DtrEnable
- uid: System.IO.Ports.SerialPort.Encoding
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Encoding
  nameWithType: SerialPort.Encoding
  fullName: System.IO.Ports.SerialPort.Encoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.IO.Ports.SerialPort.ErrorReceived
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ErrorReceived
  nameWithType: SerialPort.ErrorReceived
  fullName: System.IO.Ports.SerialPort.ErrorReceived
- uid: System.IO.Ports.SerialErrorReceivedEventHandler
  parent: System.IO.Ports
  isExternal: false
  name: SerialErrorReceivedEventHandler
  nameWithType: SerialErrorReceivedEventHandler
  fullName: System.IO.Ports.SerialErrorReceivedEventHandler
- uid: System.IO.Ports.SerialPort.GetPortNames
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: GetPortNames()
  nameWithType: SerialPort.GetPortNames()
  fullName: System.IO.Ports.SerialPort.GetPortNames()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Ports.SerialPort.Handshake
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Handshake
  nameWithType: SerialPort.Handshake
  fullName: System.IO.Ports.SerialPort.Handshake
- uid: System.IO.Ports.Handshake
  parent: System.IO.Ports
  isExternal: false
  name: Handshake
  nameWithType: Handshake
  fullName: System.IO.Ports.Handshake
- uid: System.IO.Ports.SerialPort.InfiniteTimeout
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: InfiniteTimeout
  nameWithType: SerialPort.InfiniteTimeout
  fullName: System.IO.Ports.SerialPort.InfiniteTimeout
- uid: System.IO.Ports.SerialPort.IsOpen
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: IsOpen
  nameWithType: SerialPort.IsOpen
  fullName: System.IO.Ports.SerialPort.IsOpen
- uid: System.IO.Ports.SerialPort.NewLine
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: NewLine
  nameWithType: SerialPort.NewLine
  fullName: System.IO.Ports.SerialPort.NewLine
- uid: System.IO.Ports.SerialPort.Open
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Open()
  nameWithType: SerialPort.Open()
  fullName: System.IO.Ports.SerialPort.Open()
- uid: System.IO.Ports.SerialPort.Parity
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Parity
  nameWithType: SerialPort.Parity
  fullName: System.IO.Ports.SerialPort.Parity
- uid: System.IO.Ports.SerialPort.ParityReplace
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ParityReplace
  nameWithType: SerialPort.ParityReplace
  fullName: System.IO.Ports.SerialPort.ParityReplace
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.Ports.SerialPort.PinChanged
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: PinChanged
  nameWithType: SerialPort.PinChanged
  fullName: System.IO.Ports.SerialPort.PinChanged
- uid: System.IO.Ports.SerialPinChangedEventHandler
  parent: System.IO.Ports
  isExternal: false
  name: SerialPinChangedEventHandler
  nameWithType: SerialPinChangedEventHandler
  fullName: System.IO.Ports.SerialPinChangedEventHandler
- uid: System.IO.Ports.SerialPort.PortName
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: PortName
  nameWithType: SerialPort.PortName
  fullName: System.IO.Ports.SerialPort.PortName
- uid: System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: SerialPort.Read(Byte[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Read(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Read(Char[],Int32,Int32)
  nameWithType: SerialPort.Read(Char[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Read(Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Ports.SerialPort.ReadBufferSize
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadBufferSize
  nameWithType: SerialPort.ReadBufferSize
  fullName: System.IO.Ports.SerialPort.ReadBufferSize
- uid: System.IO.Ports.SerialPort.ReadByte
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadByte()
  nameWithType: SerialPort.ReadByte()
  fullName: System.IO.Ports.SerialPort.ReadByte()
- uid: System.IO.Ports.SerialPort.ReadChar
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadChar()
  nameWithType: SerialPort.ReadChar()
  fullName: System.IO.Ports.SerialPort.ReadChar()
- uid: System.IO.Ports.SerialPort.ReadExisting
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadExisting()
  nameWithType: SerialPort.ReadExisting()
  fullName: System.IO.Ports.SerialPort.ReadExisting()
- uid: System.IO.Ports.SerialPort.ReadLine
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadLine()
  nameWithType: SerialPort.ReadLine()
  fullName: System.IO.Ports.SerialPort.ReadLine()
- uid: System.IO.Ports.SerialPort.ReadTimeout
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadTimeout
  nameWithType: SerialPort.ReadTimeout
  fullName: System.IO.Ports.SerialPort.ReadTimeout
- uid: System.IO.Ports.SerialPort.ReadTo(System.String)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadTo(String)
  nameWithType: SerialPort.ReadTo(String)
  fullName: System.IO.Ports.SerialPort.ReadTo(String)
- uid: System.IO.Ports.SerialPort.ReceivedBytesThreshold
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReceivedBytesThreshold
  nameWithType: SerialPort.ReceivedBytesThreshold
  fullName: System.IO.Ports.SerialPort.ReceivedBytesThreshold
- uid: System.IO.Ports.SerialPort.RtsEnable
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: RtsEnable
  nameWithType: SerialPort.RtsEnable
  fullName: System.IO.Ports.SerialPort.RtsEnable
- uid: System.IO.Ports.SerialPort.StopBits
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: StopBits
  nameWithType: SerialPort.StopBits
  fullName: System.IO.Ports.SerialPort.StopBits
- uid: System.IO.Ports.SerialPort.Write(System.String)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Write(String)
  nameWithType: SerialPort.Write(String)
  fullName: System.IO.Ports.SerialPort.Write(String)
- uid: System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: SerialPort.Write(Byte[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Write(Byte[],Int32,Int32)
- uid: System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Write(Char[],Int32,Int32)
  nameWithType: SerialPort.Write(Char[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Write(Char[],Int32,Int32)
- uid: System.IO.Ports.SerialPort.WriteBufferSize
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteBufferSize
  nameWithType: SerialPort.WriteBufferSize
  fullName: System.IO.Ports.SerialPort.WriteBufferSize
- uid: System.IO.Ports.SerialPort.WriteLine(System.String)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteLine(String)
  nameWithType: SerialPort.WriteLine(String)
  fullName: System.IO.Ports.SerialPort.WriteLine(String)
- uid: System.IO.Ports.SerialPort.WriteTimeout
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteTimeout
  nameWithType: SerialPort.WriteTimeout
  fullName: System.IO.Ports.SerialPort.WriteTimeout
- uid: System.IO.Ports.SerialPort.#ctor*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort
  nameWithType: SerialPort.SerialPort
- uid: System.IO.Ports.SerialPort.BaseStream*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BaseStream
  nameWithType: SerialPort.BaseStream
- uid: System.IO.Ports.SerialPort.BaudRate*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BaudRate
  nameWithType: SerialPort.BaudRate
- uid: System.IO.Ports.SerialPort.BreakState*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BreakState
  nameWithType: SerialPort.BreakState
- uid: System.IO.Ports.SerialPort.BytesToRead*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BytesToRead
  nameWithType: SerialPort.BytesToRead
- uid: System.IO.Ports.SerialPort.BytesToWrite*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BytesToWrite
  nameWithType: SerialPort.BytesToWrite
- uid: System.IO.Ports.SerialPort.CDHolding*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: CDHolding
  nameWithType: SerialPort.CDHolding
- uid: System.IO.Ports.SerialPort.Close*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Close
  nameWithType: SerialPort.Close
- uid: System.IO.Ports.SerialPort.CtsHolding*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: CtsHolding
  nameWithType: SerialPort.CtsHolding
- uid: System.IO.Ports.SerialPort.DataBits*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DataBits
  nameWithType: SerialPort.DataBits
- uid: System.IO.Ports.SerialPort.DiscardInBuffer*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardInBuffer
  nameWithType: SerialPort.DiscardInBuffer
- uid: System.IO.Ports.SerialPort.DiscardNull*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardNull
  nameWithType: SerialPort.DiscardNull
- uid: System.IO.Ports.SerialPort.DiscardOutBuffer*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardOutBuffer
  nameWithType: SerialPort.DiscardOutBuffer
- uid: System.IO.Ports.SerialPort.Dispose*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Dispose
  nameWithType: SerialPort.Dispose
- uid: System.IO.Ports.SerialPort.DsrHolding*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DsrHolding
  nameWithType: SerialPort.DsrHolding
- uid: System.IO.Ports.SerialPort.DtrEnable*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DtrEnable
  nameWithType: SerialPort.DtrEnable
- uid: System.IO.Ports.SerialPort.Encoding*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Encoding
  nameWithType: SerialPort.Encoding
- uid: System.IO.Ports.SerialPort.GetPortNames*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: GetPortNames
  nameWithType: SerialPort.GetPortNames
- uid: System.IO.Ports.SerialPort.Handshake*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Handshake
  nameWithType: SerialPort.Handshake
- uid: System.IO.Ports.SerialPort.IsOpen*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: IsOpen
  nameWithType: SerialPort.IsOpen
- uid: System.IO.Ports.SerialPort.NewLine*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: NewLine
  nameWithType: SerialPort.NewLine
- uid: System.IO.Ports.SerialPort.Open*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Open
  nameWithType: SerialPort.Open
- uid: System.IO.Ports.SerialPort.Parity*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Parity
  nameWithType: SerialPort.Parity
- uid: System.IO.Ports.SerialPort.ParityReplace*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ParityReplace
  nameWithType: SerialPort.ParityReplace
- uid: System.IO.Ports.SerialPort.PortName*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: PortName
  nameWithType: SerialPort.PortName
- uid: System.IO.Ports.SerialPort.Read*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Read
  nameWithType: SerialPort.Read
- uid: System.IO.Ports.SerialPort.ReadBufferSize*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadBufferSize
  nameWithType: SerialPort.ReadBufferSize
- uid: System.IO.Ports.SerialPort.ReadByte*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadByte
  nameWithType: SerialPort.ReadByte
- uid: System.IO.Ports.SerialPort.ReadChar*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadChar
  nameWithType: SerialPort.ReadChar
- uid: System.IO.Ports.SerialPort.ReadExisting*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadExisting
  nameWithType: SerialPort.ReadExisting
- uid: System.IO.Ports.SerialPort.ReadLine*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadLine
  nameWithType: SerialPort.ReadLine
- uid: System.IO.Ports.SerialPort.ReadTimeout*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadTimeout
  nameWithType: SerialPort.ReadTimeout
- uid: System.IO.Ports.SerialPort.ReadTo*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadTo
  nameWithType: SerialPort.ReadTo
- uid: System.IO.Ports.SerialPort.ReceivedBytesThreshold*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReceivedBytesThreshold
  nameWithType: SerialPort.ReceivedBytesThreshold
- uid: System.IO.Ports.SerialPort.RtsEnable*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: RtsEnable
  nameWithType: SerialPort.RtsEnable
- uid: System.IO.Ports.SerialPort.StopBits*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: StopBits
  nameWithType: SerialPort.StopBits
- uid: System.IO.Ports.SerialPort.Write*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Write
  nameWithType: SerialPort.Write
- uid: System.IO.Ports.SerialPort.WriteBufferSize*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteBufferSize
  nameWithType: SerialPort.WriteBufferSize
- uid: System.IO.Ports.SerialPort.WriteLine*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteLine
  nameWithType: SerialPort.WriteLine
- uid: System.IO.Ports.SerialPort.WriteTimeout*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteTimeout
  nameWithType: SerialPort.WriteTimeout
