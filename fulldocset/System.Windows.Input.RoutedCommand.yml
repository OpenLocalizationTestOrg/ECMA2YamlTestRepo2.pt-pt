### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.RoutedCommand
  id: RoutedCommand
  children:
  - System.Windows.Input.RoutedCommand.#ctor
  - System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)
  - System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)
  - System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)
  - System.Windows.Input.RoutedCommand.CanExecuteChanged
  - System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)
  - System.Windows.Input.RoutedCommand.InputGestures
  - System.Windows.Input.RoutedCommand.Name
  - System.Windows.Input.RoutedCommand.OwnerType
  - System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  - System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)
  langs:
  - csharp
  name: RoutedCommand
  nameWithType: RoutedCommand
  fullName: System.Windows.Input.RoutedCommand
  type: Class
  summary: "Define um comando que implementa <xref:System.Windows.Input.ICommand>e é encaminhado através da árvore de elemento.</xref:System.Windows.Input.ICommand>"
  remarks: "The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a RoutedCommand do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.  \n  \n The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.  The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.  \n  \n<a name=\"xamlAttributeUsage_RoutedCommand\"></a>   \n## XAML Attribute Usage  \n \\<*object* *property*=\"*predefinedCommandName*\"/>  \n  \n \\- or -  \n  \n \\<*object* *property*=\"*predefinedClassName*.*predefinedCommandName*\"/>  \n  \n \\- or -  \n  \n \\<*object* *property*=\"{ *customClassName*.*customCommandName*}\"/>  \n  \n<a name=\"xamlValues_RoutedCommand\"></a>   \n## XAML Values  \n *predefinedClassName*  \n One of the predefined command classes.  \n  \n *predefinedCommandName*  \n One of the predefined commands.  \n  \n *customClassName*  \n A custom class which contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md).  \n  \n *customCommandName*  \n A custom command."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      [System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      public class RoutedCommand : System.Windows.Input.ICommand
  inheritance:
  - System.Object
  implements:
  - System.Windows.Input.ICommand
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.#ctor
  id: '#ctor'
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: RoutedCommand()
  nameWithType: RoutedCommand.RoutedCommand()
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> classe."
  syntax:
    content: public RoutedCommand ();
    parameters: []
  overload: System.Windows.Input.RoutedCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: RoutedCommand(String,Type)
  nameWithType: RoutedCommand.RoutedCommand(String,Type)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> classe com o tipo de nome e o proprietário especificado."
  syntax:
    content: public RoutedCommand (string name, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "Nome declarado para a serialização."
    - id: ownerType
      type: System.Type
      description: "O tipo que está a registar o comando."
  overload: System.Windows.Input.RoutedCommand.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ownerType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)
  id: '#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)'
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: RoutedCommand(String,Type,InputGestureCollection)
  nameWithType: RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> classe com o nome especificado, o tipo de proprietário e a coleção de gestos."
  syntax:
    content: public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);
    parameters:
    - id: name
      type: System.String
      description: "Nome declarado para a serialização."
    - id: ownerType
      type: System.Type
      description: "O tipo que está a registar o comando."
    - id: inputGestures
      type: System.Windows.Input.InputGestureCollection
      description: "Predefinição gestos entrados associados a este comando."
  overload: System.Windows.Input.RoutedCommand.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "the length of <code>name</code> is zero  \n  \n \\- or -  \n  \n <code>ownerType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)
  id: CanExecute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: CanExecute(Object,IInputElement)
  nameWithType: RoutedCommand.CanExecute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.CanExecute(Object,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Determina se este <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> podem executar no seu estado atual."
  remarks: "A lógica real que determina se um <xref:System.Windows.Input.RoutedCommand>pode ser executado na atual destino de comando não está contido nos métodos de CanExecute, em vez disso CanExecute gera a <xref:System.Windows.Input.CommandManager.PreviewCanExecute>e os <xref:System.Windows.Input.CommandManager.CanExecute>eventos que túnel e bolha através do elemento da árvore está à procura de um objeto com um <xref:System.Windows.Input.CommandBinding>.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.PreviewCanExecute> </xref:System.Windows.Input.RoutedCommand>  Se um <xref:System.Windows.Input.CommandBinding>para que <xref:System.Windows.Input.RoutedCommand>for encontrado, o <xref:System.Windows.Input.CanExecuteRoutedEventHandler>ligado ao <xref:System.Windows.Input.CommandBinding>é chamado.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.CommandBinding>  Estes processadores fornecem a lógica de programação para determinar se o <xref:System.Windows.Input.RoutedCommand>pode ser executado ou não.</xref:System.Windows.Input.RoutedCommand>       A <xref:System.Windows.Input.CommandManager.PreviewCanExecute>e <xref:System.Windows.Input.CommandManager.PreviewExecuted>eventos são gerados no <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</xref:System.Windows.Input.ICommandSource.CommandTarget%2A> </xref:System.Windows.Input.CommandManager.PreviewExecuted> </xref:System.Windows.Input.CommandManager.PreviewCanExecute>  Se o <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>não está definido no <xref:System.Windows.Input.ICommandSource>, a <xref:System.Windows.Input.CommandManager.PreviewCanExecute>e <xref:System.Windows.Input.CommandManager.CanExecute>eventos são gerados no elemento com o foco do teclado.</xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.PreviewCanExecute> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.ICommandSource.CommandTarget%2A>"
  example:
  - "The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.  \n  \n `this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If the command is a <xref:System.Windows.Input.RoutedCommand>, then the CanExecute method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \n  \n If the CanExecute method returns `true`, then the control is enabled; otherwise, the control is disable.  \n  \n [!code-cs[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandcanexecutechanged)]\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandcanexecutechanged)]"
  syntax:
    content: public bool CanExecute (object parameter, System.Windows.IInputElement target);
    parameters:
    - id: parameter
      type: System.Object
      description: "Um utilizador definido o tipo de dados."
    - id: target
      type: System.Windows.IInputElement
      description: "O destino de comando."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o comando pode ser executado no destino atual do comando; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.RoutedCommand.CanExecute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>target</code>is not a <xref href=&quot;System.Windows.UIElement&quot;></xref> or <xref href=&quot;System.Windows.ContentElement&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.CanExecuteChanged
  id: CanExecuteChanged
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: CanExecuteChanged
  nameWithType: RoutedCommand.CanExecuteChanged
  fullName: System.Windows.Input.RoutedCommand.CanExecuteChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Ocorre quando as alterações à origem de comando são detetadas pelo Gestor de comando. Estas alterações afetam frequentemente se deve executar o comando no destino do comando atual."
  remarks: "A <xref:System.Windows.Input.RoutedCommand>escuta para o <xref:System.Windows.Input.CommandManager.RequerySuggested>evento, que é gerado pelo <xref:System.Windows.Input.CommandManager>.</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandManager.RequerySuggested> </xref:System.Windows.Input.RoutedCommand> O <xref:System.Windows.Input.CommandManager.RequerySuggested>evento é desencadeado sempre que forem cumpridas condições que pode alterar o se deve executar o comando, como uma alteração no foco do teclado.</xref:System.Windows.Input.CommandManager.RequerySuggested>  Quando o comando recebe o <xref:System.Windows.Input.CommandManager.RequerySuggested>evento, gera o evento CanExecuteChanged.</xref:System.Windows.Input.CommandManager.RequerySuggested>  Geralmente, a origem de comando escutará para este evento e consulta o <xref:System.Windows.Input.RoutedCommand>por way do <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>método.</xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand>  A maioria das origens de comando irão desativar a próprios se o comando não pode ser executado como parte do respetivo vínculo de comando.  Um exemplo desta situação é quando uma <xref:System.Windows.Controls.MenuItem>grays próprio horizontalmente quando não é possível executar o comando.</xref:System.Windows.Controls.MenuItem>       Em algumas situações, o <xref:System.Windows.Input.CommandManager>não tem conhecimento de uma alteração nas condições que altera a capacidade de um comando a executar.</xref:System.Windows.Input.CommandManager>  Nestes casos, pode forçar a <xref:System.Windows.Input.CommandManager>para gera o <xref:System.Windows.Input.CommandManager.RequerySuggested>eventos ao chamar o <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>método, por sua vez que o <xref:System.Windows.Input.RoutedCommand>para aumentar o evento CanExecuteChanged.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> </xref:System.Windows.Input.CommandManager.RequerySuggested> </xref:System.Windows.Input.CommandManager>"
  example:
  - "The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.  \n  \n `this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \n  \n If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.  \n  \n [!code-cs[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandcanexecutechanged)]\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandcanexecutechanged)]"
  syntax:
    content: public event EventHandler CanExecuteChanged;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)
  id: Execute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: Execute(Object,IInputElement)
  nameWithType: RoutedCommand.Execute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.Execute(Object,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Executa o <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> no destino do comando atual."
  remarks: "A lógica real que executa o <xref:System.Windows.Input.RoutedCommand>não está contido nos métodos de execução.</xref:System.Windows.Input.RoutedCommand>  Executar gera os <xref:System.Windows.Input.CommandManager.PreviewExecuted> <xref:System.Windows.Input.CommandManager.Executed>eventos, o túnel e bolha através do elemento da árvore está à procura de um objeto com um <xref:System.Windows.Input.CommandBinding>.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandManager.Executed> e</xref:System.Windows.Input.CommandManager.PreviewExecuted>  Se um <xref:System.Windows.Input.CommandBinding>para que <xref:System.Windows.Input.RoutedCommand>for encontrado, o <xref:System.Windows.Input.ExecutedRoutedEventHandler>ligado ao <xref:System.Windows.Input.CommandBinding>é chamado.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.CommandBinding>  Estes processadores fornecem a lógica de programação que executa o <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand>       A <xref:System.Windows.Input.CommandManager.PreviewExecuted>e <xref:System.Windows.Input.CommandManager.Executed>eventos são gerados no <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</xref:System.Windows.Input.ICommandSource.CommandTarget%2A> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CommandManager.PreviewExecuted>  Se o <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>não está definido no <xref:System.Windows.Input.ICommandSource>, a <xref:System.Windows.Input.CommandManager.PreviewExecuted>e <xref:System.Windows.Input.CommandManager.Executed>eventos são gerados no elemento com o foco do teclado.</xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CommandManager.PreviewExecuted> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.ICommandSource.CommandTarget%2A>"
  example:
  - "The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.  \n  \n `this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If it is a <xref:System.Windows.Input.RoutedCommand>, then the Execute method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \n  \n [!code-cs[ImplementICommandSource#ImplementICommandExecute](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandexecute)]\n [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandexecute)]"
  syntax:
    content: public void Execute (object parameter, System.Windows.IInputElement target);
    parameters:
    - id: parameter
      type: System.Object
      description: "Parâmetro a ser transmitido para o processador definido pelo utilizador."
    - id: target
      type: System.Windows.IInputElement
      description: "Elemento no qual pretende começar a procurar processadores de comando."
  overload: System.Windows.Input.RoutedCommand.Execute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>target</code>is not a <xref href=&quot;System.Windows.UIElement&quot;></xref> or <xref href=&quot;System.Windows.ContentElement&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.InputGestures
  id: InputGestures
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: InputGestures
  nameWithType: RoutedCommand.InputGestures
  fullName: System.Windows.Input.RoutedCommand.InputGestures
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Obtém a coleção de <xref href=&quot;System.Windows.Input.InputGesture&quot;> </xref> objetos que estão associados este comando."
  remarks: ''
  example:
  - "The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.  \n  \n [!code-cs[commandlibrarysnippets#MouseBindingAddedCommand](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#mousebindingaddedcommand)]\n [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#mousebindingaddedcommand)]"
  syntax:
    content: public System.Windows.Input.InputGestureCollection InputGestures { get; }
    return:
      type: System.Windows.Input.InputGestureCollection
      description: "Os entrada gestos."
  overload: System.Windows.Input.RoutedCommand.InputGestures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.Name
  id: Name
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: Name
  nameWithType: RoutedCommand.Name
  fullName: System.Windows.Input.RoutedCommand.Name
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Obtém o nome do comando."
  remarks: "Esta propriedade pode ser utilizada quando referenciar um <xref:System.Windows.Input.RoutedCommand>no [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)].</xref:System.Windows.Input.RoutedCommand>"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "O nome do comando."
  overload: System.Windows.Input.RoutedCommand.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.OwnerType
  id: OwnerType
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: OwnerType
  nameWithType: RoutedCommand.OwnerType
  fullName: System.Windows.Input.RoutedCommand.OwnerType
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Obtém o tipo que está registado com o comando."
  syntax:
    content: public Type OwnerType { get; }
    return:
      type: System.Type
      description: "O tipo do proprietário do comando."
  overload: System.Windows.Input.RoutedCommand.OwnerType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  id: System#Windows#Input#ICommand#CanExecute(System.Object)
  isEii: true
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: System.Windows.Input.ICommand.CanExecute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Para obter uma descrição desta membros, consulte <xref:System.Windows.Input.ICommand.CanExecute*>.</xref:System.Windows.Input.ICommand.CanExecute*>"
  remarks: "Este membro é uma implementação de membro de interface explícita. Pode ser utilizado apenas quando o <xref:System.Windows.Input.RoutedCommand>instância é convertida para um <xref:System.Windows.Input.ICommand>interface.</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.RoutedCommand>"
  syntax:
    content: bool ICommand.CanExecute (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Dados utilizados pelo comando.  Se o comando não necessita de dados a ser transmitido, este objeto pode ser definido como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este comando pode ser executado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)
  id: System#Windows#Input#ICommand#Execute(System.Object)
  isEii: true
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: System.Windows.Input.ICommand.Execute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Para obter uma descrição desta membros, consulte <xref:System.Windows.Input.ICommand.Execute*>.</xref:System.Windows.Input.ICommand.Execute*>"
  remarks: "Este membro é uma implementação de membro de interface explícita. Pode ser utilizado apenas quando o <xref:System.Windows.Input.RoutedCommand>instância é convertida para um <xref:System.Windows.Input.ICommand>interface.</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.RoutedCommand>"
  example:
  - "See Also  \n  \n <xref:System.Windows.Input.RoutedCommand.Execute%2A>"
  syntax:
    content: void ICommand.Execute (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Dados utilizados pelo comando.  Se o comando não necessita de dados a ser transmitido, este objeto pode ser definido como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Input.RoutedCommand.#ctor
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand()
  nameWithType: RoutedCommand.RoutedCommand()
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand()
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand(String,Type)
  nameWithType: RoutedCommand.RoutedCommand(String,Type)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand(String,Type,InputGestureCollection)
  nameWithType: RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
- uid: System.Windows.Input.InputGestureCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputGestureCollection
  nameWithType: InputGestureCollection
  fullName: System.Windows.Input.InputGestureCollection
- uid: System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: CanExecute(Object,IInputElement)
  nameWithType: RoutedCommand.CanExecute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.CanExecute(Object,IInputElement)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.RoutedCommand.CanExecuteChanged
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: CanExecuteChanged
  nameWithType: RoutedCommand.CanExecuteChanged
  fullName: System.Windows.Input.RoutedCommand.CanExecuteChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Execute(Object,IInputElement)
  nameWithType: RoutedCommand.Execute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.Execute(Object,IInputElement)
- uid: System.Windows.Input.RoutedCommand.InputGestures
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: InputGestures
  nameWithType: RoutedCommand.InputGestures
  fullName: System.Windows.Input.RoutedCommand.InputGestures
- uid: System.Windows.Input.RoutedCommand.Name
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Name
  nameWithType: RoutedCommand.Name
  fullName: System.Windows.Input.RoutedCommand.Name
- uid: System.Windows.Input.RoutedCommand.OwnerType
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: OwnerType
  nameWithType: RoutedCommand.OwnerType
  fullName: System.Windows.Input.RoutedCommand.OwnerType
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.CanExecute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.Execute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
- uid: System.Windows.Input.RoutedCommand.#ctor*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand
  nameWithType: RoutedCommand.RoutedCommand
- uid: System.Windows.Input.RoutedCommand.CanExecute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: CanExecute
  nameWithType: RoutedCommand.CanExecute
- uid: System.Windows.Input.RoutedCommand.Execute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Execute
  nameWithType: RoutedCommand.Execute
- uid: System.Windows.Input.RoutedCommand.InputGestures*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: InputGestures
  nameWithType: RoutedCommand.InputGestures
- uid: System.Windows.Input.RoutedCommand.Name*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Name
  nameWithType: RoutedCommand.Name
- uid: System.Windows.Input.RoutedCommand.OwnerType*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: OwnerType
  nameWithType: RoutedCommand.OwnerType
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.CanExecute
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.Execute
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute
