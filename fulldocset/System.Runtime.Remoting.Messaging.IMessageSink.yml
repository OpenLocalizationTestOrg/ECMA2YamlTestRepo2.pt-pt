### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Messaging.IMessageSink
  id: IMessageSink
  children:
  - System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  - System.Runtime.Remoting.Messaging.IMessageSink.NextSink
  - System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  langs:
  - csharp
  name: IMessageSink
  nameWithType: IMessageSink
  fullName: System.Runtime.Remoting.Messaging.IMessageSink
  type: Interface
  summary: "Define a interface para um receptor de mensagem."
  remarks: "Quando é efetuada uma chamada de método no proxy do, a infraestrutura de comunicação remota fornece o necessário suporte para transmitir os argumentos para o objecto real fronteiras a comunicação remota, chamar o método de objecto real com os argumentos e devolver os resultados de volta para o cliente do objeto de proxy.       Uma chamada de método remoto é uma mensagem que passa a partir do final de cliente ao fim de servidor e, possivelmente, fazer uma cópia de novo. Como os limites de comunicação remota atravesse a caminho, a chamada de método remoto passa através de uma cadeia de `IMessageSink` objetos. Cada sink na cadeia recebe o objeto de mensagem, efetua uma operação específica e delega o sink seguinte da cadeia. O objeto de proxy contém uma referência para o primeiro `IMessageSink` tem de utilizar para começar a cadeia.       Para chamadas assíncronas, cada sink fornece um receptor de resposta no momento da delegação, (outro `IMessageSink`) que será chamado pelo sink seguinte quando a resposta está a caminho novamente.       Diferentes tipos de sinks realizar operações diferentes, dependendo do tipo de objeto de mensagem recebido. Por exemplo, um receptor pode causar um bloqueio para ser executada, outro foi impor segurança de chamada, outro foi possível executar o serviços de controlo e fiabilidade de chamada de fluxo e ainda outro foi transporte a chamada para outro <xref:System.AppDomain>, computador ou processo.</xref:System.AppDomain> Dois ou mais mensagens sinks na cadeia podem interagir entre si in regard to cada ação específica."
  example:
  - "The following code example shows the implementation of the IMessageSink interface. Note that the sample assumes type definitions and assembly references that must be provided for the sample to compile.  \n  \n [!code-cs[IMessageSink_Client#3](~/add/codesnippet/csharp/t-system.runtime.remotin_40_1.cs)]\n [!code-vb[IMessageSink_Client#3](~/add/codesnippet/visualbasic/t-system.runtime.remotin_40_1.vb)]\n [!code-cpp[IMessageSink_Client#3](~/add/codesnippet/cpp/t-system.runtime.remotin_40_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IMessageSink
  implements: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  id: AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  parent: System.Runtime.Remoting.Messaging.IMessageSink
  langs:
  - csharp
  name: AsyncProcessMessage(IMessage,IMessageSink)
  nameWithType: IMessageSink.AsyncProcessMessage(IMessage,IMessageSink)
  fullName: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(IMessage,IMessageSink)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "No modo assíncrono processa a mensagem indicada."
  remarks: "Este método é invocado no receptor de mensagem a infraestrutura de comunicação remota ou por um receptor de mensagens assíncronas anterior."
  syntax:
    content: public System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
    parameters:
    - id: msg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "A mensagem a processar."
    - id: replySink
      type: System.Runtime.Remoting.Messaging.IMessageSink
      description: "O sink de resposta para a mensagem de resposta."
    return:
      type: System.Runtime.Remoting.Messaging.IMessageCtrl
      description: "Devolve um <xref href=&quot;System.Runtime.Remoting.Messaging.IMessageCtrl&quot;> </xref> interface que fornece uma forma de controlar mensagens assíncronas depois que tem sido emitidas."
  overload: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMessageSink.NextSink
  id: NextSink
  parent: System.Runtime.Remoting.Messaging.IMessageSink
  langs:
  - csharp
  name: NextSink
  nameWithType: IMessageSink.NextSink
  fullName: System.Runtime.Remoting.Messaging.IMessageSink.NextSink
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém o sink de mensagem seguinte na cadeia de sink."
  syntax:
    content: public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }
    return:
      type: System.Runtime.Remoting.Messaging.IMessageSink
      description: "A mensagem seguinte sink na cadeia de sink."
  overload: System.Runtime.Remoting.Messaging.IMessageSink.NextSink*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  id: SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  parent: System.Runtime.Remoting.Messaging.IMessageSink
  langs:
  - csharp
  name: SyncProcessMessage(IMessage)
  nameWithType: IMessageSink.SyncProcessMessage(IMessage)
  fullName: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(IMessage)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "A mensagem indicada é processada de forma síncrona."
  remarks: "O método SyncProcessMessage é invocado no receptor de mensagem a infraestrutura de comunicação remota ou por um receptor anterior para mensagens síncronas."
  syntax:
    content: public System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);
    parameters:
    - id: msg
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "A mensagem a processar."
    return:
      type: System.Runtime.Remoting.Messaging.IMessage
      description: "Uma mensagem de resposta em resposta ao pedido."
  overload: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)
  parent: System.Runtime.Remoting.Messaging.IMessageSink
  isExternal: false
  name: AsyncProcessMessage(IMessage,IMessageSink)
  nameWithType: IMessageSink.AsyncProcessMessage(IMessage,IMessageSink)
  fullName: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(IMessage,IMessageSink)
- uid: System.Runtime.Remoting.Messaging.IMessageCtrl
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessageCtrl
  nameWithType: IMessageCtrl
  fullName: System.Runtime.Remoting.Messaging.IMessageCtrl
- uid: System.Runtime.Remoting.Messaging.IMessage
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessage
  nameWithType: IMessage
  fullName: System.Runtime.Remoting.Messaging.IMessage
- uid: System.Runtime.Remoting.Messaging.IMessageSink
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: IMessageSink
  nameWithType: IMessageSink
  fullName: System.Runtime.Remoting.Messaging.IMessageSink
- uid: System.Runtime.Remoting.Messaging.IMessageSink.NextSink
  parent: System.Runtime.Remoting.Messaging.IMessageSink
  isExternal: false
  name: NextSink
  nameWithType: IMessageSink.NextSink
  fullName: System.Runtime.Remoting.Messaging.IMessageSink.NextSink
- uid: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)
  parent: System.Runtime.Remoting.Messaging.IMessageSink
  isExternal: false
  name: SyncProcessMessage(IMessage)
  nameWithType: IMessageSink.SyncProcessMessage(IMessage)
  fullName: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(IMessage)
- uid: System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage*
  parent: System.Runtime.Remoting.Messaging.IMessageSink
  isExternal: false
  name: AsyncProcessMessage
  nameWithType: IMessageSink.AsyncProcessMessage
- uid: System.Runtime.Remoting.Messaging.IMessageSink.NextSink*
  parent: System.Runtime.Remoting.Messaging.IMessageSink
  isExternal: false
  name: NextSink
  nameWithType: IMessageSink.NextSink
- uid: System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage*
  parent: System.Runtime.Remoting.Messaging.IMessageSink
  isExternal: false
  name: SyncProcessMessage
  nameWithType: IMessageSink.SyncProcessMessage
