### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Messaging.IMethodMessage
  id: IMethodMessage
  children:
  - System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount
  - System.Runtime.Remoting.Messaging.IMethodMessage.Args
  - System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(System.Int32)
  - System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(System.Int32)
  - System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs
  - System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext
  - System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase
  - System.Runtime.Remoting.Messaging.IMethodMessage.MethodName
  - System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature
  - System.Runtime.Remoting.Messaging.IMethodMessage.TypeName
  - System.Runtime.Remoting.Messaging.IMethodMessage.Uri
  langs:
  - csharp
  name: IMethodMessage
  nameWithType: IMethodMessage
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage
  type: Interface
  summary: "Defines the method message interface."
  remarks: "A method message is used to send information to and from remote methods. For example, messages used for remote method calls implement the IMethodMessage interface."
  example:
  - "The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the message information to the console and return immediately without making a remote call.  \n  \n [!code-cpp[IMethodMessage_MethodName#1](~/add/codesnippet/cpp/t-system.runtime.remotin_38_1.cpp)]\n [!code-cs[IMethodMessage_MethodName#1](~/add/codesnippet/csharp/t-system.runtime.remotin_38_1.cs)]\n [!code-vb[IMethodMessage_MethodName#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_38_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IMethodMessage : System.Runtime.Remoting.Messaging.IMessage
  implements:
  - System.Runtime.Remoting.Messaging.IMessage
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount
  id: ArgCount
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: ArgCount
  nameWithType: IMethodMessage.ArgCount
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the number of arguments passed to the method."
  remarks: ''
  example:
  - "The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the message information to the console, using the `ArgCount` property to iterate through the arguments.  \n  \n [!code-cpp[IMethodMessage_MethodName#2](~/add/codesnippet/cpp/p-system.runtime.remotin_19_1.cpp)]\n [!code-cs[IMethodMessage_MethodName#2](~/add/codesnippet/csharp/p-system.runtime.remotin_19_1.cs)]\n [!code-vb[IMethodMessage_MethodName#2](~/add/codesnippet/visualbasic/p-system.runtime.remotin_19_1.vb)]"
  syntax:
    content: public int ArgCount { get; }
    return:
      type: System.Int32
      description: "The number of arguments passed to the method."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Args
  id: Args
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: Args
  nameWithType: IMethodMessage.Args
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Args
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets an array of arguments passed to the method."
  remarks: "Although the Args property is redundant since the same functionality can be achieved through the <xref:System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount%2A> and <xref:System.Runtime.Remoting.Messaging.IMethodMessage.GetArg%2A>, there might be performance optimization available if the implementer understands when all the arguments will be retrieved."
  syntax:
    content: public object[] Args { get; }
    return:
      type: System.Object[]
      description: "An <xref:System.Object> array containing the arguments passed to the method."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.Args*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(System.Int32)
  id: GetArg(System.Int32)
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: GetArg(Int32)
  nameWithType: IMethodMessage.GetArg(Int32)
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets a specific argument as an <xref:System.Object>."
  syntax:
    content: public object GetArg (int argNum);
    parameters:
    - id: argNum
      type: System.Int32
      description: "The number of the requested argument."
    return:
      type: System.Object
      description: "The argument passed to the method."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(System.Int32)
  id: GetArgName(System.Int32)
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: GetArgName(Int32)
  nameWithType: IMethodMessage.GetArgName(Int32)
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the name of the argument passed to the method."
  syntax:
    content: public string GetArgName (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "The number of the requested argument."
    return:
      type: System.String
      description: "The name of the specified argument passed to the method, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the current method is not implemented."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs
  id: HasVarArgs
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: HasVarArgs
  nameWithType: IMethodMessage.HasVarArgs
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets a value indicating whether the message has variable arguments."
  remarks: ''
  example:
  - "The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the message information to the console, including whether the method call has variable arguments.  \n  \n [!code-cpp[IMethodMessage_MethodName#2](~/add/codesnippet/cpp/p-system.runtime.remotin_93_1.cpp)]\n [!code-cs[IMethodMessage_MethodName#2](~/add/codesnippet/csharp/p-system.runtime.remotin_93_1.cs)]\n [!code-vb[IMethodMessage_MethodName#2](~/add/codesnippet/visualbasic/p-system.runtime.remotin_93_1.vb)]"
  syntax:
    content: public bool HasVarArgs { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the method can accept a variable number of arguments; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext
  id: LogicalCallContext
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: LogicalCallContext
  nameWithType: IMethodMessage.LogicalCallContext
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the <xref href=&quot;System.Runtime.Remoting.Messaging.LogicalCallContext&quot;></xref> for the current method call."
  remarks: ''
  example:
  - "The following example code shows how to use the `LogicalCallContext` property to determine whether any values are attached to the logical thread.  \n  \n [!code-vb[IMethodMessage_LogicalCallContext#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_66_1.vb)]\n [!code-cs[IMethodMessage_LogicalCallContext#1](~/add/codesnippet/csharp/p-system.runtime.remotin_66_1.cs)]\n [!code-cpp[IMethodMessage_LogicalCallContext#1](~/add/codesnippet/cpp/p-system.runtime.remotin_66_1.cpp)]"
  syntax:
    content: public System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext { get; }
    return:
      type: System.Runtime.Remoting.Messaging.LogicalCallContext
      description: "Gets the <xref href=&quot;System.Runtime.Remoting.Messaging.LogicalCallContext&quot;></xref> for the current method call."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase
  id: MethodBase
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: MethodBase
  nameWithType: IMethodMessage.MethodBase
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the <xref:System.Reflection.MethodBase> of the called method."
  remarks: "This information is not transmitted to a remote location, but is used to cache the method base after it has been looked up once."
  syntax:
    content: public System.Reflection.MethodBase MethodBase { get; }
    return:
      type: System.Reflection.MethodBase
      description: "The <xref:System.Reflection.MethodBase> of the called method."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName
  id: MethodName
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: MethodName
  nameWithType: IMethodMessage.MethodName
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the name of the invoked method."
  remarks: ''
  example:
  - "The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the name of the method to the console.  \n  \n [!code-cpp[IMethodMessage_MethodName#2](~/add/codesnippet/cpp/p-system.runtime.remotin_13_1.cpp)]\n [!code-cs[IMethodMessage_MethodName#2](~/add/codesnippet/csharp/p-system.runtime.remotin_13_1.cs)]\n [!code-vb[IMethodMessage_MethodName#2](~/add/codesnippet/visualbasic/p-system.runtime.remotin_13_1.vb)]"
  syntax:
    content: public string MethodName { get; }
    return:
      type: System.String
      description: "The name of the invoked method."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature
  id: MethodSignature
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: MethodSignature
  nameWithType: IMethodMessage.MethodSignature
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets an object containing the method signature."
  remarks: "All the current implementations of <xref:System.Runtime.Remoting.Messaging.IMethodMessage> return an array of <xref:System.Type> objects containing the parameter types of the method."
  syntax:
    content: public object MethodSignature { get; }
    return:
      type: System.Object
      description: "An object containing the method signature."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName
  id: TypeName
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: TypeName
  nameWithType: IMethodMessage.TypeName
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the full <xref:System.Type> name of the specific object that the call is destined for."
  syntax:
    content: public string TypeName { get; }
    return:
      type: System.String
      description: "The full <xref:System.Type> name of the specific object that the call is destined for."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Uri
  id: Uri
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: Uri
  nameWithType: IMethodMessage.Uri
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Uri
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Gets the URI of the specific object that the call is destined for."
  syntax:
    content: public string Uri { get; }
    return:
      type: System.String
      description: "The URI of the remote object that contains the invoked method."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.Uri*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The immediate caller makes the call through a reference to the interface and does not have infrastructure permission."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: ArgCount
  nameWithType: IMethodMessage.ArgCount
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Args
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: Args
  nameWithType: IMethodMessage.Args
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Args
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(System.Int32)
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: GetArg(Int32)
  nameWithType: IMethodMessage.GetArg(Int32)
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(System.Int32)
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: GetArgName(Int32)
  nameWithType: IMethodMessage.GetArgName(Int32)
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: HasVarArgs
  nameWithType: IMethodMessage.HasVarArgs
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: LogicalCallContext
  nameWithType: IMethodMessage.LogicalCallContext
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: LogicalCallContext
  nameWithType: LogicalCallContext
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodBase
  nameWithType: IMethodMessage.MethodBase
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodName
  nameWithType: IMethodMessage.MethodName
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodSignature
  nameWithType: IMethodMessage.MethodSignature
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: TypeName
  nameWithType: IMethodMessage.TypeName
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Uri
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: Uri
  nameWithType: IMethodMessage.Uri
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Uri
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: ArgCount
  nameWithType: IMethodMessage.ArgCount
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Args*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: Args
  nameWithType: IMethodMessage.Args
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: GetArg
  nameWithType: IMethodMessage.GetArg
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: GetArgName
  nameWithType: IMethodMessage.GetArgName
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: HasVarArgs
  nameWithType: IMethodMessage.HasVarArgs
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: LogicalCallContext
  nameWithType: IMethodMessage.LogicalCallContext
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodBase
  nameWithType: IMethodMessage.MethodBase
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodName
  nameWithType: IMethodMessage.MethodName
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodSignature
  nameWithType: IMethodMessage.MethodSignature
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: TypeName
  nameWithType: IMethodMessage.TypeName
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Uri*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: Uri
  nameWithType: IMethodMessage.Uri
