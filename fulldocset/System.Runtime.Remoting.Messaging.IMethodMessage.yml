### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Messaging.IMethodMessage
  id: IMethodMessage
  children:
  - System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount
  - System.Runtime.Remoting.Messaging.IMethodMessage.Args
  - System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(System.Int32)
  - System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(System.Int32)
  - System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs
  - System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext
  - System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase
  - System.Runtime.Remoting.Messaging.IMethodMessage.MethodName
  - System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature
  - System.Runtime.Remoting.Messaging.IMethodMessage.TypeName
  - System.Runtime.Remoting.Messaging.IMethodMessage.Uri
  langs:
  - csharp
  name: IMethodMessage
  nameWithType: IMethodMessage
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage
  type: Interface
  summary: "Define a interface de mensagem do método."
  remarks: "Uma mensagem do método é utilizada para enviar informações de e para métodos remotos. Por exemplo, mensagens utilizadas para chamadas de método remoto implementam a interface de IMethodMessage."
  example:
  - "The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the message information to the console and return immediately without making a remote call.  \n  \n [!code-cpp[IMethodMessage_MethodName#1](~/add/codesnippet/cpp/t-system.runtime.remotin_38_1.cpp)]\n [!code-cs[IMethodMessage_MethodName#1](~/add/codesnippet/csharp/t-system.runtime.remotin_38_1.cs)]\n [!code-vb[IMethodMessage_MethodName#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_38_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IMethodMessage : System.Runtime.Remoting.Messaging.IMessage
  implements:
  - System.Runtime.Remoting.Messaging.IMessage
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount
  id: ArgCount
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: ArgCount
  nameWithType: IMethodMessage.ArgCount
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém o número de argumentos transmitido ao método."
  remarks: ''
  example:
  - "The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the message information to the console, using the `ArgCount` property to iterate through the arguments.  \n  \n [!code-cpp[IMethodMessage_MethodName#2](~/add/codesnippet/cpp/p-system.runtime.remotin_19_1.cpp)]\n [!code-cs[IMethodMessage_MethodName#2](~/add/codesnippet/csharp/p-system.runtime.remotin_19_1.cs)]\n [!code-vb[IMethodMessage_MethodName#2](~/add/codesnippet/visualbasic/p-system.runtime.remotin_19_1.vb)]"
  syntax:
    content: public int ArgCount { get; }
    return:
      type: System.Int32
      description: "O número de argumentos transmitidos para o método."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Args
  id: Args
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: Args
  nameWithType: IMethodMessage.Args
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Args
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém uma matriz de argumentos passados para o método."
  remarks: "Embora a propriedade Args é redundante, uma vez que a mesma funcionalidade pode ser conseguida através de <xref:System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount%2A>e <xref:System.Runtime.Remoting.Messaging.IMethodMessage.GetArg%2A>, poderá haver Otimização do desempenho disponível se o implementador compreende quando todos os argumentos serão obtidos.</xref:System.Runtime.Remoting.Messaging.IMethodMessage.GetArg%2A> </xref:System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount%2A>"
  syntax:
    content: public object[] Args { get; }
    return:
      type: System.Object[]
      description: "Um <xref:System.Object>que contém os argumentos transmitidos para o método de matriz.</xref:System.Object>"
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.Args*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(System.Int32)
  id: GetArg(System.Int32)
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: GetArg(Int32)
  nameWithType: IMethodMessage.GetArg(Int32)
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém um argumento específico como uma <xref:System.Object>.</xref:System.Object>"
  syntax:
    content: public object GetArg (int argNum);
    parameters:
    - id: argNum
      type: System.Int32
      description: "O número de argumento o pedido."
    return:
      type: System.Object
      description: "O argumento transmitido para o método."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(System.Int32)
  id: GetArgName(System.Int32)
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: GetArgName(Int32)
  nameWithType: IMethodMessage.GetArgName(Int32)
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém o nome do argumento transmitido para o método."
  syntax:
    content: public string GetArgName (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "O número de argumento o pedido."
    return:
      type: System.String
      description: "O nome do argumento especificado transmitido ao método, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o método atual não está implementado."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs
  id: HasVarArgs
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: HasVarArgs
  nameWithType: IMethodMessage.HasVarArgs
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém um valor que indica se a mensagem tem argumentos de variável."
  remarks: ''
  example:
  - "The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the message information to the console, including whether the method call has variable arguments.  \n  \n [!code-cpp[IMethodMessage_MethodName#2](~/add/codesnippet/cpp/p-system.runtime.remotin_93_1.cpp)]\n [!code-cs[IMethodMessage_MethodName#2](~/add/codesnippet/csharp/p-system.runtime.remotin_93_1.cs)]\n [!code-vb[IMethodMessage_MethodName#2](~/add/codesnippet/visualbasic/p-system.runtime.remotin_93_1.vb)]"
  syntax:
    content: public bool HasVarArgs { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o método pode aceitar um número de argumentos; variável caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext
  id: LogicalCallContext
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: LogicalCallContext
  nameWithType: IMethodMessage.LogicalCallContext
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém o <xref href=&quot;System.Runtime.Remoting.Messaging.LogicalCallContext&quot;> </xref> para a chamada de método atual."
  remarks: ''
  example:
  - "The following example code shows how to use the `LogicalCallContext` property to determine whether any values are attached to the logical thread.  \n  \n [!code-vb[IMethodMessage_LogicalCallContext#1](~/add/codesnippet/visualbasic/p-system.runtime.remotin_66_1.vb)]\n [!code-cs[IMethodMessage_LogicalCallContext#1](~/add/codesnippet/csharp/p-system.runtime.remotin_66_1.cs)]\n [!code-cpp[IMethodMessage_LogicalCallContext#1](~/add/codesnippet/cpp/p-system.runtime.remotin_66_1.cpp)]"
  syntax:
    content: public System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext { get; }
    return:
      type: System.Runtime.Remoting.Messaging.LogicalCallContext
      description: "Obtém o <xref href=&quot;System.Runtime.Remoting.Messaging.LogicalCallContext&quot;> </xref> para a chamada de método atual."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase
  id: MethodBase
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: MethodBase
  nameWithType: IMethodMessage.MethodBase
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém o <xref:System.Reflection.MethodBase>do método chamado.</xref:System.Reflection.MethodBase>"
  remarks: "Estas informações não são transmitidas para uma localização remota, mas são utilizadas para colocar em cache a base de método depois de que tem sido pesquisado uma vez."
  syntax:
    content: public System.Reflection.MethodBase MethodBase { get; }
    return:
      type: System.Reflection.MethodBase
      description: "O <xref:System.Reflection.MethodBase>do método chamado.</xref:System.Reflection.MethodBase>"
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName
  id: MethodName
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: MethodName
  nameWithType: IMethodMessage.MethodName
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém o nome do método invocado."
  remarks: ''
  example:
  - "The following example code shows a custom proxy that overrides `RealProxy.Invoke` in order to write the name of the method to the console.  \n  \n [!code-cpp[IMethodMessage_MethodName#2](~/add/codesnippet/cpp/p-system.runtime.remotin_13_1.cpp)]\n [!code-cs[IMethodMessage_MethodName#2](~/add/codesnippet/csharp/p-system.runtime.remotin_13_1.cs)]\n [!code-vb[IMethodMessage_MethodName#2](~/add/codesnippet/visualbasic/p-system.runtime.remotin_13_1.vb)]"
  syntax:
    content: public string MethodName { get; }
    return:
      type: System.String
      description: "O nome do método invocado."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature
  id: MethodSignature
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: MethodSignature
  nameWithType: IMethodMessage.MethodSignature
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém um objeto que contém a assinatura de método."
  remarks: "Todas as implementações atuais de <xref:System.Runtime.Remoting.Messaging.IMethodMessage>devolver uma matriz de <xref:System.Type>objetos que contêm os tipos de parâmetro do método.</xref:System.Type> </xref:System.Runtime.Remoting.Messaging.IMethodMessage>"
  syntax:
    content: public object MethodSignature { get; }
    return:
      type: System.Object
      description: "Um objeto que contém a assinatura de método."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName
  id: TypeName
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: TypeName
  nameWithType: IMethodMessage.TypeName
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém o <xref:System.Type>nome do objeto específico que a chamada é destinado for.</xref:System.Type> completo"
  syntax:
    content: public string TypeName { get; }
    return:
      type: System.String
      description: "O <xref:System.Type>nome do objeto específico que a chamada é destinado for.</xref:System.Type> completo"
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Uri
  id: Uri
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  langs:
  - csharp
  name: Uri
  nameWithType: IMethodMessage.Uri
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Uri
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Obtém o URI do objeto específico que é destinada a chamada."
  syntax:
    content: public string Uri { get; }
    return:
      type: System.String
      description: "O URI do objecto remoto que contém o método invocado."
  overload: System.Runtime.Remoting.Messaging.IMethodMessage.Uri*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador imediato efetua a chamada através de uma referência para a interface e não tem permissão de infraestrutura."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: ArgCount
  nameWithType: IMethodMessage.ArgCount
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Args
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: Args
  nameWithType: IMethodMessage.Args
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Args
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(System.Int32)
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: GetArg(Int32)
  nameWithType: IMethodMessage.GetArg(Int32)
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(System.Int32)
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: GetArgName(Int32)
  nameWithType: IMethodMessage.GetArgName(Int32)
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: HasVarArgs
  nameWithType: IMethodMessage.HasVarArgs
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: LogicalCallContext
  nameWithType: IMethodMessage.LogicalCallContext
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: LogicalCallContext
  nameWithType: LogicalCallContext
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodBase
  nameWithType: IMethodMessage.MethodBase
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodName
  nameWithType: IMethodMessage.MethodName
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodSignature
  nameWithType: IMethodMessage.MethodSignature
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: TypeName
  nameWithType: IMethodMessage.TypeName
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Uri
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: Uri
  nameWithType: IMethodMessage.Uri
  fullName: System.Runtime.Remoting.Messaging.IMethodMessage.Uri
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: ArgCount
  nameWithType: IMethodMessage.ArgCount
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Args*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: Args
  nameWithType: IMethodMessage.Args
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArg*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: GetArg
  nameWithType: IMethodMessage.GetArg
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: GetArgName
  nameWithType: IMethodMessage.GetArgName
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: HasVarArgs
  nameWithType: IMethodMessage.HasVarArgs
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: LogicalCallContext
  nameWithType: IMethodMessage.LogicalCallContext
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodBase
  nameWithType: IMethodMessage.MethodBase
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodName*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodName
  nameWithType: IMethodMessage.MethodName
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: MethodSignature
  nameWithType: IMethodMessage.MethodSignature
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.TypeName*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: TypeName
  nameWithType: IMethodMessage.TypeName
- uid: System.Runtime.Remoting.Messaging.IMethodMessage.Uri*
  parent: System.Runtime.Remoting.Messaging.IMethodMessage
  isExternal: false
  name: Uri
  nameWithType: IMethodMessage.Uri
