### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.MaskedTextProvider
  id: MaskedTextProvider
  children:
  - System.ComponentModel.MaskedTextProvider.#ctor(System.String)
  - System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)
  - System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.Add(System.Char)
  - System.ComponentModel.MaskedTextProvider.Add(System.String)
  - System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.AllowPromptAsInput
  - System.ComponentModel.MaskedTextProvider.AsciiOnly
  - System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount
  - System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount
  - System.ComponentModel.MaskedTextProvider.Clear
  - System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.Clone
  - System.ComponentModel.MaskedTextProvider.Culture
  - System.ComponentModel.MaskedTextProvider.DefaultPasswordChar
  - System.ComponentModel.MaskedTextProvider.EditPositionCount
  - System.ComponentModel.MaskedTextProvider.EditPositions
  - System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)
  - System.ComponentModel.MaskedTextProvider.IncludeLiterals
  - System.ComponentModel.MaskedTextProvider.IncludePrompt
  - System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)
  - System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)
  - System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.InvalidIndex
  - System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)
  - System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)
  - System.ComponentModel.MaskedTextProvider.IsPassword
  - System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)
  - System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)
  - System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)
  - System.ComponentModel.MaskedTextProvider.Item(System.Int32)
  - System.ComponentModel.MaskedTextProvider.LastAssignedPosition
  - System.ComponentModel.MaskedTextProvider.Length
  - System.ComponentModel.MaskedTextProvider.Mask
  - System.ComponentModel.MaskedTextProvider.MaskCompleted
  - System.ComponentModel.MaskedTextProvider.MaskFull
  - System.ComponentModel.MaskedTextProvider.PasswordChar
  - System.ComponentModel.MaskedTextProvider.PromptChar
  - System.ComponentModel.MaskedTextProvider.Remove
  - System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)
  - System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)
  - System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)
  - System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)
  - System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.ResetOnPrompt
  - System.ComponentModel.MaskedTextProvider.ResetOnSpace
  - System.ComponentModel.MaskedTextProvider.Set(System.String)
  - System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.SkipLiterals
  - System.ComponentModel.MaskedTextProvider.ToDisplayString
  - System.ComponentModel.MaskedTextProvider.ToString
  - System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)
  - System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)
  - System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)
  - System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)
  - System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)
  - System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
  - System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)
  - System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)
  - System.ComponentModel.MaskedTextProvider.VerifyString(System.String)
  - System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  langs:
  - csharp
  name: MaskedTextProvider
  nameWithType: MaskedTextProvider
  fullName: System.ComponentModel.MaskedTextProvider
  type: Class
  summary: "Represents a mask-parsing service that can be used by any number of controls that support masking, such as the <xref href=&quot;System.Windows.Forms.MaskedTextBox&quot;></xref> control."
  remarks: "The <xref:System.Windows.Forms.MaskedTextBox> control contains a mask, composed of literal characters and formatting elements, that it tests all user input against. Instead of permanently associating a specific mask-parsing engine with <xref:System.Windows.Forms.MaskedTextBox>, Windows Forms provides it as a separate service, represented by the MaskedTextProvider class, which defines the syntax of the masking language discussed in the documentation for the <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> property.       Many of the members of the <xref:System.Windows.Forms.MaskedTextBox> class refer their implementation to similarly named members of the associated MaskedTextProvider. For example, the <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A?displayProperty=fullName> property of the <xref:System.Windows.Forms.MaskedTextBox> class refers all access to the <xref:System.ComponentModel.MaskedTextProvider.PromptChar%2A> of the MaskedTextProvider class.       The mask-parsing engine used by MaskedTextProvider is modeled after the Masked Edit control included in Microsoft Visual Basic version 6. Its masking language is described in the documentation for the <xref:System.ComponentModel.MaskedTextProvider.Mask%2A> property.       The following three distinct strings are involved with the MaskedTextProvider class.      |String name|Description|   |-----------------|-----------------|   |Input character or string|Represents the characters used as input that the mask is applied against. In actuality, the input string may be composed of multiple input operations, including <xref:System.ComponentModel.MaskedTextProvider.Add%2A>, <xref:System.ComponentModel.MaskedTextProvider.Replace%2A>, <xref:System.ComponentModel.MaskedTextProvider.InsertAt%2A>, and <xref:System.ComponentModel.MaskedTextProvider.Remove%2A>. Therefore, the input string cannot be accessed directly. However, aspects of the input string handling are available though the <xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A> and <xref:System.ComponentModel.MaskedTextProvider.AsciiOnly%2A>, <xref:System.ComponentModel.MaskedTextProvider.ResetOnPrompt%2A>, and <xref:System.ComponentModel.MaskedTextProvider.ResetOnSpace%2A> properties.|   |Mask|Represents the input formatting mask used to transform the input string into the formatted string. This string is set in the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> and accessed primarily though the <xref:System.ComponentModel.MaskedTextProvider.Mask%2A> property. Characteristics of the mask are also available through other members, such as the <xref:System.ComponentModel.MaskedTextProvider.Length%2A>, <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A>, and <xref:System.ComponentModel.MaskedTextProvider.PromptChar%2A> properties.|   |Formatted string|Represents the string that results when the full mask is applied to the input string. The formatted string can be queried with many members of the class, including <xref:System.ComponentModel.MaskedTextProvider.Item%2A>, <xref:System.ComponentModel.MaskedTextProvider.Length%2A>, <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A>, <xref:System.ComponentModel.MaskedTextProvider.MaskFull%2A>, <xref:System.ComponentModel.MaskedTextProvider.MaskCompleted%2A>, <xref:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom%2A>, and so on. The full value of the formatted string is available from the <xref:System.ComponentModel.MaskedTextProvider.ToDisplayString%2A> and <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> methods.|      > [!NOTE] >  The input string may represent direct user input, as in the case of the <xref:System.Windows.Forms.MaskedTextBox>, or may be generated by other processes not directly associated with user input/output operations."
  syntax:
    content: 'public class MaskedTextProvider : ICloneable'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: MaskedTextProvider(String)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ComponentModel.MaskedTextProvider&quot;></xref> class using the specified mask."
  remarks: "Use of this constructor is exactly equivalent to the following call to the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> constructor:  \n  \n `MaskedTextProvider(mask , null, true, '_', '\\0', false)`"
  syntax:
    content: public MaskedTextProvider (string mask);
    parameters:
    - id: mask
      type: System.String
      description: "A <xref:System.String> that represents the input mask."
  overload: System.ComponentModel.MaskedTextProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: MaskedTextProvider(String,Boolean)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ComponentModel.MaskedTextProvider&quot;></xref> class using the specified mask and ASCII restriction value."
  remarks: "Use of this constructor is exactly equivalent to the following call to the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> constructor:  \n  \n `MaskedTextProvider(mask , null, true, '_', '\\0', restrictToASCII)`"
  syntax:
    content: public MaskedTextProvider (string mask, bool restrictToAscii);
    parameters:
    - id: mask
      type: System.String
      description: "A <xref:System.String> that represents the input mask."
    - id: restrictToAscii
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to restrict input to ASCII-compatible characters; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to allow the entire Unicode set."
  overload: System.ComponentModel.MaskedTextProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)
  id: '#ctor(System.String,System.Globalization.CultureInfo)'
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: MaskedTextProvider(String,CultureInfo)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,CultureInfo)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,CultureInfo)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ComponentModel.MaskedTextProvider&quot;></xref> class using the specified mask and culture."
  remarks: "Use of this constructor is exactly equivalent to the following call to the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> constructor:  \n  \n `MaskedTextProvider(mask , culture, true, '_', '\\0', false)`"
  syntax:
    content: public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture);
    parameters:
    - id: mask
      type: System.String
      description: "A <xref:System.String> that represents the input mask."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo> that is used to set region-sensitive separator characters."
  overload: System.ComponentModel.MaskedTextProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)
  id: '#ctor(System.String,System.Char,System.Boolean)'
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: MaskedTextProvider(String,Char,Boolean)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,Char,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,Char,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ComponentModel.MaskedTextProvider&quot;></xref> class using the specified mask, password character, and prompt usage value."
  remarks: "Use of this constructor is exactly equivalent to the following call to the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> constructor:       `MaskedTextProvider(mask , null, allowPromptAsInput, &quot;_&quot;, passwordChar, false)`"
  syntax:
    content: public MaskedTextProvider (string mask, char passwordChar, bool allowPromptAsInput);
    parameters:
    - id: mask
      type: System.String
      description: "A <xref:System.String> that represents the input mask."
    - id: passwordChar
      type: System.Char
      description: "A <xref:System.Char> that will be displayed for characters entered into a password string."
    - id: allowPromptAsInput
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to allow the prompt character as input; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)
  id: '#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)'
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: MaskedTextProvider(String,CultureInfo,Boolean)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ComponentModel.MaskedTextProvider&quot;></xref> class using the specified mask, culture, and ASCII restriction value."
  remarks: "Use of this constructor is exactly equivalent to the following call to the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> constructor:  \n  \n `MaskedTextProvider(mask , culture, true, '_', '\\0', restrictToAscii)`"
  syntax:
    content: public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture, bool restrictToAscii);
    parameters:
    - id: mask
      type: System.String
      description: "A <xref:System.String> that represents the input mask."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo> that is used to set region-sensitive separator characters."
    - id: restrictToAscii
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to restrict input to ASCII-compatible characters; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to allow the entire Unicode set."
  overload: System.ComponentModel.MaskedTextProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)
  id: '#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)'
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: MaskedTextProvider(String,CultureInfo,Char,Boolean)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Char,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Char,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ComponentModel.MaskedTextProvider&quot;></xref> class using the specified mask, culture, password character, and prompt usage value."
  remarks: "Use of this constructor is exactly equivalent to the following call to the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> constructor:       `MaskedTextProvider(mask , culture, allowPromptAsInput, &quot;_&quot;, passwordChar, false)`"
  syntax:
    content: public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture, char passwordChar, bool allowPromptAsInput);
    parameters:
    - id: mask
      type: System.String
      description: "A <xref:System.String> that represents the input mask."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo> that is used to set region-sensitive separator characters."
    - id: passwordChar
      type: System.Char
      description: "A <xref:System.Char> that will be displayed for characters entered into a password string."
    - id: allowPromptAsInput
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to allow the prompt character as input; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)
  id: '#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)'
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: MaskedTextProvider(String,CultureInfo,Boolean,Char,Char,Boolean)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Boolean,Char,Char,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Boolean,Char,Char,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Initializes a new instance of the <xref href=&quot;System.ComponentModel.MaskedTextProvider&quot;></xref> class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value."
  remarks: "This constructor represents the most general overloaded form. The `mask` parameter must conform to the masking language defined by the <xref:System.ComponentModel.MaskedTextProvider> class, which is detailed in the <xref:System.Windows.Forms.MaskedTextBox.Mask%2A?displayProperty=fullName> property of the <xref:System.Windows.Forms.MaskedTextBox> class.       Because neutral cultures cannot be queried for culture-specific information, the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> constructor will use the <xref:System.Globalization.CultureInfo.GetCultures%2A> method to search for the first non-neutral culture to use to determine the proper separator characters."
  syntax:
    content: public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture, bool allowPromptAsInput, char promptChar, char passwordChar, bool restrictToAscii);
    parameters:
    - id: mask
      type: System.String
      description: "A <xref:System.String> that represents the input mask."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo> that is used to set region-sensitive separator characters."
    - id: allowPromptAsInput
      type: System.Boolean
      description: "A <xref:System.Boolean> value that specifies whether the prompt character should be allowed as a valid input character."
    - id: promptChar
      type: System.Char
      description: "A <xref:System.Char> that will be displayed as a placeholder for user input."
    - id: passwordChar
      type: System.Char
      description: "A <xref:System.Char> that will be displayed for characters entered into a password string."
    - id: restrictToAscii
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to restrict input to ASCII-compatible characters; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to allow the entire Unicode set."
  overload: System.ComponentModel.MaskedTextProvider.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The mask parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or <xref:System.String.Empty>.       -or-       The mask contains one or more non-printable characters."
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Add(System.Char)
  id: Add(System.Char)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Add(Char)
  nameWithType: MaskedTextProvider.Add(Char)
  fullName: System.ComponentModel.MaskedTextProvider.Add(Char)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adds the specified input character to the end of the formatted string."
  remarks: "The Add method adds the `input` character value to the first available position in the formatted string after the position that was last assigned, which is represented by the <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A> property. This method will fail for any of the following reasons:      -   The input value, `input`, is not printable, or it does not match its corresponding mask element.      -   There are zero available edit positions in the formatted string, or there are no available edit positions after the last assigned position."
  syntax:
    content: public bool Add (char input);
    parameters:
    - id: input
      type: System.Char
      description: "A <xref:System.Char> value to be appended to the formatted string."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the input character was added successfully; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Add*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Add(System.String)
  id: Add(System.String)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Add(String)
  nameWithType: MaskedTextProvider.Add(String)
  fullName: System.ComponentModel.MaskedTextProvider.Add(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adds the characters in the specified input string to the end of the formatted string."
  remarks: "The Add method adds the characters from the `input` string to the formatted string, starting with the first available position after <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A>. This method will fail for any of the following reasons:      -   Any of the characters in the input value, `input`, are not printable, or the input value does not match its corresponding mask element.      -   There are not enough available edit positions in the formatted string after the last assigned position.       If this method fails, no additions are made and the method returns `false`."
  syntax:
    content: public bool Add (string input);
    parameters:
    - id: input
      type: System.String
      description: "A <xref:System.String> containing character values to be appended to the formatted string."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if all the characters from the input string were added successfully; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to indicate that no characters were added."
  overload: System.ComponentModel.MaskedTextProvider.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The<code> input</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Add(Char,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Add(Char,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Add(Char,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information."
  remarks: "The Add method attempts to add the `input` character value to the first available position in the formatted string after the position that was last assigned, which is represented by the <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A> property. This method will fail if all available positions are before the last assigned position. This method will fail for any of the following reasons:      -   The input value, `input`, is not printable, or it does not match its corresponding mask element.      -   There are zero available edit positions in the formatted string, or there are no available edit positions after the last assigned position.       This method functions the same as the overridden version taking a single <xref:System.Char> parameter, <xref:System.ComponentModel.MaskedTextProvider.Add%28System.Char%29>, except that it outputs additional information."
  syntax:
    content: public bool Add (char input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: input
      type: System.Char
      description: "A <xref:System.Char> value to be appended to the formatted string."
    - id: testPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the attempt was made to add the character. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the input character was added successfully; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Add*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Add(String,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Add(String,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Add(String,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information."
  remarks: "The Add method adds the characters from the `input` string to the formatted string, starting with the first available position after <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A>. This method will fail for any of the following reasons:      -   Any of the characters in the input value, `input`, are not printable, or the input value does not match its corresponding mask element.      -   There are not enough available edit positions in the formatted string after the last assigned position.       If this method fails, no additions are made and the method returns `false`.       This method functions the same as the overridden version taking a single <xref:System.String> parameter, <xref:System.ComponentModel.MaskedTextProvider.Add%28System.String%29>, except that it outputs additional information."
  syntax:
    content: public bool Add (string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: input
      type: System.String
      description: "A <xref:System.String> containing character values to be appended to the formatted string."
    - id: testPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the attempt was made to add the character. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if all the characters from the input string were added successfully; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to indicate that no characters were added."
  overload: System.ComponentModel.MaskedTextProvider.Add*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.AllowPromptAsInput
  id: AllowPromptAsInput
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: AllowPromptAsInput
  nameWithType: MaskedTextProvider.AllowPromptAsInput
  fullName: System.ComponentModel.MaskedTextProvider.AllowPromptAsInput
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a value indicating whether the prompt character should be treated as a valid input character or not."
  remarks: "The AllowPromptAsInput property&quot;s value is set in the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> constructor.       Even when AllowPromptAsInput is `true`, the prompt character must be valid for the current location in the mask in order to be accepted."
  syntax:
    content: public bool AllowPromptAsInput { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the user can enter <xref:System.ComponentModel.MaskedTextProvider.PromptChar*> into the control; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.AllowPromptAsInput*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.AsciiOnly
  id: AsciiOnly
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: AsciiOnly
  nameWithType: MaskedTextProvider.AsciiOnly
  fullName: System.ComponentModel.MaskedTextProvider.AsciiOnly
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a value indicating whether the mask accepts characters outside of the ASCII character set."
  remarks: "The AsciiOnly property&quot;s value is set in the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> constructor.       If `true`, AsciiOnly restricts user input to the ASCII character set."
  syntax:
    content: public bool AsciiOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if only ASCII is accepted; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if <xref href=&quot;System.ComponentModel.MaskedTextProvider&quot;></xref> can accept any arbitrary Unicode character. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.AsciiOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount
  id: AssignedEditPositionCount
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: AssignedEditPositionCount
  nameWithType: MaskedTextProvider.AssignedEditPositionCount
  fullName: System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the number of editable character positions that have already been successfully assigned an input value."
  remarks: "The total number of editable character positions, represented by the <xref:System.ComponentModel.MaskedTextProvider.EditPositionCount%2A> property, should equal the sum of the AssignedEditPositionCount and the <xref:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount%2A> properties."
  syntax:
    content: public int AssignedEditPositionCount { get; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string."
  overload: System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount
  id: AvailableEditPositionCount
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: AvailableEditPositionCount
  nameWithType: MaskedTextProvider.AvailableEditPositionCount
  fullName: System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the number of editable character positions in the input mask that have not yet been assigned an input value."
  remarks: "The total number of editable character positions, represented by the <xref:System.ComponentModel.MaskedTextProvider.EditPositionCount%2A> property, should equal the sum of the <xref:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount%2A> and the AvailableEditPositionCount properties."
  syntax:
    content: public int AvailableEditPositionCount { get; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> containing the number of editable character positions that not yet been assigned a character value."
  overload: System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Clear
  id: Clear
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Clear()
  nameWithType: MaskedTextProvider.Clear()
  fullName: System.ComponentModel.MaskedTextProvider.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Clears all the editable input characters from the formatted string, replacing them with prompt characters."
  remarks: "The Clear method reinitializes the formatted string, inserting the prompt character into all editable positions."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.ComponentModel.MaskedTextProvider.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)
  id: Clear(System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Clear(MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Clear(MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Clear(MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information."
  remarks: "The Clear method reinitializes the formatted string, inserting the prompt character into all editable positions. It functions equivalently to the overridden version that takes no parameters, <xref:System.ComponentModel.MaskedTextProvider.Clear>, except it outputs additional information."
  syntax:
    content: public void Clear (out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the operation. An output parameter."
  overload: System.ComponentModel.MaskedTextProvider.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Clone
  id: Clone
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Clone()
  nameWithType: MaskedTextProvider.Clone()
  fullName: System.ComponentModel.MaskedTextProvider.Clone()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Creates a copy of the current <xref href=&quot;System.ComponentModel.MaskedTextProvider&quot;></xref>."
  remarks: "The Clone method returns a new copy of the current <xref:System.ComponentModel.MaskedTextProvider>."
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "The <xref href=&quot;System.ComponentModel.MaskedTextProvider&quot;></xref> object this method creates, cast as an object."
  overload: System.ComponentModel.MaskedTextProvider.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Culture
  id: Culture
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Culture
  nameWithType: MaskedTextProvider.Culture
  fullName: System.ComponentModel.MaskedTextProvider.Culture
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the culture that determines the value of the localizable separators and placeholders in the input mask."
  remarks: "The Culture property is set in the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> constructor."
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; }
    return:
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo> containing the culture information associated with the input mask."
  overload: System.ComponentModel.MaskedTextProvider.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.DefaultPasswordChar
  id: DefaultPasswordChar
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: DefaultPasswordChar
  nameWithType: MaskedTextProvider.DefaultPasswordChar
  fullName: System.ComponentModel.MaskedTextProvider.DefaultPasswordChar
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the default password character used obscure user input."
  remarks: "The DefaultPasswordChar property is defined in the <xref:System.ComponentModel.MaskedTextProvider> class to be the asterisk character (*)."
  syntax:
    content: public static char DefaultPasswordChar { get; }
    return:
      type: System.Char
      description: "A <xref:System.Char> that represents the default password character."
  overload: System.ComponentModel.MaskedTextProvider.DefaultPasswordChar*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.EditPositionCount
  id: EditPositionCount
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: EditPositionCount
  nameWithType: MaskedTextProvider.EditPositionCount
  fullName: System.ComponentModel.MaskedTextProvider.EditPositionCount
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the number of editable positions in the formatted string."
  remarks: "The total number of editable character positions, represented by the EditPositionCount property, must equal the sum of the <xref:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount%2A> and the <xref:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount%2A> properties. This value includes both the required and the optional editable characters."
  syntax:
    content: public int EditPositionCount { get; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> containing the number of editable positions in the formatted string."
  overload: System.ComponentModel.MaskedTextProvider.EditPositionCount*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.EditPositions
  id: EditPositions
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: EditPositions
  nameWithType: MaskedTextProvider.EditPositions
  fullName: System.ComponentModel.MaskedTextProvider.EditPositions
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a newly created enumerator for the editable positions in the formatted string."
  remarks: "On every access of the EditPositions property, a temporary collection of editable positions is created that the retrieved <xref:System.Collections.IEnumerator> operates on.       This collection is read-only."
  syntax:
    content: public System.Collections.IEnumerator EditPositions { get; }
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> that supports enumeration over the editable positions in the formatted string."
  overload: System.ComponentModel.MaskedTextProvider.EditPositions*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)
  id: FindAssignedEditPositionFrom(System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: FindAssignedEditPositionFrom(Int32,Boolean)
  nameWithType: MaskedTextProvider.FindAssignedEditPositionFrom(Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(Int32,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the position of the first assigned editable position after the specified position using the specified search direction."
  remarks: "The formatted string is composed of editable characters and literals copied from the mask. The editable character positions will either be occupied by the prompt character copied from the mask if they are unassigned, or with a valid input character if they have been assigned an input.       The FindAssignedEditPositionFrom method is used to search for the first assigned character after a specified position and search direction. The result can subsequently be passed as a parameter to the <xref:System.ComponentModel.MaskedTextProvider.Item%2A> indexer to obtain the assigned value at this position.       The <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom%2A> and <xref:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom%2A> methods are complements of this method."
  syntax:
    content: public int FindAssignedEditPositionFrom (int position, bool direction);
    parameters:
    - id: position
      type: System.Int32
      description: "The zero-based position in the formatted string to start the search."
    - id: direction
      type: System.Boolean
      description: "A <xref:System.Boolean> indicating the search direction; either <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to search forward or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to search backward."
    return:
      type: System.Int32
      description: "If successful, an <xref:System.Int32> representing the zero-based position of the first assigned editable position encountered; otherwise <xref:System.ComponentModel.MaskedTextProvider.InvalidIndex*>."
  overload: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  id: FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: FindAssignedEditPositionInRange(Int32,Int32,Boolean)
  nameWithType: MaskedTextProvider.FindAssignedEditPositionInRange(Int32,Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(Int32,Int32,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the position of the first assigned editable position between the specified positions using the specified search direction."
  remarks: "The formatted string is composed of editable characters and literals copied from the mask. The editable character positions will either be occupied by the prompt character copied from the mask if they are unassigned, or with a valid input character if they have been assigned an input.       The FindAssignedEditPositionInRange method is used to search for the first assigned character between two specified positions, inclusive, using the specified search direction. The result can subsequently be passed as a parameter to the <xref:System.ComponentModel.MaskedTextProvider.Item%2A> indexer to obtain the assigned value at this position.       The <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange%2A> and <xref:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange%2A> methods are complements of this method."
  syntax:
    content: public int FindAssignedEditPositionInRange (int startPosition, int endPosition, bool direction);
    parameters:
    - id: startPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the search starts."
    - id: endPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the search ends."
    - id: direction
      type: System.Boolean
      description: "A <xref:System.Boolean> indicating the search direction; either <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to search forward or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to search backward."
    return:
      type: System.Int32
      description: "If successful, an <xref:System.Int32> representing the zero-based position of the first assigned editable position encountered; otherwise <xref:System.ComponentModel.MaskedTextProvider.InvalidIndex*>."
  overload: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)
  id: FindEditPositionFrom(System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: FindEditPositionFrom(Int32,Boolean)
  nameWithType: MaskedTextProvider.FindEditPositionFrom(Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(Int32,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the position of the first editable position after the specified position using the specified search direction."
  remarks: "The FindEditPositionFrom method is used to search for the next assigned or unassigned editable position in the formatted string after the specified position.       The <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom%2A> method is the complement of this method."
  syntax:
    content: public int FindEditPositionFrom (int position, bool direction);
    parameters:
    - id: position
      type: System.Int32
      description: "The zero-based position in the formatted string to start the search."
    - id: direction
      type: System.Boolean
      description: "A <xref:System.Boolean> indicating the search direction; either <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to search forward or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to search backward."
    return:
      type: System.Int32
      description: "If successful, an <xref:System.Int32> representing the zero-based position of the first editable position encountered; otherwise <xref:System.ComponentModel.MaskedTextProvider.InvalidIndex*>."
  overload: System.ComponentModel.MaskedTextProvider.FindEditPositionFrom*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  id: FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: FindEditPositionInRange(Int32,Int32,Boolean)
  nameWithType: MaskedTextProvider.FindEditPositionInRange(Int32,Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(Int32,Int32,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the position of the first editable position between the specified positions using the specified search direction."
  remarks: "The FindEditPositionInRange method is used to search for the first editable character between two specified positions, inclusive, using the specified search direction. The result can subsequently be passed as a parameter to the <xref:System.ComponentModel.MaskedTextProvider.Item%2A> indexer to obtain the assigned value at this position.       The <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange%2A> method is the complement of this method."
  syntax:
    content: public int FindEditPositionInRange (int startPosition, int endPosition, bool direction);
    parameters:
    - id: startPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the search starts."
    - id: endPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the search ends."
    - id: direction
      type: System.Boolean
      description: "A <xref:System.Boolean> indicating the search direction; either <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to search forward or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to search backward."
    return:
      type: System.Int32
      description: "If successful, an <xref:System.Int32> representing the zero-based position of the first editable position encountered; otherwise <xref:System.ComponentModel.MaskedTextProvider.InvalidIndex*>."
  overload: System.ComponentModel.MaskedTextProvider.FindEditPositionInRange*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)
  id: FindNonEditPositionFrom(System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: FindNonEditPositionFrom(Int32,Boolean)
  nameWithType: MaskedTextProvider.FindNonEditPositionFrom(Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(Int32,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the position of the first non-editable position after the specified position using the specified search direction."
  remarks: "The FindNonEditPositionFrom method is used to search for the next literal character in the formatted string after the specified position. The result can subsequently be passed as a parameter to the <xref:System.ComponentModel.MaskedTextProvider.Item%2A> indexer to obtain the literal value at this position.       The <xref:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom%2A> method is the complement of this method."
  syntax:
    content: public int FindNonEditPositionFrom (int position, bool direction);
    parameters:
    - id: position
      type: System.Int32
      description: "The zero-based position in the formatted string to start the search."
    - id: direction
      type: System.Boolean
      description: "A <xref:System.Boolean> indicating the search direction; either <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to search forward or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to search backward."
    return:
      type: System.Int32
      description: "If successful, an <xref:System.Int32> representing the zero-based position of the first literal position encountered; otherwise <xref:System.ComponentModel.MaskedTextProvider.InvalidIndex*>."
  overload: System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  id: FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: FindNonEditPositionInRange(Int32,Int32,Boolean)
  nameWithType: MaskedTextProvider.FindNonEditPositionInRange(Int32,Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(Int32,Int32,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the position of the first non-editable position between the specified positions using the specified search direction."
  remarks: "The FindNonEditPositionInRange method is used to search for the first literal character between two specified positions, inclusive, using the specified search direction. The result can subsequently be passed as a parameter to the <xref:System.ComponentModel.MaskedTextProvider.Item%2A> indexer to obtain the literal value at this position.       The <xref:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange%2A> method is the complement of this method."
  syntax:
    content: public int FindNonEditPositionInRange (int startPosition, int endPosition, bool direction);
    parameters:
    - id: startPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the search starts."
    - id: endPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the search ends."
    - id: direction
      type: System.Boolean
      description: "A <xref:System.Boolean> indicating the search direction; either <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to search forward or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to search backward."
    return:
      type: System.Int32
      description: "If successful, an <xref:System.Int32> representing the zero-based position of the first literal position encountered; otherwise <xref:System.ComponentModel.MaskedTextProvider.InvalidIndex*>."
  overload: System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)
  id: FindUnassignedEditPositionFrom(System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: FindUnassignedEditPositionFrom(Int32,Boolean)
  nameWithType: MaskedTextProvider.FindUnassignedEditPositionFrom(Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(Int32,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the position of the first unassigned editable position after the specified position using the specified search direction."
  remarks: "The formatted string is composed of editable characters and literals copied from the mask. The editable character positions will either be occupied by the prompt character copied from the mask if they are unassigned, or with a valid input character if they have been assigned an input.       The FindUnassignedEditPositionFrom method is used to search for the first unassigned character after a specified position and search direction. The prompt character should occupy this position.       The <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom%2A> and <xref:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom%2A> methods are complements of this method."
  syntax:
    content: public int FindUnassignedEditPositionFrom (int position, bool direction);
    parameters:
    - id: position
      type: System.Int32
      description: "The zero-based position in the formatted string to start the search."
    - id: direction
      type: System.Boolean
      description: "A <xref:System.Boolean> indicating the search direction; either <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to search forward or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to search backward."
    return:
      type: System.Int32
      description: "If successful, an <xref:System.Int32> representing the zero-based position of the first unassigned editable position encountered; otherwise <xref:System.ComponentModel.MaskedTextProvider.InvalidIndex*>."
  overload: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  id: FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: FindUnassignedEditPositionInRange(Int32,Int32,Boolean)
  nameWithType: MaskedTextProvider.FindUnassignedEditPositionInRange(Int32,Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(Int32,Int32,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the position of the first unassigned editable position between the specified positions using the specified search direction."
  remarks: "The formatted string is composed of editable characters and literals copied from the mask. The editable character positions will either be occupied by the prompt character copied from the mask if they are unassigned, or with a valid input character if they have been assigned an input.       The FindUnassignedEditPositionInRange method is used to search for the first unassigned character between two specified positions, inclusive, using the specified search direction. The prompt character should occupy this position.       The <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange%2A> and <xref:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange%2A> methods are complements of this method."
  syntax:
    content: public int FindUnassignedEditPositionInRange (int startPosition, int endPosition, bool direction);
    parameters:
    - id: startPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the search starts."
    - id: endPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the search ends."
    - id: direction
      type: System.Boolean
      description: "A <xref:System.Boolean> indicating the search direction; either <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to search forward or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to search backward."
    return:
      type: System.Int32
      description: "If successful, an <xref:System.Int32> representing the zero-based position of the first unassigned editable position encountered; otherwise <xref:System.ComponentModel.MaskedTextProvider.InvalidIndex*>."
  overload: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)
  id: GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: GetOperationResultFromHint(MaskedTextResultHint)
  nameWithType: MaskedTextProvider.GetOperationResultFromHint(MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether the specified <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> denotes success or failure."
  remarks: 'The following methods of the <xref:System.ComponentModel.MaskedTextProvider> class contain a parameter of type <xref:System.ComponentModel.MaskedTextResultHint> that is used to output information about the operation of the method: <xref:System.ComponentModel.MaskedTextProvider.Add%2A>, <xref:System.ComponentModel.MaskedTextProvider.Clear%2A>, <xref:System.ComponentModel.MaskedTextProvider.InsertAt%2A>, <xref:System.ComponentModel.MaskedTextProvider.Remove%2A>, <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A>, <xref:System.ComponentModel.MaskedTextProvider.Replace%2A>, <xref:System.ComponentModel.MaskedTextProvider.Set%2A>, <xref:System.ComponentModel.MaskedTextProvider.VerifyChar%2A>, and <xref:System.ComponentModel.MaskedTextProvider.VerifyString%2A>. The GetOperationResultFromHint method interprets this value and returns a Boolean value that indicates whether the <xref:System.ComponentModel.MaskedTextResultHint> has signaled that the operation was a success or failure.'
  syntax:
    content: public static bool GetOperationResultFromHint (System.ComponentModel.MaskedTextResultHint hint);
    parameters:
    - id: hint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> value typically obtained as an output parameter from a previous operation."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> value represents a success; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if it represents failure."
  overload: System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.IncludeLiterals
  id: IncludeLiterals
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: IncludeLiterals
  nameWithType: MaskedTextProvider.IncludeLiterals
  fullName: System.ComponentModel.MaskedTextProvider.IncludeLiterals
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string."
  remarks: "The <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> and IncludeLiterals properties will determine whether prompt and literal characters appear when calling the <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> method. By setting both of these properties to `false`, the parsed string will represent only the characters entered by the user."
  syntax:
    content: public bool IncludeLiterals { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if literals are included; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.IncludeLiterals*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.IncludePrompt
  id: IncludePrompt
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: IncludePrompt
  nameWithType: MaskedTextProvider.IncludePrompt
  fullName: System.ComponentModel.MaskedTextProvider.IncludePrompt
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets or sets a value indicating whether <xref:System.Windows.Forms.MaskedTextBox.PromptChar*> is used to represent the absence of user input when displaying the formatted string."
  remarks: "The IncludePrompt and <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> properties will determine whether prompt and literal characters appear when calling the <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> method. By setting both of these properties to `false`, the parsed string will represent only the characters entered by the user."
  syntax:
    content: public bool IncludePrompt { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the prompt character is used to represent the positions where no user input was provided; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.IncludePrompt*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)
  id: InsertAt(System.Char,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: InsertAt(Char,Int32)
  nameWithType: MaskedTextProvider.InsertAt(Char,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.InsertAt(Char,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inserts the specified character at the specified position within the formatted string."
  remarks: "The InsertAt method inserts a character into the first edit position at or beyond that specified by the `pos` parameter. This method will shift all existing characters after the insertion point over by one position to make room for the inserted `input` character. If one of the following errors occurs, the insertion is not performed, and the method returns `false`.      -   The `pos` parameter is less than zero or greater than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string.      -   An editable character was not found in the formatted string at or beyond the specified position, `pos`.      -   The insertion character, `input`, is not a valid input character because it is not printable or does not match its corresponding mask element.      -   There are no available positions to the right of the insertion point, so that existing characters cannot be shifted.      -   Shifting the existing characters would produce a violation of the mask.       An empty `input` string will cause no change in the formatted string, but will return `true`."
  syntax:
    content: public bool InsertAt (char input, int position);
    parameters:
    - id: input
      type: System.Char
      description: "The <xref:System.Char> to be inserted."
    - id: position
      type: System.Int32
      description: "The zero-based position in the formatted string to insert the character."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the insertion was successful; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.InsertAt*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)
  id: InsertAt(System.String,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: InsertAt(String,Int32)
  nameWithType: MaskedTextProvider.InsertAt(String,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.InsertAt(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inserts the specified string at a specified position within the formatted string."
  remarks: "The InsertAt method inserts each character from the `input` string into the edit positions located at position `pos` and beyond. This method will shift all existing characters after the insertion point over by one position for each inserted character. If one of the following errors occurs, no insertion is performed, and the method returns `false`.      -   The `pos` parameter is less than zero or greater than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string.      -   Not enough editable characters exist in the formatted string at or beyond the specified position, `pos`, to insert all of the characters from the `input` string.      -   One or more of the insertion characters are not a valid input character because they are not printable or do not match their corresponding mask element.      -   There are not enough available positions to the right of the insertion point, so that existing characters cannot be shifted.      -   Shifting the existing characters would produce a violation of the mask. Note that this shifting occurs during the insertion of each individual character.       An empty `input` string will cause no change in the formatted string, but will return `true`."
  syntax:
    content: public bool InsertAt (string input, int position);
    parameters:
    - id: input
      type: System.String
      description: "The <xref:System.String> to be inserted."
    - id: position
      type: System.Int32
      description: "The zero-based position in the formatted string to insert the input string."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the insertion was successful; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.InsertAt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: InsertAt(Char,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.InsertAt(Char,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.InsertAt(Char,Int32,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation."
  remarks: "The InsertAt method inserts a character into the first edit position at or beyond that specified by the `pos` parameter. This method will shift all existing characters after the insertion point over by one position to make room for the inserted `input` character. If one of the following errors occurs, the insertion is not performed, and the method returns `false`.      -   The `pos` parameter is less than zero or greater than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string.      -   An editable character was not found in the formatted string at or beyond the specified position, `pos`.      -   The insertion character, `input`, is not a valid input character because it is not printable or does not match its corresponding mask element.      -   There are no available positions to the right of the insertion point, so that existing characters cannot be shifted.      -   Shifting the existing characters would produce a violation of the mask.       An empty `input` string will cause no change in the formatted string, but will return `true`."
  syntax:
    content: public bool InsertAt (char input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: input
      type: System.Char
      description: "The <xref:System.Char> to be inserted."
    - id: position
      type: System.Int32
      description: "The zero-based position in the formatted string to insert the character."
    - id: testPosition
      type: System.Int32
      description: "If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the insertion operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the insertion was successful; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.InsertAt*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: InsertAt(String,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.InsertAt(String,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.InsertAt(String,Int32,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation."
  remarks: "The InsertAt method inserts each character from the `input` string into the edit positions located at position `pos` and beyond. This method will shift all existing characters after the insertion point over by one position for each inserted character. If one of the following errors occurs, no insertion is performed, and the method returns `false`.      -   The `pos` parameter is less than zero or greater than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string.      -   Not enough editable characters exist in the formatted string at or beyond the specified position, `pos`, to insert all of the characters from the `input` string.      -   One or more of the insertion characters are not a valid input character because they are not printable or do not match their corresponding mask element.      -   There are not enough available positions to the right of the insertion point, so that existing characters cannot be shifted.      -   Shifting the existing characters would produce a violation of the mask. Note that this shifting occurs during the insertion of each individual character.       An empty `input` string will cause no change in the formatted string, but will return `true`."
  syntax:
    content: public bool InsertAt (string input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: input
      type: System.String
      description: "The <xref:System.String> to be inserted."
    - id: position
      type: System.Int32
      description: "The zero-based position in the formatted string to insert the input string."
    - id: testPosition
      type: System.Int32
      description: "If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the insertion operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the insertion was successful; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.InsertAt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.InvalidIndex
  id: InvalidIndex
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: InvalidIndex
  nameWithType: MaskedTextProvider.InvalidIndex
  fullName: System.ComponentModel.MaskedTextProvider.InvalidIndex
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the upper bound of the range of invalid indexes."
  remarks: "The InvalidIndex property is used to represent a result that is not valid for indexing operations, such as the <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A> method.       When you use the provider or implement your own, you should use this property to decide if an index is invalid, rather than hard-coding knowledge of invalid values."
  syntax:
    content: public static int InvalidIndex { get; }
    return:
      type: System.Int32
      description: "A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1."
  overload: System.ComponentModel.MaskedTextProvider.InvalidIndex*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)
  id: IsAvailablePosition(System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: IsAvailablePosition(Int32)
  nameWithType: MaskedTextProvider.IsAvailablePosition(Int32)
  fullName: System.ComponentModel.MaskedTextProvider.IsAvailablePosition(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether the specified position is available for assignment."
  remarks: "The IsAvailablePosition method returns `true` only if all of the following conditions are true:      -   The `pos` parameter is within the bounds of the formatted string; that is, its value is greater than or equal to zero and less than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string.      -   The specified position is an editable character.      -   A character has not already been assigned to this position."
  syntax:
    content: public bool IsAvailablePosition (int position);
    parameters:
    - id: position
      type: System.Int32
      description: "The zero-based position in the mask to test."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified position in the formatted string is editable and has not been assigned to yet; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.IsAvailablePosition*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)
  id: IsEditPosition(System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: IsEditPosition(Int32)
  nameWithType: MaskedTextProvider.IsEditPosition(Int32)
  fullName: System.ComponentModel.MaskedTextProvider.IsEditPosition(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether the specified position is editable."
  remarks: "The IsEditPosition method returns `true` only if both of the following conditions are true:      -   The `pos` parameter is within the bounds of the formatted string; that is, its value is greater than or equal to zero and less than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string.      -   The specified position is an editable character."
  syntax:
    content: public bool IsEditPosition (int position);
    parameters:
    - id: position
      type: System.Int32
      description: "The zero-based position in the mask to test."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified position in the formatted string is editable; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.IsEditPosition*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.IsPassword
  id: IsPassword
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: IsPassword
  nameWithType: MaskedTextProvider.IsPassword
  fullName: System.ComponentModel.MaskedTextProvider.IsPassword
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets or sets a value that determines whether password protection should be applied to the formatted string."
  remarks: "Password protection can be initiated using one of the following two ways:      -   Setting the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property to a non-`null` value.      -   Setting the IsPassword property to `true`., which also sets the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property to the <xref:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar%2A> value.       IsPassword is used by the <xref:System.ComponentModel.MaskedTextProvider.ToDisplayString%2A> and <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> methods to determine whether to reveal the actual input characters or obscure them with <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A>."
  syntax:
    content: public bool IsPassword { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the input string is to be treated as a password string; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.IsPassword*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)
  id: IsValidInputChar(System.Char)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: IsValidInputChar(Char)
  nameWithType: MaskedTextProvider.IsValidInputChar(Char)
  fullName: System.ComponentModel.MaskedTextProvider.IsValidInputChar(Char)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether the specified character is a valid input character."
  remarks: "Valid input characters include all printable characters, which include letters, digits, punctuation, symbols and the space character."
  syntax:
    content: public static bool IsValidInputChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "The <xref:System.Char> value to test."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified character contains a valid input value; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.IsValidInputChar*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)
  id: IsValidMaskChar(System.Char)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: IsValidMaskChar(Char)
  nameWithType: MaskedTextProvider.IsValidMaskChar(Char)
  fullName: System.ComponentModel.MaskedTextProvider.IsValidMaskChar(Char)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether the specified character is a valid mask character."
  remarks: "Valid mask characters include all printable characters, which include letters, digits, punctuation, symbols and the space character."
  syntax:
    content: public static bool IsValidMaskChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "The <xref:System.Char> value to test."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified character contains a valid mask value; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.IsValidMaskChar*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)
  id: IsValidPasswordChar(System.Char)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: IsValidPasswordChar(Char)
  nameWithType: MaskedTextProvider.IsValidPasswordChar(Char)
  fullName: System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(Char)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determines whether the specified character is a valid password character."
  remarks: "Valid password characters include all printable characters and the null character, which is used to disable password functionality. Printable characters include letters, digits, punctuation, symbols and the space character."
  syntax:
    content: public static bool IsValidPasswordChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "The <xref:System.Char> value to test."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified character contains a valid password value; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.IsValidPasswordChar*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: MaskedTextProvider.Item(Int32)
  fullName: System.ComponentModel.MaskedTextProvider.Item(Int32)
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the element at the specified position in the formatted string."
  remarks: "The Item property is the standard indexer for the <xref:System.ComponentModel.MaskedTextProvider> class."
  syntax:
    content: public char this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "A zero-based index of the element to retrieve."
    return:
      type: System.Char
      description: "The <xref:System.Char> at the specified position in the formatted string."
  overload: System.ComponentModel.MaskedTextProvider.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code>index</code> is less than zero or greater than or equal to the <xref:System.ComponentModel.MaskedTextProvider.Length*> of the mask."
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.LastAssignedPosition
  id: LastAssignedPosition
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: LastAssignedPosition
  nameWithType: MaskedTextProvider.LastAssignedPosition
  fullName: System.ComponentModel.MaskedTextProvider.LastAssignedPosition
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the index in the mask of the rightmost input character that has been assigned to the mask."
  remarks: "The LastAssignedPosition property represents the farthest edit position in the mask, relative to the origin, that has been assigned an input character. For languages read left-to-right (LTR), such as English, this is the rightmost assigned position; for languages read right-to-left (RTL), this would be the leftmost position."
  syntax:
    content: public int LastAssignedPosition { get; }
    return:
      type: System.Int32
      description: "If at least one input character has been assigned to the mask, an <xref:System.Int32> containing the index of rightmost assigned position; otherwise, if no position has been assigned, <xref:System.ComponentModel.MaskedTextProvider.InvalidIndex*>."
  overload: System.ComponentModel.MaskedTextProvider.LastAssignedPosition*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Length
  id: Length
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Length
  nameWithType: MaskedTextProvider.Length
  fullName: System.ComponentModel.MaskedTextProvider.Length
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the length of the mask, absent any mask modifier characters."
  remarks: "The Length property represents the total number of characters in the mask, including both the literal and editable characters. The number of literal characters can be determined by subtracting the value of the <xref:System.ComponentModel.MaskedTextProvider.EditPositionCount%2A> from the Length.       Length also describes the length of the formatted string, including input characters, literals, and prompt characters."
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "An <xref:System.Int32> containing the number of positions in the mask, excluding characters that modify mask input."
  overload: System.ComponentModel.MaskedTextProvider.Length*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Mask
  id: Mask
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Mask
  nameWithType: MaskedTextProvider.Mask
  fullName: System.ComponentModel.MaskedTextProvider.Mask
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets the input mask."
  remarks: "The Mask property is set in the <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> constructor. This mask must contain only valid characters as defined by the masking language."
  syntax:
    content: public string Mask { get; }
    return:
      type: System.String
      description: "A <xref:System.String> containing the full mask."
  overload: System.ComponentModel.MaskedTextProvider.Mask*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.MaskCompleted
  id: MaskCompleted
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: MaskCompleted
  nameWithType: MaskedTextProvider.MaskCompleted
  fullName: System.ComponentModel.MaskedTextProvider.MaskCompleted
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a value indicating whether all required inputs have been entered into the formatted string."
  remarks: "The MaskCompleted property checks only required input elements. To determine whether all required and optional input elements have been entered, use the <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A?displayProperty=fullName> property of the <xref:System.Windows.Forms.MaskedTextBox> class instead.       The current value of the <xref:System.ComponentModel.MaskedTextProvider.Mask%2A> property determines which formatting elements are considered required and which are optional."
  syntax:
    content: public bool MaskCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if all required input has been entered into the mask; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.MaskCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.MaskFull
  id: MaskFull
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: MaskFull
  nameWithType: MaskedTextProvider.MaskFull
  fullName: System.ComponentModel.MaskedTextProvider.MaskFull
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets a value indicating whether all required and optional inputs have been entered into the formatted string."
  remarks: "To verify if only required input elements have been entered, use the <xref:System.ComponentModel.MaskedTextProvider.MaskCompleted%2A> property instead. The current value of the <xref:System.ComponentModel.MaskedTextProvider.Mask%2A> property determines which formatting elements are considered required and which are optional."
  syntax:
    content: public bool MaskFull { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if all required and optional inputs have been entered; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.MaskFull*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.PasswordChar
  id: PasswordChar
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: PasswordChar
  nameWithType: MaskedTextProvider.PasswordChar
  fullName: System.ComponentModel.MaskedTextProvider.PasswordChar
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets or sets the character to be substituted for the actual input characters."
  remarks: "For sensitive user input, it is common practice to conceal the actual information entered by the user during output operations. If the PasswordChar property is set to a non-`null` character, output methods such as <xref:System.ComponentModel.MaskedTextProvider.ToDisplayString%2A> and <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> will obscure the input characters with the specified password character. Setting this property to `null` will disable password protection functionality."
  syntax:
    content: public char PasswordChar { get; set; }
    return:
      type: System.Char
      description: "The <xref:System.Char> value used as the password character."
  overload: System.ComponentModel.MaskedTextProvider.PasswordChar*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The password character specified when setting this property is the same as the current prompt character, <xref:System.ComponentModel.MaskedTextProvider.PromptChar*>. The two are required to be different."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The character specified when setting this property is not a valid password character, as determined by the <xref:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar*> method."
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.PromptChar
  id: PromptChar
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: PromptChar
  nameWithType: MaskedTextProvider.PromptChar
  fullName: System.ComponentModel.MaskedTextProvider.PromptChar
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets or sets the character used to represent the absence of user input for all available edit positions."
  remarks: "The PromptChar property represents the prompt character that is used by the <xref:System.ComponentModel.MaskedTextProvider.ToDisplayString%2A> and <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> methods to represent the current state of the formatted input string. A prompt character is placed in editable positions that have not yet been assigned an input value. Some versions of the <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> method also depend on the value of the <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> property."
  syntax:
    content: public char PromptChar { get; set; }
    return:
      type: System.Char
      description: "The character used to prompt the user for input. The default is an underscore (_)."
  overload: System.ComponentModel.MaskedTextProvider.PromptChar*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The prompt character specified when setting this property is the same as the current password character, <xref:System.ComponentModel.MaskedTextProvider.PasswordChar*>. The two are required to be different."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The character specified when setting this property is not a valid password character, as determined by the <xref:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar*> method."
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Remove
  id: Remove
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Remove()
  nameWithType: MaskedTextProvider.Remove()
  fullName: System.ComponentModel.MaskedTextProvider.Remove()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Removes the last assigned character from the formatted string."
  remarks: "The <xref:System.ComponentModel.MaskedTextProvider.Remove%2A> method has no effect if there are no characters assigned to the mask yet.       When the last assigned character is removed from the formatted string, the editable mask character is reset for that position, allowing subsequent input."
  syntax:
    content: public bool Remove ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was successfully removed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Remove(Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Remove(Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Remove(Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information."
  remarks: "The <xref:System.ComponentModel.MaskedTextProvider.Remove%2A> method has no effect if there are no characters assigned to the mask yet.       When the last assigned character is removed from the formatted string, the editable mask character is reset for that position, allowing subsequent input."
  syntax:
    content: public bool Remove (out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: testPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the character was actually removed. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was successfully removed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: MaskedTextProvider.RemoveAt(Int32)
  fullName: System.ComponentModel.MaskedTextProvider.RemoveAt(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Removes the assigned character at the specified position from the formatted string."
  remarks: "The <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> method has no effect if there are no assigned characters at the removal position specified. Literal characters are not affected by this method.       When a character is removed, the remaining higher-positioned characters in the mask will shift to the left to fill in the gap created by the removal. Vacated positions are reset for input. If movement of the characters is prevented by the mask definition, no removal occurs, and <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> returns `false`.       This method call is exactly equivalent to the following call to the overloaded <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%28System.Int32%2CSystem.Int32%29> version:       `RemoveAt(pos, pos);`"
  syntax:
    content: public bool RemoveAt (int position);
    parameters:
    - id: position
      type: System.Int32
      description: "The zero-based position of the assigned character to remove."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was successfully removed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)
  id: RemoveAt(System.Int32,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: RemoveAt(Int32,Int32)
  nameWithType: MaskedTextProvider.RemoveAt(Int32,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.RemoveAt(Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Removes the assigned characters between the specified positions from the formatted string."
  remarks: "The <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> method has no effect if there are no assigned characters at the removal positions specified.       When a character is removed, the remaining higher-positioned characters in the mask will shift to the left to fill in the gap created by the removal. Vacated positions are reset for input. If movement of the characters is prevented by the mask definition, no removal occurs, and <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> returns `false`."
  syntax:
    content: public bool RemoveAt (int startPosition, int endPosition);
    parameters:
    - id: startPosition
      type: System.Int32
      description: "The zero-based index of the first assigned character to remove."
    - id: endPosition
      type: System.Int32
      description: "The zero-based index of the last assigned character to remove."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was successfully removed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: RemoveAt(Int32,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.RemoveAt(Int32,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.RemoveAt(Int32,Int32,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information."
  remarks: "The <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> method has no effect if there are no assigned characters at the removal positions specified.       When a character is removed, the remaining higher-positioned characters in the mask will shift to the left to fill in the gap created by the removal. Vacated positions are reset for input. If movement of the characters is prevented by the mask definition, no removal occurs, and <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> returns `false`.       This version of <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> provides two additional output parameters to convey more information about the operation of the method."
  syntax:
    content: public bool RemoveAt (int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: startPosition
      type: System.Int32
      description: "The zero-based index of the first assigned character to remove."
    - id: endPosition
      type: System.Int32
      description: "The zero-based index of the last assigned character to remove."
    - id: testPosition
      type: System.Int32
      description: "If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was successfully removed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)
  id: Replace(System.Char,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Replace(Char,Int32)
  nameWithType: MaskedTextProvider.Replace(Char,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(Char,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Replaces a single character at or beyond the specified position with the specified character value."
  remarks: "The Replace method searches for the first editable position in the formatted string at or beyond the specified position, `pos`. If one is found, the value of the editable position is changed to the specified character, `input`. Any of the following conditions will result in an error that causes no replacement to be performed and a value of `false` to be returned:      -   The `pos` parameter is less than zero or greater than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string.      -   An editable character was not found in the formatted string at or beyond the specified position, `pos`.      -   The replacement character, `input`, is not a valid input character because it is not printable or does not match its corresponding mask element."
  syntax:
    content: public bool Replace (char input, int position);
    parameters:
    - id: input
      type: System.Char
      description: "The <xref:System.Char> value that replaces the existing value."
    - id: position
      type: System.Int32
      description: "The zero-based position to search for the first editable character to replace."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was successfully replaced; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Replace*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)
  id: Replace(System.String,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Replace(String,Int32)
  nameWithType: MaskedTextProvider.Replace(String,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Replaces a range of editable characters starting at the specified position with the specified string."
  remarks: "The Replace method searches for the first editable position at or beyond the specified position, `pos`. Operating under the assumption that there are enough editable positions after this point, the existing character values are replaced one-by-one with the contents of the replacement string parameter, `input`.       The following conditions are considered errors. When an error occurs, no replacement occurs and Replace returns `false`.      -   The `pos` parameter is less than zero or greater than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string.      -   There are not enough editable positions in the formatted string to hold the contents of the replacement string.      -   One of the replacement character values is not valid because it is not printable or does not match its corresponding mask element."
  syntax:
    content: public bool Replace (string input, int position);
    parameters:
    - id: input
      type: System.String
      description: "The <xref:System.String> value used to replace the existing editable characters."
    - id: position
      type: System.Int32
      description: "The zero-based position to search for the first editable character to replace."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if all the characters were successfully replaced; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Replace*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Replace(Char,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Replace(Char,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(Char,Int32,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information."
  remarks: "The Replace method searches for the first editable position in the formatted string at or beyond the specified position, `pos`. If one is found, the value of the editable position is changed to the specified character, `input`. Any of the following conditions will result in an error condition that causes no replacement to be performed and a value of `false` to be returned:      -   The `pos` parameter is less than zero or greater than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string.      -   An editable character was not found in the formatted string at or beyond the specified position, `pos`.      -   The replacement character, `input`, is not a valid input character because it is not printable or does not match its corresponding mask element.       In addition to the return value, this method has two output parameters to supply additional information about the replacement operation."
  syntax:
    content: public bool Replace (char input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: input
      type: System.Char
      description: "The <xref:System.Char> value that replaces the existing value."
    - id: position
      type: System.Int32
      description: "The zero-based position to search for the first editable character to replace."
    - id: testPosition
      type: System.Int32
      description: "If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the replacement operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was successfully replaced; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Replace*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Replace(String,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Replace(String,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(String,Int32,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information."
  remarks: "The Replace method searches for the first editable position at or beyond the specified position, `pos`. Operating on the assumption that there are enough editable positions after this point, the existing character values are replaced one-by-one with the contents of the replacement string parameter, `input`.       The following conditions are considered errors. When an error occurs, no replacement occurs and Replace returns `false`.      -   The `pos` parameter is less than zero or greater than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string.      -   There are not enough editable positions in the formatted string to hold the contents of the replacement string.      -   One of the replacement character values is not valid because it is not printable or does not match its corresponding mask element.       In addition to the return value, this method has two output parameters to supply additional information about the replacement operation."
  syntax:
    content: public bool Replace (string input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: input
      type: System.String
      description: "The <xref:System.String> value used to replace the existing editable characters."
    - id: position
      type: System.Int32
      description: "The zero-based position to search for the first editable character to replace."
    - id: testPosition
      type: System.Int32
      description: "If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the replacement operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if all the characters were successfully replaced; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Replace*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Replace(Char,Int32,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Replace(Char,Int32,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(Char,Int32,Int32,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information."
  remarks: "The Replace method searches for the first editable position in the formatted string between the specified starting and ending positions. If one is found, the value of the editable position is changed to the specified character, `input`. Any of the following conditions will result in an error condition that causes no replacement to be performed and a value of `false` to be returned:      -   The `startPos` or `endPos` parameters point before the start of the formatted string or beyond its end.      -   An editable character was not found in the specified interval.      -   The replacement character, `input`, is not a valid input character because it is not printable or does not match its corresponding mask element.       In addition to the return value, this method has two output parameters to supply additional information about the replacement operation."
  syntax:
    content: public bool Replace (char input, int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: input
      type: System.Char
      description: "The <xref:System.Char> value that replaces the existing value."
    - id: startPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the replacement starts."
    - id: endPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the replacement ends."
    - id: testPosition
      type: System.Int32
      description: "If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the replacement operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the character was successfully replaced; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Replace*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Replace(String,Int32,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Replace(String,Int32,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(String,Int32,Int32,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information."
  remarks: "The Replace method searches for the first editable position in the formatted string between the specified starting and ending positions. Operating on the assumption that there are enough editable positions after this point, the existing character values are replaced one-by-one with the contents of the replacement string parameter, `input`.       The following conditions are considered errors. When an error occurs, no replacement occurs and Replace returns `false`.      -   The `startPos` or `endPos` parameters point before the start of the formatted string or beyond its end.      -   There are not enough editable positions in the formatted string to hold the contents of the replacement string.      -   One of the replacement character values is not valid because it is not printable or does not match its corresponding mask element.       In addition to the return value, this method has two output parameters to supply additional information about the replacement operation."
  syntax:
    content: public bool Replace (string input, int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: input
      type: System.String
      description: "The <xref:System.String> value used to replace the existing editable characters."
    - id: startPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the replacement starts."
    - id: endPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the replacement ends."
    - id: testPosition
      type: System.Int32
      description: "If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the replacement operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if all the characters were successfully replaced; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Replace*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.ResetOnPrompt
  id: ResetOnPrompt
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: ResetOnPrompt
  nameWithType: MaskedTextProvider.ResetOnPrompt
  fullName: System.ComponentModel.MaskedTextProvider.ResetOnPrompt
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets or sets a value that determines how an input character that matches the prompt character should be handled."
  remarks: "<xref:System.ComponentModel.MaskedTextProvider> can treat two categories of characters, paces and prompt characters, in a special manner. Normally, each input character will be tested against the mask and either accepted or rejected. Operating on the assumption that the <xref:System.ComponentModel.MaskedTextProvider.PromptChar%2A> property is set to a value other than `null`, then setting the ResetOnPrompt property to `true` will result in special processing for the prompt character. When a prompt character is added, it causes the current mask character position to be cleared and the current position to be advanced to the next editable character.       ResetOnPrompt takes precedence over the <xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A> property as described in the following table.      |ResetOnPrompt|<xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A>|Resulting behavior|   |---------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------|   |`true`|`true`|The prompt character can be added and it causes the current mask position to be reset. The default.|   |`true`|`false`|The prompt character can be added and it causes the current mask position to be reset.|   |`false`|`true`|The prompt character is processed as a normal input character.|   |`false`|`false`|The prompt character is not valid and methods attempting to add the character will fail.|"
  syntax:
    content: public bool ResetOnPrompt { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to indicate that the prompt character is to be processed as a normal input character. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.ResetOnPrompt*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.ResetOnSpace
  id: ResetOnSpace
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: ResetOnSpace
  nameWithType: MaskedTextProvider.ResetOnSpace
  fullName: System.ComponentModel.MaskedTextProvider.ResetOnSpace
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets or sets a value that determines how a space input character should be handled."
  remarks: "<xref:System.ComponentModel.MaskedTextProvider> can treat two categories of characters, spaces and prompt characters, in a special manner. Normally, each input character will be tested against the mask and either accepted or rejected. Setting the ResetOnSpace property to `true` will result in the current mask character position being cleared and the current position being advanced to the next editable character.       ResetOnSpace is useful when assigning text that was saved excluding the prompt, where the prompt is replaced with a space. Before restoring such a string, setting ResetOnSpace to `true` will reset the prompt characters at the positions occupied by spaces in the input string."
  syntax:
    content: public bool ResetOnSpace { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the space input character causes the current editable position in the mask to be reset; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to indicate that it is to be processed as a normal input character. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.ResetOnSpace*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Set(System.String)
  id: Set(System.String)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Set(String)
  nameWithType: MaskedTextProvider.Set(String)
  fullName: System.ComponentModel.MaskedTextProvider.Set(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Sets the formatted string to the specified input string."
  remarks: "The <xref:System.ComponentModel.MaskedTextProvider.Set%2A> method clears the existing contents of the formatted string and then applies the mask against the `input` string to update the contents of the formatted string.       The following conditions are considered errors. When an error occurs, the formatted string remains unaltered and <xref:System.ComponentModel.MaskedTextProvider.Set%2A> returns `false`.      -   There are not enough editable positions in the formatted string to hold the contents of the replacement string.      -   One of the replacement character values is not valid because it is not printable or does not match its corresponding mask element."
  syntax:
    content: public bool Set (string input);
    parameters:
    - id: input
      type: System.String
      description: "The <xref:System.String> value used to set the formatted string."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if all the characters were successfully set; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Set*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The<code> input</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: Set(String,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Set(String,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Set(String,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information."
  remarks: "The <xref:System.ComponentModel.MaskedTextProvider.Set%2A> method clears the existing contents of the formatted string and then applies the mask against the `input` string to update the contents of the formatted string.       The following conditions are considered errors. When an error occurs, the formatted string remains unaltered and <xref:System.ComponentModel.MaskedTextProvider.Set%2A> returns `false`.      -   There are not enough editable positions in the formatted string to hold the contents of the replacement string.      -   One of the replacement character values is not valid because it is not printable or does not match its corresponding mask element.       This version of <xref:System.ComponentModel.MaskedTextProvider.Set%2A> provides two additional output parameters to convey more information about the operation of the method."
  syntax:
    content: public bool Set (string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: input
      type: System.String
      description: "The <xref:System.String> value used to set the formatted string."
    - id: testPosition
      type: System.Int32
      description: "If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the set operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if all the characters were successfully set; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.Set*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The<code> input</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.SkipLiterals
  id: SkipLiterals
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: SkipLiterals
  nameWithType: MaskedTextProvider.SkipLiterals
  fullName: System.ComponentModel.MaskedTextProvider.SkipLiterals
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values."
  remarks: "Input masks can contain literal and editable characters. If an attempt is made to add an input character to the position in a mask occupied by a literal, the value of the <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> property determines the result.      -   If this property is `true`, it is valid to overwrite a literal with the same value when adding input characters. For example, a forward slash character value, `&quot;/&quot;`, could be added to the third position of the mask `&quot;00/00/000&quot;`.      -   If this property is `false`, it is not valid to assign any value to a mask position occupied by a literal character."
  syntax:
    content: public bool SkipLiterals { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to allow literals to be added back; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to not allow the user to overwrite literal characters. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.SkipLiterals*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.ToDisplayString
  id: ToDisplayString
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: ToDisplayString()
  nameWithType: MaskedTextProvider.ToDisplayString()
  fullName: System.ComponentModel.MaskedTextProvider.ToDisplayString()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the formatted string in a displayable form."
  remarks: "The ToDisplayString method will always include prompt and literal characters in the return value, regardless of the value of the <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> or <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> properties. This method will always display password characters if the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property is set to a character value other than `null`.       ToDisplayString is commonly used to obtain the string to display in associated user interface elements, such as <xref:System.Windows.Forms.MaskedTextBox>."
  syntax:
    content: public string ToDisplayString ();
    parameters: []
    return:
      type: System.String
      description: "The formatted <xref:System.String> that includes prompts and mask literals."
  overload: System.ComponentModel.MaskedTextProvider.ToDisplayString*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.ToString
  id: ToString
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: ToString()
  nameWithType: MaskedTextProvider.ToString()
  fullName: System.ComponentModel.MaskedTextProvider.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the formatted string that includes all the assigned character values."
  remarks: "This version of the overloaded <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> method includes prompts and literals according to the current values of the <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> and <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> properties, respectively. It will always return the original input characters, ignoring the value of the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property.      > [!IMPORTANT] >  Because this method reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "The formatted <xref:System.String> that includes all the assigned character values."
  overload: System.ComponentModel.MaskedTextProvider.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)
  id: ToString(System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: ToString(Boolean)
  nameWithType: MaskedTextProvider.ToString(Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the formatted string, optionally including password characters."
  remarks: "This version of the overloaded <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> method includes prompts and literals according to the current values of the <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> and <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> properties, respectively. If the `ignorePasswordChar` parameter is `true`, it will return the original input characters, ignoring the value of the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property. If this parameter is `false`, it will use the password character to obscure editable user input if the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property is set to a value other than `null`.      > [!IMPORTANT] >  Because this method potentially reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data."
  syntax:
    content: public string ToString (bool ignorePasswordChar);
    parameters:
    - id: ignorePasswordChar
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to return the actual editable characters; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to indicate that the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar*> property is to be honored."
    return:
      type: System.String
      description: "The formatted <xref:System.String> that includes literals, prompts, and optionally password characters."
  overload: System.ComponentModel.MaskedTextProvider.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)
  id: ToString(System.Boolean,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: ToString(Boolean,Boolean)
  nameWithType: MaskedTextProvider.ToString(Boolean,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Boolean,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns the formatted string, optionally including prompt and literal characters."
  remarks: "This version of the overloaded <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> method includes prompts and literals according to the values of the `IncludePrompt` and `IncludeLiterals` parameters, respectively. Notice that these parameters override the values of the <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A><xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> properties. This method will always return the original input characters, ignoring the value of the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property.      > [!IMPORTANT] >  Because this method reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data."
  syntax:
    content: public string ToString (bool includePrompt, bool includeLiterals);
    parameters:
    - id: includePrompt
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include prompt characters in the return string; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: includeLiterals
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include literal characters in the return string; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    return:
      type: System.String
      description: "The formatted <xref:System.String> that includes all the assigned character values and optionally includes literals and prompts."
  overload: System.ComponentModel.MaskedTextProvider.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)
  id: ToString(System.Int32,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: ToString(Int32,Int32)
  nameWithType: MaskedTextProvider.ToString(Int32,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns a substring of the formatted string."
  remarks: "This version of the overloaded <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> method returns a substring of the formatted string, starting at the position `startPos` and including the subsequent number of characters specified by the `length` parameter. The returned string includes prompts and literals according to the current values of the <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> and <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> properties, respectively. The return string will contain the original input characters; the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property is always ignored.      > [!IMPORTANT] >  Because this method reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data.       ToString performs the following actions when there are discrepancies in the input parameters:      -   If `startPos` is less than zero, the starting position is set to zero.      -   If `startPos` is greater than or equal to the actual <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string, the <xref:System.String.Empty> string is returned.      -   If `length` is greater than the remaining number of characters past the starting position, only the remaining characters are returned.      -   If `length` is less than or equal to zero, the <xref:System.String.Empty> string is returned."
  syntax:
    content: public string ToString (int startPosition, int length);
    parameters:
    - id: startPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the output begins."
    - id: length
      type: System.Int32
      description: "The number of characters to return."
    return:
      type: System.String
      description: "If successful, a substring of the formatted <xref:System.String>, which includes all the assigned character values; otherwise the <xref:System.String> string."
  overload: System.ComponentModel.MaskedTextProvider.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)
  id: ToString(System.Boolean,System.Int32,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: ToString(Boolean,Int32,Int32)
  nameWithType: MaskedTextProvider.ToString(Boolean,Int32,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns a substring of the formatted string, optionally including password characters."
  remarks: "This version of the overloaded <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> method returns a substring of the formatted string, starting at the position `startPos` and including the subsequent number of characters specified by the `length` parameter. The returned string includes prompts and literals according to the current values of the <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> and <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> properties, respectively. If the `ignorePasswordChar` parameter is `true`, it will return the original input characters, ignoring the value of the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property. If this parameter is `false`, it will use the password character to obscure editable user input if the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property is set to a value other than `null`.      > [!IMPORTANT] >  Because this method potentially reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data.       <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> performs the following actions when there are discrepancies in the input parameters:      -   If `startPos` is less than zero, the starting position is set to zero.      -   If `startPos` is greater than or equal to the actual <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string, the <xref:System.String.Empty> string is returned.      -   If `length` is greater than the remaining number of characters past the starting position, only the remaining characters are returned.      -   If `length` is less than or equal to zero, the <xref:System.String.Empty> string is returned."
  syntax:
    content: public string ToString (bool ignorePasswordChar, int startPosition, int length);
    parameters:
    - id: ignorePasswordChar
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to return the actual editable characters; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to indicate that the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar*> property is to be honored."
    - id: startPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the output begins."
    - id: length
      type: System.Int32
      description: "The number of characters to return."
    return:
      type: System.String
      description: "If successful, a substring of the formatted <xref:System.String>, which includes literals, prompts, and optionally password characters; otherwise the <xref:System.String> string."
  overload: System.ComponentModel.MaskedTextProvider.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)
  id: ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: ToString(Boolean,Boolean,Int32,Int32)
  nameWithType: MaskedTextProvider.ToString(Boolean,Boolean,Int32,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Boolean,Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns a substring of the formatted string, optionally including prompt and literal characters."
  remarks: "This version of the overloaded <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> method returns a substring of the formatted string, starting at the position `startPos` and including the subsequent number of characters specified by the `length` parameter. The return string includes prompts and literals according to the values of the `IncludePrompt` and `IncludeLiterals` parameters, respectively. Notice that these parameters override the values of the <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A><xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> properties. This method will always return the original input characters, ignoring the value of the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property.      > [!IMPORTANT] >  Because this method reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data.       <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> performs the following actions when there are discrepancies in the input parameters:      -   If `startPos` is less than zero, the starting position is set to zero.      -   If `startPos` is greater than or equal to the actual <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string, the <xref:System.String.Empty> string is returned.      -   If `length` is greater than the remaining number of characters past the starting position, only the remaining characters are returned.      -   If `length` is less than or equal to zero, the <xref:System.String.Empty> string is returned."
  syntax:
    content: public string ToString (bool includePrompt, bool includeLiterals, int startPosition, int length);
    parameters:
    - id: includePrompt
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include prompt characters in the return string; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: includeLiterals
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include literal characters in the return string; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: startPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the output begins."
    - id: length
      type: System.Int32
      description: "The number of characters to return."
    return:
      type: System.String
      description: "If successful, a substring of the formatted <xref:System.String>, which includes all the assigned character values and optionally includes literals and prompts; otherwise the <xref:System.String> string."
  overload: System.ComponentModel.MaskedTextProvider.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
  id: ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: ToString(Boolean,Boolean,Boolean,Int32,Int32)
  nameWithType: MaskedTextProvider.ToString(Boolean,Boolean,Boolean,Int32,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Boolean,Boolean,Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Returns a substring of the formatted string, optionally including prompt, literal, and password characters."
  remarks: "This version of the overloaded <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> method returns a substring of the formatted string, starting at the position `startPos` and including the subsequent number of characters specified by the `length` parameter. The return string includes prompts and literals according to the values of the `IncludePrompt` and `IncludeLiterals` parameters, respectively. Notice that these parameters override the values of the <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> and  <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> properties. If the `ignorePasswordChar` parameter is `true`, it will return the original input characters, ignoring the value of the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property. If this parameter is `false`, it will use the password character to obscure editable user input if the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> property is set to a value other than `null`.      > [!IMPORTANT] >  Because this method potentially reveals information that is usually protected in the user interface by password characters, it should be used with extreme caution to avoid accidentally revealing sensitive user data.       <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> performs the following actions when there are discrepancies in the input parameters:      -   If `startPos` is less than zero, the starting position is set to zero.      -   If `startPos` is greater than or equal to the actual <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the formatted string, the <xref:System.String.Empty> string is returned.      -   If `length` is greater than the remaining number of characters past the starting position, only the remaining characters are returned.      -   If `length` is less than or equal to zero, the <xref:System.String.Empty> string is returned."
  syntax:
    content: public string ToString (bool ignorePasswordChar, bool includePrompt, bool includeLiterals, int startPosition, int length);
    parameters:
    - id: ignorePasswordChar
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to return the actual editable characters; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to indicate that the <xref:System.ComponentModel.MaskedTextProvider.PasswordChar*> property is to be honored."
    - id: includePrompt
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to include prompt characters in the return string; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: includeLiterals
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to return literal characters in the return string; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
    - id: startPosition
      type: System.Int32
      description: "The zero-based position in the formatted string where the output begins."
    - id: length
      type: System.Int32
      description: "The number of characters to return."
    return:
      type: System.String
      description: "If successful, a substring of the formatted <xref:System.String>, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the <xref:System.String> string."
  overload: System.ComponentModel.MaskedTextProvider.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)
  id: VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: VerifyChar(Char,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.VerifyChar(Char,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.VerifyChar(Char,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Tests whether the specified character could be set successfully at the specified position."
  remarks: "The VerifyChar method tests whether a single character value represents valid input at the specified position in the formatted string. This method will return `false` for the following reasons:      -   The `pos` parameter is less than zero or greater than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the <xref:System.ComponentModel.MaskedTextProvider.Mask%2A>.      -   The character `input` is not a valid input character, as determined by the <xref:System.ComponentModel.MaskedTextProvider.IsValidInputChar%2A> method.      -   The `input` is not compatible with the mask element at the specified position, `pos`.       The last condition may depend on the current value of the <xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A>, <xref:System.ComponentModel.MaskedTextProvider.AsciiOnly%2A>, <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A>, <xref:System.ComponentModel.MaskedTextProvider.PromptChar%2A> and <xref:System.ComponentModel.MaskedTextProvider.SkipLiterals%2A> properties.       To test an entire input string against the mask, use one of the <xref:System.ComponentModel.MaskedTextProvider.VerifyString%2A> methods instead."
  syntax:
    content: public bool VerifyChar (char input, int position, out System.ComponentModel.MaskedTextResultHint hint);
    parameters:
    - id: input
      type: System.Char
      description: "The <xref:System.Char> value to test."
    - id: position
      type: System.Int32
      description: "The position in the mask to test the input character against."
    - id: hint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified character is valid for the specified position; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.VerifyChar*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)
  id: VerifyEscapeChar(System.Char,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: VerifyEscapeChar(Char,Int32)
  nameWithType: MaskedTextProvider.VerifyEscapeChar(Char,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(Char,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Tests whether the specified character would be escaped at the specified position."
  remarks: "A character is said to be *escaped* if it is valid input, but is not assigned to that position in the formatted string. Escaped characters fall into the following three categories:      -   Prompt characters are escaped if the <xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A> property is `true`.      -   Input characters are escaped if they have the same value as the literal in the mask, and if the <xref:System.ComponentModel.MaskedTextProvider.SkipLiterals%2A> property is `true`.      -   Space characters are escaped if the <xref:System.ComponentModel.MaskedTextProvider.ResetOnSpace%2A> property is `true`.       The VerifyEscapeChar method will also return `false` if the `pos` parameter is less than zero or greater than the <xref:System.ComponentModel.MaskedTextProvider.Length%2A> of the <xref:System.ComponentModel.MaskedTextProvider.Mask%2A>."
  syntax:
    content: public bool VerifyEscapeChar (char input, int position);
    parameters:
    - id: input
      type: System.Char
      description: "The <xref:System.Char> value to test."
    - id: position
      type: System.Int32
      description: "The position in the mask to test the input character against."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified character would be escaped at the specified position; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.VerifyEscapeChar*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.VerifyString(System.String)
  id: VerifyString(System.String)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: VerifyString(String)
  nameWithType: MaskedTextProvider.VerifyString(String)
  fullName: System.ComponentModel.MaskedTextProvider.VerifyString(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Tests whether the specified string could be set successfully."
  remarks: "The <xref:System.ComponentModel.MaskedTextProvider.VerifyString%2A> applies the `input` string against the mask, without actually changing the formatted string, to test whether `input` would be valid in a corresponding <xref:System.ComponentModel.MaskedTextProvider.Set%2A> operation. This method also returns `true` if input is `null` or has zero length."
  syntax:
    content: public bool VerifyString (string input);
    parameters:
    - id: input
      type: System.String
      description: "The <xref:System.String> value to test."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified string represents valid input; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.VerifyString*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  id: VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  langs:
  - csharp
  name: VerifyString(String,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.VerifyString(String,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.VerifyString(String,Int32,MaskedTextResultHint)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Tests whether the specified string could be set successfully, and then outputs position and descriptive information."
  remarks: "The <xref:System.ComponentModel.MaskedTextProvider.VerifyString%2A> applies the `input` string against the mask, without actually changing the formatted string, to test whether `input` would be valid in a corresponding <xref:System.ComponentModel.MaskedTextProvider.Set%2A> operation. This method also returns `true` if input is `null` or has zero length.       This version of <xref:System.ComponentModel.MaskedTextProvider.VerifyString%2A> provides two additional output parameters to convey more information about the operation of the method."
  syntax:
    content: public bool VerifyString (string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);
    parameters:
    - id: input
      type: System.String
      description: "The <xref:System.String> value to test."
    - id: testPosition
      type: System.Int32
      description: "If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter."
    - id: resultHint
      type: System.ComponentModel.MaskedTextResultHint
      description: "A <xref href=&quot;System.ComponentModel.MaskedTextResultHint&quot;></xref> that succinctly describes the result of the test operation. An output parameter."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified string represents valid input; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.ComponentModel.MaskedTextProvider.VerifyString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskedTextProvider(String)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskedTextProvider(String,Boolean)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskedTextProvider(String,CultureInfo)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,CultureInfo)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskedTextProvider(String,Char,Boolean)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,Char,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,Char,Boolean)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskedTextProvider(String,CultureInfo,Boolean)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskedTextProvider(String,CultureInfo,Char,Boolean)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Char,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Char,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskedTextProvider(String,CultureInfo,Boolean,Char,Char,Boolean)
  nameWithType: MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Boolean,Char,Char,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.MaskedTextProvider(String,CultureInfo,Boolean,Char,Char,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.Add(System.Char)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Add(Char)
  nameWithType: MaskedTextProvider.Add(Char)
  fullName: System.ComponentModel.MaskedTextProvider.Add(Char)
- uid: System.ComponentModel.MaskedTextProvider.Add(System.String)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Add(String)
  nameWithType: MaskedTextProvider.Add(String)
  fullName: System.ComponentModel.MaskedTextProvider.Add(String)
- uid: System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Add(Char,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Add(Char,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Add(Char,Int32,MaskedTextResultHint)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.MaskedTextResultHint
  parent: System.ComponentModel
  isExternal: false
  name: MaskedTextResultHint
  nameWithType: MaskedTextResultHint
  fullName: System.ComponentModel.MaskedTextResultHint
- uid: System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Add(String,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Add(String,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Add(String,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.AllowPromptAsInput
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: AllowPromptAsInput
  nameWithType: MaskedTextProvider.AllowPromptAsInput
  fullName: System.ComponentModel.MaskedTextProvider.AllowPromptAsInput
- uid: System.ComponentModel.MaskedTextProvider.AsciiOnly
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: AsciiOnly
  nameWithType: MaskedTextProvider.AsciiOnly
  fullName: System.ComponentModel.MaskedTextProvider.AsciiOnly
- uid: System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: AssignedEditPositionCount
  nameWithType: MaskedTextProvider.AssignedEditPositionCount
  fullName: System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount
- uid: System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: AvailableEditPositionCount
  nameWithType: MaskedTextProvider.AvailableEditPositionCount
  fullName: System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount
- uid: System.ComponentModel.MaskedTextProvider.Clear
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Clear()
  nameWithType: MaskedTextProvider.Clear()
  fullName: System.ComponentModel.MaskedTextProvider.Clear()
- uid: System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Clear(MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Clear(MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Clear(MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.Clone
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Clone()
  nameWithType: MaskedTextProvider.Clone()
  fullName: System.ComponentModel.MaskedTextProvider.Clone()
- uid: System.ComponentModel.MaskedTextProvider.Culture
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Culture
  nameWithType: MaskedTextProvider.Culture
  fullName: System.ComponentModel.MaskedTextProvider.Culture
- uid: System.ComponentModel.MaskedTextProvider.DefaultPasswordChar
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: DefaultPasswordChar
  nameWithType: MaskedTextProvider.DefaultPasswordChar
  fullName: System.ComponentModel.MaskedTextProvider.DefaultPasswordChar
- uid: System.ComponentModel.MaskedTextProvider.EditPositionCount
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: EditPositionCount
  nameWithType: MaskedTextProvider.EditPositionCount
  fullName: System.ComponentModel.MaskedTextProvider.EditPositionCount
- uid: System.ComponentModel.MaskedTextProvider.EditPositions
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: EditPositions
  nameWithType: MaskedTextProvider.EditPositions
  fullName: System.ComponentModel.MaskedTextProvider.EditPositions
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindAssignedEditPositionFrom(Int32,Boolean)
  nameWithType: MaskedTextProvider.FindAssignedEditPositionFrom(Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(Int32,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindAssignedEditPositionInRange(Int32,Int32,Boolean)
  nameWithType: MaskedTextProvider.FindAssignedEditPositionInRange(Int32,Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(Int32,Int32,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindEditPositionFrom(Int32,Boolean)
  nameWithType: MaskedTextProvider.FindEditPositionFrom(Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(Int32,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindEditPositionInRange(Int32,Int32,Boolean)
  nameWithType: MaskedTextProvider.FindEditPositionInRange(Int32,Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(Int32,Int32,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindNonEditPositionFrom(Int32,Boolean)
  nameWithType: MaskedTextProvider.FindNonEditPositionFrom(Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(Int32,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindNonEditPositionInRange(Int32,Int32,Boolean)
  nameWithType: MaskedTextProvider.FindNonEditPositionInRange(Int32,Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(Int32,Int32,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindUnassignedEditPositionFrom(Int32,Boolean)
  nameWithType: MaskedTextProvider.FindUnassignedEditPositionFrom(Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(Int32,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindUnassignedEditPositionInRange(Int32,Int32,Boolean)
  nameWithType: MaskedTextProvider.FindUnassignedEditPositionInRange(Int32,Int32,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(Int32,Int32,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: GetOperationResultFromHint(MaskedTextResultHint)
  nameWithType: MaskedTextProvider.GetOperationResultFromHint(MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.IncludeLiterals
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IncludeLiterals
  nameWithType: MaskedTextProvider.IncludeLiterals
  fullName: System.ComponentModel.MaskedTextProvider.IncludeLiterals
- uid: System.ComponentModel.MaskedTextProvider.IncludePrompt
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IncludePrompt
  nameWithType: MaskedTextProvider.IncludePrompt
  fullName: System.ComponentModel.MaskedTextProvider.IncludePrompt
- uid: System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: InsertAt(Char,Int32)
  nameWithType: MaskedTextProvider.InsertAt(Char,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.InsertAt(Char,Int32)
- uid: System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: InsertAt(String,Int32)
  nameWithType: MaskedTextProvider.InsertAt(String,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.InsertAt(String,Int32)
- uid: System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: InsertAt(Char,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.InsertAt(Char,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.InsertAt(Char,Int32,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: InsertAt(String,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.InsertAt(String,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.InsertAt(String,Int32,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.InvalidIndex
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: InvalidIndex
  nameWithType: MaskedTextProvider.InvalidIndex
  fullName: System.ComponentModel.MaskedTextProvider.InvalidIndex
- uid: System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsAvailablePosition(Int32)
  nameWithType: MaskedTextProvider.IsAvailablePosition(Int32)
  fullName: System.ComponentModel.MaskedTextProvider.IsAvailablePosition(Int32)
- uid: System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsEditPosition(Int32)
  nameWithType: MaskedTextProvider.IsEditPosition(Int32)
  fullName: System.ComponentModel.MaskedTextProvider.IsEditPosition(Int32)
- uid: System.ComponentModel.MaskedTextProvider.IsPassword
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsPassword
  nameWithType: MaskedTextProvider.IsPassword
  fullName: System.ComponentModel.MaskedTextProvider.IsPassword
- uid: System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsValidInputChar(Char)
  nameWithType: MaskedTextProvider.IsValidInputChar(Char)
  fullName: System.ComponentModel.MaskedTextProvider.IsValidInputChar(Char)
- uid: System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsValidMaskChar(Char)
  nameWithType: MaskedTextProvider.IsValidMaskChar(Char)
  fullName: System.ComponentModel.MaskedTextProvider.IsValidMaskChar(Char)
- uid: System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsValidPasswordChar(Char)
  nameWithType: MaskedTextProvider.IsValidPasswordChar(Char)
  fullName: System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(Char)
- uid: System.ComponentModel.MaskedTextProvider.Item(System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Item(Int32)
  nameWithType: MaskedTextProvider.Item(Int32)
  fullName: System.ComponentModel.MaskedTextProvider.Item(Int32)
- uid: System.ComponentModel.MaskedTextProvider.LastAssignedPosition
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: LastAssignedPosition
  nameWithType: MaskedTextProvider.LastAssignedPosition
  fullName: System.ComponentModel.MaskedTextProvider.LastAssignedPosition
- uid: System.ComponentModel.MaskedTextProvider.Length
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Length
  nameWithType: MaskedTextProvider.Length
  fullName: System.ComponentModel.MaskedTextProvider.Length
- uid: System.ComponentModel.MaskedTextProvider.Mask
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Mask
  nameWithType: MaskedTextProvider.Mask
  fullName: System.ComponentModel.MaskedTextProvider.Mask
- uid: System.ComponentModel.MaskedTextProvider.MaskCompleted
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskCompleted
  nameWithType: MaskedTextProvider.MaskCompleted
  fullName: System.ComponentModel.MaskedTextProvider.MaskCompleted
- uid: System.ComponentModel.MaskedTextProvider.MaskFull
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskFull
  nameWithType: MaskedTextProvider.MaskFull
  fullName: System.ComponentModel.MaskedTextProvider.MaskFull
- uid: System.ComponentModel.MaskedTextProvider.PasswordChar
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: PasswordChar
  nameWithType: MaskedTextProvider.PasswordChar
  fullName: System.ComponentModel.MaskedTextProvider.PasswordChar
- uid: System.ComponentModel.MaskedTextProvider.PromptChar
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: PromptChar
  nameWithType: MaskedTextProvider.PromptChar
  fullName: System.ComponentModel.MaskedTextProvider.PromptChar
- uid: System.ComponentModel.MaskedTextProvider.Remove
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Remove()
  nameWithType: MaskedTextProvider.Remove()
  fullName: System.ComponentModel.MaskedTextProvider.Remove()
- uid: System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Remove(Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Remove(Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Remove(Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: MaskedTextProvider.RemoveAt(Int32)
  fullName: System.ComponentModel.MaskedTextProvider.RemoveAt(Int32)
- uid: System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: RemoveAt(Int32,Int32)
  nameWithType: MaskedTextProvider.RemoveAt(Int32,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.RemoveAt(Int32,Int32)
- uid: System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: RemoveAt(Int32,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.RemoveAt(Int32,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.RemoveAt(Int32,Int32,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Replace(Char,Int32)
  nameWithType: MaskedTextProvider.Replace(Char,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(Char,Int32)
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Replace(String,Int32)
  nameWithType: MaskedTextProvider.Replace(String,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(String,Int32)
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Replace(Char,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Replace(Char,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(Char,Int32,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Replace(String,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Replace(String,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(String,Int32,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Replace(Char,Int32,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Replace(Char,Int32,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(Char,Int32,Int32,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Replace(String,Int32,Int32,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Replace(String,Int32,Int32,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Replace(String,Int32,Int32,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.ResetOnPrompt
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ResetOnPrompt
  nameWithType: MaskedTextProvider.ResetOnPrompt
  fullName: System.ComponentModel.MaskedTextProvider.ResetOnPrompt
- uid: System.ComponentModel.MaskedTextProvider.ResetOnSpace
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ResetOnSpace
  nameWithType: MaskedTextProvider.ResetOnSpace
  fullName: System.ComponentModel.MaskedTextProvider.ResetOnSpace
- uid: System.ComponentModel.MaskedTextProvider.Set(System.String)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Set(String)
  nameWithType: MaskedTextProvider.Set(String)
  fullName: System.ComponentModel.MaskedTextProvider.Set(String)
- uid: System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Set(String,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.Set(String,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.Set(String,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.SkipLiterals
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: SkipLiterals
  nameWithType: MaskedTextProvider.SkipLiterals
  fullName: System.ComponentModel.MaskedTextProvider.SkipLiterals
- uid: System.ComponentModel.MaskedTextProvider.ToDisplayString
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ToDisplayString()
  nameWithType: MaskedTextProvider.ToDisplayString()
  fullName: System.ComponentModel.MaskedTextProvider.ToDisplayString()
- uid: System.ComponentModel.MaskedTextProvider.ToString
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ToString()
  nameWithType: MaskedTextProvider.ToString()
  fullName: System.ComponentModel.MaskedTextProvider.ToString()
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ToString(Boolean)
  nameWithType: MaskedTextProvider.ToString(Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Boolean)
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ToString(Boolean,Boolean)
  nameWithType: MaskedTextProvider.ToString(Boolean,Boolean)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Boolean,Boolean)
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ToString(Int32,Int32)
  nameWithType: MaskedTextProvider.ToString(Int32,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Int32,Int32)
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ToString(Boolean,Int32,Int32)
  nameWithType: MaskedTextProvider.ToString(Boolean,Int32,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Boolean,Int32,Int32)
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ToString(Boolean,Boolean,Int32,Int32)
  nameWithType: MaskedTextProvider.ToString(Boolean,Boolean,Int32,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Boolean,Boolean,Int32,Int32)
- uid: System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ToString(Boolean,Boolean,Boolean,Int32,Int32)
  nameWithType: MaskedTextProvider.ToString(Boolean,Boolean,Boolean,Int32,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.ToString(Boolean,Boolean,Boolean,Int32,Int32)
- uid: System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: VerifyChar(Char,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.VerifyChar(Char,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.VerifyChar(Char,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: VerifyEscapeChar(Char,Int32)
  nameWithType: MaskedTextProvider.VerifyEscapeChar(Char,Int32)
  fullName: System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(Char,Int32)
- uid: System.ComponentModel.MaskedTextProvider.VerifyString(System.String)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: VerifyString(String)
  nameWithType: MaskedTextProvider.VerifyString(String)
  fullName: System.ComponentModel.MaskedTextProvider.VerifyString(String)
- uid: System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: VerifyString(String,Int32,MaskedTextResultHint)
  nameWithType: MaskedTextProvider.VerifyString(String,Int32,MaskedTextResultHint)
  fullName: System.ComponentModel.MaskedTextProvider.VerifyString(String,Int32,MaskedTextResultHint)
- uid: System.ComponentModel.MaskedTextProvider.#ctor*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskedTextProvider
  nameWithType: MaskedTextProvider.MaskedTextProvider
- uid: System.ComponentModel.MaskedTextProvider.Add*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Add
  nameWithType: MaskedTextProvider.Add
- uid: System.ComponentModel.MaskedTextProvider.AllowPromptAsInput*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: AllowPromptAsInput
  nameWithType: MaskedTextProvider.AllowPromptAsInput
- uid: System.ComponentModel.MaskedTextProvider.AsciiOnly*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: AsciiOnly
  nameWithType: MaskedTextProvider.AsciiOnly
- uid: System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: AssignedEditPositionCount
  nameWithType: MaskedTextProvider.AssignedEditPositionCount
- uid: System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: AvailableEditPositionCount
  nameWithType: MaskedTextProvider.AvailableEditPositionCount
- uid: System.ComponentModel.MaskedTextProvider.Clear*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Clear
  nameWithType: MaskedTextProvider.Clear
- uid: System.ComponentModel.MaskedTextProvider.Clone*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Clone
  nameWithType: MaskedTextProvider.Clone
- uid: System.ComponentModel.MaskedTextProvider.Culture*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Culture
  nameWithType: MaskedTextProvider.Culture
- uid: System.ComponentModel.MaskedTextProvider.DefaultPasswordChar*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: DefaultPasswordChar
  nameWithType: MaskedTextProvider.DefaultPasswordChar
- uid: System.ComponentModel.MaskedTextProvider.EditPositionCount*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: EditPositionCount
  nameWithType: MaskedTextProvider.EditPositionCount
- uid: System.ComponentModel.MaskedTextProvider.EditPositions*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: EditPositions
  nameWithType: MaskedTextProvider.EditPositions
- uid: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindAssignedEditPositionFrom
  nameWithType: MaskedTextProvider.FindAssignedEditPositionFrom
- uid: System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindAssignedEditPositionInRange
  nameWithType: MaskedTextProvider.FindAssignedEditPositionInRange
- uid: System.ComponentModel.MaskedTextProvider.FindEditPositionFrom*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindEditPositionFrom
  nameWithType: MaskedTextProvider.FindEditPositionFrom
- uid: System.ComponentModel.MaskedTextProvider.FindEditPositionInRange*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindEditPositionInRange
  nameWithType: MaskedTextProvider.FindEditPositionInRange
- uid: System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindNonEditPositionFrom
  nameWithType: MaskedTextProvider.FindNonEditPositionFrom
- uid: System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindNonEditPositionInRange
  nameWithType: MaskedTextProvider.FindNonEditPositionInRange
- uid: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindUnassignedEditPositionFrom
  nameWithType: MaskedTextProvider.FindUnassignedEditPositionFrom
- uid: System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: FindUnassignedEditPositionInRange
  nameWithType: MaskedTextProvider.FindUnassignedEditPositionInRange
- uid: System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: GetOperationResultFromHint
  nameWithType: MaskedTextProvider.GetOperationResultFromHint
- uid: System.ComponentModel.MaskedTextProvider.IncludeLiterals*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IncludeLiterals
  nameWithType: MaskedTextProvider.IncludeLiterals
- uid: System.ComponentModel.MaskedTextProvider.IncludePrompt*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IncludePrompt
  nameWithType: MaskedTextProvider.IncludePrompt
- uid: System.ComponentModel.MaskedTextProvider.InsertAt*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: InsertAt
  nameWithType: MaskedTextProvider.InsertAt
- uid: System.ComponentModel.MaskedTextProvider.InvalidIndex*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: InvalidIndex
  nameWithType: MaskedTextProvider.InvalidIndex
- uid: System.ComponentModel.MaskedTextProvider.IsAvailablePosition*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsAvailablePosition
  nameWithType: MaskedTextProvider.IsAvailablePosition
- uid: System.ComponentModel.MaskedTextProvider.IsEditPosition*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsEditPosition
  nameWithType: MaskedTextProvider.IsEditPosition
- uid: System.ComponentModel.MaskedTextProvider.IsPassword*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsPassword
  nameWithType: MaskedTextProvider.IsPassword
- uid: System.ComponentModel.MaskedTextProvider.IsValidInputChar*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsValidInputChar
  nameWithType: MaskedTextProvider.IsValidInputChar
- uid: System.ComponentModel.MaskedTextProvider.IsValidMaskChar*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsValidMaskChar
  nameWithType: MaskedTextProvider.IsValidMaskChar
- uid: System.ComponentModel.MaskedTextProvider.IsValidPasswordChar*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: IsValidPasswordChar
  nameWithType: MaskedTextProvider.IsValidPasswordChar
- uid: System.ComponentModel.MaskedTextProvider.Item*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Item
  nameWithType: MaskedTextProvider.Item
- uid: System.ComponentModel.MaskedTextProvider.LastAssignedPosition*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: LastAssignedPosition
  nameWithType: MaskedTextProvider.LastAssignedPosition
- uid: System.ComponentModel.MaskedTextProvider.Length*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Length
  nameWithType: MaskedTextProvider.Length
- uid: System.ComponentModel.MaskedTextProvider.Mask*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Mask
  nameWithType: MaskedTextProvider.Mask
- uid: System.ComponentModel.MaskedTextProvider.MaskCompleted*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskCompleted
  nameWithType: MaskedTextProvider.MaskCompleted
- uid: System.ComponentModel.MaskedTextProvider.MaskFull*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: MaskFull
  nameWithType: MaskedTextProvider.MaskFull
- uid: System.ComponentModel.MaskedTextProvider.PasswordChar*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: PasswordChar
  nameWithType: MaskedTextProvider.PasswordChar
- uid: System.ComponentModel.MaskedTextProvider.PromptChar*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: PromptChar
  nameWithType: MaskedTextProvider.PromptChar
- uid: System.ComponentModel.MaskedTextProvider.Remove*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Remove
  nameWithType: MaskedTextProvider.Remove
- uid: System.ComponentModel.MaskedTextProvider.RemoveAt*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: RemoveAt
  nameWithType: MaskedTextProvider.RemoveAt
- uid: System.ComponentModel.MaskedTextProvider.Replace*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Replace
  nameWithType: MaskedTextProvider.Replace
- uid: System.ComponentModel.MaskedTextProvider.ResetOnPrompt*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ResetOnPrompt
  nameWithType: MaskedTextProvider.ResetOnPrompt
- uid: System.ComponentModel.MaskedTextProvider.ResetOnSpace*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ResetOnSpace
  nameWithType: MaskedTextProvider.ResetOnSpace
- uid: System.ComponentModel.MaskedTextProvider.Set*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: Set
  nameWithType: MaskedTextProvider.Set
- uid: System.ComponentModel.MaskedTextProvider.SkipLiterals*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: SkipLiterals
  nameWithType: MaskedTextProvider.SkipLiterals
- uid: System.ComponentModel.MaskedTextProvider.ToDisplayString*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ToDisplayString
  nameWithType: MaskedTextProvider.ToDisplayString
- uid: System.ComponentModel.MaskedTextProvider.ToString*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: ToString
  nameWithType: MaskedTextProvider.ToString
- uid: System.ComponentModel.MaskedTextProvider.VerifyChar*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: VerifyChar
  nameWithType: MaskedTextProvider.VerifyChar
- uid: System.ComponentModel.MaskedTextProvider.VerifyEscapeChar*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: VerifyEscapeChar
  nameWithType: MaskedTextProvider.VerifyEscapeChar
- uid: System.ComponentModel.MaskedTextProvider.VerifyString*
  parent: System.ComponentModel.MaskedTextProvider
  isExternal: false
  name: VerifyString
  nameWithType: MaskedTextProvider.VerifyString
