### YamlMime:ManagedReference
items:
- uid: System.AddIn.Pipeline.ContractHandle
  id: ContractHandle
  children:
  - System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  - System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  - System.AddIn.Pipeline.ContractHandle.Contract
  - System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  - System.AddIn.Pipeline.ContractHandle.Dispose
  - System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  - System.AddIn.Pipeline.ContractHandle.Finalize
  langs:
  - csharp
  name: ContractHandle
  nameWithType: ContractHandle
  fullName: System.AddIn.Pipeline.ContractHandle
  type: Class
  summary: "Fornece métodos que controlam a duração de um suplemento."
  remarks: "Porque o modelo de suplemento fornece a capacidade de suplementos comunicar entre domínios de aplicação e entre processos, não pode confiar no recoletor de lixo para reclamá-los. Esta classe fornece uma mecanismo para o suplemento de contagem por obter um token de duração para o respectivo contrato de referência.       Quando é criado um objeto de ContractHandle, aquele invoca o <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A>método no contrato que é transmitido a este construtor.</xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> Quando o objeto de ContractHandle é eliminado ou finalizado, aquele invoca o <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A>método no contrato, que elimina a reter o contrato.</xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A>       Adaptadores de implementam o contrato. A classe de ContractHandle foi concebida para ser utilizado no adaptador de vista de contrato para ajudar os programadores de pipeline gerir a duração do contrato que está a ser adaptada descrito. Normalmente, uma instância desta classe é instanciar durante a construção da classe de placa e está armazenada num campo de instância do adaptador. Quando a classe de placa-libertação da memória, o objeto de ContractHandle também será recolhido e o objeto de ContractHandle irá revogar o token de duração no contrato.       Recomenda-se que os adaptadores de contrato de vista herdarem da <xref:System.AddIn.Pipeline.ContractBase>classe.</xref:System.AddIn.Pipeline.ContractBase> Em seguida, pode utilizar uma implementação predefinida para os membros do <xref:System.AddIn.Contract.IContract>, o que significa que necessita de implementar apenas os membros do seu contrato específico.</xref:System.AddIn.Contract.IContract>"
  example:
  - "The following example shows how to set the lifetime token handle in a contract-to-view adapter on the add-in side of a pipeline.  \n  \n [!code-vb[AddinP2HostSideAdapters#2](~/add/codesnippet/visualbasic/Calc2HostSideAdapter/Calc2ContractToViewHostSideAdapter.vb#2)]\n [!code-cs[AddinP2HostSideAdapters#2](~/add/codesnippet/csharp/Calc2HostSideAdapter/Calc2ContractToViewHostSideAdapter.cs#2)]"
  syntax:
    content: 'public class ContractHandle : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  id: '#ctor(System.AddIn.Contract.IContract)'
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: ContractHandle(IContract)
  nameWithType: ContractHandle.ContractHandle(IContract)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractHandle(IContract)
  type: Constructor
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Inicializa uma nova instância do <xref href=&quot;System.AddIn.Pipeline.ContractHandle&quot;> </xref> classe."
  syntax:
    content: public ContractHandle (System.AddIn.Contract.IContract contract);
    parameters:
    - id: contract
      type: System.AddIn.Contract.IContract
      description: "O contrato para utilizar no pipeline."
  overload: System.AddIn.Pipeline.ContractHandle.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>contract</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  id: AppDomainOwner(System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: AppDomainOwner(AppDomain)
  nameWithType: ContractHandle.AppDomainOwner(AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(AppDomain)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Obtém a instância do adaptador adicionar lado quando o domínio de aplicação foi criado."
  remarks: "Os adaptadores de adicionar lado são escritos como <xref:System.AddIn.Contract.IContract>.</xref:System.AddIn.Contract.IContract>       Se o domínio de aplicação foi criado anteriormente por um utilizador, não há nenhum proprietário."
  syntax:
    content: public static System.AddIn.Contract.IContract AppDomainOwner (AppDomain domain);
    parameters:
    - id: domain
      type: System.AppDomain
      description: "O domínio de aplicação para verificar."
    return:
      type: System.AddIn.Contract.IContract
      description: "Um <xref href=&quot;System.AddIn.Contract.IContract&quot;> </xref> objeto que representa o proprietário do domínio de aplicação."
  overload: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>domain</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Contract
  id: Contract
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Contract
  nameWithType: ContractHandle.Contract
  fullName: System.AddIn.Pipeline.ContractHandle.Contract
  type: Property
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Obtém o contrato utilizado por um pipeline."
  syntax:
    content: public System.AddIn.Contract.IContract Contract { get; }
    return:
      type: System.AddIn.Contract.IContract
      description: "O contrato, que é derivado de <xref href=&quot;System.AddIn.Contract.IContract&quot;> </xref>."
  overload: System.AddIn.Pipeline.ContractHandle.Contract*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  id: ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: ContractOwnsAppDomain(IContract,AppDomain)
  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Determina se um domínio aplicacional proprietário é o contrato especificado."
  syntax:
    content: public static bool ContractOwnsAppDomain (System.AddIn.Contract.IContract contract, AppDomain domain);
    parameters:
    - id: contract
      type: System.AddIn.Contract.IContract
      description: "O contrato para verificar."
    - id: domain
      type: System.AppDomain
      description: "O domínio de aplicação para verificar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o contrato pertence o domínio da aplicação; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>contract</code>or <code>domain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Dispose
  id: Dispose
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Dispose()
  nameWithType: ContractHandle.Dispose()
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose()
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Revoga o token de duração um contrato, independentemente de entrada."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.AddIn.Pipeline.ContractHandle.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ContractHandle.Dispose(Boolean)
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose(Boolean)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Revoga o token de duração do contrato, independentemente de entrada e, opcionalmente, liberta os recursos geridos."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.AddIn.Pipeline.ContractHandle.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Finalize
  id: Finalize
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Finalize()
  nameWithType: ContractHandle.Finalize()
  fullName: System.AddIn.Pipeline.ContractHandle.Finalize()
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Liberta os recursos associados a <xref href=&quot;System.AddIn.Pipeline.ContractHandle&quot;> </xref> instância."
  remarks: "Este método substitui <xref:System.Object.Finalize%2A?displayProperty=fullName>.</xref:System.Object.Finalize%2A?displayProperty=fullName> Código da aplicação não deve chamar este método; método Finalize de um objeto é invocado automaticamente durante a recolha de lixo, a menos que Finalização pelo garbage collector foi desativada por uma chamada para o <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>método.</xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>       Quando chamado pelo garbage collector, este método chama o <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29>método.</xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29>"
  syntax:
    content: ~ContractHandle ();
    parameters: []
  overload: System.AddIn.Pipeline.ContractHandle.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractHandle(IContract)
  nameWithType: ContractHandle.ContractHandle(IContract)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractHandle(IContract)
- uid: System.AddIn.Contract.IContract
  parent: System.AddIn.Contract
  isExternal: false
  name: IContract
  nameWithType: IContract
  fullName: System.AddIn.Contract.IContract
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: AppDomainOwner(AppDomain)
  nameWithType: ContractHandle.AppDomainOwner(AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(AppDomain)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.AddIn.Pipeline.ContractHandle.Contract
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Contract
  nameWithType: ContractHandle.Contract
  fullName: System.AddIn.Pipeline.ContractHandle.Contract
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractOwnsAppDomain(IContract,AppDomain)
  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.AddIn.Pipeline.ContractHandle.Dispose
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose()
  nameWithType: ContractHandle.Dispose()
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose()
- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ContractHandle.Dispose(Boolean)
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose(Boolean)
- uid: System.AddIn.Pipeline.ContractHandle.Finalize
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Finalize()
  nameWithType: ContractHandle.Finalize()
  fullName: System.AddIn.Pipeline.ContractHandle.Finalize()
- uid: System.AddIn.Pipeline.ContractHandle.#ctor*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractHandle
  nameWithType: ContractHandle.ContractHandle
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: AppDomainOwner
  nameWithType: ContractHandle.AppDomainOwner
- uid: System.AddIn.Pipeline.ContractHandle.Contract*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Contract
  nameWithType: ContractHandle.Contract
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractOwnsAppDomain
  nameWithType: ContractHandle.ContractOwnsAppDomain
- uid: System.AddIn.Pipeline.ContractHandle.Dispose*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose
  nameWithType: ContractHandle.Dispose
- uid: System.AddIn.Pipeline.ContractHandle.Finalize*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Finalize
  nameWithType: ContractHandle.Finalize
