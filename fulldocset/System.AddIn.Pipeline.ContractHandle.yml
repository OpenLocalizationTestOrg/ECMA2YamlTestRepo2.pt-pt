### YamlMime:ManagedReference
items:
- uid: System.AddIn.Pipeline.ContractHandle
  id: ContractHandle
  children:
  - System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  - System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  - System.AddIn.Pipeline.ContractHandle.Contract
  - System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  - System.AddIn.Pipeline.ContractHandle.Dispose
  - System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  - System.AddIn.Pipeline.ContractHandle.Finalize
  langs:
  - csharp
  name: ContractHandle
  nameWithType: ContractHandle
  fullName: System.AddIn.Pipeline.ContractHandle
  type: Class
  summary: "Provides methods that control the lifetime of an add-in."
  remarks: "Because the add-in model provides the ability for add-ins to communicate between application domains and between processes, it cannot rely on the garbage collector to reclaim them. This class provides a reference counting mechanism for the add-in by obtaining a lifetime token to its contract.       When a ContractHandle object is constructed, it calls the <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> method on the contract that is passed to the constructor. When the ContractHandle object is disposed or finalized, it calls the <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A> method on the contract, which removes its hold on the contract.       Adapters implement the contract. The ContractHandle class is designed to be used in a contract-to-view adapter to help pipeline developers manage the lifetime of the contract that is being adapted. Typically, an instance of this class is instantiated during the construction of the adapter class and is stored in an instance field of the adapter. When the adapter class is garbage-collected, the ContractHandle object will also be collected and the ContractHandle object will revoke the lifetime token on the contract.       It is recommended that your view-to-contract adapters inherit from the <xref:System.AddIn.Pipeline.ContractBase> class. You can then use a default implementation for the members of <xref:System.AddIn.Contract.IContract>, which means you need to implement only the members of your specific contract."
  example:
  - "The following example shows how to set the lifetime token handle in a contract-to-view adapter on the add-in side of a pipeline.  \n  \n [!code-vb[AddinP2HostSideAdapters#2](~/add/codesnippet/visualbasic/Calc2HostSideAdapter/Calc2ContractToViewHostSideAdapter.vb#2)]\n [!code-cs[AddinP2HostSideAdapters#2](~/add/codesnippet/csharp/Calc2HostSideAdapter/Calc2ContractToViewHostSideAdapter.cs#2)]"
  syntax:
    content: 'public class ContractHandle : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  id: '#ctor(System.AddIn.Contract.IContract)'
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: ContractHandle(IContract)
  nameWithType: ContractHandle.ContractHandle(IContract)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractHandle(IContract)
  type: Constructor
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Initializes a new instance of the <xref href=&quot;System.AddIn.Pipeline.ContractHandle&quot;></xref> class."
  syntax:
    content: public ContractHandle (System.AddIn.Contract.IContract contract);
    parameters:
    - id: contract
      type: System.AddIn.Contract.IContract
      description: "The contract to use in the pipeline."
  overload: System.AddIn.Pipeline.ContractHandle.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>contract</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  id: AppDomainOwner(System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: AppDomainOwner(AppDomain)
  nameWithType: ContractHandle.AppDomainOwner(AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(AppDomain)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Gets the instance of the add-in-side adapter when the application domain was created."
  remarks: "The add-in-side adapters are typed as <xref:System.AddIn.Contract.IContract>.       If the application domain was previously created by a user, there is no owner."
  syntax:
    content: public static System.AddIn.Contract.IContract AppDomainOwner (AppDomain domain);
    parameters:
    - id: domain
      type: System.AppDomain
      description: "The application domain to check."
    return:
      type: System.AddIn.Contract.IContract
      description: "An <xref href=&quot;System.AddIn.Contract.IContract&quot;></xref> object that represents the owner of the application domain."
  overload: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>domain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Contract
  id: Contract
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Contract
  nameWithType: ContractHandle.Contract
  fullName: System.AddIn.Pipeline.ContractHandle.Contract
  type: Property
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Gets the contract used by a pipeline."
  syntax:
    content: public System.AddIn.Contract.IContract Contract { get; }
    return:
      type: System.AddIn.Contract.IContract
      description: "The contract, which is derived from <xref href=&quot;System.AddIn.Contract.IContract&quot;></xref>."
  overload: System.AddIn.Pipeline.ContractHandle.Contract*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  id: ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: ContractOwnsAppDomain(IContract,AppDomain)
  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Determines whether an application domain is owned by the specified contract."
  syntax:
    content: public static bool ContractOwnsAppDomain (System.AddIn.Contract.IContract contract, AppDomain domain);
    parameters:
    - id: contract
      type: System.AddIn.Contract.IContract
      description: "The contract to check."
    - id: domain
      type: System.AppDomain
      description: "The application domain to check."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the contract owns the application domain; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>contract</code> or <code>domain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Dispose
  id: Dispose
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Dispose()
  nameWithType: ContractHandle.Dispose()
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose()
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Revokes the lifetime token on a contract, regardless of input."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.AddIn.Pipeline.ContractHandle.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ContractHandle.Dispose(Boolean)
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose(Boolean)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Revokes the lifetime token on the contract regardless of input and optionally releases the managed resources."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.AddIn.Pipeline.ContractHandle.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Finalize
  id: Finalize
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Finalize()
  nameWithType: ContractHandle.Finalize()
  fullName: System.AddIn.Pipeline.ContractHandle.Finalize()
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Releases the resources associated with the <xref href=&quot;System.AddIn.Pipeline.ContractHandle&quot;></xref> instance."
  remarks: "This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object&quot;s Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.       When called by the garbage collector, this method calls the <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29> method."
  syntax:
    content: ~ContractHandle ();
    parameters: []
  overload: System.AddIn.Pipeline.ContractHandle.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractHandle(IContract)
  nameWithType: ContractHandle.ContractHandle(IContract)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractHandle(IContract)
- uid: System.AddIn.Contract.IContract
  parent: System.AddIn.Contract
  isExternal: false
  name: IContract
  nameWithType: IContract
  fullName: System.AddIn.Contract.IContract
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: AppDomainOwner(AppDomain)
  nameWithType: ContractHandle.AppDomainOwner(AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(AppDomain)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.AddIn.Pipeline.ContractHandle.Contract
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Contract
  nameWithType: ContractHandle.Contract
  fullName: System.AddIn.Pipeline.ContractHandle.Contract
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractOwnsAppDomain(IContract,AppDomain)
  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.AddIn.Pipeline.ContractHandle.Dispose
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose()
  nameWithType: ContractHandle.Dispose()
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose()
- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ContractHandle.Dispose(Boolean)
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose(Boolean)
- uid: System.AddIn.Pipeline.ContractHandle.Finalize
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Finalize()
  nameWithType: ContractHandle.Finalize()
  fullName: System.AddIn.Pipeline.ContractHandle.Finalize()
- uid: System.AddIn.Pipeline.ContractHandle.#ctor*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractHandle
  nameWithType: ContractHandle.ContractHandle
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: AppDomainOwner
  nameWithType: ContractHandle.AppDomainOwner
- uid: System.AddIn.Pipeline.ContractHandle.Contract*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Contract
  nameWithType: ContractHandle.Contract
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractOwnsAppDomain
  nameWithType: ContractHandle.ContractOwnsAppDomain
- uid: System.AddIn.Pipeline.ContractHandle.Dispose*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose
  nameWithType: ContractHandle.Dispose
- uid: System.AddIn.Pipeline.ContractHandle.Finalize*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Finalize
  nameWithType: ContractHandle.Finalize
