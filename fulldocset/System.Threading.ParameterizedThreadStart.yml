### YamlMime:ManagedReference
items:
- uid: System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  langs:
  - csharp
  name: ParameterizedThreadStart
  nameWithType: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  summary: "Representa o método que executa num <xref href=&quot;System.Threading.Thread&quot;> </xref>."
  remarks: "Quando é criado um thread gerido, o método que executa no thread é representado pelo: - um <xref:System.Threading.ThreadStart>delegado que é transferido para o <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName>construtor.</xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> </xref:System.Threading.ThreadStart>  Qualquer método que não tem parâmetros e que devolve `void` em c# ou é um `Sub` procedimento no Visual Basic pode representar o delegado.      -Um delegado de ParameterizedThreadStart que é transferido para o <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName>construtor.</xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> Qualquer método com um único parâmetro do tipo <xref:System.Object>e que devolve um valor nulo em c# ou é um procedimento Sub no Visual Basic pode representar o delegado.</xref:System.Object>       O thread não começa a execução até o <xref:System.Threading.Thread.Start%2A?displayProperty=fullName>método é chamado.</xref:System.Threading.Thread.Start%2A?displayProperty=fullName> O <xref:System.Threading.ThreadStart>ou ParameterizedThreadStart delegado é invocado no thread e execução começa com a primeira linha do método representado pelo delegado do.</xref:System.Threading.ThreadStart> No caso do delegado de ParameterizedThreadStart, o objeto que é transferido para o <xref:System.Threading.Thread.Start%28System.Object%29>método é passado para o delegado.</xref:System.Threading.Thread.Start%28System.Object%29>      > [!NOTE] > Utilizadores do Visual Basic e c# podem omitir o <xref:System.Threading.ThreadStart>ou construtor de delegado ParameterizedThreadStart ao criar um thread.</xref:System.Threading.ThreadStart> No Visual Basic, utilize o `AddressOf` operador ao transmitir o seu método para o <xref:System.Threading.Thread.%23ctor%2A>construtor; por exemplo, `Dim t As New Thread(AddressOf ThreadProc)`.</xref:System.Threading.Thread.%23ctor%2A> Em c#, basta especificar o nome do procedimento de thread. O compilador seleciona o construtor de delegado correto.      > [!NOTE] > Quando cria um delegado ParameterizedThreadStart para um método de instância no C++, o primeiro parâmetro do construtor é a variável de instância. Para um método estático, o primeiro parâmetro do construtor é zero. Para um método estático, o construtor de delegado requer apenas um parâmetro: o endereço do método de chamada de retorno, qualificado pelo nome de classe.       O delegado de ParameterizedThreadStart e a <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>marca de sobrecarga de método fácil transmitir dados para um procedimento de thread, mas esta técnica é não tipo seguro porque qualquer objeto pode ser transferido para <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>.</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> </xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> Uma forma mais robusta para transmitir dados para um procedimento de thread é colocar o procedimento de thread e os campos de dados para um objeto de trabalho. Para obter mais informações, consulte [criar Threads e transmissão de dados na hora de início](~/add/includes/ajax-current-ext-md.md).       O delegado de ParameterizedThreadStart suporta apenas um único parâmetro. Pode passar vários itens de dados para o ParameterizedThreadStart fazendo esse parâmetro um dos seguintes: – uma matriz.      -Um tipo de coleção, se todos os itens de dados são do mesmo tipo.      -Um tipo de cadeia de identificação, tais como <xref:System.Tuple%602>ou <xref:System.Tuple%604>.</xref:System.Tuple%604> </xref:System.Tuple%602>"
  example:
  - "The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \n  \n> [!NOTE]\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \n  \n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public delegate void ParameterizedThreadStart(object obj);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
