### YamlMime:ManagedReference
items:
- uid: System.Web.Routing.PageRouteHandler
  id: PageRouteHandler
  children:
  - System.Web.Routing.PageRouteHandler.#ctor(System.String)
  - System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  - System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  - System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  - System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  - System.Web.Routing.PageRouteHandler.VirtualPath
  langs:
  - csharp
  name: PageRouteHandler
  nameWithType: PageRouteHandler
  fullName: System.Web.Routing.PageRouteHandler
  type: Class
  summary: "Fornece propriedades e métodos para definir a forma como um URL mapeia para um ficheiro físico."
  remarks: "Transmita uma instância de PageRouteHandler para o <xref:System.Web.Routing.Route>construtor para mapear um URL de um ficheiro físico.</xref:System.Web.Routing.Route> O objeto de PageRouteHandler Especifica o caminho virtual do ficheiro físico e determina se as regras de autorização para o URL físico está seleccionado."
  syntax:
    content: 'public class PageRouteHandler : System.Web.Routing.IRouteHandler'
  inheritance:
  - System.Object
  implements:
  - System.Web.Routing.IRouteHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: PageRouteHandler(String)
  nameWithType: PageRouteHandler.PageRouteHandler(String)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.Routing.PageRouteHandler&quot;> </xref> classe."
  remarks: "Quando utiliza este construtor, o <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>propriedade está definida como `true`.</xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>"
  syntax:
    content: public PageRouteHandler (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "O caminho virtual do ficheiro físico para este <xref:System.Web.Routing.RouteData.Route*>objeto.</xref:System.Web.Routing.RouteData.Route*> O ficheiro tem de estar localizado na aplicação atual. Por conseguinte, o caminho tem de começar com um til (~)."
  overload: System.Web.Routing.PageRouteHandler.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> virtualPath </code> parâmetro é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou é uma cadeia vazia ou não começa com &quot;~ /&quot;."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: PageRouteHandler(String,Boolean)
  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.Routing.PageRouteHandler&quot;> </xref> classe."
  remarks: "Por predefinição, o <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>propriedade é `true`.</xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> Por conseguinte, se pretender que as regras de autorização para ser aplicadas para o URL da página físico e o URL de rota, pode utilizar o <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29>construtor em vez deste construtor.</xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29>"
  syntax:
    content: public PageRouteHandler (string virtualPath, bool checkPhysicalUrlAccess);
    parameters:
    - id: virtualPath
      type: System.String
      description: "O caminho virtual do ficheiro físico deste <xref:System.Web.Routing.RouteData.Route*>objeto.</xref:System.Web.Routing.RouteData.Route*> O ficheiro tem de estar localizado na aplicação atual. Por conseguinte, o caminho tem de começar com um til (~)."
    - id: checkPhysicalUrlAccess
      type: System.Boolean
      description: "Se esta propriedade estiver definida como <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, serão aplicadas regras de autorização para o URL do pedido e não para o URL da página física. Se esta propriedade estiver definida como <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, serão aplicadas regras de autorização para o URL pedido e o URL da página física."
  overload: System.Web.Routing.PageRouteHandler.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> virtualPath </code> parâmetro é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou é uma cadeia vazia ou não começa com &quot;~ /&quot;."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  id: CheckPhysicalUrlAccess
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Obtém um valor que determina se as regras de autorização são aplicadas ao URL do ficheiro físico."
  remarks: "Pode definir a propriedade CheckPhysicalUrlAccess quando utiliza o <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29>construtor.</xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29>       O valor da propriedade CheckPhysicalUrlAccess determina se o <xref:System.Web.Routing.PageRouteHandler>objeto irá verificar permissões de segurança apenas para o URL de rota ou para a página física e o URL de rota.</xref:System.Web.Routing.PageRouteHandler>       Quando a propriedade CheckPhysicalUrlAccess está definida como `true` (que é o valor predefinido), um utilizador tem de ter permissão para aceder ao URL de rota e o URL físico. Quando a propriedade CheckPhysicalUrlAccess está definida como `false`, um utilizador necessita apenas de permissão para o URL de rota de acesso e permissões para o URL físico não são verificadas.       Permissões são definidas no ficheiro Web. config, conforme mostrado no exemplo seguinte: ```   <configuration>     <location path=&quot;categoriespage.aspx&quot;>       <system.web>         <authorization>           <allow roles=&quot;admin&quot;/>           <deny users=&quot;*&quot;/>         </authorization>       </system.web>     </location>     <location path=&quot;category&quot;>       <system.web>         <authorization>           <allow users=&quot;*&quot;/>         </authorization>       </system.web>     </location>   </configuration>   ``` para um URL de pedido que contenha `Category/food/show` depois do nome de domínio, se o padrão do URL de rota é `Category/{action}/{categoryName}` e a página física é Categoriespage.aspx, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] aplica-se as permissões definidas no exemplo anterior de uma das seguintes formas: - se a propriedade CheckPhysicalUrlAccess é `false`, é concedido acesso todos os utilizadores, porque todos os utilizadores tiveram acesso para o padrão de URL que começa com `category`.      -Se a propriedade CheckPhysicalUrlAccess `true`, apenas `admin` é concedido acesso a utilizadores. Todos os utilizadores têm acesso para o padrão de URL que comece com `category`, mas apenas `admin` os utilizadores têm acesso para a página física Categoriespage.aspx."
  syntax:
    content: public bool CheckPhysicalUrlAccess { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a autorização estiver marcada para o URL do ficheiro físico que está associado a rota; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  id: GetHttpHandler(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: GetHttpHandler(RequestContext)
  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Devolve o objeto que processa o pedido."
  syntax:
    content: public virtual System.Web.IHttpHandler GetHttpHandler (System.Web.Routing.RequestContext requestContext);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: "Um objeto que contém informações sobre o pedido."
    return:
      type: System.Web.IHttpHandler
      description: "O objeto que processa o pedido."
  overload: System.Web.Routing.PageRouteHandler.GetHttpHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  id: GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: GetSubstitutedVirtualPath(RequestContext)
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Devolve o caminho virtual do ficheiro físico para a rota após tem sido aplicadas substituições quaisquer parâmetros de substituição."
  remarks: "Se o <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>o valor não contém quaisquer parâmetros de substituição, o método de GetSubstitutedVirtualPath devolve o mesmo valor que o <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>propriedade.</xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> </xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>"
  syntax:
    content: public string GetSubstitutedVirtualPath (System.Web.Routing.RequestContext requestContext);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: "Um objeto que contém informações sobre o pedido."
    return:
      type: System.String
      description: "O URL do ficheiro físico que foi gerado a partir de uma rota."
  overload: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.VirtualPath
  id: VirtualPath
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
  fullName: System.Web.Routing.PageRouteHandler.VirtualPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Obtém o caminho virtual da página Web que está associado esta rota."
  remarks: "Defina a propriedade de VirtualPath no <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>construtor ou no <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>construtor.</xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> </xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>"
  syntax:
    content: public string VirtualPath { get; }
    return:
      type: System.String
      description: "O URL da página Web, antes de tem sido aplicadas substituições para quaisquer parâmetros de substituição."
  overload: System.Web.Routing.PageRouteHandler.VirtualPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler(String)
  nameWithType: PageRouteHandler.PageRouteHandler(String)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler(String,Boolean)
  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetHttpHandler(RequestContext)
  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)
- uid: System.Web.IHttpHandler
  parent: System.Web
  isExternal: false
  name: IHttpHandler
  nameWithType: IHttpHandler
  fullName: System.Web.IHttpHandler
- uid: System.Web.Routing.RequestContext
  parent: System.Web.Routing
  isExternal: true
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.Web.Routing.RequestContext
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetSubstitutedVirtualPath(RequestContext)
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
- uid: System.Web.Routing.PageRouteHandler.VirtualPath
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
  fullName: System.Web.Routing.PageRouteHandler.VirtualPath
- uid: System.Web.Routing.PageRouteHandler.#ctor*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler
  nameWithType: PageRouteHandler.PageRouteHandler
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetHttpHandler
  nameWithType: PageRouteHandler.GetHttpHandler
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetSubstitutedVirtualPath
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath
- uid: System.Web.Routing.PageRouteHandler.VirtualPath*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
