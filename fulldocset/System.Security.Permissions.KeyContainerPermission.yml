### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.KeyContainerPermission
  id: KeyContainerPermission
  children:
  - System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags)
  - System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags,System.Security.Permissions.KeyContainerPermissionAccessEntry[])
  - System.Security.Permissions.KeyContainerPermission.AccessEntries
  - System.Security.Permissions.KeyContainerPermission.Copy
  - System.Security.Permissions.KeyContainerPermission.Flags
  - System.Security.Permissions.KeyContainerPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.KeyContainerPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.KeyContainerPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.KeyContainerPermission.IsUnrestricted
  - System.Security.Permissions.KeyContainerPermission.ToXml
  - System.Security.Permissions.KeyContainerPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: KeyContainerPermission
  nameWithType: KeyContainerPermission
  fullName: System.Security.Permissions.KeyContainerPermission
  type: Class
  summary: "Controls the ability to access key containers. This class cannot be inherited."
  remarks: "This permission is used to provide limited access to key containers."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class KeyContainerPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags)
  id: '#ctor(System.Security.Permissions.KeyContainerPermissionFlags)'
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: KeyContainerPermission(KeyContainerPermissionFlags)
  nameWithType: KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags)
  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.KeyContainerPermission&quot;></xref> class with the specified access."
  remarks: ''
  example:
  - "The following code example shows the use of the KeyContainerPermission constructor.  \n  \n [!code-cs[System.Security.Permissions.KeyContainerPermission#20](~/add/codesnippet/csharp/dcb7bb7e-ef30-44de-aaf3-_1.cs)]\n [!code-cpp[System.Security.Permissions.KeyContainerPermission#20](~/add/codesnippet/cpp/dcb7bb7e-ef30-44de-aaf3-_1.cpp)]\n [!code-vb[System.Security.Permissions.KeyContainerPermission#20](~/add/codesnippet/visualbasic/dcb7bb7e-ef30-44de-aaf3-_1.vb)]"
  syntax:
    content: public KeyContainerPermission (System.Security.Permissions.KeyContainerPermissionFlags flags);
    parameters:
    - id: flags
      type: System.Security.Permissions.KeyContainerPermissionFlags
      description: "A bitwise combination of the <xref href=&quot;System.Security.Permissions.KeyContainerPermissionFlags&quot;></xref> values."
  overload: System.Security.Permissions.KeyContainerPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>flags</code> is not a valid combination of the <xref href=&quot;System.Security.Permissions.KeyContainerPermissionFlags&quot;></xref> values."
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: KeyContainerPermission(PermissionState)
  nameWithType: KeyContainerPermission.KeyContainerPermission(PermissionState)
  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.KeyContainerPermission&quot;></xref> class with either restricted or unrestricted permission."
  remarks: "Creates either `None` (fully restricted) or `Unrestricted` access to key containers."
  syntax:
    content: public KeyContainerPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "One of the <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref> values."
  overload: System.Security.Permissions.KeyContainerPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>state</code> is not a valid <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref> value."
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags,System.Security.Permissions.KeyContainerPermissionAccessEntry[])
  id: '#ctor(System.Security.Permissions.KeyContainerPermissionFlags,System.Security.Permissions.KeyContainerPermissionAccessEntry[])'
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])
  nameWithType: KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])
  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.KeyContainerPermission&quot;></xref> class with the specified global access and specific key container access rights."
  remarks: ''
  example:
  - "The following code example shows the use of the KeyContainerPermission constructor.  \n  \n [!code-cs[System.Security.Permissions.KeyContainerPermission#13](~/add/codesnippet/csharp/504c0c1a-d76c-49a6-8315-_1.cs)]\n [!code-cpp[System.Security.Permissions.KeyContainerPermission#13](~/add/codesnippet/cpp/504c0c1a-d76c-49a6-8315-_1.cpp)]\n [!code-vb[System.Security.Permissions.KeyContainerPermission#13](~/add/codesnippet/visualbasic/504c0c1a-d76c-49a6-8315-_1.vb)]"
  syntax:
    content: public KeyContainerPermission (System.Security.Permissions.KeyContainerPermissionFlags flags, System.Security.Permissions.KeyContainerPermissionAccessEntry[] accessList);
    parameters:
    - id: flags
      type: System.Security.Permissions.KeyContainerPermissionFlags
      description: "A bitwise combination of the <xref href=&quot;System.Security.Permissions.KeyContainerPermissionFlags&quot;></xref> values."
    - id: accessList
      type: System.Security.Permissions.KeyContainerPermissionAccessEntry[]
      description: "An array of <xref href=&quot;System.Security.Permissions.KeyContainerPermissionAccessEntry&quot;></xref> objects identifying specific key container access rights."
  overload: System.Security.Permissions.KeyContainerPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>flags</code> is not a valid combination of the <xref href=&quot;System.Security.Permissions.KeyContainerPermissionFlags&quot;></xref> values."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>accessList</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.AccessEntries
  id: AccessEntries
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: AccessEntries
  nameWithType: KeyContainerPermission.AccessEntries
  fullName: System.Security.Permissions.KeyContainerPermission.AccessEntries
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets the collection of <xref href=&quot;System.Security.Permissions.KeyContainerPermissionAccessEntry&quot;></xref> objects associated with the current permission."
  remarks: "Each <xref:System.Security.Permissions.KeyContainerPermissionAccessEntry> object in the collection specifies the access rights for a specific key container."
  syntax:
    content: public System.Security.Permissions.KeyContainerPermissionAccessEntryCollection AccessEntries { get; }
    return:
      type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
      description: "A <xref href=&quot;System.Security.Permissions.KeyContainerPermissionAccessEntryCollection&quot;></xref> containing the <xref href=&quot;System.Security.Permissions.KeyContainerPermissionAccessEntry&quot;></xref> objects for this <xref href=&quot;System.Security.Permissions.KeyContainerPermission&quot;></xref>."
  overload: System.Security.Permissions.KeyContainerPermission.AccessEntries*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.Copy
  id: Copy
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: KeyContainerPermission.Copy()
  fullName: System.Security.Permissions.KeyContainerPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns an identical copy of the current permission."
  remarks: "A copy of the permission represents the same access to resources as the original permission."
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A copy of the current permission."
  overload: System.Security.Permissions.KeyContainerPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.Flags
  id: Flags
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: Flags
  nameWithType: KeyContainerPermission.Flags
  fullName: System.Security.Permissions.KeyContainerPermission.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets the key container permission flags that apply to all key containers associated with the permission."
  remarks: "The Flags property is set by the constructor."
  syntax:
    content: public System.Security.Permissions.KeyContainerPermissionFlags Flags { get; }
    return:
      type: System.Security.Permissions.KeyContainerPermissionFlags
      description: "A bitwise combination of the <xref href=&quot;System.Security.Permissions.KeyContainerPermissionFlags&quot;></xref> values."
  overload: System.Security.Permissions.KeyContainerPermission.Flags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: KeyContainerPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.KeyContainerPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Reconstructs a permission with a specified state from an XML encoding."
  remarks: "The FromXml method reconstructs a <xref:System.Security.Permissions.KeyContainerPermission> object from an XML encoding defined by the <xref:System.Security.SecurityElement> class. Use the <xref:System.Security.Permissions.KeyContainerPermission.ToXml%2A> method to XML-encode the <xref:System.Security.Permissions.KeyContainerPermission>, including state information."
  syntax:
    content: public override void FromXml (System.Security.SecurityElement securityElement);
    parameters:
    - id: securityElement
      type: System.Security.SecurityElement
      description: "A <xref href=&quot;System.Security.SecurityElement&quot;></xref> that contains the XML encoding used to reconstruct the permission."
  overload: System.Security.Permissions.KeyContainerPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>securityElement</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>securityElement</code> is not a valid permission element.       -or-       The version number of <code>securityElement</code> is not supported."
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: KeyContainerPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.KeyContainerPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns a permission that is the intersection of the current permission and the specified permission."
  remarks: "The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both individual permissions will pass the intersection."
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to intersect with the current permission. It must be the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "A new permission that represents the intersection of the current permission and the specified permission. This new permission is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the intersection is empty."
  overload: System.Security.Permissions.KeyContainerPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>target</code> is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> and does not specify a permission of the same type as the current permission."
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: KeyContainerPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.KeyContainerPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determines whether the current permission is a subset of the specified permission."
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained in the specified permission. For example, a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access is a subset of a permission for <xref:System.Security.Permissions.KeyContainerPermissionFlags> access."
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to test for the subset relationship. This permission must be the same type as the current permission."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current permission is a subset of the specified permission; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.KeyContainerPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>target</code> is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> and does not specify a permission of the same type as the current permission."
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: KeyContainerPermission.IsUnrestricted()
  fullName: System.Security.Permissions.KeyContainerPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determines whether the current permission is unrestricted."
  remarks: "An unrestricted permission represents access to all resources protected by the permission."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current permission is unrestricted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.KeyContainerPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: KeyContainerPermission.ToXml()
  fullName: System.Security.Permissions.KeyContainerPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates an XML encoding of the permission and its current state."
  remarks: "Use the <xref:System.Security.Permissions.KeyContainerPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>."
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "A <xref href=&quot;System.Security.SecurityElement&quot;></xref> that contains an XML encoding of the permission, including state information."
  overload: System.Security.Permissions.KeyContainerPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.KeyContainerPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: KeyContainerPermission.Union(IPermission)
  fullName: System.Security.Permissions.KeyContainerPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates a permission that is the union of the current permission and the specified permission."
  remarks: "The result of a call to Union is a permission that represents all operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union."
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission to combine with the current permission. It must be of the same type as the current permission."
    return:
      type: System.Security.IPermission
      description: "A new permission that represents the union of the current permission and the specified permission."
  overload: System.Security.Permissions.KeyContainerPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>target</code> is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> and does not specify a permission of the same type as the current permission."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags)
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: KeyContainerPermission(KeyContainerPermissionFlags)
  nameWithType: KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags)
  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags)
- uid: System.Security.Permissions.KeyContainerPermissionFlags
  parent: System.Security.Permissions
  isExternal: false
  name: KeyContainerPermissionFlags
  nameWithType: KeyContainerPermissionFlags
  fullName: System.Security.Permissions.KeyContainerPermissionFlags
- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: KeyContainerPermission(PermissionState)
  nameWithType: KeyContainerPermission.KeyContainerPermission(PermissionState)
  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags,System.Security.Permissions.KeyContainerPermissionAccessEntry[])
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])
  nameWithType: KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])
  fullName: System.Security.Permissions.KeyContainerPermission.KeyContainerPermission(KeyContainerPermissionFlags,KeyContainerPermissionAccessEntry[])
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntry[]
  parent: System.Security.Permissions
  isExternal: false
  name: KeyContainerPermissionAccessEntry
  nameWithType: KeyContainerPermissionAccessEntry
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntry[]
  spec.csharp:
  - uid: System.Security.Permissions.KeyContainerPermissionAccessEntry
    name: KeyContainerPermissionAccessEntry
    nameWithType: KeyContainerPermissionAccessEntry
    fullName: KeyContainerPermissionAccessEntry[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Permissions.KeyContainerPermission.AccessEntries
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: AccessEntries
  nameWithType: KeyContainerPermission.AccessEntries
  fullName: System.Security.Permissions.KeyContainerPermission.AccessEntries
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
  parent: System.Security.Permissions
  isExternal: false
  name: KeyContainerPermissionAccessEntryCollection
  nameWithType: KeyContainerPermissionAccessEntryCollection
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection
- uid: System.Security.Permissions.KeyContainerPermission.Copy
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: Copy()
  nameWithType: KeyContainerPermission.Copy()
  fullName: System.Security.Permissions.KeyContainerPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.KeyContainerPermission.Flags
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: Flags
  nameWithType: KeyContainerPermission.Flags
  fullName: System.Security.Permissions.KeyContainerPermission.Flags
- uid: System.Security.Permissions.KeyContainerPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: KeyContainerPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.KeyContainerPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.KeyContainerPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: KeyContainerPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.KeyContainerPermission.Intersect(IPermission)
- uid: System.Security.Permissions.KeyContainerPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: KeyContainerPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.KeyContainerPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.KeyContainerPermission.IsUnrestricted
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: KeyContainerPermission.IsUnrestricted()
  fullName: System.Security.Permissions.KeyContainerPermission.IsUnrestricted()
- uid: System.Security.Permissions.KeyContainerPermission.ToXml
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: ToXml()
  nameWithType: KeyContainerPermission.ToXml()
  fullName: System.Security.Permissions.KeyContainerPermission.ToXml()
- uid: System.Security.Permissions.KeyContainerPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: KeyContainerPermission.Union(IPermission)
  fullName: System.Security.Permissions.KeyContainerPermission.Union(IPermission)
- uid: System.Security.Permissions.KeyContainerPermission.#ctor*
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: KeyContainerPermission
  nameWithType: KeyContainerPermission.KeyContainerPermission
- uid: System.Security.Permissions.KeyContainerPermission.AccessEntries*
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: AccessEntries
  nameWithType: KeyContainerPermission.AccessEntries
- uid: System.Security.Permissions.KeyContainerPermission.Copy*
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: Copy
  nameWithType: KeyContainerPermission.Copy
- uid: System.Security.Permissions.KeyContainerPermission.Flags*
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: Flags
  nameWithType: KeyContainerPermission.Flags
- uid: System.Security.Permissions.KeyContainerPermission.FromXml*
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: FromXml
  nameWithType: KeyContainerPermission.FromXml
- uid: System.Security.Permissions.KeyContainerPermission.Intersect*
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: Intersect
  nameWithType: KeyContainerPermission.Intersect
- uid: System.Security.Permissions.KeyContainerPermission.IsSubsetOf*
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: KeyContainerPermission.IsSubsetOf
- uid: System.Security.Permissions.KeyContainerPermission.IsUnrestricted*
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: KeyContainerPermission.IsUnrestricted
- uid: System.Security.Permissions.KeyContainerPermission.ToXml*
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: ToXml
  nameWithType: KeyContainerPermission.ToXml
- uid: System.Security.Permissions.KeyContainerPermission.Union*
  parent: System.Security.Permissions.KeyContainerPermission
  isExternal: false
  name: Union
  nameWithType: KeyContainerPermission.Union
