### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.ResourcePermissionBase
  id: ResourcePermissionBase
  children:
  - System.Security.Permissions.ResourcePermissionBase.#ctor
  - System.Security.Permissions.ResourcePermissionBase.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)
  - System.Security.Permissions.ResourcePermissionBase.Any
  - System.Security.Permissions.ResourcePermissionBase.Clear
  - System.Security.Permissions.ResourcePermissionBase.Copy
  - System.Security.Permissions.ResourcePermissionBase.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries
  - System.Security.Permissions.ResourcePermissionBase.Intersect(System.Security.IPermission)
  - System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.ResourcePermissionBase.IsUnrestricted
  - System.Security.Permissions.ResourcePermissionBase.Local
  - System.Security.Permissions.ResourcePermissionBase.PermissionAccessType
  - System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)
  - System.Security.Permissions.ResourcePermissionBase.TagNames
  - System.Security.Permissions.ResourcePermissionBase.ToXml
  - System.Security.Permissions.ResourcePermissionBase.Union(System.Security.IPermission)
  langs:
  - csharp
  name: ResourcePermissionBase
  nameWithType: ResourcePermissionBase
  fullName: System.Security.Permissions.ResourcePermissionBase
  type: Class
  summary: "Allows control of code access security permissions."
  remarks: >-
    > [!NOTE]

    >  The ResourcePermissionBase class compares strings using ordinal sort rules and ignores the case of the strings being compared.
  example:
  - "The following example inherits from the ResourcePermissionBase class. 4 kinds of constructors are implemented. The example also provides an implementation of a class called `MailslotPermissionEntry`. The <xref:System.Security.Permissions.ResourcePermissionBase.PermissionAccessType%2A> property is then privately set to the type of `MailslotPermissionEntry`. The <xref:System.Security.Permissions.ResourcePermissionBase.TagNames%2A> property is set privately to \"Name\" and \"Machine\".  \n  \n [!code-cpp[ResourcePermissionBase#1](~/add/codesnippet/cpp/t-system.security.permis_0_1.cpp)]\n [!code-vb[ResourcePermissionBase#1](~/add/codesnippet/visualbasic/t-system.security.permis_0_1.vb)]\n [!code-cs[ResourcePermissionBase#1](~/add/codesnippet/csharp/t-system.security.permis_0_1.cs)]"
  syntax:
    content: 'public abstract class ResourcePermissionBase : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.#ctor
  id: '#ctor'
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: ResourcePermissionBase()
  nameWithType: ResourcePermissionBase.ResourcePermissionBase()
  fullName: System.Security.Permissions.ResourcePermissionBase.ResourcePermissionBase()
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.ResourcePermissionBase&quot;></xref> class."
  syntax:
    content: protected ResourcePermissionBase ();
    parameters: []
  overload: System.Security.Permissions.ResourcePermissionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: ResourcePermissionBase(PermissionState)
  nameWithType: ResourcePermissionBase.ResourcePermissionBase(PermissionState)
  fullName: System.Security.Permissions.ResourcePermissionBase.ResourcePermissionBase(PermissionState)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.ResourcePermissionBase&quot;></xref> class with the specified level of access to resources at creation."
  syntax:
    content: protected ResourcePermissionBase (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "One of the <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref> values."
  overload: System.Security.Permissions.ResourcePermissionBase.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>state</code> parameter is not a valid value of <xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)
  id: AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: AddPermissionAccess(ResourcePermissionBaseEntry)
  nameWithType: ResourcePermissionBase.AddPermissionAccess(ResourcePermissionBaseEntry)
  fullName: System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(ResourcePermissionBaseEntry)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Adds a permission entry to the permission."
  remarks: ''
  example:
  - "The following example shows the use of the AddPermissionAccess method to add a permission access entry during class initialization. This code example is part of a larger example provided for the <xref:System.Security.Permissions.ResourcePermissionBase> class.  \n  \n [!code-cpp[ResourcePermissionBase#2](~/add/codesnippet/cpp/dfef5eb6-165b-4033-bd02-_1.cpp)]\n [!code-vb[ResourcePermissionBase#2](~/add/codesnippet/visualbasic/dfef5eb6-165b-4033-bd02-_1.vb)]\n [!code-cs[ResourcePermissionBase#2](~/add/codesnippet/csharp/dfef5eb6-165b-4033-bd02-_1.cs)]"
  syntax:
    content: protected void AddPermissionAccess (System.Security.Permissions.ResourcePermissionBaseEntry entry);
    parameters:
    - id: entry
      type: System.Security.Permissions.ResourcePermissionBaseEntry
      description: "The <xref href=&quot;System.Security.Permissions.ResourcePermissionBaseEntry&quot;></xref> to add."
  overload: System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified <xref href=&quot;System.Security.Permissions.ResourcePermissionBaseEntry&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The number of elements in the &lt;xref:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath%2A?displayProperty=fullName&gt; property is not equal to the number of elements in the &lt;xref:System.Security.Permissions.ResourcePermissionBase.TagNames%2A?displayProperty=fullName&gt; property.       -or-       The <xref href=&quot;System.Security.Permissions.ResourcePermissionBaseEntry&quot;></xref> is already included in the permission."
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.Any
  id: Any
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: Any
  nameWithType: ResourcePermissionBase.Any
  fullName: System.Security.Permissions.ResourcePermissionBase.Any
  type: Field
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Specifies the character to be used to represent the any wildcard character."
  remarks: "The value of this field is &quot;*&quot;."
  syntax:
    content: public const string Any;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.Clear
  id: Clear
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: Clear()
  nameWithType: ResourcePermissionBase.Clear()
  fullName: System.Security.Permissions.ResourcePermissionBase.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Clears the permission of the added permission entries."
  syntax:
    content: protected void Clear ();
    parameters: []
  overload: System.Security.Permissions.ResourcePermissionBase.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.Copy
  id: Copy
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: Copy()
  nameWithType: ResourcePermissionBase.Copy()
  fullName: System.Security.Permissions.ResourcePermissionBase.Copy()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Creates and returns an identical copy of the current permission object."
  remarks: "A copy of the permission object represents the same access to resources as the original permission object."
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A copy of the current permission object."
  overload: System.Security.Permissions.ResourcePermissionBase.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: ResourcePermissionBase.FromXml(SecurityElement)
  fullName: System.Security.Permissions.ResourcePermissionBase.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Reconstructs a security object with a specified state from an XML encoding."
  syntax:
    content: public override void FromXml (System.Security.SecurityElement securityElement);
    parameters:
    - id: securityElement
      type: System.Security.SecurityElement
      description: "The XML encoding to use to reconstruct the security object."
  overload: System.Security.Permissions.ResourcePermissionBase.FromXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>securityElement</code> parameter is not a valid permission element.       -or-       The version number of the <code>securityElement</code> parameter is not supported."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>securityElement</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries
  id: GetPermissionEntries
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: GetPermissionEntries()
  nameWithType: ResourcePermissionBase.GetPermissionEntries()
  fullName: System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Returns an array of the <xref href=&quot;System.Security.Permissions.ResourcePermissionBaseEntry&quot;></xref> objects added to this permission."
  remarks: "Use <xref:System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess%2A> and <xref:System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess%2A> to add and remove permission entries to this permission."
  syntax:
    content: protected System.Security.Permissions.ResourcePermissionBaseEntry[] GetPermissionEntries ();
    parameters: []
    return:
      type: System.Security.Permissions.ResourcePermissionBaseEntry[]
      description: "An array of <xref href=&quot;System.Security.Permissions.ResourcePermissionBaseEntry&quot;></xref> objects that were added to this permission."
  overload: System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: ResourcePermissionBase.Intersect(IPermission)
  fullName: System.Security.Permissions.ResourcePermissionBase.Intersect(IPermission)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Creates and returns a permission object that is the intersection of the current permission object and a target permission object."
  remarks: "The intersection of two permission objects is a permission that describes the set of operations they both hold in common. Specifically, it represents the minimum permissions required for a demand to pass both permissions."
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission object of the same type as the current permission object."
    return:
      type: System.Security.IPermission
      description: "A new permission object that represents the intersection of the current object and the specified target. This object is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the intersection is empty."
  overload: System.Security.Permissions.ResourcePermissionBase.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The target permission object is not of the same type as the current permission object."
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: ResourcePermissionBase.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Determines whether the current permission object is a subset of the specified permission."
  remarks: "The current permission object is a subset of the specified permission object if the current permission object specifies a set of operations that is wholly contained by the specified permission object. For example, a permission that represents access to C:\\Example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission object represents no more access to the protected resource than does the specified permission object.  \n  \n This method always returns `false` when the specified permission object is of a different type than that of the current permission object."
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission object that is to be tested for the subset relationship."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current permission object is a subset of the specified permission object; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.ResourcePermissionBase.IsSubsetOf*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: ResourcePermissionBase.IsUnrestricted()
  fullName: System.Security.Permissions.ResourcePermissionBase.IsUnrestricted()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Gets a value indicating whether the permission is unrestricted."
  remarks: "An unrestricted permission object represents access to any and all resources protected by the permission."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if permission is unrestricted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Permissions.ResourcePermissionBase.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.Local
  id: Local
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: Local
  nameWithType: ResourcePermissionBase.Local
  fullName: System.Security.Permissions.ResourcePermissionBase.Local
  type: Field
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Specifies the character to be used to represent a local reference."
  remarks: "The value of this field is &quot;.&quot;."
  syntax:
    content: public const string Local;
    return:
      type: System.String
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.PermissionAccessType
  id: PermissionAccessType
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: PermissionAccessType
  nameWithType: ResourcePermissionBase.PermissionAccessType
  fullName: System.Security.Permissions.ResourcePermissionBase.PermissionAccessType
  type: Property
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Gets or sets an enumeration value that describes the types of access that you are giving the resource."
  syntax:
    content: protected Type PermissionAccessType { get; set; }
    return:
      type: System.Type
      description: "An enumeration value that is derived from <xref:System.Type> and describes the types of access that you are giving the resource."
  overload: System.Security.Permissions.ResourcePermissionBase.PermissionAccessType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The property value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The property value is not an enumeration value."
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)
  id: RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: RemovePermissionAccess(ResourcePermissionBaseEntry)
  nameWithType: ResourcePermissionBase.RemovePermissionAccess(ResourcePermissionBaseEntry)
  fullName: System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(ResourcePermissionBaseEntry)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Removes a permission entry from the permission."
  syntax:
    content: protected void RemovePermissionAccess (System.Security.Permissions.ResourcePermissionBaseEntry entry);
    parameters:
    - id: entry
      type: System.Security.Permissions.ResourcePermissionBaseEntry
      description: "The <xref href=&quot;System.Security.Permissions.ResourcePermissionBaseEntry&quot;></xref> to remove."
  overload: System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified <xref href=&quot;System.Security.Permissions.ResourcePermissionBaseEntry&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The number of elements in the &lt;xref:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath%2A?displayProperty=fullName&gt; property is not equal to the number of elements in the &lt;xref:System.Security.Permissions.ResourcePermissionBase.TagNames%2A?displayProperty=fullName&gt; property.       -or-       The <xref href=&quot;System.Security.Permissions.ResourcePermissionBaseEntry&quot;></xref> is not in the permission."
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.TagNames
  id: TagNames
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: TagNames
  nameWithType: ResourcePermissionBase.TagNames
  fullName: System.Security.Permissions.ResourcePermissionBase.TagNames
  type: Property
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Gets or sets an array of strings that identify the resource you are protecting."
  syntax:
    content: protected string[] TagNames { get; set; }
    return:
      type: System.String[]
      description: "An array of strings that identify the resource you are trying to protect."
  overload: System.Security.Permissions.ResourcePermissionBase.TagNames*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The property value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The length of the array is 0."
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.ToXml
  id: ToXml
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: ToXml()
  nameWithType: ResourcePermissionBase.ToXml()
  fullName: System.Security.Permissions.ResourcePermissionBase.ToXml()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Creates and returns an XML encoding of the security object and its current state."
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "An XML encoding of the security object, including any state information."
  overload: System.Security.Permissions.ResourcePermissionBase.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ResourcePermissionBase.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.ResourcePermissionBase
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: ResourcePermissionBase.Union(IPermission)
  fullName: System.Security.Permissions.ResourcePermissionBase.Union(IPermission)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Permissions
  summary: "Creates a permission object that combines the current permission object and the target permission object."
  remarks: "The result of a call to Union is a permission that represents all the operations represented by both the current permission object and the specified permission object. Any demand that passes either permission passes their union."
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "A permission object to combine with the current permission object. It must be of the same type as the current permission object."
    return:
      type: System.Security.IPermission
      description: "A new permission object that represents the union of the current permission object and the specified permission object."
  overload: System.Security.Permissions.ResourcePermissionBase.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>target</code> permission object is not of the same type as the current permission object."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Permissions.ResourcePermissionBase.#ctor
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: ResourcePermissionBase()
  nameWithType: ResourcePermissionBase.ResourcePermissionBase()
  fullName: System.Security.Permissions.ResourcePermissionBase.ResourcePermissionBase()
- uid: System.Security.Permissions.ResourcePermissionBase.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: ResourcePermissionBase(PermissionState)
  nameWithType: ResourcePermissionBase.ResourcePermissionBase(PermissionState)
  fullName: System.Security.Permissions.ResourcePermissionBase.ResourcePermissionBase(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: AddPermissionAccess(ResourcePermissionBaseEntry)
  nameWithType: ResourcePermissionBase.AddPermissionAccess(ResourcePermissionBaseEntry)
  fullName: System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(ResourcePermissionBaseEntry)
- uid: System.Security.Permissions.ResourcePermissionBaseEntry
  parent: System.Security.Permissions
  isExternal: false
  name: ResourcePermissionBaseEntry
  nameWithType: ResourcePermissionBaseEntry
  fullName: System.Security.Permissions.ResourcePermissionBaseEntry
- uid: System.Security.Permissions.ResourcePermissionBase.Any
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: Any
  nameWithType: ResourcePermissionBase.Any
  fullName: System.Security.Permissions.ResourcePermissionBase.Any
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.ResourcePermissionBase.Clear
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: Clear()
  nameWithType: ResourcePermissionBase.Clear()
  fullName: System.Security.Permissions.ResourcePermissionBase.Clear()
- uid: System.Security.Permissions.ResourcePermissionBase.Copy
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: Copy()
  nameWithType: ResourcePermissionBase.Copy()
  fullName: System.Security.Permissions.ResourcePermissionBase.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.ResourcePermissionBase.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: ResourcePermissionBase.FromXml(SecurityElement)
  fullName: System.Security.Permissions.ResourcePermissionBase.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: GetPermissionEntries()
  nameWithType: ResourcePermissionBase.GetPermissionEntries()
  fullName: System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries()
- uid: System.Security.Permissions.ResourcePermissionBaseEntry[]
  parent: System.Security.Permissions
  isExternal: false
  name: ResourcePermissionBaseEntry
  nameWithType: ResourcePermissionBaseEntry
  fullName: System.Security.Permissions.ResourcePermissionBaseEntry[]
  spec.csharp:
  - uid: System.Security.Permissions.ResourcePermissionBaseEntry
    name: ResourcePermissionBaseEntry
    nameWithType: ResourcePermissionBaseEntry
    fullName: ResourcePermissionBaseEntry[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Permissions.ResourcePermissionBase.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: ResourcePermissionBase.Intersect(IPermission)
  fullName: System.Security.Permissions.ResourcePermissionBase.Intersect(IPermission)
- uid: System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: ResourcePermissionBase.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.ResourcePermissionBase.IsUnrestricted
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: IsUnrestricted()
  nameWithType: ResourcePermissionBase.IsUnrestricted()
  fullName: System.Security.Permissions.ResourcePermissionBase.IsUnrestricted()
- uid: System.Security.Permissions.ResourcePermissionBase.Local
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: Local
  nameWithType: ResourcePermissionBase.Local
  fullName: System.Security.Permissions.ResourcePermissionBase.Local
- uid: System.Security.Permissions.ResourcePermissionBase.PermissionAccessType
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: PermissionAccessType
  nameWithType: ResourcePermissionBase.PermissionAccessType
  fullName: System.Security.Permissions.ResourcePermissionBase.PermissionAccessType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: RemovePermissionAccess(ResourcePermissionBaseEntry)
  nameWithType: ResourcePermissionBase.RemovePermissionAccess(ResourcePermissionBaseEntry)
  fullName: System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(ResourcePermissionBaseEntry)
- uid: System.Security.Permissions.ResourcePermissionBase.TagNames
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: TagNames
  nameWithType: ResourcePermissionBase.TagNames
  fullName: System.Security.Permissions.ResourcePermissionBase.TagNames
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Permissions.ResourcePermissionBase.ToXml
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: ToXml()
  nameWithType: ResourcePermissionBase.ToXml()
  fullName: System.Security.Permissions.ResourcePermissionBase.ToXml()
- uid: System.Security.Permissions.ResourcePermissionBase.Union(System.Security.IPermission)
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: Union(IPermission)
  nameWithType: ResourcePermissionBase.Union(IPermission)
  fullName: System.Security.Permissions.ResourcePermissionBase.Union(IPermission)
- uid: System.Security.Permissions.ResourcePermissionBase.#ctor*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: ResourcePermissionBase
  nameWithType: ResourcePermissionBase.ResourcePermissionBase
- uid: System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: AddPermissionAccess
  nameWithType: ResourcePermissionBase.AddPermissionAccess
- uid: System.Security.Permissions.ResourcePermissionBase.Clear*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: Clear
  nameWithType: ResourcePermissionBase.Clear
- uid: System.Security.Permissions.ResourcePermissionBase.Copy*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: Copy
  nameWithType: ResourcePermissionBase.Copy
- uid: System.Security.Permissions.ResourcePermissionBase.FromXml*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: FromXml
  nameWithType: ResourcePermissionBase.FromXml
- uid: System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: GetPermissionEntries
  nameWithType: ResourcePermissionBase.GetPermissionEntries
- uid: System.Security.Permissions.ResourcePermissionBase.Intersect*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: Intersect
  nameWithType: ResourcePermissionBase.Intersect
- uid: System.Security.Permissions.ResourcePermissionBase.IsSubsetOf*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: IsSubsetOf
  nameWithType: ResourcePermissionBase.IsSubsetOf
- uid: System.Security.Permissions.ResourcePermissionBase.IsUnrestricted*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: IsUnrestricted
  nameWithType: ResourcePermissionBase.IsUnrestricted
- uid: System.Security.Permissions.ResourcePermissionBase.PermissionAccessType*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: PermissionAccessType
  nameWithType: ResourcePermissionBase.PermissionAccessType
- uid: System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: RemovePermissionAccess
  nameWithType: ResourcePermissionBase.RemovePermissionAccess
- uid: System.Security.Permissions.ResourcePermissionBase.TagNames*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: TagNames
  nameWithType: ResourcePermissionBase.TagNames
- uid: System.Security.Permissions.ResourcePermissionBase.ToXml*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: ToXml
  nameWithType: ResourcePermissionBase.ToXml
- uid: System.Security.Permissions.ResourcePermissionBase.Union*
  parent: System.Security.Permissions.ResourcePermissionBase
  isExternal: false
  name: Union
  nameWithType: ResourcePermissionBase.Union
