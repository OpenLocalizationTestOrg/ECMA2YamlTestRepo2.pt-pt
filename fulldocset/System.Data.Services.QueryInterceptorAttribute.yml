### YamlMime:ManagedReference
items:
- uid: System.Data.Services.QueryInterceptorAttribute
  id: QueryInterceptorAttribute
  children:
  - System.Data.Services.QueryInterceptorAttribute.#ctor(System.String)
  - System.Data.Services.QueryInterceptorAttribute.EntitySetName
  langs:
  - csharp
  name: QueryInterceptorAttribute
  nameWithType: QueryInterceptorAttribute
  fullName: System.Data.Services.QueryInterceptorAttribute
  type: Class
  summary: "The QueryInterceptorAttribute on a method annotates it as a query interceptor on the specified entity set."
  remarks: "Entity set-level authorization and validation is implemented by methods annotated with the QueryInterceptorAttribute. [!INCLUDE[ssAstoria](~/add/includes/ssastoria-md.md)]s do not implement security policies but instead provide the infrastructure required for service developers to write their own security rules and business validation.       Entity set access control and validation is enabled through query operations by using query composition. To control entity-based access, implement a method-per-entity set according to the following rules:       The method must have public scope and be annotated with the QueryInterceptorAttribute, taking the name of a entity set as a parameter.       The method must accept no parameters.       The method must return an expression of type `Expression<Func<T, bool>>` that is the filter to be composed for the entity set."
  example:
  - "The following example controls access to the `Customers` entity set. Each `Customer` can only see `Orders` associated with that `Customer`.  \n  \n```  \n[QueryInterceptor(\"Orders\")]  \npublic Expression<Func<Order, bool>> FilterOrders()   \n{  \n    return o => o.Customer.Name == /* Current principal name. */;  \n}   \n  \n// Insures that the user accessing the customer(s) has the appropriate  \n// rights as defined in the QueryRules object to access the customer  \n// resource(s).  \n  \n[QueryInterceptor (\"Customers\")]  \npublic Expression<Func<Customer, bool>> FilterCustomers()   \n{  \n  return c => c.Name == /* Current principal name. */ &&  \n              this.CurrentDataSource.QueryRules.Contains(  \n                rule => rule.Name == c.Name &&  \n                        rule.CustomerAllowedToQuery == true  \n              );  \n}  \n  \n```"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=true)]

      public sealed class QueryInterceptorAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Services.QueryInterceptorAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.Services.QueryInterceptorAttribute
  langs:
  - csharp
  name: QueryInterceptorAttribute(String)
  nameWithType: QueryInterceptorAttribute.QueryInterceptorAttribute(String)
  fullName: System.Data.Services.QueryInterceptorAttribute.QueryInterceptorAttribute(String)
  type: Constructor
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.Services.QueryInterceptorAttribute&quot;></xref> class for the entity set specified by the <code>entitySetName</code> parameter."
  syntax:
    content: public QueryInterceptorAttribute (string entitySetName);
    parameters:
    - id: entitySetName
      type: System.String
      description: "The name of the entity set that contains the entity to which the interceptor applies."
  overload: System.Data.Services.QueryInterceptorAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.QueryInterceptorAttribute.EntitySetName
  id: EntitySetName
  parent: System.Data.Services.QueryInterceptorAttribute
  langs:
  - csharp
  name: EntitySetName
  nameWithType: QueryInterceptorAttribute.EntitySetName
  fullName: System.Data.Services.QueryInterceptorAttribute.EntitySetName
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "Gets the name of the entity set that contains the entity to which the interceptor applies."
  syntax:
    content: public string EntitySetName { get; }
    return:
      type: System.String
      description: "A string that indicates the name of the entity set that contains the entity to which the interceptor applies."
  overload: System.Data.Services.QueryInterceptorAttribute.EntitySetName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Data.Services.QueryInterceptorAttribute.#ctor(System.String)
  parent: System.Data.Services.QueryInterceptorAttribute
  isExternal: false
  name: QueryInterceptorAttribute(String)
  nameWithType: QueryInterceptorAttribute.QueryInterceptorAttribute(String)
  fullName: System.Data.Services.QueryInterceptorAttribute.QueryInterceptorAttribute(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Services.QueryInterceptorAttribute.EntitySetName
  parent: System.Data.Services.QueryInterceptorAttribute
  isExternal: false
  name: EntitySetName
  nameWithType: QueryInterceptorAttribute.EntitySetName
  fullName: System.Data.Services.QueryInterceptorAttribute.EntitySetName
- uid: System.Data.Services.QueryInterceptorAttribute.#ctor*
  parent: System.Data.Services.QueryInterceptorAttribute
  isExternal: false
  name: QueryInterceptorAttribute
  nameWithType: QueryInterceptorAttribute.QueryInterceptorAttribute
- uid: System.Data.Services.QueryInterceptorAttribute.EntitySetName*
  parent: System.Data.Services.QueryInterceptorAttribute
  isExternal: false
  name: EntitySetName
  nameWithType: QueryInterceptorAttribute.EntitySetName
