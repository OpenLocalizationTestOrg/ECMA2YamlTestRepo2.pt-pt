### YamlMime:ManagedReference
items:
- uid: System.IO.FileSystemWatcher
  id: FileSystemWatcher
  children:
  - System.IO.FileSystemWatcher.#ctor
  - System.IO.FileSystemWatcher.#ctor(System.String)
  - System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  - System.IO.FileSystemWatcher.BeginInit
  - System.IO.FileSystemWatcher.Changed
  - System.IO.FileSystemWatcher.Created
  - System.IO.FileSystemWatcher.Deleted
  - System.IO.FileSystemWatcher.Dispose(System.Boolean)
  - System.IO.FileSystemWatcher.EnableRaisingEvents
  - System.IO.FileSystemWatcher.EndInit
  - System.IO.FileSystemWatcher.Error
  - System.IO.FileSystemWatcher.Filter
  - System.IO.FileSystemWatcher.IncludeSubdirectories
  - System.IO.FileSystemWatcher.InternalBufferSize
  - System.IO.FileSystemWatcher.NotifyFilter
  - System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  - System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  - System.IO.FileSystemWatcher.Path
  - System.IO.FileSystemWatcher.Renamed
  - System.IO.FileSystemWatcher.Site
  - System.IO.FileSystemWatcher.SynchronizingObject
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  langs:
  - csharp
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher
  fullName: System.IO.FileSystemWatcher
  type: Class
  summary: "Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.       To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use FileSystemWatcher to watch for changes in a specified directory. You can watch for changes in files and subdirectories of the specified directory. You can create a component to watch files on a local computer, a network drive, or a remote computer.  \n  \n To watch for changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string (\"\") or use wildcards (\"*.\\*\"). To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name. For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"\\*.txt\".  \n  \n There are several types of changes you can watch for in a directory or file. For example, you can watch for changes in `Attributes`, the `LastWrite` date and time, or the `Size` of files or directories. This is done by setting the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to one of the <xref:System.IO.NotifyFilters> values. For more information on the type of changes you can watch, see <xref:System.IO.NotifyFilters>.  \n  \n You can watch for renaming, deletion, or creation of files or directories. For example, to watch for renaming of text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"*.txt\" and call the <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method with a <xref:System.IO.WatcherChangeTypes> specified for its parameter.  \n  \n The Windows operating system notifies your component of file changes in a buffer created by the FileSystemWatcher. If there are many changes in a short time, the buffer can overflow. This causes the component to lose track of changes in the directory, and it will only provide blanket notification. Increasing the size of the buffer with the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events. To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties so you can filter out unwanted change notifications.  \n  \n For a list of initial property values for an instance of FileSystemWatcher, see the <xref:System.IO.FileSystemWatcher.%23ctor%2A> constructor.  \n  \n Please note the following when using the FileSystemWatcher class.  \n  \n-   Hidden files are not ignored.  \n  \n-   In some systems, FileSystemWatcher reports changes to files using the short 8.3 file name format. For example, a change to  \"LongFileName.LongExtension\" could be reported as \"LongFil~.Lon\".  \n  \n-   This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md).  \n  \n-   The maximum size you can set for the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property for monitoring a directory over the network is 64 KB.  \n  \n> [!NOTE]\n>  Running FileSystemWatcher on Windows 98 is not supported.  \n  \n## Copying and moving folders  \n The operating system and FileSystemWatcher object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents. If you cut and paste a folder with files into a folder being watched, the FileSystemWatcher object reports only the folder as new, but not its contents because they are essentially only renamed.  \n  \n To be notified that the contents of folders have been moved or copied into a watched folder, provide <xref:System.IO.FileSystemWatcher.OnChanged%2A> and <xref:System.IO.FileSystemWatcher.OnRenamed%2A> event handler methods as suggested in the following table.  \n  \n|Event Handler|Events Handled|Performs|  \n|-------------------|--------------------|--------------|  \n|<xref:System.IO.FileSystemWatcher.OnChanged%2A>|<xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>|Report changes in file attributes, created files, and deleted files.|  \n|<xref:System.IO.FileSystemWatcher.OnRenamed%2A>|<xref:System.IO.FileSystemWatcher.Renamed>|List the old and new paths of renamed files and folders, expanding recursively if needed.|  \n  \n## Events and Buffer Sizes  \n Note that several factors can affect which file system change events are raised, as described by the following:  \n  \n-   Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by FileSystemWatcher.  \n  \n-   The FileSystemWatcher can watch disks as long as they are not switched or removed. The FileSystemWatcher does not raise events for CDs and DVDs, because time stamps and properties cannot change. Remote computers must have one of the required platforms installed for the component to function properly.  \n  \n-   If multiple FileSystemWatcher objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event. On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all FileSystemWatcher objects will raise the appropriate events.  \n  \n Note that a FileSystemWatcher may miss an event when the buffer size is exceeded. To avoid missing events, follow these guidelines:  \n  \n-   Increase the buffer size by setting the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property.  \n  \n-   Avoid watching files with long file names, because a long file name contributes to filling up the buffer. Consider renaming these files using shorter names.  \n  \n-   Keep your event handling code as short as possible."
  example:
  - "The following example creates a FileSystemWatcher to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/t-system.io.filesystemwa_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/t-system.io.filesystemwa_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/t-system.io.filesystemwa_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Changed")]

      [System.IO.IODescription("FileSystemWatcherDesc")]

      public class FileSystemWatcher : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor
  id: '#ctor'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher()
  nameWithType: FileSystemWatcher.FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Initializes a new instance of the <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref> class."
  remarks: "You cannot watch a remote computer that does not have Windows NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.  \n  \n The following table shows initial property values for an instance of <xref:System.IO.FileSystemWatcher>.  \n  \n|Property|Initial Value|  \n|--------------|-------------------|  \n|<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>|bitwise OR combination of `LastWrite`, `FileName`, and `DirectoryName`|  \n|<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>|`false`|  \n|<xref:System.IO.FileSystemWatcher.Filter%2A>|\"*.\\*\" (Watch all files.)|  \n|<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>|`false`|  \n|<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>|8192|  \n|<xref:System.IO.FileSystemWatcher.Path%2A>|empty string (\"\")|  \n  \n> [!NOTE]\n>  The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> object to watch the directory specified at run time. The <xref:System.IO.FileSystemWatcher> object watches for changes in `LastWrite` and `LastAccess` times, and for the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file displays to the console. When a file is renamed, the old and new paths display to the console.  \n  \n This example uses the <xref:System.Diagnostics> and <xref:System.IO> namespaces.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/m-system.io.filesystemwa_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/m-system.io.filesystemwa_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/m-system.io.filesystemwa_1.vb)]"
  syntax:
    content: public FileSystemWatcher ();
    parameters: []
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher(String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Initializes a new instance of the <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref> class, given the specified directory to monitor."
  remarks: "> [!NOTE] >  The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.       The component can watch files on your personal computer, a network drive, or a remote computer.       You cannot watch a remote computer that does not have Windows NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer. The <xref:System.IO.FileSystemWatcher.Filter%2A> property is set by default to watch all files."
  syntax:
    content: public FileSystemWatcher (string path);
    parameters:
    - id: path
      type: System.String
      description: "The directory to monitor, in standard or Universal Naming Convention (UNC) notation."
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> parameter is an empty string (&quot;&quot;).       -or-       The path specified through the <code>path</code> parameter does not exist."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code> is too long."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher(String,String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String,String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Initializes a new instance of the <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref> class, given the specified directory and type of files to monitor."
  remarks: "> [!NOTE] >  The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`.       The component can watch files on your personal computer, a network drive, or a remote computer.       You cannot watch a remote computer that does not have Windows NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer."
  syntax:
    content: public FileSystemWatcher (string path, string filter);
    parameters:
    - id: path
      type: System.String
      description: "The directory to monitor, in standard or Universal Naming Convention (UNC) notation."
    - id: filter
      type: System.String
      description: "The type of files to watch. For example, &quot;*.txt&quot; watches for changes to all text files."
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>filter</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> parameter is an empty string (&quot;&quot;).       -or-       The path specified through the <code>path</code> parameter does not exist."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code> is too long."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.BeginInit
  id: BeginInit
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: BeginInit()
  nameWithType: FileSystemWatcher.BeginInit()
  fullName: System.IO.FileSystemWatcher.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Begins the initialization of a <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref> used on a form or used by another component. The initialization occurs at run time."
  remarks: "The [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] design environment uses this method to start the initialization of a component used on a form or used by another component. The <xref:System.IO.FileSystemWatcher.EndInit%2A> method ends the initialization. Using the BeginInit and <xref:System.IO.FileSystemWatcher.EndInit%2A> methods prevents the control from being used before it is fully initialized."
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.IO.FileSystemWatcher.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Changed
  id: Changed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Changed
  nameWithType: FileSystemWatcher.Changed
  fullName: System.IO.FileSystemWatcher.Changed
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Occurs when a file or directory in the specified <xref:System.IO.FileSystemWatcher.Path*> is changed."
  remarks: "The Changed event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.      > [!NOTE] >  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.       Use <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> to restrict the number of notifications raised when this event is handled.      > [!NOTE] >  The Changed event is raised unexpectedly when a file is renamed, but is not raised when a directory is renamed. To watch for renaming, use the <xref:System.IO.FileSystemWatcher.Renamed> event.      > [!NOTE] >  The order in which the Changed event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`."
  example:
  - "The following example uses the Changed event to display the file path to the console whenever the watched file is changed.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_0_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_0_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_0_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Changed;
    return:
      type: System.IO.FileSystemEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Created
  id: Created
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Created
  nameWithType: FileSystemWatcher.Created
  fullName: System.IO.FileSystemWatcher.Created
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Occurs when a file or directory in the specified <xref:System.IO.FileSystemWatcher.Path*> is created."
  remarks: "Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a Created event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a Created event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a Created event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.  \n  \n> [!NOTE]\n>  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.  \n  \n> [!NOTE]\n>  The order in which the Created event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.  \n  \n The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events."
  example:
  - "The following example uses the Created event to display the file path to the console whenever the watched file is created.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_3_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_3_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_3_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Created;
    return:
      type: System.IO.FileSystemEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Deleted
  id: Deleted
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Deleted
  nameWithType: FileSystemWatcher.Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Occurs when a file or directory in the specified <xref:System.IO.FileSystemWatcher.Path*> is deleted."
  remarks: "Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a Deleted event would be raised by FileSystemWatcher1.  \n  \n> [!NOTE]\n>  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.  \n  \n> [!NOTE]\n>  The order in which the Deleted event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`."
  example:
  - "The following example uses the Deleted event to display the file path to the console whenever the watched file is deleted.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_1_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_1_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_1_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Deleted;
    return:
      type: System.IO.FileSystemEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FileSystemWatcher.Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Releases the unmanaged resources used by the <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref> and optionally releases the managed resources."
  remarks: "This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected Dispose method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes Dispose with `disposing` set to `false`.       When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.Compression.DeflateStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to release both managed and unmanaged resources; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> to release only unmanaged resources."
  overload: System.IO.FileSystemWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Gets or sets a value indicating whether the component is enabled."
  remarks: "The component will not raise events unless you set EnableRaisingEvents to `true`.      > [!NOTE] >  The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> property has been set and EnableRaisingEvents is `true`.       The <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method allows event handlers to be invoked to respond to file changes even if this property is set to `false`."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_2_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_2_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_2_1.vb)]"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the component is enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. If you are using the component on a designer in [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], the default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IO.FileSystemWatcher.EnableRaisingEvents*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref> object has been disposed."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Microsoft Windows NT or later."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The directory specified in <xref:System.IO.FileSystemWatcher.Path*> could not be found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.IO.FileSystemWatcher.Path*> has not been set or is invalid."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.EndInit
  id: EndInit
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: EndInit()
  nameWithType: FileSystemWatcher.EndInit()
  fullName: System.IO.FileSystemWatcher.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Ends the initialization of a <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref> used on a form or used by another component. The initialization occurs at run time."
  remarks: "The [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] design environment uses this method to end the initialization of a component used on a form or used by another component. The <xref:System.IO.FileSystemWatcher.BeginInit%2A> method starts the initialization. Using the <xref:System.IO.FileSystemWatcher.BeginInit%2A> and EndInit methods prevents the control from being used before it is fully initialized."
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.IO.FileSystemWatcher.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Error
  id: Error
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Error
  nameWithType: FileSystemWatcher.Error
  fullName: System.IO.FileSystemWatcher.Error
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Occurs when the instance of <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref> is unable to continue monitoring changes or when the internal buffer overflows."
  remarks: "This event is raised whenever something prevents the <xref:System.IO.FileSystemWatcher> object from monitoring changes. For example, if the object is monitoring changes in a remote directory and the connection to that directory is lost, the Error event is raised.       The system notifies you of file changes, and it stores those changes in a buffer that the component creates and passes to the APIs. If there are many changes in a short time, the buffer can overflow. This causes the component to lose track of changes in the directory, and it will only provide blanket notification. Increasing the size of the buffer is expensive, because it comes from non paged memory that cannot be swapped out to disk, so keep the buffer as small as possible. To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties to filter out unwanted change notifications.      > [!NOTE] >  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>."
  syntax:
    content: public event System.IO.ErrorEventHandler Error;
    return:
      type: System.IO.ErrorEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Filter
  id: Filter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Filter
  nameWithType: FileSystemWatcher.Filter
  fullName: System.IO.FileSystemWatcher.Filter
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Gets or sets the filter string used to determine what files are monitored in a directory."
  remarks: "To watch changes in all files, set the Filter property to an empty string (\"\"). To watch a specific file, set the Filter property to the file name. For example, to watch for changes in the file MyDoc.txt, set the Filter property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in any text files, set the Filter property to \"*.txt\". Use of multiple filters such as \"\\*.txt&#124;\\*.doc\" is not supported.  \n  \n The Filter property can be changed after the <xref:System.IO.FileSystemWatcher> object has started receiving events.  \n  \n For more information about filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.  \n  \n Filter accepts wildcards for matching files, as shown in the following examples.  \n  \n|Filter string|Watches the following files|  \n|-------------------|---------------------------------|  \n|*.\\*|All files (default). An empty string (\"\") also watches all files.|  \n|*.txt|All files with a \"txt\" extension.|  \n|*recipe.doc|All files ending in \"recipe\" with a \"doc\" extension.|  \n|win*.xml|All files beginning with \"win\" with an \"xml\" extension.|  \n|Sales*200?.xls|Matches the following:<br /><br /> Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls<br /><br /> but does not match:<br /><br /> Sales Nov 1999.xls|  \n|MyReport.Doc|Watches only MyReport.doc|"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_3_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_3_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_3_1.vb)]"
  syntax:
    content: public string Filter { get; set; }
    return:
      type: System.String
      description: "The filter string. The default is &quot;*.\\*&quot; (Watches all files.)"
  overload: System.IO.FileSystemWatcher.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  id: IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Gets or sets a value indicating whether subdirectories within the specified path should be monitored."
  remarks: "Set IncludeSubdirectories to `true` when you want to watch for change notifications for files and directories contained within the directory specified through the <xref:System.IO.FileSystemWatcher.Path%2A> property, and its subdirectories. Setting the IncludeSubdirectories property to `false` helps reduce the number of notifications sent to the internal buffer. For more information on filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.       When `true`, IncludeSubdirectories is recursive through the entire sub tree, not just the immediate child directories. The relative path to a file or directory within the sub tree returns in the <xref:System.IO.FileSystemEventArgs.Name%2A> property of <xref:System.IO.FileSystemEventArgs> and the <xref:System.IO.RenamedEventArgs.OldName%2A> property of <xref:System.IO.RenamedEventArgs>, depending on changes you are watching for. You can get the fully qualified path from the <xref:System.IO.FileSystemEventArgs.FullPath%2A> property of <xref:System.IO.FileSystemEventArgs> and the <xref:System.IO.RenamedEventArgs.OldFullPath%2A> property of <xref:System.IO.RenamedEventArgs>, depending on the changes you are watching for.       If a directory is created in the sub tree of the directory you are watching, and IncludeSubdirectories is `true`, that directory will automatically be watched."
  syntax:
    content: public bool IncludeSubdirectories { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if you want to monitor subdirectories; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.FileSystemWatcher.IncludeSubdirectories*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  id: InternalBufferSize
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Gets or sets the size (in bytes) of the internal buffer."
  remarks: "You can set the buffer to 4 KB or larger, but it must not exceed 64 KB. If you try to set the InternalBufferSize property to less than 4096 bytes, your value is discarded and the InternalBufferSize property is set to 4096 bytes. For best performance, use a multiple of 4 KB on Intel-based computers.       The system notifies the component of file changes, and it stores those changes in a buffer the component creates and passes to the APIs. Each event can use up to 16 bytes of memory, not including the file name. If there are many changes in a short time, the buffer can overflow. This causes the component to lose track of changes in the directory, and it will only provide blanket notification. Increasing the size of the buffer can prevent missing file system change events. However, increasing buffer size is expensive, because it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small as possible. To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties to filter out unwanted change notifications."
  syntax:
    content: public int InternalBufferSize { get; set; }
    return:
      type: System.Int32
      description: "The internal buffer size in bytes. The default is 8192 (8 KB)."
  overload: System.IO.FileSystemWatcher.InternalBufferSize*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.NotifyFilter
  id: NotifyFilter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Gets or sets the type of changes to watch for."
  remarks: "You can combine the members of the <xref:System.IO.NotifyFilters> enumeration to watch for more than one type of change at a time. For example, you can watch for changes in size of a file, and for changes in the `LastWrite` time. This raises an event anytime there is a change in file or folder size, or a change in the `LastWrite` time of the file or folder.       This is one way to filter out unwanted notifications. For more information on filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_0_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_0_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_0_1.vb)]"
  syntax:
    content: public System.IO.NotifyFilters NotifyFilter { get; set; }
    return:
      type: System.IO.NotifyFilters
      description: "One of the <xref href=&quot;System.IO.NotifyFilters&quot;></xref> values. The default is the bitwise OR combination of <xref uid=&quot;langword_csharp_LastWrite&quot; name=&quot;LastWrite&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_FileName&quot; name=&quot;FileName&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_DirectoryName&quot; name=&quot;DirectoryName&quot; href=&quot;&quot;></xref>."
  overload: System.IO.FileSystemWatcher.NotifyFilter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value is not a valid bitwise OR combination of the <xref href=&quot;System.IO.NotifyFilters&quot;></xref> values."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "The value that is being set is not valid."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  id: OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnChanged(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Raises the <xref href=&quot;System.IO.FileSystemWatcher.Changed&quot;></xref> event."
  remarks: "OnChanged is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.       Use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to restrict the number of events raised when the <xref:System.IO.FileSystemWatcher.Changed> event is handled.       The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more OnChanged events.       Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnChanged (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "A <xref href=&quot;System.IO.FileSystemEventArgs&quot;></xref> that contains the event data."
  overload: System.IO.FileSystemWatcher.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  id: OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnCreated(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Raises the <xref href=&quot;System.IO.FileSystemWatcher.Created&quot;></xref> event."
  remarks: "OnCreated is called when a file or directory is created in the directory being monitored.  \n  \n Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" and paste it into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised in FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised in FileSystemWatcher1.  \n  \n The OnCreated event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the OnCreated event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnCreated (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "A <xref href=&quot;System.IO.FileSystemEventArgs&quot;></xref> that contains the event data."
  overload: System.IO.FileSystemWatcher.OnCreated*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  id: OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnDeleted(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Raises the <xref href=&quot;System.IO.FileSystemWatcher.Deleted&quot;></xref> event."
  remarks: "OnDeleted is called when a file or directory, within the directory being monitored, is deleted.  \n  \n Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnDeleted (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "A <xref href=&quot;System.IO.FileSystemEventArgs&quot;></xref> that contains the event data."
  overload: System.IO.FileSystemWatcher.OnDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  id: OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnError(ErrorEventArgs)
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(ErrorEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Raises the <xref href=&quot;System.IO.FileSystemWatcher.Error&quot;></xref> event."
  remarks: "OnError is called when an error occurs.       Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnError (System.IO.ErrorEventArgs e);
    parameters:
    - id: e
      type: System.IO.ErrorEventArgs
      description: "An <xref href=&quot;System.IO.ErrorEventArgs&quot;></xref> that contains the event data."
  overload: System.IO.FileSystemWatcher.OnError*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  id: OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnRenamed(RenamedEventArgs)
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(RenamedEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Raises the <xref href=&quot;System.IO.FileSystemWatcher.Renamed&quot;></xref> event."
  remarks: "OnRenamed is called when a file or directory within the directory being monitored is renamed.       Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnRenamed (System.IO.RenamedEventArgs e);
    parameters:
    - id: e
      type: System.IO.RenamedEventArgs
      description: "A <xref href=&quot;System.IO.RenamedEventArgs&quot;></xref> that contains the event data."
  overload: System.IO.FileSystemWatcher.OnRenamed*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Path
  id: Path
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Path
  nameWithType: FileSystemWatcher.Path
  fullName: System.IO.FileSystemWatcher.Path
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Gets or sets the path of the directory to watch."
  remarks: "This is a fully qualified path to a directory. If the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property is `true`, this directory is the root at which the system watches for changes; otherwise it is the only directory watched. To watch a specific file, set the Path property to the fully qualified, correct directory, and the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.  \n  \n The Path property supports Universal Naming Convention (UNC) paths.  \n  \n> [!NOTE]\n>  This property must be set before the component can watch for changes.  \n  \n When a directory is renamed, the <xref:System.IO.FileSystemWatcher> automatically reattaches itself to the newly renamed item. For example, if you set the Path property to \"C:\\My Documents\" and then manually rename the directory to \"C:\\Your Documents\", the component continues listening for change notifications on the newly renamed directory. However, when you ask for the Path property, it contains the old path. This happens because the component determines what directory watches based on the handle, rather than the name of the directory. Renaming does not affect the handle. So, if you destroy the component, and then recreate it without updating the Path property, your application will fail because the directory no longer exists."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_1_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_1_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_1_1.vb)]"
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "The path to monitor. The default is an empty string (&quot;&quot;)."
  overload: System.IO.FileSystemWatcher.Path*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The specified path does not exist or could not be found.       -or-       The specified path contains wildcard characters.       -or-       The specified path contains invalid path characters."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Renamed
  id: Renamed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Renamed
  nameWithType: FileSystemWatcher.Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Occurs when a file or directory in the specified <xref:System.IO.FileSystemWatcher.Path*> is renamed."
  remarks: "Renaming the directory you are watching will not raise a notification. Notifications are only raised for entries inside the directory you are watching."
  example:
  - "The following example uses the Renamed event to display the file path to the console whenever the watched file is renamed.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_2_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_2_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_2_1.vb)]"
  syntax:
    content: public event System.IO.RenamedEventHandler Renamed;
    return:
      type: System.IO.RenamedEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Site
  id: Site
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Site
  nameWithType: FileSystemWatcher.Site
  fullName: System.IO.FileSystemWatcher.Site
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Gets or sets an <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref>."
  remarks: "Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Design.IDesignerHost.Container%2A> and enable communication between them, as well as provide a way for the container to manage its components."
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref>."
  overload: System.IO.FileSystemWatcher.Site*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.SynchronizingObject
  id: SynchronizingObject
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
  fullName: System.IO.FileSystemWatcher.SynchronizingObject
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Gets or sets the object used to marshal the event handler calls issued as a result of a directory change."
  remarks: "When SynchronizingObject is `null`, methods handling the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events are called on a thread from the system thread pool. For more information on system thread pools, see <xref:System.Threading.ThreadPool>.       When the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events are handled by a visual Windows Forms component, such as a <xref:System.Windows.Forms.Button>, accessing the component through the system thread pool might not work, or may result in an exception. Avoid this by setting SynchronizingObject to a Windows Forms component, which causes the methods that handle the <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, and <xref:System.IO.FileSystemWatcher.Renamed> events to be called on the same thread on which the component was created.       If the <xref:System.IO.FileSystemWatcher> is used inside [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] in a Windows Forms designer, SynchronizingObject automatically sets to the control that contains the <xref:System.IO.FileSystemWatcher>. For example, if you place a <xref:System.IO.FileSystemWatcher> on a designer for Form1 (which inherits from <xref:System.Windows.Forms.Form>) the SynchronizingObject property of <xref:System.IO.FileSystemWatcher> is set to the instance of Form1."
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "The <xref href=&quot;System.ComponentModel.ISynchronizeInvoke&quot;></xref> that represents the object used to marshal the event handler calls issued as a result of a directory change. The default is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.IO.FileSystemWatcher.SynchronizingObject*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  id: WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: WaitForChanged(WatcherChangeTypes)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor."
  remarks: "This method waits indefinitely until the first change occurs and then returns. This is the same as using WaitForChanged with the `timeout` parameter set to -1.      > [!NOTE] >  This method allows an event handler to be invoked to respond to file changes even if the <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> property is set to `false`.       In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format. For example, a change to  &quot;LongFileName.LongExtension&quot; could be reported as &quot;LongFi~.Lon&quot;."
  syntax:
    content: public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType);
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "The <xref href=&quot;System.IO.WatcherChangeTypes&quot;></xref> to watch for."
    return:
      type: System.IO.WaitForChangedResult
      description: "A <xref href=&quot;System.IO.WaitForChangedResult&quot;></xref> that contains specific information on the change that occurred."
  overload: System.IO.FileSystemWatcher.WaitForChanged*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  id: WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: WaitForChanged(WatcherChangeTypes,Int32)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out."
  remarks: "This method waits until a change occurs or it has timed out. A value of -1 for the `timeout` parameter means wait indefinitely.      > [!NOTE] >  This method allows an event handler to be invoked to respond to file changes even if the <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> property is set to `false`.       In some systems, <xref:System.IO.FileSystemWatcher> reports changes to files using the short 8.3 file name format. For example, a change to  &quot;LongFileName.LongExtension&quot; could be reported as &quot;LongFi~.Lon&quot;."
  syntax:
    content: public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType, int timeout);
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "The <xref href=&quot;System.IO.WatcherChangeTypes&quot;></xref> to watch for."
    - id: timeout
      type: System.Int32
      description: "The time (in milliseconds) to wait before timing out."
    return:
      type: System.IO.WaitForChangedResult
      description: "A <xref href=&quot;System.IO.WaitForChangedResult&quot;></xref> that contains specific information on the change that occurred."
  overload: System.IO.FileSystemWatcher.WaitForChanged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.IO.FileSystemWatcher.#ctor
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher()
  nameWithType: FileSystemWatcher.FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher(String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher(String,String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String,String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String,String)
- uid: System.IO.FileSystemWatcher.BeginInit
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: BeginInit()
  nameWithType: FileSystemWatcher.BeginInit()
  fullName: System.IO.FileSystemWatcher.BeginInit()
- uid: System.IO.FileSystemWatcher.Changed
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Changed
  nameWithType: FileSystemWatcher.Changed
  fullName: System.IO.FileSystemWatcher.Changed
- uid: System.IO.FileSystemEventHandler
  parent: System.IO
  isExternal: false
  name: FileSystemEventHandler
  nameWithType: FileSystemEventHandler
  fullName: System.IO.FileSystemEventHandler
- uid: System.IO.FileSystemWatcher.Created
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Created
  nameWithType: FileSystemWatcher.Created
  fullName: System.IO.FileSystemWatcher.Created
- uid: System.IO.FileSystemWatcher.Deleted
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Deleted
  nameWithType: FileSystemWatcher.Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FileSystemWatcher.Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.EndInit
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EndInit()
  nameWithType: FileSystemWatcher.EndInit()
  fullName: System.IO.FileSystemWatcher.EndInit()
- uid: System.IO.FileSystemWatcher.Error
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Error
  nameWithType: FileSystemWatcher.Error
  fullName: System.IO.FileSystemWatcher.Error
- uid: System.IO.ErrorEventHandler
  parent: System.IO
  isExternal: false
  name: ErrorEventHandler
  nameWithType: ErrorEventHandler
  fullName: System.IO.ErrorEventHandler
- uid: System.IO.FileSystemWatcher.Filter
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Filter
  nameWithType: FileSystemWatcher.Filter
  fullName: System.IO.FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.FileSystemWatcher.NotifyFilter
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
- uid: System.IO.NotifyFilters
  parent: System.IO
  isExternal: false
  name: NotifyFilters
  nameWithType: NotifyFilters
  fullName: System.IO.NotifyFilters
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnChanged(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(FileSystemEventArgs)
- uid: System.IO.FileSystemEventArgs
  parent: System.IO
  isExternal: false
  name: FileSystemEventArgs
  nameWithType: FileSystemEventArgs
  fullName: System.IO.FileSystemEventArgs
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnCreated(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnDeleted(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnError(ErrorEventArgs)
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(ErrorEventArgs)
- uid: System.IO.ErrorEventArgs
  parent: System.IO
  isExternal: false
  name: ErrorEventArgs
  nameWithType: ErrorEventArgs
  fullName: System.IO.ErrorEventArgs
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnRenamed(RenamedEventArgs)
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(RenamedEventArgs)
- uid: System.IO.RenamedEventArgs
  parent: System.IO
  isExternal: false
  name: RenamedEventArgs
  nameWithType: RenamedEventArgs
  fullName: System.IO.RenamedEventArgs
- uid: System.IO.FileSystemWatcher.Path
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Path
  nameWithType: FileSystemWatcher.Path
  fullName: System.IO.FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Renamed
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Renamed
  nameWithType: FileSystemWatcher.Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
- uid: System.IO.RenamedEventHandler
  parent: System.IO
  isExternal: false
  name: RenamedEventHandler
  nameWithType: RenamedEventHandler
  fullName: System.IO.RenamedEventHandler
- uid: System.IO.FileSystemWatcher.Site
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Site
  nameWithType: FileSystemWatcher.Site
  fullName: System.IO.FileSystemWatcher.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.IO.FileSystemWatcher.SynchronizingObject
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
  fullName: System.IO.FileSystemWatcher.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged(WatcherChangeTypes)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
- uid: System.IO.WaitForChangedResult
  parent: System.IO
  isExternal: false
  name: WaitForChangedResult
  nameWithType: WaitForChangedResult
  fullName: System.IO.WaitForChangedResult
- uid: System.IO.WatcherChangeTypes
  parent: System.IO
  isExternal: false
  name: WatcherChangeTypes
  nameWithType: WatcherChangeTypes
  fullName: System.IO.WatcherChangeTypes
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged(WatcherChangeTypes,Int32)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
- uid: System.IO.FileSystemWatcher.#ctor*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher.FileSystemWatcher
- uid: System.IO.FileSystemWatcher.BeginInit*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: BeginInit
  nameWithType: FileSystemWatcher.BeginInit
- uid: System.IO.FileSystemWatcher.Dispose*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Dispose
  nameWithType: FileSystemWatcher.Dispose
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.EndInit*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EndInit
  nameWithType: FileSystemWatcher.EndInit
- uid: System.IO.FileSystemWatcher.Filter*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Filter
  nameWithType: FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
- uid: System.IO.FileSystemWatcher.NotifyFilter*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
- uid: System.IO.FileSystemWatcher.OnChanged*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnChanged
  nameWithType: FileSystemWatcher.OnChanged
- uid: System.IO.FileSystemWatcher.OnCreated*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnCreated
  nameWithType: FileSystemWatcher.OnCreated
- uid: System.IO.FileSystemWatcher.OnDeleted*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnDeleted
  nameWithType: FileSystemWatcher.OnDeleted
- uid: System.IO.FileSystemWatcher.OnError*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnError
  nameWithType: FileSystemWatcher.OnError
- uid: System.IO.FileSystemWatcher.OnRenamed*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnRenamed
  nameWithType: FileSystemWatcher.OnRenamed
- uid: System.IO.FileSystemWatcher.Path*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Path
  nameWithType: FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Site*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Site
  nameWithType: FileSystemWatcher.Site
- uid: System.IO.FileSystemWatcher.SynchronizingObject*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
- uid: System.IO.FileSystemWatcher.WaitForChanged*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged
  nameWithType: FileSystemWatcher.WaitForChanged
