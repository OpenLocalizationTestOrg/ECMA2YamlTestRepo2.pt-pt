### YamlMime:ManagedReference
items:
- uid: System.Data.IDbCommand
  id: IDbCommand
  children:
  - System.Data.IDbCommand.Cancel
  - System.Data.IDbCommand.CommandText
  - System.Data.IDbCommand.CommandTimeout
  - System.Data.IDbCommand.CommandType
  - System.Data.IDbCommand.Connection
  - System.Data.IDbCommand.CreateParameter
  - System.Data.IDbCommand.ExecuteNonQuery
  - System.Data.IDbCommand.ExecuteReader
  - System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)
  - System.Data.IDbCommand.ExecuteScalar
  - System.Data.IDbCommand.Parameters
  - System.Data.IDbCommand.Prepare
  - System.Data.IDbCommand.Transaction
  - System.Data.IDbCommand.UpdatedRowSource
  langs:
  - csharp
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
  type: Interface
  summary: "Represents an SQL statement that is executed while connected to a data source, and is implemented by .NET Framework data providers that access relational databases."
  remarks: "The IDbCommand interface enables an inheriting class to implement a Command class, which represents an SQL statement that is executed at a data source. For more information about Command classes, see [Executing a Command](~/add/includes/ajax-current-ext-md.md).       An application does not create an instance of the IDbCommand interface directly, but creates an instance of a class that inherits IDbCommand.       Classes that inherit IDbCommand must implement all inherited members, and typically define additional members to add provider-specific functionality. For example, the IDbCommand interface defines the <xref:System.Data.IDbCommand.ExecuteNonQuery%2A> method. In turn, the <xref:System.Data.SqlClient.SqlCommand> class inherits this method, and also defines the <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> method."
  example:
  - "The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection>, <xref:System.Data.SqlClient.SqlCommand>, and <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it to the console. Finally, the example closes the <xref:System.Data.SqlClient.SqlDataReader>, then the <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-cs[Classic WebData SqlCommand Example#1](~/add/codesnippet/csharp/t-system.data.idbcommand_1.cs)]\n [!code-vb[Classic WebData SqlCommand Example#1](~/add/codesnippet/visualbasic/t-system.data.idbcommand_1.vb)]"
  syntax:
    content: 'public interface IDbCommand : IDisposable'
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Data.IDbCommand.Cancel
  id: Cancel
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Cancel()
  nameWithType: IDbCommand.Cancel()
  fullName: System.Data.IDbCommand.Cancel()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Attempts to cancels the execution of an <xref href=&quot;System.Data.IDbCommand&quot;></xref>."
  remarks: "If there is nothing to cancel, nothing happens. However, if there is a command in process, and the attempt to cancel fails, no exception is generated."
  syntax:
    content: public void Cancel ();
    parameters: []
  overload: System.Data.IDbCommand.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.CommandText
  id: CommandText
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CommandText
  nameWithType: IDbCommand.CommandText
  fullName: System.Data.IDbCommand.CommandText
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the text command to run against the data source."
  remarks: "When the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `StoredProcedure`, set the CommandText property to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command will call this stored procedure when you call one of the Execute methods."
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData IDbCommand.CommandText Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_2_1.vb)]\n [!code-cs[Classic WebData IDbCommand.CommandText Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_2_1.cs)]"
  syntax:
    content: public string CommandText { get; set; }
    return:
      type: System.String
      description: "The text command to execute. The default value is an empty string (&quot;&quot;)."
  overload: System.Data.IDbCommand.CommandText*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.CommandTimeout
  id: CommandTimeout
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CommandTimeout
  nameWithType: IDbCommand.CommandTimeout
  fullName: System.Data.IDbCommand.CommandTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the wait time before terminating the attempt to execute a command and generating an error."
  remarks: ''
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_0_1.vb)]\n [!code-cs[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_0_1.cs)]"
  syntax:
    content: public int CommandTimeout { get; set; }
    return:
      type: System.Int32
      description: "The time (in seconds) to wait for the command to execute. The default value is 30 seconds."
  overload: System.Data.IDbCommand.CommandTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The property value assigned is less than 0."
  platform:
  - net462
- uid: System.Data.IDbCommand.CommandType
  id: CommandType
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CommandType
  nameWithType: IDbCommand.CommandType
  fullName: System.Data.IDbCommand.CommandType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Indicates or specifies how the <xref:System.Data.IDbCommand.CommandText*> property is interpreted."
  remarks: "When you set the CommandType property to `StoredProcedure`, you should set the <xref:System.Data.IDbCommand.CommandText%2A> property to the name of the stored procedure. The command executes this stored procedure when you call one of the Execute methods."
  syntax:
    content: public System.Data.CommandType CommandType { get; set; }
    return:
      type: System.Data.CommandType
      description: "One of the <xref href=&quot;System.Data.CommandType&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_Text&quot; name=&quot;Text&quot; href=&quot;&quot;></xref>."
  overload: System.Data.IDbCommand.CommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.Connection
  id: Connection
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Connection
  nameWithType: IDbCommand.Connection
  fullName: System.Data.IDbCommand.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the <xref href=&quot;System.Data.IDbConnection&quot;></xref> used by this instance of the <xref href=&quot;System.Data.IDbCommand&quot;></xref>."
  syntax:
    content: public System.Data.IDbConnection Connection { get; set; }
    return:
      type: System.Data.IDbConnection
      description: "The connection to the data source."
  overload: System.Data.IDbCommand.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.CreateParameter
  id: CreateParameter
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CreateParameter()
  nameWithType: IDbCommand.CreateParameter()
  fullName: System.Data.IDbCommand.CreateParameter()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Creates a new instance of an <xref href=&quot;System.Data.IDbDataParameter&quot;></xref> object."
  remarks: "When inheriting from <xref:System.Data.IDbCommand>, a .NET Framework data provider implements a strongly-typed version of CreateParameter."
  syntax:
    content: public System.Data.IDbDataParameter CreateParameter ();
    parameters: []
    return:
      type: System.Data.IDbDataParameter
      description: "An <xref uid=&quot;langword_csharp_IDbDataParameter&quot; name=&quot;IDbDataParameter&quot; href=&quot;&quot;></xref> object."
  overload: System.Data.IDbCommand.CreateParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteNonQuery
  id: ExecuteNonQuery
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteNonQuery()
  nameWithType: IDbCommand.ExecuteNonQuery()
  fullName: System.Data.IDbCommand.ExecuteNonQuery()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Executes an SQL statement against the <xref uid=&quot;langword_csharp_Connection&quot; name=&quot;Connection&quot; href=&quot;&quot;></xref> object of a .NET Framework data provider, and returns the number of rows affected."
  remarks: "You can use the ExecuteNonQuery to perform catalog operations (for example, querying the structure of a database or creating database objects such as tables), or to change the data in a database without using a <xref:System.Data.DataSet> by executing UPDATE, INSERT, or DELETE statements.       Although the ExecuteNonQuery does not return any rows, any output parameters or return values mapped to parameters are populated with data.       For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, the return value is -1."
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.OleDb.OleDbCommand>, and then executes it. To accomplish this, the method is passed a string that is a SQL SELECT statement and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData OleDbCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/m-system.data.idbcommand_1_1.cs)]\n [!code-vb[Classic WebData OleDbCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_1_1.vb)]"
  syntax:
    content: public int ExecuteNonQuery ();
    parameters: []
    return:
      type: System.Int32
      description: "The number of rows affected."
  overload: System.Data.IDbCommand.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The connection does not exist.       -or-       The connection is not open."
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteReader
  id: ExecuteReader
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteReader()
  nameWithType: IDbCommand.ExecuteReader()
  fullName: System.Data.IDbCommand.ExecuteReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Executes the <xref:System.Data.IDbCommand.CommandText*> against the <xref:System.Data.IDbCommand.Connection*> and builds an <xref href=&quot;System.Data.IDataReader&quot;></xref>."
  syntax:
    content: public System.Data.IDataReader ExecuteReader ();
    parameters: []
    return:
      type: System.Data.IDataReader
      description: "An <xref href=&quot;System.Data.IDataReader&quot;></xref> object."
  overload: System.Data.IDbCommand.ExecuteReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)
  id: ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteReader(CommandBehavior)
  nameWithType: IDbCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.IDbCommand.ExecuteReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Executes the <xref:System.Data.IDbCommand.CommandText*> against the <xref:System.Data.IDbCommand.Connection*>, and builds an <xref href=&quot;System.Data.IDataReader&quot;></xref> using one of the <xref href=&quot;System.Data.CommandBehavior&quot;></xref> values."
  remarks: "The caller must call the <xref:System.Data.IDbConnection.Open%2A> method of the <xref:System.Data.IDbCommand.Connection%2A> property.       When the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `StoredProcedure`, the <xref:System.Data.IDbCommand.CommandText%2A> property should be set to the name of the stored procedure. The command executes this stored procedure when you call <xref:System.Data.IDbCommand.ExecuteReader%2A>.      > [!NOTE] >  Use <xref:System.Data.CommandBehavior> to retrieve large values and binary data. Otherwise, an <xref:System.OutOfMemoryException> might occur and the connection will be closed.       While the <xref:System.Data.IDataReader> is in use, the associated <xref:System.Data.IDbConnection> is busy serving the <xref:System.Data.IDataReader>. While in this state, no other operations can be performed on the <xref:System.Data.IDbConnection> other than closing it. This is the case until the <xref:System.Data.IDataReader.Close%2A> method of the DataReader is called. If the DataReader is created with <xref:System.Data.CommandBehavior> set to `CloseConnection`, closing the DataReader closes the connection automatically."
  syntax:
    content: public System.Data.IDataReader ExecuteReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "One of the <xref href=&quot;System.Data.CommandBehavior&quot;></xref> values."
    return:
      type: System.Data.IDataReader
      description: "An <xref href=&quot;System.Data.IDataReader&quot;></xref> object."
  overload: System.Data.IDbCommand.ExecuteReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteScalar
  id: ExecuteScalar
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteScalar()
  nameWithType: IDbCommand.ExecuteScalar()
  fullName: System.Data.IDbCommand.ExecuteScalar()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored."
  remarks: "Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a database. This requires less code than using the <xref:System.Data.IDbCommand.ExecuteReader%2A> method, and then performing the operations necessary to generate the single value using the data returned by an <xref:System.Data.IDataReader>.       A typical ExecuteScalar query can be formatted as in the following C# example:      ```   CommandText = &quot;select count(*) as NumberOfRegions from region&quot;;   Int32 count = (int) ExecuteScalar();   ```       If the first column of the first row in the result set is not found, a null reference (`Nothing` in Visual Basic) is returned. If the value in the database is `null`, the query returns `DBNull.Value`."
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.SqlClient.SqlCommand>, and then executes it using <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>. The example is passed a string that is a Transact-SQL statement that returns an aggregate result, and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteScalar#1](~/add/codesnippet/csharp/m-system.data.idbcommand_0_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteScalar#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_0_1.vb)]"
  syntax:
    content: public object ExecuteScalar ();
    parameters: []
    return:
      type: System.Object
      description: "The first column of the first row in the resultset."
  overload: System.Data.IDbCommand.ExecuteScalar*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.Parameters
  id: Parameters
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Parameters
  nameWithType: IDbCommand.Parameters
  fullName: System.Data.IDbCommand.Parameters
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the <xref href=&quot;System.Data.IDataParameterCollection&quot;></xref>."
  remarks: ''
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.SqlClient.SqlCommand>, and displays its parameters. In the example, the application passes a <xref:System.Data.SqlClient.SqlConnection>, a query string that is a Transact-SQL SELECT statement, and an array of <xref:System.Data.SqlClient.SqlParameter> objects.  \n  \n [!code-cs[Classic WebData IDbCommand.Parameters Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_1_1.cs)]\n [!code-vb[Classic WebData IDbCommand.Parameters Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_1_1.vb)]"
  syntax:
    content: public System.Data.IDataParameterCollection Parameters { get; }
    return:
      type: System.Data.IDataParameterCollection
      description: "The parameters of the SQL statement or stored procedure."
  overload: System.Data.IDbCommand.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.Prepare
  id: Prepare
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Prepare()
  nameWithType: IDbCommand.Prepare()
  fullName: System.Data.IDbCommand.Prepare()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Creates a prepared (or compiled) version of the command on the data source."
  remarks: "If the <xref:System.Data.IDbCommand.CommandType%2A> property is set to `TableDirect`, Prepare does nothing. If <xref:System.Data.IDbCommand.CommandType%2A> is set to `StoredProcedure`, the call to Prepare should succeed, although it may result in a no-op. The server automatically caches plans for reuse as necessary; therefore, there is no need to call this method directly in your client application."
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.OleDb.OleDbCommand>, and opens the connection. The example then prepares a stored procedure on the data source by passing a string that is a SQL Select statement and a string to use to connect to the data source.  \n  \n [!code-vb[Classic WebData OleDbCommand.Prepare Example#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_2_1.vb)]\n [!code-cs[Classic WebData OleDbCommand.Prepare Example#1](~/add/codesnippet/csharp/m-system.data.idbcommand_2_1.cs)]"
  syntax:
    content: public void Prepare ();
    parameters: []
  overload: System.Data.IDbCommand.Prepare*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Data.OleDb.OleDbCommand.Connection*> is not set.       -or-       The <xref:System.Data.OleDb.OleDbCommand.Connection*> is not <xref:System.Data.OleDb.OleDbConnection.Open*>."
  platform:
  - net462
- uid: System.Data.IDbCommand.Transaction
  id: Transaction
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Transaction
  nameWithType: IDbCommand.Transaction
  fullName: System.Data.IDbCommand.Transaction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets the transaction within which the <xref uid=&quot;langword_csharp_Command&quot; name=&quot;Command&quot; href=&quot;&quot;></xref> object of a .NET Framework data provider executes."
  syntax:
    content: public System.Data.IDbTransaction Transaction { get; set; }
    return:
      type: System.Data.IDbTransaction
      description: "the <xref uid=&quot;langword_csharp_Command&quot; name=&quot;Command&quot; href=&quot;&quot;></xref> object of a .NET Framework data provider executes. The default value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Data.IDbCommand.Transaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.UpdatedRowSource
  id: UpdatedRowSource
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: UpdatedRowSource
  nameWithType: IDbCommand.UpdatedRowSource
  fullName: System.Data.IDbCommand.UpdatedRowSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets how command results are applied to the <xref href=&quot;System.Data.DataRow&quot;></xref> when used by the <xref:System.Data.IDataAdapter.Update*> method of a <xref href=&quot;System.Data.Common.DbDataAdapter&quot;></xref>."
  syntax:
    content: public System.Data.UpdateRowSource UpdatedRowSource { get; set; }
    return:
      type: System.Data.UpdateRowSource
      description: "One of the <xref href=&quot;System.Data.UpdateRowSource&quot;></xref> values. The default is <xref uid=&quot;langword_csharp_Both&quot; name=&quot;Both&quot; href=&quot;&quot;></xref> unless the command is automatically generated. Then the default is <xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;></xref>."
  overload: System.Data.IDbCommand.UpdatedRowSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The value entered was not one of the <xref href=&quot;System.Data.UpdateRowSource&quot;></xref> values."
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.IDbCommand.Cancel
  parent: System.Data.IDbCommand
  isExternal: false
  name: Cancel()
  nameWithType: IDbCommand.Cancel()
  fullName: System.Data.IDbCommand.Cancel()
- uid: System.Data.IDbCommand.CommandText
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandText
  nameWithType: IDbCommand.CommandText
  fullName: System.Data.IDbCommand.CommandText
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.IDbCommand.CommandTimeout
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: IDbCommand.CommandTimeout
  fullName: System.Data.IDbCommand.CommandTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand.CommandType
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandType
  nameWithType: IDbCommand.CommandType
  fullName: System.Data.IDbCommand.CommandType
- uid: System.Data.CommandType
  parent: System.Data
  isExternal: false
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Data.IDbCommand.Connection
  parent: System.Data.IDbCommand
  isExternal: false
  name: Connection
  nameWithType: IDbCommand.Connection
  fullName: System.Data.IDbCommand.Connection
- uid: System.Data.IDbConnection
  parent: System.Data
  isExternal: false
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data.IDbCommand.CreateParameter
  parent: System.Data.IDbCommand
  isExternal: false
  name: CreateParameter()
  nameWithType: IDbCommand.CreateParameter()
  fullName: System.Data.IDbCommand.CreateParameter()
- uid: System.Data.IDbDataParameter
  parent: System.Data
  isExternal: false
  name: IDbDataParameter
  nameWithType: IDbDataParameter
  fullName: System.Data.IDbDataParameter
- uid: System.Data.IDbCommand.ExecuteNonQuery
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteNonQuery()
  nameWithType: IDbCommand.ExecuteNonQuery()
  fullName: System.Data.IDbCommand.ExecuteNonQuery()
- uid: System.Data.IDbCommand.ExecuteReader
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteReader()
  nameWithType: IDbCommand.ExecuteReader()
  fullName: System.Data.IDbCommand.ExecuteReader()
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteReader(CommandBehavior)
  nameWithType: IDbCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.IDbCommand.ExecuteReader(CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.IDbCommand.ExecuteScalar
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteScalar()
  nameWithType: IDbCommand.ExecuteScalar()
  fullName: System.Data.IDbCommand.ExecuteScalar()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.IDbCommand.Parameters
  parent: System.Data.IDbCommand
  isExternal: false
  name: Parameters
  nameWithType: IDbCommand.Parameters
  fullName: System.Data.IDbCommand.Parameters
- uid: System.Data.IDataParameterCollection
  parent: System.Data
  isExternal: false
  name: IDataParameterCollection
  nameWithType: IDataParameterCollection
  fullName: System.Data.IDataParameterCollection
- uid: System.Data.IDbCommand.Prepare
  parent: System.Data.IDbCommand
  isExternal: false
  name: Prepare()
  nameWithType: IDbCommand.Prepare()
  fullName: System.Data.IDbCommand.Prepare()
- uid: System.Data.IDbCommand.Transaction
  parent: System.Data.IDbCommand
  isExternal: false
  name: Transaction
  nameWithType: IDbCommand.Transaction
  fullName: System.Data.IDbCommand.Transaction
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.IDbCommand.UpdatedRowSource
  parent: System.Data.IDbCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: IDbCommand.UpdatedRowSource
  fullName: System.Data.IDbCommand.UpdatedRowSource
- uid: System.Data.UpdateRowSource
  parent: System.Data
  isExternal: false
  name: UpdateRowSource
  nameWithType: UpdateRowSource
  fullName: System.Data.UpdateRowSource
- uid: System.Data.IDbCommand.Cancel*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Cancel
  nameWithType: IDbCommand.Cancel
- uid: System.Data.IDbCommand.CommandText*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandText
  nameWithType: IDbCommand.CommandText
- uid: System.Data.IDbCommand.CommandTimeout*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: IDbCommand.CommandTimeout
- uid: System.Data.IDbCommand.CommandType*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandType
  nameWithType: IDbCommand.CommandType
- uid: System.Data.IDbCommand.Connection*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Connection
  nameWithType: IDbCommand.Connection
- uid: System.Data.IDbCommand.CreateParameter*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CreateParameter
  nameWithType: IDbCommand.CreateParameter
- uid: System.Data.IDbCommand.ExecuteNonQuery*
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteNonQuery
  nameWithType: IDbCommand.ExecuteNonQuery
- uid: System.Data.IDbCommand.ExecuteReader*
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteReader
  nameWithType: IDbCommand.ExecuteReader
- uid: System.Data.IDbCommand.ExecuteScalar*
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteScalar
  nameWithType: IDbCommand.ExecuteScalar
- uid: System.Data.IDbCommand.Parameters*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Parameters
  nameWithType: IDbCommand.Parameters
- uid: System.Data.IDbCommand.Prepare*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Prepare
  nameWithType: IDbCommand.Prepare
- uid: System.Data.IDbCommand.Transaction*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Transaction
  nameWithType: IDbCommand.Transaction
- uid: System.Data.IDbCommand.UpdatedRowSource*
  parent: System.Data.IDbCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: IDbCommand.UpdatedRowSource
