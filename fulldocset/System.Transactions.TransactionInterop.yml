### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionInterop
  id: TransactionInterop
  children:
  - System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)
  - System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])
  - System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  - System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])
  - System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])
  - System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)
  - System.Transactions.TransactionInterop.GetWhereabouts
  - System.Transactions.TransactionInterop.PromoterTypeDtc
  langs:
  - csharp
  name: TransactionInterop
  nameWithType: TransactionInterop
  fullName: System.Transactions.TransactionInterop
  type: Class
  summary: "Facilitates interaction between <xref href=&quot;System.Transactions&quot;></xref> and components that were previously written to interact with MSDTC, COM+, or <xref href=&quot;System.EnterpriseServices&quot;></xref>. This class cannot be inherited."
  remarks: "This class provides methods for transaction propagation. For more information on how this process works, see [Transaction Propagation](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/b09541e6-4baf-4e37-b879-62884fbb0969.asp).       Using the methods provided by this class, you can engage in two types of transaction propagations, Export/Import (push model) and Transmitter/Receiver (pull model).       The Export/Import (push model) propagation involves these steps,      1.  On the remote machine, obtain the &quot;whereabouts&quot; of the transaction manager of that machine by calling the <xref:System.Transactions.TransactionInterop.GetWhereabouts%2A> method. You can then cache this piece of information on the client machine for future usage.      2.  Send the data containing the whereabouts to the client machine using any preferred method      3.  On the client machine, use the whereabouts to &quot;export&quot; the transaction to the remote machine and generate a transaction &quot;cookie&quot;.  This is done by calling <xref:System.Transactions.TransactionInterop.GetExportCookie%2A> and passing in the remote machine&quot;s whereabouts.      4.  Send the data containing the transaction &quot;cookie&quot; to the remote machine using any preferred method      5.  On the remote machine, use the transaction &quot;cookie&quot; to obtain a clone of the client transaction by calling the <xref:System.Transactions.TransactionInterop.GetTransactionFromExportCookie%2A> method.      6.  On the remote machine, use the clone transaction to enlist the resource manager using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> or <xref:System.Transactions.Transaction.EnlistDurable%2A> methods of the <xref:System.Transactions.Transaction> class.       The Transmitter/Receiver (pull model) propagation involves these steps,      -   On the client machine, using the transaction generates a corresponding &quot;propagation token&quot; by calling <xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A>      -   Send the data containing the &quot;propagation token&quot; of the transaction to the remote machine using any preferred method      -   On the remote machine, use the &quot;propagation token&quot; to obtain a clone of the client transaction by calling <xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A>       The Transmitter/Receiver model provides better performance in scenarios where the transaction token is sent to a remote machine, but the remote machine may not use it to obtain the transaction.  This is because the transaction is not propagated until <xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A> is called. Another advantage is that the propagation token can be sent to any remote machine, while the export cookie can be used only on the machine that provided the whereabouts.       However, you should also note that the whereabouts of remote transaction managers are encapsulated in all the propagation tokens, making them bigger than the corresponding transaction cookies from the Export/Import model.       **Note** This type uses <xref:System.Security.Permissions.SecurityAction> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set."
  syntax:
    content: public static class TransactionInterop
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)
  id: GetDtcTransaction(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetDtcTransaction(Transaction)
  nameWithType: TransactionInterop.GetDtcTransaction(Transaction)
  fullName: System.Transactions.TransactionInterop.GetDtcTransaction(Transaction)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Gets an <xref href=&quot;System.Transactions.IDtcTransaction&quot;></xref> instance that represents a <xref href=&quot;System.Transactions.Transaction&quot;></xref>."
  syntax:
    content: public static System.Transactions.IDtcTransaction GetDtcTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;></xref> instance to be marshaled."
    return:
      type: System.Transactions.IDtcTransaction
      description: "An <xref href=&quot;System.Transactions.IDtcTransaction&quot;></xref> instance that represents a <xref href=&quot;System.Transactions.Transaction&quot;></xref>.  The <xref href=&quot;System.Transactions.IDtcTransaction&quot;></xref> instance is compatible with the unmanaged form of [ITransaction](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/d40264be-f9b2-4044-aac6-84b43e5be666.asp) used by MSDTC and with the Managed form of <xref href=&quot;System.EnterpriseServices.ITransaction&quot;></xref> used by <xref href=&quot;System.EnterpriseServices&quot;></xref>."
  overload: System.Transactions.TransactionInterop.GetDtcTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])
  id: GetExportCookie(System.Transactions.Transaction,System.Byte[])
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetExportCookie(Transaction,Byte[])
  nameWithType: TransactionInterop.GetExportCookie(Transaction,Byte[])
  fullName: System.Transactions.TransactionInterop.GetExportCookie(Transaction,Byte[])
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Transforms a transaction object into an export transaction cookie."
  remarks: "Call this method if you want to export a transaction. The `transaction` that is passed along is marshaled into a transaction cookie. You can then send the transaction cookie to the destination process. This is referred to as propagating the transaction between processes or systems. The propagation is considered to be a push model where the local transaction is pushed to the destination.  Therefore, information contained in `whereabouts` must describe the destination transaction manager.       For more information on different propagation models, see the Remarks section of the <xref:System.Transactions.TransactionInterop> class."
  syntax:
    content: public static byte[] GetExportCookie (System.Transactions.Transaction transaction, byte[] whereabouts);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "The <xref href=&quot;System.Transactions.Transaction&quot;></xref> object to be marshaled."
    - id: whereabouts
      type: System.Byte[]
      description: "An address that describes the location of the destination transaction manager. This permits two transaction managers to communicate with one another and thereby propagate a transaction from one system to the other."
    return:
      type: System.Byte[]
      description: "An export transaction cookie representing the specified <xref href=&quot;System.Transactions.Transaction&quot;></xref> object."
  overload: System.Transactions.TransactionInterop.GetExportCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  id: GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransactionFromDtcTransaction(IDtcTransaction)
  nameWithType: TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
  fullName: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Generates a <xref href=&quot;System.Transactions.Transaction&quot;></xref> from a specified <xref href=&quot;System.Transactions.IDtcTransaction&quot;></xref>."
  remarks: "The `transactionNative` is compatible with the unmanaged form of [ITransaction](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/d40264be-f9b2-4044-aac6-84b43e5be666.asp) used by MSDTC and with the Managed form of <xref:System.EnterpriseServices.ITransaction> used by <xref:System.EnterpriseServices>."
  syntax:
    content: public static System.Transactions.Transaction GetTransactionFromDtcTransaction (System.Transactions.IDtcTransaction transactionNative);
    parameters:
    - id: transactionNative
      type: System.Transactions.IDtcTransaction
      description: "The <xref href=&quot;System.Transactions.IDtcTransaction&quot;></xref> object to be marshaled."
    return:
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;></xref> instance that represents the given <xref href=&quot;System.Transactions.IDtcTransaction&quot;></xref>."
  overload: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])
  id: GetTransactionFromExportCookie(System.Byte[])
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransactionFromExportCookie(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromExportCookie(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(Byte[])
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Generates a <xref href=&quot;System.Transactions.Transaction&quot;></xref> from the specified an export cookie."
  remarks: "For more information on different propagation models, see the Remarks section of the <xref:System.Transactions.TransactionInterop> class."
  syntax:
    content: public static System.Transactions.Transaction GetTransactionFromExportCookie (byte[] cookie);
    parameters:
    - id: cookie
      type: System.Byte[]
      description: "A marshaled form of the transaction object."
    return:
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;></xref> from the specified export cookie."
  overload: System.Transactions.TransactionInterop.GetTransactionFromExportCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])
  id: GetTransactionFromTransmitterPropagationToken(System.Byte[])
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransactionFromTransmitterPropagationToken(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Generates a <xref href=&quot;System.Transactions.Transaction&quot;></xref> instance from the specified transmitter propagation token."
  remarks: "This method, together with the <xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A> method, provide functionality for &quot;pull&quot; propagation, in which the transaction is &quot;pulled&quot; from the remote machine when this method is called to unmarshal the transaction.       For more information on different propagation models, see the Remarks section of the <xref:System.Transactions.TransactionInterop> class."
  syntax:
    content: public static System.Transactions.Transaction GetTransactionFromTransmitterPropagationToken (byte[] propagationToken);
    parameters:
    - id: propagationToken
      type: System.Byte[]
      description: "A propagation token representing a transaction."
    return:
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;></xref> from the specified transmitter propagation token."
  overload: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*
  exceptions:
  - type: System.Transactions.TransactionManagerCommunicationException
    commentId: T:System.Transactions.TransactionManagerCommunicationException
    description: "The deserialization of a transaction fails because the transaction manager cannot be contacted. This may be caused by network firewall or security settings."
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)
  id: GetTransmitterPropagationToken(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransmitterPropagationToken(Transaction)
  nameWithType: TransactionInterop.GetTransmitterPropagationToken(Transaction)
  fullName: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(Transaction)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Generates a propagation token for the specified <xref href=&quot;System.Transactions.Transaction&quot;></xref>."
  syntax:
    content: public static byte[] GetTransmitterPropagationToken (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "A transaction to be marshaled into a propagation token."
    return:
      type: System.Byte[]
      description: "This method, together with the <xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*> method, provide functionality for Transmitter/Receiver propagation, in which the transaction is &quot;pulled&quot; from the remote machine when the latter is called to unmarshal the transaction.       For more information on different propagation models, see the Remarks section of the <xref href=&quot;System.Transactions.TransactionInterop&quot;></xref> class."
  overload: System.Transactions.TransactionInterop.GetTransmitterPropagationToken*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetWhereabouts
  id: GetWhereabouts
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetWhereabouts()
  nameWithType: TransactionInterop.GetWhereabouts()
  fullName: System.Transactions.TransactionInterop.GetWhereabouts()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Gets the Whereabouts of the distributed transaction manager that <xref href=&quot;System.Transactions&quot;></xref> uses."
  remarks: "The Whereabouts contains an address that describes the location of a transaction manager. This permits two transaction managers to communicate with one another and thereby propagate a transaction from one system to the other. The information returned by this method can be used to provide location information for push model transaction propagation with the <xref:System.Transactions.TransactionInterop.GetExportCookie%2A> method.       For more information on different propagation models, see the Remarks section of the <xref:System.Transactions.TransactionInterop> class."
  syntax:
    content: public static byte[] GetWhereabouts ();
    parameters: []
    return:
      type: System.Byte[]
      description: "The Whereabouts of the distributed transaction manager that <xref href=&quot;System.Transactions&quot;></xref> uses."
  overload: System.Transactions.TransactionInterop.GetWhereabouts*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.PromoterTypeDtc
  id: PromoterTypeDtc
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: PromoterTypeDtc
  nameWithType: TransactionInterop.PromoterTypeDtc
  fullName: System.Transactions.TransactionInterop.PromoterTypeDtc
  type: Field
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "The type of the distributed transaction processor."
  remarks: "This value is used for the `Transaction.PromoterType` property if the transaction is or will be promoted to MSDTC and the `Transaction.GetPromotedToken` method will return an MSDTC transaction propagation token for the `byte[]` result."
  syntax:
    content: public static readonly Guid PromoterTypeDtc;
    return:
      type: System.Guid
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Transactions.TransactionManagerCommunicationException
  parent: System.Transactions
  isExternal: false
  name: TransactionManagerCommunicationException
  nameWithType: TransactionManagerCommunicationException
  fullName: System.Transactions.TransactionManagerCommunicationException
- uid: System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetDtcTransaction(Transaction)
  nameWithType: TransactionInterop.GetDtcTransaction(Transaction)
  fullName: System.Transactions.TransactionInterop.GetDtcTransaction(Transaction)
- uid: System.Transactions.IDtcTransaction
  parent: System.Transactions
  isExternal: false
  name: IDtcTransaction
  nameWithType: IDtcTransaction
  fullName: System.Transactions.IDtcTransaction
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetExportCookie(Transaction,Byte[])
  nameWithType: TransactionInterop.GetExportCookie(Transaction,Byte[])
  fullName: System.Transactions.TransactionInterop.GetExportCookie(Transaction,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromDtcTransaction(IDtcTransaction)
  nameWithType: TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
  fullName: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
- uid: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromExportCookie(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromExportCookie(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(Byte[])
- uid: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromTransmitterPropagationToken(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
- uid: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransmitterPropagationToken(Transaction)
  nameWithType: TransactionInterop.GetTransmitterPropagationToken(Transaction)
  fullName: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(Transaction)
- uid: System.Transactions.TransactionInterop.GetWhereabouts
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetWhereabouts()
  nameWithType: TransactionInterop.GetWhereabouts()
  fullName: System.Transactions.TransactionInterop.GetWhereabouts()
- uid: System.Transactions.TransactionInterop.PromoterTypeDtc
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: PromoterTypeDtc
  nameWithType: TransactionInterop.PromoterTypeDtc
  fullName: System.Transactions.TransactionInterop.PromoterTypeDtc
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.TransactionInterop.GetDtcTransaction*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetDtcTransaction
  nameWithType: TransactionInterop.GetDtcTransaction
- uid: System.Transactions.TransactionInterop.GetExportCookie*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetExportCookie
  nameWithType: TransactionInterop.GetExportCookie
- uid: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromDtcTransaction
  nameWithType: TransactionInterop.GetTransactionFromDtcTransaction
- uid: System.Transactions.TransactionInterop.GetTransactionFromExportCookie*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromExportCookie
  nameWithType: TransactionInterop.GetTransactionFromExportCookie
- uid: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromTransmitterPropagationToken
  nameWithType: TransactionInterop.GetTransactionFromTransmitterPropagationToken
- uid: System.Transactions.TransactionInterop.GetTransmitterPropagationToken*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransmitterPropagationToken
  nameWithType: TransactionInterop.GetTransmitterPropagationToken
- uid: System.Transactions.TransactionInterop.GetWhereabouts*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetWhereabouts
  nameWithType: TransactionInterop.GetWhereabouts
