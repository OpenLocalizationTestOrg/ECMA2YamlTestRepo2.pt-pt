### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SigningCredentials
  id: SigningCredentials
  children:
  - System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String)
  - System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)
  - System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
  - System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
  - System.IdentityModel.Tokens.SigningCredentials.SigningKey
  - System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
  langs:
  - csharp
  name: SigningCredentials
  nameWithType: SigningCredentials
  fullName: System.IdentityModel.Tokens.SigningCredentials
  type: Class
  summary: "Representa os algoritmos criptográficos chave e segurança que são utilizados para gerar uma assinatura digital."
  remarks: "Utilize a classe de SigningCredentials para especificar a chave de assinatura, identificador da chave de assinatura e algoritmos de segurança que são utilizados pelo [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] para gerar a assinatura digital para <xref:System.IdentityModel.Tokens.SamlAssertion>.</xref:System.IdentityModel.Tokens.SamlAssertion> Para definir os detalhes de assinatura digital, defina a <xref:System.IdentityModel.Tokens.SamlAssertion.SigningCredentials%2A>propriedade de <xref:System.IdentityModel.Tokens.SamlAssertion>classe.</xref:System.IdentityModel.Tokens.SamlAssertion> </xref:System.IdentityModel.Tokens.SamlAssertion.SigningCredentials%2A>"
  syntax:
    content: public class SigningCredentials
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String)
  id: '#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String)'
  parent: System.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  name: SigningCredentials(SecurityKey,String,String)
  nameWithType: SigningCredentials.SigningCredentials(SecurityKey,String,String)
  fullName: System.IdentityModel.Tokens.SigningCredentials.SigningCredentials(SecurityKey,String,String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Tokens.SigningCredentials&quot;> </xref> classe."
  remarks: "Utilize o <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o `signatureAlgorithm` e `digestAlgorithm` parâmetros.</xref:System.IdentityModel.Tokens.SecurityAlgorithms> O <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe contém um conjunto de cadeias estáticas, constantes que representam os algoritmos criptográficos.</xref:System.IdentityModel.Tokens.SecurityAlgorithms> Os membros que tenham um `Signature` sufixo pode ser utilizado para especificar o `signatureAlgoritm` parâmetro e os membros que tenham um `Digest` sufixo pode ser utilizado para especificar o `digestAlgorithm` parâmetro."
  syntax:
    content: public SigningCredentials (System.IdentityModel.Tokens.SecurityKey signingKey, string signatureAlgorithm, string digestAlgorithm);
    parameters:
    - id: signingKey
      type: System.IdentityModel.Tokens.SecurityKey
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> que contém a chave criptográfica utilizada para gerar a assinatura digital."
    - id: signatureAlgorithm
      type: System.String
      description: "URI que representa o algoritmo criptográfico que é utilizado para gerar a assinatura digital."
    - id: digestAlgorithm
      type: System.String
      description: "URI que representa o algoritmo criptográfico que é utilizado para calcular o resumo para a parte da mensagem SOAP que está a ser assinados digitalmente."
  overload: System.IdentityModel.Tokens.SigningCredentials.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)
  id: '#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)'
  parent: System.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  name: SigningCredentials(SecurityKey,String,String,SecurityKeyIdentifier)
  nameWithType: SigningCredentials.SigningCredentials(SecurityKey,String,String,SecurityKeyIdentifier)
  fullName: System.IdentityModel.Tokens.SigningCredentials.SigningCredentials(SecurityKey,String,String,SecurityKeyIdentifier)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Inicializa uma nova instância do <xref href=&quot;System.IdentityModel.Tokens.SigningCredentials&quot;> </xref> classe."
  remarks: "Utilize o <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe para especificar o `signatureAlgorithm` e `digestAlgorithm` parâmetros.</xref:System.IdentityModel.Tokens.SecurityAlgorithms> O <xref:System.IdentityModel.Tokens.SecurityAlgorithms>classe contém um conjunto de cadeias estáticas constantes que representa os algoritmos criptográficos.</xref:System.IdentityModel.Tokens.SecurityAlgorithms> Os membros que tenham um `Signature` sufixo pode ser utilizado para especificar o `signatureAlgoritm` parâmetro e os membros que tenham um `Digest` sufixo pode ser utilizado para especificar o `digestAlgorithm` parâmetro."
  syntax:
    content: public SigningCredentials (System.IdentityModel.Tokens.SecurityKey signingKey, string signatureAlgorithm, string digestAlgorithm, System.IdentityModel.Tokens.SecurityKeyIdentifier signingKeyIdentifier);
    parameters:
    - id: signingKey
      type: System.IdentityModel.Tokens.SecurityKey
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> que contém a chave criptográfica utilizada para gerar a assinatura digital."
    - id: signatureAlgorithm
      type: System.String
      description: "URI que representa o algoritmo criptográfico que é utilizado para gerar a assinatura digital."
    - id: digestAlgorithm
      type: System.String
      description: "URI que representa o algoritmo criptográfico que é utilizado para calcular o resumo para a parte da mensagem SOAP que está a ser assinados digitalmente."
    - id: signingKeyIdentifier
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> que especifica o identificador que representa a chave que é utilizada para criar uma assinatura digital."
  overload: System.IdentityModel.Tokens.SigningCredentials.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
  id: DigestAlgorithm
  parent: System.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  name: DigestAlgorithm
  nameWithType: SigningCredentials.DigestAlgorithm
  fullName: System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o algoritmo criptográfico que é utilizado para calcular o resumo para a parte da mensagem SOAP que está a ser assinados digitalmente."
  remarks: "Para definir a propriedade DigestAlgorithm, utilize um dos construtores que requeira um `digestAlgorithm` parâmetro."
  syntax:
    content: public string DigestAlgorithm { get; }
    return:
      type: System.String
      description: "URI que representa o algoritmo criptográfico que é utilizado para calcular o resumo para a parte da mensagem SOAP que está a ser assinados digitalmente."
  overload: System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: SigningCredentials.SignatureAlgorithm
  fullName: System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o algoritmo criptográfico que é utilizado para gerar a assinatura digital."
  remarks: "Para definir a propriedade SignatureAlgorithm, utilize um dos construtores que requeira um `signatureAlgorithm` parâmetro."
  syntax:
    content: public string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "URI que representa o algoritmo criptográfico que é utilizado para gerar a assinatura digital."
  overload: System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SigningCredentials.SigningKey
  id: SigningKey
  parent: System.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  name: SigningKey
  nameWithType: SigningCredentials.SigningKey
  fullName: System.IdentityModel.Tokens.SigningCredentials.SigningKey
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém a chave criptográfica utilizada para gerar a assinatura digital."
  remarks: "Para definir a propriedade SigningKey, utilize um construtor que assume um `signingKey` parâmetro."
  syntax:
    content: public System.IdentityModel.Tokens.SecurityKey SigningKey { get; }
    return:
      type: System.IdentityModel.Tokens.SecurityKey
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> que contém a chave criptográfica utilizada para gerar a assinatura digital."
  overload: System.IdentityModel.Tokens.SigningCredentials.SigningKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
  id: SigningKeyIdentifier
  parent: System.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  name: SigningKeyIdentifier
  nameWithType: SigningCredentials.SigningKeyIdentifier
  fullName: System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Obtém o identificador que representa a chave que é utilizada para criar uma assinatura digital."
  remarks: "Para definir a propriedade SigningKeyIdentifier, utilize o construtor que assume um `signingKeyIdentifier` parâmetro."
  syntax:
    content: public System.IdentityModel.Tokens.SecurityKeyIdentifier SigningKeyIdentifier { get; }
    return:
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref> que especifica o identificador que representa a chave que é utilizada para criar uma assinatura digital."
  overload: System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String)
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: SigningCredentials(SecurityKey,String,String)
  nameWithType: SigningCredentials.SigningCredentials(SecurityKey,String,String)
  fullName: System.IdentityModel.Tokens.SigningCredentials.SigningCredentials(SecurityKey,String,String)
- uid: System.IdentityModel.Tokens.SecurityKey
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: System.IdentityModel.Tokens.SecurityKey
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SigningCredentials.#ctor(System.IdentityModel.Tokens.SecurityKey,System.String,System.String,System.IdentityModel.Tokens.SecurityKeyIdentifier)
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: SigningCredentials(SecurityKey,String,String,SecurityKeyIdentifier)
  nameWithType: SigningCredentials.SigningCredentials(SecurityKey,String,String,SecurityKeyIdentifier)
  fullName: System.IdentityModel.Tokens.SigningCredentials.SigningCredentials(SecurityKey,String,String,SecurityKeyIdentifier)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: DigestAlgorithm
  nameWithType: SigningCredentials.DigestAlgorithm
  fullName: System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
- uid: System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: SigningCredentials.SignatureAlgorithm
  fullName: System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
- uid: System.IdentityModel.Tokens.SigningCredentials.SigningKey
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: SigningKey
  nameWithType: SigningCredentials.SigningKey
  fullName: System.IdentityModel.Tokens.SigningCredentials.SigningKey
- uid: System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: SigningKeyIdentifier
  nameWithType: SigningCredentials.SigningKeyIdentifier
  fullName: System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
- uid: System.IdentityModel.Tokens.SigningCredentials.#ctor*
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: SigningCredentials
  nameWithType: SigningCredentials.SigningCredentials
- uid: System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm*
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: DigestAlgorithm
  nameWithType: SigningCredentials.DigestAlgorithm
- uid: System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm*
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: SigningCredentials.SignatureAlgorithm
- uid: System.IdentityModel.Tokens.SigningCredentials.SigningKey*
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: SigningKey
  nameWithType: SigningCredentials.SigningKey
- uid: System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier*
  parent: System.IdentityModel.Tokens.SigningCredentials
  isExternal: false
  name: SigningKeyIdentifier
  nameWithType: SigningCredentials.SigningKeyIdentifier
