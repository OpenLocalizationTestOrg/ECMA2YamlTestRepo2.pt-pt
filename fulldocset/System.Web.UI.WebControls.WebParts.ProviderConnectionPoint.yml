### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  id: ProviderConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  type: Class
  summary: "Define um objeto de ponto de ligação que permite um controlo de servidor a funcionar como um fornecedor para formar uma ligação com um consumidor."
  remarks: "Cada ligação de peças Web entre dois controlos do servidor, cada controlo tem de ter (entre outros requisitos) um objeto de ponto de ligação associado que lhe permite ligar a outro controlo e fornecer ou consumir dados, dependendo se o controlo está designado como o fornecedor ou o consumidor da ligação. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objeto em geral contém os detalhes para a forma como um controlo pode ligar a outro controlo e o tipo de dados pode partilhar.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Para um controlo a agir como o fornecedor numa ligação, o respetivo ponto de ligação tem de ser um objeto de ProviderConnectionPoint. Para obter detalhes sobre ligações de peças Web e de pontos de ligação, consulte os tópicos indicados na secção Consulte também abaixo.       Para criar um objeto de ProviderConnectionPoint, são necessários alguns passos: 1.  Crie uma interface. Quando um partilhas fornecedor de dados com um consumidor, isto é feito obtendo uma instância de uma interface, e devolver essa instância a um consumidor.      2.  Implemente a interface de um fornecedor. A <xref:System.Web.UI.WebControls.WebParts.WebPart>ou outro controlo de servidor (qualquer tipo de controlo de servidor num <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona pode ser utilizada) que será o fornecedor tem de implementar a interface criada no primeiro passo.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      3.  Identifica um método de chamada de retorno. Um método do fornecedor tem de estar identificado como o método de chamada de retorno a estabelecer uma ligação. Este método devolve uma instância da interface implementada para um consumidor. A abordagem de peças Web para identificar um método de chamada de retorno no fornecedor consiste em Adicionar um `ConnectionProvider` o atributo de metadados (definido pelo <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>classe) para o método que devolve a instância de interface.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Quando é adicionado o atributo, o parâmetro necessário apenas é um nome a apresentar a utilizar para o ponto de ligação do fornecedor. Parâmetros opcionais também podem ser adicionados, tais como um ID para o ponto de ligação.       Depois de um controlo tem sido equipado para atuar como um fornecedor, o controlo pode participar em ligações (partindo do princípio de que um controlo de consumidor é da mesma forma equipado e disponível). Para criar uma ligação estática, declarativa na marcação de uma página Web, os programadores podem utilizar o `<asp:webpartconnection>` elemento. Se o `ConnectionProvider` atributo com o código de origem do fornecedor que identifica o método de chamada de retorno Especifica um ID para o ponto de ligação, em seguida, esse valor têm de ser atribuído ao `ProviderConnectionPointID` atributo no `<asp:webpartconnection>` elemento numa página. Um motivo que um programador pode especificar um ID para um ponto de ligação de fornecedor é se existem vários pontos de ligação de controlo do fornecedor. Se um ID não está especificado para o ponto de ligação do fornecedor no controlo de fornecedor, um valor não tem de ser atribuídos ao `ProviderConnectionPointID` atributo na página ou, porque a ligação será então criada utilizando um valor predefinido obtido a partir de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Para criar uma ligação no código, os programadores tem de criar um novo objeto de ProviderConnectionPoint ao chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>método e a ser transmitidos para o ID de controlo do fornecedor, juntamente com o ID ou o índice do objeto de ProviderConnectionPoint definido no controlo de fornecedor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> O objeto de ProviderConnectionPoint devolvido, juntamente com uma referência para o controlo de fornecedor, uma referência para o controlo de consumidor e um correspondente <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objeto, são todos os transmitido para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>método para criar uma nova <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objeto.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Apesar dos programadores podem utilizar pontos de ligação de fornecedor como parte do estabelecimento de ligações de modo declarativo ou através de programação, os utilizadores também podem interagir com os pontos de ligação de fornecedor para estabelecer ligações através da interface de utilizador (IU). Se os programadores declarar um <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controlo numa página Web, fornece uma IU de tempo de execução para que os utilizadores criem ligações.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Se os utilizadores devem escolher o controlo de consumidor como ponto de partida para estabelecer a ligação ao clicar na ligar verbo (também poderia escolher o fornecedor; não existe nenhuma diferença na ligação resultante), na IU irão ver um controlo de lista pendente com o nome a apresentar do ponto de ligação de fornecedor disponível (ou pontos se existirem vários). Os utilizadores tem de selecionar um ponto de ligação de fornecedor para criar uma ligação.       Um objeto de ProviderConnectionPoint associa diretamente um controlo de fornecedor específico e armazena detalhes sobre a ligação nas propriedades da que qual herda a base de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Por exemplo, no herdados <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>propriedade, um ponto de ligação de fornecedor mantém o tipo de interface devolvido pelo fornecedor.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Se o fornecedor e consumidor numa ligação que ambos trabalham com o mesmo tipo de interface, os controlos são compatíveis e de que formam uma ligação direta. Se o fornecedor e consumidor não é possível trabalhar com o mesmo tipo de interface, são incompatíveis e tem de utilizar um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto traduzir o ponto de ligação de fornecedor <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>valor para um tipo que o consumidor pode trabalhar com.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Outra propriedade herdada importante é o <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>propriedade, o que fornece um nome amigável para apresentar na IU aos utilizadores escolher uma ligação de fornecedor ponto durante a criação de ligações.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> O nome a apresentar é o parâmetro necessário quando os programadores de adicionar um `ConnectionProvider` atributo para o método de chamada de retorno num controlo de fornecedor. O herdados <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>propriedade também é útil, conforme indicado acima, porque fornece um identificador exclusivo para um ponto de ligação do fornecedor no caso de um fornecedor tiver vários pontos de ligação.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Um fornecedor pode ter vários objetos de ProviderConnectionPoint definidos no mesmo e, neste caso, quando os programadores de adicionar o `ConnectionProvider` atributo para um método devem especificar um valor de ID para distinguir cada ponto de ligação. É uma outra propriedade herdada relevantes a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>propriedade, o que indica se um ponto de ligação de fornecedor pode ligar-se em simultâneo para vários consumidores.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Este valor de propriedade é `true` por predefinição para pontos de ligação de fornecedor (enquanto assume como `false` para pontos de ligação de consumidor).       A classe de ProviderConnectionPoint adiciona vários métodos exclusivos para os membros da qual herda a <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>método obtém uma instância de interface que o método de chamada de retorno irá devolver a consumidores.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> O <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>método obtém as interfaces de consumidor adicionais que façam parte de uma ligação existente, mas não as interfaces utilizadas para estabelecer a ligação.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \n  \n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> classe."
  remarks: "O construtor de ProviderConnectionPoint de <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>classe chama simplesmente o construtor de base, ao mesmo a transmitir os vários parâmetros e ao inicializar a classe base.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       O construtor de classe base verifica um número de parâmetros para um ponto de ligação e pode gerar várias exceções. Para obter uma lista de exceções possíveis, consulte a secção de exceções.       Pode chamar o construtor de ProviderConnectionPoint para criar a sua própria instância de <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> No entanto, nos casos em que são simplesmente estabelecer uma ligação e não a expandir a classe, deve chamar o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>método para devolver um objeto de ponto de ligação existente a partir de um fornecedor.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "O método no controlo de fornecedor que devolva uma instância de interface para consumidores para estabelecer uma ligação."
    - id: interfaceType
      type: System.Type
      description: "O <xref:System.Type>da interface de que o fornecedor funciona para os consumidores.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "O <xref:System.Type>do controlo de fornecedor com o qual o ponto de ligação do fornecedor está associado.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Nome a apresentar amigável para o ponto de ligação de fornecedor que aparece aos utilizadores na interface de utilizador (IU) de ligação."
    - id: id
      type: System.String
      description: "Um identificador exclusivo para o ponto de ligação do fornecedor."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Valor booleano que indica se o ponto de ligação de fornecedor pode ter várias ligações simultâneas com os consumidores."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>Não é o mesmo tipo com o controlo de fornecedor (ou uma classe válida derivado do mesmo)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  id: GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Invoca o método de chamada de retorno num controlo de fornecedor que obtém uma instância de interface para devolver a consumidores."
  remarks: "Este método devolve um objeto do controlo de fornecedor que é uma instância da interface utilizada para estabelecer uma ligação. O tipo de objecto será o tipo da interface implementada. Por exemplo, duas interfaces de rede que são implementadas para ligações no conjunto de controlo de peças Web são <xref:System.Web.UI.WebControls.WebParts.IWebPartField>e <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> Quando o método GetObject é chamado um <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objeto, se o fornecedor associado implementa uma destas interfaces, o objeto devolvido irá ser do mesmo tipo.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       O método de GetObject é chamado <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objetos quando uma ligação que está a ser ativada.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Este é um passo fundamental que, na verdade, inicia uma ligação e inicia o processo que permite dois controlos para partilhar os dados.       O controlo de consumidor numa ligação deve ser capaz de trabalhar com o mesmo tipo de interface como o fornecedor. Se não o fizer, os controlos são incompatíveis e um <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objeto tem de ser utilizado para estabelecer uma ligação.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual object GetObject (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O controlo a agir como o fornecedor de uma ligação de peças Web."
    return:
      type: System.Object
      description: "Um <xref:System.Object>que é uma instância da interface de um fornecedor devolve aos consumidores para estabelecer uma ligação.</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  id: GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Obtém uma coleção opcional de interfaces secundárias que pode ser suportado por um ponto de ligação do fornecedor."
  remarks: "Um objeto de ponto de ligação do fornecedor tem sempre uma interface predefinida que é utilizada para estabelecer uma ligação com os consumidores. Uma instância da interface predefinida é obtida chamando a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>método num <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objeto.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>       No entanto, alguns controlos de fornecedor irão implementar várias interfaces para fornecer aos consumidores como parte de uma ligação. Estas interfaces, o que não são utilizados para estabelecer uma ligação predefinido, denominam interfaces secundárias. O método GetSecondaryInterfaces fornece uma forma para devolver uma coleção de referências a interfaces secundárias, tal como o <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>método devolve uma referência para a interface predefinida.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "O controlo a agir como o fornecedor de uma ligação de peças Web."
    return:
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> das interfaces adicionais fornecidas pelo controlo a agir como um fornecedor."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject
  nameWithType: ProviderConnectionPoint.GetObject
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces
