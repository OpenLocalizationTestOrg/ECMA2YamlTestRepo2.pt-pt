### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageEnumerator
  id: MessageEnumerator
  children:
  - System.Messaging.MessageEnumerator.Close
  - System.Messaging.MessageEnumerator.Current
  - System.Messaging.MessageEnumerator.CursorHandle
  - System.Messaging.MessageEnumerator.Dispose
  - System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageEnumerator.MoveNext
  - System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.Reset
  - System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageEnumerator
  nameWithType: MessageEnumerator
  fullName: System.Messaging.MessageEnumerator
  type: Class
  summary: "Fornece um cursor apenas de reencaminhamento para enumerar através de mensagens em fila de mensagens."
  remarks: "Utilize MessageEnumerator para dinâmica interação com mensagens numa fila. Métodos disponíveis através do <xref:System.Messaging.MessageQueue>classe pode devolver um MessageEnumerator a apontar para uma lista dinâmica de mensagens em fila ou uma matriz que contenha uma cópia numa determinado instantâneas - um instantâneo - da fila no momento de chamar o método especificado.</xref:System.Messaging.MessageQueue>       Ao contrário de um instantâneo estático, um enumerador permite-lhe modificar a coleção. Utilizar um MessageEnumerator, pode remover mensagens da fila, e a alteração é imediatamente refletida na fila.       Um enumerador não remove as mensagens da fila quando a consulta a fila. Devolve informações sobre a mensagem na posição atual do cursor, mas sai a mensagem na fila.       Um MessageEnumerator é um cursor, inicializado para o cabeçalho de uma lista dinâmica. A ordem da lista é a mesma que a ordem das mensagens na fila de acordo com a prioridade da mensagem. Pode mover o cursor para a primeira mensagem da fila ao chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Depois do enumerador foi inicializado, pode utilizar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>para seguir reencaminhar as mensagens restantes.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Pode especificar se a aguardar de uma mensagem para se tornar disponível através da transmissão de um tempo limite para o <xref:System.Messaging.MessageEnumerator.MoveNext%2A>método.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Porque o enumerador for dinâmico, uma mensagem que é acrescentada para além da posição atual do cursor (por exemplo, devido a prioridade baixa), podem ser acedidos pelo enumerador. Uma mensagem que é inserida antes de posição atual do cursor não pode ser acedida. Não é possível para trás passo com um MessageEnumerator. Um cursor permite movimento apenas de reencaminhamento. O <xref:System.Messaging.MessageEnumerator.Reset%2A>método permite-lhe colocar o cursor novamente no início da fila.</xref:System.Messaging.MessageEnumerator.Reset%2A>       Instâncias do MessageEnumerator para uma determinada fila funcionam independentemente. Pode criar duas instâncias de MessageEnumerator que se aplicam à mesma fila. As alterações que uma MessageEnumerator forma para as mensagens na fila serão imediatamente refletidas num enumerador segundo se o segundo o enumerador está posicionado antes do primeiro. No entanto, se dois enumeradores tenham a mesma posição e um deles remove a mensagem nessa posição, é emitida uma exceção se a outro enumerador tentar obter o valor do <xref:System.Messaging.MessageEnumerator.Current%2A>propriedade na mensagem eliminado por agora.</xref:System.Messaging.MessageEnumerator.Current%2A>      > [!NOTE] > Se criar uma instância de <xref:System.Messaging.MessageQueue>com <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName>definido como `true`, nenhuma outra aplicação pode modificar as mensagens existentes na sua enumerador enquanto tiver a ligação para a fila.</xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue>"
  example:
  - "The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority?displayProperty=fullName>.  \n  \n [!code-cs[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/csharp/t-system.messaging.messa_2_1.cs)]\n [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/cpp/t-system.messaging.messa_2_1.cpp)]\n [!code-vb[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_2_1.vb)]"
  syntax:
    content: 'public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Close
  id: Close
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Liberta os recursos associados com o enumerador."
  remarks: "O sistema operativo mantém um identificador aberto para a fila durante a duração do cursor. Quando tiver concluído a trabalhar com o enumerador, chamada fechar para libertar os recursos associados com o identificador."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Current
  id: Current
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém atual <xref href=&quot;System.Messaging.Message&quot;> </xref> que este enumerador aponta para."
  remarks: "Quando o enumerador está criado, aponte para o cabeçalho da fila, numa localização antes da primeira mensagem. Neste caso, o atual não é válido e irá gerar uma exceção se está acessível. Tem de chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>para posicione o cursor a primeira mensagem da fila.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message Current { get; }
    return:
      type: System.Messaging.Message
      description: "A mensagem atual."
  overload: System.Messaging.MessageEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Chamado atual antes da primeira chamada para <> </> *>. O cursor está localizado antes do primeiro elemento da enumeração de mensagem.       - ou - chamar atual depois de uma chamada para <> </> *> tinha devolvido <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (que indica que o cursor está localizado após o último elemento da enumeração de mensagem.)"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "A mensagem que o enumerador está atualmente a apontar para já não existe. Poderá ter sido eliminado."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.CursorHandle
  id: CursorHandle
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Obtém o colocação de mensagens em fila cursor identificador nativo utilizado para procurar mensagens na fila."
  remarks: "Esta propriedade contém o identificador nativo para a enumeração. Quando tiver concluído a trabalhar com o enumerador, chamar <xref:System.Messaging.MessageEnumerator.Close%2A>para este recurso de versão.</xref:System.Messaging.MessageEnumerator.Close%2A>"
  syntax:
    content: public IntPtr CursorHandle { get; }
    return:
      type: System.IntPtr
      description: "O identificador nativo do cursor."
  overload: System.Messaging.MessageEnumerator.CursorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "O identificador não existe."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Versões de todos os recursos utilizados pelo <xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref>."
  remarks: "Chamar Dispose permite que os recursos utilizados pelo <xref:System.Messaging.MessageEnumerator>para possível reatribuir porque para outros fins.</xref:System.Messaging.MessageEnumerator> Para obter mais informações sobre Dispose, consulte [recursos não geridos limpeza](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Liberta os recursos não geridos utilizados pelo <xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref> e opcionalmente liberta os recursos geridos."
  remarks: "Este método é denominado pelo público <xref:System.Messaging.MessageEnumerator.Dispose%2A>método e o <xref:System.Object.Finalize%2A>método.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageEnumerator.Dispose%2A> `Dispose()`invoca protegida `Dispose(Boolean)` método com o `disposing` parâmetro definido como `true`. <xref:System.Object.Finalize%2A>invoca `Dispose` com `disposing` definido como `false`.</xref:System.Object.Finalize%2A>       Quando o `disposing` parâmetro é `true`, este método versões retidos por quaisquer objetos geridos de todos os recursos que este <xref:System.Messaging.MessageEnumerator>referências.</xref:System.Messaging.MessageEnumerator> Este método invoca o `Dispose()` método de cada objeto referenciado."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Para libertar recursos geridos e; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para libertar recursos apenas não geridos."
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Avança o enumerador para a mensagem seguinte na fila, se estiver atualmente disponível."
  remarks: "Esta sobrecarga de devolve imediatamente se não houver nenhuma mensagem na fila. Há outra sobrecarga que aguarda uma determinada <xref:System.TimeSpan>de uma mensagem a chegada.</xref:System.TimeSpan>       Se uma mensagem não está atualmente disponível, porque a fila está vazia ou porque moveu além do último elemento da coleção, MoveNext devolve `false` para o método de chamada.       Após a criação, um enumerador está posicionado, essencialmente, antes da primeira mensagem da fila e a primeira chamada para MoveNext coloca a primeira mensagem da fila na vista."
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o enumerador foi com êxito avançado para a mensagem seguinte; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se o enumerador atingiu o fim da fila."
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Foi emitida uma exceção específica para a colocação de mensagens em fila."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  id: MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Avança o enumerador para a mensagem seguinte na fila. Se o enumerador está posicionado no final da fila, <xref:System.Messaging.MessageEnumerator.MoveNext*>aguarda até que uma mensagem está disponível ou o tempo limite fornecido expira.</xref:System.Messaging.MessageEnumerator.MoveNext*>"
  remarks: "Esta sobrecarga de aguarda se não houver nenhuma mensagem na fila de espera ou se o cursor atingiu o fim da fila. Se uma mensagem não está atualmente disponível porque a fila está vazia ou porque moveu além do último elemento da coleção, <xref:System.Messaging.MessageEnumerator.MoveNext%2A>aguarda o tempo limite especificado.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Se o cursor já está no final da fila, <xref:System.Messaging.MessageEnumerator.MoveNext%2A>só devolve `true` se chegar a nova mensagem dentro do intervalo de tempo especificado, tem de prioridade mais baixa que todas as mensagens actualmente na fila e é colocado no final da fila.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Uma sobrecarga com nenhum parâmetro devolve imediatamente se não existem mensagens adicionais estão disponíveis na fila.       Após a criação, um enumerador concecionais está posicionado antes da primeira mensagem da enumeração e a primeira chamada para <xref:System.Messaging.MessageEnumerator.MoveNext%2A>coloca a primeira mensagem da enumeração numa vista.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public bool MoveNext (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "O <xref:System.TimeSpan>de espera de uma mensagem a estar disponíveis se o enumerador está posicionado no final da fila.</xref:System.TimeSpan>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o enumerador produzida com êxito para a mensagem seguinte; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se o enumerador atingiu o fim da fila e uma mensagem não ficar disponível dentro do período de tempo especificado pelo <code> timeout </code> parâmetro."
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor especificado para o parâmetro de tempo limite é inválido. -Pode representar um número negativo."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Foi emitida uma exceção específica para a colocação de mensagens em fila.       - ou - o tempo limite expirou."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  id: RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual a partir de uma fila transacional ou não transacional e devolve a mensagem para a aplicação de chamada. Não há nenhum tempo limite especificado de uma mensagem a chegada na fila."
  remarks: "RemoveCurrent remove e devolve a mensagem na localização atual do cursor.       Se estiver a utilizar o registo em diário de fila, removendo-a faz com que uma cópia que serão guardadas na fila de diário de alterações, tal como o <xref:System.Messaging.MessageQueue>dessa classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando remover a mensagem atual, o cursor é movido para a mensagem seguinte. Não é necessário chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>depois de chamar RemoveCurrent.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Se chamar esta sobrecarga de uma fila transacional, a colocação de mensagens em fila cria uma única transação interna."
  syntax:
    content: public System.Messaging.Message RemoveCurrent ();
    parameters: []
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref> que referencia a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual a partir de uma fila transacional e devolve a mensagem para a aplicação de chamada. Não há nenhum tempo limite especificado de uma mensagem a chegada na fila."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Remove e devolve a mensagem na localização atual do cursor, utilizando o contexto de transação interna definido pelo `transaction` parâmetro.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       Se estiver a utilizar o registo em diário de fila, removendo-a faz com que uma cópia que serão guardadas na fila de diário de alterações, tal como o <xref:System.Messaging.MessageQueue>dessa classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Ao trabalhar com as filas transacionais, uma reversão de uma transação faz com que todas as mensagens removidas por uma chamada para <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>deve ser devolvida para a fila.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> A remoção não é irreversível até que a transação foi consolidada.       Quando remover a mensagem atual, o cursor é movido para a mensagem seguinte. Não é necessário chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>depois de chamar <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "O <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> objeto que especifica a transação em que a mensagem será removida."
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref> que referencia a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual a partir de uma fila e devolve a mensagem para a aplicação de chamada. Não há nenhum tempo limite especificado de uma mensagem a chegada na fila."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Remove e devolve a mensagem na localização atual do cursor, utilizando um contexto de transação definido pelo `transactionType` parâmetro.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       Especifique `Automatic` para o `transactionType` parâmetro se já existir um contexto de transação externa ligada para o thread que pretende utilizar para receber a mensagem. Especifique `Single` se pretender receber a mensagem como uma única transação interna. Pode especificar `None` se pretender receber uma mensagem a partir de uma fila transacional fora de um contexto de transação.       Se estiver a utilizar o registo em diário de fila, removendo-a faz com que uma cópia que serão guardadas na fila de diário de alterações, tal como o <xref:System.Messaging.MessageQueue>dessa classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Ao trabalhar com as filas transacionais, uma reversão de uma transação faz com que todas as mensagens removidas por uma chamada para <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>deve ser devolvida para a fila.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> A remoção não é irreversível até que a transação foi consolidada.       Quando remover a mensagem atual, o cursor é movido para a mensagem seguinte. Não é necessário chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>depois de chamar <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "Um do <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> valores, que descreve o tipo de contexto de transação para associar a mensagem."
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref> que referencia a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "O <code> transactionType </code> parâmetro não é um do <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> membros."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  id: RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual da fila e devolve a mensagem para a aplicação de chamada. Se existir uma mensagem para remover, o método devolve a mesma imediatamente. Caso contrário, o método tem de aguardar o tempo limite especificado para uma nova mensagem de chegada."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Remove e devolve a mensagem na localização atual do cursor.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Se o cursor no fim da fila, esta sobrecarga do método aguarda até que o intervalo especificado por ou uma mensagem está disponível a `timeout` parâmetro expirou.       Se estiver a utilizar o registo em diário de fila, removendo-a faz com que uma cópia que serão guardadas na fila de diário de alterações, tal como o <xref:System.Messaging.MessageQueue>dessa classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando remover a mensagem atual, o cursor é movido para a mensagem seguinte. Não é necessário chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>depois de chamar <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Se chamar esta sobrecarga de uma fila transacional, a colocação de mensagens em fila cria uma única transação interna."
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Intervalo de tempo de espera de uma mensagem a chegada na fila."
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref> que referencia a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor especificado para o <code> timeout </code> parâmetro é inválido."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "O tempo limite expirou."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual a partir de uma fila transacional e devolve a mensagem para a aplicação de chamada. Se existir uma mensagem para remover, o método devolve a mesma imediatamente. Caso contrário, o método tem de aguardar o tempo limite especificado para uma nova mensagem de chegada."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Remove e devolve a mensagem na localização atual do cursor.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Se o cursor no fim da fila, esta sobrecarga do método aguarda até que o intervalo especificado por ou uma mensagem está disponível a `timeout` parâmetro expirou.       Ao trabalhar com as filas transacionais, uma reversão de uma transação faz com que todas as mensagens removidas por uma chamada para <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>deve ser devolvida para a fila.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> A remoção não é irreversível até que a transação foi consolidada.       Se estiver a utilizar o registo em diário de fila, removendo-a faz com que uma cópia que serão guardadas na fila de diário de alterações, tal como o <xref:System.Messaging.MessageQueue>dessa classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando remover a mensagem atual, o cursor é movido para a mensagem seguinte. Não é necessário chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>depois de chamar <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Intervalo de tempo de espera para a mensagem a serem removidos."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "O <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> objeto que especifica o contexto de transação para a mensagem."
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref> que referencia a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor especificado para o <code> timeout </code> parâmetro é inválido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "O tempo limite expirou."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Remove a mensagem atual a partir de uma fila e devolve a mensagem para a aplicação de chamada. Se existir uma mensagem para remover, o método devolve a mesma imediatamente. Caso contrário, o método tem de aguardar o tempo limite especificado para uma nova mensagem de chegada."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Remove e devolve a mensagem na localização atual do cursor, utilizando um contexto de transação definido pelo `transactionType` parâmetro.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Se o cursor no fim da fila, esta sobrecarga do método aguarda até que o intervalo especificado por ou uma mensagem está disponível a `timeout` parâmetro expirou.       Especifique `Automatic` para o `transactionType` parâmetro se já existir um contexto de transação externa ligada para o thread que pretende utilizar para receber a mensagem. Especifique `Single` se pretender receber a mensagem como uma única transação interna. Pode especificar `None` se pretender receber uma mensagem a partir de uma fila transacional fora de um contexto de transação.       Se estiver a utilizar o registo em diário de fila, removendo-a faz com que uma cópia que serão guardadas na fila de diário de alterações, tal como o <xref:System.Messaging.MessageQueue>dessa classe <xref:System.Messaging.MessageQueue.Receive%2A>método.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Ao trabalhar com as filas transacionais, uma reversão de uma transação faz com que todas as mensagens removidas por uma chamada para <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>deve ser devolvida para a fila.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> A remoção não é irreversível até que a transação foi consolidada.       Quando remover a mensagem atual, o cursor é movido para a mensagem seguinte. Não é necessário chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>depois de chamar <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Intervalo de tempo de espera para a mensagem a serem removidos."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "Um do <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> valores, que descreve o tipo de contexto de transação para associar a mensagem."
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref> que referencia a primeira mensagem disponível na fila."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O valor especificado para o <code> timeout </code> parâmetro é inválido."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "O tempo limite expirou."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "O <code> transactionType </code> parâmetro não é um do <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> membros."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Repõe o enumerador atual para que aponte para o cabeçalho da fila."
  remarks: "Um enumerador só pode mover uma direção de reencaminhar. Utilize este método para começar de novo no início da fila.       Depois de chamar reposição, o cursor aponta para a primeira mensagem. Não é necessário chamar <xref:System.Messaging.MessageEnumerator.MoveNext%2A>após chamar Reset para mover o cursor reencaminhar para a primeira mensagem da fila.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Devolve um <xref href=&quot;System.Messaging.Message&quot;> </xref> que referencia a mensagem na posição atual do cursor."
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref> que referencia a mensagem na posição atual do cursor."
  overload: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Messaging.MessageEnumerator.Close
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
- uid: System.Messaging.MessageEnumerator.Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.MessageEnumerator.CursorHandle
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageEnumerator.Dispose
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageEnumerator.MoveNext
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
- uid: System.Messaging.MessageQueueTransaction
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
- uid: System.Messaging.MessageQueueTransactionType
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionType
  nameWithType: MessageQueueTransactionType
  fullName: System.Messaging.MessageQueueTransactionType
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
- uid: System.Messaging.MessageEnumerator.Reset
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageEnumerator.Close*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageEnumerator.Close
- uid: System.Messaging.MessageEnumerator.Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
- uid: System.Messaging.MessageEnumerator.CursorHandle*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
- uid: System.Messaging.MessageEnumerator.Dispose*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageEnumerator.Dispose
- uid: System.Messaging.MessageEnumerator.MoveNext*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageEnumerator.MoveNext
- uid: System.Messaging.MessageEnumerator.RemoveCurrent*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent
  nameWithType: MessageEnumerator.RemoveCurrent
- uid: System.Messaging.MessageEnumerator.Reset*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageEnumerator.Reset
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
