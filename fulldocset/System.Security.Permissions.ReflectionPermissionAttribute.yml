### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.ReflectionPermissionAttribute
  id: ReflectionPermissionAttribute
  children:
  - System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  - System.Security.Permissions.ReflectionPermissionAttribute.Flags
  - System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  - System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  - System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  - System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  langs:
  - csharp
  name: ReflectionPermissionAttribute
  nameWithType: ReflectionPermissionAttribute
  fullName: System.Security.Permissions.ReflectionPermissionAttribute
  type: Class
  summary: "Permite que as ações de segurança para <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref> seja aplicada ao código utilizando a segurança declarativa."
  remarks: "Depende do âmbito da declaração de que está autorizado a <xref:System.Security.Permissions.SecurityAction>que é utilizado.</xref:System.Security.Permissions.SecurityAction>       As informações de segurança declaradas por um atributo de segurança são armazenadas nos metadados do destino de atributo e são acedidas pelo sistema em tempo de execução. Atributos de segurança são utilizados apenas para a segurança declarativa. Para segurança imperativo, utilize a classe de permissão correspondente."
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ReflectionPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: ReflectionPermissionAttribute(SecurityAction)
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Security.Permissions.ReflectionPermissionAttribute&quot;> </xref> classe com especificado <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>."
  syntax:
    content: public ReflectionPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "Um do <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref> valores."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: ReflectionPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Cria e devolve um novo <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref>."
  remarks: "Este método só deve ser chamado pelo sistema de segurança, nunca pelo código da aplicação.       No momento da compilação, atributos converter declarações de segurança para um formato serializado nos metadados. Dados de segurança declarativos nos metadados são criados a partir a permissão que este método devolve que corresponde a este atributo."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref> que corresponde a este atributo."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  id: Flags
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Obtém ou define o atual permitido utiliza de reflexão."
  syntax:
    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "Um ou mais do <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref> valores combinados utilizando um bit a bit OR."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "É efetuada uma tentativa de definir esta propriedade para um valor inválido. Consulte <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref> para os valores válidos."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  id: MemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Obtém ou define um valor que indica se a invocação de operações em membros do público não é permitida."
  syntax:
    content: public bool MemberAccess { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se é permitida a invocação de operações em membros não público. caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  id: ReflectionEmit
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Obtém ou define um valor que indica se a utilização de determinadas funcionalidades no <xref href=&quot;System.Reflection.Emit&quot;> </xref>, tais como emitir símbolos de depuração, é permitido."
  remarks: "> [!NOTE]> Começando com o [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)], emitir código não exige período <xref:System.Security.Permissions.ReflectionPermission>com o <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>sinalizador.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.ReflectionPermission> Algumas funcionalidades de reflexão emissão, por exemplo, emitir símbolos de depuração, ainda requerem o <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>sinalizador.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> (Consulte [problemas de segurança no reflexão emitir](~/add/includes/ajax-current-ext-md.md).)   >> Para utilizar esta funcionalidade, a aplicação deve visar o [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] ou posterior."
  syntax:
    content: public bool ReflectionEmit { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se for permitida a utilização das funcionalidades do afetados; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  id: RestrictedMemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Obtém ou define um valor que indica se é permitida restrita invocação de membros não público. Invocação restrita significa que o conjunto de permissões da assemblagem que contém o membro não público que está a ser invocado tem de ser igual a ou um subconjunto do conjunto de permissões da assemblagem ao invocar."
  remarks: >-
    > [!NOTE]

    >  This property is introduced in the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]. To use this property, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later.
  syntax:
    content: public bool RestrictedMemberAccess { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se restrito invocação de membros do público não é permitida. caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  id: TypeInformation
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Obtém ou define um valor que indica se é permitido reflexão em membros que não estão visíveis."
  remarks: "Esta propriedade está obsoleta. Ao refletir nos metadados de membros que não estão visíveis já não necessita de <xref:System.Security.Permissions.ReflectionPermission>.</xref:System.Security.Permissions.ReflectionPermission>"
  syntax:
    content: public bool TypeInformation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se é permitido reflexão em membros que não estão visíveis. caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionPermissionAttribute(SecurityAction)
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: ReflectionPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.Flags
- uid: System.Security.Permissions.ReflectionPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: ReflectionPermissionFlag
  nameWithType: ReflectionPermissionFlag
  fullName: System.Security.Permissions.ReflectionPermissionFlag
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionPermissionAttribute
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: ReflectionPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
