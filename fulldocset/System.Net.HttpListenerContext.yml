### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerContext
  id: HttpListenerContext
  children:
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  - System.Net.HttpListenerContext.Request
  - System.Net.HttpListenerContext.Response
  - System.Net.HttpListenerContext.User
  langs:
  - csharp
  name: HttpListenerContext
  nameWithType: HttpListenerContext
  fullName: System.Net.HttpListenerContext
  type: Class
  summary: "Fornece acesso a objetos de pedido e resposta utilizados pelo <xref href=&quot;System.Net.HttpListener&quot;> </xref> classe. Esta classe não pode ser herdada."
  remarks: "Esta classe fornece as informações relacionadas com a pedido do protocolo HTTP (Hypertext Transfer) de um cliente processado por um <xref:System.Net.HttpListener>objeto.</xref:System.Net.HttpListener> Esta classe tem também os métodos que lhe permitem uma <xref:System.Net.HttpListener>objeto para aceitar uma ligação de WebSocket.</xref:System.Net.HttpListener>       O <xref:System.Net.HttpListener.GetContext%2A>método devolve as instâncias da classe de HttpListenerContext.</xref:System.Net.HttpListener.GetContext%2A> Para obter o objeto que representa o pedido de cliente, utilize o <xref:System.Net.HttpListenerContext.Request%2A>propriedade.</xref:System.Net.HttpListenerContext.Request%2A> Para obter o objeto que representa a resposta que será enviada para o cliente, o <xref:System.Net.HttpListener>, utilize o <xref:System.Net.HttpListenerContext.Response%2A>propriedade.</xref:System.Net.HttpListenerContext.Response%2A> </xref:System.Net.HttpListener> Para obter informações do utilizador sobre o cliente a enviar o pedido, como o respetivo nome de início de sessão e se esta foi autenticada, pode consultar as propriedades no <xref:System.Security.Principal.IPrincipal>objecto devolvido pelo <xref:System.Net.HttpListenerContext.User%2A>propriedade.</xref:System.Net.HttpListenerContext.User%2A> </xref:System.Security.Principal.IPrincipal>       Fechar um objeto de HttpListenerContext envia a resposta ao cliente e liberta os recursos utilizados pelo HttpListenerContext. Abortar um objeto de HttpListenerContext rejeita a resposta ao cliente se já não foi enviado e liberta os recursos utilizados pelo HttpListenerContext. Depois de fechar ou ao abortar um objeto de HttpListenerContext, não é possível referenciar o métodos ou propriedades. Se o fizer, irá receber um <xref:System.ObjectDisposedException>exceção.</xref:System.ObjectDisposedException>"
  example:
  - "The following code example displays the user information for a client request.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/t-system.net.httplistene_0_1.cs)]"
  syntax:
    content: public sealed class HttpListenerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  id: AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Aceite uma ligação de WebSocket como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após a ligação de WebSocket foi aceite.</xref:System.Threading.Tasks.Task%601>       O tamanho da memória intermédia de receção é 16,385 bytes. O intervalo de ligação keep-alive de WebSocket está definido para o valor predefinido de 30.000 (30 segundos)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Suportado sub-protocolo de WebSocket."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt;.       O objeto de tarefa que representa a operação assíncrona. O &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; propriedade do objeto de tarefa devolve uma <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> objeto."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>é uma cadeia vazia - ou - <code>subProtocol</code> contém carateres ilegais."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Ocorreu um erro ao enviar a resposta para concluir o handshake de WebSocket."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Aceite uma ligação de WebSocket especificando a suportados sub-protocolo de WebSocket e o intervalo de ligação keep-alive de WebSocket como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após a ligação de WebSocket foi aceite.</xref:System.Threading.Tasks.Task%601>       O tamanho da memória intermédia de receção é 16,385 bytes."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Suportado sub-protocolo de WebSocket."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "O WebSocket protocolo ligação keep-alive intervalo em milissegundos."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt;.       O objeto de tarefa que representa a operação assíncrona. O &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; propriedade do objeto de tarefa devolve uma <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> objeto."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>é uma cadeia vazia - ou - <code>subProtocol</code> contém carateres ilegais."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>é demasiado pequena."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Ocorreu um erro ao enviar a resposta para concluir o handshake de WebSocket."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Aceitar uma ligação de WebSocket especificando o suportados sub-protocolo de WebSocket, recebem o tamanho da memória intermédia e o intervalo de ligação keep-alive de WebSocket como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>> objeto será concluída após a ligação de WebSocket foi aceite.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Suportado sub-protocolo de WebSocket."
    - id: receiveBufferSize
      type: System.Int32
      description: "O tamanho de memória intermédia de receção em bytes."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "O WebSocket protocolo ligação keep-alive intervalo em milissegundos."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt;.       O objeto de tarefa que representa a operação assíncrona. O &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; propriedade do objeto de tarefa devolve uma <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> objeto."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>é uma cadeia vazia - ou - <code>subProtocol</code> contém carateres ilegais."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>é demasiado pequena.       - ou - <code>receiveBufferSize</code> é inferior a 16 bytes - ou - <code>receiveBufferSize</code> é superior a 64K bytes."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Ocorreu um erro ao enviar a resposta para concluir o handshake de WebSocket."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Aceitar uma ligação de WebSocket especificando o suportados sub-protocolo de WebSocket, recebem o tamanho da memória intermédia, intervalo de ligação keep-alive de WebSocket e a memória intermédia interna, como uma operação assíncrona."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após a ligação de WebSocket foi aceite.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment<byte> internalBuffer);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Suportado sub-protocolo de WebSocket."
    - id: receiveBufferSize
      type: System.Int32
      description: "O tamanho de memória intermédia de receção em bytes."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "O WebSocket protocolo ligação keep-alive intervalo em milissegundos."
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "Uma memória intermédia interna a utilizar para esta operação."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt;.       O objeto de tarefa que representa a operação assíncrona. O &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; propriedade do objeto de tarefa devolve uma <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> objeto."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>é uma cadeia vazia - ou - <code>subProtocol</code> contém carateres ilegais."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>é demasiado pequena.       - ou - <code>receiveBufferSize</code> é inferior a 16 bytes - ou - <code>receiveBufferSize</code> é superior a 64K bytes."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Ocorreu um erro ao enviar a resposta para concluir o handshake de WebSocket."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Request
  id: Request
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o <xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref> que representa o pedido do cliente para um recurso."
  remarks: "Se fechar esta <xref:System.Net.HttpListenerContext>, irá enviar a resposta para o cliente, feche o <xref:System.Net.HttpListenerResponse>que contém a resposta e fechar o <xref:System.Net.HttpListenerRequest>objecto devolvido por esta propriedade.</xref:System.Net.HttpListenerRequest> </xref:System.Net.HttpListenerResponse> </xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates calling this method. The `listener` variable holds an <xref:System.Net.HttpListener> object.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_16_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerRequest Request { get; }
    return:
      type: System.Net.HttpListenerRequest
      description: "Um <xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref> objeto que representa o pedido do cliente."
  overload: System.Net.HttpListenerContext.Request*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Response
  id: Response
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém o <xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref> objeto que será enviado para o cliente em resposta ao pedido do cliente."
  remarks: "A aplicação configura a resposta ao definir propriedades <xref:System.Net.HttpListenerResponse>objecto devolvido por esta propriedade.</xref:System.Net.HttpListenerResponse> Depois de configurar a resposta, pode enviá-lo para o cliente fechando a resposta, ou se fechar esta <xref:System.Net.HttpListenerContext>objeto.</xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates getting the response to a client's request and adding the response body.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_35_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerResponse Response { get; }
    return:
      type: System.Net.HttpListenerResponse
      description: "Um <xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref> objecto utilizado para enviar uma resposta de volta para o cliente."
  overload: System.Net.HttpListenerContext.Response*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.User
  id: User
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Obtém um objeto utilizado para obter a identidade, informações de autenticação e funções de segurança para o cliente cujo pedido é representado por este <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> objeto."
  remarks: "Um <xref:System.Net.HttpListener>indica que requer autenticação utilizando o <xref:System.Net.HttpListener.AuthenticationSchemes%2A>propriedade ou especificando um <xref:System.Net.AuthenticationSchemeSelector>Delegar utilizando o <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>propriedade.</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> </xref:System.Net.AuthenticationSchemeSelector> </xref:System.Net.HttpListener.AuthenticationSchemes%2A> </xref:System.Net.HttpListener>       Para determinar o nome de início de sessão do cliente e informações de autenticação, verifique o <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>propriedade no objecto devolvido por esta propriedade.</xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/p-system.net.httplistene_19_1.cs)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "Um <xref:System.Security.Principal.IPrincipal>objeto que descreve o cliente, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o <xref href=&quot;System.Net.HttpListener&quot;> </xref> que fornecido isto <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> não exija autenticação.</xref:System.Security.Principal.IPrincipal>"
  overload: System.Net.HttpListenerContext.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.WebSockets.WebSocketException
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketException
  nameWithType: WebSocketException
  fullName: System.Net.WebSockets.WebSocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpListenerWebSocketContext>
  nameWithType: Task<HttpListenerWebSocketContext>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.HttpListenerWebSocketContext
    name: HttpListenerWebSocketContext
    nameWithType: HttpListenerWebSocketContext
    fullName: HttpListenerWebSocketContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerContext.Request
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
- uid: System.Net.HttpListenerRequest
  parent: System.Net
  isExternal: false
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
- uid: System.Net.HttpListenerContext.Response
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
- uid: System.Net.HttpListenerResponse
  parent: System.Net
  isExternal: false
  name: HttpListenerResponse
  nameWithType: HttpListenerResponse
  fullName: System.Net.HttpListenerResponse
- uid: System.Net.HttpListenerContext.User
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync
  nameWithType: HttpListenerContext.AcceptWebSocketAsync
- uid: System.Net.HttpListenerContext.Request*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
- uid: System.Net.HttpListenerContext.Response*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
- uid: System.Net.HttpListenerContext.User*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
