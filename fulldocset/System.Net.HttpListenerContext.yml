### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerContext
  id: HttpListenerContext
  children:
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  - System.Net.HttpListenerContext.Request
  - System.Net.HttpListenerContext.Response
  - System.Net.HttpListenerContext.User
  langs:
  - csharp
  name: HttpListenerContext
  nameWithType: HttpListenerContext
  fullName: System.Net.HttpListenerContext
  type: Class
  summary: "Provides access to the request and response objects used by the <xref href=&quot;System.Net.HttpListener&quot;></xref> class. This class cannot be inherited."
  remarks: "This class provides the information related to a client&quot;s Hypertext Transfer Protocol (HTTP) request being processed by an <xref:System.Net.HttpListener> object. This class also has methods that allow an <xref:System.Net.HttpListener> object to accept a WebSocket connection.       The <xref:System.Net.HttpListener.GetContext%2A> method returns instances of the HttpListenerContext class. To get the object that represents the client request, use the <xref:System.Net.HttpListenerContext.Request%2A> property. To get the object that represents the response that will be sent to the client by the <xref:System.Net.HttpListener>, use the <xref:System.Net.HttpListenerContext.Response%2A> property. To get user information about the client sending the request, such as its login name and whether it has been authenticated, you can query the properties in the <xref:System.Security.Principal.IPrincipal> object returned by the <xref:System.Net.HttpListenerContext.User%2A> property.       Closing an HttpListenerContext object sends the response to the client and frees any resources used by the HttpListenerContext. Aborting an HttpListenerContext object discards the response to the client if it has not already been sent, and frees any resources used by the HttpListenerContext. After closing or aborting an HttpListenerContext object, you cannot reference its methods or properties. If you do so, you will receive an <xref:System.ObjectDisposedException> exception."
  example:
  - "The following code example displays the user information for a client request.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/t-system.net.httplistene_0_1.cs)]"
  syntax:
    content: public sealed class HttpListenerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  id: AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Accept a WebSocket connection as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the WebSocket connection has been accepted.       The size of the receive buffer is 16,385 bytes. The WebSocket keep-alive interval is set to the default value of 30,000 (30 seconds)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol);
    parameters:
    - id: subProtocol
      type: System.String
      description: "The supported WebSocket sub-protocol."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref> object."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code> is an empty string       -or-       <code>subProtocol</code> contains illegal characters."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "An error occurred when sending the response to complete the WebSocket handshake."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Accept a WebSocket connection specifying the supported WebSocket sub-protocol  and WebSocket keep-alive interval as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the WebSocket connection has been accepted.       The size of the receive buffer is 16,385 bytes."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "The supported WebSocket sub-protocol."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "The WebSocket protocol keep-alive interval in milliseconds."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref> object."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code> is an empty string       -or-       <code>subProtocol</code> contains illegal characters."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code> is too small."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "An error occurred when sending the response to complete the WebSocket handshake."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Accept a WebSocket connection specifying the supported WebSocket sub-protocol, receive buffer size, and WebSocket keep-alive interval as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> > object will complete after the WebSocket connection has been accepted."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "The supported WebSocket sub-protocol."
    - id: receiveBufferSize
      type: System.Int32
      description: "The receive buffer size in bytes."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "The WebSocket protocol keep-alive interval in milliseconds."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref> object."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code> is an empty string       -or-       <code>subProtocol</code> contains illegal characters."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code> is too small.       -or-       <code>receiveBufferSize</code> is less than 16 bytes       -or-       <code>receiveBufferSize</code> is greater than 64K bytes."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "An error occurred when sending the response to complete the WebSocket handshake."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Accept a WebSocket connection specifying the supported WebSocket sub-protocol, receive buffer size, WebSocket keep-alive interval, and the internal buffer as an asynchronous operation."
  remarks: "This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the WebSocket connection has been accepted."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment<byte> internalBuffer);
    parameters:
    - id: subProtocol
      type: System.String
      description: "The supported WebSocket sub-protocol."
    - id: receiveBufferSize
      type: System.Int32
      description: "The receive buffer size in bytes."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "The WebSocket protocol keep-alive interval in milliseconds."
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "An internal buffer to use for this operation."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Returns &lt;xref:System.Threading.Tasks.Task%601&gt;.       The task object representing the asynchronous operation. The &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; property on the task object returns an <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref> object."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code> is an empty string       -or-       <code>subProtocol</code> contains illegal characters."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code> is too small.       -or-       <code>receiveBufferSize</code> is less than 16 bytes       -or-       <code>receiveBufferSize</code> is greater than 64K bytes."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "An error occurred when sending the response to complete the WebSocket handshake."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Request
  id: Request
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Gets the <xref href=&quot;System.Net.HttpListenerRequest&quot;></xref> that represents a client&quot;s request for a resource."
  remarks: "If you close this <xref:System.Net.HttpListenerContext>, it will send the response to the client, close the <xref:System.Net.HttpListenerResponse> that contains the response, and close the <xref:System.Net.HttpListenerRequest> object returned by this property."
  example:
  - "The following code example demonstrates calling this method. The `listener` variable holds an <xref:System.Net.HttpListener> object.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_16_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerRequest Request { get; }
    return:
      type: System.Net.HttpListenerRequest
      description: "An <xref href=&quot;System.Net.HttpListenerRequest&quot;></xref> object that represents the client request."
  overload: System.Net.HttpListenerContext.Request*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Response
  id: Response
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Gets the <xref href=&quot;System.Net.HttpListenerResponse&quot;></xref> object that will be sent to the client in response to the client&quot;s request."
  remarks: "Your application configures the response by setting properties in the <xref:System.Net.HttpListenerResponse> object returned by this property. After configuring the response, you send it to the client by closing the response, or by closing this <xref:System.Net.HttpListenerContext> object."
  example:
  - "The following code example demonstrates getting the response to a client's request and adding the response body.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_35_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerResponse Response { get; }
    return:
      type: System.Net.HttpListenerResponse
      description: "An <xref href=&quot;System.Net.HttpListenerResponse&quot;></xref> object used to send a response back to the client."
  overload: System.Net.HttpListenerContext.Response*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.User
  id: User
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Gets an object used to obtain identity, authentication information, and security roles for the client whose request is represented by this <xref href=&quot;System.Net.HttpListenerContext&quot;></xref> object."
  remarks: "An <xref:System.Net.HttpListener> indicates that it requires authentication using the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property or by specifying an <xref:System.Net.AuthenticationSchemeSelector> delegate using the <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property.       To determine the client&quot;s login name and authentication information, check the <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName> property in the object returned by this property."
  example:
  - "The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/p-system.net.httplistene_19_1.cs)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "An <xref:System.Security.Principal.IPrincipal> object that describes the client, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the <xref href=&quot;System.Net.HttpListener&quot;></xref> that supplied this <xref href=&quot;System.Net.HttpListenerContext&quot;></xref> does not require authentication."
  overload: System.Net.HttpListenerContext.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.WebSockets.WebSocketException
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketException
  nameWithType: WebSocketException
  fullName: System.Net.WebSockets.WebSocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpListenerWebSocketContext>
  nameWithType: Task<HttpListenerWebSocketContext>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.HttpListenerWebSocketContext
    name: HttpListenerWebSocketContext
    nameWithType: HttpListenerWebSocketContext
    fullName: HttpListenerWebSocketContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerContext.Request
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
- uid: System.Net.HttpListenerRequest
  parent: System.Net
  isExternal: false
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
- uid: System.Net.HttpListenerContext.Response
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
- uid: System.Net.HttpListenerResponse
  parent: System.Net
  isExternal: false
  name: HttpListenerResponse
  nameWithType: HttpListenerResponse
  fullName: System.Net.HttpListenerResponse
- uid: System.Net.HttpListenerContext.User
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync
  nameWithType: HttpListenerContext.AcceptWebSocketAsync
- uid: System.Net.HttpListenerContext.Request*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
- uid: System.Net.HttpListenerContext.Response*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
- uid: System.Net.HttpListenerContext.User*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
