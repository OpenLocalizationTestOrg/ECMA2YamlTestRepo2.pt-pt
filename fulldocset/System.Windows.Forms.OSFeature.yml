### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.OSFeature
  id: OSFeature
  children:
  - System.Windows.Forms.OSFeature.#ctor
  - System.Windows.Forms.OSFeature.Feature
  - System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)
  - System.Windows.Forms.OSFeature.IsPresent(System.Windows.Forms.SystemParameter)
  - System.Windows.Forms.OSFeature.LayeredWindows
  - System.Windows.Forms.OSFeature.Themes
  langs:
  - csharp
  name: OSFeature
  nameWithType: OSFeature
  fullName: System.Windows.Forms.OSFeature
  type: Class
  summary: "Provides operating-system specific feature queries."
  remarks: "Use the `static` instance of this class provided in the <xref:System.Windows.Forms.OSFeature.Feature%2A> property to query for operating system features. You cannot create an instance of this class.       To determine the version of a feature, call the <xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A> method. To determine if a feature or a specific version is present, call the <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> method and specify the feature to look for with the feature identifiers provided in this class."
  example:
  - "The following example uses OSFeature to query the operating system to determine if the <xref:System.Windows.Forms.OSFeature.LayeredWindows> feature is installed. The example presents two different ways of checking to see whether the feature is present. In the first method, `myVersion` is checked to see if it is `null`. If the version is `null`, the feature is not installed. In the second method, the example calls the base class method <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> to see if the feature is installed. The results are displayed in a text box.  \n  \n This code assumes `textBox1` has been created and placed on a form.  \n  \n [!code-cs[Classic OSFeature Example#1](~/add/codesnippet/csharp/t-system.windows.forms.o_0_1.cs)]\n [!code-vb[Classic OSFeature Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.o_0_1.vb)]\n [!code-cpp[Classic OSFeature Example#1](~/add/codesnippet/cpp/t-system.windows.forms.o_0_1.cpp)]"
  syntax:
    content: 'public class OSFeature : System.Windows.Forms.FeatureSupport'
  inheritance:
  - System.Object
  - System.Windows.Forms.FeatureSupport
  implements: []
  inheritedMembers:
  - System.Windows.Forms.FeatureSupport.GetVersionPresent(System.String,System.String)
  - System.Windows.Forms.FeatureSupport.IsPresent(System.Object)
  - System.Windows.Forms.FeatureSupport.IsPresent(System.Object,System.Version)
  - System.Windows.Forms.FeatureSupport.IsPresent(System.String,System.String)
  - System.Windows.Forms.FeatureSupport.IsPresent(System.String,System.String,System.Version)
  platform:
  - net462
- uid: System.Windows.Forms.OSFeature.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.OSFeature
  langs:
  - csharp
  name: OSFeature()
  nameWithType: OSFeature.OSFeature()
  fullName: System.Windows.Forms.OSFeature.OSFeature()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Initializes a new instance of the <xref href=&quot;System.Windows.Forms.OSFeature&quot;></xref> class."
  remarks: "This class cannot be instantiated. To query for operating system features, use the `static` instance of <xref:System.Windows.Forms.OSFeature> provided in this class."
  syntax:
    content: protected OSFeature ();
    parameters: []
  overload: System.Windows.Forms.OSFeature.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OSFeature.Feature
  id: Feature
  parent: System.Windows.Forms.OSFeature
  langs:
  - csharp
  name: Feature
  nameWithType: OSFeature.Feature
  fullName: System.Windows.Forms.OSFeature.Feature
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Gets a <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref> instance of the <xref href=&quot;System.Windows.Forms.OSFeature&quot;></xref> class to use for feature queries. This property is read-only."
  remarks: "Use this `static` property to query for operating system features. You cannot create an instance of this class.       To determine the version of a feature, call the <xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A> method. To determine if a feature or a specific version is present, call the <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> method and specify the feature to look for with the feature identifiers provided in this class."
  example:
  - "The following example queries <xref:System.Windows.Forms.OSFeature> for the <xref:System.Windows.Forms.OSFeature.LayeredWindows> feature. The version is checked to see if it is `null`, to determine whether the feature is present. The result is displayed in a text box. This code assumes `textBox1` has been created and placed on a form.  \n  \n [!code-cpp[Classic OSFeature.GetVersionPresent Example#1](~/add/codesnippet/cpp/p-system.windows.forms.o_3_1.cpp)]\n [!code-cs[Classic OSFeature.GetVersionPresent Example#1](~/add/codesnippet/csharp/p-system.windows.forms.o_3_1.cs)]\n [!code-vb[Classic OSFeature.GetVersionPresent Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.o_3_1.vb)]"
  syntax:
    content: public static System.Windows.Forms.OSFeature Feature { get; }
    return:
      type: System.Windows.Forms.OSFeature
      description: "An instance of the <xref href=&quot;System.Windows.Forms.OSFeature&quot;></xref> class."
  overload: System.Windows.Forms.OSFeature.Feature*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)
  id: GetVersionPresent(System.Object)
  parent: System.Windows.Forms.OSFeature
  langs:
  - csharp
  name: GetVersionPresent(Object)
  nameWithType: OSFeature.GetVersionPresent(Object)
  fullName: System.Windows.Forms.OSFeature.GetVersionPresent(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves the version of the specified feature currently available on the system."
  remarks: "Use the <xref:System.Windows.Forms.OSFeature.Feature%2A> property, the `static` instance of <xref:System.Windows.Forms.OSFeature> provided in this class, to query for the version number of a feature."
  example:
  - "The following example queries <xref:System.Windows.Forms.OSFeature> for the <xref:System.Windows.Forms.OSFeature.LayeredWindows> feature. The version is checked to see if it is `null`, to determine whether the feature is present. The result is displayed in a text box. This code assumes `textBox1` has been created and placed on a form.  \n  \n [!code-cpp[Classic OSFeature.GetVersionPresent Example#1](~/add/codesnippet/cpp/m-system.windows.forms.o_2_1.cpp)]\n [!code-cs[Classic OSFeature.GetVersionPresent Example#1](~/add/codesnippet/csharp/m-system.windows.forms.o_2_1.cs)]\n [!code-vb[Classic OSFeature.GetVersionPresent Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.o_2_1.vb)]"
  syntax:
    content: public override Version GetVersionPresent (object feature);
    parameters:
    - id: feature
      type: System.Object
      description: "The feature whose version is requested, either <xref href=&quot;System.Windows.Forms.OSFeature.LayeredWindows&quot;></xref> or <xref href=&quot;System.Windows.Forms.OSFeature.Themes&quot;></xref>."
    return:
      type: System.Version
      description: "A <xref:System.Version> representing the version of the specified operating system feature currently available on the system; or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if the feature cannot be found."
  overload: System.Windows.Forms.OSFeature.GetVersionPresent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OSFeature.IsPresent(System.Windows.Forms.SystemParameter)
  id: IsPresent(System.Windows.Forms.SystemParameter)
  parent: System.Windows.Forms.OSFeature
  langs:
  - csharp
  name: IsPresent(SystemParameter)
  nameWithType: OSFeature.IsPresent(SystemParameter)
  fullName: System.Windows.Forms.OSFeature.IsPresent(SystemParameter)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retrieves a value indicating whether the operating system supports the specified feature or metric."
  remarks: "Typically, you use the IsPresent method to determine if the operating system supports the specific feature or metric identified by `enumValue`. Based upon the value returned from IsPresent, you would perform conditional actions in your code. For example, if calling this method with a parameter value of <xref:System.Windows.Forms.SystemParameter> returns `true`, you could create owner-drawn menus in your application in a flat style.       Accessing some system features or metrics can raise exceptions if they are not available on a specific operating system version. In this case, first use the corresponding <xref:System.Windows.Forms.SystemParameter> enumeration value, along with IsPresent, to determine if the metric is supported. For example, call IsPresent with <xref:System.Windows.Forms.SystemInformation.CaretWidth%2A> before getting the <xref:System.Windows.Forms.SystemInformation.CaretWidth%2A?displayProperty=fullName> property value."
  example:
  - "The following code example demonstrates how to use the IsPresent method with the <xref:System.Windows.Forms.SystemParameter> enumeration. The example determines if the operating system supports the `CaretWidth` metric before calling the <xref:System.Windows.Forms.SystemInformation.CaretWidth%2A?displayProperty=fullName> property.  \n  \n [!code-cpp[System.Windows.Forms.OSFeature.IsPresent#1](~/add/codesnippet/cpp/m-system.windows.forms.o_0_1.cpp)]\n [!code-cs[System.Windows.Forms.OSFeature.IsPresent#1](~/add/codesnippet/csharp/m-system.windows.forms.o_0_1.cs)]\n [!code-vb[System.Windows.Forms.OSFeature.IsPresent#1](~/add/codesnippet/visualbasic/m-system.windows.forms.o_0_1.vb)]  \n[!code-cpp[System.Windows.Forms.OSFeature.IsPresent#2](~/add/codesnippet/cpp/m-system.windows.forms.o_0_2.cpp)]\n[!code-cs[System.Windows.Forms.OSFeature.IsPresent#2](~/add/codesnippet/csharp/m-system.windows.forms.o_0_2.cs)]\n[!code-vb[System.Windows.Forms.OSFeature.IsPresent#2](~/add/codesnippet/visualbasic/m-system.windows.forms.o_0_2.vb)]"
  syntax:
    content: public static bool IsPresent (System.Windows.Forms.SystemParameter enumVal);
    parameters:
    - id: enumVal
      type: System.Windows.Forms.SystemParameter
      description: "A <xref href=&quot;System.Windows.Forms.SystemParameter&quot;></xref> representing the feature to search for."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the feature is available on the system; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.OSFeature.IsPresent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OSFeature.LayeredWindows
  id: LayeredWindows
  parent: System.Windows.Forms.OSFeature
  langs:
  - csharp
  name: LayeredWindows
  nameWithType: OSFeature.LayeredWindows
  fullName: System.Windows.Forms.OSFeature.LayeredWindows
  type: Field
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Represents the layered, top-level windows feature. This field is read-only."
  remarks: "A layered window can be made transparent or translucent by the operating system. Support for layered windows was first introduced in Windows 2000. For more information, see the &quot;Layered Windows: A New Way to Use Translucency and Transparency Effects in Windows Applications&quot; in the Platform SDK documentation at http://msdn.microsoft.com.       To determine if the layered windows feature is installed, use the <xref:System.Windows.Forms.OSFeature.Feature%2A> property to call the base class method <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> with LayeredWindows as the feature to look for.       Alternatively, you can check to see if the feature is installed by calling the <xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A> method with LayeredWindows as the feature to find."
  example:
  - "The following example determines whether the current system supports layered windows. The base class method <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> is called with LayeredWindows as the feature to look for. The result is displayed in a text box. This code assumes `textBox1` has been instantiated and placed on a form.  \n  \n [!code-vb[Classic OSFeature.LayeredWindows Example#1](~/add/codesnippet/visualbasic/f-system.windows.forms.o_1.vb)]\n [!code-cpp[Classic OSFeature.LayeredWindows Example#1](~/add/codesnippet/cpp/f-system.windows.forms.o_1.cpp)]\n [!code-cs[Classic OSFeature.LayeredWindows Example#1](~/add/codesnippet/csharp/f-system.windows.forms.o_1.cs)]"
  syntax:
    content: public static readonly object LayeredWindows;
    return:
      type: System.Object
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.OSFeature.Themes
  id: Themes
  parent: System.Windows.Forms.OSFeature
  langs:
  - csharp
  name: Themes
  nameWithType: OSFeature.Themes
  fullName: System.Windows.Forms.OSFeature.Themes
  type: Field
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Represents the operating system themes feature. This field is read-only."
  remarks: "A theme is a collection of visual interface settings that include wallpaper, cursors, fonts, sounds, and icons first introduced in Microsoft Plus! for Windows 95. The .NET Framework does not directly support manipulating themes, although it does have extensive support for visual styles in the <xref:System.Windows.Forms.VisualStyles?displayProperty=fullName> namespace. For more information about Windows Themes, see the topics Themes and Visual Styles and Visual Styles Reference in the Win32 SDK.       To determine if the themes feature is installed, call the base class method <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> with Themes as the feature to look for.       Alternatively, you can check to see if the feature is installed by calling the <xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A> method with Themes as the feature to find."
  syntax:
    content: public static readonly object Themes;
    return:
      type: System.Object
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Forms.FeatureSupport
  isExternal: false
  name: System.Windows.Forms.FeatureSupport
- uid: System.Windows.Forms.OSFeature.#ctor
  parent: System.Windows.Forms.OSFeature
  isExternal: false
  name: OSFeature()
  nameWithType: OSFeature.OSFeature()
  fullName: System.Windows.Forms.OSFeature.OSFeature()
- uid: System.Windows.Forms.OSFeature.Feature
  parent: System.Windows.Forms.OSFeature
  isExternal: false
  name: Feature
  nameWithType: OSFeature.Feature
  fullName: System.Windows.Forms.OSFeature.Feature
- uid: System.Windows.Forms.OSFeature
  parent: System.Windows.Forms
  isExternal: false
  name: OSFeature
  nameWithType: OSFeature
  fullName: System.Windows.Forms.OSFeature
- uid: System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)
  parent: System.Windows.Forms.OSFeature
  isExternal: false
  name: GetVersionPresent(Object)
  nameWithType: OSFeature.GetVersionPresent(Object)
  fullName: System.Windows.Forms.OSFeature.GetVersionPresent(Object)
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Forms.OSFeature.IsPresent(System.Windows.Forms.SystemParameter)
  parent: System.Windows.Forms.OSFeature
  isExternal: false
  name: IsPresent(SystemParameter)
  nameWithType: OSFeature.IsPresent(SystemParameter)
  fullName: System.Windows.Forms.OSFeature.IsPresent(SystemParameter)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.SystemParameter
  parent: System.Windows.Forms
  isExternal: false
  name: SystemParameter
  nameWithType: SystemParameter
  fullName: System.Windows.Forms.SystemParameter
- uid: System.Windows.Forms.OSFeature.LayeredWindows
  parent: System.Windows.Forms.OSFeature
  isExternal: false
  name: LayeredWindows
  nameWithType: OSFeature.LayeredWindows
  fullName: System.Windows.Forms.OSFeature.LayeredWindows
- uid: System.Windows.Forms.OSFeature.Themes
  parent: System.Windows.Forms.OSFeature
  isExternal: false
  name: Themes
  nameWithType: OSFeature.Themes
  fullName: System.Windows.Forms.OSFeature.Themes
- uid: System.Windows.Forms.OSFeature.#ctor*
  parent: System.Windows.Forms.OSFeature
  isExternal: false
  name: OSFeature
  nameWithType: OSFeature.OSFeature
- uid: System.Windows.Forms.OSFeature.Feature*
  parent: System.Windows.Forms.OSFeature
  isExternal: false
  name: Feature
  nameWithType: OSFeature.Feature
- uid: System.Windows.Forms.OSFeature.GetVersionPresent*
  parent: System.Windows.Forms.OSFeature
  isExternal: false
  name: GetVersionPresent
  nameWithType: OSFeature.GetVersionPresent
- uid: System.Windows.Forms.OSFeature.IsPresent*
  parent: System.Windows.Forms.OSFeature
  isExternal: false
  name: IsPresent
  nameWithType: OSFeature.IsPresent
