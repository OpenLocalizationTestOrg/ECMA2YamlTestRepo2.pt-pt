### YamlMime:ManagedReference
items:
- uid: System.Windows.UIElement
  id: UIElement
  children:
  - System.Windows.UIElement.#ctor
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.AllowDrop
  - System.Windows.UIElement.AllowDropProperty
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.AreAnyTouchesCaptured
  - System.Windows.UIElement.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement.AreAnyTouchesOver
  - System.Windows.UIElement.AreAnyTouchesOverProperty
  - System.Windows.UIElement.Arrange(System.Windows.Rect)
  - System.Windows.UIElement.ArrangeCore(System.Windows.Rect)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.BitmapEffect
  - System.Windows.UIElement.BitmapEffectInput
  - System.Windows.UIElement.BitmapEffectInputProperty
  - System.Windows.UIElement.BitmapEffectProperty
  - System.Windows.UIElement.CacheMode
  - System.Windows.UIElement.CacheModeProperty
  - System.Windows.UIElement.CaptureMouse
  - System.Windows.UIElement.CaptureStylus
  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.Clip
  - System.Windows.UIElement.ClipProperty
  - System.Windows.UIElement.ClipToBounds
  - System.Windows.UIElement.ClipToBoundsProperty
  - System.Windows.UIElement.CommandBindings
  - System.Windows.UIElement.DesiredSize
  - System.Windows.UIElement.DragEnter
  - System.Windows.UIElement.DragEnterEvent
  - System.Windows.UIElement.DragLeave
  - System.Windows.UIElement.DragLeaveEvent
  - System.Windows.UIElement.DragOver
  - System.Windows.UIElement.DragOverEvent
  - System.Windows.UIElement.Drop
  - System.Windows.UIElement.DropEvent
  - System.Windows.UIElement.Effect
  - System.Windows.UIElement.EffectProperty
  - System.Windows.UIElement.Focus
  - System.Windows.UIElement.Focusable
  - System.Windows.UIElement.FocusableChanged
  - System.Windows.UIElement.FocusableProperty
  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.UIElement.GetLayoutClip(System.Windows.Size)
  - System.Windows.UIElement.GetUIParentCore
  - System.Windows.UIElement.GiveFeedback
  - System.Windows.UIElement.GiveFeedbackEvent
  - System.Windows.UIElement.GotFocus
  - System.Windows.UIElement.GotFocusEvent
  - System.Windows.UIElement.GotKeyboardFocus
  - System.Windows.UIElement.GotKeyboardFocusEvent
  - System.Windows.UIElement.GotMouseCapture
  - System.Windows.UIElement.GotMouseCaptureEvent
  - System.Windows.UIElement.GotStylusCapture
  - System.Windows.UIElement.GotStylusCaptureEvent
  - System.Windows.UIElement.GotTouchCapture
  - System.Windows.UIElement.GotTouchCaptureEvent
  - System.Windows.UIElement.HasAnimatedProperties
  - System.Windows.UIElement.HasEffectiveKeyboardFocus
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  - System.Windows.UIElement.InputBindings
  - System.Windows.UIElement.InputHitTest(System.Windows.Point)
  - System.Windows.UIElement.InvalidateArrange
  - System.Windows.UIElement.InvalidateMeasure
  - System.Windows.UIElement.InvalidateVisual
  - System.Windows.UIElement.IsArrangeValid
  - System.Windows.UIElement.IsEnabled
  - System.Windows.UIElement.IsEnabledChanged
  - System.Windows.UIElement.IsEnabledCore
  - System.Windows.UIElement.IsEnabledProperty
  - System.Windows.UIElement.IsFocused
  - System.Windows.UIElement.IsFocusedProperty
  - System.Windows.UIElement.IsHitTestVisible
  - System.Windows.UIElement.IsHitTestVisibleChanged
  - System.Windows.UIElement.IsHitTestVisibleProperty
  - System.Windows.UIElement.IsInputMethodEnabled
  - System.Windows.UIElement.IsKeyboardFocused
  - System.Windows.UIElement.IsKeyboardFocusedChanged
  - System.Windows.UIElement.IsKeyboardFocusedProperty
  - System.Windows.UIElement.IsKeyboardFocusWithin
  - System.Windows.UIElement.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement.IsManipulationEnabled
  - System.Windows.UIElement.IsManipulationEnabledProperty
  - System.Windows.UIElement.IsMeasureValid
  - System.Windows.UIElement.IsMouseCaptured
  - System.Windows.UIElement.IsMouseCapturedChanged
  - System.Windows.UIElement.IsMouseCapturedProperty
  - System.Windows.UIElement.IsMouseCaptureWithin
  - System.Windows.UIElement.IsMouseCaptureWithinChanged
  - System.Windows.UIElement.IsMouseCaptureWithinProperty
  - System.Windows.UIElement.IsMouseDirectlyOver
  - System.Windows.UIElement.IsMouseDirectlyOverChanged
  - System.Windows.UIElement.IsMouseDirectlyOverProperty
  - System.Windows.UIElement.IsMouseOver
  - System.Windows.UIElement.IsMouseOverProperty
  - System.Windows.UIElement.IsStylusCaptured
  - System.Windows.UIElement.IsStylusCapturedChanged
  - System.Windows.UIElement.IsStylusCapturedProperty
  - System.Windows.UIElement.IsStylusCaptureWithin
  - System.Windows.UIElement.IsStylusCaptureWithinChanged
  - System.Windows.UIElement.IsStylusCaptureWithinProperty
  - System.Windows.UIElement.IsStylusDirectlyOver
  - System.Windows.UIElement.IsStylusDirectlyOverChanged
  - System.Windows.UIElement.IsStylusDirectlyOverProperty
  - System.Windows.UIElement.IsStylusOver
  - System.Windows.UIElement.IsStylusOverProperty
  - System.Windows.UIElement.IsVisible
  - System.Windows.UIElement.IsVisibleChanged
  - System.Windows.UIElement.IsVisibleProperty
  - System.Windows.UIElement.KeyDown
  - System.Windows.UIElement.KeyDownEvent
  - System.Windows.UIElement.KeyUp
  - System.Windows.UIElement.KeyUpEvent
  - System.Windows.UIElement.LayoutUpdated
  - System.Windows.UIElement.LostFocus
  - System.Windows.UIElement.LostFocusEvent
  - System.Windows.UIElement.LostKeyboardFocus
  - System.Windows.UIElement.LostKeyboardFocusEvent
  - System.Windows.UIElement.LostMouseCapture
  - System.Windows.UIElement.LostMouseCaptureEvent
  - System.Windows.UIElement.LostStylusCapture
  - System.Windows.UIElement.LostStylusCaptureEvent
  - System.Windows.UIElement.LostTouchCapture
  - System.Windows.UIElement.LostTouchCaptureEvent
  - System.Windows.UIElement.ManipulationBoundaryFeedback
  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  - System.Windows.UIElement.ManipulationCompleted
  - System.Windows.UIElement.ManipulationCompletedEvent
  - System.Windows.UIElement.ManipulationDelta
  - System.Windows.UIElement.ManipulationDeltaEvent
  - System.Windows.UIElement.ManipulationInertiaStarting
  - System.Windows.UIElement.ManipulationInertiaStartingEvent
  - System.Windows.UIElement.ManipulationStarted
  - System.Windows.UIElement.ManipulationStartedEvent
  - System.Windows.UIElement.ManipulationStarting
  - System.Windows.UIElement.ManipulationStartingEvent
  - System.Windows.UIElement.Measure(System.Windows.Size)
  - System.Windows.UIElement.MeasureCore(System.Windows.Size)
  - System.Windows.UIElement.MouseDown
  - System.Windows.UIElement.MouseDownEvent
  - System.Windows.UIElement.MouseEnter
  - System.Windows.UIElement.MouseEnterEvent
  - System.Windows.UIElement.MouseLeave
  - System.Windows.UIElement.MouseLeaveEvent
  - System.Windows.UIElement.MouseLeftButtonDown
  - System.Windows.UIElement.MouseLeftButtonDownEvent
  - System.Windows.UIElement.MouseLeftButtonUp
  - System.Windows.UIElement.MouseLeftButtonUpEvent
  - System.Windows.UIElement.MouseMove
  - System.Windows.UIElement.MouseMoveEvent
  - System.Windows.UIElement.MouseRightButtonDown
  - System.Windows.UIElement.MouseRightButtonDownEvent
  - System.Windows.UIElement.MouseRightButtonUp
  - System.Windows.UIElement.MouseRightButtonUpEvent
  - System.Windows.UIElement.MouseUp
  - System.Windows.UIElement.MouseUpEvent
  - System.Windows.UIElement.MouseWheel
  - System.Windows.UIElement.MouseWheelEvent
  - System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  - System.Windows.UIElement.OnCreateAutomationPeer
  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  - System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.UIElement.Opacity
  - System.Windows.UIElement.OpacityMask
  - System.Windows.UIElement.OpacityMaskProperty
  - System.Windows.UIElement.OpacityProperty
  - System.Windows.UIElement.PersistId
  - System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.UIElement.PreviewDragEnter
  - System.Windows.UIElement.PreviewDragEnterEvent
  - System.Windows.UIElement.PreviewDragLeave
  - System.Windows.UIElement.PreviewDragLeaveEvent
  - System.Windows.UIElement.PreviewDragOver
  - System.Windows.UIElement.PreviewDragOverEvent
  - System.Windows.UIElement.PreviewDrop
  - System.Windows.UIElement.PreviewDropEvent
  - System.Windows.UIElement.PreviewGiveFeedback
  - System.Windows.UIElement.PreviewGiveFeedbackEvent
  - System.Windows.UIElement.PreviewGotKeyboardFocus
  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement.PreviewKeyDown
  - System.Windows.UIElement.PreviewKeyDownEvent
  - System.Windows.UIElement.PreviewKeyUp
  - System.Windows.UIElement.PreviewKeyUpEvent
  - System.Windows.UIElement.PreviewLostKeyboardFocus
  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement.PreviewMouseDown
  - System.Windows.UIElement.PreviewMouseDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonDown
  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonUp
  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement.PreviewMouseMove
  - System.Windows.UIElement.PreviewMouseMoveEvent
  - System.Windows.UIElement.PreviewMouseRightButtonDown
  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement.PreviewMouseRightButtonUp
  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement.PreviewMouseUp
  - System.Windows.UIElement.PreviewMouseUpEvent
  - System.Windows.UIElement.PreviewMouseWheel
  - System.Windows.UIElement.PreviewMouseWheelEvent
  - System.Windows.UIElement.PreviewQueryContinueDrag
  - System.Windows.UIElement.PreviewQueryContinueDragEvent
  - System.Windows.UIElement.PreviewStylusButtonDown
  - System.Windows.UIElement.PreviewStylusButtonDownEvent
  - System.Windows.UIElement.PreviewStylusButtonUp
  - System.Windows.UIElement.PreviewStylusButtonUpEvent
  - System.Windows.UIElement.PreviewStylusDown
  - System.Windows.UIElement.PreviewStylusDownEvent
  - System.Windows.UIElement.PreviewStylusInAirMove
  - System.Windows.UIElement.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement.PreviewStylusInRange
  - System.Windows.UIElement.PreviewStylusInRangeEvent
  - System.Windows.UIElement.PreviewStylusMove
  - System.Windows.UIElement.PreviewStylusMoveEvent
  - System.Windows.UIElement.PreviewStylusOutOfRange
  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement.PreviewStylusSystemGesture
  - System.Windows.UIElement.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement.PreviewStylusUp
  - System.Windows.UIElement.PreviewStylusUpEvent
  - System.Windows.UIElement.PreviewTextInput
  - System.Windows.UIElement.PreviewTextInputEvent
  - System.Windows.UIElement.PreviewTouchDown
  - System.Windows.UIElement.PreviewTouchDownEvent
  - System.Windows.UIElement.PreviewTouchMove
  - System.Windows.UIElement.PreviewTouchMoveEvent
  - System.Windows.UIElement.PreviewTouchUp
  - System.Windows.UIElement.PreviewTouchUpEvent
  - System.Windows.UIElement.QueryContinueDrag
  - System.Windows.UIElement.QueryContinueDragEvent
  - System.Windows.UIElement.QueryCursor
  - System.Windows.UIElement.QueryCursorEvent
  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.ReleaseAllTouchCaptures
  - System.Windows.UIElement.ReleaseMouseCapture
  - System.Windows.UIElement.ReleaseStylusCapture
  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.RenderSize
  - System.Windows.UIElement.RenderTransform
  - System.Windows.UIElement.RenderTransformOrigin
  - System.Windows.UIElement.RenderTransformOriginProperty
  - System.Windows.UIElement.RenderTransformProperty
  - System.Windows.UIElement.ShouldSerializeCommandBindings
  - System.Windows.UIElement.ShouldSerializeInputBindings
  - System.Windows.UIElement.SnapsToDevicePixels
  - System.Windows.UIElement.SnapsToDevicePixelsProperty
  - System.Windows.UIElement.StylusButtonDown
  - System.Windows.UIElement.StylusButtonDownEvent
  - System.Windows.UIElement.StylusButtonUp
  - System.Windows.UIElement.StylusButtonUpEvent
  - System.Windows.UIElement.StylusDown
  - System.Windows.UIElement.StylusDownEvent
  - System.Windows.UIElement.StylusEnter
  - System.Windows.UIElement.StylusEnterEvent
  - System.Windows.UIElement.StylusInAirMove
  - System.Windows.UIElement.StylusInAirMoveEvent
  - System.Windows.UIElement.StylusInRange
  - System.Windows.UIElement.StylusInRangeEvent
  - System.Windows.UIElement.StylusLeave
  - System.Windows.UIElement.StylusLeaveEvent
  - System.Windows.UIElement.StylusMove
  - System.Windows.UIElement.StylusMoveEvent
  - System.Windows.UIElement.StylusOutOfRange
  - System.Windows.UIElement.StylusOutOfRangeEvent
  - System.Windows.UIElement.StylusPlugIns
  - System.Windows.UIElement.StylusSystemGesture
  - System.Windows.UIElement.StylusSystemGestureEvent
  - System.Windows.UIElement.StylusUp
  - System.Windows.UIElement.StylusUpEvent
  - System.Windows.UIElement.TextInput
  - System.Windows.UIElement.TextInputEvent
  - System.Windows.UIElement.TouchDown
  - System.Windows.UIElement.TouchDownEvent
  - System.Windows.UIElement.TouchEnter
  - System.Windows.UIElement.TouchEnterEvent
  - System.Windows.UIElement.TouchesCaptured
  - System.Windows.UIElement.TouchesCapturedWithin
  - System.Windows.UIElement.TouchesDirectlyOver
  - System.Windows.UIElement.TouchesOver
  - System.Windows.UIElement.TouchLeave
  - System.Windows.UIElement.TouchLeaveEvent
  - System.Windows.UIElement.TouchMove
  - System.Windows.UIElement.TouchMoveEvent
  - System.Windows.UIElement.TouchUp
  - System.Windows.UIElement.TouchUpEvent
  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  - System.Windows.UIElement.Uid
  - System.Windows.UIElement.UidProperty
  - System.Windows.UIElement.UpdateLayout
  - System.Windows.UIElement.Visibility
  - System.Windows.UIElement.VisibilityProperty
  langs:
  - csharp
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
  type: Class
  summary: "UIElement é uma classe base para implementações de nível de principais WPF tendo [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] elementos e características de apresentação básico."
  remarks: "UIElement fornece um ponto de partida para características de esquema do elemento e também expõe métodos virtuais que derivadas classes podem substituir, que pode influenciar o esquema de composição comportamento do elemento e o respetivo subordinado elementos.       Muitas da entrada e concentrar-se em geral comportamento para elementos também esteja definida na classe UIElement. Isto inclui os eventos de teclado, rato e a entrada de caneta e propriedades de estado relacionadas. Muitas destes eventos são eventos encaminhados e muitos dos eventos relacionados com a entrada tem ambos um encaminhamento bubbling versão, bem como uma versão de túnel do evento. Estes eventos emparelhados são, normalmente, os eventos de interesse maior para autores de controlo.       Também inclui UIElement [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] relacionadas com o [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] modelo de evento, incluindo os métodos que podem originar especificados encaminhados eventos que tenham origem a partir de uma instância de elemento.       Em termos de arquitetura, UIElement pode ser considerada aproximadamente equivalente a um identificador de janela no [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)] programação ou um elemento [!INCLUDE[TLA#tla_dhtml](~/add/includes/tlasharptla-dhtml-md.md)] de programação. UIElement é um elemento base ao nível de principais do WPF.       Um UIElement tem as seguintes capacidades especificamente definidas pela classe UIElement:-pode ser composto como um elemento subordinado (UIElement deriva de <xref:System.Windows.Media.Visual>, uma classe de gráficos de nível elevado) - contém a lógica que é utilizada para o tamanho e posição de elementos possíveis subordinado de um UIElement (quando interpretado por um sistema de esquema) - pode responder a intervenção do utilizador (incluindo o controlo de onde entrada obter enviada para através do respetivo processamento de eventos de encaminhamento ou o encaminhamento de comandos) - podem accionar eventos encaminhados que viajam uma rota através da árvore lógica elemento - suporta alguns aspetos do sistema de animação <xref:System.Windows.FrameworkElement>WPF ao nível do framework implementação classe baseia-se no UIElement e adiciona específicas interações com o nível de framework WPF.</xref:System.Windows.FrameworkElement> </xref:System.Windows.Media.Visual> <xref:System.Windows.FrameworkElement>Adiciona e define as seguintes capacidades: - características adicionais específicas do framework esquema - suportem para metadados mais rico de propriedades - implementação de classe específico de determinados entrada base classes e as respetivas propriedades anexadas ou ligado eventos - suporte de estilo - ainda mais a animação suportar outra relacionadas com a classe é <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement></xref:System.Windows.FrameworkElement> O <xref:System.Windows.ContentElement>classe implementa muitas dos membros da mesmos forma UIElement; tem a diferença entre estas duas classes com os respetivos previsto colocar no modelo de conteúdo em geral.</xref:System.Windows.ContentElement> Uma classe derivada de UIElement normalmente define um modelo de conteúdo relativamente rigid, que significa que não existem restrições para os elementos que podem ser elementos subordinados no markup. Poderão existir capacidade para colocar conteúdo menos restritivo do subordinado num UIElement, mas esse capacidade é normalmente centralizada nas propriedades do conteúdo designadas. A <xref:System.Windows.ContentElement>classe derivada não é, geralmente, restritiva sobre o conteúdo, para suportar cenários tais como documentos do formato de fluxo.</xref:System.Windows.ContentElement>      > [!IMPORTANT] > <xref:System.Windows.UIElement.Visibility%2A>Estado afeta todos os entrada processamento por esse elemento.</xref:System.Windows.UIElement.Visibility%2A> Não participar nos testes de acessos de elementos que não estão visíveis e não receber eventos de entrada, mesmo que o rato está sobre os limites onde seria o elemento se foram visível."
  syntax:
    content: >-
      [System.Windows.Markup.UidProperty("Uid")]

      public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Visual
  implements:
  - System.Windows.IInputElement
  - System.Windows.Media.Animation.IAnimatable
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.GetVisualChild(System.Int32)
  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.VisualBitmapEffect
  - System.Windows.Media.Visual.VisualBitmapEffectInput
  - System.Windows.Media.Visual.VisualBitmapScalingMode
  - System.Windows.Media.Visual.VisualCacheMode
  - System.Windows.Media.Visual.VisualChildrenCount
  - System.Windows.Media.Visual.VisualClearTypeHint
  - System.Windows.Media.Visual.VisualClip
  - System.Windows.Media.Visual.VisualEdgeMode
  - System.Windows.Media.Visual.VisualEffect
  - System.Windows.Media.Visual.VisualOffset
  - System.Windows.Media.Visual.VisualOpacity
  - System.Windows.Media.Visual.VisualOpacityMask
  - System.Windows.Media.Visual.VisualParent
  - System.Windows.Media.Visual.VisualScrollableAreaClip
  - System.Windows.Media.Visual.VisualTextHintingMode
  - System.Windows.Media.Visual.VisualTextRenderingMode
  - System.Windows.Media.Visual.VisualTransform
  - System.Windows.Media.Visual.VisualXSnappingGuidelines
  - System.Windows.Media.Visual.VisualYSnappingGuidelines
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.UIElement.#ctor
  id: '#ctor'
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: UIElement()
  nameWithType: UIElement.UIElement()
  fullName: System.Windows.UIElement.UIElement()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Windows.UIElement&quot;> </xref> classe."
  remarks: "Criar uma nova instância, que é do tipo <xref:System.Windows.UIElement>é invulgar no código da aplicação, porque <xref:System.Windows.UIElement>é um elemento base.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement> Consulte [Base descrição geral de elementos](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public UIElement ();
    parameters: []
  overload: System.Windows.UIElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Adiciona um processador de eventos encaminhados para um evento encaminhado especificado, adicionar o processador para a coleção de processador no elemento actual."
  remarks: "Pode adicionar o processador do mesmo para o mesmo evento várias vezes sem gerar uma exceção. No entanto, o processador é, na verdade, invocado várias vezes quando o evento é processado. Por conseguinte, considere como este comportamento pode ter efeitos secundários que devem ser tidas em conta na sua implementação do processador.       Normalmente, utiliza este método para a implementação do acessor &quot;Adicionar&quot; para o [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] padrão de acesso de eventos de um evento encaminhado personalizado."
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Um identificador para o evento encaminhado deve ser processada."
    - id: handler
      type: System.Delegate
      description: "Uma referência para a implementação de processador."
  overload: System.Windows.UIElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Adiciona um processador de eventos encaminhados para um evento encaminhado especificado, adicionar o processador para a coleção de processador no elemento actual. Especifique <code> handledEventsToo </code> como <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> para que o processador fornecido ser invocado para o evento encaminhado que já tinha sido marcado como processado por outro elemento ao longo da rota do evento."
  remarks: "Processamento de eventos de entrada de nível baixo de uma forma prática é uma tarefa complexa. Comportamento em que um determinado evento está marcado como processada e é substituído por outro evento mais intuitivo de implementar vários controlos. Geralmente, um controlo só será assinalar a um evento de entrada de plataforma como processado se houver algum intenção de design para fazê-lo. Em certos cenários, as intenções de design poderão não ser que requer que o processamento do evento de entrada específico. Destina-se estes cenários que registar processadores com `handledEventsToo` como `true` adequada. Mas deve não efetuar este procedimento regularmente. Invocar rotinas de tratamento em resposta a todos os eventos, mesmo se processado irá dificultar a sua própria lógica de processamento de eventos de aplicações. Poderá ver um decréscimo no desempenho se a lógica do processador é significativo. Deve reservando a utilização da anexação processadores de eventos processados já para situações em que já tenham detetados durante o processo de desenvolvimento determinados controlos são processar eventos que pretenda continuar a processar com a lógica da aplicação.       Outra técnica para evitar o comportamento de determinadas combinações de controlo de eventos de processamento de classe é utilizar alternativa de pré-visualização esse evento. Por exemplo, se <xref:System.Windows.UIElement.MouseLeftButtonDown>está marcado como processadas pelo processamento de classe, poderá conseguir adicionar processadores <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>em vez disso.</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> </xref:System.Windows.UIElement.MouseLeftButtonDown>       Pode adicionar o processador do mesmo para o mesmo evento várias vezes sem gerar uma exceção. No entanto, o processador é, na verdade, invocado várias vezes quando o evento é processado. Por conseguinte, considere como este comportamento pode ter efeitos secundários que devem ser tidas em conta na sua implementação do processador.       Normalmente, utiliza este método para a implementação do acessor &quot;Adicionar&quot; para o [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] padrão de acesso de eventos de um evento encaminhado personalizado."
  example:
  - "The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`. This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.  \n  \n [!code-cs[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/csharp/EventOvwSupport/page2.xaml.cs#addhandlerhandledtoo)]\n [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/visualbasic/eventovwsupport/page2.xaml.vb#addhandlerhandledtoo)]"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Um identificador para o evento encaminhado deve ser processada."
    - id: handler
      type: System.Delegate
      description: "Uma referência para a implementação de processador."
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para registar o processador de forma a que é invocada, mesmo quando o evento encaminhado está marcada como processada nos seus dados de eventos; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> para registar o processador com a condição de predefinição não será invocado se o evento encaminhado já está marcada como processado.       A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.       Regularmente voltar a pedir para rehandle um evento encaminhado. Para obter mais informações, consulte observações."
  overload: System.Windows.UIElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  id: AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Adiciona os processadores especificado <xref href=&quot;System.Windows.EventRoute&quot;> </xref> para atual <xref href=&quot;System.Windows.UIElement&quot;> </xref> recolha de processador de eventos."
  remarks: "Este método pode ser utilizado por elementos de anfitrião de conteúdos (ou aqueles que implementam <xref:System.Windows.IContentHost>ou que não) para adicionar processadores para elementos subordinados para <xref:System.Windows.EventRoute>.</xref:System.Windows.EventRoute> </xref:System.Windows.IContentHost> Normalmente, isto não é necessário para <xref:System.Windows.UIElement>, porque os processadores são adicionados automaticamente para todos os elementos encontrados numa árvore lógica foi concluída.</xref:System.Windows.UIElement> No entanto, em alguns casos onde <xref:System.Windows.ContentElement>e <xref:System.Windows.UIElement>são misto na árvores transformada em modelo, intervenientes elementos provém a necessidade de modelo para ser adicionado a uma rota.</xref:System.Windows.UIElement> </xref:System.Windows.ContentElement> Ambos <xref:System.Windows.ContentElement>e <xref:System.Windows.UIElement>suporta uma versão deste método.</xref:System.Windows.UIElement> </xref:System.Windows.ContentElement>"
  syntax:
    content: public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);
    parameters:
    - id: route
      type: System.Windows.EventRoute
      description: "A rota de evento que os processadores são adicionados à."
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Os dados de eventos são utilizados para adicionar os processadores. Este método utiliza o <xref:System.Windows.RoutedEventArgs.RoutedEvent*>propriedade dos dados de eventos para criar os processadores.</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  overload: System.Windows.UIElement.AddToEventRoute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AllowDrop
  id: AllowDrop
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
  fullName: System.Windows.UIElement.AllowDrop
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se este elemento pode ser utilizado como o destino de uma operação de arrastar e largar.  Esta é uma propriedade de dependência."
  remarks: "Operações de arrastar e largar não estão ativadas por predefinição e tem de estar ativadas deliberadamente definindo AllowDrop `true`. Para além desta definição básica, o comportamento de arrastar e largar é inteiramente implementação específica e não está definido ou <xref:System.Windows.UIElement>qualquer outra classe base do elemento.</xref:System.Windows.UIElement> Por exemplo, determinados controlos <xref:System.Windows.Controls.RichTextBox>, ter um comportamento predefinido.</xref:System.Windows.Controls.RichTextBox> Para obter mais informações sobre a operação arrastar e largar, consulte [de arrastar e largar descrição geral](~/add/includes/ajax-current-ext-md.md).       <xref:System.Windows.FrameworkElement>substitui os metadados para esta propriedade de dependência na sua implementação.</xref:System.Windows.FrameworkElement> Especificamente, <xref:System.Windows.FrameworkElement>designa esta propriedade para permitir a herança de valor de propriedade (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> é `true` nos metadados).</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement> Herança de valor de propriedade neste contexto significa que se existem elementos subordinados com nenhum outro valor para AllowDrop atribuído através de valores locais ou de estilos, o valor do elemento principal mais próximo com este valor (novamente, encontra-se num estilos, por valores predefinidos ou um valor local), em seguida, o valor do elemento principal de será atribuído a todos os elementos subordinados anteriormente não atribuídos pelo sistema de propriedade. Na prática, isto significa que pode especificar se pretende permitir operações de largar no elemento de raiz e que o valor serão propagadas a todos os elementos subordinados que tenham não especificamente atribuído como `false`.      <a name=&quot;dependencyPropertyInfo_AllowDrop&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.AllowDropProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.AllowDropProperty>"
  example:
  - "The following markup example sets the AllowDrop property `true` using an attribute on a <xref:System.Windows.Controls.TextBox>, as well as setting some other related properties that in aggregate enable that <xref:System.Windows.Controls.TextBox> to be the target of a multiline text data object when it is dragged in. For the complete sample, see [Load a Dropped File Sample](http://msdn.microsoft.com/en-us/be90d645-dd61-4f53-93bb-87902d086ef7).  \n  \n [!code-xml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/add/codesnippet/xaml/dropopentextfile/window1.xaml#uielementallowdrop)]"
  syntax:
    content: public bool AllowDrop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este elemento pode ser utilizado como o destino de uma operação de arrastar e largar; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor predefinido é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.AllowDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AllowDropProperty
  id: AllowDropProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AllowDropProperty
  nameWithType: UIElement.AllowDropProperty
  fullName: System.Windows.UIElement.AllowDropProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.AllowDrop*>propriedade de dependência.</xref:System.Windows.UIElement.AllowDrop*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowDropProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Aplica-se um animação para uma propriedade de dependência especificado neste elemento. Qualquer animações existentes são paradas e substituir a animação de novo."
  remarks: "Para remover uma animação de uma propriedade, especifique o identificador dessa propriedade como `dp` e especifique `clock` como `null`. Esta ação remove a animação e a propriedade animada está definida para o valor base. No entanto, o relógio de animação originalmente associado não está parado. Quaisquer outras animações atribuídas a esse relógio continuará a ser executado."
  example:
  - "In the following example, a <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` has a particular timing animation applied to it by calling ApplyAnimationClock .  \n  \n [!code-cs[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/add/codesnippet/csharp/TimingBehavior_csharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]\n [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/add/codesnippet/visualbasic/timingbehavior_vb/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]"
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "O identificador de propriedade animar."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "O relógio de animação que controla e declara a animação."
  overload: System.Windows.UIElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Aplica-se um animação para uma propriedade de dependência especificado neste elemento, com a capacidade de especificar o que acontece se a propriedade já tem uma animação em execução."
  remarks: "Para remover uma animação de uma propriedade, especifique o identificador dessa propriedade como `dp` e especifique `clock` como `null`. Esta ação remove a animação e a propriedade animada está definida para o valor base. No entanto, o relógio de animação originalmente associado não está parado. Quaisquer outras animações atribuídas a esse relógio continuará a ser executado."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade para animar."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "O relógio de animação que controla e declara a animação."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Um valor de enumeração. A predefinição é <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref>, que irá parar quaisquer animação existente e substitua o novo."
  overload: System.Windows.UIElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCaptured
  id: AreAnyTouchesCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCaptured
  nameWithType: UIElement.AreAnyTouchesCaptured
  fullName: System.Windows.UIElement.AreAnyTouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se é capturado o touch, pelo menos, um para este elemento."
  syntax:
    content: public bool AreAnyTouchesCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se, pelo menos, um touch é capturada para este elemento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.AreAnyTouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCapturedProperty
  id: AreAnyTouchesCapturedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedProperty
  nameWithType: UIElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.AreAnyTouchesCaptured*>propriedade de dependência.</xref:System.Windows.UIElement.AreAnyTouchesCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin
  id: AreAnyTouchesCapturedWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se pelo menos um touch é capturado para este elemento ou para quaisquer elementos subordinados na respetiva árvore visual."
  syntax:
    content: public bool AreAnyTouchesCapturedWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se, pelo menos, um touch é capturada para este elemento ou quaisquer elementos subordinados na respetiva árvore visual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.AreAnyTouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  id: AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: UIElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.AreAnyTouchesCapturedWithin*>propriedade de dependência.</xref:System.Windows.UIElement.AreAnyTouchesCapturedWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver
  id: AreAnyTouchesDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se pelo menos um touch é premido através deste elemento."
  syntax:
    content: public bool AreAnyTouchesDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se, pelo menos, um touch é premido através deste elemento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.AreAnyTouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  id: AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: UIElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.AreAnyTouchesDirectlyOver*>propriedade de dependência.</xref:System.Windows.UIElement.AreAnyTouchesDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesOver
  id: AreAnyTouchesOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesOver
  nameWithType: UIElement.AreAnyTouchesOver
  fullName: System.Windows.UIElement.AreAnyTouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se pelo menos um touch é premido por este elemento ou quaisquer elementos subordinados na respetiva árvore visual."
  syntax:
    content: public bool AreAnyTouchesOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se, pelo menos, um touch é premido por este elemento ou quaisquer elementos subordinados na respetiva árvore visual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.AreAnyTouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesOverProperty
  id: AreAnyTouchesOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesOverProperty
  nameWithType: UIElement.AreAnyTouchesOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.AreAnyTouchesOver*>propriedade de dependência.</xref:System.Windows.UIElement.AreAnyTouchesOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)
  id: Arrange(System.Windows.Rect)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Arrange(Rect)
  nameWithType: UIElement.Arrange(Rect)
  fullName: System.Windows.UIElement.Arrange(Rect)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Elementos subordinados de posições e determina um tamanho para um <xref href=&quot;System.Windows.UIElement&quot;> </xref>. Elementos principais chamar este método da respetiva <xref:System.Windows.UIElement.ArrangeCore*>Implementação (ou um equivalente de nível de framework WPF) para formar uma atualização de esquema recursiva.</xref:System.Windows.UIElement.ArrangeCore*> Este método constitui a passagem de segundo de uma atualização de esquema."
  remarks: "Para o elemento de nível de estrutura do WPF efectuar a derivação de cenários, possível alterar o comportamento para dispor, não devem (e não é possível, a menos que sombra). Em vez disso, devem substituir a <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>implementação na sua classe.</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> O <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>implementação chama internamente pelo dispor como parte das operações de esquema ao nível do framework predefinida WPF.</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> O <xref:System.Windows.UIElement.ArrangeCore%2A>implementação também deve chamar <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>em cada elemento subordinado, se tem elementos subordinados.</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> </xref:System.Windows.UIElement.ArrangeCore%2A>       Para o elemento de nível de principais do WPF efectuar a derivação de cenários, ser alterado o comportamento para dispor, não devem (e não é possível, a menos que sombra). Em vez disso, devem substituir <xref:System.Windows.UIElement.ArrangeCore%2A>na sua classe.</xref:System.Windows.UIElement.ArrangeCore%2A> O <xref:System.Windows.UIElement.ArrangeCore%2A>implementação chama internamente pelo dispor como parte das operações de esquema ao nível do framework predefinida WPF.</xref:System.Windows.UIElement.ArrangeCore%2A> No entanto, isto pressupõe que está a utilizar o esquema de nível de framework WPF e um sistema de esquema, muitas vezes, não for o caso se especificamente são derivados elementos no WPF nível de principais da <xref:System.Windows.UIElement>classe do elemento base.</xref:System.Windows.UIElement> O <xref:System.Windows.UIElement.ArrangeCore%2A>implementação também deve chamar Arrange num cada elemento subordinado, se tem elementos subordinados.</xref:System.Windows.UIElement.ArrangeCore%2A> Tenha em atenção que o cenário de nível de principais do WPF implica que não está a utilizar um <xref:System.Windows.FrameworkElement>porque a classe, derivada <xref:System.Windows.FrameworkElement>seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</xref:System.Windows.FrameworkElement.ArrangeCore%2A> </xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement>       O cálculo de posicionamento de esquema ao nível do framework WPF no [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] é composta por um <xref:System.Windows.UIElement.Measure%2A>chamada e uma chamada de dispor.</xref:System.Windows.UIElement.Measure%2A> Durante a <xref:System.Windows.UIElement.Measure%2A>chamada, o sistema de esquema determina os requisitos de tamanho de um elemento com um fornecido <xref:System.Windows.Size>(`availableSize`) argumento.</xref:System.Windows.Size> </xref:System.Windows.UIElement.Measure%2A> Durante a chamada de dispor, o sistema de esquema finalizes o tamanho e posição da caixa delimitadora um elemento.  Para obter mais informações, consulte [esquema](~/add/includes/ajax-current-ext-md.md).       `availableSize`pode ser qualquer número entre zero e infinito. Elementos ser dispostos devolvem o mínimo <xref:System.Windows.Size>necessitam através de `availableSize` parâmetro.</xref:System.Windows.Size>       Quando um esquema primeiro é instanciado, recebe sempre uma <xref:System.Windows.UIElement.Measure%2A>chamar antes de dispor.</xref:System.Windows.UIElement.Measure%2A> No entanto, após a primeira passagem de esquema,, poderá receber uma chamada de dispor sem <xref:System.Windows.UIElement.Measure%2A>Isto pode acontecer quando uma propriedade que afeta apenas dispor é alterada (por exemplo, o alinhamento), ou quando o elemento principal recebe um dispor sem <xref:System.Windows.UIElement.Measure%2A>.</xref:System.Windows.UIElement.Measure%2A> </xref:System.Windows.UIElement.Measure%2A> A <xref:System.Windows.UIElement.Measure%2A>chamada invalidará automaticamente uma chamada de dispor.</xref:System.Windows.UIElement.Measure%2A>       Atualizações do esquema ocorrem geralmente assíncrona (durante um determinado pelo sistema esquema). Um elemento poderá não refletir imediatamente as alterações às propriedades que afetam o dimensionamento de elemento (tal como <xref:System.Windows.FrameworkElement.Width%2A>).</xref:System.Windows.FrameworkElement.Width%2A>      > [!NOTE] > Podem ser forçadas a atualizações do esquema utilizando o <xref:System.Windows.UIElement.UpdateLayout%2A>método; no entanto, ao chamar esta função não é recomendado, tal como está, normalmente, desnecessário e pode causar um fraco desempenho.</xref:System.Windows.UIElement.UpdateLayout%2A> Em muitas situações em que a chamar <xref:System.Windows.UIElement.UpdateLayout%2A>poderá ser apropriado, o sistema de esquema será provavelmente já estar a processar as atualizações.</xref:System.Windows.UIElement.UpdateLayout%2A> O sistema de esquema pode processar alterações de esquema de uma forma que pode otimizar a todas as atualizações necessárias como parte de um pacote.       O sistema de esquema mantém duas filas separadas de esquemas inválidas, um para <xref:System.Windows.UIElement.Measure%2A>e outro para dispor.</xref:System.Windows.UIElement.Measure%2A> A fila de esquema é ordenada com base na ordem dos elementos da árvore visual. Elementos superiores na árvore da são na parte superior da fila, para evitar esquemas redundantes causadas por repetido alterações principais. As entradas duplicadas são automaticamente removidas da fila e elementos são automaticamente removidos da fila se que já são válidos.       Ao atualizar o esquema, o <xref:System.Windows.UIElement.Measure%2A>fila é esvaziada em primeiro lugar, seguido pela fila dispor.</xref:System.Windows.UIElement.Measure%2A> Um elemento na fila de dispor nunca irá ser disposto se existir um elemento a <xref:System.Windows.UIElement.Measure%2A>fila.</xref:System.Windows.UIElement.Measure%2A>"
  syntax:
    content: public void Arrange (System.Windows.Rect finalRect);
    parameters:
    - id: finalRect
      type: System.Windows.Rect
      description: "O tamanho final que calcula principal para o elemento subordinado, fornecido como um <xref href=&quot;System.Windows.Rect&quot;> </xref> instância."
  overload: System.Windows.UIElement.Arrange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ArrangeCore(System.Windows.Rect)
  id: ArrangeCore(System.Windows.Rect)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ArrangeCore(Rect)
  nameWithType: UIElement.ArrangeCore(Rect)
  fullName: System.Windows.UIElement.ArrangeCore(Rect)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Define o modelo para o nível de principais do WPF dispor de definição de esquema."
  remarks: >-
    > [!NOTE]

    >  Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.
  example:
  - "ArrangeCore implementations should call the base implementation to return a size, then call the <xref:System.Windows.UIElement.Arrange%2A> method of each visible child element, and reconcile the sizes returned by these <xref:System.Windows.UIElement.Arrange%2A> calls with the size of the base implementation. The logic for the reconciliation aspect of a ArrangeCore implementation might vary, depending on the layout characteristics of your element. In the following example template, `VisualChildren` is a hypothetical property that your element might define to help enumerate its content; <xref:System.Windows.UIElement> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.  \n  \n [!code-cs[CorePseudocode#UIElementArrangeOverride](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#uielementarrangeoverride)]\n [!code-vb[CorePseudocode#UIElementArrangeOverride](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#uielementarrangeoverride)]"
  syntax:
    content: protected virtual void ArrangeCore (System.Windows.Rect finalRect);
    parameters:
    - id: finalRect
      type: System.Windows.Rect
      description: "A área final dentro do elemento principal que o elemento deve utilizar para dispor próprio e os respetivos elementos subordinados."
  overload: System.Windows.UIElement.ArrangeCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Inicia uma animação para uma propriedade animada especificada neste elemento."
  remarks: "Quando seleciona se uma propriedade é animada, tenha em atenção que a animação começará e ser considerada animada quando a frame primeiro para além do ponto de partida não animada é composta.       Se o <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>para `animation` é `null`, em seguida, são removidas quaisquer animações atuais e o valor atual da propriedade é mantido.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>       Se toda a `animation` valor é `null`, todas as animações são removidas da propriedade e o valor da propriedade reverte para o valor base. No entanto, a linha cronológica de animação originalmente associado não está parada. Quaisquer outras animações atribuídas a essa linha cronológica continuará a ser executado."
  example:
  - "The following example creates an animation, assigns it, and then calls BeginAnimation to start it.  \n  \n [!code-cs[timingbehaviors_procedural_snip#BeginAnimation](~/add/codesnippet/csharp/TimingBehavior_csharp/GetAnimationBaseValueExample.cs#beginanimation)]\n [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/add/codesnippet/visualbasic/timingbehavior_vb/getanimationbasevalueexample.vb#beginanimation)]"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade para animar, que é especificada como um identificador de propriedade de dependência."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "A linha cronológica de animação para iniciar."
  overload: System.Windows.UIElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Inicia uma animação específica para uma propriedade animada especificada neste elemento, com a opção de especificar o que acontece se a propriedade já tem uma animação em execução."
  remarks: "Quando seleciona se uma propriedade é animada, tenha em atenção que a animação começará e ser considerada animada quando a frame primeiro para além do ponto de partida não animada é composta.       Se o <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>para `animation` é `null`, em seguida, são removidas quaisquer animações atuais e o valor atual da propriedade é mantido.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>       Se toda a `animation` valor é `null`, todas as animações são removidas da propriedade e o valor da propriedade reverte para o valor base. No entanto, a linha cronológica de animação originalmente associado não está parada. Quaisquer outras animações atribuídas a essa linha cronológica continuará a ser executado."
  example:
  - "The following example implements a handler that obtains an existing animation from a resource and then calls BeginAnimation with a specified handoff behavior.  \n  \n [!code-cs[BrushesIntroduction#BeginAnimationHandoff](~/add/codesnippet/csharp/BrushesIntroduction.BrushesIntroduction/SampleViewer.xaml.cs#beginanimationhandoff)]\n [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/add/codesnippet/visualbasic/brushesintroduction/sampleviewer.xaml.vb#beginanimationhandoff)]"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade para animar, que é especificada como o identificador de propriedade de dependência."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "A linha cronológica de animação sejam aplicadas."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Um valor de enumeração que especifica como a animação novo interage com qualquer animações atual (em execução) que já são afetar o valor da propriedade."
  overload: System.Windows.UIElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffect
  id: BitmapEffect
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffect
  nameWithType: UIElement.BitmapEffect
  fullName: System.Windows.UIElement.BitmapEffect
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um efeito de mapa de bits que se aplica diretamente para o conteúdo composto para este elemento.  Esta é uma propriedade de dependência."
  remarks: "<xref:System.Windows.Media.Effects.BitmapEffect>é um tipo abstrato, por conseguinte o [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] requer a utilização de uma classe derivada implementada de <xref:System.Windows.Media.Effects.BitmapEffect>, tais como <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>.</xref:System.Windows.Media.Effects.OuterGlowBitmapEffect> </xref:System.Windows.Media.Effects.BitmapEffect></xref:System.Windows.Media.Effects.BitmapEffect> Tenha em atenção que um implementado derivados de classe é um tipo de coleção permite-lhe especificar mais do que um sequenciais <xref:System.Windows.Media.Effects.BitmapEffect>, utilizando uma sintaxe de tag aninhados.</xref:System.Windows.Media.Effects.BitmapEffect>       Não existentes derivam de classe de <xref:System.Windows.Media.Effects.BitmapEffect>suporta um conversor de tipos, por isso, o [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] sintaxe que utiliza para esta propriedade é, geralmente, a sintaxe do elemento de propriedade.</xref:System.Windows.Media.Effects.BitmapEffect>      <a name=&quot;dependencyPropertyInfo_BitmapEffect&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.BitmapEffectProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.BitmapEffectProperty>"
  example:
  - "The following example sets a bitmap effect, using <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  \n  \n [!code-cs[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/add/codesnippet/csharp/EffectsGallery/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]"
  syntax:
    content: public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }
    return:
      type: System.Windows.Media.Effects.BitmapEffect
      description: "O efeito de mapa de bits para aplicar."
  overload: System.Windows.UIElement.BitmapEffect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffectInput
  id: BitmapEffectInput
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffectInput
  nameWithType: UIElement.BitmapEffectInput
  fullName: System.Windows.UIElement.BitmapEffectInput
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define uma origem de entrada para o efeito de mapa de bits que aplica-se diretamente para o conteúdo composto para este elemento.  Esta é uma propriedade de dependência."
  remarks: "<a name=&quot;dependencyPropertyInfo_BitmapEffectInput&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.BitmapEffectInputProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.BitmapEffectInputProperty>"
  syntax:
    content: public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }
    return:
      type: System.Windows.Media.Effects.BitmapEffectInput
      description: "A origem para efeitos de mapa de bits."
  overload: System.Windows.UIElement.BitmapEffectInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffectInputProperty
  id: BitmapEffectInputProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffectInputProperty
  nameWithType: UIElement.BitmapEffectInputProperty
  fullName: System.Windows.UIElement.BitmapEffectInputProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.BitmapEffectInput*>propriedade de dependência.</xref:System.Windows.UIElement.BitmapEffectInput*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffectProperty
  id: BitmapEffectProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffectProperty
  nameWithType: UIElement.BitmapEffectProperty
  fullName: System.Windows.UIElement.BitmapEffectProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.BitmapEffect*>propriedade de dependência.</xref:System.Windows.UIElement.BitmapEffect*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty BitmapEffectProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CacheMode
  id: CacheMode
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CacheMode
  nameWithType: UIElement.CacheMode
  fullName: System.Windows.UIElement.CacheMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define uma representação em cache do <xref href=&quot;System.Windows.UIElement&quot;> </xref>."
  remarks: "Defina a propriedade de CacheMode quando precisa de aumentar o desempenho para o conteúdo que é demorado para compor. Para obter mais informações, consulte <xref:System.Windows.Media.BitmapCache>.</xref:System.Windows.Media.BitmapCache>"
  syntax:
    content: public System.Windows.Media.CacheMode CacheMode { get; set; }
    return:
      type: System.Windows.Media.CacheMode
      description: "A <xref href=&quot;System.Windows.Media.CacheMode&quot;> </xref> que contém uma representação em cache do <xref href=&quot;System.Windows.UIElement&quot;> </xref>."
  overload: System.Windows.UIElement.CacheMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CacheModeProperty
  id: CacheModeProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CacheModeProperty
  nameWithType: UIElement.CacheModeProperty
  fullName: System.Windows.UIElement.CacheModeProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.CacheMode*>propriedade de dependência.</xref:System.Windows.UIElement.CacheMode*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CacheModeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CaptureMouse
  id: CaptureMouse
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CaptureMouse()
  nameWithType: UIElement.CaptureMouse()
  fullName: System.Windows.UIElement.CaptureMouse()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tentativas para forçar a captura do rato para este elemento."
  remarks: "Um elemento tem de estar ativado para serem capturadas. Verifique se <xref:System.Windows.UIElement.IsEnabled%2A>é `true` antes de chamar CaptureMouse.</xref:System.Windows.UIElement.IsEnabled%2A>       Se chamar CaptureMouse devolve `true`, em seguida, <xref:System.Windows.UIElement.IsMouseCaptured%2A>também é `true`.</xref:System.Windows.UIElement.IsMouseCaptured%2A>       Se chamar CaptureMouse devolve `true`, em seguida, a <xref:System.Windows.UIElement.GotMouseCapture>e <xref:System.Windows.UIElement.IsMouseCapturedChanged>eventos são gerados, com <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName>de eventos dados comunicou que o elemento em que o método de CaptureMouse é chamado.</xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> </xref:System.Windows.UIElement.IsMouseCapturedChanged> </xref:System.Windows.UIElement.GotMouseCapture> Se forçar captura, pode interferir com capturas de existentes, especialmente com capturas de que o se relacionam com a arrastar e largar com o rato.       Para limpar a captura do rato de todos os elementos, chamar <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>com o `element` parâmetro fornecido como `null`.</xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>"
  example:
  - "The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.  \n  \n [!code-cs[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/csharp/CubeAnimation_XBAP/Trackball.cs#uielementmousecapture)]\n [!code-vb[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/visualbasic/cubeanimation_xbap/trackball.vb#uielementmousecapture)]"
  syntax:
    content: public bool CaptureMouse ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o rato é capturado com êxito; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.CaptureMouse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CaptureStylus
  id: CaptureStylus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CaptureStylus()
  nameWithType: UIElement.CaptureStylus()
  fullName: System.Windows.UIElement.CaptureStylus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tentativas para forçar a captura da caneta para este elemento."
  remarks: "Devolve a implementação predefinida com base no dispositivo de caneta predefinido subjacente sempre `true`. No entanto, se estiver a expandir os dispositivos de entrada que fornecem a implementação de dispositivo para o sistema de entrada, é possível criar um sistema com uma implementação de dispositivo de caneta alternativo que poderá devolver resultados diferentes.       Quando um elemento captura a caneta, este recebe a entrada de caneta, mesmo que esteja a caneta fora dos respetivos limites. A caneta normalmente é capturada apenas durante as operações de arrastar e largar.       Chamar este método chama um <xref:System.Windows.Input.Stylus>método <xref:System.Windows.Input.Stylus.Capture%2A>.</xref:System.Windows.Input.Stylus.Capture%2A> </xref:System.Windows.Input.Stylus> de estático subjacente O comportamento de captura real é implementado pela implementação de dispositivo de caneta Active Directory.       Um elemento tem de estar ativado para serem capturadas. Verifique se <xref:System.Windows.UIElement.IsEnabled%2A>é `true` devolver antes de chamar CaptureStylus.</xref:System.Windows.UIElement.IsEnabled%2A>       Se chamar CaptureStylus devolve `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A>também é `true`.</xref:System.Windows.UIElement.IsStylusCaptured%2A>"
  syntax:
    content: public bool CaptureStylus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a caneta foi capturada com êxito; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.CaptureStylus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  id: CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CaptureTouch(TouchDevice)
  nameWithType: UIElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.UIElement.CaptureTouch(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tentativas para forçar a captura de um toque para este elemento."
  remarks: "Irá devolver CaptureTouch `false` se o <xref:System.Windows.Input.TouchDevice>atualmente capturado para outro elemento.</xref:System.Windows.Input.TouchDevice>       Se devolver CaptureTouch `true`, em seguida, a <xref:System.Windows.UIElement.GotTouchCapture>o evento é gerado.</xref:System.Windows.UIElement.GotTouchCapture>       Para captura de uma única touch deste elemento de versão, utilize o <xref:System.Windows.UIElement.ReleaseTouchCapture%2A>método e especifique o dispositivo de toque para libertar.</xref:System.Windows.UIElement.ReleaseTouchCapture%2A> Para todos os detalhes deste elemento de versão, utilize o <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A>método.</xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A>"
  syntax:
    content: public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "O dispositivo para capturar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se é capturado o touch especificado para este elemento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.CaptureTouch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.UIElement.Clip
  id: Clip
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Clip
  nameWithType: UIElement.Clip
  fullName: System.Windows.UIElement.Clip
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define a geometria utilizada para definir a descrição do conteúdo de um elemento.  Esta é uma propriedade de dependência."
  remarks: "Elementos fora da geometria irão ser anexados visualmente no esquema composto. A geometria tem de ser retangular.      <a name=&quot;dependencyPropertyInfo_Clip&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.ClipProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.ClipProperty>"
  example:
  - "This example shows how to define a framework element'sClipregion. To define a clip, use a <xref:System.Windows.Media.Geometry> (for example, an <xref:System.Windows.Media.EllipseGeometry>to set the element's Clipproperty. Only the area that is within the region of the geometry will be visible.  \n  \n The following example shows an <xref:System.Windows.Controls.Image>element without a defined clip region. Because no clip region is defined, the entire image is displayed.  \n  \n [!code-xml[ClipPathExample#2](~/add/codesnippet/xaml/ClipPathExample/ClipExample.xaml#2)]  \n  \n ![An object before applying a clip region](~/add/media/mil-task-clip-region-noclip.png \"An object before applying a clip region\")  \nImage with No Clip Region  \n  \n In the next example, an identical Image is created, except that it has a defined clip region. Only the part of the image that is within the area the <xref:System.Windows.Media.EllipseGeometry>will be displayed.  \n  \n [!code-xml[ClipPathExample#4](~/add/codesnippet/xaml/ClipPathExample/ClipExample.xaml#4)]  \n  \n ![A clipped object](~/add/media/mil-task-clip-region-ellispe.PNG \"A clipped object\")  \nImage with an Elliptical Clip Region  \n  \n The following example shows how animate a framework element's Clip region. In this example, an <xref:System.Windows.Media.EllipseGeometry> is used to define an elliptical clip region for an <xref:System.Windows.Controls.Image> element. A <xref:System.Windows.Media.Animation.PointAnimation> animates the ellipse geometry's <xref:System.Windows.Media.EllipseGeometry.Center%2A> property from (0, 0) to (200, 150). The animation starts playing after the image is loaded and repeats indefinitely.  \n  \n [!code-xml[ClipPathExample#5](~/add/codesnippet/xaml/ClipPathExample/ClipExample.xaml#5)]  \n  \n For the full sample, see the [Clip Region Sample](http://msdn.microsoft.com/en-us/83043a0b-f824-445f-9675-103280c5ca67)."
  syntax:
    content: public System.Windows.Media.Geometry Clip { get; set; }
    return:
      type: System.Windows.Media.Geometry
      description: "A geometria a ser utilizada para recorte dimensionamento de área. A predefinição é um valor nulo <xref href=&quot;System.Windows.Media.Geometry&quot;> </xref>."
  overload: System.Windows.UIElement.Clip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ClipProperty
  id: ClipProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ClipProperty
  nameWithType: UIElement.ClipProperty
  fullName: System.Windows.UIElement.ClipProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.Clip*>propriedade de dependência.</xref:System.Windows.UIElement.Clip*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ClipProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ClipToBounds
  id: ClipToBounds
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
  fullName: System.Windows.UIElement.ClipToBounds
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se recortar o conteúdo deste elemento (ou provenha conteúda de elementos subordinados deste elemento) para se ajustar o tamanho do elemento que contém.   Esta é uma propriedade de dependência."
  remarks: "Para elementos subordinados, ClipToBounds tem efeitos diferentes no comportamentos de esquema, dependendo se estão a ser determinados a altura e largura do elemento principal pela <xref:System.Windows.FrameworkElement.Height%2A>/ <xref:System.Windows.FrameworkElement.Width%2A>ou <xref:System.Windows.FrameworkElement.MaxHeight%2A>/ <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</xref:System.Windows.FrameworkElement.MaxWidth%2A> </xref:System.Windows.FrameworkElement.MaxHeight%2A> </xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A> <xref:System.Windows.FrameworkElement.MaxHeight%2A>/ <xref:System.Windows.FrameworkElement.MaxWidth%2A>do principal elemento são sempre respeitado independentemente do valor de ClipToBounds e o recorte Efetivo será sempre recortar o conteúdo com base nestes valores máximos.</xref:System.Windows.FrameworkElement.MaxWidth%2A></xref:System.Windows.FrameworkElement.MaxHeight%2A> O principal <xref:System.Windows.FrameworkElement.Height%2A>/ <xref:System.Windows.FrameworkElement.Width%2A>definições não irão recortar o conteúdo quando ClipToBounds `false`, mas será recortar o conteúdo se for ClipToBounds `true`.</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A>       Tenha em atenção que voltar à predefinição `false` é o comportamento geral, como implementados na <xref:System.Windows.UIElement>classe.</xref:System.Windows.UIElement> É possível que qualquer elemento indicado que derive <xref:System.Windows.UIElement>para substituir os metadados da propriedade de dependência para esta propriedade nessa instância predefinido para `true` em vez disso.</xref:System.Windows.UIElement> Várias classes derivadas existentes substituem estes metadados e/ou ajustar o valor de predefinido da propriedade de dependência.       <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, e <xref:System.Windows.Controls.Primitives.Popup>cada substituir o valor predefinido a ser `true`.</xref:System.Windows.Controls.Primitives.Popup> </xref:System.Windows.Controls.InkPresenter></xref:System.Windows.Controls.InkCanvas>       <xref:System.Windows.FrameworkElement>substitui os metadados para esta propriedade de dependência.</xref:System.Windows.FrameworkElement> Especificamente, <xref:System.Windows.FrameworkElement>designa esta propriedade para permitir a herança de valor de propriedade (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> é `true` nos metadados).</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement> Herança de valor de propriedade neste contexto significa que, se existirem elementos subordinados com nenhum outro valor para ClipToBounds atribuído através de valores locais ou de estilos, o valor do elemento principal mais próximo com este valor atribuído (novamente, encontra-se num estilos, por valores predefinidos, ou um valor localmente), em seguida, o valor do elemento principal de será atribuído a todos os elementos subordinados não atribuídos pelo sistema de propriedade. Na prática, isto significa que pode especificar se pretende permitir clip para limites no elemento de raiz e que o valor serão propagadas a todos os elementos subordinados que tenham não especificamente atribuído como `false`.      <a name=&quot;dependencyPropertyInfo_ClipToBounds&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.ClipToBoundsProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.ClipToBoundsProperty>"
  syntax:
    content: public bool ClipToBounds { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o conteúdo deve ser anexado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor predefinido é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.ClipToBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ClipToBoundsProperty
  id: ClipToBoundsProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ClipToBoundsProperty
  nameWithType: UIElement.ClipToBoundsProperty
  fullName: System.Windows.UIElement.ClipToBoundsProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.ClipToBounds*>propriedade de dependência.</xref:System.Windows.UIElement.ClipToBounds*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CommandBindings
  id: CommandBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CommandBindings
  nameWithType: UIElement.CommandBindings
  fullName: System.Windows.UIElement.CommandBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém uma coleção de <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> objetos associados a este elemento. A <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> permite o processamento de comandos para este elemento e declara a ligação entre um comando, os eventos e os processadores ligados por este elemento."
  remarks: "Outra forma de povoar a colecção de CommandBindings típica consiste em utilizar <xref:System.Windows.Input.CommandManager>métodos através de programação.</xref:System.Windows.Input.CommandManager>      <a name=&quot;xamlPropertyElementUsage_CommandBindings&quot;></a># # Utilização de elemento de propriedade de XAML ```   <object>     <object.CommandBindings>       oneOrMoreCommandBindings     </object.CommandBindings>   </object>   ``` <a name=&quot;xamlValues_CommandBindings&quot;> </a> # # XAML valores *oneOrMoreCommandBindings* um ou mais <xref:System.Windows.Input.CommandBinding>elementos.</xref:System.Windows.Input.CommandBinding>       Cada um deles deve ter um <xref:System.Windows.Input.CommandBinding.Command%2A>atributo definido como um comando conhecido e definir os atributos para o <xref:System.Windows.Input.CommandBinding.CanExecute>e <xref:System.Windows.Input.CommandBinding.Executed>implementações do processador.</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.Command%2A> Para obter mais informações consulte <xref:System.Windows.Input.CommandBinding>.</xref:System.Windows.Input.CommandBinding>"
  example:
  - "The following example adds a <xref:System.Windows.Input.CommandBinding> to a window using markup. Note that in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], the <xref:System.Windows.Input.CommandBindingCollection> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <xref:System.Windows.Input.CommandBinding> elements:  \n  \n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n For more information about the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/add/includes/ajax-current-ext-md.md).  \n  \n The following example does essentially the same thing in code:  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]"
  syntax:
    content: public System.Windows.Input.CommandBindingCollection CommandBindings { get; }
    return:
      type: System.Windows.Input.CommandBindingCollection
      description: "A coleção de todos os <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> objetos."
  overload: System.Windows.UIElement.CommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DesiredSize
  id: DesiredSize
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
  fullName: System.Windows.UIElement.DesiredSize
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém o tamanho que este elemento calculado durante a passagem de medidas do processo de esquema."
  remarks: "O valor devolvido por esta propriedade só estará uma medida válido se o valor da <xref:System.Windows.UIElement.IsMeasureValid%2A>propriedade é `true`.</xref:System.Windows.UIElement.IsMeasureValid%2A>       DesiredSize normalmente está marcada como um dos fatores medida quando implementar o comportamento de esquema, tal como substituições <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, ou <xref:System.Windows.UIElement.OnRender%2A>(no <xref:System.Windows.UIElement.OnRender%2A>caso, pode verificar <xref:System.Windows.UIElement.RenderSize%2A>em vez disso, mas isto depende da sua implementação).</xref:System.Windows.UIElement.RenderSize%2A> </xref:System.Windows.UIElement.OnRender%2A> </xref:System.Windows.UIElement.OnRender%2A> </xref:System.Windows.FrameworkElement.MeasureOverride%2A> </xref:System.Windows.FrameworkElement.ArrangeOverride%2A> Dependendo do cenário, DesiredSize poderão ser completamente respeitado pela sua lógica de implementação, poderão ser aplicadas restrições em DesiredSize e essas restrições também podem alterar outras características do elemento principal ou um elemento subordinado. Por exemplo, um controlo que suporta regiões deslocável (mas optar por não deriva de controlos de nível de framework WPF que já permitem regiões deslocável) foi comparar tamanho disponível para DesiredSize. O controlo, em seguida, foi definido um Estado interno que ativado barras de deslocamento no [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] para esse controlo. Ou, DesiredSize foi potencialmente também ser ignorado em determinados cenários."
  example:
  - "The following example shows DesiredSize as part of a <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementation. Notice how <xref:System.Windows.UIElement.Measure%2A> is called immediately prior to obtaining DesiredSize. This assures that DesiredSize holds a legitimate value.  \n  \n [!code-cs[PlotPanel#2](~/add/codesnippet/csharp/PlotPanel_csharp/PlotPanel.cs#2)]\n [!code-cpp[PlotPanel#2](~/add/codesnippet/cpp/plotpanel/PlotPanel.cpp#2)]\n [!code-vb[PlotPanel#2](~/add/codesnippet/visualbasic/PlotPanel/PlotPanel.vb#2)]"
  syntax:
    content: public System.Windows.Size DesiredSize { get; }
    return:
      type: System.Windows.Size
      description: "O tamanho calculado, que torna-se o tamanho pretendido para a passagem de dispor."
  overload: System.Windows.UIElement.DesiredSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragEnter
  id: DragEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragEnter
  nameWithType: UIElement.DragEnter
  fullName: System.Windows.UIElement.DragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada comunica um evento de arrastar subjacente com este elemento como destino de arrastar."
  remarks: "Este evento cria um alias para o <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>anexados a eventos para esta classe, para que DragEnter faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> Processadores de eventos que estão anexados ao evento DragEnter estão ligados ao subjacentes <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragEnter&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.DragEnterEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewDragEnter>.</xref:System.Windows.UIElement.PreviewDragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DragEnterEvent>      -Ignorar <xref:System.Windows.UIElement.OnDragEnter%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragEnterEvent
  id: DragEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragEnterEvent
  nameWithType: UIElement.DragEnterEvent
  fullName: System.Windows.UIElement.DragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.DragEnter&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragLeave
  id: DragLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: UIElement.DragLeave
  fullName: System.Windows.UIElement.DragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada comunica um evento de arrastar subjacente com este elemento como a origem de arrastar."
  remarks: "Este evento cria um alias para o <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>anexados a eventos para esta classe para que DragLeave faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> Processadores de eventos que estão anexados ao evento DragLeave estão ligados ao subjacentes <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragLeave&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.DragLeaveEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.DragDrop.PreviewDragLeave>.</xref:System.Windows.DragDrop.PreviewDragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DragLeaveEvent>      -Ignorar <xref:System.Windows.UIElement.OnDragLeave%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragLeaveEvent
  id: DragLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragLeaveEvent
  nameWithType: UIElement.DragLeaveEvent
  fullName: System.Windows.UIElement.DragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.DragLeave&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragOver
  id: DragOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragOver
  nameWithType: UIElement.DragOver
  fullName: System.Windows.UIElement.DragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada comunica um evento de arrastar subjacente com este elemento como destino de largar potenciais."
  remarks: "Este evento ocorre, mesmo se a arrastar têm origem nos limites de elemento. Se a arrastar inicia fora dos limites e, em seguida, move dentro, este evento é desencadeado também, bem como <xref:System.Windows.UIElement.DragEnter>e relacionada com eventos de pré-visualização.</xref:System.Windows.UIElement.DragEnter>       Este evento cria um alias para o <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>anexados a eventos para esta classe para que DragOver faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> Processadores de eventos que estão anexados ao evento DragOver estão ligados ao subjacentes <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragOver&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.DragOverEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.DragDrop.PreviewDragOver>.</xref:System.Windows.DragDrop.PreviewDragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DragOverEvent>      -Ignorar <xref:System.Windows.UIElement.OnDragOver%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragOverEvent
  id: DragOverEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragOverEvent
  nameWithType: UIElement.DragOverEvent
  fullName: System.Windows.UIElement.DragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.DragOver&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Drop
  id: Drop
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Drop
  nameWithType: UIElement.Drop
  fullName: System.Windows.UIElement.Drop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada comunica um evento de largar subjacente com este elemento como destino de largar."
  remarks: "Este evento cria um alias para o <xref:System.Windows.DragDrop.Drop?displayProperty=fullName>evento anexado para esta classe para esse largar faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.Drop?displayProperty=fullName> Processadores de eventos que estão anexados a eventos de largar estão ligados ao subjacentes <xref:System.Windows.DragDrop.Drop?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.Drop?displayProperty=fullName>      <a name=&quot;routedEventInfo_Drop&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.DropEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewDrop>.</xref:System.Windows.UIElement.PreviewDrop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DropEvent>      -Ignorar <xref:System.Windows.UIElement.OnDrop%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler Drop;
    return:
      type: System.Windows.DragEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DropEvent
  id: DropEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DropEvent
  nameWithType: UIElement.DropEvent
  fullName: System.Windows.UIElement.DropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.Drop&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Effect
  id: Effect
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Effect
  nameWithType: UIElement.Effect
  fullName: System.Windows.UIElement.Effect
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define o efeito de mapa de bits para aplicar o <xref href=&quot;System.Windows.UIElement&quot;> </xref>. Esta é uma propriedade de dependência."
  remarks: "Utilize a propriedade efeito para aplicar um efeito de mapa de bits para <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>      <a name=&quot;dependencyPropertyInfo_Effect&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.EffectProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.EffectProperty>"
  example:
  - "The following XAML shows how to assign a custom <xref:System.Windows.Media.Effects.ShaderEffect> to the Effect property.  \n  \n [!code-xml[System.Windows.Media.Effects.ShaderEffect#1000](~/add/codesnippet/xaml/ShaderEffectDemo/Window1.xaml#1000)]"
  syntax:
    content: public System.Windows.Media.Effects.Effect Effect { get; set; }
    return:
      type: System.Windows.Media.Effects.Effect
      description: "Um <xref href=&quot;System.Windows.Media.Effects.Effect&quot;> </xref> que representa o efeito de mapa de bits."
  overload: System.Windows.UIElement.Effect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.EffectProperty
  id: EffectProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: EffectProperty
  nameWithType: UIElement.EffectProperty
  fullName: System.Windows.UIElement.EffectProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.Effect*>propriedade de dependência.</xref:System.Windows.UIElement.Effect*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty EffectProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Focus
  id: Focus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Focus()
  nameWithType: UIElement.Focus()
  fullName: System.Windows.UIElement.Focus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "A tentar definir o foco para este elemento."
  remarks: "Para ser focusable, <xref:System.Windows.UIElement.Focusable%2A>e <xref:System.Windows.UIElement.IsEnabled%2A>devem ser ambos `true`.</xref:System.Windows.UIElement.IsEnabled%2A> </xref:System.Windows.UIElement.Focusable%2A>       Mesmo se um elemento de processamento de eventos focusable e ativada, dentro de uma árvore específico, (como para um controlo composto) poderá responder a eventos de foco pré-visualização, não permitindo foco, deste modo, este método devolvam `false`.       Foco em geral é regido pelos dois conceitos diferentes: teclado foco e lógico foco, sempre não são idênticos.  Para obter mais informações, consulte [descrição geral de foco](~/add/includes/ajax-current-ext-md.md) ou [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).       Se chamar devolve foco `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A>e <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>também são `true`.</xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> </xref:System.Windows.UIElement.IsKeyboardFocused%2A>       Se as propriedades relacionadas ainda não estiverem `true`, ao chamar o foco, um ou mais dos seguintes eventos são gerados pela seguinte ordem: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>(origem é o destino de foco nova), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus>(origem é o destino de foco novo).</xref:System.Windows.UIElement.GotKeyboardFocus> </xref:System.Windows.UIElement.LostKeyboardFocus> </xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> </xref:System.Windows.UIElement.IsKeyboardFocusedChanged> </xref:System.Windows.UIElement.PreviewGotKeyboardFocus> </xref:System.Windows.UIElement.PreviewLostKeyboardFocus>       Por ordem para esta chamada seja concluída com êxito, alguns outro elemento da aplicação necessários para ter o foco anteriormente."
  example:
  - "The following example sets focus to a <xref:System.Windows.Controls.TextBox> referenced by <xref:System.Windows.FrameworkElement.Name%2A>, and then adjusts the position of the cursor within the <xref:System.Windows.Controls.TextBox>.  \n  \n [!code-cs[TextBox_CursorToEnd#UIElementFocus](~/add/codesnippet/csharp/CursorToEnd/Window1.xaml.cs#uielementfocus)]\n [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/add/codesnippet/visualbasic/CursorToEnd/Window1.xaml.vb#uielementfocus)]"
  syntax:
    content: public bool Focus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o foco do teclado e o foco lógico foram definidos para este elemento; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se apenas foco lógico foi definido para este elemento ou se a chamada para este método não foi possível forçar o foco para alterar."
  overload: System.Windows.UIElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Focusable
  id: Focusable
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Focusable
  nameWithType: UIElement.Focusable
  fullName: System.Windows.UIElement.Focusable
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se o elemento pode receber o foco.  Esta é uma propriedade de dependência."
  remarks: "Apenas o elemento focado recebe introdução por teclado.       FOCUSABLE é o [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] acessor de propriedade para o que é na realidade uma propriedade de dependência. Esta propriedade de dependência específico bastante frequentemente tem o valor de aparente &quot;predefinido&quot; definir de forma diferente em classes derivadas de elemento, particularmente em controlos. Esta situação ocorre normalmente de uma das seguintes formas: - a propriedade de dependência é herdada por uma determinada classe derivada, mas essa classe derivada substitui os metadados da propriedade de dependência e altera o valor predefinido da propriedade.      -Um estilo ou o modelo é aplicado a um elemento, que define esse valor de propriedade de dependência de forma diferente.       Por exemplo, o aparente &quot;predefinido&quot; de Focusable para um <xref:System.Windows.Controls.Button>controlo será `true`, mesmo que <xref:System.Windows.Controls.Button>herda Focusable como um [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] propriedade diretamente a partir do <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Button> Isto acontece porque o valor de metadados aplicados para a propriedade de dependência Focusable foi substituído num construtor estático do <xref:System.Windows.Controls.Control>classe, que é situated entre base <xref:System.Windows.Controls.Button>e <xref:System.Windows.UIElement>na hierarquia de classes.</xref:System.Windows.UIElement> </xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Control>       Quando herdado por <xref:System.Windows.Controls.Control>ou respetivas classes derivadas, <xref:System.Windows.Controls.Control>redefine o valor predefinido desta propriedade ser `true`.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>       Quando herdado por <xref:System.Windows.Controls.Label>(que é um <xref:System.Windows.Controls.Control>classe derivada), o valor predefinido é redefinido novamente para ser `false`.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Label>      <a name=&quot;dependencyPropertyInfo_Focusable&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.FocusableProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.FocusableProperty>"
  example:
  - "The following example code illustrates a control template for a particular custom control, which sets Focusable `false` on one of the elements within the template.  \n  \n [!code-xml[RichTextBox_NoScrollViewer#_ControlTemplate](~/add/codesnippet/xaml/richtextbox_noscrollviewer/window1.xaml#_controltemplate)]\n [!code-xml[RichTextBox_NoScrollViewer#_ControlTemplate](~/add/codesnippet/xaml/p-system.windows.uieleme_9_1.xaml)]"
  syntax:
    content: public bool Focusable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento é focusable; caso contrário <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, mas Consulte observações."
  overload: System.Windows.UIElement.Focusable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.FocusableChanged
  id: FocusableChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: FocusableChanged
  nameWithType: UIElement.FocusableChanged
  fullName: System.Windows.UIElement.FocusableChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.UIElement.Focusable*>alterações de propriedade.</xref:System.Windows.UIElement.Focusable*>"
  remarks: "Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.FocusableProperty
  id: FocusableProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: FocusableProperty
  nameWithType: UIElement.FocusableProperty
  fullName: System.Windows.UIElement.FocusableProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.Focusable*>propriedade de dependência.</xref:System.Windows.UIElement.Focusable*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusableProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  id: GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: UIElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.UIElement.GetAnimationBaseValue(DependencyProperty)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Devolve o valor da propriedade de base para a propriedade especificada neste elemento, disregarding quaisquer possíveis animada valor a uma execução ou parado animação."
  remarks: "Se nenhum animações estão anexadas à propriedade, em seguida, o valor de retorno GetAnimationBaseValue sempre é idêntico para os <xref:System.Windows.DependencyObject.GetValue%2A>devolve o valor.</xref:System.Windows.DependencyObject.GetValue%2A> Se existirem animações ligadas, em seguida, todos os animação possíveis derivada valores, incluindo o início e paragem valores são ignorados e o valor da propriedade é determinado com base em todos os outras entradas possíveis. Para obter mais informações, consulte [precedência de valor de propriedade de dependência](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example implements a handler that reports the base value of an animated <xref:System.Windows.FrameworkElement.Width%2A> property on a <xref:System.Windows.Controls.Button>, as well as the base value of a transform.  \n  \n [!code-cs[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/add/codesnippet/csharp/TimingBehavior_csharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]\n [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/add/codesnippet/visualbasic/timingbehavior_vb/getanimationbasevalueexample.vb#getanimationbasevalue)]"
  syntax:
    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "A propriedade de dependência para verificar."
    return:
      type: System.Object
      description: "A propriedade valor como se nenhum animações ligadas para a propriedade de dependência especificado."
  overload: System.Windows.UIElement.GetAnimationBaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GetLayoutClip(System.Windows.Size)
  id: GetLayoutClip(System.Windows.Size)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GetLayoutClip(Size)
  nameWithType: UIElement.GetLayoutClip(Size)
  fullName: System.Windows.UIElement.GetLayoutClip(Size)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Devolve uma geometria de recorte alternativo que representa a região que teria de ser anexada se <xref:System.Windows.UIElement.ClipToBounds*>foram definidos para <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.UIElement.ClipToBounds*>"
  remarks: "A implementação predefinida irá devolver um valor legítimo, mas não utiliza o `layoutSlotSize` parâmetro nos seus cálculos. Em vez disso, utiliza o valor de <xref:System.Windows.UIElement.RenderSize%2A>.</xref:System.Windows.UIElement.RenderSize%2A>       Este método substancialmente é substituído pelo imediatamente derivada <xref:System.Windows.FrameworkElement>classe e o <xref:System.Windows.FrameworkElement>substituição produz um comportamento mais sofisticado para elementos de nível de estrutura gerais do WPF.</xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement> Para obter mais informações, consulte <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>.</xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>"
  syntax:
    content: protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);
    parameters:
    - id: layoutSlotSize
      type: System.Windows.Size
      description: "O tamanho disponível fornecido pelo elemento."
    return:
      type: System.Windows.Media.Geometry
      description: "A geometria recorte potenciais."
  overload: System.Windows.UIElement.GetLayoutClip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GetUIParentCore
  id: GetUIParentCore
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GetUIParentCore()
  nameWithType: UIElement.GetUIParentCore()
  fullName: System.Windows.UIElement.GetUIParentCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Quando substituí-lo de uma classe derivada, devolve uma alternativa [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] principal para este elemento não existir nenhum visual principal."
  remarks: "A implementação virtual predefinida deste método devolve `null`. <xref:System.Windows.FrameworkElement>Fornece uma implementação prática.</xref:System.Windows.FrameworkElement>       Alternativos principais são utilizados para o encaminhamento de evento, nos casos em que um elemento cria uma estrutura principal alternativo para que os eventos são encaminhadas de uma forma que diverges do padrão de padrão de encaminhamento para cima na árvore visual para o principal padrão ou descendente na estratégia de encaminhamento de pré-visualização."
  syntax:
    content: protected virtual System.Windows.DependencyObject GetUIParentCore ();
    parameters: []
    return:
      type: System.Windows.DependencyObject
      description: "Um objeto, se a implementação de uma classe derivada tem uma ligação de principal alternativo ao relatório."
  overload: System.Windows.UIElement.GetUIParentCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GiveFeedback
  id: GiveFeedback
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GiveFeedback
  nameWithType: UIElement.GiveFeedback
  fullName: System.Windows.UIElement.GiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada comunica um evento de arrastar e largar subjacente que envolve a este elemento."
  remarks: "O evento GiveFeedback permite que a origem de um evento de arrastar para modificar o aspecto do ponteiro do rato para comentários do utilizador visual durante uma operação de arrastar e largar. Os comentários visual reinforces que uma operação de arrastar e largar está no processo.       Este evento cria um alias para o <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>anexados a eventos para esta classe para que GiveFeedback faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> Processadores de eventos que estão anexados ao evento GiveFeedback estão ligados ao subjacentes <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>      <a name=&quot;routedEventInfo_GiveFeedback&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.GiveFeedbackEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.GiveFeedbackEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewGiveFeedback>.</xref:System.Windows.UIElement.PreviewGiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.UIElement.GiveFeedbackEvent>      -Ignorar <xref:System.Windows.UIElement.OnGiveFeedback%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler GiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GiveFeedbackEvent
  id: GiveFeedbackEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GiveFeedbackEvent
  nameWithType: UIElement.GiveFeedbackEvent
  fullName: System.Windows.UIElement.GiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.GiveFeedback&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotFocus
  id: GotFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: UIElement.GotFocus
  fullName: System.Windows.UIElement.GotFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento obtém o foco lógico."
  remarks: "Foco lógico é diferente do foco do teclado se foco é deliberadamente forçado através da utilização de uma chamada de método mas o foco do teclado anterior não existe no outro âmbito. Neste cenário, o foco do teclado permanece em que é e o elemento em que um <xref:System.Windows.UIElement.Focus%2A>método é denominado ainda foco lógica obtém.</xref:System.Windows.UIElement.Focus%2A>       Uma modo mais precisa interpretação deste evento é que é gerado quando o valor da <xref:System.Windows.UIElement.IsFocused%2A>propriedade de um elemento da rota é alterada de `false` para `true`.</xref:System.Windows.UIElement.IsFocused%2A>       Uma vez que este evento utiliza encaminhamento bubbling, o elemento que recebe o foco poderá ser um elemento subordinado em vez do elemento em que o processador de eventos, na verdade, está ligado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de eventos para determinar o elemento real que este adquiriu o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>      <a name=&quot;routedEventInfo_GotFocus&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.GotFocusEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.RoutedEventHandler>|      -Não há nenhum evento de túnel correspondente.</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.UIElement.GotFocusEvent>      -Ignorar <xref:System.Windows.UIElement.OnGotFocus%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnGotFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler GotFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: UIElement.GotFocusEvent
  fullName: System.Windows.UIElement.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.GotFocus&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotKeyboardFocus
  id: GotKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotKeyboardFocus
  nameWithType: UIElement.GotKeyboardFocus
  fullName: System.Windows.UIElement.GotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o teclado concentra-se neste elemento."
  remarks: "<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>é um evento semelhante, que regista as alterações de estado numa propriedade que mantém o estado de foco de um elemento; o evento de GotKeyboardFocus é gerado em muitos circunstâncias as mesmas.</xref:System.Windows.UIElement.IsKeyboardFocusedChanged>       Uma vez que este evento utiliza encaminhamento bubbling, o elemento que tem o foco poderá ser um elemento subordinado em vez do elemento em que o processador de eventos, na verdade, está ligado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de eventos para determinar o elemento real que tem foco.</xref:System.Windows.RoutedEventArgs.Source%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>anexados a eventos para esta classe para que GotKeyboardFocus faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> Processadores de eventos que estão anexados ao evento GotKeyboardFocus estão ligados ao subjacentes <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotKeyboardFocus&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.GotKeyboardFocusEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.</xref:System.Windows.UIElement.PreviewGotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.GotKeyboardFocusEvent>      -Ignorar <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotKeyboardFocusEvent
  id: GotKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotKeyboardFocusEvent
  nameWithType: UIElement.GotKeyboardFocusEvent
  fullName: System.Windows.UIElement.GotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.GotKeyboardFocus&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotMouseCapture
  id: GotMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotMouseCapture
  nameWithType: UIElement.GotMouseCapture
  fullName: System.Windows.UIElement.GotMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento captura o rato."
  remarks: "Quando um elemento captura o rato, este recebe entrada do rato, mesmo se o ponteiro do rato está fora dos respetivos limites. O rato, normalmente, é capturado apenas durante as operações de arrastar e largar e permanece capturado até ocorre a largar a ação da operação de arrastar e largar.       Uma vez que este evento utiliza encaminhamento bubbling, o elemento que tenha captura poderá ser um elemento subordinado em vez do elemento em que o processador de eventos, na verdade, está ligado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>captura de eventos de dados para determinar o elemento real que tenha o rato.</xref:System.Windows.RoutedEventArgs.Source%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>anexados a eventos para esta classe para que GotMouseCapture faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> Processadores de eventos que estão anexados ao evento GotMouseCapture estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotMouseCapture&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.GotMouseCaptureEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -Não há nenhum evento de túnel correspondente definido.</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.GotMouseCaptureEvent>      -Ignorar <xref:System.Windows.UIElement.OnGotMouseCapture%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnGotMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler GotMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotMouseCaptureEvent
  id: GotMouseCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotMouseCaptureEvent
  nameWithType: UIElement.GotMouseCaptureEvent
  fullName: System.Windows.UIElement.GotMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.GotMouseCapture&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotStylusCapture
  id: GotStylusCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotStylusCapture
  nameWithType: UIElement.GotStylusCapture
  fullName: System.Windows.UIElement.GotStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento captura a caneta."
  remarks: "Quando um elemento captura a caneta, este recebe a entrada de caneta, mesmo se o ponteiro for fora dos respetivos limites. A caneta normalmente é capturada apenas durante as operações de arrastar e largar e mantém captura até ocorre a largar a ação da operação de arrastar e largar.       Uma vez que este evento utiliza encaminhamento bubbling, o elemento que tenha captura poderá ser um elemento subordinado em vez do elemento em que o processador de eventos, na verdade, está ligado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de eventos para determinar o elemento real que tenha de captura.</xref:System.Windows.RoutedEventArgs.Source%2A>       Este evento cria um alias para o evento para esta classe anexado, para que GotStylusCapture faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> Processadores de eventos que estão anexados ao evento GotStylusCapture estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotStylusCapture&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.GotStylusCaptureEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -Não há nenhum evento de túnel correspondente definido.</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.GotStylusCaptureEvent>      -Ignorar <xref:System.Windows.UIElement.OnGotStylusCapture%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnGotStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler GotStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotStylusCaptureEvent
  id: GotStylusCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotStylusCaptureEvent
  nameWithType: UIElement.GotStylusCaptureEvent
  fullName: System.Windows.UIElement.GotStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.GotStylusCapture&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotTouchCapture
  id: GotTouchCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotTouchCapture
  nameWithType: UIElement.GotTouchCapture
  fullName: System.Windows.UIElement.GotTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um touch é capturada para este elemento."
  remarks: "<a name=&quot;routedEventInfo_GotTouchCapture&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.GotTouchCaptureEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -Ignorar <xref:System.Windows.UIElement.OnGotTouchCapture%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnGotTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.GotTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotTouchCaptureEvent
  id: GotTouchCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotTouchCaptureEvent
  nameWithType: UIElement.GotTouchCaptureEvent
  fullName: System.Windows.UIElement.GotTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.GotTouchCapture&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HasAnimatedProperties
  id: HasAnimatedProperties
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HasAnimatedProperties
  nameWithType: UIElement.HasAnimatedProperties
  fullName: System.Windows.UIElement.HasAnimatedProperties
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se este elemento tem quaisquer propriedades animadas."
  remarks: "Esta propriedade devolve `true` para persistentes animações (unclocked, sempre em execução) ou para animações que tenham uma linha de tempo específica."
  syntax:
    content: public bool HasAnimatedProperties { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este elemento tem animações anexadas a qualquer uma das respetivas propriedades; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.HasAnimatedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus
  id: HasEffectiveKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HasEffectiveKeyboardFocus
  nameWithType: UIElement.HasEffectiveKeyboardFocus
  fullName: System.Windows.UIElement.HasEffectiveKeyboardFocus
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se o <xref href=&quot;System.Windows.UIElement&quot;> </xref> tem foco."
  remarks: "Subclasses podem substituir esta propriedade para especificar quando o elemento tem o foco do teclado.  Isto é útil quando o <xref:System.Windows.UIElement>contém elementos que podem ter o foco do teclado e pretende que o elemento relatório mesmo tem foco.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual bool HasEffectiveKeyboardFocus { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Windows.UIElement&quot;> </xref> tem foco; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.HasEffectiveKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  id: HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HitTestCore(GeometryHitTestParameters)
  nameWithType: UIElement.HitTestCore(GeometryHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(GeometryHitTestParameters)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Implementa &lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt; para fornecer a base de elemento atingiu o comportamento de teste (devolver <xref href=&quot;System.Windows.Media.GeometryHitTestResult&quot;> </xref>)."
  remarks: "Consulte o método virtual original <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName>para obter informações sobre substituição ainda mais este método no derivam classes.</xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> Tenha em atenção que alguns controlos específicos (<xref:System.Windows.Controls.TextBlock>, por exemplo) ter distintas implementações, que substituem esta um.</xref:System.Windows.Controls.TextBlock>       Este método não se destina a ser chamado a partir do código da aplicação. Este método suporta internos comportamentos de teste acessos que sejam expostos pelo diferentes aspetos do sistema de entrada (se o ponteiro do rato está através de um elemento, por exemplo)."
  syntax:
    content: protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);
    parameters:
    - id: hitTestParameters
      type: System.Windows.Media.GeometryHitTestParameters
      description: "Descreve o teste de acessos para executar, incluindo o ponto de acessos inicial."
    return:
      type: System.Windows.Media.GeometryHitTestResult
      description: "Resultados do teste, incluindo da geometria avaliada."
  overload: System.Windows.UIElement.HitTestCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  id: HitTestCore(System.Windows.Media.PointHitTestParameters)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HitTestCore(PointHitTestParameters)
  nameWithType: UIElement.HitTestCore(PointHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(PointHitTestParameters)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Implementa <xref:System.Windows.Media.Visual.HitTestCore*>para fornecer a base de elemento atingiu o comportamento de teste (devolver <xref href=&quot;System.Windows.Media.HitTestResult&quot;> </xref>).</xref:System.Windows.Media.Visual.HitTestCore*>"
  remarks: "Consulte o método virtual original <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName>para obter informações sobre substituição ainda mais este método no derivam classes.</xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> Tenha em atenção que alguns controlos específicos (<xref:System.Windows.Controls.TextBlock>, por exemplo) ter distintas implementações, que substituem HitTestCore conforme definido pelo <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Controls.TextBlock>       Este método não se destina a ser chamado a partir do código da aplicação. Este método suporta internos comportamentos de teste acessos que sejam expostos pelo diferentes aspetos do sistema de entrada (se o ponteiro do rato está através de um elemento, por exemplo)."
  syntax:
    content: protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);
    parameters:
    - id: hitTestParameters
      type: System.Windows.Media.PointHitTestParameters
      description: "Descreve o teste de acessos para executar, incluindo o ponto de acessos inicial."
    return:
      type: System.Windows.Media.HitTestResult
      description: "Resultados do teste, incluindo o ponto de avaliada."
  overload: System.Windows.UIElement.HitTestCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InputBindings
  id: InputBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InputBindings
  nameWithType: UIElement.InputBindings
  fullName: System.Windows.UIElement.InputBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém a coleção de enlaces de entrada associados a este elemento."
  remarks: "Enlaces de entrada suportam o enlace de comandos para dispositivos de entrada. Por exemplo, <xref:System.Windows.Input.MouseBinding>implementa entrada enlaces que incluem propriedades que são específicas a dispositivos de rato.</xref:System.Windows.Input.MouseBinding>       A coleção de entrada enlaces incluirá os enlaces de entrada que dizem respeito ao tipo, bem como enlaces de entrada que são declarados na instância.       Uma propriedade relacionada, <xref:System.Windows.UIElement.CommandBindings%2A>, mantém uma coleção de enlaces de comando.</xref:System.Windows.UIElement.CommandBindings%2A> Estas definições diferem dos enlaces de entrada que representam o próximo nível baixo de processamento do comando - ações que estão associadas ao conhecido comandos.      <a name=&quot;xamlPropertyElementUsage_InputBindings&quot;></a># # Utilização de elemento de propriedade de XAML ```   <object>     <object.InputBindings>       oneOrMoreInputBindings     </object.InputBindings>   </object>   ``` <a name=&quot;xamlValues_InputBindings&quot;> </a> # # XAML valores *oneOrMoreInputBindings* um ou mais <xref:System.Windows.Input.InputBinding>elementos (normalmente o <xref:System.Windows.Input.KeyBinding>ou <xref:System.Windows.Input.MouseBinding>derivada classes).</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       Cada um deles deve ter um <xref:System.Windows.Input.InputBinding.Command%2A>e <xref:System.Windows.Input.InputBinding.Gesture%2A>conjunto de atributos.</xref:System.Windows.Input.InputBinding.Gesture%2A> </xref:System.Windows.Input.InputBinding.Command%2A>"
  example:
  - "The following example populates this property on a <xref:System.Windows.Window>, with a single <xref:System.Windows.Input.KeyBinding>.  \n  \n [!code-xml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n For more information about the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Input.InputBindingCollection InputBindings { get; }
    return:
      type: System.Windows.Input.InputBindingCollection
      description: "A coleção de enlaces de entrada."
  overload: System.Windows.UIElement.InputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InputHitTest(System.Windows.Point)
  id: InputHitTest(System.Windows.Point)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InputHitTest(Point)
  nameWithType: UIElement.InputHitTest(Point)
  fullName: System.Windows.UIElement.InputHitTest(Point)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Devolve o elemento de entrada no elemento atual que está nas coordenadas especificadas, relativo à origem do elemento actual."
  remarks: "<xref:System.Windows.IInputElement>é devolvido como o tipo de retorno, porque esse tipo é uma interface comum para ambos os <xref:System.Windows.UIElement>e <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.UIElement></xref:System.Windows.IInputElement> Em seguida, pode converter o tipo de retorno adequadamente ou utilizar a instância de interface para determinados membros que são definidos pelo <xref:System.Windows.IInputElement>interface.</xref:System.Windows.IInputElement>       Normalmente, este método não for chamado a partir do seu código de aplicação. Chamar este método só é apropriado se tenciona voltar a implementar uma quantidade substancial das funcionalidades de entrada baixa nível que já estão presentes, tais como recriar a lógica de dispositivo do rato.       <xref:System.Windows.IContentHost>contratos um <xref:System.Windows.IContentHost.InputHitTest%2A>método com a mesma assinatura que alguns elementos de optar por implementar explicitamente.</xref:System.Windows.IContentHost.InputHitTest%2A></xref:System.Windows.IContentHost>"
  syntax:
    content: public System.Windows.IInputElement InputHitTest (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "O desvio coordena neste elemento."
    return:
      type: System.Windows.IInputElement
      description: "O subordinado do elemento que está localizado na posição especificada."
  overload: System.Windows.UIElement.InputHitTest*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InvalidateArrange
  id: InvalidateArrange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InvalidateArrange()
  nameWithType: UIElement.InvalidateArrange()
  fullName: System.Windows.UIElement.InvalidateArrange()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invalida o estado de dispor (esquema) para o elemento. Depois de invalidação, o elemento terá o respetiva esquema atualizada, que será reiniciado no modo assíncrono, a menos que subsequentemente forçada por <xref:System.Windows.UIElement.UpdateLayout*>.</xref:System.Windows.UIElement.UpdateLayout*>"
  remarks: "Induzirem chamadas para InvalidateArrange ou em especial para frequentes <xref:System.Windows.UIElement.UpdateLayout%2A>ter consequências de desempenho significativas.</xref:System.Windows.UIElement.UpdateLayout%2A> Por conseguinte, evite chamar este método, salvo se forem necessários absolutamente Estado esquema exatos para as chamadas subsequentes para outros [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] no seu código. Um cenário avançado, onde pode chamar InvalidateArrange é se estiver a criar um <xref:System.Windows.PropertyChangedCallback>para uma propriedade de dependência que não está ativada uma <xref:System.Windows.Freezable>ou <xref:System.Windows.FrameworkElement>derivada da classe que influencia ainda a passagem de dispor de esquema ao alterar.</xref:System.Windows.FrameworkElement> </xref:System.Windows.Freezable> </xref:System.Windows.PropertyChangedCallback>"
  syntax:
    content: public void InvalidateArrange ();
    parameters: []
  overload: System.Windows.UIElement.InvalidateArrange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InvalidateMeasure
  id: InvalidateMeasure
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InvalidateMeasure()
  nameWithType: UIElement.InvalidateMeasure()
  fullName: System.Windows.UIElement.InvalidateMeasure()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invalida o estado da medida (esquema) para o elemento."
  remarks: "Chamar este método também chamadas <xref:System.Windows.UIElement.InvalidateArrange%2A>internamente, não é necessário chamar InvalidateMeasure e <xref:System.Windows.UIElement.InvalidateArrange%2A>sucessivamente.</xref:System.Windows.UIElement.InvalidateArrange%2A> </xref:System.Windows.UIElement.InvalidateArrange%2A> Depois de invalidação, o elemento terá o respetiva esquema atualizada, que será reiniciado no modo assíncrono, a menos que <xref:System.Windows.UIElement.UpdateLayout%2A>é chamado para forçar uma alteração de esquema síncrona.</xref:System.Windows.UIElement.UpdateLayout%2A>       O sistema de esquema ao nível do framework WPF não o suas próprias processamento das alterações na árvore visual de um elemento e, em casos de invalidação de esquema mais comuns de sistema de esquema está a chamar o equivalente a este método quando for necessário. Só deve chamar este método se são produzir uma implementação completa do esquema, que direcionam manipulação de árvore de elemento, ou semelhante avançadas cenários. Um esse cenário avançado é se estiver a criar um <xref:System.Windows.PropertyChangedCallback>para uma propriedade de dependência que não está ativada uma <xref:System.Windows.Freezable>ou <xref:System.Windows.FrameworkElement>derivada da classe que influencia ainda a passagem de medidas de esquema ao alterar.</xref:System.Windows.FrameworkElement> </xref:System.Windows.Freezable> </xref:System.Windows.PropertyChangedCallback>       Induzirem chamadas para InvalidateMeasure ou em especial para frequentes <xref:System.Windows.UIElement.UpdateLayout%2A>ter consequências de desempenho significativas.</xref:System.Windows.UIElement.UpdateLayout%2A> Por conseguinte, evite chamar este método, salvo se forem necessários absolutamente Estado esquema exatos para as chamadas subsequentes para outros [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] no seu código."
  syntax:
    content: public void InvalidateMeasure ();
    parameters: []
  overload: System.Windows.UIElement.InvalidateMeasure*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InvalidateVisual
  id: InvalidateVisual
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InvalidateVisual()
  nameWithType: UIElement.InvalidateVisual()
  fullName: System.Windows.UIElement.InvalidateVisual()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "A composição do elemento é invalidado e força uma passagem de esquema novo concluída. <xref:System.Windows.UIElement.OnRender*>é chamado após a conclusão do ciclo de esquema.</xref:System.Windows.UIElement.OnRender*>"
  remarks: "Este método chama <xref:System.Windows.UIElement.InvalidateArrange%2A>internamente.</xref:System.Windows.UIElement.InvalidateArrange%2A>       Este método não é, geralmente, chamado a partir do seu código de aplicação. O sistema de esquema ao nível do framework WPF não o suas próprias processamento das alterações na árvore visual de um elemento e seria possível chamar o equivalente a este método quando for necessário já. Chamar este método é necessário apenas para cenários avançados. Um esse cenário avançado é se estiver a criar um <xref:System.Windows.PropertyChangedCallback>para uma propriedade de dependência que não está ativada uma <xref:System.Windows.Freezable>ou <xref:System.Windows.FrameworkElement>derivada da classe que influencia ainda o esquema ao alterar.</xref:System.Windows.FrameworkElement> </xref:System.Windows.Freezable> </xref:System.Windows.PropertyChangedCallback>"
  syntax:
    content: public void InvalidateVisual ();
    parameters: []
  overload: System.Windows.UIElement.InvalidateVisual*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsArrangeValid
  id: IsArrangeValid
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsArrangeValid
  nameWithType: UIElement.IsArrangeValid
  fullName: System.Windows.UIElement.IsArrangeValid
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se o tamanho calculado e posição de elementos subordinados no esquema deste elemento são válidos."
  remarks: "Pode forçar disposição para invalidados chamando <xref:System.Windows.UIElement.InvalidateArrange%2A>neste elemento (ou das respetivas classes principais).</xref:System.Windows.UIElement.InvalidateArrange%2A> Este processo sinaliza o esquema para recomposition at conforme determina o sistema de esquema. Em alternativa, uma chamada imediata para <xref:System.Windows.UIElement.UpdateLayout%2A>pode ser efetuada, mas isto só deve ser feito caso seja determinada-se de que não existem mais invalidations estão pendentes (um grande número de atualizações desnecessariamente forçadas tem consequências de desempenho).</xref:System.Windows.UIElement.UpdateLayout%2A>       Não é possível IsArrangeValid `true` , a menos que <xref:System.Windows.UIElement.IsMeasureValid%2A>também é `true` (no processo de esquema, disposição não pode ser válida sem medida pela primeira vez que está a ser válido).</xref:System.Windows.UIElement.IsMeasureValid%2A>"
  syntax:
    content: public bool IsArrangeValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o tamanho e posição do esquema são válidos; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsArrangeValid*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabled
  id: IsEnabled
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
  fullName: System.Windows.UIElement.IsEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se este elemento está ativado no [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)].  Esta é uma propriedade de dependência."
  remarks: "Tenha em atenção que esta propriedade é deve influenciada por implementações de específico da classe de <xref:System.Windows.UIElement.IsEnabledCore%2A>nos elementos específicos, muitas vezes, no tempo de execução.</xref:System.Windows.UIElement.IsEnabledCore%2A> Por conseguinte, o valor predefinido listado aqui, por vezes, não é Efetivo. Por exemplo, um <xref:System.Windows.Controls.Primitives.ScrollBar>será IsEnabled `false` sempre que é determinado que não é necessário para suportar uma barra de deslocamento.</xref:System.Windows.Controls.Primitives.ScrollBar> Tentativa de definir este valor será também potencialmente ser substituído pelo valor devolvido pelo <xref:System.Windows.UIElement.IsEnabledCore%2A>.</xref:System.Windows.UIElement.IsEnabledCore%2A>       Elementos que não estão ativados não participar no teste acessos ou foco e, por conseguinte, não será origens de eventos de entrada.      <a name=&quot;dependencyPropertyInfo_IsEnabled&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsEnabledProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsEnabledProperty>"
  example:
  - "The following example shows a handler on one button that when executed will set IsEnabled `false` on another named button `b1`.  \n  \n [!code-cs[RoutedEventAddRemoveHandler#Handler](~/add/codesnippet/csharp/RoutedEventAddRemoveHandler/default.xaml.cs#handler)]\n [!code-vb[RoutedEventAddRemoveHandler#Handler](~/add/codesnippet/visualbasic/RoutedEventAddRemoveHandler/default.xaml.vb#handler)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se estiver ativado o elemento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor predefinido é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabledChanged
  id: IsEnabledChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabledChanged
  nameWithType: UIElement.IsEnabledChanged
  fullName: System.Windows.UIElement.IsEnabledChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.UIElement.IsEnabled*>propriedade nas alterações neste elemento.</xref:System.Windows.UIElement.IsEnabled*>"
  remarks: "Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabledCore
  id: IsEnabledCore
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabledCore
  nameWithType: UIElement.IsEnabledCore
  fullName: System.Windows.UIElement.IsEnabledCore
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que torna-se o valor de retorno de <xref:System.Windows.UIElement.IsEnabled*>no derivada classes.</xref:System.Windows.UIElement.IsEnabled*>"
  syntax:
    content: protected virtual bool IsEnabledCore { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se estiver ativado o elemento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsEnabledCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabledProperty
  id: IsEnabledProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabledProperty
  nameWithType: UIElement.IsEnabledProperty
  fullName: System.Windows.UIElement.IsEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsEnabled*>propriedade de dependência.</xref:System.Windows.UIElement.IsEnabled*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsFocused
  id: IsFocused
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsFocused
  nameWithType: UIElement.IsFocused
  fullName: System.Windows.UIElement.IsFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que determina se este elemento tem foco lógico.  Esta é uma propriedade de dependência."
  remarks: "Foco lógico poderão ser diferentes foco do teclado se uma aplicação tem vários departamentos, o foco, tal como entre menu conteúdo e o resto da aplicação. Neste cenário, foco do teclado só pode ser um elemento de IU da aplicação, no entanto, determinados elementos outras divisões de foco ainda poderão manter lógico foco. Para obter mais informações sobre o foco lógica, consulte [descrição geral de foco](~/add/includes/ajax-current-ext-md.md).       Não definir o foco ao definir esta propriedade (é só de leitura). A utilização típica para esta propriedade é utilizá-la como uma propriedade de dependência para um <xref:System.Windows.Setter>ou <xref:System.Windows.EventTrigger>.</xref:System.Windows.EventTrigger> </xref:System.Windows.Setter> Para definir o foco programaticamente, chame <xref:System.Windows.UIElement.Focus%2A>.</xref:System.Windows.UIElement.Focus%2A> Também é possível definir o foco por ação do utilizador ou por implementações de controlo, que incluem possivelmente o comportamento de captura do rato.      <a name=&quot;dependencyPropertyInfo_IsFocused&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsFocusedProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsFocusedProperty>"
  example:
  - "The following example is a code handler that changes the background of a control when it is focused.  \n  \n [!code-cs[PopupSimple#IsFocused](~/add/codesnippet/csharp/PopupPropertiesSample/Window1.xaml.cs#isfocused)]  \n  \n Another common way to achieve this same effect is to place a <xref:System.Windows.Trigger> in the <xref:System.Windows.Style> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]. For an example, see [How to: Create an Outer Glow Effect](http://msdn.microsoft.com/en-us/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)."
  syntax:
    content: public bool IsFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este elemento tem foco lógico; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsFocusedProperty
  id: IsFocusedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsFocusedProperty
  nameWithType: UIElement.IsFocusedProperty
  fullName: System.Windows.UIElement.IsFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsFocused*>propriedade de dependência.</xref:System.Windows.UIElement.IsFocused*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsHitTestVisible
  id: IsHitTestVisible
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
  fullName: System.Windows.UIElement.IsHitTestVisible
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um valor que declara se este elemento possivelmente pode ser devolvido como um resultado de acessos de teste, a partir de uma parte do seu conteúdo composto. Esta é uma propriedade de dependência."
  remarks: "O valor Efetivo desta propriedade é deve influenciado pelas posições relativas de acessos elementos testable na árvore lógica. Por exemplo, se um elemento é um elemento subordinado de um elemento que é não atingiu o teste visível, o valor da propriedade no subordinado Efetivo permanecerá `false`, mesmo se tentar definir esse valor localmente. Por este motivo, é importante que não defina IsHitTestVisible para `false` num controlo composited, a menos que não pretende qualquer entrada ou teste esse controlo. Para obter mais informações sobre testes de acessos, consulte [atingiu o teste na camada de Visual](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsHitTestVisible&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsHitTestVisibleProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsHitTestVisibleProperty>"
  syntax:
    content: public bool IsHitTestVisible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este elemento pode ser devolvido como um resultado de teste de acessos pelo menos um ponto; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor predefinido é <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsHitTestVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsHitTestVisibleChanged
  id: IsHitTestVisibleChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsHitTestVisibleChanged
  nameWithType: UIElement.IsHitTestVisibleChanged
  fullName: System.Windows.UIElement.IsHitTestVisibleChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.UIElement.IsHitTestVisible*>alterações de propriedade de dependência neste elemento.</xref:System.Windows.UIElement.IsHitTestVisible*>"
  remarks: "Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsHitTestVisibleProperty
  id: IsHitTestVisibleProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsHitTestVisibleProperty
  nameWithType: UIElement.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement.IsHitTestVisibleProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsHitTestVisible*>propriedade de dependência.</xref:System.Windows.UIElement.IsHitTestVisible*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsInputMethodEnabled
  id: IsInputMethodEnabled
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsInputMethodEnabled
  nameWithType: UIElement.IsInputMethodEnabled
  fullName: System.Windows.UIElement.IsInputMethodEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se um sistema de método de entrada, tais como um [!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)], está ativada para processar a entrada para este elemento."
  remarks: "Esta propriedade devolve o valor devolvido pela propriedade anexada <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>para os métodos de entrada atualmente ativados (teclado, reconhecimento de voz e outros dispositivos de entrada).</xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>"
  syntax:
    content: public bool IsInputMethodEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se um método de entrada está ativo; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. O valor predefinido da propriedade anexada subjacente é <xref uid=&quot;langword_csharp_true;&quot; name=&quot;true;&quot; href=&quot;&quot;> </xref> no entanto, esta será deve ser influenciada pelo Estado real da métodos de introdução no tempo de execução."
  overload: System.Windows.UIElement.IsInputMethodEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocused
  id: IsKeyboardFocused
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocused
  nameWithType: UIElement.IsKeyboardFocused
  fullName: System.Windows.UIElement.IsKeyboardFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se este elemento tem o foco do teclado.  Esta é uma propriedade de dependência."
  remarks: "As alterações para o valor desta propriedade determinado poderão ser acompanhadas de eventos relacionados com o foco.       IsKeyboardFocused e <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>são frequentemente utilizadas processadores de eventos de classe para outros eventos relacionados com a entrada para a instância para determinar se o elemento já tem o foco do teclado ou efetuar determinations quando rato eventos e eventos de teclado ocorrerem em conjunto.</xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocused&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsKeyboardFocusedProperty>"
  syntax:
    content: public bool IsKeyboardFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este elemento tem o foco do teclado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsKeyboardFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusedChanged
  id: IsKeyboardFocusedChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusedChanged
  nameWithType: UIElement.IsKeyboardFocusedChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.UIElement.IsKeyboardFocused*>alterações de propriedade neste elemento.</xref:System.Windows.UIElement.IsKeyboardFocused*>"
  remarks: "Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusedProperty
  id: IsKeyboardFocusedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusedProperty
  nameWithType: UIElement.IsKeyboardFocusedProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsKeyboardFocused*>propriedade de dependência.</xref:System.Windows.UIElement.IsKeyboardFocused*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusWithin
  id: IsKeyboardFocusWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusWithin
  nameWithType: UIElement.IsKeyboardFocusWithin
  fullName: System.Windows.UIElement.IsKeyboardFocusWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se o foco do teclado em qualquer lugar está dentro do elemento ou os respetivos elementos subordinados de árvore visual.  Esta é uma propriedade de dependência."
  remarks: "As alterações para o valor desta propriedade normalmente elevar o <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>evento, a menos que uma classe derivada tem substituída <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A>para suprimir o evento.</xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> </xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>       Não defina esta propriedade diretamente, mas pode definir o foco para um elemento chamando <xref:System.Windows.UIElement.Focus%2A>, ou efetuando uma <xref:System.Windows.UIElement.MoveFocus%2A>pedido.</xref:System.Windows.UIElement.MoveFocus%2A> </xref:System.Windows.UIElement.Focus%2A> Qualquer uma destas chamadas de método pode alterar este valor de propriedade.       <xref:System.Windows.UIElement.IsKeyboardFocused%2A>e IsKeyboardFocusWithin são normalmente utilizadas processadores de eventos de classe para outros eventos relacionados com a entrada para a instância para determinar se o elemento já tem o foco do teclado ou efetuar determinations quando rato eventos e eventos de teclado ocorrerem em conjunto.</xref:System.Windows.UIElement.IsKeyboardFocused%2A>      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocusWithin&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>"
  syntax:
    content: public bool IsKeyboardFocusWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o foco do teclado é o elemento ou os respetivos elementos subordinados; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsKeyboardFocusWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusWithinChanged
  id: IsKeyboardFocusWithinChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinChanged
  nameWithType: UIElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da propriedade IsKeyboardFocusWithinChanged alterado neste elemento."
  remarks: "Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusWithinProperty
  id: IsKeyboardFocusWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinProperty
  nameWithType: UIElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsKeyboardFocusWithin*>propriedade de dependência.</xref:System.Windows.UIElement.IsKeyboardFocusWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsManipulationEnabled
  id: IsManipulationEnabled
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsManipulationEnabled
  nameWithType: UIElement.IsManipulationEnabled
  fullName: System.Windows.UIElement.IsManipulationEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um valor que indica se os eventos de manipulação estão ativados no <xref href=&quot;System.Windows.UIElement&quot;> </xref>."
  remarks: 'Defina esta propriedade como verdadeira se pretender que o <xref:System.Windows.UIElement>para receber o <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, e <xref:System.Windows.UIElement.ManipulationCompleted>eventos.</xref:System.Windows.UIElement.ManipulationCompleted> </xref:System.Windows.UIElement.ManipulationBoundaryFeedback> </xref:System.Windows.UIElement.ManipulationInertiaStarting> </xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.UIElement.ManipulationStarted> </xref:System.Windows.UIElement.ManipulationStarting> </xref:System.Windows.UIElement> Para mais informações sobre manipulações, consulte o [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).  Para obter um exemplo de uma aplicação que responde a manipulações, consulte [instruções: criar a primeira Touch aplicação](~/add/includes/ajax-current-ext-md.md).'
  example:
  - "The following example creates an application that has a red Rectangle.  The IsManipulationEnabled property of the Rectangle is set to true and the application's window subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-xml[BasicManipulation#UI](~/add/codesnippet/xaml/basicmanipulation/mainwindow.xaml#ui)]"
  syntax:
    content: public bool IsManipulationEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os eventos de manipulação estão ativados no <xref href=&quot;System.Windows.UIElement&quot;> </xref>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsManipulationEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsManipulationEnabledProperty
  id: IsManipulationEnabledProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsManipulationEnabledProperty
  nameWithType: UIElement.IsManipulationEnabledProperty
  fullName: System.Windows.UIElement.IsManipulationEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsManipulationEnabled*>propriedade de dependência.</xref:System.Windows.UIElement.IsManipulationEnabled*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMeasureValid
  id: IsMeasureValid
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMeasureValid
  nameWithType: UIElement.IsMeasureValid
  fullName: System.Windows.UIElement.IsMeasureValid
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se o tamanho atual devolvido pela medida do esquema é válido."
  remarks: "Pode forçar medida e a disposição para invalidados chamando <xref:System.Windows.UIElement.InvalidateMeasure%2A>neste elemento (ou qualquer elemento principal cima na árvore visual).</xref:System.Windows.UIElement.InvalidateMeasure%2A> Isto designa o esquema para recomposition no modo assíncrono, ocorrer durante um determinado pelo sistema de esquema. Em alternativa, pode efetuar uma chamada para <xref:System.Windows.UIElement.UpdateLayout%2A>.</xref:System.Windows.UIElement.UpdateLayout%2A> imediata No entanto, só deve chamar <xref:System.Windows.UIElement.UpdateLayout%2A>se é provável que não existem mais invalidations estão pendentes (um grande número de atualizações desnecessariamente forçadas terão consequências de desempenho).</xref:System.Windows.UIElement.UpdateLayout%2A>       Se for IsMeasureValid `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A>também tem de ser `false` (pela lógica imposta do processo de esquema, disposição não pode ser válida sem medida pela primeira vez que está a ser válido).</xref:System.Windows.UIElement.IsArrangeValid%2A>"
  syntax:
    content: public bool IsMeasureValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se passar a medida do esquema devolveu um valor válido e atual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsMeasureValid*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptured
  id: IsMouseCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
  fullName: System.Windows.UIElement.IsMouseCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se o rato é capturado para este elemento.  Esta é uma propriedade de dependência."
  remarks: "Capturar estado do rato está relacionado com operações de arrastar e largar no processo.      <a name=&quot;dependencyPropertyInfo_IsMouseCaptured&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsMouseCapturedProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsMouseCapturedProperty>"
  example:
  - "The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.  \n  \n If mouse capture is elsewhere, the mouse capture is set to that element. If the element had mouse capture, it is cleared by calling <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with a null input.  \n  \n [!code-vb[MouseSnippetSample#IsMouseCaptured](~/add/codesnippet/visualbasic/mousesnippetsample/window1.xaml.vb#ismousecaptured)]\n [!code-cs[MouseSnippetSample#IsMouseCaptured](~/add/codesnippet/csharp/MouseSnippetSample/Window1.xaml.cs#ismousecaptured)]"
  syntax:
    content: public bool IsMouseCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento tem de captura do rato; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsMouseCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCapturedChanged
  id: IsMouseCapturedChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCapturedChanged
  nameWithType: UIElement.IsMouseCapturedChanged
  fullName: System.Windows.UIElement.IsMouseCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.UIElement.IsMouseCaptured*>alterações de propriedade neste elemento.</xref:System.Windows.UIElement.IsMouseCaptured*>"
  remarks: "Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCapturedProperty
  id: IsMouseCapturedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCapturedProperty
  nameWithType: UIElement.IsMouseCapturedProperty
  fullName: System.Windows.UIElement.IsMouseCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsMouseCaptured*>propriedade de dependência.</xref:System.Windows.UIElement.IsMouseCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptureWithin
  id: IsMouseCaptureWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptureWithin
  nameWithType: UIElement.IsMouseCaptureWithin
  fullName: System.Windows.UIElement.IsMouseCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que determina se a captura do rato está contida por este elemento ou elementos subordinados na respetiva árvore visual. Esta é uma propriedade de dependência."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsMouseCaptureWithin&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>"
  syntax:
    content: public bool IsMouseCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este elemento ou um elemento contido tem captura do rato; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsMouseCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptureWithinChanged
  id: IsMouseCaptureWithinChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptureWithinChanged
  nameWithType: UIElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.UIElement.IsMouseCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref href=&quot;System.Windows.UIElement.IsMouseCaptureWithinProperty&quot;> </xref> alterações neste elemento."
  remarks: "Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptureWithinProperty
  id: IsMouseCaptureWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptureWithinProperty
  nameWithType: UIElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.UIElement.IsMouseCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsMouseCaptureWithin*>propriedade de dependência.</xref:System.Windows.UIElement.IsMouseCaptureWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseDirectlyOver
  id: IsMouseDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseDirectlyOver
  nameWithType: UIElement.IsMouseDirectlyOver
  fullName: System.Windows.UIElement.IsMouseDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se a posição do ponteiro do rato corresponde à acessos resultados do teste, que demorar compositing de elemento na conta.  Esta é uma propriedade de dependência."
  remarks: "Ao contrário <xref:System.Windows.UIElement.IsMouseOver%2A>, esta propriedade só é `true` se o ponteiro do rato está sobre o elemento literal — dado que é um teste acessos</xref:System.Windows.UIElement.IsMouseOver%2A> Se o ponteiro do rato em vez disso, ao longo de um elemento subordinado, em particular através de elementos que fazem parte de um elemento modelo mais aprofundado e compositing, esta propriedade serão `false`. A menos que saiba como um controlo é composited (por exemplo, utilizar esta propriedade num modelo de controlo personalizado para um controlo que definir), esta propriedade pode devolver resultados inesperados. Para a maioria dos cenários em que não são criação controlos, utilize <xref:System.Windows.UIElement.IsMouseOver%2A>em vez disso.</xref:System.Windows.UIElement.IsMouseOver%2A>       Se o rato é capturado por este elemento e esta propriedade é `true` no momento da captura, esta propriedade irá continuar a devolver `true` até perde-se a captura do rato e o ponteiro não está acima do respetivos dos limites.      <a name=&quot;dependencyPropertyInfo_IsMouseDirectlyOver&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>"
  syntax:
    content: public bool IsMouseDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ponteiro do rato está sobre o mesmo resultado de elemento como um teste de acessos; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsMouseDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseDirectlyOverChanged
  id: IsMouseDirectlyOverChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseDirectlyOverChanged
  nameWithType: UIElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.UIElement.IsMouseDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.UIElement.IsMouseDirectlyOver*>alterações de propriedade neste elemento.</xref:System.Windows.UIElement.IsMouseDirectlyOver*>"
  remarks: "Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseDirectlyOverProperty
  id: IsMouseDirectlyOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseDirectlyOverProperty
  nameWithType: UIElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.UIElement.IsMouseDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsMouseDirectlyOver*>propriedade de dependência.</xref:System.Windows.UIElement.IsMouseDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseOver
  id: IsMouseOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseOver
  nameWithType: UIElement.IsMouseOver
  fullName: System.Windows.UIElement.IsMouseOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se o ponteiro do rato está localizado este elemento (incluindo elementos subordinados na árvore visual).  Esta é uma propriedade de dependência."
  remarks: "Normalmente, os controlos são composited, de modo a que todos os vários elementos no interior do controlo (da árvore visual) irão reportar o estado de rato para o controlo que contém. Por exemplo, um <xref:System.Windows.Controls.ListBox>controlo de estilo comunicará IsMouseOver como `true` se o rato em qualquer lugar está acima do respetiva geometria, incluindo quaisquer <xref:System.Windows.Controls.ListBoxItem>.</xref:System.Windows.Controls.ListBoxItem> </xref:System.Windows.Controls.ListBox>       Apesar de não existir um evento de &quot;IsMouseOverChanged&quot; semelhante, vários eventos semelhantes fazê-lo. Por exemplo, pode processar <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>e <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> </xref:System.Windows.UIElement.MouseMove> </xref:System.Windows.UIElement.MouseEnter>       Se este elemento captura o rato, esta propriedade permanece `true` até perde-se a captura do rato e o ponteiro do rato deixa os limites de elemento.       Alguns controlos deliberadamente capturam do rato em determinadas ações que não aparecem diretamente envolver o rato. Isto pode levar a que está a ser IsMouseOver `true` , apesar do rato não foi movida parecer.      <a name=&quot;dependencyPropertyInfo_IsMouseOver&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsMouseOverProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsMouseOverProperty>"
  example:
  - "The following example references this property as the property type of a <xref:System.Windows.Trigger>, part of a \\<Style.Triggers> block. If the mouse is over the control, the control text turns blue and the cursor becomes a hand.  \n  \n [!code-xml[ListViewCheckBox#Trigger](~/add/codesnippet/xaml/p-system.windows.uieleme_12_1.xaml)]\n [!code-xml[ListViewCheckBox#Trigger](~/add/codesnippet/xaml/p-system.windows.uieleme_12_1.xaml)]"
  syntax:
    content: public bool IsMouseOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ponteiro do rato está sobre o elemento ou os respetivos elementos subordinados; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsMouseOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseOverProperty
  id: IsMouseOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseOverProperty
  nameWithType: UIElement.IsMouseOverProperty
  fullName: System.Windows.UIElement.IsMouseOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsMouseOver*>propriedade de dependência.</xref:System.Windows.UIElement.IsMouseOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptured
  id: IsStylusCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptured
  nameWithType: UIElement.IsStylusCaptured
  fullName: System.Windows.UIElement.IsStylusCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se a caneta é capturada por este elemento.  Esta é uma propriedade de dependência."
  remarks: "Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusCaptured&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsStylusCapturedProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsStylusCapturedProperty>"
  syntax:
    content: public bool IsStylusCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento tem de captura de caneta; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsStylusCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCapturedChanged
  id: IsStylusCapturedChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCapturedChanged
  nameWithType: UIElement.IsStylusCapturedChanged
  fullName: System.Windows.UIElement.IsStylusCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.UIElement.IsStylusCaptured*>alterações de propriedade neste elemento.</xref:System.Windows.UIElement.IsStylusCaptured*>"
  remarks: "Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCapturedProperty
  id: IsStylusCapturedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCapturedProperty
  nameWithType: UIElement.IsStylusCapturedProperty
  fullName: System.Windows.UIElement.IsStylusCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsStylusCaptured*>propriedade de dependência.</xref:System.Windows.UIElement.IsStylusCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptureWithin
  id: IsStylusCaptureWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptureWithin
  nameWithType: UIElement.IsStylusCaptureWithin
  fullName: System.Windows.UIElement.IsStylusCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que determina se caneta capturar está contido por este elemento ou um elemento os limites de elemento e a respetiva árvore visual. Esta é uma propriedade de dependência."
  remarks: "Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [Touch suporte de entrada no Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) e [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusCaptureWithin&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>"
  syntax:
    content: public bool IsStylusCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se este elemento ou um elemento contido tem captura caneta; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsStylusCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptureWithinChanged
  id: IsStylusCaptureWithinChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptureWithinChanged
  nameWithType: UIElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.UIElement.IsStylusCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.UIElement.IsStylusCaptureWithin*>alterações de propriedade neste elemento.</xref:System.Windows.UIElement.IsStylusCaptureWithin*>"
  remarks: "Este é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptureWithinProperty
  id: IsStylusCaptureWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptureWithinProperty
  nameWithType: UIElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.UIElement.IsStylusCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsStylusCaptureWithin*>propriedade de dependência.</xref:System.Windows.UIElement.IsStylusCaptureWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusDirectlyOver
  id: IsStylusDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusDirectlyOver
  nameWithType: UIElement.IsStylusDirectlyOver
  fullName: System.Windows.UIElement.IsStylusDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se a posição de caneta corresponde à acessos resultados do teste, que demorar compositing de elemento na conta.  Esta é uma propriedade de dependência."
  remarks: "Ao contrário <xref:System.Windows.UIElement.IsStylusOver%2A>, esta propriedade só é `true` se a caneta está acima do elemento.</xref:System.Windows.UIElement.IsStylusOver%2A> Se a caneta em vez disso, ao longo de um elemento subordinado ou através de elementos que fazem parte do compositing mais aprofundado de um elemento (da árvore visual), esta propriedade serão `false`.       A menos que saiba como um controlo é composited (por exemplo, utilizar esta propriedade num modelo de controlo personalizado para um controlo que definir), esta propriedade pode devolver resultados inesperados. Para a maioria dos cenários em que não são criação controlos, utilize <xref:System.Windows.UIElement.IsStylusOver%2A>em vez disso.</xref:System.Windows.UIElement.IsStylusOver%2A>       Se este elemento tem de captura de caneta e esta propriedade é `true` no momento da captura, esta propriedade permanece `true` até que a captura de caneta perde-se e a caneta não está acima do respetivos dos limites.       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusDirectlyOver&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>"
  syntax:
    content: public bool IsStylusDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o ponteiro de caneta está sobre o mesmo resultado de elemento como um teste de acessos; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsStylusDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusDirectlyOverChanged
  id: IsStylusDirectlyOverChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusDirectlyOverChanged
  nameWithType: UIElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.UIElement.IsStylusDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.UIElement.IsStylusDirectlyOver*>alterações de propriedade neste elemento.</xref:System.Windows.UIElement.IsStylusDirectlyOver*>"
  remarks: "Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusDirectlyOverProperty
  id: IsStylusDirectlyOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusDirectlyOverProperty
  nameWithType: UIElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.UIElement.IsStylusDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsStylusDirectlyOver*>propriedade de dependência.</xref:System.Windows.UIElement.IsStylusDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusOver
  id: IsStylusOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusOver
  nameWithType: UIElement.IsStylusOver
  fullName: System.Windows.UIElement.IsStylusOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se encontra o cursor de caneta através deste elemento (incluindo elementos subordinados visual).  Esta é uma propriedade de dependência."
  remarks: "Se este elemento tem de captura de caneta, esta propriedade irá continuar a devolver `true` até que a captura de caneta perde-se e o ponteiro está fora do respetivos dos limites.       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusOver&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsStylusOverProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsStylusOverProperty>"
  syntax:
    content: public bool IsStylusOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o cursor de caneta está sobre o elemento ou os respetivos elementos subordinados; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsStylusOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusOverProperty
  id: IsStylusOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusOverProperty
  nameWithType: UIElement.IsStylusOverProperty
  fullName: System.Windows.UIElement.IsStylusOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsStylusOver*>propriedade de dependência.</xref:System.Windows.UIElement.IsStylusOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsVisible
  id: IsVisible
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsVisible
  nameWithType: UIElement.IsVisible
  fullName: System.Windows.UIElement.IsVisible
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que indica se este elemento é visível no [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)].  Esta é uma propriedade de dependência."
  remarks: "A determinação do valor IsVisible tem todos os fatores de esquema em consideração. Em contrapartida, <xref:System.Windows.UIElement.Visibility%2A>, que é uma propriedade definível, só indica a intenção programaticamente efetuar um elemento visível ou invisível.</xref:System.Windows.UIElement.Visibility%2A>       Elementos de onde está IsVisible `false` participar nos eventos de entrada (ou comandos), efetue não influenciar a medida ou dispor transmite de esquema, não são focusable, não são de uma sequência de separador e não serão comunicadas nos testes acessos. Em contraste, elementos onde <xref:System.Windows.UIElement.IsEnabled%2A>é `false` ainda irá participar nos eventos e comandos e acessos de teste, mas também não são focusable.</xref:System.Windows.UIElement.IsEnabled%2A>      <a name=&quot;dependencyPropertyInfo_IsVisible&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.IsVisibleProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.IsVisibleProperty>"
  syntax:
    content: public bool IsVisible { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento é visível; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsVisibleChanged
  id: IsVisibleChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsVisibleChanged
  nameWithType: UIElement.IsVisibleChanged
  fullName: System.Windows.UIElement.IsVisibleChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o valor da <xref:System.Windows.UIElement.IsVisible*>alterações de propriedade neste elemento.</xref:System.Windows.UIElement.IsVisible*>"
  remarks: "Este evento não é gerado se o elemento não está a ser composto pelo sistema esquema, por motivos que não seja o valor da <xref:System.Windows.UIElement.IsVisible%2A>propriedade.</xref:System.Windows.UIElement.IsVisible%2A> Por exemplo, o elemento não pode ter um visual associado.       Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsVisibleProperty
  id: IsVisibleProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsVisibleProperty
  nameWithType: UIElement.IsVisibleProperty
  fullName: System.Windows.UIElement.IsVisibleProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.IsVisible*>propriedade de dependência.</xref:System.Windows.UIElement.IsVisible*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsVisibleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyDown
  id: KeyDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: UIElement.KeyDown
  fullName: System.Windows.UIElement.KeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma tecla é premida enquanto o foco está neste elemento."
  remarks: "Processamento de chave interage com outras funcionalidades de plataforma como composição commanding e texto. O evento KeyDown é um evento de entrada de texto de nível inferior que poderá não comportar-se conforme esperado em determinados controlos. Isto acontece porque alguns controlos tem controlo compositing ou processamento de classe que fornece uma versão de nível mais elevada de texto de entrada do processamento e eventos relacionados.       Este evento cria um alias para o <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>anexados a eventos para esta classe para que KeyDown faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> Processadores de eventos que estão ligados ao evento KeyDown estão ligados ao subjacentes <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>      <a name=&quot;routedEventInfo_KeyDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.KeyDownEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.KeyEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewKeyDown>.</xref:System.Windows.UIElement.PreviewKeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.KeyDownEvent>      -Ignorar <xref:System.Windows.UIElement.OnKeyDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyDownEvent
  id: KeyDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyDownEvent
  nameWithType: UIElement.KeyDownEvent
  fullName: System.Windows.UIElement.KeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.KeyDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyUp
  id: KeyUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: UIElement.KeyUp
  fullName: System.Windows.UIElement.KeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma tecla é premida enquanto o foco está neste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>anexados a eventos para esta classe para que KeyUp faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> Processadores de eventos que estão anexados ao evento KeyUp estão ligados ao subjacentes <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>      <a name=&quot;routedEventInfo_KeyUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.KeyUpEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.KeyEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewKeyUp>.</xref:System.Windows.UIElement.PreviewKeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.KeyUpEvent>      -Ignorar <xref:System.Windows.UIElement.OnKeyUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyUpEvent
  id: KeyUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyUpEvent
  nameWithType: UIElement.KeyUpEvent
  fullName: System.Windows.UIElement.KeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.KeyUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LayoutUpdated
  id: LayoutUpdated
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LayoutUpdated
  nameWithType: UIElement.LayoutUpdated
  fullName: System.Windows.UIElement.LayoutUpdated
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o esquema dos vários elementos visuais associado atual <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> alterações."
  remarks: "Uma atualização de esquema pode ocorrer em resultado de uma alteração de propriedade, um janela de redimensionamento ou um pedido de utilizador explícitas.       Este membro é um [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] eventos, não é um evento encaminhado."
  syntax:
    content: public event EventHandler LayoutUpdated;
    return:
      type: System.EventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostFocus
  id: LostFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: UIElement.LostFocus
  fullName: System.Windows.UIElement.LostFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento perde o foco lógico."
  remarks: "Foco lógico é diferente do foco do teclado se foco deliberadamente é forçado ausente através da utilização de uma chamada de método mas o foco do teclado anterior não existe no outro âmbito. Neste cenário, permanece de foco do teclado onde está e o elemento em que um <xref:System.Windows.UIElement.Focus%2A>método é denominado ainda foco lógica obtém.</xref:System.Windows.UIElement.Focus%2A>       Uma modo mais precisa interpretação deste evento é que é gerado quando o valor da <xref:System.Windows.UIElement.IsFocused%2A>propriedade de um elemento da rota é alterado de `true` para `false`.</xref:System.Windows.UIElement.IsFocused%2A>       Uma vez que este evento utiliza encaminhamento bubbling, o elemento que perde o foco poderá ser um elemento subordinado em vez do elemento em que o processador de eventos, na verdade, está ligado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de eventos para determinar o elemento real que este adquiriu o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>      <a name=&quot;routedEventInfo_LostFocus&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.LostFocusEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.RoutedEventHandler>|      -Não há nenhum evento de túnel correspondente.</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.UIElement.LostFocusEvent>      -Ignorar <xref:System.Windows.UIElement.OnLostFocus%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnLostFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler LostFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: UIElement.LostFocusEvent
  fullName: System.Windows.UIElement.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostKeyboardFocus
  id: LostKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostKeyboardFocus
  nameWithType: UIElement.LostKeyboardFocus
  fullName: System.Windows.UIElement.LostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o teclado já não concentra-se neste elemento."
  remarks: "Uma vez que este evento utiliza encaminhamento bubbling, o elemento que perdeu o foco poderá ser um elemento subordinado em vez do elemento em que o processador de eventos, na verdade, está ligado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de eventos para determinar o elemento real que perdeu o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>anexados a eventos para esta classe, para que LostKeyboardFocus faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> Processadores de eventos que estão anexados ao evento LostKeyboardFocus estão ligados ao subjacentes <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostKeyboardFocus&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.LostKeyboardFocusEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.</xref:System.Windows.UIElement.PreviewLostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.LostKeyboardFocusEvent>      -Ignorar <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostKeyboardFocusEvent
  id: LostKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostKeyboardFocusEvent
  nameWithType: UIElement.LostKeyboardFocusEvent
  fullName: System.Windows.UIElement.LostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.LostKeyboardFocus&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostMouseCapture
  id: LostMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostMouseCapture
  nameWithType: UIElement.LostMouseCapture
  fullName: System.Windows.UIElement.LostMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento perde a captura do rato."
  remarks: "Quando um elemento captura o rato, este recebe entrada do rato, mesmo se o ponteiro for fora dos respetivos limites. O rato, normalmente, é capturado apenas durante as operações de arrastar e largar.       Uma vez que este evento utiliza encaminhamento bubbling, o elemento que se perde a captura poderá ser um elemento subordinado em vez do elemento em que o processador de eventos, na verdade, está ligado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de eventos para determinar o elemento real que perdeu a capturar.</xref:System.Windows.RoutedEventArgs.Source%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>anexados a eventos para esta classe, para que LostMouseCapture faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> Processadores de eventos que estão anexados ao evento LostMouseCapture estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostMouseCapture&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.LostMouseCaptureEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -Não há nenhum evento de túnel correspondente definido.</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.LostMouseCaptureEvent>      -Ignorar <xref:System.Windows.UIElement.OnLostMouseCapture%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnLostMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler LostMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostMouseCaptureEvent
  id: LostMouseCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostMouseCaptureEvent
  nameWithType: UIElement.LostMouseCaptureEvent
  fullName: System.Windows.UIElement.LostMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.LostMouseCapture&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostStylusCapture
  id: LostStylusCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostStylusCapture
  nameWithType: UIElement.LostStylusCapture
  fullName: System.Windows.UIElement.LostStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento perde a captura de caneta."
  remarks: "Quando um elemento captura a caneta, este recebe a entrada de caneta, mesmo se o ponteiro for fora dos respetivos limites. A caneta normalmente é capturada apenas durante as operações de arrastar e largar.       Uma vez que este evento utiliza encaminhamento bubbling, o elemento que perde o foco poderá ser um elemento subordinado em vez do elemento em que o processador de eventos, na verdade, está ligado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de eventos para determinar o elemento real que perdeu o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>anexados a eventos para esta classe, para que LostStylusCapture faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> Processadores de eventos que estão anexados ao evento LostStylusCapture estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostStylusCapture&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.LostStylusCaptureEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -Não há nenhum evento de túnel correspondente definido.</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.LostStylusCaptureEvent>      -Ignorar <xref:System.Windows.UIElement.OnLostStylusCapture%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnLostStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler LostStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostStylusCaptureEvent
  id: LostStylusCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostStylusCaptureEvent
  nameWithType: UIElement.LostStylusCaptureEvent
  fullName: System.Windows.UIElement.LostStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.LostStylusCapture&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostTouchCapture
  id: LostTouchCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostTouchCapture
  nameWithType: UIElement.LostTouchCapture
  fullName: System.Windows.UIElement.LostTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma captura de touch perde a este elemento."
  remarks: "<a name=&quot;routedEventInfo_LostTouchCapture&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.LostTouchCaptureEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -Ignorar <xref:System.Windows.UIElement.OnLostTouchCapture%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnLostTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.LostTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostTouchCaptureEvent
  id: LostTouchCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostTouchCaptureEvent
  nameWithType: UIElement.LostTouchCaptureEvent
  fullName: System.Windows.UIElement.LostTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.LostTouchCapture&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationBoundaryFeedback
  id: ManipulationBoundaryFeedback
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationBoundaryFeedback
  nameWithType: UIElement.ManipulationBoundaryFeedback
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a manipulação encontra um limite."
  remarks: "<a name=&quot;routedEventInfo_ManipulationBoundaryFeedback&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|</xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> ManipulationBoundaryFeedback;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationBoundaryFeedbackEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  id: ManipulationBoundaryFeedbackEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationBoundaryFeedbackEvent
  nameWithType: UIElement.ManipulationBoundaryFeedbackEvent
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;> </xref> eventos."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationCompleted
  id: ManipulationCompleted
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationCompleted
  nameWithType: UIElement.ManipulationCompleted
  fullName: System.Windows.UIElement.ManipulationCompleted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um manipulação e inércia se no <xref href=&quot;System.Windows.UIElement&quot;> </xref> objeto está concluído."
  remarks: "Pode utilizar este evento para obter informações sobre a manipulação quando for concluída.  Por exemplo, pode utilizar o <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName>alterar a propriedade para determinar a quantidade total a posição da manipulação.</xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName>       Para mais informações sobre manipulações, consulte o [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).  Para obter um exemplo de uma aplicação que responde a manipulações, consulte [instruções: criar a primeira Touch aplicação](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_ManipulationCompleted&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.ManipulationCompletedEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|</xref:System.Windows.Input.ManipulationCompletedEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationCompletedEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> ManipulationCompleted;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationCompletedEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationCompletedEvent
  id: ManipulationCompletedEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationCompletedEvent
  nameWithType: UIElement.ManipulationCompletedEvent
  fullName: System.Windows.UIElement.ManipulationCompletedEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.ManipulationCompleted&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationDelta
  id: ManipulationDelta
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationDelta
  nameWithType: UIElement.ManipulationDelta
  fullName: System.Windows.UIElement.ManipulationDelta
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o dispositivo de entrada alterado posição durante uma manipulação."
  remarks: "O evento ManipulationDelta ocorre várias vezes quando o utilizador arrasta fingers através de ecrã durante uma manipulação e novamente quando ocorre inércia se.  Pode utilizar o <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A>propriedade para verificar se o evento está a ocorrer durante inércia se.</xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A>       O elemento com ManipulationDelta evento ocorre não é afetado de qualquer forma, quando o evento ocorre.  Tem de fornecer a lógica para o elemento que está a ser manipulado.  O <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>e <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>Propriedades, que são do tipo <xref:System.Windows.Input.ManipulationDelta>, conter dados sobre como alterar a posição das manipulações e interpretado como mover, redimensionamento ou rodar um objeto.</xref:System.Windows.Input.ManipulationDelta> </xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> </xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>  Aplicar a essas informações para o elemento que está a ser manipulado.       Para mais informações sobre manipulações, consulte o [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).  Para obter um exemplo de uma aplicação que responde a manipulações, consulte [instruções: criar a primeira Touch aplicação](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_ManipulationDelta&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.ManipulationDeltaEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|</xref:System.Windows.Input.ManipulationDeltaEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationDeltaEvent>"
  example:
  - "The following example shows an event handler for the ManipulationDelta event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.  The example also checks whether the ManipulationDelta event occurred during inertia and whether the rectangle is touching the edge of a window.  If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> ManipulationDelta;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationDeltaEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationDeltaEvent
  id: ManipulationDeltaEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationDeltaEvent
  nameWithType: UIElement.ManipulationDeltaEvent
  fullName: System.Windows.UIElement.ManipulationDeltaEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationInertiaStarting
  id: ManipulationInertiaStarting
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationInertiaStarting
  nameWithType: UIElement.ManipulationInertiaStarting
  fullName: System.Windows.UIElement.ManipulationInertiaStarting
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o dispositivo de entrada perde o contacto com o <xref href=&quot;System.Windows.UIElement&quot;> </xref> objeto durante um manipulação e inércia se começa."
  remarks: "O evento ManipulationInertiaStarting ocorre quando o utilizador lifts todas fingers no ecrã durante uma manipulação. Por exemplo, se um utilizador &quot;emitir&quot; um <xref:System.Windows.UIElement>entre uma superfície, o utilizador será touch o <xref:System.Windows.UIElement>para iniciar a ação Mover mas entre o ecrã sem fios para uma distância curto e, em seguida, versão <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement> </xref:System.Windows.UIElement> Quando o utilizador liberta o elemento, inércia se inicia e da ManipulationInertiaStarting ocorrência do evento.  O <xref:System.Windows.UIElement>continua a receber <xref:System.Windows.UIElement.ManipulationDelta>eventos para indicar que inércia se está a ocorrer no elemento.</xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.UIElement>       Pode utilizar este evento para especificar o comportamento de inércia se.  Por exemplo, pode definir a velocidade de inicial que é utilizada quando inércia se começa.  Também pode especificar a quantidade de inércia se definindo a deceleration pretendido ou ao definir o posicionamento pretendido.  Pode definir estes valores para cada tipo de manipulação (tradução, expansão ou rotação) de forma independente.  Para obter mais informações, consulte <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>       Para mais informações sobre manipulações, consulte o [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).  Para obter um exemplo de uma aplicação que responde a manipulações, consulte [instruções: criar a primeira Touch aplicação](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_ManipulationInertiaStarting&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|</xref:System.Windows.Input.ManipulationInertiaStartingEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>"
  example:
  - "The following example shows the ManipulationInertiaStarting event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-cs[BasicManipulation#ManipulationInertiaStarting](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationinertiastarting)]\n [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationinertiastarting)]"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationInertiaStartingEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationInertiaStartingEvent
  id: ManipulationInertiaStartingEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationInertiaStartingEvent
  nameWithType: UIElement.ManipulationInertiaStartingEvent
  fullName: System.Windows.UIElement.ManipulationInertiaStartingEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.ManipulationInertiaStarting&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStarted
  id: ManipulationStarted
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStarted
  nameWithType: UIElement.ManipulationStarted
  fullName: System.Windows.UIElement.ManipulationStarted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um dispositivo de entrada começa uma manipulação no <xref href=&quot;System.Windows.UIElement&quot;> </xref> objeto."
  remarks: "O evento ManipulationStarted ocorre após o <xref:System.Windows.UIElement.ManipulationStarting>eventos.</xref:System.Windows.UIElement.ManipulationStarting>  Pode fazer o seguinte com o <xref:System.Windows.Input.ManipulationStartedEventArgs>:-obter o elemento que posição a manipulação relativa ao utilizar o <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A>propriedade.</xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> </xref:System.Windows.Input.ManipulationStartedEventArgs>      -Obtenha a origem da manipulação, utilizando o <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A>propriedade.</xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A>      -Cancelar a manipulação ao chamar o <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A>método.</xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A>       Para mais informações sobre manipulações, consulte o [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).  Para obter um exemplo de uma aplicação que responde a manipulações, consulte [instruções: criar a primeira Touch aplicação](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_ManipulationStarted&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.ManipulationStartedEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.|</xref:System.Windows.Input.ManipulationStartedEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationStartedEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationStartedEventArgs> ManipulationStarted;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationStartedEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStartedEvent
  id: ManipulationStartedEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStartedEvent
  nameWithType: UIElement.ManipulationStartedEvent
  fullName: System.Windows.UIElement.ManipulationStartedEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.ManipulationStarted&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStarting
  id: ManipulationStarting
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStarting
  nameWithType: UIElement.ManipulationStarting
  fullName: System.Windows.UIElement.ManipulationStarting
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o processador de manipulação é criado pela primeira vez."
  remarks: "O evento ManipulationStarting ocorre num elemento que tenha o <xref:System.Windows.UIElement.IsManipulationEnabled%2A>propriedade definida como `true` quando o utilizador coloca uma mas no mesmo.</xref:System.Windows.UIElement.IsManipulationEnabled%2A> Por predefinição, a posição da manipulação relativo para o elemento que tenha de relatório de eventos subsequentes manipulação <xref:System.Windows.UIElement.IsManipulationEnabled%2A>definido como `true`.</xref:System.Windows.UIElement.IsManipulationEnabled%2A>  Pode especificar que a posição deve ser relativo de outro elemento definindo a <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>propriedade.</xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> Por exemplo, pode tornar a manipulação relativo para o elemento principal do elemento.       Também pode fazer o seguinte num processador de eventos para ManipulationStarting:-especificar se o utilizador precisa de mais do que um mas para efetuar as manipulações definindo a <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName>propriedade.</xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName>      -Especifique os tipos de manipulação estão ativados, definindo o <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName>propriedade para um <xref:System.Windows.Input.ManipulationModes>enumeração.</xref:System.Windows.Input.ManipulationModes> </xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName>      -Especifique o centro da rotação de um único mas definindo a <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName>propriedade.</xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName>      -Cancelar a manipulação ao chamar o <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName>método.</xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName>       Para mais informações sobre manipulações, consulte o [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).  Para obter um exemplo de uma aplicação que responde a manipulações, consulte [instruções: criar a primeira Touch aplicação](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_ManipulationStarting&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.ManipulationStartingEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.|</xref:System.Windows.Input.ManipulationStartingEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationStartingEvent>"
  example:
  - "The following example shows the event handler for the ManipulationStarting event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.  This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-cs[BasicManipulation#ManipulationStarting](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationstarting)]\n [!code-vb[BasicManipulation#ManipulationStarting](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationstarting)]"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationStartingEventArgs> ManipulationStarting;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationStartingEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStartingEvent
  id: ManipulationStartingEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStartingEvent
  nameWithType: UIElement.ManipulationStartingEvent
  fullName: System.Windows.UIElement.ManipulationStartingEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.ManipulationStarting&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Measure(System.Windows.Size)
  id: Measure(System.Windows.Size)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Measure(Size)
  nameWithType: UIElement.Measure(Size)
  fullName: System.Windows.UIElement.Measure(Size)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Updates the <>*> of a <xref href=&quot;System.Windows.UIElement&quot;></xref>. Elementos principais chamar este método dos seus próprios <> </> *> implementações para formar um esquema de recursiva atualizar. Chamar este método constitui a passagem de primeiro (da passagem &quot;Medida&quot;) de uma atualização de esquema."
  remarks: "O cálculo de posicionamento de esquema no [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] é composta por uma chamada de medidas e um <xref:System.Windows.UIElement.Arrange%2A>chamar.</xref:System.Windows.UIElement.Arrange%2A> Durante a chamada de medidas, um elemento determina os requisitos de tamanho utilizando um `availableSize` entrada. Durante a <xref:System.Windows.UIElement.Arrange%2A>está finalizada chamada, o tamanho do elemento.</xref:System.Windows.UIElement.Arrange%2A>       `availableSize`pode ser qualquer número entre zero e infinito. Elementos que participam no esquema deverá devolver o mínimo <xref:System.Windows.Size>necessitam para um determinado `availableSize`.</xref:System.Windows.Size>       Quando um esquema primeiro é instanciado, recebe sempre uma chamada de medida antes <xref:System.Windows.UIElement.Arrange%2A>.</xref:System.Windows.UIElement.Arrange%2A> No entanto, após a primeira passagem de esquema, poderá receber um <xref:System.Windows.UIElement.Arrange%2A>chamar sem uma medida; isto pode acontecer quando uma propriedade que afeta apenas <xref:System.Windows.UIElement.Arrange%2A>é alterado (por exemplo, o alinhamento), ou quando o elemento principal recebe um <xref:System.Windows.UIElement.Arrange%2A>sem uma medida.</xref:System.Windows.UIElement.Arrange%2A> </xref:System.Windows.UIElement.Arrange%2A> </xref:System.Windows.UIElement.Arrange%2A> Uma chamada de medida invalidará automaticamente um <xref:System.Windows.UIElement.Arrange%2A>chamar.</xref:System.Windows.UIElement.Arrange%2A>       Atualizações do esquema de modo assíncrono, acontecer, de modo a que o thread principal não está a aguardar todas as alterações de esquema possíveis. Consultar um elemento através do code-behind a verificação dos valores de propriedade pode não imediatamente refletir alterações às propriedades interagem com as características de dimensionamento ou esquema (o <xref:System.Windows.FrameworkElement.Width%2A>propriedade, por exemplo).</xref:System.Windows.FrameworkElement.Width%2A>      > [!NOTE] > Podem ser forçadas a atualizações do esquema utilizando o <xref:System.Windows.UIElement.UpdateLayout%2A>método.</xref:System.Windows.UIElement.UpdateLayout%2A> No entanto, a chamar este método é normalmente desnecessário e pode causar um fraco desempenho.       O sistema de esquema mantém duas filas separadas de esquemas inválidas, um para a medida e outro para <xref:System.Windows.UIElement.Arrange%2A>.</xref:System.Windows.UIElement.Arrange%2A> A fila de esquema é ordenada com base na ordem dos elementos da árvore visual do elemento efetuar esquema; elementos superiores na árvore da são na parte superior da fila, para evitar esquemas redundantes causadas por repetido alterações principais. As entradas duplicadas são automaticamente removidas da fila e elementos são automaticamente removidos da fila se que já estão a validar o esquema.       Ao atualizar o esquema, o da fila da medida é esvaziada em primeiro lugar, seguido de <xref:System.Windows.UIElement.Arrange%2A>fila.</xref:System.Windows.UIElement.Arrange%2A> Um elemento a <xref:System.Windows.UIElement.Arrange%2A>nunca irá ser disposta fila se existir um elemento na fila de medida.</xref:System.Windows.UIElement.Arrange%2A>"
  syntax:
    content: public void Measure (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "O espaço disponível que um elemento principal pode alocar um elemento subordinado. Um elemento subordinado pode pedir um espaço de maior daqueles que estão disponíveis; o tamanho fornecido pode ser satisfeito se deslocar for possível no modelo de conteúdo para o elemento actual."
  overload: System.Windows.UIElement.Measure*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MeasureCore(System.Windows.Size)
  id: MeasureCore(System.Windows.Size)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MeasureCore(Size)
  nameWithType: UIElement.MeasureCore(Size)
  fullName: System.Windows.UIElement.MeasureCore(Size)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Quando substituí-lo de uma classe derivada, fornece lógica de medida para o dimensionamento este elemento corretamente, com tendo em conta o tamanho de qualquer conteúdo do elemento subordinado."
  remarks: "É mais comum para um elemento de derivar de <xref:System.Windows.FrameworkElement>vez <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.FrameworkElement> Se estiver a efetuar a derivação de <xref:System.Windows.FrameworkElement>, tenha em atenção que uma substituição de MeasureCore no <xref:System.Windows.FrameworkElement>seals o método MeasureCore.</xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement> Por conseguinte, que apenas as substitua MeasureCore como um meio para alterar as características de medida do esquema se tem de derivar de <xref:System.Windows.UIElement>através de uma herança que incluam <xref:System.Windows.FrameworkElement>.</xref:System.Windows.FrameworkElement> </xref:System.Windows.UIElement> Esta situação pode ser o caso, se está a tentar tirar partido da sua própria implementação o [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] nível principal. Caso contrário, se estiver a efetuar a derivação de <xref:System.Windows.FrameworkElement>, em seguida, o modelo de implementação para o comportamento da medida é o <xref:System.Windows.FrameworkElement>implementação de.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.</xref:System.Windows.FrameworkElement.MeasureOverride%2A> </xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement>       Um elemento principal com elementos subordinados tem de chamar <xref:System.Windows.UIElement.Measure%2A>em cada elemento subordinado caso contrário, estes elementos subordinados não são dimensionados ou dispostos e eficaz desaparecerá do esquema.</xref:System.Windows.UIElement.Measure%2A>"
  example:
  - "A typical override of MeasureCore follows this approximate pattern (there is not a built-in collection called `VisualChildren`; `VisualChildren` is a  placeholder that represents whatever child collection your element maintains).  \n  \n [!code-cs[CorePseudocode#UIElementMeasureOverride](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#uielementmeasureoverride)]\n [!code-vb[CorePseudocode#UIElementMeasureOverride](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#uielementmeasureoverride)]  \n  \n-   You must call <xref:System.Windows.UIElement.Measure%2A> on each child element.  \n  \n-   Generally, your implementation should cache measurement information between the MeasureCore and <xref:System.Windows.UIElement.ArrangeCore%2A> method calls in the same element.  \n  \n-   Calling base implementations of MeasureCore is not required, but might be appropriate if the base implementation provides a desired layout capability.  \n  \n-   Calls to <xref:System.Windows.UIElement.Measure%2A> on child elements should pass either the same `availableSize` as the parent, or a subset of the area, depending on the type of layout the parent element supports. For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control."
  syntax:
    content: protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "O tamanho disponível que pode alocar o elemento principal para o elemento subordinado."
    return:
      type: System.Windows.Size
      description: "O tamanho pretendido deste elemento no esquema."
  overload: System.Windows.UIElement.MeasureCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseDown
  id: MouseDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: UIElement.MouseDown
  fullName: System.Windows.UIElement.MouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando qualquer botão do rato é premido enquanto o ponteiro é efetuada através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>anexados a eventos para esta classe, para que MouseDown faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Processadores de eventos que estão anexados ao evento MouseDown estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       O evento de MouseDown, muitas vezes, é gerado, juntamente com um <xref:System.Windows.UIElement.MouseLeftButtonDown>ou <xref:System.Windows.UIElement.MouseRightButtonDown>, que corresponde a uma prima de um dos dois botões rato padrão.</xref:System.Windows.UIElement.MouseRightButtonDown> </xref:System.Windows.UIElement.MouseLeftButtonDown> <xref:System.Windows.UIElement.MouseLeftButtonDown>e <xref:System.Windows.UIElement.MouseRightButtonDown>também são eventos encaminhados, mas são eventos encaminhados diretos e a adequado específicas do botão o evento é gerada quando o <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>eventos atingirem este elemento ao longo da rota do evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement.MouseRightButtonDown></xref:System.Windows.UIElement.MouseLeftButtonDown> Consulte observações ou <xref:System.Windows.UIElement.MouseLeftButtonDown> <xref:System.Windows.UIElement.MouseRightButtonDown>.</xref:System.Windows.UIElement.MouseRightButtonDown> </xref:System.Windows.UIElement.MouseLeftButtonDown>      > [!IMPORTANT] > Alguns controlos poderão ter classe inerente a processar eventos de botão do rato. O botão esquerdo do rato para baixo de eventos é o evento mais provável para que a classe de processamento de um controlo. A classe de processamento, muitas vezes, marca subjacentes <xref:System.Windows.Input.Mouse>eventos de classe como processado.</xref:System.Windows.Input.Mouse> Quando o evento é identificado processado, outros processadores de instância que estão ligados ao que o elemento não são normalmente gerados. Qualquer outras classe ou instância os processadores que estão anexados às elementos na direção bubbling para a raiz na árvore da IU também normalmente não são gerados.       Pode resolver o problema que está descrito no importante anterior e continuar a receber eventos de MouseDown para botão esquerdo do rato para baixo de eventos de uma classe derivada que tem classe processamento utilizando qualquer uma destas soluções:-anexar processadores para a <xref:System.Windows.UIElement.PreviewMouseDown>evento, o que não está marcado como processado pelos controlos.</xref:System.Windows.UIElement.PreviewMouseDown> Tenha em atenção que, uma vez que este é um evento de pré-visualização, a rota começa na raiz e túneis para o controlo.      -Registar um processador de controlo procedurally chamando <xref:System.Windows.UIElement.AddHandler%2A>e escolher a opção de assinatura que permite que os processadores escutar eventos mesmo que já são marcados como processado nos dados de evento encaminhado.</xref:System.Windows.UIElement.AddHandler%2A>      <a name=&quot;routedEventInfo_MouseDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.MouseDownEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewMouseDown>.</xref:System.Windows.UIElement.PreviewMouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseDownEvent>      -Ignorar <xref:System.Windows.UIElement.OnMouseDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseDownEvent
  id: MouseDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseDownEvent
  nameWithType: UIElement.MouseDownEvent
  fullName: System.Windows.UIElement.MouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.MouseDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: UIElement.MouseEnter
  fullName: System.Windows.UIElement.MouseEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o ponteiro do rato entra os limites deste elemento."
  remarks: "Só é um que utiliza o estratégia de encaminhamento de processamento de eventos direto. Os eventos encaminhados diretos não são gerados ao longo de uma rota; em vez disso, estes são processados no mesmo elemento onde são gerados. No entanto, se ativar outros aspetos do comportamento do evento encaminhado, tais como os accionadores de eventos estilos.       Embora só controla quando o ponteiro do rato entra os limites de um elemento, este evento mais literalmente relatórios de que o <xref:System.Windows.UIElement.IsMouseOver%2A>valor da propriedade foi alterado de `false` para `true` neste elemento.</xref:System.Windows.UIElement.IsMouseOver%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>anexados a eventos para esta classe, para que só faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> Processadores de eventos que estão anexados ao evento só estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>       A <xref:System.Windows.Controls.Button>(ou qualquer <xref:System.Windows.Controls.Primitives.ButtonBase>classe derivada) tem o processamento de nativo para um <xref:System.Windows.UIElement.KeyDown>evento quando o botão tem foco, e a chave de premido é a barra de espaço</xref:System.Windows.UIElement.KeyDown> </xref:System.Windows.Controls.Primitives.ButtonBase> </xref:System.Windows.Controls.Button> A processamento nativo gera o <xref:System.Windows.Controls.Primitives.ButtonBase.Click>evento com o botão como origem e também capture o rato, apesar de não aparece o ponteiro do rato mover.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> Como resultado a captura do rato, um evento de só também é gerado com o botão como origem. Em geral, se um elemento captura o rato, em seguida, só é gerado, bem como <xref:System.Windows.UIElement.GotMouseCapture>e possivelmente outros eventos de controlo específicos.</xref:System.Windows.UIElement.GotMouseCapture>      <a name=&quot;routedEventInfo_MouseEnter&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.MouseEnterEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnMouseEnter%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnMouseEnter%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.MouseEnterEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseEnter;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseEnterEvent
  id: MouseEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseEnterEvent
  nameWithType: UIElement.MouseEnterEvent
  fullName: System.Windows.UIElement.MouseEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.MouseEnter&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: UIElement.MouseLeave
  fullName: System.Windows.UIElement.MouseLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o ponteiro do rato deixa os limites deste elemento."
  remarks: "MouseLeave é um que utiliza o estratégia de encaminhamento de processamento de eventos direto. Os eventos encaminhados diretos não são gerados ao longo de uma rota; em vez disso, estes são processados no mesmo elemento onde são gerados. No entanto, se ativar outros aspetos do comportamento do evento encaminhado, tais como os accionadores de eventos estilos.       Embora MouseLeave controla quando o rato deixa um elemento, este evento mais literalmente relatórios de que o <xref:System.Windows.UIElement.IsMouseOver%2A>valor da propriedade foi alterado de `true` para `false` neste elemento.</xref:System.Windows.UIElement.IsMouseOver%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>anexados a eventos para esta classe, para que MouseLeave faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> Processadores de eventos que estão anexados ao evento MouseLeave estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseLeave&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.MouseLeaveEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnMouseLeave%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnMouseLeave%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.MouseLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseLeave;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeaveEvent
  id: MouseLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeaveEvent
  nameWithType: UIElement.MouseLeaveEvent
  fullName: System.Windows.UIElement.MouseLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.MouseLeave&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonDown
  id: MouseLeftButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonDown
  nameWithType: UIElement.MouseLeftButtonDown
  fullName: System.Windows.UIElement.MouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão esquerdo do rato é premido enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Embora esta área parece estar a seguir um bubbling encaminhar através de uma árvore de elemento, na realidade é um evento encaminhado direto, que é gerado e reraised ao longo da árvore de elemento por cada <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Este evento é um dos vários eventos relacionados que reportam as especificações botão do rato um subjacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>evento, o que é um evento anexado processada por cada elemento ao longo de uma rota de evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       Os dados do evento deste evento expõe os dados do evento de subjacentes <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>eventos.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Se esse evento está marcado como processada ao longo da rota do evento, os eventos específicos do botão do rato ainda são gerados; No entanto, os processadores de eventos de específicos do botão do rato tem de ser adicionados ao chamar explicitamente <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para processar eventos que já estão marcados como processada, para que seja os serviços de escuta para o evento.</xref:System.Windows.UIElement.AddHandler%2A> Se marcar MouseLeftButtonDown processado, são essencialmente marcar <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>processado para as escutas de todas as outras ao longo da rota e em todos os eventos relacionados.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Isto inclui possivelmente eventos de classe-processador gerado, tais como <xref:System.Windows.Controls.Control.MouseDoubleClick>.</xref:System.Windows.Controls.Control.MouseDoubleClick>       Considerar concecionais, este evento (e outros eventos de botão do rato no <xref:System.Windows.UIElement>) para ser um rato &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> O evento adiciona a conveniência de não ser necessário verificar os Estados de botão do rato (esquerda direito para cima / para baixo) dos eventos de rato original dos dados de eventos. Para cenários mais avançados, tais como a verificação de Estados de botões não padrão, poderá ter de utilizar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] da <xref:System.Windows.Input.Mouse>classe em vez dos existentes no <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      > [!IMPORTANT] > Algumas classes de controlo, poderão ter classe inerente a processar eventos de botão do rato. O botão esquerdo do rato para baixo de eventos é o evento mais provável para que a classe de processamento de um controlo. A classe de processamento, muitas vezes, marca subjacentes <xref:System.Windows.Input.Mouse>eventos de classe como processado.</xref:System.Windows.Input.Mouse> Quando o evento é identificado processado, outros processadores de instância que estão ligados ao que o elemento não são normalmente gerados. Qualquer outras classe ou instância os processadores que estão anexados às elementos na direção bubbling para a raiz na árvore da IU também normalmente não são gerados.       Pode resolver o problema que está descrito no importante anterior e continuar a receber eventos de MouseLeftButtonDown para botão esquerdo do rato para baixo de eventos de uma classe derivada que tem classe processamento utilizando qualquer uma destas soluções:-anexar processadores para a <xref:System.Windows.UIElement.PreviewMouseDown>evento, o que não está marcado como processado pelos controlos.</xref:System.Windows.UIElement.PreviewMouseDown> Tenha em atenção que, uma vez que este é um evento de pré-visualização, a rota começa na raiz e túneis para o controlo.      -Registar um processador de controlo procedurally chamando <xref:System.Windows.UIElement.AddHandler%2A>e escolher a opção de assinatura que permite que os processadores escutar eventos mesmo que já são marcados como processado nos dados de evento encaminhado.</xref:System.Windows.UIElement.AddHandler%2A>      <a name=&quot;routedEventInfo_MouseLeftButtonDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonDownEvent
  id: MouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.MouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.MouseLeftButtonDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonUp
  id: MouseLeftButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonUp
  nameWithType: UIElement.MouseLeftButtonUp
  fullName: System.Windows.UIElement.MouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão esquerdo do rato é libertado enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Embora esta área parece estar a seguir um bubbling encaminhar através de uma árvore de elemento, na realidade é um evento encaminhado direto, que é gerado e reraised ao longo da árvore de elemento por cada <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Este evento é um dos vários eventos relacionados que reportam as especificações botão do rato um subjacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>evento, o que é um evento anexado processada por cada elemento ao longo de uma rota de evento.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       Os dados do evento deste evento expõe os dados do evento de subjacentes <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>eventos.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Se esse evento está marcado como processada ao longo da rota do evento, os eventos específicos do botão do rato ainda são gerados; No entanto, os processadores de eventos de específicos do botão do rato tem de ser adicionados ao chamar explicitamente <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para processar eventos que já estão marcados como processada, para que seja os serviços de escuta para o evento.</xref:System.Windows.UIElement.AddHandler%2A> Se marcar MouseLeftButtonUp processado, são essencialmente marcar <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>processado para as escutas de todas as outras ao longo da rota e em todos os eventos relacionados.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       Considerar concecionais, este evento (e outros eventos de botão do rato no <xref:System.Windows.UIElement>) para ser um rato &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> O evento adiciona a conveniência de não ser necessário verificar os Estados de botão do rato (esquerda direito para cima / para baixo) dos eventos de rato original dos dados de eventos. Para cenários mais avançados, tais como a verificação de Estados de botões não padrão, poderá ter de utilizar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] da <xref:System.Windows.Input.Mouse>classe em vez dos existentes no <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_MouseLeftButtonUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonUpEvent
  id: MouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.MouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.MouseLeftButtonUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseMove
  id: MouseMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: UIElement.MouseMove
  fullName: System.Windows.UIElement.MouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o ponteiro do rato se move enquanto estiver sobre este elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>anexados a eventos para esta classe, para que MouseMove faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> Processadores de eventos que estão anexados ao evento MouseMove estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseMove&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.MouseMoveEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewMouseMove>.</xref:System.Windows.UIElement.PreviewMouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.MouseMoveEvent>      -Ignorar <xref:System.Windows.UIElement.OnMouseMove%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseMoveEvent
  id: MouseMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseMoveEvent
  nameWithType: UIElement.MouseMoveEvent
  fullName: System.Windows.UIElement.MouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.MouseMove&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonDown
  id: MouseRightButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonDown
  nameWithType: UIElement.MouseRightButtonDown
  fullName: System.Windows.UIElement.MouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão direito do rato é premido enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Embora esta área parece estar a seguir um bubbling encaminhar através de uma árvore de elemento, na realidade é um evento encaminhado direto, que é gerado e reraised ao longo da árvore de elemento por cada <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Este evento é um dos vários eventos relacionados que reportam as especificações botão do rato um subjacente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>evento, o que é um evento anexado processada por cada elemento ao longo de uma rota de evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       Os dados do evento deste evento expõe os dados do evento de subjacentes <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>eventos.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Se esse evento está marcado como processada ao longo da rota do evento, os eventos específicos do botão do rato ainda são gerados; No entanto, os processadores de eventos de específicos do botão do rato tem de ser adicionados ao chamar explicitamente <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para processar eventos que já estão marcados como processada, para que seja os serviços de escuta para o evento.</xref:System.Windows.UIElement.AddHandler%2A> Se marcar MouseRightButtonDown processado, são essencialmente marcar <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>processado para as escutas de todas as outras ao longo da rota e em todos os eventos relacionados.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Isto inclui possivelmente eventos de classe-processador gerado, tais como <xref:System.Windows.Controls.Control.MouseDoubleClick>.</xref:System.Windows.Controls.Control.MouseDoubleClick>       Considerar concecionais, este evento (e outros eventos de botão do rato no <xref:System.Windows.UIElement>) para ser um rato &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> O evento adiciona a conveniência de não ser necessário verificar os Estados de botão do rato (esquerda direito para cima / para baixo) dos eventos de rato original dos dados de eventos. Para cenários mais avançados, tais como a verificação de Estados de botões não padrão, poderá ter de utilizar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] da <xref:System.Windows.Input.Mouse>classe em vez dos existentes no <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>       Eventos de rato do botão à direita têm frequentemente processamento nativo em cenários de aplicação. Por exemplo, um botão direito do rato para baixo poderá apresentar um menu de contexto. Consulte [descrição geral de ContextMenu](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_MouseRightButtonDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.MouseRightButtonDownEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonDownEvent
  id: MouseRightButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonDownEvent
  nameWithType: UIElement.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement.MouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.MouseRightButtonDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonUp
  id: MouseRightButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonUp
  nameWithType: UIElement.MouseRightButtonUp
  fullName: System.Windows.UIElement.MouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão direito do rato é libertado enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Embora esta área parece estar a seguir um bubbling encaminhar através de uma árvore de elemento, na realidade é um evento encaminhado direto, que é gerado e reraised ao longo da árvore de elemento por cada <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Este evento é um dos vários eventos relacionados que reportam as especificações botão do rato um subjacente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>evento, o que é um evento anexado processada por cada elemento ao longo de uma rota de evento.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       Os dados do evento deste evento expõe os dados do evento de subjacentes <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>eventos.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Se esse evento está marcado como processada ao longo da rota do evento, os eventos específicos do botão do rato ainda são gerados; No entanto, os processadores de eventos de específicos do botão do rato tem de ser adicionados ao chamar explicitamente <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para processar eventos que já estão marcados como processada, para que seja os serviços de escuta para o evento.</xref:System.Windows.UIElement.AddHandler%2A> Se marcar MouseRightButtonUp processado, são essencialmente marcar <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>processado para as escutas de todas as outras ao longo da rota e em todos os eventos relacionados.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       Considerar concecionais, este evento (e outros eventos de botão do rato no <xref:System.Windows.UIElement>) para ser um rato &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> O evento adiciona a conveniência de não ser necessário verificar os Estados de botão do rato (esquerda direito para cima / para baixo) dos eventos de rato original dos dados de eventos. Para cenários mais avançados, tais como a verificação de Estados de botões não padrão, poderá ter de utilizar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] da <xref:System.Windows.Input.Mouse>classe em vez dos existentes no <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_MouseRightButtonUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.MouseRightButtonUpEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonUpEvent
  id: MouseRightButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonUpEvent
  nameWithType: UIElement.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement.MouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.MouseRightButtonUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseUp
  id: MouseUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: UIElement.MouseUp
  fullName: System.Windows.UIElement.MouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando qualquer botão do rato é libertado através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>anexados a eventos para esta classe, para que MouseUp faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Processadores de eventos que estão anexados ao evento MouseUp estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       O evento de MouseUp, muitas vezes, é gerado, juntamente com um <xref:System.Windows.UIElement.MouseLeftButtonUp>ou <xref:System.Windows.UIElement.MouseRightButtonUp>, que corresponde a uma versão de um dos dois botões rato padrão.</xref:System.Windows.UIElement.MouseRightButtonUp> </xref:System.Windows.UIElement.MouseLeftButtonUp> <xref:System.Windows.UIElement.MouseLeftButtonUp>e <xref:System.Windows.UIElement.MouseRightButtonUp>também são eventos encaminhados, mas são eventos encaminhados diretos e a adequado específicas do botão o evento é gerada quando o <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>eventos atingirem este elemento ao longo da rota do evento.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement.MouseRightButtonUp></xref:System.Windows.UIElement.MouseLeftButtonUp> Consulte observações ou <xref:System.Windows.UIElement.MouseLeftButtonUp> <xref:System.Windows.UIElement.MouseRightButtonUp>.</xref:System.Windows.UIElement.MouseRightButtonUp> </xref:System.Windows.UIElement.MouseLeftButtonUp>      <a name=&quot;routedEventInfo_MouseUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.MouseUpEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewMouseUp>.</xref:System.Windows.UIElement.PreviewMouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseUpEvent>      -Ignorar <xref:System.Windows.UIElement.OnMouseUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseUpEvent
  id: MouseUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseUpEvent
  nameWithType: UIElement.MouseUpEvent
  fullName: System.Windows.UIElement.MouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.MouseUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseWheel
  id: MouseWheel
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseWheel
  nameWithType: UIElement.MouseWheel
  fullName: System.Windows.UIElement.MouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o utilizador rodar a roda do rato enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Captura de foco ou rato têm precedência sobre onde o ponteiro do rato é; Por conseguinte, se receber o evento MouseWheel um elemento focado ou capturado, o ponteiro do rato, na verdade, poderá ser através de outro elemento.       Este evento cria um alias para o <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>anexados a eventos para esta classe, para que MouseWheel faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> Processadores de eventos que estão anexados ao evento MouseWheel estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseWheel&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.MouseWheelEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.MouseWheelEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewMouseWheel>.</xref:System.Windows.UIElement.PreviewMouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.UIElement.MouseWheelEvent>      -Ignorar <xref:System.Windows.UIElement.OnMouseWheel%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler MouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseWheelEvent
  id: MouseWheelEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseWheelEvent
  nameWithType: UIElement.MouseWheelEvent
  fullName: System.Windows.UIElement.MouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.MouseWheel&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)
  id: MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MoveFocus(TraversalRequest)
  nameWithType: UIElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.UIElement.MoveFocus(TraversalRequest)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tentativas de mover o foco deste elemento para outro elemento. A direção para mover o foco é especificada por uma direção de documentação de orientação, que é interpretada dentro da organização do visual principal para este elemento."
  remarks: "Certifique-se de que o valor de retorno deste método de verificação. Um valor de retorno da `false` poderá ser devolvido se a transversal é executado na paragem de tabulação que é definida pela composição de um controlo e o pedido de transversal não pediu para ser moldado."
  syntax:
    content: public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);
    parameters:
    - id: request
      type: System.Windows.Input.TraversalRequest
      description: "Um pedido de transversal, que contém uma propriedade que indica o modo de atravessar na ordem de tabulação existente ou uma direção mover visualmente."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o pedido transversal foi efetuada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.MoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  id: OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnAccessKey(AccessKeyEventArgs)
  nameWithType: UIElement.OnAccessKey(AccessKeyEventArgs)
  fullName: System.Windows.UIElement.OnAccessKey(AccessKeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para quando uma chave de acesso que faça sentida para este elemento é invocado."
  remarks: "Não há nenhum evento AccessKey real no <xref:System.Windows.UIElement>classe ou noutro local, que pode aumentar ou anexar processadores for.</xref:System.Windows.UIElement> Em vez disso, o evento é teve origem através de uma classe de manager dedicado, <xref:System.Windows.Input.AccessKeyManager>, que processa pós-cópia todas as entradas para procurar as chaves de acesso que são aplicáveis ao modelo de entrada completo.</xref:System.Windows.Input.AccessKeyManager>"
  syntax:
    content: protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.AccessKeyEventArgs
      description: "Os dados de eventos para o evento de chave de acesso. Os relatórios de dados de eventos, qual a chave foi invocado e indicar se o <xref href=&quot;System.Windows.Input.AccessKeyManager&quot;> </xref> objeto que controla o envio destes eventos também enviado esta invocação de chave de acesso a outros elementos."
  overload: System.Windows.UIElement.OnAccessKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  id: OnChildDesiredSizeChanged(System.Windows.UIElement)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnChildDesiredSizeChanged(UIElement)
  nameWithType: UIElement.OnChildDesiredSizeChanged(UIElement)
  fullName: System.Windows.UIElement.OnChildDesiredSizeChanged(UIElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Suporta o comportamento de esquema quando é redimensionado um elemento subordinado."
  remarks: "Este método não é normalmente denominado pelo código da aplicação. -Está exposto para que esse elemento derivado classes podem tornar mais verifica-se no Estado seus próprios esquema possivelmente inválida. Classes também pode tentar otimizações de forma a minimizar o tempo de processamento de uma passagem de esquema com base nas alterações de tamanho para elementos subordinados. Classe de um elemento derivado de exemplo que implementa OnChildDesiredSizeChanged é o <xref:System.Windows.Controls.Grid>controlo.</xref:System.Windows.Controls.Grid>"
  syntax:
    content: protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);
    parameters:
    - id: child
      type: System.Windows.UIElement
      description: "O elemento subordinado do que está a ser redimensionado."
  overload: System.Windows.UIElement.OnChildDesiredSizeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: UIElement.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Devolve específico da classe <xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;> </xref> implementações para o [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infraestrutura."
  syntax:
    content: protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "O específicos do tipo <xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;> </xref> implementação."
  overload: System.Windows.UIElement.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  id: OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDragEnter(DragEventArgs)
  nameWithType: UIElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  id: OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDragLeave(DragEventArgs)
  nameWithType: UIElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  id: OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDragOver(DragEventArgs)
  nameWithType: UIElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  id: OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDrop(DragEventArgs)
  nameWithType: UIElement.OnDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "O <xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  id: OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnGotFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.UIElement.GotFocus&quot;> </xref> evento encaminhado através da utilização de dados do evento fornecidos."
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. The OnGotFocus implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> que contém dados de eventos. Estes dados de eventos tem de conter o identificador para o <xref href=&quot;System.Windows.UIElement.GotFocus&quot;> </xref> eventos."
  overload: System.Windows.UIElement.OnGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnGotMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnGotMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnGotStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnGotStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnGotTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.GotTouchCapture&quot;> </xref> evento encaminhado que ocorre quando um touch é capturada para este elemento."
  remarks: "O método OnGotTouchCapture não tem qualquer implementação de predefinição. Substituir OnGotTouchCapture numa classe derivada para processar o <xref:System.Windows.UIElement.GotTouchCapture>eventos.</xref:System.Windows.UIElement.GotTouchCapture> Lembre-se de que chamar o método de OnGotTouchCapture a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnGotTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.IsKeyboardFocusedChanged&quot;> </xref> o evento é gerado neste elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método virtual é desencadeado quando o valor da <xref:System.Windows.UIElement.IsKeyboardFocused%2A>alterações de propriedade de dependência.</xref:System.Windows.UIElement.IsKeyboardFocused%2A> O método virtual for gerado pela primeira vez e pode manipular os dados do evento conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>o evento é gerado com essa mesma instância de dados de eventos.</xref:System.Windows.UIElement.IsKeyboardFocusedChanged> Tenha em atenção que o <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>evento não é um evento encaminhado.</xref:System.Windows.UIElement.IsKeyboardFocusedChanged> Por conseguinte, não é possível marcá-lo como processadas o processador de classe.       Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "O <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnIsKeyboardFocusedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Imediatamente antes de invocar o <xref href=&quot;System.Windows.UIElement.IsKeyboardFocusWithinChanged&quot;> </xref> o evento é gerado por este elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método virtual é desencadeado quando o valor da <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>alterações de propriedade de dependência.</xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> O método virtual for gerado pela primeira vez e pode manipular os dados do evento conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>o evento é gerado com essa mesma instância de dados de eventos.</xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> Tenha em atenção que o <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>evento não é um evento encaminhado.</xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> Por conseguinte, não é possível marcá-lo como processadas o processador de classe.       Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.IsMouseCapturedChanged&quot;> </xref> o evento é gerado neste elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método virtual é desencadeado quando o valor da <xref:System.Windows.UIElement.IsMouseCaptured%2A>propriedade de dependência altera o respetivo valor.</xref:System.Windows.UIElement.IsMouseCaptured%2A> O método virtual for gerado pela primeira vez e pode manipular os dados do evento conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsMouseCapturedChanged>o evento é gerado com essa mesma instância de dados de eventos.</xref:System.Windows.UIElement.IsMouseCapturedChanged> Tenha em atenção que o evento <xref:System.Windows.UIElement.IsMouseCapturedChanged>não é um evento encaminhado; Por conseguinte, não é possível marcá-lo como processadas o processador de classe.</xref:System.Windows.UIElement.IsMouseCapturedChanged>       Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "O <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnIsMouseCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.IsMouseCaptureWithinChanged&quot;> </xref> o evento é gerado neste elemento. Implemente este método para adicionar classe de processamento para este evento."
  syntax:
    content: protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnIsMouseCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.IsMouseDirectlyOverChanged&quot;> </xref> o evento é gerado neste elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método virtual é desencadeado quando o valor da <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A>propriedade de dependência altera o respetivo valor.</xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> O método virtual for gerado pela primeira vez e pode manipular os dados do evento conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>o evento é gerado com essa mesma instância de dados de eventos.</xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> Tenha em atenção que o <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>evento não é um evento encaminhado.</xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> Por conseguinte, não é possível marcá-lo como processadas o processador de classe.       Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "O <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnIsMouseDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.IsStylusCapturedChanged&quot;> </xref> o evento é gerado neste elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método virtual é desencadeado quando o valor da <xref:System.Windows.UIElement.IsStylusCaptured%2A>propriedade de dependência altera o respetivo valor.</xref:System.Windows.UIElement.IsStylusCaptured%2A> O método virtual for gerado pela primeira vez e pode manipular os dados do evento conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsStylusCapturedChanged>o evento é gerado com essa mesma instância de dados de eventos.</xref:System.Windows.UIElement.IsStylusCapturedChanged> Repare que o evento não é um evento encaminhado. Por conseguinte, não é possível marcá-lo como processadas o processador de classe.       Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnIsStylusCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.IsStylusCaptureWithinChanged&quot;> </xref> o evento é gerado neste elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método virtual é desencadeado quando o valor da <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A>propriedade de dependência altera o respetivo valor.</xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> O método virtual for gerado pela primeira vez e pode manipular os dados do evento conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged>o evento é gerado com essa mesma instância de dados de eventos.</xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> Repare que o evento não é um evento encaminhado. Por conseguinte, não é possível marcá-lo como processadas o processador de classe.       Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "O <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnIsStylusCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.IsStylusDirectlyOverChanged&quot;> </xref> o evento é gerado neste elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método virtual é desencadeado quando o valor da <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A>propriedade de dependência altera o respetivo valor.</xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> O método virtual for gerado pela primeira vez e pode manipular os dados do evento conforme necessário. Em seguida, a <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged>o evento é gerado com essa mesma instância de dados de eventos.</xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> Repare que o evento não é um evento encaminhado. Por isso não pode marcá-lo como processadas o processador de classe.       Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos."
  syntax:
    content: protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "O <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnIsStylusDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyDown is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyUp is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  id: OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnLostFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gera o <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> evento encaminhado utilizando os dados de eventos fornecido."
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> que contém dados de eventos. Estes dados de eventos tem de conter o identificador para o <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> eventos."
  overload: System.Windows.UIElement.OnLostFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> que contém dados de eventos."
  overload: System.Windows.UIElement.OnLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnLostMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém dados de eventos."
  overload: System.Windows.UIElement.OnLostMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnLostStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém dados de eventos."
  overload: System.Windows.UIElement.OnLostStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnLostTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.LostTouchCapture&quot;> </xref> evento encaminhado que ocorre quando uma captura de touch perde a este elemento."
  remarks: "O método OnLostTouchCapture não tem qualquer implementação de predefinição. Substituir OnLostTouchCapture numa classe derivada para processar o <xref:System.Windows.UIElement.LostTouchCapture>eventos.</xref:System.Windows.UIElement.LostTouchCapture> Lembre-se de que chamar o método de OnLostTouchCapture a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnLostTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  id: OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando a <xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;> </xref> evento ocorre."
  remarks: "O método OnManipulationBoundaryFeedback não tem qualquer implementação de predefinição. Substituir OnManipulationBoundaryFeedback numa classe derivada para processar o <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>eventos.</xref:System.Windows.UIElement.ManipulationBoundaryFeedback> Lembre-se de que chame o método de OnManipulationBoundaryFeedback da classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
      description: "Os dados para o evento."
  overload: System.Windows.UIElement.OnManipulationBoundaryFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  id: OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationCompleted(ManipulationCompletedEventArgs)
  nameWithType: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando a <xref href=&quot;System.Windows.UIElement.ManipulationCompleted&quot;> </xref> evento ocorre."
  remarks: "O método OnManipulationCompleted não tem qualquer implementação de predefinição. Substituir OnManipulationCompleted numa classe derivada para processar o <xref:System.Windows.UIElement.ManipulationCompleted>eventos.</xref:System.Windows.UIElement.ManipulationCompleted> Lembre-se de que chame o método de OnManipulationCompleted da classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationCompletedEventArgs
      description: "Os dados para o evento."
  overload: System.Windows.UIElement.OnManipulationCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  id: OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationDelta(ManipulationDeltaEventArgs)
  nameWithType: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
  fullName: System.Windows.UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando a <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;> </xref> evento ocorre."
  remarks: "O método OnManipulationDelta não tem qualquer implementação de predefinição. Substituir OnManipulationDelta numa classe derivada para processar o <xref:System.Windows.UIElement.ManipulationDelta>eventos.</xref:System.Windows.UIElement.ManipulationDelta> Lembre-se de que chame o método de OnManipulationDelta da classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationDeltaEventArgs
      description: "Os dados para o evento."
  overload: System.Windows.UIElement.OnManipulationDelta*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  id: OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  nameWithType: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando a <xref href=&quot;System.Windows.UIElement.ManipulationInertiaStarting&quot;> </xref> evento ocorre."
  remarks: "O método OnManipulationInertiaStarting não tem qualquer implementação de predefinição. Substituir OnManipulationInertiaStarting numa classe derivada para processar o <xref:System.Windows.UIElement.ManipulationInertiaStarting>eventos.</xref:System.Windows.UIElement.ManipulationInertiaStarting> Lembre-se de que chame o método de OnManipulationInertiaStarting da classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationInertiaStartingEventArgs
      description: "Os dados para o evento."
  overload: System.Windows.UIElement.OnManipulationInertiaStarting*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  id: OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationStarted(ManipulationStartedEventArgs)
  nameWithType: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Chamado quando a <xref href=&quot;System.Windows.UIElement.ManipulationStarted&quot;> </xref> evento ocorre."
  remarks: "O método OnManipulationStarted não tem qualquer implementação de predefinição. Substituir OnManipulationStarted numa classe derivada para processar o <xref:System.Windows.UIElement.ManipulationStarted>eventos.</xref:System.Windows.UIElement.ManipulationStarted> Lembre-se de que chame o método de OnManipulationStarted da classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationStartedEventArgs
      description: "Os dados para o evento."
  overload: System.Windows.UIElement.OnManipulationStarted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  id: OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationStarting(ManipulationStartingEventArgs)
  nameWithType: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.ManipulationStarting&quot;> </xref> criado do evento encaminhado que ocorre quando o processador de manipulação primeiro."
  remarks: "O método OnManipulationStarting não tem qualquer implementação de predefinição. Substituir OnManipulationStarting numa classe derivada para processar o <xref:System.Windows.UIElement.ManipulationStarting>eventos.</xref:System.Windows.UIElement.ManipulationStarting> Lembre-se de que chamar o método de OnManipulationStarting a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationStartingEventArgs
      description: "A <xref href=&quot;System.Windows.Input.ManipulationStartingEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnManipulationStarting*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, OnMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Estes dados de evento comunica detalhes sobre o botão do rato que foi premido e o estado processado."
  overload: System.Windows.UIElement.OnMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseEnter(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; anexado o evento é gerado neste elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos.       O objetivo deste método é semelhante a [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] padrão de eventos no * métodos: Este método proporciona os meios para processar o evento correspondente de classes derivadas através do estabelecimento de um processador de classe em vez de um processador de instância. Neste caso, o evento correspondente é um evento encaminhado, com uma estratégia de encaminhamento direto. Marcar o evento como processado é ainda útil para impedir que os processadores de instância normal (aqueles que não especificam `handledEventsToo`) seja invocado."
  syntax:
    content: protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnMouseEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeave(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; anexado o evento é gerado neste elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos.       O objetivo deste método é semelhante a [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] padrão de eventos no * métodos: Este método proporciona os meios para processar o evento correspondente de classes derivadas através do estabelecimento de um processador de classe em vez de um processador de instância. Neste caso, o evento correspondente é um evento encaminhado, com uma estratégia de encaminhamento direto. Marcar o evento como processado é ainda útil para impedir que os processadores de instância normal (aqueles que não especificam `handledEventsToo`) seja invocado."
  syntax:
    content: protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnMouseLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.MouseLeftButtonDown&quot;> </xref> encaminhado o evento é gerado neste elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "O <xref:System.Windows.UIElement.MouseLeftButtonDown>evento parece viajam uma rota bubbling, mas, na verdade, mudar de uma forma indireta.</xref:System.Windows.UIElement.MouseLeftButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>é o evento subjacente que esteja bolha encaminhada e cada <xref:System.Windows.UIElement>ao longo do evento utiliza idênticos de processamento para aumentar o evento encaminhado direto <xref:System.Windows.UIElement.MouseLeftButtonDown>.</xref:System.Windows.UIElement.MouseLeftButtonDown> rota</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Apesar de poder marcar as <xref:System.Windows.UIElement.MouseLeftButtonDown>evento como processado para efeitos deste elemento, o estado processado não perpetuate para outros elementos ao longo da rota do evento.</xref:System.Windows.UIElement.MouseLeftButtonDown> No entanto, pode querer assinalar o evento como processado para evitar processadores de instância geral (aqueles que não especificou `handledEventsToo`) seja invocado.       A implementação predefinida para o evento de rato geral processamento no <xref:System.Windows.UIElement>escuta <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>e converte-o a um evento local adequado.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> Se pretender substituir esta lógica, tem de criar uma classe derivada. O construtor estático da sua classe derivada, registar um processador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Não é possível alterar o rato processamento comportamento de <xref:System.Windows.UIElement>através da substituição OnMouseLeftButtonDown.</xref:System.Windows.UIElement>       Em alternativa, pode substituir este método para processar para um Estado de rato específico do evento de alteração. Se optar por chamar a implementação base depende do seu cenário. Falha ao chamar base desativa o processamento de entrada predefinido para esse evento do rato em classes de predecessor também esperar invocar OnMouseLeftButtonDown. Por exemplo, pode derivar de <xref:System.Windows.Controls.Button>e substituir OnMouseLeftButtonDown na sua classe derivada sem chamar a implementação base; no entanto, isto substituir desativa o <xref:System.Windows.Controls.Primitives.ButtonBase.Click>eventos.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>"
  syntax:
    content: protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que foi premido o botão do rato esquerdo."
  overload: System.Windows.UIElement.OnMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.MouseLeftButtonUp&quot;> </xref> evento encaminhado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "O <xref:System.Windows.UIElement.MouseLeftButtonUp>evento parece viajam uma rota bubbling, mas, na verdade, mudar de uma forma indireta.</xref:System.Windows.UIElement.MouseLeftButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>é o evento subjacente que esteja bolha encaminhada e cada <xref:System.Windows.UIElement>ao longo do evento utiliza idênticos de processamento para aumentar o evento encaminhado direto <xref:System.Windows.UIElement.MouseLeftButtonUp>.</xref:System.Windows.UIElement.MouseLeftButtonUp> rota</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Apesar de poder marcar as <xref:System.Windows.UIElement.MouseLeftButtonUp>evento como processado para efeitos deste elemento, o estado processado não perpetuate para outros elementos ao longo da rota do evento.</xref:System.Windows.UIElement.MouseLeftButtonUp> No entanto, pode querer assinalar o evento como processado para evitar processadores de instância geral (aqueles que não especificou `handledEventsToo`) seja invocado.       A implementação predefinida para o evento de rato geral processamento no <xref:System.Windows.UIElement>escuta <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>e converte-o a um evento local adequado.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> Se pretender substituir esta lógica, tem de criar uma classe derivada. O construtor estático da sua classe derivada, registar um processador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Não é possível alterar o rato processamento comportamento de <xref:System.Windows.UIElement>através da substituição OnMouseLeftButtonUp.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que foi lançado botão esquerdo do rato."
  overload: System.Windows.UIElement.OnMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.MouseRightButtonDown&quot;> </xref> evento encaminhado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "O <xref:System.Windows.UIElement.MouseRightButtonDown>evento parece viajam uma rota bubbling, mas, na verdade, mudar de uma forma indireta.</xref:System.Windows.UIElement.MouseRightButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>é o evento subjacente que esteja bolha encaminhada e cada <xref:System.Windows.UIElement>ao longo do evento utiliza idênticos de processamento para aumentar o evento encaminhado direto <xref:System.Windows.UIElement.MouseRightButtonDown>.</xref:System.Windows.UIElement.MouseRightButtonDown> rota</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Apesar de poder marcar as <xref:System.Windows.UIElement.MouseRightButtonDown>evento como processado para efeitos deste elemento, o estado processado não perpetuate para outros elementos ao longo da rota do evento.</xref:System.Windows.UIElement.MouseRightButtonDown> No entanto, pode querer assinalar o evento como processado para evitar processadores de instância geral (aqueles que não especificou `handledEventsToo`) seja invocado.       A implementação predefinida para o evento de rato geral processamento no <xref:System.Windows.UIElement>escuta <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>e converte-o a um evento local adequado.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> Se pretender substituir esta lógica, tem de criar uma classe derivada. O construtor estático da sua classe derivada, registar um processador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Não é possível alterar o rato processamento comportamento de <xref:System.Windows.UIElement>através da substituição OnMouseRightButtonDown.</xref:System.Windows.UIElement>       Em alternativa, pode substituir este método para processar para um Estado de rato específico do evento de alteração. Se optar por chamar a implementação base depende do seu cenário. Falha ao chamar base desativa o processamento de entrada predefinido para esse evento do rato em classes de predecessor também esperar invocar OnMouseRightButtonDown. Por exemplo, pode derivar de <xref:System.Windows.Controls.Control>e substituir OnMouseRightButtonDown na sua classe derivada sem chamar base; no entanto, esta substituição desativa os serviços de menu de contexto no controlo, que fazem parte do <xref:System.Windows.Controls.Control>predefinido comportamento.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>"
  syntax:
    content: protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que foi premido o botão direito do rato."
  overload: System.Windows.UIElement.OnMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.MouseRightButtonUp&quot;> </xref> evento encaminhado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "O <xref:System.Windows.UIElement.MouseRightButtonUp>evento parece viajam uma rota bubbling, mas, na verdade, mudar de uma forma indireta.</xref:System.Windows.UIElement.MouseRightButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>é o evento subjacente que esteja bolha encaminhada e cada <xref:System.Windows.UIElement>ao longo do evento utiliza idênticos de processamento para aumentar o evento encaminhado direto <xref:System.Windows.UIElement.MouseRightButtonUp>.</xref:System.Windows.UIElement.MouseRightButtonUp> rota</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Apesar de poder marcar as <xref:System.Windows.UIElement.MouseRightButtonUp>evento como processado para efeitos deste elemento, o estado processado não perpetuate para outros elementos ao longo da rota do evento.</xref:System.Windows.UIElement.MouseRightButtonUp> No entanto, pode querer assinalar o evento como processado para evitar processadores de instância geral (aqueles que não especificou `handledEventsToo`) seja invocado.       A implementação predefinida para o evento de rato geral processamento no <xref:System.Windows.UIElement>escuta <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>e converte-o a um evento local adequado.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> Se pretender substituir esta lógica, tem de criar uma classe derivada. O construtor estático da sua classe derivada, registar um processador de classe alternativo para <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Não é possível alterar o rato processamento comportamento de <xref:System.Windows.UIElement>através da substituição OnMouseRightButtonUp.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que o botão direito do rato foi libertado."
  overload: System.Windows.UIElement.OnMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; evento encaminhado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, OnMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que o botão do rato foi libertado."
  overload: System.Windows.UIElement.OnMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  id: OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  id: OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  id: OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  id: OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: UIElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "O <xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "O <xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "O <xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; anexado evento encaminhado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, OnPreviewMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que um ou mais botões de rato foram premidos."
  overload: System.Windows.UIElement.OnPreviewMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonDown&quot;> </xref> evento encaminhado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "O <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>evento parece viajam uma rota de túnel, mas, na verdade, mudar de uma forma indireta.</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>é o evento subjacente que é encaminhado de túnel e cada <xref:System.Windows.UIElement>ao longo do evento utiliza idênticos de processamento para aumentar o evento encaminhado direto <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>.</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> rota</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Apesar de poder marcar as <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>evento como processado para efeitos deste elemento, o estado processado não perpetuate para outros elementos ao longo da rota do evento.</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> No entanto, pode querer assinalar o evento como processado para evitar processadores de instância geral (aqueles que não especificou `handledEventsToo`) seja invocado.       A implementação predefinida para o evento de rato geral processamento no <xref:System.Windows.UIElement>escuta <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>e converte-o a um evento local adequado.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> Se pretender substituir esta lógica, tem de criar uma classe derivada. O construtor estático da sua classe derivada, registar um processador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Não é possível alterar o rato processamento comportamento de <xref:System.Windows.UIElement>através da substituição OnPreviewMouseLeftButtonDown.</xref:System.Windows.UIElement>       Em alternativa, pode substituir este método para processar para um Estado de rato específico do evento de alteração. Se optar por chamar a implementação base depende do seu cenário. Falha ao chamar base desativa o processamento de entrada predefinido para esse evento do rato em classes de predecessor também esperar invocar OnPreviewMouseLeftButtonDown. Por exemplo, pode derivar de <xref:System.Windows.Controls.Button>e substituir OnPreviewMouseLeftButtonDown na sua classe derivada sem chamar a implementação base; no entanto, isto substituir desativa o <xref:System.Windows.Controls.Primitives.ButtonBase.Click>eventos.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que foi premido o botão do rato esquerdo."
  overload: System.Windows.UIElement.OnPreviewMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonUp&quot;> </xref> evento encaminhado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "O <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>evento parece viajam uma rota de túnel, mas, na verdade, mudar de uma forma indireta.</xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>é o evento subjacente que é encaminhado de túnel e cada <xref:System.Windows.UIElement>ao longo do evento utiliza idênticos de processamento para aumentar o evento encaminhado direto <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>.</xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> rota</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Apesar de poder marcar as <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>evento como processado para efeitos deste elemento, o estado processado não perpetuate para outros elementos ao longo da rota do evento.</xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> No entanto, pode querer assinalar o evento como processado para evitar processadores de instância geral (aqueles que não especificou `handledEventsToo`) seja invocado.       A implementação predefinida para o evento de rato geral processamento no <xref:System.Windows.UIElement>escuta <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>e converte-o a um evento local adequado.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> Se pretender substituir esta lógica, tem de criar uma classe derivada. O construtor estático da sua classe derivada, registar um processador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Não é possível alterar o rato processamento comportamento de <xref:System.Windows.UIElement>através da substituição OnPreviewMouseLeftButtonUp.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que foi lançado botão esquerdo do rato."
  overload: System.Windows.UIElement.OnPreviewMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonDown&quot;> </xref> evento encaminhado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "O <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>evento parece viajam uma rota de túnel, mas, na verdade, mudar de uma forma indireta.</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>é o evento subjacente que é encaminhado de túnel e cada <xref:System.Windows.UIElement>ao longo do evento utiliza idênticos de processamento para aumentar o evento encaminhado direto <xref:System.Windows.UIElement.MouseRightButtonDown>.</xref:System.Windows.UIElement.MouseRightButtonDown> rota</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Apesar de poder marcar as <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>evento como processado para efeitos deste elemento, o estado processado não perpetuate para outros elementos ao longo da rota do evento.</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> No entanto, pode querer assinalar o evento como processado para evitar processadores de instância geral (aqueles que não especificou `handledEventsToo`) seja invocado.       A implementação predefinida para o evento de rato geral processamento no <xref:System.Windows.UIElement>escuta <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>e converte-o a um evento local adequado.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> Se pretender substituir esta lógica, tem de criar uma classe derivada. O construtor estático da sua classe derivada, registar um processador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Não é possível alterar o rato processamento comportamento de <xref:System.Windows.UIElement>através da substituição OnPreviewMouseRightButtonDown.</xref:System.Windows.UIElement>       Em alternativa, pode substituir este método para processar para um Estado de rato específico do evento de alteração. Se optar por chamar a implementação base depende do seu cenário. Falha ao chamar base desativa o processamento de entrada predefinido para esse evento do rato em classes de predecessor também esperar invocar OnPreviewMouseRightButtonDown. Por exemplo, pode derivar de <xref:System.Windows.Controls.Control>e substituir OnPreviewMouseRightButtonDown na sua classe derivada sem chamar base; no entanto, esta substituição desativa os serviços de menu de contexto no controlo, que fazem parte do <xref:System.Windows.Controls.Control>predefinido comportamento.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que foi premido o botão direito do rato."
  overload: System.Windows.UIElement.OnPreviewMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada <xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonUp&quot;> </xref> evento encaminhado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "O <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>evento parece viajam uma rota de túnel, mas, na verdade, mudar de uma forma indireta.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>é o evento subjacente que é encaminhado de túnel e cada <xref:System.Windows.UIElement>ao longo do evento utiliza idênticos de processamento para aumentar o evento encaminhado direto <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> rota</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Apesar de poder marcar as <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>evento como processado para efeitos deste elemento, o estado processado não perpetuate para outros elementos ao longo da rota do evento.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> No entanto, pode querer assinalar o evento como processado para evitar processadores de instância geral (aqueles que não especificou `handledEventsToo`) seja invocado.       A implementação predefinida para o evento de rato geral processamento no <xref:System.Windows.UIElement>escuta <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>e converte-o a um evento local adequado.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> Se pretender substituir esta lógica, tem de criar uma classe derivada. O construtor estático da sua classe derivada, registar um processador de classe alternativo para <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Não é possível alterar o rato processamento comportamento de <xref:System.Windows.UIElement>através da substituição OnPreviewMouseRightButtonUp.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que o botão direito do rato foi libertado."
  overload: System.Windows.UIElement.OnPreviewMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, OnPreviewMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> que contém os dados do evento. Os dados do evento relatórios que foram lançados uma ou mais botões de rato."
  overload: System.Windows.UIElement.OnPreviewMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "O <xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "O <xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "O <xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.PreviewTouchDown&quot;> </xref> evento encaminhado que ocorre quando um touch prime este elemento."
  remarks: "O método OnPreviewTouchDown não tem qualquer implementação de predefinição. Substituir OnPreviewTouchDown numa classe derivada para processar o <xref:System.Windows.UIElement.PreviewTouchDown>eventos.</xref:System.Windows.UIElement.PreviewTouchDown> Lembre-se de que chamar o método de OnPreviewTouchDown a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.PreviewTouchMove&quot;> </xref> evento encaminhado que ocorre quando um touch se move enquanto estão dentro deste elemento."
  remarks: "O método OnPreviewTouchMove não tem qualquer implementação de predefinição. Substituir OnPreviewTouchMove numa classe derivada para processar o <xref:System.Windows.UIElement.PreviewTouchMove>eventos.</xref:System.Windows.UIElement.PreviewTouchMove> Lembre-se de que chamar o método de OnPreviewTouchMove a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.PreviewTouchUp&quot;> </xref> evento encaminhado que ocorre quando é lançada uma touch dentro deste elemento."
  remarks: "O método OnPreviewTouchUp não tem qualquer implementação de predefinição. Substituir OnPreviewTouchUp numa classe derivada para processar o <xref:System.Windows.UIElement.PreviewTouchUp>eventos.</xref:System.Windows.UIElement.PreviewTouchUp> Lembre-se de que chamar o método de OnPreviewTouchUp a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnPreviewTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "O <xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  id: OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: UIElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.UIElement.OnQueryCursor(QueryCursorEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.QueryCursorEventArgs
      description: "O <xref href=&quot;System.Windows.Input.QueryCursorEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnQueryCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  id: OnRender(System.Windows.Media.DrawingContext)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnRender(DrawingContext)
  nameWithType: UIElement.OnRender(DrawingContext)
  fullName: System.Windows.UIElement.OnRender(DrawingContext)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Quando substituí-lo de uma classe derivada, participa em operações de composição que são direcionadas para o sistema de esquema. As instruções de composição para este elemento não são utilizadas diretamente quando este método é invocado e, em vez disso, são preservadas para posterior utilização assíncrona ao esquema e de desenho."
  remarks: "Este método não tem qualquer implementação de predefinição na <xref:System.Windows.UIElement>classe.</xref:System.Windows.UIElement>"
  example:
  - "The following code example shows a possible implementation for a panel derived class.  \n  \n [!code-vb[LightWeightCustomPanel#1](~/add/codesnippet/visualbasic/light_custom_panel_vb/offsetpanel.vb#1)]\n [!code-cs[LightWeightCustomPanel#1](~/add/codesnippet/csharp/Light_Custom_Panel_csharp/OffsetPanel.cs#1)]"
  syntax:
    content: protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);
    parameters:
    - id: drawingContext
      type: System.Windows.Media.DrawingContext
      description: "As instruções de desenho de um elemento específico. Neste contexto é fornecido para o sistema de esquema."
  overload: System.Windows.UIElement.OnRender*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  id: OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnRenderSizeChanged(SizeChangedInfo)
  nameWithType: UIElement.OnRenderSizeChanged(SizeChangedInfo)
  fullName: System.Windows.UIElement.OnRenderSizeChanged(SizeChangedInfo)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Quando substituí-lo de uma classe derivada, participa em operações de composição que são direcionadas para o sistema de esquema. Este método é invocado após a atualização de esquema e antes de composição, se o elemento <xref:System.Windows.UIElement.RenderSize*>foi alterado como resultado da atualização de esquema.</xref:System.Windows.UIElement.RenderSize*>"
  remarks: "Este método não tem qualquer implementação de predefinição. Um elemento de nível de framework típico do WPF utiliza a implementação de substituição de <xref:System.Windows.FrameworkElement>.</xref:System.Windows.FrameworkElement> O <xref:System.Windows.FrameworkElement>implementação invalida o <xref:System.Windows.FrameworkElement.Width%2A>e <xref:System.Windows.FrameworkElement.Height%2A>Propriedades e identificadores as noções básicas do remaking o esquema.</xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement> Substituir OnRenderSizeChanged no <xref:System.Windows.UIElement>nível implica que a implementação de elemento deliberadamente não está a utilizar a implementação de nível de framework WPF e, por conseguinte, o elemento deve processar lógica de esquema mais diretamente, normalmente, escrevendo um sistema de esquema de substituição.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);
    parameters:
    - id: info
      type: System.Windows.SizeChangedInfo
      description: "Os parâmetros em pacote (<xref href=&quot;System.Windows.SizeChangedInfo&quot;></xref>), que inclui os tamanhos de antigos e novos e que, na verdade, as alterações de dimensão."
  overload: System.Windows.UIElement.OnRenderSizeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  id: OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: UIElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusEnter(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; anexado o evento é gerado por este elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos.       O objetivo deste método é semelhante à [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] padrão de eventos no * métodos: Este método proporciona os meios para processar o evento correspondente de classes derivadas através do estabelecimento de um processador de classe em vez de um processador de instância. Neste caso, o evento correspondente é um evento encaminhado. Marcar o evento como processado é ainda útil para impedir os processadores de instância normal (aqueles que não especificam `handledEventsToo`) seja invocado."
  syntax:
    content: protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  id: OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: UIElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusLeave(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; anexado o evento é gerado por este elemento. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "Este método não tem qualquer implementação de predefinição. Uma vez que uma classe de herança, pode implementar este método, recomendamos que chamar a implementação base na sua implementação. Pode chamar base antes ou depois do tratamento especial, dependendo dos seus requisitos.       O objetivo deste método é semelhante à [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] padrão de eventos no * métodos: Este método proporciona os meios para processar o evento correspondente de classes derivadas através do estabelecimento de um processador de classe em vez de um processador de instância. Neste caso, o evento correspondente é um evento encaminhado. Marcar o evento como processado é ainda útil para impedir os processadores de instância normal (aqueles que não especificam `handledEventsToo`) seja invocado."
  syntax:
    content: protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "O <xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando existe um não processada &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; evento anexado atinge um elemento na respetiva rota que deriva esta classe. Implemente este método para adicionar classe de processamento para este evento."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "O <xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.TouchDown&quot;> </xref> evento encaminhado que ocorre quando prime um touch dentro deste elemento."
  remarks: "O método OnTouchDown não tem qualquer implementação de predefinição. Substituir OnTouchDown numa classe derivada para processar o <xref:System.Windows.UIElement.TouchDown>eventos.</xref:System.Windows.UIElement.TouchDown> Lembre-se de que chamar o método de OnTouchDown a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  id: OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: UIElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchEnter(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.TouchEnter&quot;> </xref> evento encaminhado que ocorre quando um touch se move de exterior para dentro dos limites deste elemento."
  remarks: "O método de TheOnTouchEnter não tem nenhuma implementação predefinida. Substituir OnTouchEnter numa classe derivada para processar o <xref:System.Windows.UIElement.TouchEnter>eventos.</xref:System.Windows.UIElement.TouchEnter> Lembre-se de que chamar o método de OnTouchEnter a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnTouchEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  id: OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: UIElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchLeave(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.TouchLeave&quot;> </xref> evento encaminhado que ocorre quando um touch se move de interior para fora dos limites deste <xref href=&quot;System.Windows.UIElement&quot;> </xref>."
  remarks: "O método OnTouchLeave não tem qualquer implementação de predefinição. Substituir OnTouchLeave numa classe derivada para processar o <xref:System.Windows.UIElement.TouchLeave>eventos.</xref:System.Windows.UIElement.TouchLeave> Lembre-se de que chamar o método de OnTouchLeave a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnTouchLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.TouchMove&quot;> </xref> evento encaminhado que ocorre quando um touch se move enquanto estão dentro deste elemento."
  remarks: "O método OnTouchMove não tem qualquer implementação de predefinição. Substituir OnTouchMove numa classe derivada para processar o <xref:System.Windows.UIElement.TouchMove>eventos.</xref:System.Windows.UIElement.TouchMove> Lembre-se de que chamar o método de OnTouchMove a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Fornece a classe de processamento para a <xref href=&quot;System.Windows.UIElement.TouchUp&quot;> </xref> evento encaminhado que ocorre quando é lançada uma touch dentro deste elemento."
  remarks: "O método OnTouchUp não tem qualquer implementação de predefinição. Substituir OnTouchUp numa classe derivada para processar o <xref:System.Windows.UIElement.TouchUp>eventos.</xref:System.Windows.UIElement.TouchUp> Lembre-se de que chamar o método de OnTouchUp a classe base para que o evento de receba base classes."
  syntax:
    content: protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> que contém os dados do evento."
  overload: System.Windows.UIElement.OnTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Invocada quando o elemento principal deste <xref href=&quot;System.Windows.UIElement&quot;> </xref> relatórios uma alteração à subjacente visual principal."
  syntax:
    content: protected override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "O principal anterior. Isto pode ser fornecido como <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se o <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> não tinha um elemento principal anteriormente."
  overload: System.Windows.UIElement.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Opacity
  id: Opacity
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Opacity
  nameWithType: UIElement.Opacity
  fullName: System.Windows.UIElement.Opacity
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define o factor de opacidade aplicado a todo o <xref href=&quot;System.Windows.UIElement&quot;> </xref> quando é composto no [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)].  Esta é uma propriedade de dependência."
  remarks: "O valor 1,0 predefinido é a predefinição fornecida metadados inicial desta propriedade de dependência na <xref:System.Windows.UIElement>classe.</xref:System.Windows.UIElement> Outras classes derivadas, potencialmente, podem alterar este valor predefinido através da substituição os metadados de dentro do respetivo construtor de classe.       O valor da opacidade não será aplicado aos real de esquema, a menos que o elemento é também visível (<xref:System.Windows.UIElement.IsVisible%2A> é `true`).</xref:System.Windows.UIElement.IsVisible%2A>       Opacidade é aplicada de elementos principais no abaixo na árvore de elemento a elementos subordinados, mas os efeitos visível das definições de opacidade aninhados não são indicados o valor da propriedade de elementos subordinados individuais. Por exemplo, se uma lista de tem uma opacidade de 50% (0,5) e um dos seus itens de lista tem a suas próprias opacidade definida como 20% (0,2), a opacidade net visível para esse item da lista será o composto como se fosse 10% (0,1), mas o valor da propriedade do item de lista propriedade opacidade ainda seria 0,2 quando consultado.       Mesmo se a opacidade declarada ou avaliada for 0, um elemento ainda participa nos eventos de entrada e de comandos, não sendo potencialmente focusable. Este aspeto pode ser útil para a instância pode utilizar um objeto de opacidade zero (por exemplo, uma forma) para objetos subjacentes com elementos transparentes de máscara. O objeto de opacidade de zero, em seguida, pode processar o evento de entrada a processar para uma área subjacente. No entanto, o `Background` ou `Fill` do objeto ou da forma deve ser definido como um valor, mesmo se for <xref:System.Windows.Media.Brushes.Transparent%2A>, caso contrário, a testar acessos não está ativado e não há eventos recebidos.</xref:System.Windows.Media.Brushes.Transparent%2A>      <a name=&quot;dependencyPropertyInfo_Opacity&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.OpacityProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.OpacityProperty>"
  syntax:
    content: public double Opacity { get; set; }
    return:
      type: System.Double
      description: "O fator de opacidade. Opacidade predefinido é 1.0. Valores esperados encontram-se entre 0,0 e 1,0."
  overload: System.Windows.UIElement.Opacity*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OpacityMask
  id: OpacityMask
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
  fullName: System.Windows.UIElement.OpacityMask
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define uma máscara de opacidade, como um <xref href=&quot;System.Windows.Media.Brush&quot;> </xref> implementação que é aplicada a qualquer máscara alpha canal para o conteúdo composto deste elemento.  Esta é uma propriedade de dependência."
  remarks: "Esta propriedade utiliza apenas que o valor de canal alfa é fornecido <xref:System.Windows.Media.Brush>.</xref:System.Windows.Media.Brush> Outros canais do <xref:System.Windows.Media.Brush>do composto conteúdo (vermelho, verde ou azul) são ignorados.</xref:System.Windows.Media.Brush>       O mais comum <xref:System.Windows.Media.Brush>para esta finalidade é um <xref:System.Windows.Media.ImageBrush>, que pode ser utilizado para uma variedade de fotografias máscara técnicas, como um vignette.</xref:System.Windows.Media.ImageBrush> </xref:System.Windows.Media.Brush> Mas qualquer definido <xref:System.Windows.Media.Brush>(tais como <xref:System.Windows.Media.LinearGradientBrush>) pode ser utilizado.</xref:System.Windows.Media.LinearGradientBrush> </xref:System.Windows.Media.Brush>       No [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)], este valor de propriedade, pode utilizar uma sintaxe de inline que é específica para cada implementação de <xref:System.Windows.Media.Brush>classe abstracta.</xref:System.Windows.Media.Brush> Para obter mais informações, consulte [desenhar com cores sólidas e descrição geral de gradações](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_OpacityMask&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.OpacityMaskProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.OpacityMaskProperty>"
  example:
  - "The following markup example shows an <xref:System.Windows.Media.ImageBrush> opacity mask applied to another <xref:System.Windows.Controls.Image>.  \n  \n [!code-xml[OpacityMasksExample#UIElementOpacityMask](~/add/codesnippet/xaml/p-system.windows.uieleme_6_1.xaml)]\n [!code-xml[OpacityMasksExample#UIElementOpacityMask](~/add/codesnippet/xaml/p-system.windows.uieleme_6_1.xaml)]"
  syntax:
    content: public System.Windows.Media.Brush OpacityMask { get; set; }
    return:
      type: System.Windows.Media.Brush
      description: "O Pincel a utilizar para a máscara de opacidade."
  overload: System.Windows.UIElement.OpacityMask*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OpacityMaskProperty
  id: OpacityMaskProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OpacityMaskProperty
  nameWithType: UIElement.OpacityMaskProperty
  fullName: System.Windows.UIElement.OpacityMaskProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.OpacityMask*>propriedade de dependência.</xref:System.Windows.UIElement.OpacityMask*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty OpacityMaskProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OpacityProperty
  id: OpacityProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OpacityProperty
  nameWithType: UIElement.OpacityProperty
  fullName: System.Windows.UIElement.OpacityProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.Opacity*>propriedade de dependência.</xref:System.Windows.UIElement.Opacity*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty OpacityProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PersistId
  id: PersistId
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PersistId
  nameWithType: UIElement.PersistId
  fullName: System.Windows.UIElement.PersistId
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém um valor que identifica exclusivamente este elemento."
  remarks: "PersistId identificam de forma exclusiva cada elemento. Um elemento de mantém o mesmo PersistId sempre o mesmo [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] é carregada (incluindo representações binárias). Este identificador é utilizado para requisitos de carregamento, analisar e serialização internos. Não se destina a ser utilizado pelo código da aplicação.       Esta propriedade não tem qualquer relação com o <xref:System.Object.GetHashCode%2A>resultado para qualquer instância fornecido.</xref:System.Object.GetHashCode%2A>"
  syntax:
    content: public int PersistId { get; }
    return:
      type: System.Int32
      description: "O identificador exclusivo para este elemento."
  overload: System.Windows.UIElement.PersistId*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: UIElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.UIElement.PredictFocus(FocusNavigationDirection)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Quando substituí-lo de uma classe derivada, devolve o elemento que pretende receber o foco para uma direção de transversal de foco especificado, sem realmente mover o foco para esse elemento."
  remarks: "A implementação predefinida deste método desta classe estiver incompleta e devolve sempre `null`."
  syntax:
    content: public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Input.FocusNavigationDirection
      description: "A direção do transversal foco pedida."
    return:
      type: System.Windows.DependencyObject
      description: "O elemento que seria receberam foco se <xref:System.Windows.UIElement.MoveFocus*>realmente foram invocada.</xref:System.Windows.UIElement.MoveFocus*>"
  overload: System.Windows.UIElement.PredictFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragEnter
  id: PreviewDragEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragEnter
  nameWithType: UIElement.PreviewDragEnter
  fullName: System.Windows.UIElement.PreviewDragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada comunica um evento de arrastar subjacente com este elemento como destino de arrastar."
  remarks: "Este evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewDragEnter faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewDragEnter estão ligados ao subjacentes <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragEnter&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewDragEnterEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.DragEnter>.</xref:System.Windows.UIElement.DragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDragEnterEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewDragEnter%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragEnterEvent
  id: PreviewDragEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragEnterEvent
  nameWithType: UIElement.PreviewDragEnterEvent
  fullName: System.Windows.UIElement.PreviewDragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewDragEnter&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragLeave
  id: PreviewDragLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragLeave
  nameWithType: UIElement.PreviewDragLeave
  fullName: System.Windows.UIElement.PreviewDragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada comunica um evento de arrastar subjacente com este elemento como a origem de arrastar."
  remarks: "Este evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewDragLeave faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewDragLeave estão ligados ao subjacentes <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragLeave&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewDragLeaveEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.DragLeave>.</xref:System.Windows.UIElement.DragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDragLeaveEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewDragLeave%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragLeaveEvent
  id: PreviewDragLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragLeaveEvent
  nameWithType: UIElement.PreviewDragLeaveEvent
  fullName: System.Windows.UIElement.PreviewDragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewDragLeave&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragOver
  id: PreviewDragOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragOver
  nameWithType: UIElement.PreviewDragOver
  fullName: System.Windows.UIElement.PreviewDragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada comunica um evento de arrastar subjacente com este elemento como destino de largar potenciais."
  remarks: "Este evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewDragOver faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewDragOver estão ligados ao subjacentes <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragOver&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewDragOverEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.DragOver>.</xref:System.Windows.UIElement.DragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDragOverEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewDragOver%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragOverEvent
  id: PreviewDragOverEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragOverEvent
  nameWithType: UIElement.PreviewDragOverEvent
  fullName: System.Windows.UIElement.PreviewDragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewDragOver&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDrop
  id: PreviewDrop
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDrop
  nameWithType: UIElement.PreviewDrop
  fullName: System.Windows.UIElement.PreviewDrop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o sistema de entrada comunica um evento de largar subjacente com este elemento como destino de largar."
  remarks: "Este evento cria um alias para o <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewDrop faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewDrop estão ligados ao subjacentes <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDrop&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewDropEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.DragEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.Drop>.</xref:System.Windows.UIElement.Drop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDropEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewDrop%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDrop;
    return:
      type: System.Windows.DragEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDropEvent
  id: PreviewDropEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDropEvent
  nameWithType: UIElement.PreviewDropEvent
  fullName: System.Windows.UIElement.PreviewDropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewDrop&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGiveFeedback
  id: PreviewGiveFeedback
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGiveFeedback
  nameWithType: UIElement.PreviewGiveFeedback
  fullName: System.Windows.UIElement.PreviewGiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma operação de arrastar e largar é iniciada."
  remarks: "O evento PreviewGiveFeedback permite que a origem de um evento de arrastar para modificar o aspecto do ponteiro do rato para comentários do utilizador visual durante uma operação de arrastar e largar.       Este evento cria um alias para o <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewGiveFeedback faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewGiveFeedback estão ligados ao subjacentes <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewGiveFeedback&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.GiveFeedbackEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.GiveFeedback>.</xref:System.Windows.UIElement.GiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGiveFeedbackEvent
  id: PreviewGiveFeedbackEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGiveFeedbackEvent
  nameWithType: UIElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.UIElement.PreviewGiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewGiveFeedback&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGotKeyboardFocus
  id: PreviewGotKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocus
  nameWithType: UIElement.PreviewGotKeyboardFocus
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o teclado concentra-se neste elemento."
  remarks: "Uma vez que este evento utiliza o encaminhamento de túnel, o elemento que tem o foco poderá ser um elemento subordinado em vez do elemento em que o processador de eventos, na verdade, está ligado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de eventos para determinar o elemento real que tem foco.</xref:System.Windows.RoutedEventArgs.Source%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewGotKeyboardFocus faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewGotKeyboardFocus estão ligados ao subjacentes <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewGotKeyboardFocus&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.GotKeyboardFocus>.</xref:System.Windows.UIElement.GotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  id: PreviewGotKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocusEvent
  nameWithType: UIElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewGotKeyboardFocus&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyDown
  id: PreviewKeyDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyDown
  nameWithType: UIElement.PreviewKeyDown
  fullName: System.Windows.UIElement.PreviewKeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma tecla é premida enquanto o foco está neste elemento."
  remarks: "Processamento de chave interage com outras funcionalidades de plataforma como composição commanding e texto. O <xref:System.Windows.UIElement.KeyDown>eventos são um evento de entrada de texto de nível inferior que poderá não comportar-se conforme esperado em determinados controlos.</xref:System.Windows.UIElement.KeyDown> Isto acontece porque alguns controlos tem controlo compositing ou processamento de classe que fornece uma versão de nível mais elevada de texto de entrada do processamento e eventos relacionados.       Este evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewKeyDown faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewKeyDown estão ligados ao subjacentes <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewKeyDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewKeyDownEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.KeyEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.KeyDown>.</xref:System.Windows.UIElement.KeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.PreviewKeyDownEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewKeyDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyDownEvent
  id: PreviewKeyDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyDownEvent
  nameWithType: UIElement.PreviewKeyDownEvent
  fullName: System.Windows.UIElement.PreviewKeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewKeyDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyUp
  id: PreviewKeyUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyUp
  nameWithType: UIElement.PreviewKeyUp
  fullName: System.Windows.UIElement.PreviewKeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma tecla é premida enquanto o foco está neste elemento."
  remarks: "Processamento de chave interage com outras funcionalidades de plataforma como composição commanding e texto. O <xref:System.Windows.UIElement.KeyUp>eventos são um evento de entrada de texto de nível inferior que poderá não comportar-se conforme esperado em determinados controlos.</xref:System.Windows.UIElement.KeyUp> Isto acontece porque alguns controlos tem controlo compositing ou processamento de classe que fornece uma versão de nível mais elevada de texto de entrada do processamento e eventos relacionados. Para obter detalhes, consulte a documentação para os controlos individuais.       Este evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewKeyUp faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewKeyUp estão ligados ao subjacentes <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewKeyUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewKeyUpEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.KeyEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.KeyUp>.</xref:System.Windows.UIElement.KeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.PreviewKeyUpEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewKeyUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyUpEvent
  id: PreviewKeyUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyUpEvent
  nameWithType: UIElement.PreviewKeyUpEvent
  fullName: System.Windows.UIElement.PreviewKeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewKeyUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewLostKeyboardFocus
  id: PreviewLostKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocus
  nameWithType: UIElement.PreviewLostKeyboardFocus
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o teclado já não concentra-se neste elemento."
  remarks: "Uma vez que este evento utiliza o encaminhamento de túnel, o elemento que perdeu o foco poderá ser um elemento subordinado em vez do elemento em que o processador de eventos, na verdade, está ligado. Verifique o <xref:System.Windows.RoutedEventArgs.Source%2A>nos dados de eventos para determinar o elemento real que perdeu o foco.</xref:System.Windows.RoutedEventArgs.Source%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewLostKeyboardFocus faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewLostKeyboardFocus estão ligados ao subjacentes <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewLostKeyboardFocus&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.LostKeyboardFocus>.</xref:System.Windows.UIElement.LostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  id: PreviewLostKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocusEvent
  nameWithType: UIElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewLostKeyboardFocus&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseDown
  id: PreviewMouseDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseDown
  nameWithType: UIElement.PreviewMouseDown
  fullName: System.Windows.UIElement.PreviewMouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando qualquer botão do rato é premido enquanto o ponteiro é efetuada através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewMouseDown faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewMouseDown estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       O evento de PreviewMouseDown, muitas vezes, é gerado, juntamente com um <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>ou <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, que corresponde a uma prima de um dos dois botões rato padrão.</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> </xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>e <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>também são eventos encaminhados, mas são eventos encaminhados diretos e a adequado específicas do botão o evento é gerada quando o <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>eventos atingirem este elemento ao longo da rota do evento.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewMouseRightButtonDown></xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> Consulte observações ou <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> </xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>      <a name=&quot;routedEventInfo_PreviewMouseDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewMouseDownEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.MouseDown>.</xref:System.Windows.UIElement.MouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseDownEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseDownEvent
  id: PreviewMouseDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseDownEvent
  nameWithType: UIElement.PreviewMouseDownEvent
  fullName: System.Windows.UIElement.PreviewMouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewMouseDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDown
  id: PreviewMouseLeftButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDown
  nameWithType: UIElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão esquerdo do rato é premido enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Embora esta área parece estar a seguir uma rota de túnel através de uma árvore de elemento, na realidade é um evento encaminhado direto, que é gerado e reraised ao longo da árvore de elemento por cada <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Este evento é um dos vários eventos relacionados que reportam as especificações botão do rato um subjacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>evento, o que é um evento anexado processada por cada elemento ao longo de uma rota de evento.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       Os dados do evento deste evento expõe os dados do evento de subjacentes <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>eventos.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Se esse evento está marcado como processada ao longo da rota do evento, os eventos específicos do botão do rato ainda são gerados; No entanto, os processadores de eventos de específicos do botão do rato tem de ser adicionados ao chamar explicitamente <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para processar eventos que já estão marcados como processada, para que seja os serviços de escuta para o evento.</xref:System.Windows.UIElement.AddHandler%2A> Se marcar PreviewMouseLeftButtonDown processado, são essencialmente marcar <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>processado para as escutas de todas as outras ao longo da rota e em todos os eventos relacionados.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Isto inclui possivelmente eventos de classe-processador gerado, tais como <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>       Considerar concecionais, este evento (e outros eventos de botão do rato no <xref:System.Windows.UIElement>) para ser um rato &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> O evento adiciona a conveniência de não ser necessário verificar os Estados de botão do rato (esquerda direito para cima / para baixo) dos eventos de rato original dos dados de eventos. Para cenários mais avançados, tais como a verificação de Estados de botões não padrão, poderá ter de utilizar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] da <xref:System.Windows.Input.Mouse>classe em vez dos existentes no <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  id: PreviewMouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: UIElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUp
  id: PreviewMouseLeftButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUp
  nameWithType: UIElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão esquerdo do rato é libertado enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Embora esta área parece estar a seguir uma rota de túnel através de uma árvore de elemento, na realidade é um evento encaminhado direto, que é gerado e reraised ao longo da árvore de elemento por cada <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Este evento é um dos vários eventos relacionados que reportam as especificações botão do rato um subjacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>evento, o que é um evento anexado processada por cada elemento ao longo de uma rota de evento.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Os dados do evento deste evento expõe os dados do evento de subjacentes <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>eventos.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Se esse evento está marcado como processada ao longo da rota do evento, os eventos específicos do botão do rato ainda são gerados; No entanto, os processadores de eventos de específicos do botão do rato tem de ser adicionados ao chamar explicitamente <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para processar eventos que já estão marcados como processada, para que seja os serviços de escuta para o evento.</xref:System.Windows.UIElement.AddHandler%2A> Se marcar PreviewMouseLeftButtonUp processado, são essencialmente marcar <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>processado para as escutas de todas as outras ao longo da rota e em todos os eventos relacionados.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Considerar concecionais, este evento (e outros eventos de botão do rato no <xref:System.Windows.UIElement>) para ser um rato &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> O evento adiciona a conveniência de não ser necessário verificar os Estados de botão do rato (esquerda direito para cima / para baixo) dos eventos de rato original dos dados de eventos. Para cenários mais avançados, tais como a verificação de Estados de botões não padrão, poderá ter de utilizar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] da <xref:System.Windows.Input.Mouse>classe em vez dos existentes no <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  id: PreviewMouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: UIElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseMove
  id: PreviewMouseMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseMove
  nameWithType: UIElement.PreviewMouseMove
  fullName: System.Windows.UIElement.PreviewMouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o ponteiro do rato se move enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Este evento ocorre ambos quando o ponteiro do rato entra primeiro para os limites de elemento, e também quando o ponteiro do rato se move enquanto ainda restantes nos limites de elemento.       Este evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewMouseMove faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewMouseMove estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewMouseMove&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewMouseMoveEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.MouseEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.MouseMove>.</xref:System.Windows.UIElement.MouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.PreviewMouseMoveEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewMouseMove%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler PreviewMouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseMoveEvent
  id: PreviewMouseMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseMoveEvent
  nameWithType: UIElement.PreviewMouseMoveEvent
  fullName: System.Windows.UIElement.PreviewMouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewMouseMove&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonDown
  id: PreviewMouseRightButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDown
  nameWithType: UIElement.PreviewMouseRightButtonDown
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão direito do rato é premido enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Embora esta área parece estar a seguir uma rota de túnel através de uma árvore de elemento, na realidade é um evento encaminhado direto, que é gerado e reraised ao longo da árvore de elemento por cada <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Este evento é um dos vários eventos relacionados que reportam as especificações botão do rato um subjacente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>evento, o que é um evento anexado processada por cada elemento ao longo de uma rota de evento.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       Os dados do evento deste evento expõe os dados do evento de subjacentes <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>eventos.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Se esse evento está marcado como processada ao longo da rota do evento, os eventos específicos do botão do rato ainda são gerados; No entanto, os processadores de eventos de específicos do botão do rato tem de ser adicionados ao chamar explicitamente <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para processar eventos que já estão marcados como processada, para que seja os serviços de escuta para o evento.</xref:System.Windows.UIElement.AddHandler%2A> Se marcar PreviewMouseRightButtonDown processado, são essencialmente marcar <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>processado para as escutas de todas as outras ao longo da rota e em todos os eventos relacionados.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Isto inclui possivelmente eventos de classe-processador gerado, tais como <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>       Considerar concecionais, este evento (e outros eventos de botão do rato no <xref:System.Windows.UIElement>) para ser um rato &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> O evento adiciona a conveniência de não ser necessário verificar os Estados de botão do rato (esquerda direito para cima / para baixo) dos eventos de rato original dos dados de eventos. Para cenários mais avançados, tais como a verificação de Estados de botões não padrão, poderá ter de utilizar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] da <xref:System.Windows.Input.Mouse>classe em vez dos existentes no <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseRightButtonDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  id: PreviewMouseRightButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDownEvent
  nameWithType: UIElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonUp
  id: PreviewMouseRightButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUp
  nameWithType: UIElement.PreviewMouseRightButtonUp
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão direito do rato é libertado enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Embora esta área parece estar a seguir uma rota de túnel através de uma árvore de elemento, na realidade é um evento encaminhado direto, que é gerado e reraised ao longo da árvore de elemento por cada <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Este evento é um dos vários eventos relacionados que reportam as especificações botão do rato um subjacente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>evento, o que é um evento anexado processada por cada elemento ao longo de uma rota de evento.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Os dados do evento deste evento expõe os dados do evento de subjacentes <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>eventos.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Se esse evento está marcado como processada ao longo da rota do evento, os eventos específicos do botão do rato ainda são gerados; No entanto, os processadores de eventos de específicos do botão do rato tem de ser adicionados ao chamar explicitamente <xref:System.Windows.UIElement.AddHandler%2A>, com a opção para processar eventos que já estão marcados como processada, para que seja os serviços de escuta para o evento.</xref:System.Windows.UIElement.AddHandler%2A> Se marcar PreviewMouseRightButtonUp processado, são essencialmente marcar <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>processado para as escutas de todas as outras ao longo da rota e em todos os eventos relacionados.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Considerar concecionais, este evento (e outros eventos de botão do rato no <xref:System.Windows.UIElement>) para ser um rato &quot;serviço&quot; (com a definição de serviço fornecida pelo <xref:System.Windows.Input.Mouse>classe).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> O evento adiciona a conveniência de não ser necessário verificar os Estados de botão do rato (esquerda direito para cima / para baixo) dos eventos de rato original dos dados de eventos. Para cenários mais avançados, tais como a verificação de Estados de botões não padrão, poderá ter de utilizar o [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] da <xref:System.Windows.Input.Mouse>classe em vez dos existentes no <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseRightButtonUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  id: PreviewMouseRightButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUpEvent
  nameWithType: UIElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseUp
  id: PreviewMouseUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseUp
  nameWithType: UIElement.PreviewMouseUp
  fullName: System.Windows.UIElement.PreviewMouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando qualquer botão do rato é libertado enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewMouseUp faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewMouseUp estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       O evento de PreviewMouseUp, muitas vezes, é gerado, juntamente com um <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>ou <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, que corresponde a uma prima de um dos dois botões rato padrão.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> </xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>e <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>também são eventos encaminhados, mas são eventos encaminhados diretos e a adequado específicas do botão o evento é gerada quando o <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>eventos atingirem este elemento ao longo da rota do evento.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewMouseRightButtonUp></xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> Consulte observações ou <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> </xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>      <a name=&quot;routedEventInfo_PreviewMouseUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewMouseUpEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.MouseButtonEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.MouseUp>.</xref:System.Windows.UIElement.MouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseUpEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseUpEvent
  id: PreviewMouseUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseUpEvent
  nameWithType: UIElement.PreviewMouseUpEvent
  fullName: System.Windows.UIElement.PreviewMouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewMouseUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseWheel
  id: PreviewMouseWheel
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseWheel
  nameWithType: UIElement.PreviewMouseWheel
  fullName: System.Windows.UIElement.PreviewMouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o utilizador rodar a roda do rato enquanto o ponteiro do rato está sobre este elemento."
  remarks: "Captura de foco ou rato têm precedência sobre onde o ponteiro do rato é; Por conseguinte, se receber este evento de um elemento focado ou capturado, o ponteiro do rato, na verdade, poderá ser através de outro elemento.       Este evento cria um alias para o <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>anexados a eventos para esta classe, para que <xref:System.Windows.UIElement.PreviewMouseMove>faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement.PreviewMouseMove> </xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> Processadores de eventos que estão anexados ao <xref:System.Windows.UIElement.PreviewMouseMove>eventos estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewMouseMove>      <a name=&quot;routedEventInfo_PreviewMouseWheel&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewMouseWheelEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.MouseWheelEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.MouseWheel>.</xref:System.Windows.UIElement.MouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.UIElement.PreviewMouseWheelEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseWheelEvent
  id: PreviewMouseWheelEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseWheelEvent
  nameWithType: UIElement.PreviewMouseWheelEvent
  fullName: System.Windows.UIElement.PreviewMouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewMouseWheel&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewQueryContinueDrag
  id: PreviewQueryContinueDrag
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewQueryContinueDrag
  nameWithType: UIElement.PreviewQueryContinueDrag
  fullName: System.Windows.UIElement.PreviewQueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando existe uma alteração no estado de botão de teclado ou rato durante uma operação de arrastar e largar."
  remarks: "O evento PreviewQueryContinueDrag permite que a origem de arrastar declarar se a operação de arrastar e largar deverá ser cancelada.       Este evento cria um alias para o <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewQueryContinueDrag faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewQueryContinueDrag estão ligados ao subjacentes <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewQueryContinueDrag&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.QueryContinueDragEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.QueryContinueDrag>.</xref:System.Windows.UIElement.QueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewQueryContinueDragEvent
  id: PreviewQueryContinueDragEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewQueryContinueDragEvent
  nameWithType: UIElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.UIElement.PreviewQueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewQueryContinueDrag&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonDown
  id: PreviewStylusButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonDown
  nameWithType: UIElement.PreviewStylusButtonDown
  fullName: System.Windows.UIElement.PreviewStylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão de caneta é premido enquanto o ponteiro é efetuada através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewStylusButtonDown faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewStylusButtonDown estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [Touch suporte de entrada no Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) e [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusButtonDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusButtonEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.StylusButtonDown>.</xref:System.Windows.UIElement.StylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonDownEvent
  id: PreviewStylusButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonDownEvent
  nameWithType: UIElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewStylusButtonDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonUp
  id: PreviewStylusButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonUp
  nameWithType: UIElement.PreviewStylusButtonUp
  fullName: System.Windows.UIElement.PreviewStylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão de caneta é libertado enquanto o ponteiro é efetuada através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewStylusButtonUp faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewStylusButtonUp estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusButtonUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusButtonEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.StylusButtonUp>.</xref:System.Windows.UIElement.StylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonUpEvent
  id: PreviewStylusButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonUpEvent
  nameWithType: UIElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewStylusButtonUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusDown
  id: PreviewStylusDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusDown
  nameWithType: UIElement.PreviewStylusDown
  fullName: System.Windows.UIElement.PreviewStylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta tocar o digitizer enquanto este estiver através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewStylusDown faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewStylusDown estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewStylusDownEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusDownEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.StylusDown>.</xref:System.Windows.UIElement.StylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.UIElement.PreviewStylusDownEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewStylusDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusDownEvent
  id: PreviewStylusDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusDownEvent
  nameWithType: UIElement.PreviewStylusDownEvent
  fullName: System.Windows.UIElement.PreviewStylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewStylusDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInAirMove
  id: PreviewStylusInAirMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInAirMove
  nameWithType: UIElement.PreviewStylusInAirMove
  fullName: System.Windows.UIElement.PreviewStylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta move através de um elemento sem afetar, na verdade, o digitizer."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewStylusInAirMove faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewStylusInAirMove estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusInAirMove&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.StylusInAirMove>.</xref:System.Windows.UIElement.StylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInAirMoveEvent
  id: PreviewStylusInAirMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInAirMoveEvent
  nameWithType: UIElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewStylusInAirMove&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInRange
  id: PreviewStylusInRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInRange
  nameWithType: UIElement.PreviewStylusInRange
  fullName: System.Windows.UIElement.PreviewStylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta fechar para digitizer para ser detetada, enquanto estiver sobre este elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewStylusInRange faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewStylusInRange estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusInRange&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.StylusInRange>.</xref:System.Windows.UIElement.StylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusInRangeEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInRangeEvent
  id: PreviewStylusInRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInRangeEvent
  nameWithType: UIElement.PreviewStylusInRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewStylusInRange&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusMove
  id: PreviewStylusMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusMove
  nameWithType: UIElement.PreviewStylusMove
  fullName: System.Windows.UIElement.PreviewStylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta move enquanto estiver sobre o elemento. A caneta tem de mover ao que está a ser detetada pelo digitizer para aumentar este evento, caso contrário, <xref href=&quot;System.Windows.UIElement.PreviewStylusInAirMove&quot;> </xref> é gerado em vez disso."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewStylusMove faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewStylusMove estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusMove&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewStylusMoveEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.StylusMove>.</xref:System.Windows.UIElement.StylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusMoveEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewStylusMove%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusMoveEvent
  id: PreviewStylusMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusMoveEvent
  nameWithType: UIElement.PreviewStylusMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewStylusMove&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusOutOfRange
  id: PreviewStylusOutOfRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusOutOfRange
  nameWithType: UIElement.PreviewStylusOutOfRange
  fullName: System.Windows.UIElement.PreviewStylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta está muito distante do digitizer para ser detetada."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewStylusOutOfRange faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewStylusOutOfRange estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusOutOfRange&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.StylusOutOfRange>.</xref:System.Windows.UIElement.StylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  id: PreviewStylusOutOfRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusOutOfRangeEvent
  nameWithType: UIElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewStylusOutOfRange&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusSystemGesture
  id: PreviewStylusSystemGesture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusSystemGesture
  nameWithType: UIElement.PreviewStylusSystemGesture
  fullName: System.Windows.UIElement.PreviewStylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um utilizador executa uma das várias gestos de caneta."
  remarks: "Para obter informações sobre gestos caneta, consulte <xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       Este evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewStylusSystemGesture faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewStylusSystemGesture estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusSystemGesture&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusSystemGestureEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.StylusSystemGesture>.</xref:System.Windows.UIElement.StylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusSystemGestureEvent
  id: PreviewStylusSystemGestureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusSystemGestureEvent
  nameWithType: UIElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.UIElement.PreviewStylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewStylusSystemGesture&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusUp
  id: PreviewStylusUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusUp
  nameWithType: UIElement.PreviewStylusUp
  fullName: System.Windows.UIElement.PreviewStylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o utilizador gera caneta desativar o digitizer enquanto a caneta é efetuada através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>anexados a eventos para esta classe, para que <xref:System.Windows.UIElement.PreviewStylusDown>faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement.PreviewStylusDown> </xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> Processadores de eventos que estão anexados ao <xref:System.Windows.UIElement.PreviewStylusDown>eventos estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewStylusDown>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewStylusUpEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.StylusUp>.</xref:System.Windows.UIElement.StylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusUpEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewStylusUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusUpEvent
  id: PreviewStylusUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusUpEvent
  nameWithType: UIElement.PreviewStylusUpEvent
  fullName: System.Windows.UIElement.PreviewStylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewStylusUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTextInput
  id: PreviewTextInput
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTextInput
  nameWithType: UIElement.PreviewTextInput
  fullName: System.Windows.UIElement.PreviewTextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento obtém o texto de uma forma de dispositivo independente."
  remarks: "O evento PreviewTextInput permite que um componente ou aplicação para escutar para introdução de texto de uma forma de dispositivo independente. O teclado é o principal meio PreviewTextInput; mas reconhecimento de voz, escrita e outros dispositivos de entrada, também podem gerar PreviewTextInput.       Devido a combinações de teclas — no teclados predefinido ou através de editores de método de entrada — vários eventos chaves podem gerar um evento de entrada de texto.       Este evento cria um alias para o <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>anexados a eventos para esta classe, para que PreviewTextInput faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> Processadores de eventos que estão anexados ao evento PreviewTextInput estão ligados ao subjacentes <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewTextInput&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewTextInputEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.Windows.Input.TextCompositionEventHandler>|      -O evento bubbling correspondente é <xref:System.Windows.UIElement.TextInput>.</xref:System.Windows.UIElement.TextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.UIElement.PreviewTextInputEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewTextInput%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTextInputEvent
  id: PreviewTextInputEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTextInputEvent
  nameWithType: UIElement.PreviewTextInputEvent
  fullName: System.Windows.UIElement.PreviewTextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewTextInput&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchDown
  id: PreviewTouchDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchDown
  nameWithType: UIElement.PreviewTouchDown
  fullName: System.Windows.UIElement.PreviewTouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma mas tocar ecrã enquanto a mas é efetuada através deste elemento."
  remarks: "Por predefinição, o PreviewTouchDown e <xref:System.Windows.UIElement.TouchDown>eventos voltará a ocorrer após uma mas tocar ecrã e move.</xref:System.Windows.UIElement.TouchDown> Pressionar uma mas no ecrã e que está a retê-la sem movê-los faz com que prima sem soltar comportamento de <xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus> O comportamento prima e mantenha premido é equivalente a um contexto de rato.       Para fazer com que o PreviewTouchDown e <xref:System.Windows.UIElement.TouchDown>eventos ocorra assim que um mas tocar ecrã, defina o <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>ligado propriedade `false` para este elemento.</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.UIElement.TouchDown>      <a name=&quot;routedEventInfo_PreviewTouchDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewTouchDownEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento bubbling correspondente é <xref:System.Windows.UIElement.TouchDown>.</xref:System.Windows.UIElement.TouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.PreviewTouchDownEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewTouchDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchDownEvent
  id: PreviewTouchDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchDownEvent
  nameWithType: UIElement.PreviewTouchDownEvent
  fullName: System.Windows.UIElement.PreviewTouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewTouchDown&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchMove
  id: PreviewTouchMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchMove
  nameWithType: UIElement.PreviewTouchMove
  fullName: System.Windows.UIElement.PreviewTouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma mas move no ecrã enquanto a mas é efetuada através deste elemento."
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchMove&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewTouchMoveEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento bubbling correspondente é <xref:System.Windows.UIElement.TouchMove>.</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.PreviewTouchMoveEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewTouchMove%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchMoveEvent
  id: PreviewTouchMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchMoveEvent
  nameWithType: UIElement.PreviewTouchMoveEvent
  fullName: System.Windows.UIElement.PreviewTouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewTouchMove&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchUp
  id: PreviewTouchUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchUp
  nameWithType: UIElement.PreviewTouchUp
  fullName: System.Windows.UIElement.PreviewTouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma mas é gerada retire ecrã enquanto a mas é efetuada através deste elemento."
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.PreviewTouchUpEvent>|   | Estratégia de encaminhamento | Túnel |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento bubbling correspondente é <xref:System.Windows.UIElement.TouchUp>.</xref:System.Windows.UIElement.TouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.PreviewTouchUpEvent>      -Ignorar <xref:System.Windows.UIElement.OnPreviewTouchUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnPreviewTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchUpEvent
  id: PreviewTouchUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchUpEvent
  nameWithType: UIElement.PreviewTouchUpEvent
  fullName: System.Windows.UIElement.PreviewTouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.PreviewTouchUp&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryContinueDrag
  id: QueryContinueDrag
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryContinueDrag
  nameWithType: UIElement.QueryContinueDrag
  fullName: System.Windows.UIElement.QueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando existe uma alteração no estado de botão de teclado ou rato durante uma operação de arrastar e largar."
  remarks: "O evento QueryContinueDrag permite que a origem de arrastar determinar se a operação de arrastar e largar deverá ser cancelada.       Este evento cria um alias para o <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>anexados a eventos para esta classe, para que QueryContinueDrag faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> Processadores de eventos que estão anexados ao evento QueryContinueDrag estão ligados ao subjacentes <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>      <a name=&quot;routedEventInfo_QueryContinueDrag&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.QueryContinueDragEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.QueryContinueDragEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.</xref:System.Windows.UIElement.PreviewQueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.UIElement.QueryContinueDragEvent>      -Ignorar <xref:System.Windows.UIElement.OnQueryContinueDrag%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryContinueDragEvent
  id: QueryContinueDragEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryContinueDragEvent
  nameWithType: UIElement.QueryContinueDragEvent
  fullName: System.Windows.UIElement.QueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.QueryContinueDrag&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryCursor
  id: QueryCursor
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryCursor
  nameWithType: UIElement.QueryCursor
  fullName: System.Windows.UIElement.QueryCursor
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o cursor é solicitado a apresentar. Este evento é desencadeado sempre que o ponteiro do rato é movido para uma nova localização, o que significa que poderá ser necessário alterar o objeto de cursor com base na respetiva posição novo num elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>anexados a eventos para esta classe, para que QueryCursor faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> Processadores de eventos que estão anexados ao evento QueryCursor estão ligados ao subjacentes <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>       O cursor a ser referenciado por este nome de evento não é necessariamente o cursor de texto (por vezes conhecido como o ponto de inserção). Em vez disso, o cursor neste contexto é o objeto que declara a visualização de gráfica onscreen relacionados com vários dispositivos relacionados com a entrada possíveis ou os conceitos do [!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)] de programação. Esse objeto é representado pelo <xref:System.Windows.Input.Cursor>classe no [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</xref:System.Windows.Input.Cursor> O [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] entrado sistema permite-lhe alterar deste cursor quando representa a posição onscreen do ponteiro do rato. Pode utilizar os valores predefinidos de <xref:System.Windows.Input.Cursors>enumeração, ou podem declarar um cursor personalizado como um ficheiro de imagem.</xref:System.Windows.Input.Cursors>       Está à escuta para o evento QueryCursor não é uma técnica eficiente para a gestão de cursor. Em vez disso, cada elemento deve definir o seus próprios comportamento de cursor com <xref:System.Windows.FrameworkContentElement.Cursor%2A>e <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</xref:System.Windows.FrameworkContentElement.ForceCursor%2A> </xref:System.Windows.FrameworkContentElement.Cursor%2A> Só deverá confiar QueryCursor se não estiver a utilizar os elementos de base do WPF ao nível do framework ou no extraordinary circunstâncias onde definir o comportamento de cursor numa base por elemento não satisfazer as suas necessidades. Para mais informações sobre como implementar o comportamento de cursor em resposta a QueryCursor, consulte <xref:System.Windows.Input.QueryCursorEventHandler>.</xref:System.Windows.Input.QueryCursorEventHandler>      <a name=&quot;routedEventInfo_QueryCursor&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.QueryCursorEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.QueryCursorEventHandler>|      -Não há nenhum evento de túnel correspondente definido.</xref:System.Windows.Input.QueryCursorEventHandler> </xref:System.Windows.UIElement.QueryCursorEvent>      -Ignorar <xref:System.Windows.UIElement.OnQueryCursor%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnQueryCursor%2A>"
  syntax:
    content: public event System.Windows.Input.QueryCursorEventHandler QueryCursor;
    return:
      type: System.Windows.Input.QueryCursorEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryCursorEvent
  id: QueryCursorEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryCursorEvent
  nameWithType: UIElement.QueryCursorEvent
  fullName: System.Windows.UIElement.QueryCursorEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.QueryCursor&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  id: RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: UIElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.UIElement.RaiseEvent(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Gera um evento encaminhado específico. O <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> seja gerado é identificado no <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> instância fornecida (como o <xref:System.Windows.RoutedEventArgs.RoutedEvent*>propriedade dos dados dos eventos).</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  remarks: "O `e` parâmetro é escrito como o tipo base comum para todos os dados de evento encaminhado; no entanto, os dados do evento devem ser especificados como o tipo de dados de evento mais específico que está disponível para o evento a ser gerado, porque <xref:System.Windows.RoutedEventArgs>classes derivadas contêm as propriedades de real dados específicos que se destinam-se para o evento específico quando é gerado.</xref:System.Windows.RoutedEventArgs>       <xref:System.Windows.RoutedEventArgs>Não é apenas as propriedades de estado para o evento; Também identifica o evento encaminhado para elevar.</xref:System.Windows.RoutedEventArgs> Este padrão que gera o evento e os dados do evento encaminhado ambos diferem das [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] classes de eventos e os dados, que normalmente apenas contêm propriedades que estão relacionados com o evento."
  example:
  - "The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.  \n  \n [!code-cs[RoutedEventCustom#RaiseEvent](~/add/codesnippet/csharp/RoutedEventCustom/SDKSampleLibrary/class1.cs#raiseevent)]\n [!code-vb[RoutedEventCustom#RaiseEvent](~/add/codesnippet/visualbasic/SDKSampleLibrary/Class1.vb#raiseevent)]"
  syntax:
    content: public void RaiseEvent (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> que contém os dados de eventos e também identifica o evento para elevar."
  overload: System.Windows.UIElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseAllTouchCaptures
  id: ReleaseAllTouchCaptures
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseAllTouchCaptures()
  nameWithType: UIElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.UIElement.ReleaseAllTouchCaptures()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Versões todos os dispositivos táteis capturada este elemento."
  syntax:
    content: public void ReleaseAllTouchCaptures ();
    parameters: []
  overload: System.Windows.UIElement.ReleaseAllTouchCaptures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseMouseCapture
  id: ReleaseMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseMouseCapture()
  nameWithType: UIElement.ReleaseMouseCapture()
  fullName: System.Windows.UIElement.ReleaseMouseCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Versões a captura do rato, se este elemento contido a captura."
  remarks: "Se este elemento não manteve a captura, chamar este método não tem qualquer efeito. Considere a verificar o valor de <xref:System.Windows.UIElement.IsMouseCaptured%2A>antes de chamar este método.</xref:System.Windows.UIElement.IsMouseCaptured%2A>"
  example:
  - "The following example is the parallel to the example given for <xref:System.Windows.UIElement.CaptureMouse%2A>: it handles mouse button up to release mouse capture and re-enable moving the mouse.  \n  \n [!code-cs[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/csharp/CubeAnimation_XBAP/Trackball.cs#uielementmousecapture)]\n [!code-vb[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/visualbasic/cubeanimation_xbap/trackball.vb#uielementmousecapture)]"
  syntax:
    content: public void ReleaseMouseCapture ();
    parameters: []
  overload: System.Windows.UIElement.ReleaseMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseStylusCapture
  id: ReleaseStylusCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseStylusCapture()
  nameWithType: UIElement.ReleaseStylusCapture()
  fullName: System.Windows.UIElement.ReleaseStylusCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Versões a captura de dispositivo de caneta, se este elemento contido a captura."
  remarks: "Se este elemento não manteve a captura, chamar este método não tem qualquer efeito. Considere a verificar o valor de <xref:System.Windows.UIElement.IsStylusCaptured%2A>antes de chamar este método.</xref:System.Windows.UIElement.IsStylusCaptured%2A>"
  syntax:
    content: public void ReleaseStylusCapture ();
    parameters: []
  overload: System.Windows.UIElement.ReleaseStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  id: ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: UIElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.UIElement.ReleaseTouchCapture(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Tentativas para libertar o dispositivo de toque especificado deste elemento."
  syntax:
    content: public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "O dispositivo para a versão."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o dispositivo de toque é libertado; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.ReleaseTouchCapture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.RemoveHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Remove o processador de eventos encaminhados especificada este elemento."
  remarks: "O cenário mais comum para utilizar esta [!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)] é quando implementa o [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] evento de &quot;wrapper&quot; que está associado um evento encaminhado personalizado, especificamente quando implementar a lógica de &quot;Remover&quot; para processadores no [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] nível. O exemplo que se segue esta secção ilustra este cenário de observações.       Chamar este método não tem qualquer efeito se ocorreram não processadores registados com os critérios que satisfaça os parâmetros de entrada para a chamada de método.       Se mais do que um processador está ligado que coincidem com os critérios, apenas o processador do primeiro no caso de arquivo do processador é removido. Este comportamento é consistente com [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] comportamento o `-=` operador.       Nem `routedEvent` nem `handler` poderá `null`. A tentar fornecer o valor como `null` irá gerar uma exceção.       Este método ignora a `handledEventsToo` informações de parâmetro, que são fornecidas se o processador foi inicialmente adicionada com o <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>assinatura que permite o processamento de eventos processados já.</xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> O tipo do processador é removido."
  example:
  - "The following example uses RemoveHandler as part of an event wrapper definition.  \n  \n [!code-cs[RoutedEventCustom#AddRemoveHandler](~/add/codesnippet/csharp/RoutedEventCustom/SDKSampleLibrary/class1.cs#addremovehandler)]\n [!code-vb[RoutedEventCustom#AddRemoveHandler](~/add/codesnippet/visualbasic/SDKSampleLibrary/Class1.vb#addremovehandler)]"
  syntax:
    content: public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "O identificador do evento encaminhado para o qual o processador está ligado."
    - id: handler
      type: System.Delegate
      description: "A implementação de processador específico para remover a recolha de processador de eventos neste elemento."
  overload: System.Windows.UIElement.RemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderSize
  id: RenderSize
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderSize
  nameWithType: UIElement.RenderSize
  fullName: System.Windows.UIElement.RenderSize
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém (ou conjuntos, mas Consulte observações) o final compor o tamanho deste elemento."
  remarks: "> [!IMPORTANT]> Não tente definir esta propriedade em [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] ou no código, se utilizar o sistema de esquema ao nível do framework WPF. Praticamente todos os cenários típicos de aplicações irão utilizar este sistema de esquema. O sistema de esquema não será respeitem tamanhos definido na propriedade RenderSize diretamente. A propriedade RenderSize está declarada gravável só para ativar determinada WPF principal ao nível do Data Center bridging casos deliberadamente contornar os protocolos de esquema típicas, tais como o suporte para a <xref:System.Windows.Documents.Adorner>classe.</xref:System.Windows.Documents.Adorner>       Esta propriedade pode ser utilizada para verificar que o tamanho de composição aplicável dentro do sistema de esquema substitui como <xref:System.Windows.UIElement.OnRender%2A>ou <xref:System.Windows.UIElement.GetLayoutClip%2A>.</xref:System.Windows.UIElement.GetLayoutClip%2A> </xref:System.Windows.UIElement.OnRender%2A>       Um cenário mais comum está a processar o <xref:System.Windows.FrameworkElement.SizeChanged>evento com o processador de classe de substituição ou a <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>eventos.</xref:System.Windows.UIElement.OnRenderSizeChanged%2A> </xref:System.Windows.FrameworkElement.SizeChanged>      <a name=&quot;xamlTextUsage_RenderSize&quot;></a># # Utilização de texto XAML"
  example:
  - "The following example shows how a custom adorner uses the RenderSize value in order to create and size the rectangle graphic that defines the adorner, as part of its <xref:System.Windows.UIElement.OnRender%2A>implementation.  \n  \n [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/add/codesnippet/visualbasic/adornersmisccode/window1.xaml.vb#uielementdesiredsize)]\n [!code-cs[AdornersMiscCode#UIElementDesiredSize](~/add/codesnippet/csharp/AdornersMiscCode/Window1.xaml.cs#uielementdesiredsize)]"
  syntax:
    content: public System.Windows.Size RenderSize { get; set; }
    return:
      type: System.Windows.Size
      description: "O tamanho composto para este elemento."
  overload: System.Windows.UIElement.RenderSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransform
  id: RenderTransform
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
  fullName: System.Windows.UIElement.RenderTransform
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define a informação de transformação que afeta a posição de composição deste elemento.  Esta é uma propriedade de dependência."
  remarks: "Uma transformação de composição não voltar a gerar o tamanho do esquema ou informações de tamanho de composição. Composição transformações destinam-se normalmente para animating ou aplicar um efeito temporário para um elemento. Por exemplo, o elemento poderá zoom quando focado moused através de ou poderá interferências carga para desenhar os olhos para essa parte do [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)].      <a name=&quot;dependencyPropertyInfo_RenderTransform&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.RenderTransformProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.RenderTransformProperty>"
  syntax:
    content: public System.Windows.Media.Transform RenderTransform { get; set; }
    return:
      type: System.Windows.Media.Transform
      description: "Descreve as especificações de transformação de composição pretendido. A predefinição é &lt;xref:System.Windows.Media.Transform.Identity%2A?displayProperty=fullName&gt;."
  overload: System.Windows.UIElement.RenderTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransformOrigin
  id: RenderTransformOrigin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
  fullName: System.Windows.UIElement.RenderTransformOrigin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define o ponto central qualquer transformação possível compor declarada pelo <xref:System.Windows.UIElement.RenderTransform*>relativos para os limites do elemento.</xref:System.Windows.UIElement.RenderTransform*>  Esta é uma propriedade de dependência."
  remarks: "RenderTransformOrigin tem uma utilização de um pouco não padrão de <xref:System.Windows.Point>estrutura valor, em que o <xref:System.Windows.Point>não representa uma localização absoluta no sistema de coordenadas.</xref:System.Windows.Point> </xref:System.Windows.Point> Em vez disso, os valores entre 0 e 1 são interpretados como um fator para o intervalo de elemento actual em cada x, o eixo y. Por exemplo, (0.5,0.5) fará com que a transformação de composição para centrada no elemento, ou (1,1) seria colocar a transformação de composição na parte inferior direita canto do elemento. <xref:System.Double.NaN>Não é um valor foi aceite.</xref:System.Double.NaN>       Os valores para além de 0 e 1 também são aceites e irão resultar no mais transformação unconventional efeitos. Por exemplo, se definir RenderTransformOrigin (5,5) e, em seguida, aplicar um <xref:System.Windows.Media.RotateTransform>, o ponto de rotação será bem fora dos limites do próprio elemento.</xref:System.Windows.Media.RotateTransform> A transformação será rotação o elemento em torno de um círculo grande que origina para além da parte inferior direita. A origem pode ser algures no interior do respetivo elemento principal e pode estar a ser possivelmente fora do intervalo ou vista. Os valores de ponto negativo são semelhantes, estas serão enviadas para além da parte superior esquerda dos limites.       Composição transformações não afetam o esquema e, normalmente, são utilizadas para animar ou aplicar um efeito temporário para um elemento.      <a name=&quot;xamlAttributeUsage_RenderTransformOrigin&quot;></a># # Utilização do atributo de XAML ```   <object RenderTransformOrigin=&quot;xOrigin, yOrigin&quot;/>   ``` <a name=&quot;xamlPropertyElementUsage_RenderTransformOrigin&quot;> </a> # # utilização de elemento de propriedade XAML ```   <object>     <object.RenderTransformOrigin>       <Point X=&quot; xOrigin &quot; Y=&quot; yOrigin &quot;/>     </object.RenderTransformOrigin>   </object>   ``` <a name=&quot;xamlValues_RenderTransformOrigin&quot;> </a> # # XAML valores *xOrigin* o fator de origem horizontal.             Isto é, normalmente, fornecido como um valor entre 0 e 1. Consulte observações.       *yOrigin* o fator de origem vertical. Isto é, normalmente, fornecido como um valor entre 0 e 1. Consulte observações.      <a name=&quot;dependencyPropertyInfo_RenderTransformOrigin&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.RenderTransformOriginProperty>|   | Definir propriedades de metadados `true`| NONE |</xref:System.Windows.UIElement.RenderTransformOriginProperty>"
  example:
  - "The following example builds up elements in code, applies a RenderTransformOrigin, and then applies a  <xref:System.Windows.UIElement.RenderTransform%2A>.  \n  \n [!code-cs[transformanimations_snip#UIElementRenderTransformOrigin](~/add/codesnippet/csharp/transformanimations_snip.project/RotateAboutCenterExample.cs#uielementrendertransformorigin)]\n [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/add/codesnippet/visualbasic/project/rotateaboutcenterexample.vb#uielementrendertransformorigin)]"
  syntax:
    content: public System.Windows.Point RenderTransformOrigin { get; set; }
    return:
      type: System.Windows.Point
      description: "O valor que declara a transformação de composição. O valor predefinido é um <xref href=&quot;System.Windows.Point&quot;> </xref> com coordenadas (0,0)."
  overload: System.Windows.UIElement.RenderTransformOrigin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransformOriginProperty
  id: RenderTransformOriginProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransformOriginProperty
  nameWithType: UIElement.RenderTransformOriginProperty
  fullName: System.Windows.UIElement.RenderTransformOriginProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.RenderTransformOrigin*>propriedade de dependência.</xref:System.Windows.UIElement.RenderTransformOrigin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransformProperty
  id: RenderTransformProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransformProperty
  nameWithType: UIElement.RenderTransformProperty
  fullName: System.Windows.UIElement.RenderTransformProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.RenderTransform*>propriedade de dependência.</xref:System.Windows.UIElement.RenderTransform*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty RenderTransformProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ShouldSerializeCommandBindings
  id: ShouldSerializeCommandBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ShouldSerializeCommandBindings()
  nameWithType: UIElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.UIElement.ShouldSerializeCommandBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Devolve se os processos de serialização devem serializar o conteúdo da <xref:System.Windows.UIElement.CommandBindings*>propriedade em instâncias desta classe.</xref:System.Windows.UIElement.CommandBindings*>"
  remarks: "Esta ação irá devolver `true` se <xref:System.Windows.UIElement.CommandBindings%2A>localmente está definido.</xref:System.Windows.UIElement.CommandBindings%2A>       Isto `ShouldSerialize` método é fornecido porque o <xref:System.Windows.UIElement.CommandBindings%2A>propriedade não tem um valor predefinido simples.</xref:System.Windows.UIElement.CommandBindings%2A> Este método indica se a propriedade foi alterado de valor predefinido. Normalmente, invocar este método se estiver a desenvolver um designer ou desenvolver o seu próprio controlo incorporando <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Para obter mais informações, consulte [definir valores predefinido com a ShouldSerialize e os métodos repor](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ShouldSerializeCommandBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.Windows.UIElement.CommandBindings*>valor da propriedade deve ser serializada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.UIElement.CommandBindings*>"
  overload: System.Windows.UIElement.ShouldSerializeCommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ShouldSerializeInputBindings
  id: ShouldSerializeInputBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ShouldSerializeInputBindings()
  nameWithType: UIElement.ShouldSerializeInputBindings()
  fullName: System.Windows.UIElement.ShouldSerializeInputBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Devolve se os processos de serialização devem serializar o conteúdo da <xref:System.Windows.UIElement.InputBindings*>propriedade em instâncias desta classe.</xref:System.Windows.UIElement.InputBindings*>"
  remarks: "Esta ação irá devolver `true` se <xref:System.Windows.UIElement.InputBindings%2A>localmente está definido.</xref:System.Windows.UIElement.InputBindings%2A>       Isto `ShouldSerialize` método é fornecido porque o <xref:System.Windows.UIElement.InputBindings%2A>propriedade não tem um valor predefinido simples.</xref:System.Windows.UIElement.InputBindings%2A> Este método indica se a propriedade foi alterado de valor predefinido. Normalmente, invocar este método se estiver a desenvolver um designer ou desenvolver o seu próprio controlo incorporando <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Para obter mais informações, consulte [definir valores predefinido com a ShouldSerialize e os métodos repor](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ShouldSerializeInputBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref:System.Windows.UIElement.InputBindings*>valor da propriedade deve ser serializada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.UIElement.InputBindings*>"
  overload: System.Windows.UIElement.ShouldSerializeInputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.SnapsToDevicePixels
  id: SnapsToDevicePixels
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: SnapsToDevicePixels
  nameWithType: UIElement.SnapsToDevicePixels
  fullName: System.Windows.UIElement.SnapsToDevicePixels
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define um valor que determina se composição para este elemento deve utilizar as definições de pixel específicos do dispositivo durante a composição.  Esta é uma propriedade de dependência."
  remarks: "Pode definir esta propriedade `true` no seu elemento de raiz para ativar o pixel snap composição em toda a IU. Para dispositivos funcionar em maior 96 [!INCLUDE[TLA#tla_dpi](~/add/includes/ajax-current-ext-md.md)], pixel snap composição pode minimizar o aliasing de anti artefactos visual in the vicinity of linhas sólidas única unidade.       Quando herdado por <xref:System.Windows.FrameworkElement>ou qualquer possíveis derivam classes, <xref:System.Windows.FrameworkElement>substitui os metadados para esta propriedade de dependência definir o <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>propriedade de metadados para `true`.</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement> Isto permite é a que apenas o elemento mais exterior numa subárvore tem de especificar SnapsToDevicePixels como `true`, e todos os elementos subordinados desse subárvore, em seguida, irão reportar SnapsToDevicePixels como `true` e terá o efeito de visual SnapsToDevicePixels.      <a name=&quot;dependencyPropertyInfo_SnapsToDevicePixels&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>"
  syntax:
    content: public bool SnapsToDevicePixels { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o elemento deve compor no accordance para pixéis do dispositivo; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. A predefinição conforme declarado no <xref href=&quot;System.Windows.UIElement&quot;> </xref> é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.SnapsToDevicePixels*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.SnapsToDevicePixelsProperty
  id: SnapsToDevicePixelsProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: SnapsToDevicePixelsProperty
  nameWithType: UIElement.SnapsToDevicePixelsProperty
  fullName: System.Windows.UIElement.SnapsToDevicePixelsProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.SnapsToDevicePixels*>propriedade de dependência.</xref:System.Windows.UIElement.SnapsToDevicePixels*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonDown
  id: StylusButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonDown
  nameWithType: UIElement.StylusButtonDown
  fullName: System.Windows.UIElement.StylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão de caneta é premido enquanto o ponteiro é efetuada através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>anexados a eventos para esta classe, para que StylusButtonDown faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusButtonDown estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusButtonDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusButtonDownEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusButtonEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusButtonDown>.</xref:System.Windows.UIElement.PreviewStylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.StylusButtonDownEvent>      -Ignorar <xref:System.Windows.UIElement.OnStylusButtonDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonDownEvent
  id: StylusButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonDownEvent
  nameWithType: UIElement.StylusButtonDownEvent
  fullName: System.Windows.UIElement.StylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusButtonDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonUp
  id: StylusButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonUp
  nameWithType: UIElement.StylusButtonUp
  fullName: System.Windows.UIElement.StylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o botão de caneta é libertado enquanto o ponteiro é efetuada através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>anexados a eventos para esta classe, para que StylusButtonUp faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusButtonUp estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusButtonUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusButtonUpEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusButtonEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusButtonUp>.</xref:System.Windows.UIElement.PreviewStylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.StylusButtonUpEvent>      -Ignorar <xref:System.Windows.UIElement.OnStylusButtonUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonUpEvent
  id: StylusButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonUpEvent
  nameWithType: UIElement.StylusButtonUpEvent
  fullName: System.Windows.UIElement.StylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusButtonUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusDown
  id: StylusDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusDown
  nameWithType: UIElement.StylusDown
  fullName: System.Windows.UIElement.StylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta tocar o digitizer enquanto a caneta é efetuada através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>anexados a eventos para esta classe, para que StylusDown faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusDown estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusDownEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusDownEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusDown>.</xref:System.Windows.UIElement.PreviewStylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.UIElement.StylusDownEvent>      -Ignorar <xref:System.Windows.UIElement.OnStylusDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler StylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusDownEvent
  id: StylusDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusDownEvent
  nameWithType: UIElement.StylusDownEvent
  fullName: System.Windows.UIElement.StylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusDown&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusEnter
  id: StylusEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusEnter
  nameWithType: UIElement.StylusEnter
  fullName: System.Windows.UIElement.StylusEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta introduz os limites deste elemento."
  remarks: "StylusEnter é um que utiliza o estratégia de encaminhamento de processamento de eventos direto. Os eventos encaminhados diretos não são gerados ao longo de uma rota; em vez disso, estes são processados no mesmo elemento onde são gerados. No entanto, se ativar outros aspetos do comportamento do evento encaminhado, tais como os accionadores de eventos estilos.       Embora StylusEnter controla quando a caneta introduz os limites de um elemento, este evento mais literalmente relatórios de que o <xref:System.Windows.UIElement.IsStylusOver%2A>valor da propriedade foi alterado de `false` para `true` neste elemento.</xref:System.Windows.UIElement.IsStylusOver%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>anexados a eventos para esta classe, para que StylusEnter faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusEnter estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusEnter&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusEnterEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnStylusEnter%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusEnter%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusEnterEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusEnter;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusEnterEvent
  id: StylusEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusEnterEvent
  nameWithType: UIElement.StylusEnterEvent
  fullName: System.Windows.UIElement.StylusEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusEnter&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInAirMove
  id: StylusInAirMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInAirMove
  nameWithType: UIElement.StylusInAirMove
  fullName: System.Windows.UIElement.StylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta move através de um elemento sem afetar, na verdade, o digitizer."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>anexados a eventos para esta classe, para que StylusInAirMove faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusInAirMove estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusInAirMove&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusInAirMoveEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusInAirMove>.</xref:System.Windows.UIElement.PreviewStylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusInAirMoveEvent>      -Ignorar <xref:System.Windows.UIElement.OnStylusInAirMove%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInAirMoveEvent
  id: StylusInAirMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInAirMoveEvent
  nameWithType: UIElement.StylusInAirMoveEvent
  fullName: System.Windows.UIElement.StylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusInAirMove&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInRange
  id: StylusInRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInRange
  nameWithType: UIElement.StylusInRange
  fullName: System.Windows.UIElement.StylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta fechar para digitizer para ser detetada, enquanto estiver sobre este elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>anexados a eventos para esta classe, para que StylusInRange faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusInRange estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusInRange&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusInRangeEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusInRange>.</xref:System.Windows.UIElement.PreviewStylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusInRangeEvent>      -Ignorar <xref:System.Windows.UIElement.OnStylusInRange%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInRangeEvent
  id: StylusInRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInRangeEvent
  nameWithType: UIElement.StylusInRangeEvent
  fullName: System.Windows.UIElement.StylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusInRange&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusLeave
  id: StylusLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusLeave
  nameWithType: UIElement.StylusLeave
  fullName: System.Windows.UIElement.StylusLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta sai dos limites do elemento."
  remarks: "StylusLeave é um que utiliza o estratégia de encaminhamento de processamento de eventos direto. Os eventos encaminhados diretos não são gerados ao longo de uma rota; em vez disso, estes são processados no mesmo elemento onde são gerados. No entanto, se ativar outros aspetos do comportamento do evento encaminhado, tais como os accionadores de eventos estilos.       Embora StylusLeave controla quando a caneta sai dos limites de um elemento, este evento mais literalmente relatórios de que o <xref:System.Windows.UIElement.IsStylusOver%2A>valor da propriedade foi alterado de `true` para `false` neste elemento.</xref:System.Windows.UIElement.IsStylusOver%2A>       Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>anexados a eventos para esta classe, para que StylusLeave faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusLeave estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusLeave&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusLeaveEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -Ignorar <xref:System.Windows.UIElement.OnStylusLeave%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusLeave%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusLeave;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusLeaveEvent
  id: StylusLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusLeaveEvent
  nameWithType: UIElement.StylusLeaveEvent
  fullName: System.Windows.UIElement.StylusLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusLeave&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusMove
  id: StylusMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusMove
  nameWithType: UIElement.StylusMove
  fullName: System.Windows.UIElement.StylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta se move sobre este elemento. Tem de mover a caneta em digitizer para aumentar este evento. Caso contrário, <xref href=&quot;System.Windows.UIElement.StylusInAirMove&quot;> </xref> é gerado em vez disso."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>anexados a eventos para esta classe, para que StylusMove faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusMove estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusMove&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusMoveEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusMove>.</xref:System.Windows.UIElement.PreviewStylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusMoveEvent>      -Ignorar <xref:System.Windows.UIElement.OnStylusMove%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusMoveEvent
  id: StylusMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusMoveEvent
  nameWithType: UIElement.StylusMoveEvent
  fullName: System.Windows.UIElement.StylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusMove&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusOutOfRange
  id: StylusOutOfRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusOutOfRange
  nameWithType: UIElement.StylusOutOfRange
  fullName: System.Windows.UIElement.StylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando a caneta está muito distante do digitizer para ser detetada, enquanto estiver sobre este elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>anexados a eventos para esta classe, para que StylusOutOfRange faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusOutOfRange estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusOutOfRange&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusOutOfRangeEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.</xref:System.Windows.UIElement.PreviewStylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusOutOfRangeEvent>      -Ignorar <xref:System.Windows.UIElement.OnStylusOutOfRange%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusOutOfRangeEvent
  id: StylusOutOfRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusOutOfRangeEvent
  nameWithType: UIElement.StylusOutOfRangeEvent
  fullName: System.Windows.UIElement.StylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusOutOfRange&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusPlugIns
  id: StylusPlugIns
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusPlugIns
  nameWithType: UIElement.StylusPlugIns
  fullName: System.Windows.UIElement.StylusPlugIns
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém uma coleção de todos os objetos de plug-in (personalização) de caneta associados este elemento."
  remarks: "Um exemplo de um controlo que preenche esta coleção é <xref:System.Windows.Controls.InkCanvas>.</xref:System.Windows.Controls.InkCanvas> <xref:System.Windows.Controls.InkCanvas>Adiciona o <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>como um item de coleção, que permite o <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>interagir com a entrada de caneta e produzir a composição em resposta a caneta orientadas por eventos exclusiva.</xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> </xref:System.Windows.Input.StylusPlugIns.DynamicRenderer></xref:System.Windows.Controls.InkCanvas>       Para obter informações sobre a criação personalizadas de plug-ins que podem receber e interpretar a entrada de caneta, consulte [interceptar entrada da caneta](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instance and adds it to the StylusPlugIns collection for a custom ink handling control.  \n  \n [!code-vb[StylusPluginSamples#3](~/add/codesnippet/visualbasic/StylusPluginSamples/StylusControl.vb#3)]\n [!code-cs[StylusPluginSamples#3](~/add/codesnippet/csharp/StylusPluginSamples/StylusControl.cs#3)]"
  syntax:
    content: protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }
    return:
      type: System.Windows.Input.StylusPlugIns.StylusPlugInCollection
      description: "A coleção de caneta plug-ins, como uma coleção especializada."
  overload: System.Windows.UIElement.StylusPlugIns*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusSystemGesture
  id: StylusSystemGesture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusSystemGesture
  nameWithType: UIElement.StylusSystemGesture
  fullName: System.Windows.UIElement.StylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um utilizador executa uma das várias gestos de caneta."
  remarks: "Para mais informações sobre gestos caneta, consulte <xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>anexados a eventos para esta classe, para que StylusSystemGesture faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusSystemGesture estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusSystemGesture&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusSystemGestureEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusSystemGestureEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.</xref:System.Windows.UIElement.PreviewStylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.UIElement.StylusSystemGestureEvent>      -Ignorar <xref:System.Windows.UIElement.OnStylusSystemGesture%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusSystemGestureEvent
  id: StylusSystemGestureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusSystemGestureEvent
  nameWithType: UIElement.StylusSystemGestureEvent
  fullName: System.Windows.UIElement.StylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusSystemGesture&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusUp
  id: StylusUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusUp
  nameWithType: UIElement.StylusUp
  fullName: System.Windows.UIElement.StylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando o utilizador gera caneta desativar o digitizer enquanto este estiver através deste elemento."
  remarks: "Este evento cria um alias para o <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>anexados a eventos para esta classe, para que StylusUp faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> Processadores de eventos que estão anexados ao evento StylusUp estão ligados ao subjacentes <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>       Touch, rato e a entrada de caneta existem numa relação específica. Para obter mais informações, consulte [descrição geral de entrada](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.StylusUpEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.StylusEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewStylusUp>.</xref:System.Windows.UIElement.PreviewStylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusUpEvent>      -Ignorar <xref:System.Windows.UIElement.OnStylusUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusUpEvent
  id: StylusUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusUpEvent
  nameWithType: UIElement.StylusUpEvent
  fullName: System.Windows.UIElement.StylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.StylusUp&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TextInput
  id: TextInput
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TextInput
  nameWithType: UIElement.TextInput
  fullName: System.Windows.UIElement.TextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando este elemento obtém o texto de uma forma de dispositivo independente."
  remarks: "> [!IMPORTANT]> Este evento já pode marcado como processada por de implementações internas composited controlos. Consulte Remark abaixo.       O evento TextInput já pode estar marcado como processado de implementações internas composited controlos. Por exemplo, um <xref:System.Windows.Controls.TextBox>é um controlo composited onde o evento TextInput já está marcado como processadas; dentro do respetivo compositing.</xref:System.Windows.Controls.TextBox> Controlos de fazê-lo porque o controlo tem de interpretar alguns tipos de entrada, tais como teclas de seta, como tendo um significado especial para esse controlo. Se utilizar <xref:System.Windows.UIElement.PreviewTextInput>do evento onde ligar o processadores para introdução de texto, poderá receber melhores resultados.</xref:System.Windows.UIElement.PreviewTextInput> Esta técnica evita a maioria dos casos onde a composição do controlo já marcou este evento como processado e impede que o processador recebe o evento ao longo da rota do evento.       O evento TextInput permite que um componente ou aplicação para escutar para introdução de texto de uma forma de dispositivo independente. O teclado é o principal meio TextInput, mas o reconhecimento de voz, escrita e outros dispositivos de entrada podem também levantar TextInput.       Devido a combinações de teclas — no teclados predefinido ou através de editores de método de entrada — vários eventos chaves podem emitir um evento de entrada de texto.       Este evento cria um alias para o <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>anexados a eventos para esta classe, para que TextInput faz parte da classe de membros listam quando <xref:System.Windows.UIElement>é herdada como um elemento de base.</xref:System.Windows.UIElement> </xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> Processadores de eventos que estão anexados ao evento TextInput estão ligados ao subjacentes <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>anexados a eventos e receber a mesma instância de dados de eventos.</xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>      <a name=&quot;routedEventInfo_TextInput&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.TextInputEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.Windows.Input.TextCompositionEventHandler>|      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewTextInput>.</xref:System.Windows.UIElement.PreviewTextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.UIElement.TextInputEvent>      -Ignorar <xref:System.Windows.UIElement.OnTextInput%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler TextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TextInputEvent
  id: TextInputEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TextInputEvent
  nameWithType: UIElement.TextInputEvent
  fullName: System.Windows.UIElement.TextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.TextInput&quot;> </xref> evento encaminhado."
  remarks: "Os identificadores de evento encaminhado são criados quando eventos encaminhados estão registados. Estes identificadores contenham um nome de identificação, tipo de proprietário, tipo de processador, estratégia de encaminhamento e método do utilitário para adicionar os proprietários para o evento. Pode utilizar estes identificadores para adicionar processadores de classe.       Para obter mais informações sobre como registar eventos encaminhados, consulte <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Para obter mais informações sobre como utilizar identificadores de evento encaminhado para adicionar processadores de classe, consulte <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchDown
  id: TouchDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchDown
  nameWithType: UIElement.TouchDown
  fullName: System.Windows.UIElement.TouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma mas tocar ecrã enquanto a mas é efetuada através deste elemento."
  remarks: "Por predefinição, o <xref:System.Windows.UIElement.PreviewTouchDown>e eventos de TouchDown voltará a ocorrer após uma mas tocar ecrã e move.</xref:System.Windows.UIElement.PreviewTouchDown> Pressionar uma mas no ecrã e que está a retê-la sem movê-los faz com que prima sem soltar comportamento de <xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus> O comportamento prima e mantenha premido é equivalente a um contexto de rato.       Para fazer com que o <xref:System.Windows.UIElement.PreviewTouchDown>e eventos de TouchDown para ocorrer logo que um mas tocar ecrã, defina o <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>ligado propriedade `false` para este elemento.</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewTouchDown>      <a name=&quot;routedEventInfo_TouchDown&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.TouchDownEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewTouchDown>.</xref:System.Windows.UIElement.PreviewTouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchDownEvent>      -Ignorar <xref:System.Windows.UIElement.OnTouchDown%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchDownEvent
  id: TouchDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchDownEvent
  nameWithType: UIElement.TouchDownEvent
  fullName: System.Windows.UIElement.TouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.TouchDown&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchEnter
  id: TouchEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchEnter
  nameWithType: UIElement.TouchEnter
  fullName: System.Windows.UIElement.TouchEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um touch se move de exterior para dentro dos limites deste elemento."
  remarks: "Este evento é desencadeado sempre, quer tenha ou não é capturado o dispositivo de toque para este elemento.      <a name=&quot;routedEventInfo_TouchEnter&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.TouchEnterEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -Ignorar <xref:System.Windows.UIElement.OnTouchEnter%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnTouchEnter%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchEnterEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchEnterEvent
  id: TouchEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchEnterEvent
  nameWithType: UIElement.TouchEnterEvent
  fullName: System.Windows.UIElement.TouchEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.TouchEnter&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesCaptured
  id: TouchesCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesCaptured
  nameWithType: UIElement.TouchesCaptured
  fullName: System.Windows.UIElement.TouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém todos os dispositivos táteis que são capturados a este elemento."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Uma enumeração do <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> objetos que são capturados a este elemento."
  overload: System.Windows.UIElement.TouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesCapturedWithin
  id: TouchesCapturedWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesCapturedWithin
  nameWithType: UIElement.TouchesCapturedWithin
  fullName: System.Windows.UIElement.TouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém todos os dispositivos táteis que são capturados a este elemento ou quaisquer elementos subordinados na respetiva árvore visual."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Uma enumeração do <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> objetos que são capturados para este elemento ou quaisquer elementos subordinados na respetiva árvore visual."
  overload: System.Windows.UIElement.TouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesDirectlyOver
  id: TouchesDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesDirectlyOver
  nameWithType: UIElement.TouchesDirectlyOver
  fullName: System.Windows.UIElement.TouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém todos os dispositivos táteis que são através deste elemento."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Uma enumeração do <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> objetos que estão através deste elemento."
  overload: System.Windows.UIElement.TouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesOver
  id: TouchesOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesOver
  nameWithType: UIElement.TouchesOver
  fullName: System.Windows.UIElement.TouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém todos os dispositivos táteis que são através deste elemento ou quaisquer elementos subordinados na respetiva árvore visual."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Uma enumeração do <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> objetos que estão por este elemento ou quaisquer elementos subordinados na respetiva árvore visual."
  overload: System.Windows.UIElement.TouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchLeave
  id: TouchLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchLeave
  nameWithType: UIElement.TouchLeave
  fullName: System.Windows.UIElement.TouchLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando um touch se move de interior para fora dos limites deste elemento."
  remarks: "Este evento é desencadeado sempre, quer tenha ou não é capturado o dispositivo de toque para este elemento.      <a name=&quot;routedEventInfo_TouchLeave&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.TouchLeaveEvent>|   | Estratégia de encaminhamento | Direto |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -Ignorar <xref:System.Windows.UIElement.OnTouchLeave%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnTouchLeave%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchLeaveEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchLeaveEvent
  id: TouchLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchLeaveEvent
  nameWithType: UIElement.TouchLeaveEvent
  fullName: System.Windows.UIElement.TouchLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.TouchLeave&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchMove
  id: TouchMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchMove
  nameWithType: UIElement.TouchMove
  fullName: System.Windows.UIElement.TouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma mas move no ecrã enquanto a mas é efetuada através deste elemento."
  remarks: "<a name=&quot;routedEventInfo_TouchMove&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.TouchMoveEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewTouchMove>.</xref:System.Windows.UIElement.PreviewTouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchMoveEvent>      -Ignorar <xref:System.Windows.UIElement.OnTouchMove%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchMoveEvent
  id: TouchMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchMoveEvent
  nameWithType: UIElement.TouchMoveEvent
  fullName: System.Windows.UIElement.TouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.TouchMove&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchUp
  id: TouchUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchUp
  nameWithType: UIElement.TouchUp
  fullName: System.Windows.UIElement.TouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Ocorre quando uma mas é gerada retire ecrã enquanto a mas é efetuada através deste elemento."
  remarks: "<a name=&quot;routedEventInfo_TouchUp&quot;></a># # Encaminhados informações sobre eventos |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.TouchUpEvent>|   | Estratégia de encaminhamento | Bubbling |   | Delegado | <xref:System.EventHandler%601>do tipo <xref:System.Windows.Input.TouchEventArgs>. |      -O evento de túnel correspondente é <xref:System.Windows.UIElement.PreviewTouchUp>.</xref:System.Windows.UIElement.PreviewTouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchUpEvent>      -Ignorar <xref:System.Windows.UIElement.OnTouchUp%2A>para implementar a classe de processamento para este evento em classes derivadas.</xref:System.Windows.UIElement.OnTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchUpEvent
  id: TouchUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchUpEvent
  nameWithType: UIElement.TouchUpEvent
  fullName: System.Windows.UIElement.TouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref href=&quot;System.Windows.UIElement.TouchUp&quot;> </xref> evento encaminhado."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  id: TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TranslatePoint(Point,UIElement)
  nameWithType: UIElement.TranslatePoint(Point,UIElement)
  fullName: System.Windows.UIElement.TranslatePoint(Point,UIElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Converte um ponto de relativo para este elemento coordenadas relativos a elemento especificado."
  remarks: "Transmitir `null` para `relativeTo` é permitida e indica que as coordenadas devem ser relativo para o elemento de raiz na árvore lógica que este elemento pertence.       Este método é utilizado para traduzir os valores de ponto de teste de acessos. Chamar este método é principalmente relevante se estiver a criar um controlo e tem de processar a entrada num nível inferior. Se estiver a utilizar controlos existentes, geralmente, pode assumir que controlos concluídos irão reportar os resultados do teste de acessos traduzidas corretamente."
  syntax:
    content: public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "O ponto de valor, tal como relativo este elemento."
    - id: relativeTo
      type: System.Windows.UIElement
      description: "O elemento ao traduzir o ponto especificado em."
    return:
      type: System.Windows.Point
      description: "Um valor de ponto, agora relativo para o elemento de destino em vez de para este elemento de origem."
  overload: System.Windows.UIElement.TranslatePoint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Uid
  id: Uid
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Uid
  nameWithType: UIElement.Uid
  fullName: System.Windows.UIElement.Uid
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define o identificador exclusivo (para localização) para este elemento. Esta é uma propriedade de dependência."
  remarks: "Utilizada pelos designers para obter o `x:Uid` valor (consulte [WPF globalização e descrição geral de localização](~/add/includes/ajax-current-ext-md.md) para obter mais informações).      <a name=&quot;dependencyPropertyInfo_WindowWindowStyle&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.UidProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.UidProperty>"
  syntax:
    content: public string Uid { get; set; }
    return:
      type: System.String
      description: "Uma cadeia que é o identificador exclusivo para este elemento."
  overload: System.Windows.UIElement.Uid*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.UidProperty
  id: UidProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: UidProperty
  nameWithType: UIElement.UidProperty
  fullName: System.Windows.UIElement.UidProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.Uid*>propriedade de dependência.</xref:System.Windows.UIElement.Uid*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty UidProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.UpdateLayout
  id: UpdateLayout
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: UpdateLayout()
  nameWithType: UIElement.UpdateLayout()
  fullName: System.Windows.UIElement.UpdateLayout()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Garante que todos os elementos subordinados visual deste elemento são corretamente atualizados para o esquema."
  remarks: "Quando chamar este método, elementos com <xref:System.Windows.UIElement.IsMeasureValid%2A> `false` ou <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` irá chamar específicas do elemento <xref:System.Windows.UIElement.MeasureCore%2A>e <xref:System.Windows.UIElement.ArrangeCore%2A>métodos, que força o esquema de atualização e todos os tamanhos de calculada serão validados.</xref:System.Windows.UIElement.ArrangeCore%2A> </xref:System.Windows.UIElement.MeasureCore%2A> </xref:System.Windows.UIElement.IsArrangeValid%2A></xref:System.Windows.UIElement.IsMeasureValid%2A>       Chamar este método não tem qualquer efeito se o esquema é inalterada, ou se nem disposição nem medição do Estado de um esquema é inválido. No entanto, se o esquema é inválido no que é respeita, a chamada de UpdateLayout será Refazer o esquema de todo. Por conseguinte, deve evitar chamar UpdateLayout após cada alteração de incremental e secundária na árvore de elemento. O sistema de esquema executará o esquema do elemento diferida, de forma utilizando um algoritmo que equilibra e o desempenho e a moeda, e com uma estratégia de peso para diferir as alterações à raízes até que todos os elementos subordinados são válidos. Só deve chamar UpdateLayout se absolutamente precisa de posições e tamanhos atualizados e apenas depois de se determinados que todas as alterações às propriedades de controlo e que pode afetar o esquema são concluídas."
  syntax:
    content: public void UpdateLayout ();
    parameters: []
  overload: System.Windows.UIElement.UpdateLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Visibility
  id: Visibility
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Visibility
  nameWithType: UIElement.Visibility
  fullName: System.Windows.UIElement.Visibility
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Obtém ou define o [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] visibilidade deste elemento.  Esta é uma propriedade de dependência."
  remarks: "O valor de afeta a definição desta propriedade <xref:System.Windows.UIElement.IsVisible%2A>, que por sua vez podem emitir um o <xref:System.Windows.UIElement.IsVisibleChanged>eventos.</xref:System.Windows.UIElement.IsVisibleChanged> </xref:System.Windows.UIElement.IsVisible%2A> No entanto, <xref:System.Windows.UIElement.IsVisible%2A>tem de outros fatores que influenciam o mesmo, para a instância as definições de visibilidade de principais que contêm o mesmo.</xref:System.Windows.UIElement.IsVisible%2A>       Elementos onde visibilidade não é <xref:System.Windows.Visibility>não participar nos eventos de entrada (ou comandos), não influenciar transmite a medida ou dispor de esquema, não são de uma sequência de separador e não serão comunicadas nos testes acessos.</xref:System.Windows.Visibility>       Quando herdado por <xref:System.Windows.Window>ou respetivas classes derivadas, <xref:System.Windows.Window>redefine o valor predefinido desta propriedade ser <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.Window> Isto tem o efeito da não execução da passagem de medida do esquema num inicialmente criada <xref:System.Windows.Window>, e <xref:System.Windows.UIElement.RenderSize%2A>devolve (0,0).</xref:System.Windows.UIElement.RenderSize%2A> </xref:System.Windows.Window> Para obter mais informações, consulte <xref:System.Windows.Window>.</xref:System.Windows.Window> <xref:System.Windows.Controls.Primitives.Popup>também redefine o valor predefinido a ser <xref:System.Windows.Visibility>, com o comportamento resultante semelhante para <xref:System.Windows.Controls.Primitives.Popup>e respetivas classes derivadas.</xref:System.Windows.Controls.Primitives.Popup> </xref:System.Windows.Visibility></xref:System.Windows.Controls.Primitives.Popup>      <a name=&quot;dependencyPropertyInfo_Visibility&quot;></a># # Informações de propriedade de dependência |||   |-|-|   | Campo Identificador | <xref:System.Windows.UIElement.VisibilityProperty>|   | Definir propriedades de metadados `true`| Nenhum |</xref:System.Windows.UIElement.VisibilityProperty>"
  example:
  - "The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface. Prior to running the actual program logic associated with the button, the button itself is set to be <xref:System.Windows.Visibility?displayProperty=fullName>, and the other button in the pair is set to <xref:System.Windows.Visibility?displayProperty=fullName>.  \n  \n [!code-cs[MediaElement_snip#UIElementVisibility](~/add/codesnippet/csharp/p-system.windows.uieleme_13_1.cs)]\n [!code-vb[MediaElement_snip#UIElementVisibility](~/add/codesnippet/visualbasic/p-system.windows.uieleme_13_1.vb)]"
  syntax:
    content: public System.Windows.Visibility Visibility { get; set; }
    return:
      type: System.Windows.Visibility
      description: "Um valor de enumeração. O valor predefinido é <xref href=&quot;System.Windows.Visibility&quot;> </xref>."
  overload: System.Windows.UIElement.Visibility*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.VisibilityProperty
  id: VisibilityProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: VisibilityProperty
  nameWithType: UIElement.VisibilityProperty
  fullName: System.Windows.UIElement.VisibilityProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Identifica o <xref:System.Windows.UIElement.Visibility*>propriedade de dependência.</xref:System.Windows.UIElement.Visibility*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty VisibilityProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "A adicionar."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Media.Visual
  isExternal: false
  name: System.Windows.Media.Visual
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.UIElement.#ctor
  parent: System.Windows.UIElement
  isExternal: false
  name: UIElement()
  nameWithType: UIElement.UIElement()
  fullName: System.Windows.UIElement.UIElement()
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
- uid: System.Windows.EventRoute
  parent: System.Windows
  isExternal: false
  name: EventRoute
  nameWithType: EventRoute
  fullName: System.Windows.EventRoute
- uid: System.Windows.RoutedEventArgs
  parent: System.Windows
  isExternal: false
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.UIElement.AllowDrop
  parent: System.Windows.UIElement
  isExternal: false
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
  fullName: System.Windows.UIElement.AllowDrop
- uid: System.Windows.UIElement.AllowDropProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AllowDropProperty
  nameWithType: UIElement.AllowDropProperty
  fullName: System.Windows.UIElement.AllowDropProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.UIElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
- uid: System.Windows.Media.Animation.AnimationClock
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationClock
  nameWithType: AnimationClock
  fullName: System.Windows.Media.Animation.AnimationClock
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.UIElement.AreAnyTouchesCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: UIElement.AreAnyTouchesCaptured
  fullName: System.Windows.UIElement.AreAnyTouchesCaptured
- uid: System.Windows.UIElement.AreAnyTouchesCapturedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedProperty
  nameWithType: UIElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedProperty
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: UIElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: UIElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
- uid: System.Windows.UIElement.AreAnyTouchesOver
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: UIElement.AreAnyTouchesOver
  fullName: System.Windows.UIElement.AreAnyTouchesOver
- uid: System.Windows.UIElement.AreAnyTouchesOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesOverProperty
  nameWithType: UIElement.AreAnyTouchesOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesOverProperty
- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)
  parent: System.Windows.UIElement
  isExternal: false
  name: Arrange(Rect)
  nameWithType: UIElement.Arrange(Rect)
  fullName: System.Windows.UIElement.Arrange(Rect)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.UIElement.ArrangeCore(System.Windows.Rect)
  parent: System.Windows.UIElement
  isExternal: false
  name: ArrangeCore(Rect)
  nameWithType: UIElement.ArrangeCore(Rect)
  fullName: System.Windows.UIElement.ArrangeCore(Rect)
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.UIElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
- uid: System.Windows.Media.Animation.AnimationTimeline
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationTimeline
  nameWithType: AnimationTimeline
  fullName: System.Windows.Media.Animation.AnimationTimeline
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
- uid: System.Windows.UIElement.BitmapEffect
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffect
  nameWithType: UIElement.BitmapEffect
  fullName: System.Windows.UIElement.BitmapEffect
- uid: System.Windows.Media.Effects.BitmapEffect
  parent: System.Windows.Media.Effects
  isExternal: false
  name: BitmapEffect
  nameWithType: BitmapEffect
  fullName: System.Windows.Media.Effects.BitmapEffect
- uid: System.Windows.UIElement.BitmapEffectInput
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectInput
  nameWithType: UIElement.BitmapEffectInput
  fullName: System.Windows.UIElement.BitmapEffectInput
- uid: System.Windows.Media.Effects.BitmapEffectInput
  parent: System.Windows.Media.Effects
  isExternal: false
  name: BitmapEffectInput
  nameWithType: BitmapEffectInput
  fullName: System.Windows.Media.Effects.BitmapEffectInput
- uid: System.Windows.UIElement.BitmapEffectInputProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectInputProperty
  nameWithType: UIElement.BitmapEffectInputProperty
  fullName: System.Windows.UIElement.BitmapEffectInputProperty
- uid: System.Windows.UIElement.BitmapEffectProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectProperty
  nameWithType: UIElement.BitmapEffectProperty
  fullName: System.Windows.UIElement.BitmapEffectProperty
- uid: System.Windows.UIElement.CacheMode
  parent: System.Windows.UIElement
  isExternal: false
  name: CacheMode
  nameWithType: UIElement.CacheMode
  fullName: System.Windows.UIElement.CacheMode
- uid: System.Windows.Media.CacheMode
  parent: System.Windows.Media
  isExternal: false
  name: CacheMode
  nameWithType: CacheMode
  fullName: System.Windows.Media.CacheMode
- uid: System.Windows.UIElement.CacheModeProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: CacheModeProperty
  nameWithType: UIElement.CacheModeProperty
  fullName: System.Windows.UIElement.CacheModeProperty
- uid: System.Windows.UIElement.CaptureMouse
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureMouse()
  nameWithType: UIElement.CaptureMouse()
  fullName: System.Windows.UIElement.CaptureMouse()
- uid: System.Windows.UIElement.CaptureStylus
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureStylus()
  nameWithType: UIElement.CaptureStylus()
  fullName: System.Windows.UIElement.CaptureStylus()
- uid: System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureTouch(TouchDevice)
  nameWithType: UIElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.UIElement.CaptureTouch(TouchDevice)
- uid: System.Windows.Input.TouchDevice
  parent: System.Windows.Input
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
- uid: System.Windows.UIElement.Clip
  parent: System.Windows.UIElement
  isExternal: false
  name: Clip
  nameWithType: UIElement.Clip
  fullName: System.Windows.UIElement.Clip
- uid: System.Windows.Media.Geometry
  parent: System.Windows.Media
  isExternal: false
  name: Geometry
  nameWithType: Geometry
  fullName: System.Windows.Media.Geometry
- uid: System.Windows.UIElement.ClipProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipProperty
  nameWithType: UIElement.ClipProperty
  fullName: System.Windows.UIElement.ClipProperty
- uid: System.Windows.UIElement.ClipToBounds
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
  fullName: System.Windows.UIElement.ClipToBounds
- uid: System.Windows.UIElement.ClipToBoundsProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipToBoundsProperty
  nameWithType: UIElement.ClipToBoundsProperty
  fullName: System.Windows.UIElement.ClipToBoundsProperty
- uid: System.Windows.UIElement.CommandBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: CommandBindings
  nameWithType: UIElement.CommandBindings
  fullName: System.Windows.UIElement.CommandBindings
- uid: System.Windows.Input.CommandBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: CommandBindingCollection
  nameWithType: CommandBindingCollection
  fullName: System.Windows.Input.CommandBindingCollection
- uid: System.Windows.UIElement.DesiredSize
  parent: System.Windows.UIElement
  isExternal: false
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
  fullName: System.Windows.UIElement.DesiredSize
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.UIElement.DragEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: DragEnter
  nameWithType: UIElement.DragEnter
  fullName: System.Windows.UIElement.DragEnter
- uid: System.Windows.DragEventHandler
  parent: System.Windows
  isExternal: false
  name: DragEventHandler
  nameWithType: DragEventHandler
  fullName: System.Windows.DragEventHandler
- uid: System.Windows.UIElement.DragEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DragEnterEvent
  nameWithType: UIElement.DragEnterEvent
  fullName: System.Windows.UIElement.DragEnterEvent
- uid: System.Windows.UIElement.DragLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: DragLeave
  nameWithType: UIElement.DragLeave
  fullName: System.Windows.UIElement.DragLeave
- uid: System.Windows.UIElement.DragLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DragLeaveEvent
  nameWithType: UIElement.DragLeaveEvent
  fullName: System.Windows.UIElement.DragLeaveEvent
- uid: System.Windows.UIElement.DragOver
  parent: System.Windows.UIElement
  isExternal: false
  name: DragOver
  nameWithType: UIElement.DragOver
  fullName: System.Windows.UIElement.DragOver
- uid: System.Windows.UIElement.DragOverEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DragOverEvent
  nameWithType: UIElement.DragOverEvent
  fullName: System.Windows.UIElement.DragOverEvent
- uid: System.Windows.UIElement.Drop
  parent: System.Windows.UIElement
  isExternal: false
  name: Drop
  nameWithType: UIElement.Drop
  fullName: System.Windows.UIElement.Drop
- uid: System.Windows.UIElement.DropEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DropEvent
  nameWithType: UIElement.DropEvent
  fullName: System.Windows.UIElement.DropEvent
- uid: System.Windows.UIElement.Effect
  parent: System.Windows.UIElement
  isExternal: false
  name: Effect
  nameWithType: UIElement.Effect
  fullName: System.Windows.UIElement.Effect
- uid: System.Windows.Media.Effects.Effect
  parent: System.Windows.Media.Effects
  isExternal: false
  name: Effect
  nameWithType: Effect
  fullName: System.Windows.Media.Effects.Effect
- uid: System.Windows.UIElement.EffectProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: EffectProperty
  nameWithType: UIElement.EffectProperty
  fullName: System.Windows.UIElement.EffectProperty
- uid: System.Windows.UIElement.Focus
  parent: System.Windows.UIElement
  isExternal: false
  name: Focus()
  nameWithType: UIElement.Focus()
  fullName: System.Windows.UIElement.Focus()
- uid: System.Windows.UIElement.Focusable
  parent: System.Windows.UIElement
  isExternal: false
  name: Focusable
  nameWithType: UIElement.Focusable
  fullName: System.Windows.UIElement.Focusable
- uid: System.Windows.UIElement.FocusableChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: FocusableChanged
  nameWithType: UIElement.FocusableChanged
  fullName: System.Windows.UIElement.FocusableChanged
- uid: System.Windows.DependencyPropertyChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
- uid: System.Windows.UIElement.FocusableProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: FocusableProperty
  nameWithType: UIElement.FocusableProperty
  fullName: System.Windows.UIElement.FocusableProperty
- uid: System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.UIElement
  isExternal: false
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: UIElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.UIElement.GetAnimationBaseValue(DependencyProperty)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.UIElement.GetLayoutClip(System.Windows.Size)
  parent: System.Windows.UIElement
  isExternal: false
  name: GetLayoutClip(Size)
  nameWithType: UIElement.GetLayoutClip(Size)
  fullName: System.Windows.UIElement.GetLayoutClip(Size)
- uid: System.Windows.UIElement.GetUIParentCore
  parent: System.Windows.UIElement
  isExternal: false
  name: GetUIParentCore()
  nameWithType: UIElement.GetUIParentCore()
  fullName: System.Windows.UIElement.GetUIParentCore()
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.UIElement.GiveFeedback
  parent: System.Windows.UIElement
  isExternal: false
  name: GiveFeedback
  nameWithType: UIElement.GiveFeedback
  fullName: System.Windows.UIElement.GiveFeedback
- uid: System.Windows.GiveFeedbackEventHandler
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventHandler
  nameWithType: GiveFeedbackEventHandler
  fullName: System.Windows.GiveFeedbackEventHandler
- uid: System.Windows.UIElement.GiveFeedbackEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GiveFeedbackEvent
  nameWithType: UIElement.GiveFeedbackEvent
  fullName: System.Windows.UIElement.GiveFeedbackEvent
- uid: System.Windows.UIElement.GotFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: GotFocus
  nameWithType: UIElement.GotFocus
  fullName: System.Windows.UIElement.GotFocus
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.UIElement.GotFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotFocusEvent
  nameWithType: UIElement.GotFocusEvent
  fullName: System.Windows.UIElement.GotFocusEvent
- uid: System.Windows.UIElement.GotKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: GotKeyboardFocus
  nameWithType: UIElement.GotKeyboardFocus
  fullName: System.Windows.UIElement.GotKeyboardFocus
- uid: System.Windows.Input.KeyboardFocusChangedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventHandler
  nameWithType: KeyboardFocusChangedEventHandler
  fullName: System.Windows.Input.KeyboardFocusChangedEventHandler
- uid: System.Windows.UIElement.GotKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotKeyboardFocusEvent
  nameWithType: UIElement.GotKeyboardFocusEvent
  fullName: System.Windows.UIElement.GotKeyboardFocusEvent
- uid: System.Windows.UIElement.GotMouseCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: GotMouseCapture
  nameWithType: UIElement.GotMouseCapture
  fullName: System.Windows.UIElement.GotMouseCapture
- uid: System.Windows.Input.MouseEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Input.MouseEventHandler
- uid: System.Windows.UIElement.GotMouseCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotMouseCaptureEvent
  nameWithType: UIElement.GotMouseCaptureEvent
  fullName: System.Windows.UIElement.GotMouseCaptureEvent
- uid: System.Windows.UIElement.GotStylusCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: GotStylusCapture
  nameWithType: UIElement.GotStylusCapture
  fullName: System.Windows.UIElement.GotStylusCapture
- uid: System.Windows.Input.StylusEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventHandler
  nameWithType: StylusEventHandler
  fullName: System.Windows.Input.StylusEventHandler
- uid: System.Windows.UIElement.GotStylusCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotStylusCaptureEvent
  nameWithType: UIElement.GotStylusCaptureEvent
  fullName: System.Windows.UIElement.GotStylusCaptureEvent
- uid: System.Windows.UIElement.GotTouchCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: GotTouchCapture
  nameWithType: UIElement.GotTouchCapture
  fullName: System.Windows.UIElement.GotTouchCapture
- uid: System.EventHandler{System.Windows.Input.TouchEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<TouchEventArgs>
  nameWithType: EventHandler<TouchEventArgs>
  fullName: System.EventHandler<System.Windows.Input.TouchEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.TouchEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchEventArgs
    name: TouchEventArgs
    nameWithType: TouchEventArgs
    fullName: TouchEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.GotTouchCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotTouchCaptureEvent
  nameWithType: UIElement.GotTouchCaptureEvent
  fullName: System.Windows.UIElement.GotTouchCaptureEvent
- uid: System.Windows.UIElement.HasAnimatedProperties
  parent: System.Windows.UIElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: UIElement.HasAnimatedProperties
  fullName: System.Windows.UIElement.HasAnimatedProperties
- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: HasEffectiveKeyboardFocus
  nameWithType: UIElement.HasEffectiveKeyboardFocus
  fullName: System.Windows.UIElement.HasEffectiveKeyboardFocus
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  parent: System.Windows.UIElement
  isExternal: false
  name: HitTestCore(GeometryHitTestParameters)
  nameWithType: UIElement.HitTestCore(GeometryHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(GeometryHitTestParameters)
- uid: System.Windows.Media.GeometryHitTestResult
  parent: System.Windows.Media
  isExternal: false
  name: GeometryHitTestResult
  nameWithType: GeometryHitTestResult
  fullName: System.Windows.Media.GeometryHitTestResult
- uid: System.Windows.Media.GeometryHitTestParameters
  parent: System.Windows.Media
  isExternal: false
  name: GeometryHitTestParameters
  nameWithType: GeometryHitTestParameters
  fullName: System.Windows.Media.GeometryHitTestParameters
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  parent: System.Windows.UIElement
  isExternal: false
  name: HitTestCore(PointHitTestParameters)
  nameWithType: UIElement.HitTestCore(PointHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(PointHitTestParameters)
- uid: System.Windows.Media.HitTestResult
  parent: System.Windows.Media
  isExternal: false
  name: HitTestResult
  nameWithType: HitTestResult
  fullName: System.Windows.Media.HitTestResult
- uid: System.Windows.Media.PointHitTestParameters
  parent: System.Windows.Media
  isExternal: false
  name: PointHitTestParameters
  nameWithType: PointHitTestParameters
  fullName: System.Windows.Media.PointHitTestParameters
- uid: System.Windows.UIElement.InputBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: InputBindings
  nameWithType: UIElement.InputBindings
  fullName: System.Windows.UIElement.InputBindings
- uid: System.Windows.Input.InputBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputBindingCollection
  nameWithType: InputBindingCollection
  fullName: System.Windows.Input.InputBindingCollection
- uid: System.Windows.UIElement.InputHitTest(System.Windows.Point)
  parent: System.Windows.UIElement
  isExternal: false
  name: InputHitTest(Point)
  nameWithType: UIElement.InputHitTest(Point)
  fullName: System.Windows.UIElement.InputHitTest(Point)
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.UIElement.InvalidateArrange
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateArrange()
  nameWithType: UIElement.InvalidateArrange()
  fullName: System.Windows.UIElement.InvalidateArrange()
- uid: System.Windows.UIElement.InvalidateMeasure
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateMeasure()
  nameWithType: UIElement.InvalidateMeasure()
  fullName: System.Windows.UIElement.InvalidateMeasure()
- uid: System.Windows.UIElement.InvalidateVisual
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateVisual()
  nameWithType: UIElement.InvalidateVisual()
  fullName: System.Windows.UIElement.InvalidateVisual()
- uid: System.Windows.UIElement.IsArrangeValid
  parent: System.Windows.UIElement
  isExternal: false
  name: IsArrangeValid
  nameWithType: UIElement.IsArrangeValid
  fullName: System.Windows.UIElement.IsArrangeValid
- uid: System.Windows.UIElement.IsEnabled
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
  fullName: System.Windows.UIElement.IsEnabled
- uid: System.Windows.UIElement.IsEnabledChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledChanged
  nameWithType: UIElement.IsEnabledChanged
  fullName: System.Windows.UIElement.IsEnabledChanged
- uid: System.Windows.UIElement.IsEnabledCore
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: UIElement.IsEnabledCore
  fullName: System.Windows.UIElement.IsEnabledCore
- uid: System.Windows.UIElement.IsEnabledProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledProperty
  nameWithType: UIElement.IsEnabledProperty
  fullName: System.Windows.UIElement.IsEnabledProperty
- uid: System.Windows.UIElement.IsFocused
  parent: System.Windows.UIElement
  isExternal: false
  name: IsFocused
  nameWithType: UIElement.IsFocused
  fullName: System.Windows.UIElement.IsFocused
- uid: System.Windows.UIElement.IsFocusedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsFocusedProperty
  nameWithType: UIElement.IsFocusedProperty
  fullName: System.Windows.UIElement.IsFocusedProperty
- uid: System.Windows.UIElement.IsHitTestVisible
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
  fullName: System.Windows.UIElement.IsHitTestVisible
- uid: System.Windows.UIElement.IsHitTestVisibleChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisibleChanged
  nameWithType: UIElement.IsHitTestVisibleChanged
  fullName: System.Windows.UIElement.IsHitTestVisibleChanged
- uid: System.Windows.UIElement.IsHitTestVisibleProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisibleProperty
  nameWithType: UIElement.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement.IsHitTestVisibleProperty
- uid: System.Windows.UIElement.IsInputMethodEnabled
  parent: System.Windows.UIElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: UIElement.IsInputMethodEnabled
  fullName: System.Windows.UIElement.IsInputMethodEnabled
- uid: System.Windows.UIElement.IsKeyboardFocused
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: UIElement.IsKeyboardFocused
  fullName: System.Windows.UIElement.IsKeyboardFocused
- uid: System.Windows.UIElement.IsKeyboardFocusedChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusedChanged
  nameWithType: UIElement.IsKeyboardFocusedChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusedChanged
- uid: System.Windows.UIElement.IsKeyboardFocusedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusedProperty
  nameWithType: UIElement.IsKeyboardFocusedProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusedProperty
- uid: System.Windows.UIElement.IsKeyboardFocusWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: UIElement.IsKeyboardFocusWithin
  fullName: System.Windows.UIElement.IsKeyboardFocusWithin
- uid: System.Windows.UIElement.IsKeyboardFocusWithinChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithinChanged
  nameWithType: UIElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinChanged
- uid: System.Windows.UIElement.IsKeyboardFocusWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithinProperty
  nameWithType: UIElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinProperty
- uid: System.Windows.UIElement.IsManipulationEnabled
  parent: System.Windows.UIElement
  isExternal: false
  name: IsManipulationEnabled
  nameWithType: UIElement.IsManipulationEnabled
  fullName: System.Windows.UIElement.IsManipulationEnabled
- uid: System.Windows.UIElement.IsManipulationEnabledProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsManipulationEnabledProperty
  nameWithType: UIElement.IsManipulationEnabledProperty
  fullName: System.Windows.UIElement.IsManipulationEnabledProperty
- uid: System.Windows.UIElement.IsMeasureValid
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMeasureValid
  nameWithType: UIElement.IsMeasureValid
  fullName: System.Windows.UIElement.IsMeasureValid
- uid: System.Windows.UIElement.IsMouseCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
  fullName: System.Windows.UIElement.IsMouseCaptured
- uid: System.Windows.UIElement.IsMouseCapturedChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCapturedChanged
  nameWithType: UIElement.IsMouseCapturedChanged
  fullName: System.Windows.UIElement.IsMouseCapturedChanged
- uid: System.Windows.UIElement.IsMouseCapturedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCapturedProperty
  nameWithType: UIElement.IsMouseCapturedProperty
  fullName: System.Windows.UIElement.IsMouseCapturedProperty
- uid: System.Windows.UIElement.IsMouseCaptureWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: UIElement.IsMouseCaptureWithin
  fullName: System.Windows.UIElement.IsMouseCaptureWithin
- uid: System.Windows.UIElement.IsMouseCaptureWithinChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithinChanged
  nameWithType: UIElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.UIElement.IsMouseCaptureWithinChanged
- uid: System.Windows.UIElement.IsMouseCaptureWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithinProperty
  nameWithType: UIElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.UIElement.IsMouseCaptureWithinProperty
- uid: System.Windows.UIElement.IsMouseDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: UIElement.IsMouseDirectlyOver
  fullName: System.Windows.UIElement.IsMouseDirectlyOver
- uid: System.Windows.UIElement.IsMouseDirectlyOverChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOverChanged
  nameWithType: UIElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.UIElement.IsMouseDirectlyOverChanged
- uid: System.Windows.UIElement.IsMouseDirectlyOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOverProperty
  nameWithType: UIElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.UIElement.IsMouseDirectlyOverProperty
- uid: System.Windows.UIElement.IsMouseOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseOver
  nameWithType: UIElement.IsMouseOver
  fullName: System.Windows.UIElement.IsMouseOver
- uid: System.Windows.UIElement.IsMouseOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseOverProperty
  nameWithType: UIElement.IsMouseOverProperty
  fullName: System.Windows.UIElement.IsMouseOverProperty
- uid: System.Windows.UIElement.IsStylusCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: UIElement.IsStylusCaptured
  fullName: System.Windows.UIElement.IsStylusCaptured
- uid: System.Windows.UIElement.IsStylusCapturedChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCapturedChanged
  nameWithType: UIElement.IsStylusCapturedChanged
  fullName: System.Windows.UIElement.IsStylusCapturedChanged
- uid: System.Windows.UIElement.IsStylusCapturedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCapturedProperty
  nameWithType: UIElement.IsStylusCapturedProperty
  fullName: System.Windows.UIElement.IsStylusCapturedProperty
- uid: System.Windows.UIElement.IsStylusCaptureWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: UIElement.IsStylusCaptureWithin
  fullName: System.Windows.UIElement.IsStylusCaptureWithin
- uid: System.Windows.UIElement.IsStylusCaptureWithinChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithinChanged
  nameWithType: UIElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.UIElement.IsStylusCaptureWithinChanged
- uid: System.Windows.UIElement.IsStylusCaptureWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithinProperty
  nameWithType: UIElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.UIElement.IsStylusCaptureWithinProperty
- uid: System.Windows.UIElement.IsStylusDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: UIElement.IsStylusDirectlyOver
  fullName: System.Windows.UIElement.IsStylusDirectlyOver
- uid: System.Windows.UIElement.IsStylusDirectlyOverChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOverChanged
  nameWithType: UIElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.UIElement.IsStylusDirectlyOverChanged
- uid: System.Windows.UIElement.IsStylusDirectlyOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOverProperty
  nameWithType: UIElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.UIElement.IsStylusDirectlyOverProperty
- uid: System.Windows.UIElement.IsStylusOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusOver
  nameWithType: UIElement.IsStylusOver
  fullName: System.Windows.UIElement.IsStylusOver
- uid: System.Windows.UIElement.IsStylusOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusOverProperty
  nameWithType: UIElement.IsStylusOverProperty
  fullName: System.Windows.UIElement.IsStylusOverProperty
- uid: System.Windows.UIElement.IsVisible
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisible
  nameWithType: UIElement.IsVisible
  fullName: System.Windows.UIElement.IsVisible
- uid: System.Windows.UIElement.IsVisibleChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisibleChanged
  nameWithType: UIElement.IsVisibleChanged
  fullName: System.Windows.UIElement.IsVisibleChanged
- uid: System.Windows.UIElement.IsVisibleProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisibleProperty
  nameWithType: UIElement.IsVisibleProperty
  fullName: System.Windows.UIElement.IsVisibleProperty
- uid: System.Windows.UIElement.KeyDown
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyDown
  nameWithType: UIElement.KeyDown
  fullName: System.Windows.UIElement.KeyDown
- uid: System.Windows.Input.KeyEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventHandler
  nameWithType: KeyEventHandler
  fullName: System.Windows.Input.KeyEventHandler
- uid: System.Windows.UIElement.KeyDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyDownEvent
  nameWithType: UIElement.KeyDownEvent
  fullName: System.Windows.UIElement.KeyDownEvent
- uid: System.Windows.UIElement.KeyUp
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyUp
  nameWithType: UIElement.KeyUp
  fullName: System.Windows.UIElement.KeyUp
- uid: System.Windows.UIElement.KeyUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyUpEvent
  nameWithType: UIElement.KeyUpEvent
  fullName: System.Windows.UIElement.KeyUpEvent
- uid: System.Windows.UIElement.LayoutUpdated
  parent: System.Windows.UIElement
  isExternal: false
  name: LayoutUpdated
  nameWithType: UIElement.LayoutUpdated
  fullName: System.Windows.UIElement.LayoutUpdated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.UIElement.LostFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: LostFocus
  nameWithType: UIElement.LostFocus
  fullName: System.Windows.UIElement.LostFocus
- uid: System.Windows.UIElement.LostFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostFocusEvent
  nameWithType: UIElement.LostFocusEvent
  fullName: System.Windows.UIElement.LostFocusEvent
- uid: System.Windows.UIElement.LostKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: LostKeyboardFocus
  nameWithType: UIElement.LostKeyboardFocus
  fullName: System.Windows.UIElement.LostKeyboardFocus
- uid: System.Windows.UIElement.LostKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostKeyboardFocusEvent
  nameWithType: UIElement.LostKeyboardFocusEvent
  fullName: System.Windows.UIElement.LostKeyboardFocusEvent
- uid: System.Windows.UIElement.LostMouseCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: LostMouseCapture
  nameWithType: UIElement.LostMouseCapture
  fullName: System.Windows.UIElement.LostMouseCapture
- uid: System.Windows.UIElement.LostMouseCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostMouseCaptureEvent
  nameWithType: UIElement.LostMouseCaptureEvent
  fullName: System.Windows.UIElement.LostMouseCaptureEvent
- uid: System.Windows.UIElement.LostStylusCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: LostStylusCapture
  nameWithType: UIElement.LostStylusCapture
  fullName: System.Windows.UIElement.LostStylusCapture
- uid: System.Windows.UIElement.LostStylusCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostStylusCaptureEvent
  nameWithType: UIElement.LostStylusCaptureEvent
  fullName: System.Windows.UIElement.LostStylusCaptureEvent
- uid: System.Windows.UIElement.LostTouchCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: LostTouchCapture
  nameWithType: UIElement.LostTouchCapture
  fullName: System.Windows.UIElement.LostTouchCapture
- uid: System.Windows.UIElement.LostTouchCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostTouchCaptureEvent
  nameWithType: UIElement.LostTouchCaptureEvent
  fullName: System.Windows.UIElement.LostTouchCaptureEvent
- uid: System.Windows.UIElement.ManipulationBoundaryFeedback
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationBoundaryFeedback
  nameWithType: UIElement.ManipulationBoundaryFeedback
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedback
- uid: System.EventHandler{System.Windows.Input.ManipulationBoundaryFeedbackEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationBoundaryFeedbackEventArgs>
  nameWithType: EventHandler<ManipulationBoundaryFeedbackEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
    name: ManipulationBoundaryFeedbackEventArgs
    nameWithType: ManipulationBoundaryFeedbackEventArgs
    fullName: ManipulationBoundaryFeedbackEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationBoundaryFeedbackEvent
  nameWithType: UIElement.ManipulationBoundaryFeedbackEvent
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
- uid: System.Windows.UIElement.ManipulationCompleted
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationCompleted
  nameWithType: UIElement.ManipulationCompleted
  fullName: System.Windows.UIElement.ManipulationCompleted
- uid: System.EventHandler{System.Windows.Input.ManipulationCompletedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationCompletedEventArgs>
  nameWithType: EventHandler<ManipulationCompletedEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationCompletedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationCompletedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationCompletedEventArgs
    name: ManipulationCompletedEventArgs
    nameWithType: ManipulationCompletedEventArgs
    fullName: ManipulationCompletedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationCompletedEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationCompletedEvent
  nameWithType: UIElement.ManipulationCompletedEvent
  fullName: System.Windows.UIElement.ManipulationCompletedEvent
- uid: System.Windows.UIElement.ManipulationDelta
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationDelta
  nameWithType: UIElement.ManipulationDelta
  fullName: System.Windows.UIElement.ManipulationDelta
- uid: System.EventHandler{System.Windows.Input.ManipulationDeltaEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationDeltaEventArgs>
  nameWithType: EventHandler<ManipulationDeltaEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationDeltaEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationDeltaEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationDeltaEventArgs
    name: ManipulationDeltaEventArgs
    nameWithType: ManipulationDeltaEventArgs
    fullName: ManipulationDeltaEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationDeltaEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationDeltaEvent
  nameWithType: UIElement.ManipulationDeltaEvent
  fullName: System.Windows.UIElement.ManipulationDeltaEvent
- uid: System.Windows.UIElement.ManipulationInertiaStarting
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationInertiaStarting
  nameWithType: UIElement.ManipulationInertiaStarting
  fullName: System.Windows.UIElement.ManipulationInertiaStarting
- uid: System.EventHandler{System.Windows.Input.ManipulationInertiaStartingEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationInertiaStartingEventArgs>
  nameWithType: EventHandler<ManipulationInertiaStartingEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationInertiaStartingEventArgs
    name: ManipulationInertiaStartingEventArgs
    nameWithType: ManipulationInertiaStartingEventArgs
    fullName: ManipulationInertiaStartingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationInertiaStartingEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationInertiaStartingEvent
  nameWithType: UIElement.ManipulationInertiaStartingEvent
  fullName: System.Windows.UIElement.ManipulationInertiaStartingEvent
- uid: System.Windows.UIElement.ManipulationStarted
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStarted
  nameWithType: UIElement.ManipulationStarted
  fullName: System.Windows.UIElement.ManipulationStarted
- uid: System.EventHandler{System.Windows.Input.ManipulationStartedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationStartedEventArgs>
  nameWithType: EventHandler<ManipulationStartedEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationStartedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationStartedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationStartedEventArgs
    name: ManipulationStartedEventArgs
    nameWithType: ManipulationStartedEventArgs
    fullName: ManipulationStartedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationStartedEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStartedEvent
  nameWithType: UIElement.ManipulationStartedEvent
  fullName: System.Windows.UIElement.ManipulationStartedEvent
- uid: System.Windows.UIElement.ManipulationStarting
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStarting
  nameWithType: UIElement.ManipulationStarting
  fullName: System.Windows.UIElement.ManipulationStarting
- uid: System.EventHandler{System.Windows.Input.ManipulationStartingEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationStartingEventArgs>
  nameWithType: EventHandler<ManipulationStartingEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationStartingEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationStartingEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationStartingEventArgs
    name: ManipulationStartingEventArgs
    nameWithType: ManipulationStartingEventArgs
    fullName: ManipulationStartingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationStartingEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStartingEvent
  nameWithType: UIElement.ManipulationStartingEvent
  fullName: System.Windows.UIElement.ManipulationStartingEvent
- uid: System.Windows.UIElement.Measure(System.Windows.Size)
  parent: System.Windows.UIElement
  isExternal: false
  name: Measure(Size)
  nameWithType: UIElement.Measure(Size)
  fullName: System.Windows.UIElement.Measure(Size)
- uid: System.Windows.UIElement.MeasureCore(System.Windows.Size)
  parent: System.Windows.UIElement
  isExternal: false
  name: MeasureCore(Size)
  nameWithType: UIElement.MeasureCore(Size)
  fullName: System.Windows.UIElement.MeasureCore(Size)
- uid: System.Windows.UIElement.MouseDown
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseDown
  nameWithType: UIElement.MouseDown
  fullName: System.Windows.UIElement.MouseDown
- uid: System.Windows.Input.MouseButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventHandler
  nameWithType: MouseButtonEventHandler
  fullName: System.Windows.Input.MouseButtonEventHandler
- uid: System.Windows.UIElement.MouseDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseDownEvent
  nameWithType: UIElement.MouseDownEvent
  fullName: System.Windows.UIElement.MouseDownEvent
- uid: System.Windows.UIElement.MouseEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseEnter
  nameWithType: UIElement.MouseEnter
  fullName: System.Windows.UIElement.MouseEnter
- uid: System.Windows.UIElement.MouseEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseEnterEvent
  nameWithType: UIElement.MouseEnterEvent
  fullName: System.Windows.UIElement.MouseEnterEvent
- uid: System.Windows.UIElement.MouseLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeave
  nameWithType: UIElement.MouseLeave
  fullName: System.Windows.UIElement.MouseLeave
- uid: System.Windows.UIElement.MouseLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeaveEvent
  nameWithType: UIElement.MouseLeaveEvent
  fullName: System.Windows.UIElement.MouseLeaveEvent
- uid: System.Windows.UIElement.MouseLeftButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonDown
  nameWithType: UIElement.MouseLeftButtonDown
  fullName: System.Windows.UIElement.MouseLeftButtonDown
- uid: System.Windows.UIElement.MouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.MouseLeftButtonDownEvent
- uid: System.Windows.UIElement.MouseLeftButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonUp
  nameWithType: UIElement.MouseLeftButtonUp
  fullName: System.Windows.UIElement.MouseLeftButtonUp
- uid: System.Windows.UIElement.MouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.MouseLeftButtonUpEvent
- uid: System.Windows.UIElement.MouseMove
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseMove
  nameWithType: UIElement.MouseMove
  fullName: System.Windows.UIElement.MouseMove
- uid: System.Windows.UIElement.MouseMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseMoveEvent
  nameWithType: UIElement.MouseMoveEvent
  fullName: System.Windows.UIElement.MouseMoveEvent
- uid: System.Windows.UIElement.MouseRightButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonDown
  nameWithType: UIElement.MouseRightButtonDown
  fullName: System.Windows.UIElement.MouseRightButtonDown
- uid: System.Windows.UIElement.MouseRightButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonDownEvent
  nameWithType: UIElement.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement.MouseRightButtonDownEvent
- uid: System.Windows.UIElement.MouseRightButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonUp
  nameWithType: UIElement.MouseRightButtonUp
  fullName: System.Windows.UIElement.MouseRightButtonUp
- uid: System.Windows.UIElement.MouseRightButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonUpEvent
  nameWithType: UIElement.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement.MouseRightButtonUpEvent
- uid: System.Windows.UIElement.MouseUp
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseUp
  nameWithType: UIElement.MouseUp
  fullName: System.Windows.UIElement.MouseUp
- uid: System.Windows.UIElement.MouseUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseUpEvent
  nameWithType: UIElement.MouseUpEvent
  fullName: System.Windows.UIElement.MouseUpEvent
- uid: System.Windows.UIElement.MouseWheel
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseWheel
  nameWithType: UIElement.MouseWheel
  fullName: System.Windows.UIElement.MouseWheel
- uid: System.Windows.Input.MouseWheelEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventHandler
  nameWithType: MouseWheelEventHandler
  fullName: System.Windows.Input.MouseWheelEventHandler
- uid: System.Windows.UIElement.MouseWheelEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseWheelEvent
  nameWithType: UIElement.MouseWheelEvent
  fullName: System.Windows.UIElement.MouseWheelEvent
- uid: System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.UIElement
  isExternal: false
  name: MoveFocus(TraversalRequest)
  nameWithType: UIElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.UIElement.MoveFocus(TraversalRequest)
- uid: System.Windows.Input.TraversalRequest
  parent: System.Windows.Input
  isExternal: false
  name: TraversalRequest
  nameWithType: TraversalRequest
  fullName: System.Windows.Input.TraversalRequest
- uid: System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnAccessKey(AccessKeyEventArgs)
  nameWithType: UIElement.OnAccessKey(AccessKeyEventArgs)
  fullName: System.Windows.UIElement.OnAccessKey(AccessKeyEventArgs)
- uid: System.Windows.Input.AccessKeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: AccessKeyEventArgs
  nameWithType: AccessKeyEventArgs
  fullName: System.Windows.Input.AccessKeyEventArgs
- uid: System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnChildDesiredSizeChanged(UIElement)
  nameWithType: UIElement.OnChildDesiredSizeChanged(UIElement)
  fullName: System.Windows.UIElement.OnChildDesiredSizeChanged(UIElement)
- uid: System.Windows.UIElement
  parent: System.Windows
  isExternal: false
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
- uid: System.Windows.UIElement.OnCreateAutomationPeer
  parent: System.Windows.UIElement
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: UIElement.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragEnter(DragEventArgs)
  nameWithType: UIElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragEnter(DragEventArgs)
- uid: System.Windows.DragEventArgs
  parent: System.Windows
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.DragEventArgs
- uid: System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragLeave(DragEventArgs)
  nameWithType: UIElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragLeave(DragEventArgs)
- uid: System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragOver(DragEventArgs)
  nameWithType: UIElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragOver(DragEventArgs)
- uid: System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDrop(DragEventArgs)
  nameWithType: UIElement.OnDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnDrop(DragEventArgs)
- uid: System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.GiveFeedbackEventArgs
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventArgs
  nameWithType: GiveFeedbackEventArgs
  fullName: System.Windows.GiveFeedbackEventArgs
- uid: System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnGotFocus(RoutedEventArgs)
- uid: System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.Input.KeyboardFocusChangedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventArgs
  nameWithType: KeyboardFocusChangedEventArgs
  fullName: System.Windows.Input.KeyboardFocusChangedEventArgs
- uid: System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnGotMouseCapture(MouseEventArgs)
- uid: System.Windows.Input.MouseEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Input.MouseEventArgs
- uid: System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnGotStylusCapture(StylusEventArgs)
- uid: System.Windows.Input.StylusEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventArgs
  nameWithType: StylusEventArgs
  fullName: System.Windows.Input.StylusEventArgs
- uid: System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnGotTouchCapture(TouchEventArgs)
- uid: System.Windows.Input.TouchEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TouchEventArgs
  nameWithType: TouchEventArgs
  fullName: System.Windows.Input.TouchEventArgs
- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyDown(KeyEventArgs)
- uid: System.Windows.Input.KeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
- uid: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyUp(KeyEventArgs)
- uid: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnLostFocus(RoutedEventArgs)
- uid: System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnLostMouseCapture(MouseEventArgs)
- uid: System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnLostStylusCapture(StylusEventArgs)
- uid: System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnLostTouchCapture(TouchEventArgs)
- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
- uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationBoundaryFeedbackEventArgs
  nameWithType: ManipulationBoundaryFeedbackEventArgs
  fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
- uid: System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationCompleted(ManipulationCompletedEventArgs)
  nameWithType: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
- uid: System.Windows.Input.ManipulationCompletedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationCompletedEventArgs
  nameWithType: ManipulationCompletedEventArgs
  fullName: System.Windows.Input.ManipulationCompletedEventArgs
- uid: System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationDelta(ManipulationDeltaEventArgs)
  nameWithType: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
  fullName: System.Windows.UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
- uid: System.Windows.Input.ManipulationDeltaEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationDeltaEventArgs
  nameWithType: ManipulationDeltaEventArgs
  fullName: System.Windows.Input.ManipulationDeltaEventArgs
- uid: System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  nameWithType: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
- uid: System.Windows.Input.ManipulationInertiaStartingEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationInertiaStartingEventArgs
  nameWithType: ManipulationInertiaStartingEventArgs
  fullName: System.Windows.Input.ManipulationInertiaStartingEventArgs
- uid: System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarted(ManipulationStartedEventArgs)
  nameWithType: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
- uid: System.Windows.Input.ManipulationStartedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationStartedEventArgs
  nameWithType: ManipulationStartedEventArgs
  fullName: System.Windows.Input.ManipulationStartedEventArgs
- uid: System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarting(ManipulationStartingEventArgs)
  nameWithType: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
- uid: System.Windows.Input.ManipulationStartingEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationStartingEventArgs
  nameWithType: ManipulationStartingEventArgs
  fullName: System.Windows.Input.ManipulationStartingEventArgs
- uid: System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseDown(MouseButtonEventArgs)
- uid: System.Windows.Input.MouseButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventArgs
  nameWithType: MouseButtonEventArgs
  fullName: System.Windows.Input.MouseButtonEventArgs
- uid: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseEnter(MouseEventArgs)
- uid: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeave(MouseEventArgs)
- uid: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseMove(MouseEventArgs)
- uid: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.Input.MouseWheelEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs
  fullName: System.Windows.Input.MouseWheelEventArgs
- uid: System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragEnter(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragLeave(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragOver(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: UIElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDrop(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyDown(KeyEventArgs)
- uid: System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyUp(KeyEventArgs)
- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseMove(MouseEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.QueryContinueDragEventArgs
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventArgs
  nameWithType: QueryContinueDragEventArgs
  fullName: System.Windows.QueryContinueDragEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.Input.StylusButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventArgs
  nameWithType: StylusButtonEventArgs
  fullName: System.Windows.Input.StylusButtonEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusDown(StylusDownEventArgs)
- uid: System.Windows.Input.StylusDownEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventArgs
  nameWithType: StylusDownEventArgs
  fullName: System.Windows.Input.StylusDownEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.Input.StylusSystemGestureEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventArgs
  nameWithType: StylusSystemGestureEventArgs
  fullName: System.Windows.Input.StylusSystemGestureEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusUp(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTextInput(TextCompositionEventArgs)
- uid: System.Windows.Input.TextCompositionEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventArgs
  nameWithType: TextCompositionEventArgs
  fullName: System.Windows.Input.TextCompositionEventArgs
- uid: System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchDown(TouchEventArgs)
- uid: System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchMove(TouchEventArgs)
- uid: System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchUp(TouchEventArgs)
- uid: System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: UIElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.UIElement.OnQueryCursor(QueryCursorEventArgs)
- uid: System.Windows.Input.QueryCursorEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventArgs
  nameWithType: QueryCursorEventArgs
  fullName: System.Windows.Input.QueryCursorEventArgs
- uid: System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRender(DrawingContext)
  nameWithType: UIElement.OnRender(DrawingContext)
  fullName: System.Windows.UIElement.OnRender(DrawingContext)
- uid: System.Windows.Media.DrawingContext
  parent: System.Windows.Media
  isExternal: false
  name: DrawingContext
  nameWithType: DrawingContext
  fullName: System.Windows.Media.DrawingContext
- uid: System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRenderSizeChanged(SizeChangedInfo)
  nameWithType: UIElement.OnRenderSizeChanged(SizeChangedInfo)
  fullName: System.Windows.UIElement.OnRenderSizeChanged(SizeChangedInfo)
- uid: System.Windows.SizeChangedInfo
  parent: System.Windows
  isExternal: false
  name: SizeChangedInfo
  nameWithType: SizeChangedInfo
  fullName: System.Windows.SizeChangedInfo
- uid: System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnStylusDown(StylusDownEventArgs)
- uid: System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: UIElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusEnter(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInAirMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: UIElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusLeave(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusUp(StylusEventArgs)
- uid: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnTextInput(TextCompositionEventArgs)
- uid: System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchDown(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: UIElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchEnter(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: UIElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchLeave(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchMove(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchUp(TouchEventArgs)
- uid: System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.UIElement.Opacity
  parent: System.Windows.UIElement
  isExternal: false
  name: Opacity
  nameWithType: UIElement.Opacity
  fullName: System.Windows.UIElement.Opacity
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.UIElement.OpacityMask
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
  fullName: System.Windows.UIElement.OpacityMask
- uid: System.Windows.Media.Brush
  parent: System.Windows.Media
  isExternal: false
  name: Brush
  nameWithType: Brush
  fullName: System.Windows.Media.Brush
- uid: System.Windows.UIElement.OpacityMaskProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityMaskProperty
  nameWithType: UIElement.OpacityMaskProperty
  fullName: System.Windows.UIElement.OpacityMaskProperty
- uid: System.Windows.UIElement.OpacityProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityProperty
  nameWithType: UIElement.OpacityProperty
  fullName: System.Windows.UIElement.OpacityProperty
- uid: System.Windows.UIElement.PersistId
  parent: System.Windows.UIElement
  isExternal: false
  name: PersistId
  nameWithType: UIElement.PersistId
  fullName: System.Windows.UIElement.PersistId
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.UIElement
  isExternal: false
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: UIElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.UIElement.PredictFocus(FocusNavigationDirection)
- uid: System.Windows.Input.FocusNavigationDirection
  parent: System.Windows.Input
  isExternal: false
  name: FocusNavigationDirection
  nameWithType: FocusNavigationDirection
  fullName: System.Windows.Input.FocusNavigationDirection
- uid: System.Windows.UIElement.PreviewDragEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragEnter
  nameWithType: UIElement.PreviewDragEnter
  fullName: System.Windows.UIElement.PreviewDragEnter
- uid: System.Windows.UIElement.PreviewDragEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragEnterEvent
  nameWithType: UIElement.PreviewDragEnterEvent
  fullName: System.Windows.UIElement.PreviewDragEnterEvent
- uid: System.Windows.UIElement.PreviewDragLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragLeave
  nameWithType: UIElement.PreviewDragLeave
  fullName: System.Windows.UIElement.PreviewDragLeave
- uid: System.Windows.UIElement.PreviewDragLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragLeaveEvent
  nameWithType: UIElement.PreviewDragLeaveEvent
  fullName: System.Windows.UIElement.PreviewDragLeaveEvent
- uid: System.Windows.UIElement.PreviewDragOver
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragOver
  nameWithType: UIElement.PreviewDragOver
  fullName: System.Windows.UIElement.PreviewDragOver
- uid: System.Windows.UIElement.PreviewDragOverEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragOverEvent
  nameWithType: UIElement.PreviewDragOverEvent
  fullName: System.Windows.UIElement.PreviewDragOverEvent
- uid: System.Windows.UIElement.PreviewDrop
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDrop
  nameWithType: UIElement.PreviewDrop
  fullName: System.Windows.UIElement.PreviewDrop
- uid: System.Windows.UIElement.PreviewDropEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDropEvent
  nameWithType: UIElement.PreviewDropEvent
  fullName: System.Windows.UIElement.PreviewDropEvent
- uid: System.Windows.UIElement.PreviewGiveFeedback
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGiveFeedback
  nameWithType: UIElement.PreviewGiveFeedback
  fullName: System.Windows.UIElement.PreviewGiveFeedback
- uid: System.Windows.UIElement.PreviewGiveFeedbackEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGiveFeedbackEvent
  nameWithType: UIElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.UIElement.PreviewGiveFeedbackEvent
- uid: System.Windows.UIElement.PreviewGotKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGotKeyboardFocus
  nameWithType: UIElement.PreviewGotKeyboardFocus
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocus
- uid: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGotKeyboardFocusEvent
  nameWithType: UIElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
- uid: System.Windows.UIElement.PreviewKeyDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyDown
  nameWithType: UIElement.PreviewKeyDown
  fullName: System.Windows.UIElement.PreviewKeyDown
- uid: System.Windows.UIElement.PreviewKeyDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyDownEvent
  nameWithType: UIElement.PreviewKeyDownEvent
  fullName: System.Windows.UIElement.PreviewKeyDownEvent
- uid: System.Windows.UIElement.PreviewKeyUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyUp
  nameWithType: UIElement.PreviewKeyUp
  fullName: System.Windows.UIElement.PreviewKeyUp
- uid: System.Windows.UIElement.PreviewKeyUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyUpEvent
  nameWithType: UIElement.PreviewKeyUpEvent
  fullName: System.Windows.UIElement.PreviewKeyUpEvent
- uid: System.Windows.UIElement.PreviewLostKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewLostKeyboardFocus
  nameWithType: UIElement.PreviewLostKeyboardFocus
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocus
- uid: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewLostKeyboardFocusEvent
  nameWithType: UIElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
- uid: System.Windows.UIElement.PreviewMouseDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseDown
  nameWithType: UIElement.PreviewMouseDown
  fullName: System.Windows.UIElement.PreviewMouseDown
- uid: System.Windows.UIElement.PreviewMouseDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseDownEvent
  nameWithType: UIElement.PreviewMouseDownEvent
  fullName: System.Windows.UIElement.PreviewMouseDownEvent
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonDown
  nameWithType: UIElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDown
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: UIElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonUp
  nameWithType: UIElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUp
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: UIElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
- uid: System.Windows.UIElement.PreviewMouseMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseMove
  nameWithType: UIElement.PreviewMouseMove
  fullName: System.Windows.UIElement.PreviewMouseMove
- uid: System.Windows.UIElement.PreviewMouseMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseMoveEvent
  nameWithType: UIElement.PreviewMouseMoveEvent
  fullName: System.Windows.UIElement.PreviewMouseMoveEvent
- uid: System.Windows.UIElement.PreviewMouseRightButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonDown
  nameWithType: UIElement.PreviewMouseRightButtonDown
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDown
- uid: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonDownEvent
  nameWithType: UIElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
- uid: System.Windows.UIElement.PreviewMouseRightButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonUp
  nameWithType: UIElement.PreviewMouseRightButtonUp
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUp
- uid: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonUpEvent
  nameWithType: UIElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
- uid: System.Windows.UIElement.PreviewMouseUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseUp
  nameWithType: UIElement.PreviewMouseUp
  fullName: System.Windows.UIElement.PreviewMouseUp
- uid: System.Windows.UIElement.PreviewMouseUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseUpEvent
  nameWithType: UIElement.PreviewMouseUpEvent
  fullName: System.Windows.UIElement.PreviewMouseUpEvent
- uid: System.Windows.UIElement.PreviewMouseWheel
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseWheel
  nameWithType: UIElement.PreviewMouseWheel
  fullName: System.Windows.UIElement.PreviewMouseWheel
- uid: System.Windows.UIElement.PreviewMouseWheelEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseWheelEvent
  nameWithType: UIElement.PreviewMouseWheelEvent
  fullName: System.Windows.UIElement.PreviewMouseWheelEvent
- uid: System.Windows.UIElement.PreviewQueryContinueDrag
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewQueryContinueDrag
  nameWithType: UIElement.PreviewQueryContinueDrag
  fullName: System.Windows.UIElement.PreviewQueryContinueDrag
- uid: System.Windows.QueryContinueDragEventHandler
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventHandler
  nameWithType: QueryContinueDragEventHandler
  fullName: System.Windows.QueryContinueDragEventHandler
- uid: System.Windows.UIElement.PreviewQueryContinueDragEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewQueryContinueDragEvent
  nameWithType: UIElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.UIElement.PreviewQueryContinueDragEvent
- uid: System.Windows.UIElement.PreviewStylusButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonDown
  nameWithType: UIElement.PreviewStylusButtonDown
  fullName: System.Windows.UIElement.PreviewStylusButtonDown
- uid: System.Windows.Input.StylusButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventHandler
  nameWithType: StylusButtonEventHandler
  fullName: System.Windows.Input.StylusButtonEventHandler
- uid: System.Windows.UIElement.PreviewStylusButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonDownEvent
  nameWithType: UIElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonDownEvent
- uid: System.Windows.UIElement.PreviewStylusButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonUp
  nameWithType: UIElement.PreviewStylusButtonUp
  fullName: System.Windows.UIElement.PreviewStylusButtonUp
- uid: System.Windows.UIElement.PreviewStylusButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonUpEvent
  nameWithType: UIElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonUpEvent
- uid: System.Windows.UIElement.PreviewStylusDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusDown
  nameWithType: UIElement.PreviewStylusDown
  fullName: System.Windows.UIElement.PreviewStylusDown
- uid: System.Windows.Input.StylusDownEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventHandler
  nameWithType: StylusDownEventHandler
  fullName: System.Windows.Input.StylusDownEventHandler
- uid: System.Windows.UIElement.PreviewStylusDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusDownEvent
  nameWithType: UIElement.PreviewStylusDownEvent
  fullName: System.Windows.UIElement.PreviewStylusDownEvent
- uid: System.Windows.UIElement.PreviewStylusInAirMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInAirMove
  nameWithType: UIElement.PreviewStylusInAirMove
  fullName: System.Windows.UIElement.PreviewStylusInAirMove
- uid: System.Windows.UIElement.PreviewStylusInAirMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInAirMoveEvent
  nameWithType: UIElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusInAirMoveEvent
- uid: System.Windows.UIElement.PreviewStylusInRange
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInRange
  nameWithType: UIElement.PreviewStylusInRange
  fullName: System.Windows.UIElement.PreviewStylusInRange
- uid: System.Windows.UIElement.PreviewStylusInRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInRangeEvent
  nameWithType: UIElement.PreviewStylusInRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusInRangeEvent
- uid: System.Windows.UIElement.PreviewStylusMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusMove
  nameWithType: UIElement.PreviewStylusMove
  fullName: System.Windows.UIElement.PreviewStylusMove
- uid: System.Windows.UIElement.PreviewStylusMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusMoveEvent
  nameWithType: UIElement.PreviewStylusMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusMoveEvent
- uid: System.Windows.UIElement.PreviewStylusOutOfRange
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusOutOfRange
  nameWithType: UIElement.PreviewStylusOutOfRange
  fullName: System.Windows.UIElement.PreviewStylusOutOfRange
- uid: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusOutOfRangeEvent
  nameWithType: UIElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
- uid: System.Windows.UIElement.PreviewStylusSystemGesture
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusSystemGesture
  nameWithType: UIElement.PreviewStylusSystemGesture
  fullName: System.Windows.UIElement.PreviewStylusSystemGesture
- uid: System.Windows.Input.StylusSystemGestureEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventHandler
  nameWithType: StylusSystemGestureEventHandler
  fullName: System.Windows.Input.StylusSystemGestureEventHandler
- uid: System.Windows.UIElement.PreviewStylusSystemGestureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusSystemGestureEvent
  nameWithType: UIElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.UIElement.PreviewStylusSystemGestureEvent
- uid: System.Windows.UIElement.PreviewStylusUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusUp
  nameWithType: UIElement.PreviewStylusUp
  fullName: System.Windows.UIElement.PreviewStylusUp
- uid: System.Windows.UIElement.PreviewStylusUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusUpEvent
  nameWithType: UIElement.PreviewStylusUpEvent
  fullName: System.Windows.UIElement.PreviewStylusUpEvent
- uid: System.Windows.UIElement.PreviewTextInput
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTextInput
  nameWithType: UIElement.PreviewTextInput
  fullName: System.Windows.UIElement.PreviewTextInput
- uid: System.Windows.Input.TextCompositionEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventHandler
  nameWithType: TextCompositionEventHandler
  fullName: System.Windows.Input.TextCompositionEventHandler
- uid: System.Windows.UIElement.PreviewTextInputEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTextInputEvent
  nameWithType: UIElement.PreviewTextInputEvent
  fullName: System.Windows.UIElement.PreviewTextInputEvent
- uid: System.Windows.UIElement.PreviewTouchDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchDown
  nameWithType: UIElement.PreviewTouchDown
  fullName: System.Windows.UIElement.PreviewTouchDown
- uid: System.Windows.UIElement.PreviewTouchDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchDownEvent
  nameWithType: UIElement.PreviewTouchDownEvent
  fullName: System.Windows.UIElement.PreviewTouchDownEvent
- uid: System.Windows.UIElement.PreviewTouchMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchMove
  nameWithType: UIElement.PreviewTouchMove
  fullName: System.Windows.UIElement.PreviewTouchMove
- uid: System.Windows.UIElement.PreviewTouchMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchMoveEvent
  nameWithType: UIElement.PreviewTouchMoveEvent
  fullName: System.Windows.UIElement.PreviewTouchMoveEvent
- uid: System.Windows.UIElement.PreviewTouchUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchUp
  nameWithType: UIElement.PreviewTouchUp
  fullName: System.Windows.UIElement.PreviewTouchUp
- uid: System.Windows.UIElement.PreviewTouchUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchUpEvent
  nameWithType: UIElement.PreviewTouchUpEvent
  fullName: System.Windows.UIElement.PreviewTouchUpEvent
- uid: System.Windows.UIElement.QueryContinueDrag
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryContinueDrag
  nameWithType: UIElement.QueryContinueDrag
  fullName: System.Windows.UIElement.QueryContinueDrag
- uid: System.Windows.UIElement.QueryContinueDragEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryContinueDragEvent
  nameWithType: UIElement.QueryContinueDragEvent
  fullName: System.Windows.UIElement.QueryContinueDragEvent
- uid: System.Windows.UIElement.QueryCursor
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryCursor
  nameWithType: UIElement.QueryCursor
  fullName: System.Windows.UIElement.QueryCursor
- uid: System.Windows.Input.QueryCursorEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventHandler
  nameWithType: QueryCursorEventHandler
  fullName: System.Windows.Input.QueryCursorEventHandler
- uid: System.Windows.UIElement.QueryCursorEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryCursorEvent
  nameWithType: UIElement.QueryCursorEvent
  fullName: System.Windows.UIElement.QueryCursorEvent
- uid: System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: UIElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.UIElement.RaiseEvent(RoutedEventArgs)
- uid: System.Windows.UIElement.ReleaseAllTouchCaptures
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseAllTouchCaptures()
  nameWithType: UIElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.UIElement.ReleaseAllTouchCaptures()
- uid: System.Windows.UIElement.ReleaseMouseCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseMouseCapture()
  nameWithType: UIElement.ReleaseMouseCapture()
  fullName: System.Windows.UIElement.ReleaseMouseCapture()
- uid: System.Windows.UIElement.ReleaseStylusCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseStylusCapture()
  nameWithType: UIElement.ReleaseStylusCapture()
  fullName: System.Windows.UIElement.ReleaseStylusCapture()
- uid: System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: UIElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.UIElement.ReleaseTouchCapture(TouchDevice)
- uid: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  isExternal: false
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.RemoveHandler(RoutedEvent,Delegate)
- uid: System.Windows.UIElement.RenderSize
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderSize
  nameWithType: UIElement.RenderSize
  fullName: System.Windows.UIElement.RenderSize
- uid: System.Windows.UIElement.RenderTransform
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
  fullName: System.Windows.UIElement.RenderTransform
- uid: System.Windows.Media.Transform
  parent: System.Windows.Media
  isExternal: false
  name: Transform
  nameWithType: Transform
  fullName: System.Windows.Media.Transform
- uid: System.Windows.UIElement.RenderTransformOrigin
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
  fullName: System.Windows.UIElement.RenderTransformOrigin
- uid: System.Windows.UIElement.RenderTransformOriginProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformOriginProperty
  nameWithType: UIElement.RenderTransformOriginProperty
  fullName: System.Windows.UIElement.RenderTransformOriginProperty
- uid: System.Windows.UIElement.RenderTransformProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformProperty
  nameWithType: UIElement.RenderTransformProperty
  fullName: System.Windows.UIElement.RenderTransformProperty
- uid: System.Windows.UIElement.ShouldSerializeCommandBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeCommandBindings()
  nameWithType: UIElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.UIElement.ShouldSerializeCommandBindings()
- uid: System.Windows.UIElement.ShouldSerializeInputBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeInputBindings()
  nameWithType: UIElement.ShouldSerializeInputBindings()
  fullName: System.Windows.UIElement.ShouldSerializeInputBindings()
- uid: System.Windows.UIElement.SnapsToDevicePixels
  parent: System.Windows.UIElement
  isExternal: false
  name: SnapsToDevicePixels
  nameWithType: UIElement.SnapsToDevicePixels
  fullName: System.Windows.UIElement.SnapsToDevicePixels
- uid: System.Windows.UIElement.SnapsToDevicePixelsProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: SnapsToDevicePixelsProperty
  nameWithType: UIElement.SnapsToDevicePixelsProperty
  fullName: System.Windows.UIElement.SnapsToDevicePixelsProperty
- uid: System.Windows.UIElement.StylusButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonDown
  nameWithType: UIElement.StylusButtonDown
  fullName: System.Windows.UIElement.StylusButtonDown
- uid: System.Windows.UIElement.StylusButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonDownEvent
  nameWithType: UIElement.StylusButtonDownEvent
  fullName: System.Windows.UIElement.StylusButtonDownEvent
- uid: System.Windows.UIElement.StylusButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonUp
  nameWithType: UIElement.StylusButtonUp
  fullName: System.Windows.UIElement.StylusButtonUp
- uid: System.Windows.UIElement.StylusButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonUpEvent
  nameWithType: UIElement.StylusButtonUpEvent
  fullName: System.Windows.UIElement.StylusButtonUpEvent
- uid: System.Windows.UIElement.StylusDown
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusDown
  nameWithType: UIElement.StylusDown
  fullName: System.Windows.UIElement.StylusDown
- uid: System.Windows.UIElement.StylusDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusDownEvent
  nameWithType: UIElement.StylusDownEvent
  fullName: System.Windows.UIElement.StylusDownEvent
- uid: System.Windows.UIElement.StylusEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusEnter
  nameWithType: UIElement.StylusEnter
  fullName: System.Windows.UIElement.StylusEnter
- uid: System.Windows.UIElement.StylusEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusEnterEvent
  nameWithType: UIElement.StylusEnterEvent
  fullName: System.Windows.UIElement.StylusEnterEvent
- uid: System.Windows.UIElement.StylusInAirMove
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInAirMove
  nameWithType: UIElement.StylusInAirMove
  fullName: System.Windows.UIElement.StylusInAirMove
- uid: System.Windows.UIElement.StylusInAirMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInAirMoveEvent
  nameWithType: UIElement.StylusInAirMoveEvent
  fullName: System.Windows.UIElement.StylusInAirMoveEvent
- uid: System.Windows.UIElement.StylusInRange
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInRange
  nameWithType: UIElement.StylusInRange
  fullName: System.Windows.UIElement.StylusInRange
- uid: System.Windows.UIElement.StylusInRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInRangeEvent
  nameWithType: UIElement.StylusInRangeEvent
  fullName: System.Windows.UIElement.StylusInRangeEvent
- uid: System.Windows.UIElement.StylusLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusLeave
  nameWithType: UIElement.StylusLeave
  fullName: System.Windows.UIElement.StylusLeave
- uid: System.Windows.UIElement.StylusLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusLeaveEvent
  nameWithType: UIElement.StylusLeaveEvent
  fullName: System.Windows.UIElement.StylusLeaveEvent
- uid: System.Windows.UIElement.StylusMove
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusMove
  nameWithType: UIElement.StylusMove
  fullName: System.Windows.UIElement.StylusMove
- uid: System.Windows.UIElement.StylusMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusMoveEvent
  nameWithType: UIElement.StylusMoveEvent
  fullName: System.Windows.UIElement.StylusMoveEvent
- uid: System.Windows.UIElement.StylusOutOfRange
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusOutOfRange
  nameWithType: UIElement.StylusOutOfRange
  fullName: System.Windows.UIElement.StylusOutOfRange
- uid: System.Windows.UIElement.StylusOutOfRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusOutOfRangeEvent
  nameWithType: UIElement.StylusOutOfRangeEvent
  fullName: System.Windows.UIElement.StylusOutOfRangeEvent
- uid: System.Windows.UIElement.StylusPlugIns
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusPlugIns
  nameWithType: UIElement.StylusPlugIns
  fullName: System.Windows.UIElement.StylusPlugIns
- uid: System.Windows.Input.StylusPlugIns.StylusPlugInCollection
  parent: System.Windows.Input.StylusPlugIns
  isExternal: false
  name: StylusPlugInCollection
  nameWithType: StylusPlugInCollection
  fullName: System.Windows.Input.StylusPlugIns.StylusPlugInCollection
- uid: System.Windows.UIElement.StylusSystemGesture
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusSystemGesture
  nameWithType: UIElement.StylusSystemGesture
  fullName: System.Windows.UIElement.StylusSystemGesture
- uid: System.Windows.UIElement.StylusSystemGestureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusSystemGestureEvent
  nameWithType: UIElement.StylusSystemGestureEvent
  fullName: System.Windows.UIElement.StylusSystemGestureEvent
- uid: System.Windows.UIElement.StylusUp
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusUp
  nameWithType: UIElement.StylusUp
  fullName: System.Windows.UIElement.StylusUp
- uid: System.Windows.UIElement.StylusUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusUpEvent
  nameWithType: UIElement.StylusUpEvent
  fullName: System.Windows.UIElement.StylusUpEvent
- uid: System.Windows.UIElement.TextInput
  parent: System.Windows.UIElement
  isExternal: false
  name: TextInput
  nameWithType: UIElement.TextInput
  fullName: System.Windows.UIElement.TextInput
- uid: System.Windows.UIElement.TextInputEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TextInputEvent
  nameWithType: UIElement.TextInputEvent
  fullName: System.Windows.UIElement.TextInputEvent
- uid: System.Windows.UIElement.TouchDown
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchDown
  nameWithType: UIElement.TouchDown
  fullName: System.Windows.UIElement.TouchDown
- uid: System.Windows.UIElement.TouchDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchDownEvent
  nameWithType: UIElement.TouchDownEvent
  fullName: System.Windows.UIElement.TouchDownEvent
- uid: System.Windows.UIElement.TouchEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchEnter
  nameWithType: UIElement.TouchEnter
  fullName: System.Windows.UIElement.TouchEnter
- uid: System.Windows.UIElement.TouchEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchEnterEvent
  nameWithType: UIElement.TouchEnterEvent
  fullName: System.Windows.UIElement.TouchEnterEvent
- uid: System.Windows.UIElement.TouchesCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: UIElement.TouchesCaptured
  fullName: System.Windows.UIElement.TouchesCaptured
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TouchDevice>
  nameWithType: IEnumerable<TouchDevice>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.TouchDevice>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchDevice
    name: TouchDevice
    nameWithType: TouchDevice
    fullName: TouchDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.TouchesCapturedWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: UIElement.TouchesCapturedWithin
  fullName: System.Windows.UIElement.TouchesCapturedWithin
- uid: System.Windows.UIElement.TouchesDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: UIElement.TouchesDirectlyOver
  fullName: System.Windows.UIElement.TouchesDirectlyOver
- uid: System.Windows.UIElement.TouchesOver
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesOver
  nameWithType: UIElement.TouchesOver
  fullName: System.Windows.UIElement.TouchesOver
- uid: System.Windows.UIElement.TouchLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchLeave
  nameWithType: UIElement.TouchLeave
  fullName: System.Windows.UIElement.TouchLeave
- uid: System.Windows.UIElement.TouchLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchLeaveEvent
  nameWithType: UIElement.TouchLeaveEvent
  fullName: System.Windows.UIElement.TouchLeaveEvent
- uid: System.Windows.UIElement.TouchMove
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchMove
  nameWithType: UIElement.TouchMove
  fullName: System.Windows.UIElement.TouchMove
- uid: System.Windows.UIElement.TouchMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchMoveEvent
  nameWithType: UIElement.TouchMoveEvent
  fullName: System.Windows.UIElement.TouchMoveEvent
- uid: System.Windows.UIElement.TouchUp
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchUp
  nameWithType: UIElement.TouchUp
  fullName: System.Windows.UIElement.TouchUp
- uid: System.Windows.UIElement.TouchUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchUpEvent
  nameWithType: UIElement.TouchUpEvent
  fullName: System.Windows.UIElement.TouchUpEvent
- uid: System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  parent: System.Windows.UIElement
  isExternal: false
  name: TranslatePoint(Point,UIElement)
  nameWithType: UIElement.TranslatePoint(Point,UIElement)
  fullName: System.Windows.UIElement.TranslatePoint(Point,UIElement)
- uid: System.Windows.UIElement.Uid
  parent: System.Windows.UIElement
  isExternal: false
  name: Uid
  nameWithType: UIElement.Uid
  fullName: System.Windows.UIElement.Uid
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.UIElement.UidProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: UidProperty
  nameWithType: UIElement.UidProperty
  fullName: System.Windows.UIElement.UidProperty
- uid: System.Windows.UIElement.UpdateLayout
  parent: System.Windows.UIElement
  isExternal: false
  name: UpdateLayout()
  nameWithType: UIElement.UpdateLayout()
  fullName: System.Windows.UIElement.UpdateLayout()
- uid: System.Windows.UIElement.Visibility
  parent: System.Windows.UIElement
  isExternal: false
  name: Visibility
  nameWithType: UIElement.Visibility
  fullName: System.Windows.UIElement.Visibility
- uid: System.Windows.Visibility
  parent: System.Windows
  isExternal: false
  name: Visibility
  nameWithType: Visibility
  fullName: System.Windows.Visibility
- uid: System.Windows.UIElement.VisibilityProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: VisibilityProperty
  nameWithType: UIElement.VisibilityProperty
  fullName: System.Windows.UIElement.VisibilityProperty
- uid: System.Windows.UIElement.#ctor*
  parent: System.Windows.UIElement
  isExternal: false
  name: UIElement
  nameWithType: UIElement.UIElement
- uid: System.Windows.UIElement.AddHandler*
  parent: System.Windows.UIElement
  isExternal: false
  name: AddHandler
  nameWithType: UIElement.AddHandler
- uid: System.Windows.UIElement.AddToEventRoute*
  parent: System.Windows.UIElement
  isExternal: false
  name: AddToEventRoute
  nameWithType: UIElement.AddToEventRoute
- uid: System.Windows.UIElement.AllowDrop*
  parent: System.Windows.UIElement
  isExternal: false
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
- uid: System.Windows.UIElement.ApplyAnimationClock*
  parent: System.Windows.UIElement
  isExternal: false
  name: ApplyAnimationClock
  nameWithType: UIElement.ApplyAnimationClock
- uid: System.Windows.UIElement.AreAnyTouchesCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: UIElement.AreAnyTouchesCaptured
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.UIElement.AreAnyTouchesOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: UIElement.AreAnyTouchesOver
- uid: System.Windows.UIElement.Arrange*
  parent: System.Windows.UIElement
  isExternal: false
  name: Arrange
  nameWithType: UIElement.Arrange
- uid: System.Windows.UIElement.ArrangeCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: ArrangeCore
  nameWithType: UIElement.ArrangeCore
- uid: System.Windows.UIElement.BeginAnimation*
  parent: System.Windows.UIElement
  isExternal: false
  name: BeginAnimation
  nameWithType: UIElement.BeginAnimation
- uid: System.Windows.UIElement.BitmapEffect*
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffect
  nameWithType: UIElement.BitmapEffect
- uid: System.Windows.UIElement.BitmapEffectInput*
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectInput
  nameWithType: UIElement.BitmapEffectInput
- uid: System.Windows.UIElement.CacheMode*
  parent: System.Windows.UIElement
  isExternal: false
  name: CacheMode
  nameWithType: UIElement.CacheMode
- uid: System.Windows.UIElement.CaptureMouse*
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureMouse
  nameWithType: UIElement.CaptureMouse
- uid: System.Windows.UIElement.CaptureStylus*
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureStylus
  nameWithType: UIElement.CaptureStylus
- uid: System.Windows.UIElement.CaptureTouch*
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureTouch
  nameWithType: UIElement.CaptureTouch
- uid: System.Windows.UIElement.Clip*
  parent: System.Windows.UIElement
  isExternal: false
  name: Clip
  nameWithType: UIElement.Clip
- uid: System.Windows.UIElement.ClipToBounds*
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
- uid: System.Windows.UIElement.CommandBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: CommandBindings
  nameWithType: UIElement.CommandBindings
- uid: System.Windows.UIElement.DesiredSize*
  parent: System.Windows.UIElement
  isExternal: false
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
- uid: System.Windows.UIElement.Effect*
  parent: System.Windows.UIElement
  isExternal: false
  name: Effect
  nameWithType: UIElement.Effect
- uid: System.Windows.UIElement.Focus*
  parent: System.Windows.UIElement
  isExternal: false
  name: Focus
  nameWithType: UIElement.Focus
- uid: System.Windows.UIElement.Focusable*
  parent: System.Windows.UIElement
  isExternal: false
  name: Focusable
  nameWithType: UIElement.Focusable
- uid: System.Windows.UIElement.GetAnimationBaseValue*
  parent: System.Windows.UIElement
  isExternal: false
  name: GetAnimationBaseValue
  nameWithType: UIElement.GetAnimationBaseValue
- uid: System.Windows.UIElement.GetLayoutClip*
  parent: System.Windows.UIElement
  isExternal: false
  name: GetLayoutClip
  nameWithType: UIElement.GetLayoutClip
- uid: System.Windows.UIElement.GetUIParentCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: GetUIParentCore
  nameWithType: UIElement.GetUIParentCore
- uid: System.Windows.UIElement.HasAnimatedProperties*
  parent: System.Windows.UIElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: UIElement.HasAnimatedProperties
- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: HasEffectiveKeyboardFocus
  nameWithType: UIElement.HasEffectiveKeyboardFocus
- uid: System.Windows.UIElement.HitTestCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: HitTestCore
  nameWithType: UIElement.HitTestCore
- uid: System.Windows.UIElement.InputBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: InputBindings
  nameWithType: UIElement.InputBindings
- uid: System.Windows.UIElement.InputHitTest*
  parent: System.Windows.UIElement
  isExternal: false
  name: InputHitTest
  nameWithType: UIElement.InputHitTest
- uid: System.Windows.UIElement.InvalidateArrange*
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateArrange
  nameWithType: UIElement.InvalidateArrange
- uid: System.Windows.UIElement.InvalidateMeasure*
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateMeasure
  nameWithType: UIElement.InvalidateMeasure
- uid: System.Windows.UIElement.InvalidateVisual*
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateVisual
  nameWithType: UIElement.InvalidateVisual
- uid: System.Windows.UIElement.IsArrangeValid*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsArrangeValid
  nameWithType: UIElement.IsArrangeValid
- uid: System.Windows.UIElement.IsEnabled*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
- uid: System.Windows.UIElement.IsEnabledCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: UIElement.IsEnabledCore
- uid: System.Windows.UIElement.IsFocused*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsFocused
  nameWithType: UIElement.IsFocused
- uid: System.Windows.UIElement.IsHitTestVisible*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
- uid: System.Windows.UIElement.IsInputMethodEnabled*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: UIElement.IsInputMethodEnabled
- uid: System.Windows.UIElement.IsKeyboardFocused*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: UIElement.IsKeyboardFocused
- uid: System.Windows.UIElement.IsKeyboardFocusWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: UIElement.IsKeyboardFocusWithin
- uid: System.Windows.UIElement.IsManipulationEnabled*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsManipulationEnabled
  nameWithType: UIElement.IsManipulationEnabled
- uid: System.Windows.UIElement.IsMeasureValid*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMeasureValid
  nameWithType: UIElement.IsMeasureValid
- uid: System.Windows.UIElement.IsMouseCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
- uid: System.Windows.UIElement.IsMouseCaptureWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: UIElement.IsMouseCaptureWithin
- uid: System.Windows.UIElement.IsMouseDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: UIElement.IsMouseDirectlyOver
- uid: System.Windows.UIElement.IsMouseOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseOver
  nameWithType: UIElement.IsMouseOver
- uid: System.Windows.UIElement.IsStylusCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: UIElement.IsStylusCaptured
- uid: System.Windows.UIElement.IsStylusCaptureWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: UIElement.IsStylusCaptureWithin
- uid: System.Windows.UIElement.IsStylusDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: UIElement.IsStylusDirectlyOver
- uid: System.Windows.UIElement.IsStylusOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusOver
  nameWithType: UIElement.IsStylusOver
- uid: System.Windows.UIElement.IsVisible*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisible
  nameWithType: UIElement.IsVisible
- uid: System.Windows.UIElement.Measure*
  parent: System.Windows.UIElement
  isExternal: false
  name: Measure
  nameWithType: UIElement.Measure
- uid: System.Windows.UIElement.MeasureCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: MeasureCore
  nameWithType: UIElement.MeasureCore
- uid: System.Windows.UIElement.MoveFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: MoveFocus
  nameWithType: UIElement.MoveFocus
- uid: System.Windows.UIElement.OnAccessKey*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnAccessKey
  nameWithType: UIElement.OnAccessKey
- uid: System.Windows.UIElement.OnChildDesiredSizeChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnChildDesiredSizeChanged
  nameWithType: UIElement.OnChildDesiredSizeChanged
- uid: System.Windows.UIElement.OnCreateAutomationPeer*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: UIElement.OnCreateAutomationPeer
- uid: System.Windows.UIElement.OnDragEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragEnter
  nameWithType: UIElement.OnDragEnter
- uid: System.Windows.UIElement.OnDragLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragLeave
  nameWithType: UIElement.OnDragLeave
- uid: System.Windows.UIElement.OnDragOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragOver
  nameWithType: UIElement.OnDragOver
- uid: System.Windows.UIElement.OnDrop*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDrop
  nameWithType: UIElement.OnDrop
- uid: System.Windows.UIElement.OnGiveFeedback*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGiveFeedback
  nameWithType: UIElement.OnGiveFeedback
- uid: System.Windows.UIElement.OnGotFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotFocus
  nameWithType: UIElement.OnGotFocus
- uid: System.Windows.UIElement.OnGotKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotKeyboardFocus
  nameWithType: UIElement.OnGotKeyboardFocus
- uid: System.Windows.UIElement.OnGotMouseCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotMouseCapture
  nameWithType: UIElement.OnGotMouseCapture
- uid: System.Windows.UIElement.OnGotStylusCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotStylusCapture
  nameWithType: UIElement.OnGotStylusCapture
- uid: System.Windows.UIElement.OnGotTouchCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotTouchCapture
  nameWithType: UIElement.OnGotTouchCapture
- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged
  nameWithType: UIElement.OnIsKeyboardFocusedChanged
- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged
  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged
- uid: System.Windows.UIElement.OnIsMouseCapturedChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCapturedChanged
  nameWithType: UIElement.OnIsMouseCapturedChanged
- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged
  nameWithType: UIElement.OnIsMouseCaptureWithinChanged
- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged
  nameWithType: UIElement.OnIsMouseDirectlyOverChanged
- uid: System.Windows.UIElement.OnIsStylusCapturedChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCapturedChanged
  nameWithType: UIElement.OnIsStylusCapturedChanged
- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged
  nameWithType: UIElement.OnIsStylusCaptureWithinChanged
- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged
  nameWithType: UIElement.OnIsStylusDirectlyOverChanged
- uid: System.Windows.UIElement.OnKeyDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyDown
  nameWithType: UIElement.OnKeyDown
- uid: System.Windows.UIElement.OnKeyUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyUp
  nameWithType: UIElement.OnKeyUp
- uid: System.Windows.UIElement.OnLostFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostFocus
  nameWithType: UIElement.OnLostFocus
- uid: System.Windows.UIElement.OnLostKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostKeyboardFocus
  nameWithType: UIElement.OnLostKeyboardFocus
- uid: System.Windows.UIElement.OnLostMouseCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostMouseCapture
  nameWithType: UIElement.OnLostMouseCapture
- uid: System.Windows.UIElement.OnLostStylusCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostStylusCapture
  nameWithType: UIElement.OnLostStylusCapture
- uid: System.Windows.UIElement.OnLostTouchCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostTouchCapture
  nameWithType: UIElement.OnLostTouchCapture
- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationBoundaryFeedback
  nameWithType: UIElement.OnManipulationBoundaryFeedback
- uid: System.Windows.UIElement.OnManipulationCompleted*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationCompleted
  nameWithType: UIElement.OnManipulationCompleted
- uid: System.Windows.UIElement.OnManipulationDelta*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationDelta
  nameWithType: UIElement.OnManipulationDelta
- uid: System.Windows.UIElement.OnManipulationInertiaStarting*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationInertiaStarting
  nameWithType: UIElement.OnManipulationInertiaStarting
- uid: System.Windows.UIElement.OnManipulationStarted*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarted
  nameWithType: UIElement.OnManipulationStarted
- uid: System.Windows.UIElement.OnManipulationStarting*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarting
  nameWithType: UIElement.OnManipulationStarting
- uid: System.Windows.UIElement.OnMouseDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseDown
  nameWithType: UIElement.OnMouseDown
- uid: System.Windows.UIElement.OnMouseEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseEnter
  nameWithType: UIElement.OnMouseEnter
- uid: System.Windows.UIElement.OnMouseLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeave
  nameWithType: UIElement.OnMouseLeave
- uid: System.Windows.UIElement.OnMouseLeftButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonDown
  nameWithType: UIElement.OnMouseLeftButtonDown
- uid: System.Windows.UIElement.OnMouseLeftButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonUp
  nameWithType: UIElement.OnMouseLeftButtonUp
- uid: System.Windows.UIElement.OnMouseMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseMove
  nameWithType: UIElement.OnMouseMove
- uid: System.Windows.UIElement.OnMouseRightButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonDown
  nameWithType: UIElement.OnMouseRightButtonDown
- uid: System.Windows.UIElement.OnMouseRightButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonUp
  nameWithType: UIElement.OnMouseRightButtonUp
- uid: System.Windows.UIElement.OnMouseUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseUp
  nameWithType: UIElement.OnMouseUp
- uid: System.Windows.UIElement.OnMouseWheel*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseWheel
  nameWithType: UIElement.OnMouseWheel
- uid: System.Windows.UIElement.OnPreviewDragEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragEnter
  nameWithType: UIElement.OnPreviewDragEnter
- uid: System.Windows.UIElement.OnPreviewDragLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragLeave
  nameWithType: UIElement.OnPreviewDragLeave
- uid: System.Windows.UIElement.OnPreviewDragOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragOver
  nameWithType: UIElement.OnPreviewDragOver
- uid: System.Windows.UIElement.OnPreviewDrop*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDrop
  nameWithType: UIElement.OnPreviewDrop
- uid: System.Windows.UIElement.OnPreviewGiveFeedback*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGiveFeedback
  nameWithType: UIElement.OnPreviewGiveFeedback
- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus
  nameWithType: UIElement.OnPreviewGotKeyboardFocus
- uid: System.Windows.UIElement.OnPreviewKeyDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyDown
  nameWithType: UIElement.OnPreviewKeyDown
- uid: System.Windows.UIElement.OnPreviewKeyUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyUp
  nameWithType: UIElement.OnPreviewKeyUp
- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus
  nameWithType: UIElement.OnPreviewLostKeyboardFocus
- uid: System.Windows.UIElement.OnPreviewMouseDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseDown
  nameWithType: UIElement.OnPreviewMouseDown
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown
  nameWithType: UIElement.OnPreviewMouseLeftButtonDown
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp
  nameWithType: UIElement.OnPreviewMouseLeftButtonUp
- uid: System.Windows.UIElement.OnPreviewMouseMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseMove
  nameWithType: UIElement.OnPreviewMouseMove
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown
  nameWithType: UIElement.OnPreviewMouseRightButtonDown
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp
  nameWithType: UIElement.OnPreviewMouseRightButtonUp
- uid: System.Windows.UIElement.OnPreviewMouseUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseUp
  nameWithType: UIElement.OnPreviewMouseUp
- uid: System.Windows.UIElement.OnPreviewMouseWheel*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseWheel
  nameWithType: UIElement.OnPreviewMouseWheel
- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewQueryContinueDrag
  nameWithType: UIElement.OnPreviewQueryContinueDrag
- uid: System.Windows.UIElement.OnPreviewStylusButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonDown
  nameWithType: UIElement.OnPreviewStylusButtonDown
- uid: System.Windows.UIElement.OnPreviewStylusButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonUp
  nameWithType: UIElement.OnPreviewStylusButtonUp
- uid: System.Windows.UIElement.OnPreviewStylusDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusDown
  nameWithType: UIElement.OnPreviewStylusDown
- uid: System.Windows.UIElement.OnPreviewStylusInAirMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInAirMove
  nameWithType: UIElement.OnPreviewStylusInAirMove
- uid: System.Windows.UIElement.OnPreviewStylusInRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInRange
  nameWithType: UIElement.OnPreviewStylusInRange
- uid: System.Windows.UIElement.OnPreviewStylusMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusMove
  nameWithType: UIElement.OnPreviewStylusMove
- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusOutOfRange
  nameWithType: UIElement.OnPreviewStylusOutOfRange
- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusSystemGesture
  nameWithType: UIElement.OnPreviewStylusSystemGesture
- uid: System.Windows.UIElement.OnPreviewStylusUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusUp
  nameWithType: UIElement.OnPreviewStylusUp
- uid: System.Windows.UIElement.OnPreviewTextInput*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTextInput
  nameWithType: UIElement.OnPreviewTextInput
- uid: System.Windows.UIElement.OnPreviewTouchDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchDown
  nameWithType: UIElement.OnPreviewTouchDown
- uid: System.Windows.UIElement.OnPreviewTouchMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchMove
  nameWithType: UIElement.OnPreviewTouchMove
- uid: System.Windows.UIElement.OnPreviewTouchUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchUp
  nameWithType: UIElement.OnPreviewTouchUp
- uid: System.Windows.UIElement.OnQueryContinueDrag*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryContinueDrag
  nameWithType: UIElement.OnQueryContinueDrag
- uid: System.Windows.UIElement.OnQueryCursor*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryCursor
  nameWithType: UIElement.OnQueryCursor
- uid: System.Windows.UIElement.OnRender*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRender
  nameWithType: UIElement.OnRender
- uid: System.Windows.UIElement.OnRenderSizeChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRenderSizeChanged
  nameWithType: UIElement.OnRenderSizeChanged
- uid: System.Windows.UIElement.OnStylusButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonDown
  nameWithType: UIElement.OnStylusButtonDown
- uid: System.Windows.UIElement.OnStylusButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonUp
  nameWithType: UIElement.OnStylusButtonUp
- uid: System.Windows.UIElement.OnStylusDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusDown
  nameWithType: UIElement.OnStylusDown
- uid: System.Windows.UIElement.OnStylusEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusEnter
  nameWithType: UIElement.OnStylusEnter
- uid: System.Windows.UIElement.OnStylusInAirMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInAirMove
  nameWithType: UIElement.OnStylusInAirMove
- uid: System.Windows.UIElement.OnStylusInRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInRange
  nameWithType: UIElement.OnStylusInRange
- uid: System.Windows.UIElement.OnStylusLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusLeave
  nameWithType: UIElement.OnStylusLeave
- uid: System.Windows.UIElement.OnStylusMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusMove
  nameWithType: UIElement.OnStylusMove
- uid: System.Windows.UIElement.OnStylusOutOfRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusOutOfRange
  nameWithType: UIElement.OnStylusOutOfRange
- uid: System.Windows.UIElement.OnStylusSystemGesture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusSystemGesture
  nameWithType: UIElement.OnStylusSystemGesture
- uid: System.Windows.UIElement.OnStylusUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusUp
  nameWithType: UIElement.OnStylusUp
- uid: System.Windows.UIElement.OnTextInput*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTextInput
  nameWithType: UIElement.OnTextInput
- uid: System.Windows.UIElement.OnTouchDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchDown
  nameWithType: UIElement.OnTouchDown
- uid: System.Windows.UIElement.OnTouchEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchEnter
  nameWithType: UIElement.OnTouchEnter
- uid: System.Windows.UIElement.OnTouchLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchLeave
  nameWithType: UIElement.OnTouchLeave
- uid: System.Windows.UIElement.OnTouchMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchMove
  nameWithType: UIElement.OnTouchMove
- uid: System.Windows.UIElement.OnTouchUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchUp
  nameWithType: UIElement.OnTouchUp
- uid: System.Windows.UIElement.OnVisualParentChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: UIElement.OnVisualParentChanged
- uid: System.Windows.UIElement.Opacity*
  parent: System.Windows.UIElement
  isExternal: false
  name: Opacity
  nameWithType: UIElement.Opacity
- uid: System.Windows.UIElement.OpacityMask*
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
- uid: System.Windows.UIElement.PersistId*
  parent: System.Windows.UIElement
  isExternal: false
  name: PersistId
  nameWithType: UIElement.PersistId
- uid: System.Windows.UIElement.PredictFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: PredictFocus
  nameWithType: UIElement.PredictFocus
- uid: System.Windows.UIElement.RaiseEvent*
  parent: System.Windows.UIElement
  isExternal: false
  name: RaiseEvent
  nameWithType: UIElement.RaiseEvent
- uid: System.Windows.UIElement.ReleaseAllTouchCaptures*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseAllTouchCaptures
  nameWithType: UIElement.ReleaseAllTouchCaptures
- uid: System.Windows.UIElement.ReleaseMouseCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseMouseCapture
  nameWithType: UIElement.ReleaseMouseCapture
- uid: System.Windows.UIElement.ReleaseStylusCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseStylusCapture
  nameWithType: UIElement.ReleaseStylusCapture
- uid: System.Windows.UIElement.ReleaseTouchCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseTouchCapture
  nameWithType: UIElement.ReleaseTouchCapture
- uid: System.Windows.UIElement.RemoveHandler*
  parent: System.Windows.UIElement
  isExternal: false
  name: RemoveHandler
  nameWithType: UIElement.RemoveHandler
- uid: System.Windows.UIElement.RenderSize*
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderSize
  nameWithType: UIElement.RenderSize
- uid: System.Windows.UIElement.RenderTransform*
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
- uid: System.Windows.UIElement.RenderTransformOrigin*
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
- uid: System.Windows.UIElement.ShouldSerializeCommandBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeCommandBindings
  nameWithType: UIElement.ShouldSerializeCommandBindings
- uid: System.Windows.UIElement.ShouldSerializeInputBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeInputBindings
  nameWithType: UIElement.ShouldSerializeInputBindings
- uid: System.Windows.UIElement.SnapsToDevicePixels*
  parent: System.Windows.UIElement
  isExternal: false
  name: SnapsToDevicePixels
  nameWithType: UIElement.SnapsToDevicePixels
- uid: System.Windows.UIElement.StylusPlugIns*
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusPlugIns
  nameWithType: UIElement.StylusPlugIns
- uid: System.Windows.UIElement.TouchesCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: UIElement.TouchesCaptured
- uid: System.Windows.UIElement.TouchesCapturedWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: UIElement.TouchesCapturedWithin
- uid: System.Windows.UIElement.TouchesDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: UIElement.TouchesDirectlyOver
- uid: System.Windows.UIElement.TouchesOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesOver
  nameWithType: UIElement.TouchesOver
- uid: System.Windows.UIElement.TranslatePoint*
  parent: System.Windows.UIElement
  isExternal: false
  name: TranslatePoint
  nameWithType: UIElement.TranslatePoint
- uid: System.Windows.UIElement.Uid*
  parent: System.Windows.UIElement
  isExternal: false
  name: Uid
  nameWithType: UIElement.Uid
- uid: System.Windows.UIElement.UpdateLayout*
  parent: System.Windows.UIElement
  isExternal: false
  name: UpdateLayout
  nameWithType: UIElement.UpdateLayout
- uid: System.Windows.UIElement.Visibility*
  parent: System.Windows.UIElement
  isExternal: false
  name: Visibility
  nameWithType: UIElement.Visibility
