### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule
  id: WSFederationAuthenticationModule
  children:
  - System.IdentityModel.Services.WSFederationAuthenticationModule.#ctor
  - System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType
  - System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed
  - System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase,System.Boolean)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut(System.Uri,System.Uri)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness
  - System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl(System.String,System.String,System.String)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult(System.String)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse(System.Web.HttpRequestBase)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(System.IdentityModel.Services.SignInResponseMessage)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(System.Web.HttpRequestBase)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext
  - System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage(System.Web.HttpRequestBase)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl(System.IdentityModel.Services.SignOutCleanupRequestMessage)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage,System.IdentityModel.Services.WSFederationSerializer)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm
  - System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule(System.Web.HttpApplication)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration
  - System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse(System.Web.HttpRequestBase)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed(System.IdentityModel.Services.AuthorizationFailedEventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest(System.Object,System.EventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider(System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn(System.EventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut(System.EventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignInError(System.IdentityModel.Services.ErrorEventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled
  - System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects
  - System.IdentityModel.Services.WSFederationAuthenticationModule.Policy
  - System.IdentityModel.Services.WSFederationAuthenticationModule.Realm
  - System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider
  - System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider(System.String,System.String,System.Boolean)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.Reply
  - System.IdentityModel.Services.WSFederationAuthenticationModule.Request
  - System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr
  - System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps
  - System.IdentityModel.Services.WSFederationAuthenticationModule.Resource
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn(System.String)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignInQueryString
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.Boolean)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.String)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.String,System.Boolean)
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutQueryString
  - System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply
  - System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties
  - System.IdentityModel.Services.WSFederationAuthenticationModule.XmlDictionaryReaderQuotas
  langs:
  - csharp
  name: WSFederationAuthenticationModule
  nameWithType: WSFederationAuthenticationModule
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule
  type: Class
  summary: "The WSFederationAuthenticationModule is an HTTP module which is used to secure an [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] application by enforcing  federated authentication settings on incoming requests. The WSFederationAuthenticationModule is the main module that WIF offers out of the box for handling claims-based identity access in [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] applications.       The WSFederationAuthenticationModule raises several events, which allows ASP.NET developers to change the default behavior and control the details of how authentication and claims processing take place. The WSFederationAuthenticationModule functionality is divided into task-specific methods."
  remarks: "The WSFederationAuthenticationModule class implements an HTTP module known as the WS-Federation Authentication Module (WSFAM). The WSFAM is implemented out of the box by Windows Identity Foundation (WIF). The WSFAM is added to the ASP.NET pipeline by making an entry in the web.config file. It derives from <xref:System.IdentityModel.Services.HttpModuleBase>, which implements <xref:System.Web.IHttpModule>. It registers with the ASP.NET runtime to listen for the <xref:System.Web.HttpApplication.EndRequest> and <xref:System.Web.HttpApplication.AuthenticateRequest> events. Listening to the <xref:System.Web.HttpApplication.EndRequest> event, lets the WSFAM redirect clients to a security token service (STS) to obtain a security token when authorization fails on a requested resource. Listening to the <xref:System.Web.HttpApplication.AuthenticateRequest> event enables the WSFAM to monitor HTTP requests for a response from the STS that contains the requested token. When such a token is present and valid, it creates an instance of <xref:System.Security.Claims.ClaimsPrincipal> for the authenticated user using the claims that are present in the token.  \n  \n When using the WSFAM, session management is provided by a session authentication module (SAM), which is an instance of the <xref:System.IdentityModel.Services.SessionAuthenticationModule> class, or a class derived from it. The SAM is also added to the ASP.NET pipeline in the configuration file. The SAM monitors requests for authentication (session) cookies. When these cookies are present and valid, the module extracts the <xref:System.Security.Claims.ClaimsPrincipal> for the authenticated user from the <xref:System.IdentityModel.Tokens.SessionSecurityToken> and sets the <xref:System.Web.HttpContext.User%2A?displayProperty=fullName> property and the thread principal <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> properties.  \n  \n The WSFAM provides:  \n  \n-   The ability for an ASP.NET application to outsource authentication to a security token service (STS) by using the WS-Federation protocol. Identity can be federated across one or more identity realms and involve multiple STSs.  \n  \n-   Claims-based identity for ASP.NET applications. During authentication, the WSFAM builds a principal from the claims in the security token sent by the STS and sets this claims principal as the thread principal. You can then use this principal to make further authorization, presentation, and logic decisions about the user it represents in your code.  \n  \n The WSFAM exposes several properties that provide default message parameters to use on WS-Federation sign-in and sign-out requests. These properties are typically initialized from the [\\<wsFederation>](../Topic/%3CwsFederation%3E.md) element in a configuration file. The most important of these properties are:  \n  \n-   The <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property, which specifies the address of the security token service (STS) to which to send WS-Federation sign-in and sign-out requests.  \n  \n-   The <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm%2A> property, which specifies the wtrealm parameter to use in WS-Federation sign-in requests. The wtrealm parameter identifies the security realm of the relying party (RP) application to the STS.  \n  \n Sign-in message parameters can also be changed on a per-request basis by providing an event-handler delegate for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event.  \n  \n Two properties control the behavior of the module. Both of these properties are also typically initialized from the `<wsFederation>` element in configuration.  \n  \n-   The <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled%2A> property specifies whether the module should perform passive redirects to the STS for authentication.  \n  \n-   The <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects%2A> property specifies whether sessions should be persistent. If this property is set true, the SAM is used to write a session cookie to the client. On subsequent requests from the client, the SAM provides authentication by using the token persisted in the session cookie.  \n  \n The WSFAM raises several events during sign-in and sign-out, which allow ASP.NET developers to change the default behavior of the module and control the details of how authentication and claims processing take place.  \n  \n The following events are raised before the WS-Federation sign-in request is sent to the STS:  \n  \n-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed>: Raised when  passive redirect is enabled and authorization fails on a requested resource.  \n  \n-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider>: Raised just before the WSFAM sends the WS-Federation sign-in request to the STS. You can use this event to change the parameters in the sign-in request.  \n  \n The following events are raised when a sign-in response (issued security token) is received from the STS:  \n  \n-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived>: Raised just after the security token sent by the STS is read from the response.  \n  \n-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated>: Raised just after the token has been validated. You can use this event to filter, transform, or add claims to the claims principal (<xref:System.Security.Claims.ClaimsPrincipal>) created from the security token.  \n  \n-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated>: Raised just before the session token (<xref:System.IdentityModel.Tokens.SessionSecurityToken>) created from the claims principal is used to set the thread principal and current user and is written to the session cookie. Gives you an opportunity to modify the session token or enable or disable writing the session cookie.  \n  \n-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn>: Raised at the end of the authentication just after the thread principal and current user have been set.  \n  \n-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError>: Raised if an exception occurs during sign-in. You can cancel the request and prevent the exception from being returned to the caller.  \n  \n When signing out of a session or when processing a WS-Federation sign-out clean-up request (wsignoutcleanup1.0), the following events are raised:  \n  \n-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut>: Raised just before the session is deleted to enable you to perform any cleanup that might depend on the session or to cancel sign-out.  \n  \n-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut>: Raised just after the session has been deleted.  \n  \n-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError>: Raised if an exception occurs during sign-out. You can cancel sign-out and prevent the exception from being returned to the caller.  \n  \n> [!NOTE]\n>  The sign-out events are not raised when signing out at the STS by calling the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> method.  \n  \n There are two ways of signing in to an STS using WSFAM. The first is by enabling passive redirects through the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled%2A> property. In this case, when authorization fails on a requested resource, rather than returning a `401:Access Denied` response to the client, WSFAM builds a WS-Federation sign-in request message from its properties and redirects the client to the STS to retrieve a security token. The second way is to explicitly redirect the client to the STS by calling the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn%2A> method from a web page or custom control in your application. The <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn%2A> method also uses the properties of the WSFAM to construct the sign-in request.  \n  \n Any of the overloaded <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%2A> methods can be used to sign out of the session. This deletes the session cookie on the client. It does not send a WS-Federation sign-out message (“wsignout1.0”) to the STS. To sign-out at the STS, you must use the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> method.  \n  \n The WSFAM handles WS-Federation sign-out clean-up requests (“wsignoutcleanup1.0”), by deleting its session with the client. If the wreply parameter in the sign-out clean-up message is not set, the WSFAM returns an image of a green check mark to the STS that sent the message. This feature can be used by an STS as an acknowledgment that the RP has completed its sign-out.  \n  \n The WSFAM exposes its functionality -- for example, its request processing pipeline -- through several task-specific methods. You can override these methods in derived classes to alter the behavior of the WSFAM.  \n  \n To be used, the module must be added to the pipeline as in the following XML:  \n  \n```  \n<configuration>  \n  <system.webServer>  \n    <modules>  \n      <add name=\"WsFederationAuthenticationModule\" type=\"System.IdentityModel.Services.WSFederationAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"/>  \n    </modules>  \n  </system.webServer>  \n</configuration>  \n```  \n  \n Once configured, the WSFederationAuthenticationModule raises events at various stages of processing an HTTP request. ASP.NET developers can handle these events in the global.asax file."
  example:
  - '[!code-cs[WifWSFAM#1](~/add/codesnippet/CSharp/wsfam/global.asax.cs#1)]'
  syntax:
    content: 'public class WSFederationAuthenticationModule : System.IdentityModel.Services.HttpModuleBase'
  inheritance:
  - System.Object
  - System.IdentityModel.Services.HttpModuleBase
  implements: []
  inheritedMembers:
  - System.IdentityModel.Services.HttpModuleBase.Dispose
  - System.IdentityModel.Services.HttpModuleBase.FederationConfiguration
  - System.IdentityModel.Services.HttpModuleBase.Init(System.Web.HttpApplication)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: WSFederationAuthenticationModule()
  nameWithType: WSFederationAuthenticationModule.WSFederationAuthenticationModule()
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.WSFederationAuthenticationModule()
  type: Constructor
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Called by constructors in derived classes to initialize the <see cref=&quot;T:System.IdentityModel.Services.WSFederationAuthenticationModule&quot;></see> class."
  syntax:
    content: public WSFederationAuthenticationModule ();
    parameters: []
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType
  id: AuthenticationType
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: WSFederationAuthenticationModule.AuthenticationType
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets the value of the wauth parameter to use in WS-Federation sign-in requests (“wsignin1.0”)."
  remarks: "The wauth parameter is optional. If the AuthenticationType property is set to `null` or an empty string, the wauth parameter is not included in the sign-in request.       You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. This event is raised just before the module redirects to the security token service (STS) with a WS-Federation sign-in request message. The STS is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property."
  syntax:
    content: public string AuthenticationType { get; set; }
    return:
      type: System.String
      description: "A URI that specifies the authentication type."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed
  id: AuthorizationFailed
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: AuthorizationFailed
  nameWithType: WSFederationAuthenticationModule.AuthorizationFailed
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Occurs when the module is determining whether it should redirect the user to the configured issuer to authenticate."
  remarks: "The AuthorizationFailed event is raised when authorization has failed for an HTTP request. It is raised from within the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest%2A> event-handler delegate through a call to the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed%2A> method.       You can set the <xref:System.IdentityModel.Services.AuthorizationFailedEventArgs.RedirectToIdentityProvider%2A?displayProperty=fullName> property to control whether the request is redirected to the identity provider. The framework initializes this property to `false` if the user has already been authenticated. In this case, setting the property to `true` may cause a circular loop with the STS.      > [!NOTE] >  The <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event can be used to modify the URL or cancel the redirect.       To handle this event in an ASP.NET application, create a method named `WSFederationAuthentication_AuthorizationFailed` in the global.asax file."
  example:
  - '[!code-cs[WifWSFAM#7](~/add/codesnippet/CSharp/wsfam/global.asax.cs#7)]'
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.AuthorizationFailedEventArgs> AuthorizationFailed;
    return:
      type: System.EventHandler{System.IdentityModel.Services.AuthorizationFailedEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase)
  id: CanReadSignInResponse(System.Web.HttpRequestBase)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: CanReadSignInResponse(HttpRequestBase)
  nameWithType: WSFederationAuthenticationModule.CanReadSignInResponse(HttpRequestBase)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(HttpRequestBase)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Returns a value that indicates whether the specified HTTP request is a WS-Federation sign-in response message. If the message is a WS-Federation sign-out clean-up message (“wsignoutcleanup1.0”), this method processes the request."
  remarks: "This method is invoked from the request processing pipeline to determine whether the incoming HTTP request is a FORM post that contains a WS-Federation sign-in response message.       It invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%28System.Web.HttpRequestBase%2CSystem.Boolean%29?displayProperty=fullName> overload with the `onPage` parameter set `false` to indicate that the call did  not originate while processing a page."
  syntax:
    content: public bool CanReadSignInResponse (System.Web.HttpRequestBase request);
    parameters:
    - id: request
      type: System.Web.HttpRequestBase
      description: "The incoming HTTP request."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    request is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase,System.Boolean)
  id: CanReadSignInResponse(System.Web.HttpRequestBase,System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: CanReadSignInResponse(HttpRequestBase,Boolean)
  nameWithType: WSFederationAuthenticationModule.CanReadSignInResponse(HttpRequestBase,Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(HttpRequestBase,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Returns a value that indicates whether the specified HTTP request is a WS-Federation sign-in response message. If the message is a WS-Federation sign-out clean-up message (“wsignoutcleanup1.0”), this method processes the request."
  remarks: "This method is invoked from the request processing pipeline through the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%28System.Web.HttpRequestBase%29?displayProperty=fullName> overload to determine whether the incoming HTTP request is a form POST that contains a WS-Federation sign-in response message.       The default implementation performs the following:      -   If the incoming request is a form POST, it calls the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse%2A> method to determine whether the form POST contains a sign-in response.      -   If the incoming request is not a form POST, and the request contains a WS-Federation sign-out clean-up request (the wa parameter is “wsignoutcleanup1.0”), sign-out clean-up is performed. In this case, the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=fullName> method is invoked (with the parameter set to `true` to indicate a sign-out clean-up) to sign out of the session. This also causes the sign-out events to be raised.           Next, if the sign-out clean-up request contains a wreply parameter, the client is redirected to the URL returned by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl%2A> method; otherwise, an image of a green check mark is returned to the STS. The receipt of this image can be used by the STS as a confirmation that the sign-out clean-up request was received and successfully processed by the RP."
  syntax:
    content: public virtual bool CanReadSignInResponse (System.Web.HttpRequestBase request, bool onPage);
    parameters:
    - id: request
      type: System.Web.HttpRequestBase
      description: "The incoming HTTP request."
    - id: onPage
      type: System.Boolean
      description: "\n     if the call originates while processing a page request.  if the caller is an HTTP module. This parameter determines how to terminate processing or send redirects if the incoming message is a WS-Federation sign-out cleanup message (“wsignoutcleanup1.0”)."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    request is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)
  id: CreateSignInRequest(System.String,System.String,System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: CreateSignInRequest(String,String,Boolean)
  nameWithType: WSFederationAuthenticationModule.CreateSignInRequest(String,String,Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(String,String,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Creates a WS-Federation sign in request message by using the WS-Federation parameters configured on the module."
  remarks: "Creates a WS-Federation sign-in request that is represented by a <xref:System.IdentityModel.Services.SignInRequestMessage> object. The properties of the new <xref:System.IdentityModel.Services.SignInRequestMessage> object are set as follows:      -   The <xref:System.IdentityModel.Services.WSFederationMessage.Context%2A> property (the wctx parameter) is set to a value created by using the method parameters.      -   The <xref:System.IdentityModel.Services.SignInRequestMessage.CurrentTime%2A> property (the wct parameter) is set to the current time.      -   All other properties are set by using the equivalent properties of the current instance.       The parameters passed to the method are used to create the wctx message parameter. This is a string with the following format: `ru=returnUrl&cx=SignInContext&rm=rememberMeSet&id=uniqueId`.      -   The `ru` value is set to the value of the `returnUrl` parameter passed in to the method and it specifies the URL that the module should direct the browser to following successful authentication. This is the only value stored in the wctx string that is used by the WSFAM. The module calls the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse%2A> method to extract this value from the wctx parameter when processing a WS-Federation sign-in response. It should not be confused with the wreply message parameter, which is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Reply%2A> property and which provides the address at the RP to which the security token service (STS) should direct its response.      -   The `cx` parameter is set to the value of the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext%2A> property. This property is exposed to enable you to set any application-defined context that should be stored in the wctx string; however, WSFAM does not expose a method to extract this value in the response. If the value is needed by your application, you must provide the code to parse the wctx string and read this value when processing the response. You might accomplish this by overriding the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse%2A> method.      -   Neither the `rm` value, which is set to the value of the `rememberMeSet` parameter, nor the `id` parameter, which is set to the value of the `uniqueId` parameter are used by WSFAM. These can be set to any value.       The CreateSignInRequest method is called from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider%2A> method."
  syntax:
    content: public System.IdentityModel.Services.SignInRequestMessage CreateSignInRequest (string uniqueId, string returnUrl, bool rememberMeSet);
    parameters:
    - id: uniqueId
      type: System.String
      description: "The WSFAM saves this value in the wctx parameter in the WS-Federation sign in request; however, the module does not use it when processing sign-in requests or sign-in responses. You can set it to any value. It does not have to be unique."
    - id: returnUrl
      type: System.String
      description: "The URL to which the module should return upon authentication."
    - id: rememberMeSet
      type: System.Boolean
      description: "The WSFAM saves this value in the wctx parameter in the WS-Federation sign in request; however, the module does not use it when processing sign-in requests or sign-in responses. You can set it either  or ."
    return:
      type: System.IdentityModel.Services.SignInRequestMessage
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property is  or an empty string.       -or-       The <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm%2A> property is  or an empty string."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut(System.Uri,System.Uri)
  id: FederatedSignOut(System.Uri,System.Uri)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: FederatedSignOut(Uri,Uri)
  nameWithType: WSFederationAuthenticationModule.FederatedSignOut(Uri,Uri)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut(Uri,Uri)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Signs out at the specified security token service (STS) by using the WS-Federation protocol."
  remarks: "Call this method to send a WS-Federation sign-out request message to the specified STS. You can optionally supply a value for the wreply parameter in the sign-out request.       The method does the following:      1.  Creates a WS-Federation sign-out request message by using the specified parameters.      2.  Calls the <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A?displayProperty=fullName> method on the SAM to delete the session cookie.      3.  Redirects to the STS using the sign-out request message from the first step.       None of the sign-out events: <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut>, <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut>, or <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError> are raised by this method. To delete the session without sending a sign-out request message to the STS, call one of the overloaded <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%2A> methods.      > [!NOTE] >  To perform passive sign-out by using the session token, the module relies on a value that was stored in the <xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A?displayProperty=fullName> property during sign-in, for more information, see the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext%2A> method."
  syntax:
    content: public static void FederatedSignOut (Uri signOutUrl, Uri replyUrl);
    parameters:
    - id: signOutUrl
      type: System.Uri
      description: "The URL of the STS to receive the WS-Federation sign-out request message. Cannot be ."
    - id: replyUrl
      type: System.Uri
      description: "The URL to be sent as the wreply value in the sign-out request message."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    signOutUrl is not  and is not an absolute URI.  \n  \n -or-  \n  \n replyUrl is not  and is not an absolute URI."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n    signOutUrl is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness
  id: Freshness
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: Freshness
  nameWithType: WSFederationAuthenticationModule.Freshness
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets the value of the wfresh parameter to use in WS-Federation sign-in requests (“wsignin1.0”)."
  remarks: "The wfresh parameter is optional. If the Freshness property is set to `null` or an empty string, the wfresh parameter is not included in the sign-in request.       You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. This event is raised just before the module redirects to the security token service (STS) with a WS-Federation sign-in request message. The STS is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property."
  syntax:
    content: public string Freshness { get; set; }
    return:
      type: System.String
      description: "The desired maximum age of authentication requests, in minutes."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl(System.String,System.String,System.String)
  id: GetFederationPassiveSignOutUrl(System.String,System.String,System.String)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: GetFederationPassiveSignOutUrl(String,String,String)
  nameWithType: WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl(String,String,String)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl(String,String,String)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Returns a URL that represents a WS-Federation sign-out request addressed to the specified issuer and that contains the specified wreply parameter and the specified additional parameters."
  remarks: 'In the URL that is returned: the base URI is set to `issuer`; the wa parameter is set to “wsignout1.0”; the wreply parameter is set to `signOutReply`; and the parameters specified in `signOutQueryString` are present as additional query string parameters.'
  syntax:
    content: public static string GetFederationPassiveSignOutUrl (string issuer, string signOutReply, string signOutQueryString);
    parameters:
    - id: issuer
      type: System.String
      description: "The issuer address. The address of the security token service (STS) to which to direct the request."
    - id: signOutReply
      type: System.String
      description: "A URL that specifies the address to return to after sign-out. This sets the wreply parameter in the sign-out request. Can be  or empty if no wreply parameter should be included in the generated sign-out request. This should be an absolute URI."
    - id: signOutQueryString
      type: System.String
      description: "Additional query string parameters to be included in the sign-out request. Can be  or empty if no additional to be parameters included in the generated sign-out request. This should be a relative URI."
    return:
      type: System.String
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    issuer is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult(System.String)
  id: GetReferencedResult(System.String)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: GetReferencedResult(String)
  nameWithType: WSFederationAuthenticationModule.GetReferencedResult(String)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult(String)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets the issuance result (typically the issued token) from the specified URL. Resolves the URL specified in the wresultptr parameter in a sign-in response message."
  remarks: "Called by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage%28System.IdentityModel.Services.SignInResponseMessage%29?displayProperty=fullName> method from inside the processing pipeline to resolve the URL specified in the wresultptr parameter in the sign-in response message received from a security token service (STS).       By default this method throws a <xref:System.NotSupportedException>. Override this method in a derived class to support the wresultptr parameter. The URL points to the issuance result, which should be one of the following: a `<wst:RequestSecurityTokenResponse>` element, a `<wst:RequestSecurityTokenResponseCollection>` element, a SOAP response, or a SOAP `<S:Fault>` element."
  syntax:
    content: protected virtual string GetReferencedResult (string resultPtr);
    parameters:
    - id: resultPtr
      type: System.String
      description: "The URL that specifies the address of the issuance result."
    return:
      type: System.String
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "This method is not supported in the base class. You must override it in a derived class."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse(System.Web.HttpRequestBase)
  id: GetReturnUrlFromResponse(System.Web.HttpRequestBase)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: GetReturnUrlFromResponse(HttpRequestBase)
  nameWithType: WSFederationAuthenticationModule.GetReturnUrlFromResponse(HttpRequestBase)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse(HttpRequestBase)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Extracts the URL of the page that was originally requested from the sign-in response."
  remarks: "This method is called from the request processing pipeline (the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A> method) to get the URL of the page at the relying party (RP) to direct the client to after successful sign-in. This is, typically, the URL of the RP resource to which the client originally requested access.       By default, WSFAM saves the return URL inside the wctx message parameter when it sends the WS-Federation sign-in request to the security token service (STS). In accordance with the WS-Federation specification, the wctx parameter is preserved across entities through which the message passes and is returned unaltered in the WS-Federation sign-in response message that is sent by the STS.       The default implementation gets the return URL from the wctx parameter in the sign-in response. For more information about the format of the wctx parameter that is used by WSFAM, see the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> method."
  syntax:
    content: protected virtual string GetReturnUrlFromResponse (System.Web.HttpRequestBase request);
    parameters:
    - id: request
      type: System.Web.HttpRequestBase
      description: "The HTTP request that contains a form POST, which contains the WS-Federation sign-in response message."
    return:
      type: System.String
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    request is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(System.IdentityModel.Services.SignInResponseMessage)
  id: GetSecurityToken(System.IdentityModel.Services.SignInResponseMessage)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: GetSecurityToken(SignInResponseMessage)
  nameWithType: WSFederationAuthenticationModule.GetSecurityToken(SignInResponseMessage)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(SignInResponseMessage)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Reads a security token from the specified WS Federation sign-in response message."
  remarks: "The default implementation invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage%28System.IdentityModel.Services.SignInResponseMessage%2CSystem.IdentityModel.Services.WSFederationSerializer%29?displayProperty=fullName> method to get the token and reads it by using the appropriate handler from the configured security token handlers."
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityToken GetSecurityToken (System.IdentityModel.Services.SignInResponseMessage message);
    parameters:
    - id: message
      type: System.IdentityModel.Services.SignInResponseMessage
      description: "The sign-in response message from which to read the token."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    message is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(System.Web.HttpRequestBase)
  id: GetSecurityToken(System.Web.HttpRequestBase)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: GetSecurityToken(HttpRequestBase)
  nameWithType: WSFederationAuthenticationModule.GetSecurityToken(HttpRequestBase)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(HttpRequestBase)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Reads a security token from the specified HTTP request."
  remarks: "Called from the request processing pipeline to get the WS-Federation sign-in request message as a <xref:System.IdentityModel.Tokens.SecurityToken> object.       The default implementation invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage%2A> method to get a <xref:System.IdentityModel.Services.SignInResponseMessage> object and then invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken%28System.IdentityModel.Services.SignInResponseMessage%29?displayProperty=fullName> overload.       Use a derived class to interpret a specific type of request."
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityToken GetSecurityToken (System.Web.HttpRequestBase request);
    parameters:
    - id: request
      type: System.Web.HttpRequestBase
      description: "The HTTP request from which to read the token."
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    request is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext
  id: GetSessionTokenContext
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: GetSessionTokenContext()
  nameWithType: WSFederationAuthenticationModule.GetSessionTokenContext()
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets a string that should be persisted with the session cookie in the &lt;xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A?displayProperty=fullName&gt; property."
  remarks: "The GetSessionTokenContext method is called from the request processing pipeline when processing a WS-Federation sign-in response message to get the value to store in the <xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A?displayProperty=fullName> property inside the session cookie.       You can override this method to provide an application-specific value to be stored in the cookie. WSFAM does not expose any methods to retrieve the value from the cookie. You must provide the logic in your application to read the value back from the cookie if it is needed."
  syntax:
    content: protected virtual string GetSessionTokenContext ();
    parameters: []
    return:
      type: System.String
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage(System.Web.HttpRequestBase)
  id: GetSignInResponseMessage(System.Web.HttpRequestBase)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: GetSignInResponseMessage(HttpRequestBase)
  nameWithType: WSFederationAuthenticationModule.GetSignInResponseMessage(HttpRequestBase)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage(HttpRequestBase)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Reads a <see cref=&quot;T:System.IdentityModel.Services.SignInResponseMessage&quot;></see> object from the form POST represented by the specified HTTP request."
  remarks: "Called from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken%28System.Web.HttpRequestBase%29?displayProperty=fullName> method in the request processing pipeline to get a sign-in response message from the form POST contained in the HTTP request."
  syntax:
    content: public virtual System.IdentityModel.Services.SignInResponseMessage GetSignInResponseMessage (System.Web.HttpRequestBase request);
    parameters:
    - id: request
      type: System.Web.HttpRequestBase
      description: "The HTTP request from which to read the sign-in response message. The request should represent a form POST."
    return:
      type: System.IdentityModel.Services.SignInResponseMessage
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    request is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A sign-in response message could not be read from the specified request."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl(System.IdentityModel.Services.SignOutCleanupRequestMessage)
  id: GetSignOutRedirectUrl(System.IdentityModel.Services.SignOutCleanupRequestMessage)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: GetSignOutRedirectUrl(SignOutCleanupRequestMessage)
  nameWithType: WSFederationAuthenticationModule.GetSignOutRedirectUrl(SignOutCleanupRequestMessage)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl(SignOutCleanupRequestMessage)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Determines the URL to which to redirect when processing a WS-Federation sign-out clean-up request (wsignoutcleanup1.0) that contains a wreply parameter."
  remarks: "This method is called from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%2A> method in the request processing pipeline to determine the URL to redirect to after processing a WS-Federation sign-out clean-up request. It is only invoked if the message has a wreply parameter (the `signOutMessage` parameter has a <xref:System.IdentityModel.Services.SignOutCleanupRequestMessage.Reply%2A> property that is neither `null` nor empty).       The default implementation validates the reply URL contained in the message (the <xref:System.IdentityModel.Services.SignOutCleanupRequestMessage.Reply%2A?displayProperty=fullName> property) against the address of the security token service (STS) that is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property. The following conditions must be true for the reply URL to be valid:      1.  The reply URL is an absolute URL.      2.  The reply URL has the same scheme as the issuer.      3.  The reply URL has the same port as the issuer.      4.  Either the reply URL has the same host as the issuer or the reply URL specifies a sub-domain of the issuer.       If all of these conditions are true, the reply URL (Reply) is returned; otherwise, the URL specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property is returned.       Override this method to provide additional validation for the reply URL."
  syntax:
    content: protected virtual string GetSignOutRedirectUrl (System.IdentityModel.Services.SignOutCleanupRequestMessage signOutMessage);
    parameters:
    - id: signOutMessage
      type: System.IdentityModel.Services.SignOutCleanupRequestMessage
      description: "The sign-out clean-up request."
    return:
      type: System.String
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    signOutMessage has a <xref:System.IdentityModel.Services.SignOutCleanupRequestMessage.Reply%2A> property that is  or empty."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    signOutMessage is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage)
  id: GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: GetXmlTokenFromMessage(SignInResponseMessage)
  nameWithType: WSFederationAuthenticationModule.GetXmlTokenFromMessage(SignInResponseMessage)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(SignInResponseMessage)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Extracts the issued token from the specified WS-Federation sign-in response message."
  remarks: "If there is no wresult parameter in the sign-in response message, the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult%2A> method is called to try to get the token using the wresultptr parameter."
  syntax:
    content: public virtual string GetXmlTokenFromMessage (System.IdentityModel.Services.SignInResponseMessage message);
    parameters:
    - id: message
      type: System.IdentityModel.Services.SignInResponseMessage
      description: "The sign-in response message to extract the token from. The sign-in response contains the token issued by the STS."
    return:
      type: System.String
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    message is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n    message does not contain a token. (It does not contain a valid wresult or wresultptr parameter.)"
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage,System.IdentityModel.Services.WSFederationSerializer)
  id: GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage,System.IdentityModel.Services.WSFederationSerializer)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: GetXmlTokenFromMessage(SignInResponseMessage,WSFederationSerializer)
  nameWithType: WSFederationAuthenticationModule.GetXmlTokenFromMessage(SignInResponseMessage,WSFederationSerializer)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(SignInResponseMessage,WSFederationSerializer)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Extracts the issued token from the specified WS-Federation sign-in response message by using the specified WS-Federation serializer."
  syntax:
    content: public virtual string GetXmlTokenFromMessage (System.IdentityModel.Services.SignInResponseMessage message, System.IdentityModel.Services.WSFederationSerializer federationSerializer);
    parameters:
    - id: message
      type: System.IdentityModel.Services.SignInResponseMessage
      description: "The sign-in response message to extract the token from. The sign-in response contains the token issued by the STS."
    - id: federationSerializer
      type: System.IdentityModel.Services.WSFederationSerializer
      description: "The WS-Federation serializer to use to de-serialize the sign-in response message."
    return:
      type: System.String
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    message is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm
  id: HomeRealm
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: HomeRealm
  nameWithType: WSFederationAuthenticationModule.HomeRealm
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets the value of the whr parameter to use in WS-Federation sign-in requests (“wsignin1.0”)."
  remarks: "The whr parameter is optional. If the HomeRealm property is set to `null` or an empty string, the whr parameter is not included in the sign-in request.       You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. This event is raised just before the module redirects to the security token service (STS) with a WS-Federation sign-in request message. The STS is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property."
  syntax:
    content: public string HomeRealm { get; set; }
    return:
      type: System.String
      description: "The address of the identity provider."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule(System.Web.HttpApplication)
  id: InitializeModule(System.Web.HttpApplication)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: InitializeModule(HttpApplication)
  nameWithType: WSFederationAuthenticationModule.InitializeModule(HttpApplication)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule(HttpApplication)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Initializes the module and prepares it to handle events from the module&quot;s [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] application object."
  remarks: "Adds handlers for ASP.NET pipeline events according to the following table.      |Event|Handler|   |-----------|-------------|   |<xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName>|<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A>|   |<xref:System.Web.HttpApplication.EndRequest?displayProperty=fullName>|<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest%2A>|   |<xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName>|<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest%2A>|      > [!NOTE] >  The module properties, such as <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> , are initialized from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration%2A> method."
  syntax:
    content: protected override void InitializeModule (System.Web.HttpApplication context);
    parameters:
    - id: context
      type: System.Web.HttpApplication
      description: "The HTTP application object that contains this module."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    context is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration
  id: InitializePropertiesFromConfiguration
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: InitializePropertiesFromConfiguration()
  nameWithType: WSFederationAuthenticationModule.InitializePropertiesFromConfiguration()
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Initializes the module properties based on the configuration specified by the &lt;xref:System.IdentityModel.Services.HttpModuleBase.FederationConfiguration%2A&gt; property of the module."
  remarks: "Module properties are initialized using the equivalent properties of the <xref:System.IdentityModel.Services.Configuration.WsFederationConfiguration> object specified by the <xref:System.IdentityModel.Services.Configuration.FederationConfiguration.WsFederationConfiguration%2A?displayProperty=fullName> property.  \n  \n You can specify settings in a configuration file through the [\\<wsFederation>](../Topic/%3CwsFederation%3E.md) element."
  syntax:
    content: protected override void InitializePropertiesFromConfiguration ();
    parameters: []
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse(System.Web.HttpRequestBase)
  id: IsSignInResponse(System.Web.HttpRequestBase)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: IsSignInResponse(HttpRequestBase)
  nameWithType: WSFederationAuthenticationModule.IsSignInResponse(HttpRequestBase)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse(HttpRequestBase)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets a value that indicates whether the specified request is a WS-Federation sign-in response message."
  remarks: "This method is called from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%2A> method in the request processing pipeline to determine whether the incoming HTTP request is a WS-Federation sign-in response message.       The default implementation returns `true` if the wa parameter is “wsignin1.0” and the wreq and wreqptr parameters are not both set.       You can override this method in derived classes to perform additional validation."
  syntax:
    content: public virtual bool IsSignInResponse (System.Web.HttpRequestBase request);
    parameters:
    - id: request
      type: System.Web.HttpRequestBase
      description: "The incoming HTTP request."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    request is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer
  id: Issuer
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: Issuer
  nameWithType: WSFederationAuthenticationModule.Issuer
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets a URI that identifies the intended issuer of the security token."
  remarks: "This is a required property. It must be set if passive redirects are enabled. It specifies the URL of the security token service (STS) to which WS-Federation requests should be issued.       You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. This event is raised just before the module redirects to the security token service (STS) with a WS-Federation sign-in request message. The STS is specified by the Issuer property."
  syntax:
    content: public string Issuer { get; set; }
    return:
      type: System.String
      description: "The URI that identifies the security token service (STS)."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An attempt to set the property to  or an empty string occurs.       -or-       An attempt to set the property to a value that is not a valid, absolute URI occurs."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)
  id: OnAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnAuthenticateRequest(Object,EventArgs)
  nameWithType: WSFederationAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Handles the <see cref=&quot;E:System.Web.HttpApplication.AuthenticateRequest&quot;></see> event from the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] pipeline."
  remarks: "The OnAuthenticateRequest method implements the WS-Federation request processing pipeline. It is added to the <xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName> event in the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] pipeline by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule%2A> method.  \n  \n The method performs the following:  \n  \n1.  Calls the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%28System.Web.HttpRequestBase%29> method to determine whether a WS-Federation sign-in response message (\"wsignin1.0\") has been received. If the response is a WS-Federation sign-out clean-up request (\"wsignoutcleanup1.0\"), <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%28System.Web.HttpRequestBase%29> processes the message, terminates the request and redirects the client according to the WS-Federation parameters in the request. If the message is not a sign-in response or a sign-out clean-up request, the module just returns; otherwise it performs the following steps to process the sign-in response.  \n  \n2.  Calls the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken%28System.Web.HttpRequestBase%29> method to deserialize a <xref:System.IdentityModel.Tokens.SecurityToken> object from the request.  \n  \n3.  Raises the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived> event. You can cancel further processing or modify the received security token in a handler for this event. A handler is typically used to modify the <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A?displayProperty=fullName> or <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A?displayProperty=fullName> properties.  \n  \n4.  Validates the security token and creates a <xref:System.Security.Claims.ClaimsPrincipal> object from the claims in the security token.  \n  \n5.  Raises the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated> event. You can cancel further processing or modify the claims principal in a handler for this event.  \n  \n6.  Uses the configured session authentication module (SAM) to create a <xref:System.IdentityModel.Tokens.SessionSecurityToken> object. (The configured SAM is the <xref:System.IdentityModel.Services.SessionAuthenticationModule> object returned by the <xref:System.IdentityModel.Services.FederatedAuthentication.SessionAuthenticationModule%2A?displayProperty=fullName> property.) The session token is created by using the claims principal returned in step 5. The <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A?displayProperty=fullName> and <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A?displayProperty=fullName> properties are set by using the <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> and <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> properties of the <xref:System.IdentityModel.Tokens.SecurityToken> returned in step 3 and are validated against the current time and the token lifetime specified by either the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime%2A> or the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> property of the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> object in the token handler collection being used by WSFAM. The token lifetime on the session token handler can be specified in configuration through the [\\<sessionTokenRequirement>](../Topic/%3CsessionTokenRequirement%3E.md) element. Note: The <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A> property on the cookie handler configured for the SAM is not used.  \n  \n7.  Calls the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken%2A> method with the session token to write the session cookie. The <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken%2A> method first raises the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated> event. You can change properties on the session token or change whether the cookie should be persisted in a handler for this event. After the event is raised, the method then writes the cookie using the SAM.  \n  \n    > [!NOTE]\n    >  The <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> set in configuration is not used to write the cookie.  \n  \n8.  Calls the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn%2A> method to raise the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn> event.  \n  \n9. Calls the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse%2A> method to get the RP page to which to redirect the client. By default, this method reads the return URL from the wctx parameter in the sign-in response. For more information about how WSFAM stores the return URL, see the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> method."
  syntax:
    content: protected virtual void OnAuthenticateRequest (object sender, EventArgs args);
    parameters:
    - id: sender
      type: System.Object
      description: "The source for the event. This will be an  object."
    - id: args
      type: System.EventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed(System.IdentityModel.Services.AuthorizationFailedEventArgs)
  id: OnAuthorizationFailed(System.IdentityModel.Services.AuthorizationFailedEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnAuthorizationFailed(AuthorizationFailedEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnAuthorizationFailed(AuthorizationFailedEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed(AuthorizationFailedEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Raises the <see cref=&quot;E:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed&quot;></see> event."
  remarks: "Called from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest%2A> event-handler delegate when authorization has failed.       Initializes the <xref:System.IdentityModel.Services.AuthorizationFailedEventArgs.RedirectToIdentityProvider%2A?displayProperty=fullName> property before raising the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed> event to prevent circular redirects if the user has already been authenticated. If the user is already authenticated, the property is initialized to `false` to prevent redirects; otherwise, it is initialized to `true`."
  syntax:
    content: protected virtual void OnAuthorizationFailed (System.IdentityModel.Services.AuthorizationFailedEventArgs e);
    parameters:
    - id: e
      type: System.IdentityModel.Services.AuthorizationFailedEventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest(System.Object,System.EventArgs)
  id: OnEndRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnEndRequest(Object,EventArgs)
  nameWithType: WSFederationAuthenticationModule.OnEndRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest(Object,EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Handles the <see cref=&quot;E:System.Web.HttpApplication.EndRequest&quot;></see> event from the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] pipeline."
  remarks: "The event is ignored unless the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled%2A> property is `true`."
  syntax:
    content: protected virtual void OnEndRequest (object sender, EventArgs args);
    parameters:
    - id: sender
      type: System.Object
      description: "The source for the event. This will be an  object."
    - id: args
      type: System.EventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)
  id: OnPostAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnPostAuthenticateRequest(Object,EventArgs)
  nameWithType: WSFederationAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Handles the <see cref=&quot;E:System.Web.HttpApplication.PostAuthenticateRequest&quot;></see> event from the [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] pipeline."
  remarks: "By default, this is an empty handler."
  syntax:
    content: protected virtual void OnPostAuthenticateRequest (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "The source for the event. This will be an  object."
    - id: e
      type: System.EventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider(System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs)
  id: OnRedirectingToIdentityProvider(System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnRedirectingToIdentityProvider(RedirectingToIdentityProviderEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnRedirectingToIdentityProvider(RedirectingToIdentityProviderEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider(RedirectingToIdentityProviderEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Raises the <see cref=&quot;E:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider&quot;></see> event."
  syntax:
    content: protected virtual void OnRedirectingToIdentityProvider (System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs e);
    parameters:
    - id: e
      type: System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  id: OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Raises the <see cref=&quot;E:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated&quot;></see> event."
  syntax:
    content: protected virtual void OnSessionSecurityTokenCreated (System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs args);
    parameters:
    - id: args
      type: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn(System.EventArgs)
  id: OnSignedIn(System.EventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnSignedIn(EventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSignedIn(EventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn(EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Raises the <see cref=&quot;E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn&quot;></see> event."
  syntax:
    content: protected virtual void OnSignedIn (EventArgs args);
    parameters:
    - id: args
      type: System.EventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut(System.EventArgs)
  id: OnSignedOut(System.EventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnSignedOut(EventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSignedOut(EventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut(EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Raises the <see cref=&quot;E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut&quot;></see> event."
  remarks: "Called from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=fullName> method just after the session is deleted."
  syntax:
    content: protected virtual void OnSignedOut (EventArgs args);
    parameters:
    - id: args
      type: System.EventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignInError(System.IdentityModel.Services.ErrorEventArgs)
  id: OnSignInError(System.IdentityModel.Services.ErrorEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnSignInError(ErrorEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSignInError(ErrorEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignInError(ErrorEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Raises the <see cref=&quot;E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError&quot;></see> event."
  syntax:
    content: protected virtual void OnSignInError (System.IdentityModel.Services.ErrorEventArgs args);
    parameters:
    - id: args
      type: System.IdentityModel.Services.ErrorEventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignInError*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  id: OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnSigningOut(SigningOutEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSigningOut(SigningOutEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut(SigningOutEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Raises the <see cref=&quot;E:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut&quot;></see> event."
  remarks: "Called from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=fullName> method just before the session is deleted."
  syntax:
    content: protected virtual void OnSigningOut (System.IdentityModel.Services.SigningOutEventArgs args);
    parameters:
    - id: args
      type: System.IdentityModel.Services.SigningOutEventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  id: OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: OnSignOutError(ErrorEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSignOutError(ErrorEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError(ErrorEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Raises the <see cref=&quot;E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError&quot;></see> event."
  remarks: "Called from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=fullName> method if an exception occurs during processing."
  syntax:
    content: protected virtual void OnSignOutError (System.IdentityModel.Services.ErrorEventArgs args);
    parameters:
    - id: args
      type: System.IdentityModel.Services.ErrorEventArgs
      description: "The data for the event."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled
  id: PassiveRedirectEnabled
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: PassiveRedirectEnabled
  nameWithType: WSFederationAuthenticationModule.PassiveRedirectEnabled
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets a value that specifies whether the module is enabled to initiate WS-Federation protocol redirects."
  remarks: "The module will not initiate WS-Federation protocol redirects when this mode is not enabled. If this property is `true`, the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property must be set to the URL of the Security Token Service (STS) to which the caller should be redirected.      > [!WARNING] >  Application code can issue WS-Federation sign-in requests explicitly by using the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn%2A> method, regardless of the value of the PassiveRedirectEnabled property."
  syntax:
    content: public bool PassiveRedirectEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to enable redirects; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects
  id: PersistentCookiesOnPassiveRedirects
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: PersistentCookiesOnPassiveRedirects
  nameWithType: WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets a value that specifies whether a persistent session cookie is issued on successful authentication."
  remarks: "You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated> event. This event is raised from the request processing pipeline when processing a WS-Federation sign-in response message from a security token service (STS)."
  syntax:
    content: public bool PersistentCookiesOnPassiveRedirects { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to issue a persistent session cookie; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Policy
  id: Policy
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: Policy
  nameWithType: WSFederationAuthenticationModule.Policy
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Policy
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets the value of the wp parameter to be used in WS-Federation sign-in requests (“wsignin1.0”)."
  remarks: "The wp parameter is optional. If the Policy property is set to `null` or an empty string, the wp parameter is not included in the sign-in request.       You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. This event is raised just before the module redirects to the security token service (STS) with a WS-Federation sign-in request message. The STS is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property."
  syntax:
    content: public string Policy { get; set; }
    return:
      type: System.String
      description: "A URL that identifies the policy to use."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.Policy*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Realm
  id: Realm
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: Realm
  nameWithType: WSFederationAuthenticationModule.Realm
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Realm
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets the value of the wtrealm parameter to be used for WS-Federation sign-in requests (“wsignin1.0”)."
  remarks: "This is a required property for WS-Federation sign-in requests. It must be set if passive redirects are enabled. The URI identifies the RP to the STS. (For identifying the STS to the RP, see the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property).       The value of this property is serialized as the wtrealm query string parameter in WS-Federation protocol. It identifies the RP to the STS. It is used by the STS to decide what policy to apply for token issuance and where to redirect the user to after token issuance. (For identifying the STS to the RP, see <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A>.)       You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. This event is raised just before the module redirects to the security token service (STS) with a WS-Federation sign-in request message. The STS is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property."
  syntax:
    content: public string Realm { get; set; }
    return:
      type: System.String
      description: "A URI that identifies the relying party (RP) to the security token service (STS)."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.Realm*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An attempt to set the property to  or an empty string occurs.       -or-       An attempt to set the property to a value that is not a valid, absolute URI occurs."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider
  id: RedirectingToIdentityProvider
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: RedirectingToIdentityProvider
  nameWithType: WSFederationAuthenticationModule.RedirectingToIdentityProvider
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Occurs when the module is going to redirect the user to the identity provider."
  remarks: "You can access and modify the WS-Federation sign-in request through the <xref:System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs.SignInRequestMessage%2A?displayProperty=fullName> property. For example, you can modify the <xref:System.IdentityModel.Services.FederationMessage.BaseUri%2A> property in the sign-in message to change the identity provider to which the request will be redirected. The RedirectingToIdentityProvider event is a cancelable event and you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true` to cancel the redirect.       The event is raised from inside the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider%2A> method through a call to the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider%2A> method.       To handle this event in an ASP.NET application, create a method called `WSFederationAuthentication_RedirectingToIdentityProvider` in the global.asax file."
  example:
  - "The following code shows how to add a handler for the RedirectingToIdentityProvider event in the `Application_Init` event in the global.asax file. The code is taken from the `FederationForWebApps` sample. For more information about this sample, see [WIF Code Sample Index](../Topic/WIF%20Code%20Sample%20Index.md).  \n  \n [!CODE [WifRcFederationForWebApps#1](../CodeSnippet/VS_Snippets_Misc/wifrcfederationforwebapps#1)]  \n  \n The following code shows the handler for the RedirectingToIdentityProvider event in the in the global.asax file of an RP. The code checks to see whether the incoming HTTP request contains a whr parameter, and, if it does, it sets this parameter on the WS-Federation sign-in request that will be sent to the STS. The code is taken from the `FederationForWebApps` sample. For more information about this sample, see [WIF Code Sample Index](../Topic/WIF%20Code%20Sample%20Index.md).  \n  \n [!CODE [WifRcFederationForWebApps#2](../CodeSnippet/VS_Snippets_Misc/wifrcfederationforwebapps#2)]  \n  \n The following code shows the handler for the RedirectingToIdentityProvider event in the in the global.asax file of a federation provider STS. The code checks to see whether the incoming HTTP request contains a whr parameter. If the request contains the whr parameter, the client is directed to the IP-STS for sign-in; if not, the client is directed to a home realm discovery page to select the IP-STS at which to sign in. The code is taken from the `FederationForWebApps` sample. For more information about this sample, see [WIF Code Sample Index](../Topic/WIF%20Code%20Sample%20Index.md).  \n  \n [!CODE [WifRcFederationForWebApps#3](../CodeSnippet/VS_Snippets_Misc/wifrcfederationforwebapps#3)]"
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs> RedirectingToIdentityProvider;
    return:
      type: System.EventHandler{System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider(System.String,System.String,System.Boolean)
  id: RedirectToIdentityProvider(System.String,System.String,System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: RedirectToIdentityProvider(String,String,Boolean)
  nameWithType: WSFederationAuthenticationModule.RedirectToIdentityProvider(String,String,Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider(String,String,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Redirects the user to the security token service (STS) specified by the &lt;xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A&gt; property to obtain a security token using the WS-Federation protocol."
  remarks: "The RedirectToIdentityProvider method is called from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn%2A> method when the request is issued from a web page presented by the relying party (RP) or from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest%2A> event-handler delegate to perform a passive redirect to the identity provider on authorization failure.       The parameters passed to the method are used to create the wctx message parameter. The only significant parameter is the `returnUrl` parameter. This specifies the URL that the RP should direct the browser to following successful authentication. It should not be confused with the wreply message parameter, which is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Reply%2A> property and which provides the address at the RP to which the security token service (STS) should direct its response.       The method performs the following:      1.  Invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties%2A> method to ensure that a valid sign-in request can be issued by the module.      2.  Invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> method to create the sign-in request from the properties configured on the module.      3.  Invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider%2A> method to raise the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. You can cancel the redirect or modify the sign-in request message in the event handler for this event."
  syntax:
    content: public virtual void RedirectToIdentityProvider (string uniqueId, string returnUrl, bool persist);
    parameters:
    - id: uniqueId
      type: System.String
      description: "The WSFAM saves this value in the wctx parameter in the WS-Federation sign in request; however, the module does not use it when processing sign-in requests or sign-in responses. You can set it to any value. It does not have to be unique. For more information, see the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> method."
    - id: returnUrl
      type: System.String
      description: "The URL to which the module should return upon authentication."
    - id: persist
      type: System.Boolean
      description: "The WSFAM saves this value in the wctx parameter in the WS-Federation sign in request; however, the module does not use it when processing sign-in requests or sign-in responses. You can set it either  or ."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> is  or an empty string.       -or-       <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm%2A> is  or an empty string.       -or-       The <xref:System.Web.HttpContext.Current%2A?displayProperty=fullName> property is  or empty.       -or-       The <xref:System.Web.HttpContext.Response%2A> property of the context returned by <xref:System.Web.HttpContext.Current%2A?displayProperty=fullName> is  or empty."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Reply
  id: Reply
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: Reply
  nameWithType: WSFederationAuthenticationModule.Reply
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Reply
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets the value of the wreply parameter to use in WS-Federation sign-in requests (“wsignin1.0”)."
  remarks: "The wreply parameter is optional. If the Reply property is set to `null` or an empty string, the wreply parameter is not included in the sign-in request.       The wreply parameter is used by the STS to decide where to redirect the user to after token issuance. It is not advisable for the STS to blindly use this address to redirect the user as such redirection has security vulnerabilities. The reply address must be validated by the STS (possibly by comparing to a set of preconfigured reply addresses for the purposes or some other method) to make sure that the reply is being sent to understood well known and secure location."
  syntax:
    content: public string Reply { get; set; }
    return:
      type: System.String
      description: "A URL that identifies the address at which the relying party (RP) application would like to receive replies from the Security Token Service (STS)."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.Reply*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An attempt to set the property to a value that is not a valid, absolute URI occurs."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Request
  id: Request
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: Request
  nameWithType: WSFederationAuthenticationModule.Request
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Request
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets the value of the wreq parameter to use in WS-Federation sign-in requests (“wsignin1.0”)."
  remarks: "The wreq parameter is optional. If the Request property is set to `null` or an empty string, the wreq parameter is not included in the sign-in request.       You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. This event is raised just before the module redirects to the security token service (STS) with a WS-Federation sign-in request message. The STS is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property."
  syntax:
    content: public string Request { get; set; }
    return:
      type: System.String
      description: "The token issuance request expressed as a <xref uid=&quot;langword_csharp_&lt;wst:RequestSecurityToken&gt;&quot; name=&quot;&lt;wst:RequestSecurityToken&gt;&quot; href=&quot;&quot;></xref> element."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.Request*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr
  id: RequestPtr
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: RequestPtr
  nameWithType: WSFederationAuthenticationModule.RequestPtr
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets the value of the wreqptr parameter to use in WS-Federation sign-in requests (“wsignin1.0”)."
  remarks: "The wreqptr parameter is optional. If the RequestPtr property is set to `null` or an empty string, the wreq parameter is not included in the sign-in request.       You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. This event is raised just before the module redirects to the security token service (STS) with a WS-Federation sign-in request message. The STS is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property."
  syntax:
    content: public string RequestPtr { get; set; }
    return:
      type: System.String
      description: "A URL that specifies the location of the token issuance request expressed as a <xref uid=&quot;langword_csharp_&lt;wst:RequestSecurityToken&gt;&quot; name=&quot;&lt;wst:RequestSecurityToken&gt;&quot; href=&quot;&quot;></xref> element"
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An attempt to set the property to a value that is not a valid, absolute URI occurs."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps
  id: RequireHttps
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: RequireHttps
  nameWithType: WSFederationAuthenticationModule.RequireHttps
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets a value that specifies whether communication with the security token service (STS) must use HTTPS protocol."
  syntax:
    content: public bool RequireHttps { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if communication with the STS must be secured using HTTPS; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Resource
  id: Resource
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: Resource
  nameWithType: WSFederationAuthenticationModule.Resource
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Resource
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Get or sets the value of the wres parameter to use in WS-Federation sign-in requests (“wsignin1.0”)."
  remarks: "The wtrealm parameter, which is set by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm%2A> property, should be used instead of this parameter.       The wres parameter is optional. If the Resource property is set to `null` or an empty string, the wres parameter is not included in the sign-in request.       You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. This event is raised just before the module redirects to the security token service (STS) with a WS-Federation sign-in request message. The STS is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property."
  syntax:
    content: public string Resource { get; set; }
    return:
      type: System.String
      description: "A URI that identifies the resource being accessed, the relying party (RP), to the to the security token service (STS)."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.Resource*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived
  id: SecurityTokenReceived
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SecurityTokenReceived
  nameWithType: WSFederationAuthenticationModule.SecurityTokenReceived
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Occurs when a security token has been received from a security token service (STS)."
  remarks: "You can add an event handler to modify the token before it is validated. In the event handler you can access the security token through the <xref:System.IdentityModel.Services.SecurityTokenReceivedEventArgs.SecurityToken%2A?displayProperty=fullName> property. The SecurityTokenReceived event is a cancelable event, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true` in an event handler to terminate processing of the WS-Federation sign-in response message.       This event is raised from inside the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A> event-handler delegate when processing a WS-Federation sign-in response message (“wsignin1.0”) received from the security token service (STS). It is raised just after a security token has been deserialized from the wresult or the wresultptr parameter in the sign-in response message, but before the security token is validated."
  example:
  - '[!code-cs[WifWSFAM#6](~/add/codesnippet/CSharp/wsfam/global.asax.cs#6)]'
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.SecurityTokenReceivedEventArgs> SecurityTokenReceived;
    return:
      type: System.EventHandler{System.IdentityModel.Services.SecurityTokenReceivedEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated
  id: SecurityTokenValidated
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SecurityTokenValidated
  nameWithType: WSFederationAuthenticationModule.SecurityTokenValidated
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Occurs after a security token that was received from the security token service (STS) has been validated but before the session security token is created."
  remarks: "You can add an event handler to modify the principal created while processing a WS-Federation sign-in response message from a security token service (STS) before it is used to create the session token. In the event handler, you can access the principal through the <xref:System.IdentityModel.Services.SecurityTokenValidatedEventArgs.ClaimsPrincipal%2A> property. The SecurityTokenValidated event is a cancelable event, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property to `true` in an event handler to terminate processing of the WS-Federation sign-in response message.       This event is raised from inside the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A> event-handler delegate when processing a WS-Federation sign-in response message (“wsignin1.0”) received from the security token service (STS). It is raised just after the security token that was deserialized from the wresult or the wresultptr parameter in the sign-in response message has been validated, and before the session security token is created."
  example:
  - '[!code-cs[WifWSFAM#5](~/add/codesnippet/CSharp/wsfam/global.asax.cs#5)]'
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.SecurityTokenValidatedEventArgs> SecurityTokenValidated;
    return:
      type: System.EventHandler{System.IdentityModel.Services.SecurityTokenValidatedEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated
  id: SessionSecurityTokenCreated
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SessionSecurityTokenCreated
  nameWithType: WSFederationAuthenticationModule.SessionSecurityTokenCreated
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Occurs when a session security token has been created from the security token received from a security token service (STS)."
  remarks: "You can add an event handler to modify the session token before it is used to set the thread principal and is written to the session cookie. In the event handler, you can access the session token through the <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName> property. You can specify whether a session cookie should be written by setting the <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName> property.       This event is raised from inside the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A> event-handler delegate when processing a WS-Federation sign-in response message (“wsignin1.0”) received from the security token service (STS). It is raised just after the security token that was deserialized from the wresult or the wresultptr parameter in the sign-in response message has been validated, and before the claims principal is set on the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> (and on the <xref:System.Web.HttpContext.User%2A> property of <xref:System.Web.HttpContext.Current%2A?displayProperty=fullName>).      > [!IMPORTANT] >  To operate sessions in reference mode, Microsoft recommends providing a handler for the SessionSecurityTokenCreated event in the global.asax.cs file and setting the <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> property on the token passed in the <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName> property. This will ensure that the session token operates in reference mode for every request and is favored over merely setting the <xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A?displayProperty=fullName> property on the Session Authentication Module."
  example:
  - '[!code-cs[WifWSFAM#4](~/add/codesnippet/CSharp/wsfam/global.asax.cs#4)]'
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs> SessionSecurityTokenCreated;
    return:
      type: System.EventHandler{System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  id: SetPrincipalAndWriteSessionToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SetPrincipalAndWriteSessionToken(SessionSecurityToken,Boolean)
  nameWithType: WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken(SessionSecurityToken,Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken(SessionSecurityToken,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Sets the thread principal and optionally writes the session cookie."
  remarks: "Called from the request processing pipeline implemented in the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A> event-handler delegate. This method does the following:      1.  Invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated%2A> method to raise the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated> event. You can use this event to modify the session token before it is used to set the thread principal and written to the session cookie and to specify whether the session cookie should be written.      2.  Invokes the <xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> method on the configured session authentication module (<xref:System.IdentityModel.Services.SessionAuthenticationModule>) to set the thread principal and optionally write the session cookie."
  syntax:
    content: public void SetPrincipalAndWriteSessionToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken, bool isSession);
    parameters:
    - id: sessionToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "The session security token that was created from the WS-Federation sign-in response message from the STS."
    - id: isSession
      type: System.Boolean
      description: "\n     to write a cookie that represents the session included with the response; otherwise, ."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    sessionToken is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn
  id: SignedIn
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignedIn
  nameWithType: WSFederationAuthenticationModule.SignedIn
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Occurs after the user is signed in."
  remarks: "If the request is posted to the login page, a control on the page will raise this event, not this module."
  example:
  - '[!code-cs[WifWSFAM#3](~/add/codesnippet/CSharp/wsfam/global.asax.cs#3)]'
  syntax:
    content: public event EventHandler SignedIn;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut
  id: SignedOut
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignedOut
  nameWithType: WSFederationAuthenticationModule.SignedOut
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Occurs just after deleting the session during sign-out."
  remarks: "This event is raised through a call to the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut%2A> method from inside the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=fullName> method while signing out of the session at the relying party (RP). The event is not raised when doing federated sign-out through the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> method.       You can add an event handler to perform any additional processing that is needed by your application after the session cookie has been deleted.       This event is not guaranteed to be called for every session. Cookies may be deleted at the client side, for example, so this event would never be raised."
  syntax:
    content: public event EventHandler SignedOut;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn(System.String)
  id: SignIn(System.String)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignIn(String)
  nameWithType: WSFederationAuthenticationModule.SignIn(String)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn(String)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Performs sign-in to a security token service (STS) through the WS-Federation protocol."
  remarks: "The default implementation invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider%2A> method to perform the sign-in."
  syntax:
    content: public virtual void SignIn (string ControlId);
    parameters:
    - id: ControlId
      type: System.String
      description: "The WSFAM saves this value in the wctx parameter in the WS-Federation sign in request; however, the module does not use it when processing sign-in requests or sign-in responses. You can set it to any value. It does not have to be unique. For more information, see the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> method."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext
  id: SignInContext
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignInContext
  nameWithType: WSFederationAuthenticationModule.SignInContext
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gest or sets an application specific context value to be included in the wctx parameter in WS-Federation sign-in requests."
  remarks: "When the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> method is invoked, the sign-in message that is generated contains a wctx parameter that has the following format: `ru=returnUrl&cx=SignInContext&rm=rememberMeSet&id=uniqueId`. The value of the SignInContext is stored in the `cx` parameter. <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> can be called directly from your code. It is also called when the WSFAM is performing passive redirects and also when either the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn%2A> method or the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider%2A> method is invoked by application code.       Although the WSFAM saves the SignInContext value in sign-in request messages, if the value is used by your application during response processing, you must provide the logic for extracting it from the wctx parameter in the sign-in response message.       For more information about the format and processing of the wctx parameter, see the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> method."
  syntax:
    content: public string SignInContext { get; set; }
    return:
      type: System.String
      description: "The application specific context value to be included in the wctx parameter for sign-in requests."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError
  id: SignInError
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignInError
  nameWithType: WSFederationAuthenticationModule.SignInError
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Raised when an error during sign-in occurs."
  remarks: "If the request is posted to the login page, a control on the page will raise this event, not this module."
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.ErrorEventArgs> SignInError;
    return:
      type: System.EventHandler{System.IdentityModel.Services.ErrorEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut
  id: SigningOut
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SigningOut
  nameWithType: WSFederationAuthenticationModule.SigningOut
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Occurs before deleting the session during sign-out."
  remarks: "This event is raised through a call to the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut%2A> method from inside the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=fullName> method while signing out of the session at the relying party (RP). The event is not raised when doing federated sign-out through the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> method.       You can add an event handler to perform any additional processing that is needed by your application before the session cookie is deleted. You can read the <xref:System.IdentityModel.Services.SigningOutEventArgs.IsIPInitiated%2A> property in the event handler to determine whether the sign-out is the result of receiving a WS-Federation sign-out clean-up request message (“wsignoutcleanup1.0”) from a security token service (STS) or whether it was initiated at the RP.       This event is not guaranteed to be called for every session. Cookies may be deleted at the client side, for example, so this event would never be raised."
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.SigningOutEventArgs> SigningOut;
    return:
      type: System.EventHandler{System.IdentityModel.Services.SigningOutEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInQueryString
  id: SignInQueryString
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignInQueryString
  nameWithType: WSFederationAuthenticationModule.SignInQueryString
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInQueryString
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets a query string that contains any additional parameters to be sent in WS-Federation sign-in requests (“wsignin1.0”)."
  remarks: "You can use this property to send additional parameters in a sign-in request. These would be application-specific parameters that are not one of the parameters that are specified by the WS-Federation protocol. To remove additional parameters from the request set the property to an empty string.       You can override this setting on each HTTP request by adding a handler for the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> event. This event is raised just before the module redirects to the security token service (STS) with a WS-Federation sign-in request message. The STS is specified by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> property."
  syntax:
    content: public string SignInQueryString { get; set; }
    return:
      type: System.String
      description: 'A URL fragment that contains the additional message parameters in the following format: `param1=value1'
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInQueryString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "An attempt to set the property to  occurs."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut
  id: SignOut
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignOut()
  nameWithType: WSFederationAuthenticationModule.SignOut()
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Signs out of the current session and requests a redirect back to the URL specified in the current HTTP request."
  remarks: "Deletes the current session and redirects the browser back to the URL specified in the current HTTP request.       Invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.String%29?displayProperty=fullName> method with the `redirectUrl` parameter set to the URL of the current request.       No sign-out request message (“wsignout1.0”) is sent to the security token service (STS). To sign-out at the STS using WS-Federation protocol, use the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> method."
  syntax:
    content: public virtual void SignOut ();
    parameters: []
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.Boolean)
  id: SignOut(System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignOut(Boolean)
  nameWithType: WSFederationAuthenticationModule.SignOut(Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(Boolean)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Signs out of the current session and raises the appropriate events."
  remarks: "This method performs the actual work of deleting the current session and raising the appropriate sign-out events. The method does the following:      1.  Invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut%2A> method to raise the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut> event. An event handler can provide any necessary processing before the session is deleted. The <xref:System.IdentityModel.Services.SigningOutEventArgs.IsIpInitiated%2A?displayProperty=fullName> property is set according to the `isIPRequest` parameter.      2.  Calls the <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A?displayProperty=fullName> method on the current session authentication manager to delete the session cookie.           Invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut%2A> method to raise the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut> event.      3.  If an error occurs during sign-out processing, invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError%2A> method to raise the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError> event. An event handler can cancel the processing and prevent an exception from being returned to the caller of SignOut       You can call the SignOut method with the `isIPRequest` parameter set `false` to sign out of a session without performing a redirect. The method is ultimately called by all of the other overloaded SignOut methods (with the `isIPRequest` parameter set to `false`) to perform the sign out handling. The method is called from the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%28System.Web.HttpRequestBase%2CSystem.Boolean%29?displayProperty=fullName> method with the `isIPRequest` parameter set `true` to sign out of the session when it is processing a WS-Federation sign-out clean-up message (“wsignoutcleanup1.0”).       No sign-out request message (“wsignout1.0”) is sent to the security token service (STS). To sign-out at the STS using WS-Federation protocol, use the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> method."
  syntax:
    content: public virtual void SignOut (bool isIPRequest);
    parameters:
    - id: isIPRequest
      type: System.Boolean
      description: "\n     if the request was initiated by the IP-STS via a WS-Federation sign-out cleanup request message (“wsignoutcleanup1.0”); otherwise, ."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.String)
  id: SignOut(System.String)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignOut(String)
  nameWithType: WSFederationAuthenticationModule.SignOut(String)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(String)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Signs out of the current session and requests a redirect back to the specified URL."
  remarks: "Deletes the current session and redirects the browser back to the specified URL.       Invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.String%2CSystem.Boolean%29?displayProperty=fullName> method with the `redirectUrl` parameter and with the `initiateSignoutCleanup` set `false`.       No sign-out request message (“wsignout1.0”) is sent to the security token service (STS). To sign-out at the STS using WS-Federation protocol, use the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> method."
  syntax:
    content: public virtual void SignOut (string redirectUrl);
    parameters:
    - id: redirectUrl
      type: System.String
      description: "The URL to which the browser should be redirected after the session is deleted."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    redirectUrl is not a valid URI."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.String,System.Boolean)
  id: SignOut(System.String,System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignOut(String,Boolean)
  nameWithType: WSFederationAuthenticationModule.SignOut(String,Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(String,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Signs out of the current session and requests a redirect back to the specified URL."
  remarks: "Deletes the current session and redirects the browser back to the specified URL.       Invokes the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=fullName> method with the `initiateSignoutCleanup` parameter set `false`.       No sign-out request message (“wsignout1.0”) is sent to the security token service (STS). To sign-out at the STS using WS-Federation protocol, use the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> method."
  syntax:
    content: public virtual void SignOut (string redirectUrl, bool initiateSignoutCleanup);
    parameters:
    - id: redirectUrl
      type: System.String
      description: "The URL to which the browser should be redirected after sign-out."
    - id: initiateSignoutCleanup
      type: System.Boolean
      description: "Always set . Setting this parameter to  is not supported."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    redirectUrl is not a valid URI."
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "The  class throws this exception if initiateSignoutCleanup is . Do not set this parameter to ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError
  id: SignOutError
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignOutError
  nameWithType: WSFederationAuthenticationModule.SignOutError
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Raised when an error occurs during sign-out."
  remarks: "This event is raised through a call to the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError%2A> method from inside the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=fullName> method while signing out of the session at the relying party (RP). The event is not raised when doing federated sign-out through the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> method.       The SignOutError event is a cancellable event. You can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property in an event handler to prevent the exception that caused the error from being returned to the initiator of the sign-out."
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.ErrorEventArgs> SignOutError;
    return:
      type: System.EventHandler{System.IdentityModel.Services.ErrorEventArgs}
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutQueryString
  id: SignOutQueryString
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignOutQueryString
  nameWithType: WSFederationAuthenticationModule.SignOutQueryString
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutQueryString
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets a query string that contains any additional parameters to be sent in WS-Federation sign-out requests (“wsignout1.0”)."
  remarks: "By default, this property is initialized from the `signOutQueryString` attribute of the [\\<wsFederation>](../Topic/%3CwsFederation%3E.md) element in the configuration file. It is intended to contain any application-specific parameters to be sent in a WS-Federation sign-out request. To remove these parameters, you can set the property to an empty string.  \n  \n The WSFAM does not use this property directly; however, you can pass it to the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl%2A> method to create a complete WS-Federation sign-out URL that can then be used by your code."
  syntax:
    content: public string SignOutQueryString { get; set; }
    return:
      type: System.String
      description: 'A URL fragment that contains the additional message parameters in the following format: `param1=value1'
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutQueryString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "An attempt to set the property to  occurs."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply
  id: SignOutReply
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: SignOutReply
  nameWithType: WSFederationAuthenticationModule.SignOutReply
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets the value of the wreply parameter to use during WS-Federation sign-out requests (“wsignout1.0”)."
  remarks: "By default, this property is initialized from the `signOutReply` attribute of the [\\<wsFederation>](../Topic/%3CwsFederation%3E.md) element in the configuration file. It is intended to represent the wreply parameter in a WS-Federation sign-out request.  \n  \n The wreply parameter is optional. If the SignOutReply property is set to `null` or an empty string, the wreply parameter is not included in the sign-out request.  \n  \n The WSFAM does not use this property directly. However, you can pass it to the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> method when performing WS-Federation sign-out from your code or you can pass it to the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl%2A> method to create a complete WS-Federation sign-out URL."
  syntax:
    content: public string SignOutReply { get; set; }
    return:
      type: System.String
      description: "The URL to which the client should be redirected by the security token service (STS) following sign-out through the WS-Federation protocol."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties
  id: VerifyProperties
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: VerifyProperties()
  nameWithType: WSFederationAuthenticationModule.VerifyProperties()
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Verifies that the &lt;xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A&gt; and &lt;xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm%2A&gt; properties are non-empty, and, that, if the &lt;xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps%2A&gt; property is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, that the URIs specified for &lt;xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A&gt; and &lt;xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm%2A&gt; are HTTPS-compliant."
  syntax:
    content: public void VerifyProperties ();
    parameters: []
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> is  or an empty string.       -or-       <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm%2A> is  or an empty string.       -or-       <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps%2A> is  and <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> not HTTPS-compliant.       -or-       <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps%2A> is  and <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm%2A> not HTTPS-compliant."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.XmlDictionaryReaderQuotas
  id: XmlDictionaryReaderQuotas
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  langs:
  - csharp
  name: XmlDictionaryReaderQuotas
  nameWithType: WSFederationAuthenticationModule.XmlDictionaryReaderQuotas
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.XmlDictionaryReaderQuotas
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Gets or sets the &lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt; object to use when deserializing WS-Federation sign-in response messages to get the token issued by the security token service (STS)."
  syntax:
    content: public System.Xml.XmlDictionaryReaderQuotas XmlDictionaryReaderQuotas { get; set; }
    return:
      type: System.Xml.XmlDictionaryReaderQuotas
      description: "The &lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt; object to use when deserializing WS-Federation sign-in response messages to get the token issued by the security token service (STS)."
  overload: System.IdentityModel.Services.WSFederationAuthenticationModule.XmlDictionaryReaderQuotas*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "An attempt to set the property to  occurs."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.IdentityModel.Services.HttpModuleBase
  isExternal: false
  name: System.IdentityModel.Services.HttpModuleBase
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.#ctor
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: WSFederationAuthenticationModule()
  nameWithType: WSFederationAuthenticationModule.WSFederationAuthenticationModule()
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.WSFederationAuthenticationModule()
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: AuthenticationType
  nameWithType: WSFederationAuthenticationModule.AuthenticationType
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: AuthorizationFailed
  nameWithType: WSFederationAuthenticationModule.AuthorizationFailed
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed
- uid: System.EventHandler{System.IdentityModel.Services.AuthorizationFailedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<AuthorizationFailedEventArgs>
  nameWithType: EventHandler<AuthorizationFailedEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.AuthorizationFailedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.AuthorizationFailedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.AuthorizationFailedEventArgs
    name: AuthorizationFailedEventArgs
    nameWithType: AuthorizationFailedEventArgs
    fullName: AuthorizationFailedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: CanReadSignInResponse(HttpRequestBase)
  nameWithType: WSFederationAuthenticationModule.CanReadSignInResponse(HttpRequestBase)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(HttpRequestBase)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpRequestBase
  parent: System.Web
  isExternal: true
  name: HttpRequestBase
  nameWithType: HttpRequestBase
  fullName: System.Web.HttpRequestBase
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase,System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: CanReadSignInResponse(HttpRequestBase,Boolean)
  nameWithType: WSFederationAuthenticationModule.CanReadSignInResponse(HttpRequestBase,Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(HttpRequestBase,Boolean)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: CreateSignInRequest(String,String,Boolean)
  nameWithType: WSFederationAuthenticationModule.CreateSignInRequest(String,String,Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(String,String,Boolean)
- uid: System.IdentityModel.Services.SignInRequestMessage
  parent: System.IdentityModel.Services
  isExternal: false
  name: SignInRequestMessage
  nameWithType: SignInRequestMessage
  fullName: System.IdentityModel.Services.SignInRequestMessage
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut(System.Uri,System.Uri)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: FederatedSignOut(Uri,Uri)
  nameWithType: WSFederationAuthenticationModule.FederatedSignOut(Uri,Uri)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut(Uri,Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Freshness
  nameWithType: WSFederationAuthenticationModule.Freshness
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl(System.String,System.String,System.String)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetFederationPassiveSignOutUrl(String,String,String)
  nameWithType: WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl(String,String,String)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl(String,String,String)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult(System.String)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetReferencedResult(String)
  nameWithType: WSFederationAuthenticationModule.GetReferencedResult(String)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult(String)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse(System.Web.HttpRequestBase)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetReturnUrlFromResponse(HttpRequestBase)
  nameWithType: WSFederationAuthenticationModule.GetReturnUrlFromResponse(HttpRequestBase)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse(HttpRequestBase)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(System.IdentityModel.Services.SignInResponseMessage)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetSecurityToken(SignInResponseMessage)
  nameWithType: WSFederationAuthenticationModule.GetSecurityToken(SignInResponseMessage)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(SignInResponseMessage)
- uid: System.IdentityModel.Tokens.SecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
- uid: System.IdentityModel.Services.SignInResponseMessage
  parent: System.IdentityModel.Services
  isExternal: false
  name: SignInResponseMessage
  nameWithType: SignInResponseMessage
  fullName: System.IdentityModel.Services.SignInResponseMessage
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(System.Web.HttpRequestBase)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetSecurityToken(HttpRequestBase)
  nameWithType: WSFederationAuthenticationModule.GetSecurityToken(HttpRequestBase)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(HttpRequestBase)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetSessionTokenContext()
  nameWithType: WSFederationAuthenticationModule.GetSessionTokenContext()
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext()
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage(System.Web.HttpRequestBase)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetSignInResponseMessage(HttpRequestBase)
  nameWithType: WSFederationAuthenticationModule.GetSignInResponseMessage(HttpRequestBase)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage(HttpRequestBase)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl(System.IdentityModel.Services.SignOutCleanupRequestMessage)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetSignOutRedirectUrl(SignOutCleanupRequestMessage)
  nameWithType: WSFederationAuthenticationModule.GetSignOutRedirectUrl(SignOutCleanupRequestMessage)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl(SignOutCleanupRequestMessage)
- uid: System.IdentityModel.Services.SignOutCleanupRequestMessage
  parent: System.IdentityModel.Services
  isExternal: false
  name: SignOutCleanupRequestMessage
  nameWithType: SignOutCleanupRequestMessage
  fullName: System.IdentityModel.Services.SignOutCleanupRequestMessage
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetXmlTokenFromMessage(SignInResponseMessage)
  nameWithType: WSFederationAuthenticationModule.GetXmlTokenFromMessage(SignInResponseMessage)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(SignInResponseMessage)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage,System.IdentityModel.Services.WSFederationSerializer)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetXmlTokenFromMessage(SignInResponseMessage,WSFederationSerializer)
  nameWithType: WSFederationAuthenticationModule.GetXmlTokenFromMessage(SignInResponseMessage,WSFederationSerializer)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(SignInResponseMessage,WSFederationSerializer)
- uid: System.IdentityModel.Services.WSFederationSerializer
  parent: System.IdentityModel.Services
  isExternal: false
  name: WSFederationSerializer
  nameWithType: WSFederationSerializer
  fullName: System.IdentityModel.Services.WSFederationSerializer
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: HomeRealm
  nameWithType: WSFederationAuthenticationModule.HomeRealm
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule(System.Web.HttpApplication)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: InitializeModule(HttpApplication)
  nameWithType: WSFederationAuthenticationModule.InitializeModule(HttpApplication)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule(HttpApplication)
- uid: System.Web.HttpApplication
  parent: System.Web
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: InitializePropertiesFromConfiguration()
  nameWithType: WSFederationAuthenticationModule.InitializePropertiesFromConfiguration()
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration()
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse(System.Web.HttpRequestBase)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: IsSignInResponse(HttpRequestBase)
  nameWithType: WSFederationAuthenticationModule.IsSignInResponse(HttpRequestBase)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse(HttpRequestBase)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Issuer
  nameWithType: WSFederationAuthenticationModule.Issuer
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnAuthenticateRequest(Object,EventArgs)
  nameWithType: WSFederationAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed(System.IdentityModel.Services.AuthorizationFailedEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnAuthorizationFailed(AuthorizationFailedEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnAuthorizationFailed(AuthorizationFailedEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed(AuthorizationFailedEventArgs)
- uid: System.IdentityModel.Services.AuthorizationFailedEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: AuthorizationFailedEventArgs
  nameWithType: AuthorizationFailedEventArgs
  fullName: System.IdentityModel.Services.AuthorizationFailedEventArgs
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnEndRequest(Object,EventArgs)
  nameWithType: WSFederationAuthenticationModule.OnEndRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest(Object,EventArgs)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnPostAuthenticateRequest(Object,EventArgs)
  nameWithType: WSFederationAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider(System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnRedirectingToIdentityProvider(RedirectingToIdentityProviderEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnRedirectingToIdentityProvider(RedirectingToIdentityProviderEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider(RedirectingToIdentityProviderEventArgs)
- uid: System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: RedirectingToIdentityProviderEventArgs
  nameWithType: RedirectingToIdentityProviderEventArgs
  fullName: System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
- uid: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: SessionSecurityTokenCreatedEventArgs
  nameWithType: SessionSecurityTokenCreatedEventArgs
  fullName: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn(System.EventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSignedIn(EventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSignedIn(EventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn(EventArgs)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut(System.EventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSignedOut(EventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSignedOut(EventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut(EventArgs)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignInError(System.IdentityModel.Services.ErrorEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSignInError(ErrorEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSignInError(ErrorEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignInError(ErrorEventArgs)
- uid: System.IdentityModel.Services.ErrorEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: ErrorEventArgs
  nameWithType: ErrorEventArgs
  fullName: System.IdentityModel.Services.ErrorEventArgs
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSigningOut(SigningOutEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSigningOut(SigningOutEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut(SigningOutEventArgs)
- uid: System.IdentityModel.Services.SigningOutEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: SigningOutEventArgs
  nameWithType: SigningOutEventArgs
  fullName: System.IdentityModel.Services.SigningOutEventArgs
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSignOutError(ErrorEventArgs)
  nameWithType: WSFederationAuthenticationModule.OnSignOutError(ErrorEventArgs)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError(ErrorEventArgs)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: PassiveRedirectEnabled
  nameWithType: WSFederationAuthenticationModule.PassiveRedirectEnabled
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: PersistentCookiesOnPassiveRedirects
  nameWithType: WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Policy
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Policy
  nameWithType: WSFederationAuthenticationModule.Policy
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Policy
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Realm
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Realm
  nameWithType: WSFederationAuthenticationModule.Realm
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Realm
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: RedirectingToIdentityProvider
  nameWithType: WSFederationAuthenticationModule.RedirectingToIdentityProvider
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider
- uid: System.EventHandler{System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<RedirectingToIdentityProviderEventArgs>
  nameWithType: EventHandler<RedirectingToIdentityProviderEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs
    name: RedirectingToIdentityProviderEventArgs
    nameWithType: RedirectingToIdentityProviderEventArgs
    fullName: RedirectingToIdentityProviderEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider(System.String,System.String,System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: RedirectToIdentityProvider(String,String,Boolean)
  nameWithType: WSFederationAuthenticationModule.RedirectToIdentityProvider(String,String,Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider(String,String,Boolean)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Reply
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Reply
  nameWithType: WSFederationAuthenticationModule.Reply
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Reply
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Request
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Request
  nameWithType: WSFederationAuthenticationModule.Request
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Request
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: RequestPtr
  nameWithType: WSFederationAuthenticationModule.RequestPtr
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: RequireHttps
  nameWithType: WSFederationAuthenticationModule.RequireHttps
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Resource
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Resource
  nameWithType: WSFederationAuthenticationModule.Resource
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.Resource
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SecurityTokenReceived
  nameWithType: WSFederationAuthenticationModule.SecurityTokenReceived
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived
- uid: System.EventHandler{System.IdentityModel.Services.SecurityTokenReceivedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SecurityTokenReceivedEventArgs>
  nameWithType: EventHandler<SecurityTokenReceivedEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.SecurityTokenReceivedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.SecurityTokenReceivedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.SecurityTokenReceivedEventArgs
    name: SecurityTokenReceivedEventArgs
    nameWithType: SecurityTokenReceivedEventArgs
    fullName: SecurityTokenReceivedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SecurityTokenValidated
  nameWithType: WSFederationAuthenticationModule.SecurityTokenValidated
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated
- uid: System.EventHandler{System.IdentityModel.Services.SecurityTokenValidatedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SecurityTokenValidatedEventArgs>
  nameWithType: EventHandler<SecurityTokenValidatedEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.SecurityTokenValidatedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.SecurityTokenValidatedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.SecurityTokenValidatedEventArgs
    name: SecurityTokenValidatedEventArgs
    nameWithType: SecurityTokenValidatedEventArgs
    fullName: SecurityTokenValidatedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SessionSecurityTokenCreated
  nameWithType: WSFederationAuthenticationModule.SessionSecurityTokenCreated
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated
- uid: System.EventHandler{System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SessionSecurityTokenCreatedEventArgs>
  nameWithType: EventHandler<SessionSecurityTokenCreatedEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
    name: SessionSecurityTokenCreatedEventArgs
    nameWithType: SessionSecurityTokenCreatedEventArgs
    fullName: SessionSecurityTokenCreatedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SetPrincipalAndWriteSessionToken(SessionSecurityToken,Boolean)
  nameWithType: WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken(SessionSecurityToken,Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken(SessionSecurityToken,Boolean)
- uid: System.IdentityModel.Tokens.SessionSecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SessionSecurityToken
  nameWithType: SessionSecurityToken
  fullName: System.IdentityModel.Tokens.SessionSecurityToken
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignedIn
  nameWithType: WSFederationAuthenticationModule.SignedIn
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignedOut
  nameWithType: WSFederationAuthenticationModule.SignedOut
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn(System.String)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignIn(String)
  nameWithType: WSFederationAuthenticationModule.SignIn(String)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn(String)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignInContext
  nameWithType: WSFederationAuthenticationModule.SignInContext
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignInError
  nameWithType: WSFederationAuthenticationModule.SignInError
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError
- uid: System.EventHandler{System.IdentityModel.Services.ErrorEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ErrorEventArgs>
  nameWithType: EventHandler<ErrorEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.ErrorEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.ErrorEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.ErrorEventArgs
    name: ErrorEventArgs
    nameWithType: ErrorEventArgs
    fullName: ErrorEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SigningOut
  nameWithType: WSFederationAuthenticationModule.SigningOut
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut
- uid: System.EventHandler{System.IdentityModel.Services.SigningOutEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SigningOutEventArgs>
  nameWithType: EventHandler<SigningOutEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.SigningOutEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.SigningOutEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.SigningOutEventArgs
    name: SigningOutEventArgs
    nameWithType: SigningOutEventArgs
    fullName: SigningOutEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInQueryString
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignInQueryString
  nameWithType: WSFederationAuthenticationModule.SignInQueryString
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInQueryString
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignOut()
  nameWithType: WSFederationAuthenticationModule.SignOut()
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut()
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignOut(Boolean)
  nameWithType: WSFederationAuthenticationModule.SignOut(Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(Boolean)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.String)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignOut(String)
  nameWithType: WSFederationAuthenticationModule.SignOut(String)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(String)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.String,System.Boolean)
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignOut(String,Boolean)
  nameWithType: WSFederationAuthenticationModule.SignOut(String,Boolean)
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(String,Boolean)
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignOutError
  nameWithType: WSFederationAuthenticationModule.SignOutError
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutQueryString
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignOutQueryString
  nameWithType: WSFederationAuthenticationModule.SignOutQueryString
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutQueryString
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignOutReply
  nameWithType: WSFederationAuthenticationModule.SignOutReply
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: VerifyProperties()
  nameWithType: WSFederationAuthenticationModule.VerifyProperties()
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties()
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.XmlDictionaryReaderQuotas
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: XmlDictionaryReaderQuotas
  nameWithType: WSFederationAuthenticationModule.XmlDictionaryReaderQuotas
  fullName: System.IdentityModel.Services.WSFederationAuthenticationModule.XmlDictionaryReaderQuotas
- uid: System.Xml.XmlDictionaryReaderQuotas
  parent: System.Xml
  isExternal: true
  name: XmlDictionaryReaderQuotas
  nameWithType: XmlDictionaryReaderQuotas
  fullName: System.Xml.XmlDictionaryReaderQuotas
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.#ctor*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: WSFederationAuthenticationModule
  nameWithType: WSFederationAuthenticationModule.WSFederationAuthenticationModule
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: AuthenticationType
  nameWithType: WSFederationAuthenticationModule.AuthenticationType
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: CanReadSignInResponse
  nameWithType: WSFederationAuthenticationModule.CanReadSignInResponse
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: CreateSignInRequest
  nameWithType: WSFederationAuthenticationModule.CreateSignInRequest
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: FederatedSignOut
  nameWithType: WSFederationAuthenticationModule.FederatedSignOut
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Freshness
  nameWithType: WSFederationAuthenticationModule.Freshness
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetFederationPassiveSignOutUrl
  nameWithType: WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetReferencedResult
  nameWithType: WSFederationAuthenticationModule.GetReferencedResult
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetReturnUrlFromResponse
  nameWithType: WSFederationAuthenticationModule.GetReturnUrlFromResponse
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetSecurityToken
  nameWithType: WSFederationAuthenticationModule.GetSecurityToken
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetSessionTokenContext
  nameWithType: WSFederationAuthenticationModule.GetSessionTokenContext
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetSignInResponseMessage
  nameWithType: WSFederationAuthenticationModule.GetSignInResponseMessage
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetSignOutRedirectUrl
  nameWithType: WSFederationAuthenticationModule.GetSignOutRedirectUrl
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: GetXmlTokenFromMessage
  nameWithType: WSFederationAuthenticationModule.GetXmlTokenFromMessage
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: HomeRealm
  nameWithType: WSFederationAuthenticationModule.HomeRealm
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: InitializeModule
  nameWithType: WSFederationAuthenticationModule.InitializeModule
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: InitializePropertiesFromConfiguration
  nameWithType: WSFederationAuthenticationModule.InitializePropertiesFromConfiguration
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: IsSignInResponse
  nameWithType: WSFederationAuthenticationModule.IsSignInResponse
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Issuer
  nameWithType: WSFederationAuthenticationModule.Issuer
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnAuthenticateRequest
  nameWithType: WSFederationAuthenticationModule.OnAuthenticateRequest
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnAuthorizationFailed
  nameWithType: WSFederationAuthenticationModule.OnAuthorizationFailed
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnEndRequest
  nameWithType: WSFederationAuthenticationModule.OnEndRequest
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnPostAuthenticateRequest
  nameWithType: WSFederationAuthenticationModule.OnPostAuthenticateRequest
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnRedirectingToIdentityProvider
  nameWithType: WSFederationAuthenticationModule.OnRedirectingToIdentityProvider
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSessionSecurityTokenCreated
  nameWithType: WSFederationAuthenticationModule.OnSessionSecurityTokenCreated
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSignedIn
  nameWithType: WSFederationAuthenticationModule.OnSignedIn
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSignedOut
  nameWithType: WSFederationAuthenticationModule.OnSignedOut
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignInError*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSignInError
  nameWithType: WSFederationAuthenticationModule.OnSignInError
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSigningOut
  nameWithType: WSFederationAuthenticationModule.OnSigningOut
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: OnSignOutError
  nameWithType: WSFederationAuthenticationModule.OnSignOutError
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: PassiveRedirectEnabled
  nameWithType: WSFederationAuthenticationModule.PassiveRedirectEnabled
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: PersistentCookiesOnPassiveRedirects
  nameWithType: WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Policy*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Policy
  nameWithType: WSFederationAuthenticationModule.Policy
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Realm*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Realm
  nameWithType: WSFederationAuthenticationModule.Realm
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: RedirectToIdentityProvider
  nameWithType: WSFederationAuthenticationModule.RedirectToIdentityProvider
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Reply*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Reply
  nameWithType: WSFederationAuthenticationModule.Reply
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Request*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Request
  nameWithType: WSFederationAuthenticationModule.Request
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: RequestPtr
  nameWithType: WSFederationAuthenticationModule.RequestPtr
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: RequireHttps
  nameWithType: WSFederationAuthenticationModule.RequireHttps
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.Resource*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: Resource
  nameWithType: WSFederationAuthenticationModule.Resource
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SetPrincipalAndWriteSessionToken
  nameWithType: WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignIn
  nameWithType: WSFederationAuthenticationModule.SignIn
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignInContext
  nameWithType: WSFederationAuthenticationModule.SignInContext
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignInQueryString*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignInQueryString
  nameWithType: WSFederationAuthenticationModule.SignInQueryString
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignOut
  nameWithType: WSFederationAuthenticationModule.SignOut
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutQueryString*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignOutQueryString
  nameWithType: WSFederationAuthenticationModule.SignOutQueryString
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: SignOutReply
  nameWithType: WSFederationAuthenticationModule.SignOutReply
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: VerifyProperties
  nameWithType: WSFederationAuthenticationModule.VerifyProperties
- uid: System.IdentityModel.Services.WSFederationAuthenticationModule.XmlDictionaryReaderQuotas*
  parent: System.IdentityModel.Services.WSFederationAuthenticationModule
  isExternal: false
  name: XmlDictionaryReaderQuotas
  nameWithType: WSFederationAuthenticationModule.XmlDictionaryReaderQuotas
