### YamlMime:ManagedReference
items:
- uid: System.Reflection.AssemblyNameProxy
  id: AssemblyNameProxy
  children:
  - System.Reflection.AssemblyNameProxy.#ctor
  - System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)
  langs:
  - csharp
  name: AssemblyNameProxy
  nameWithType: AssemblyNameProxy
  fullName: System.Reflection.AssemblyNameProxy
  type: Class
  summary: "Provides a remotable version of the <xref uid=&quot;langword_csharp_AssemblyName&quot; name=&quot;AssemblyName&quot; href=&quot;&quot;></xref>."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AssemblyNameProxy : MarshalByRefObject
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyNameProxy.#ctor
  id: '#ctor'
  parent: System.Reflection.AssemblyNameProxy
  langs:
  - csharp
  name: AssemblyNameProxy()
  nameWithType: AssemblyNameProxy.AssemblyNameProxy()
  fullName: System.Reflection.AssemblyNameProxy.AssemblyNameProxy()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Initializes a new instance of the <see cref=&quot;T:System.Reflection.AssemblyNameProxy&quot;></see> class."
  syntax:
    content: public AssemblyNameProxy ();
    parameters: []
  overload: System.Reflection.AssemblyNameProxy.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)
  id: GetAssemblyName(System.String)
  parent: System.Reflection.AssemblyNameProxy
  langs:
  - csharp
  name: GetAssemblyName(String)
  nameWithType: AssemblyNameProxy.GetAssemblyName(String)
  fullName: System.Reflection.AssemblyNameProxy.GetAssemblyName(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Gets the <xref uid=&quot;langword_csharp_AssemblyName&quot; name=&quot;AssemblyName&quot; href=&quot;&quot;></xref> for a given file."
  remarks: "This will only work if the file contains an assembly manifest. This method causes the file to be opened and closed."
  syntax:
    content: public System.Reflection.AssemblyName GetAssemblyName (string assemblyFile);
    parameters:
    - id: assemblyFile
      type: System.String
      description: "The assembly file for which to get the ."
    return:
      type: System.Reflection.AssemblyName
      description: "To be added."
  overload: System.Reflection.AssemblyNameProxy.GetAssemblyName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    assemblyFile is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    assemblyFile is empty."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n    assemblyFile is not found."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n    assemblyFile is not a valid assembly."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Reflection.AssemblyNameProxy.#ctor
  parent: System.Reflection.AssemblyNameProxy
  isExternal: false
  name: AssemblyNameProxy()
  nameWithType: AssemblyNameProxy.AssemblyNameProxy()
  fullName: System.Reflection.AssemblyNameProxy.AssemblyNameProxy()
- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)
  parent: System.Reflection.AssemblyNameProxy
  isExternal: false
  name: GetAssemblyName(String)
  nameWithType: AssemblyNameProxy.GetAssemblyName(String)
  fullName: System.Reflection.AssemblyNameProxy.GetAssemblyName(String)
- uid: System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: true
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyNameProxy.#ctor*
  parent: System.Reflection.AssemblyNameProxy
  isExternal: false
  name: AssemblyNameProxy
  nameWithType: AssemblyNameProxy.AssemblyNameProxy
- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName*
  parent: System.Reflection.AssemblyNameProxy
  isExternal: false
  name: GetAssemblyName
  nameWithType: AssemblyNameProxy.GetAssemblyName
