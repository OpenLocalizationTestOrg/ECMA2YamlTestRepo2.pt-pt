### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.FileUpload
  id: FileUpload
  children:
  - System.Web.UI.WebControls.FileUpload.#ctor
  - System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.FileUpload.AllowMultiple
  - System.Web.UI.WebControls.FileUpload.FileBytes
  - System.Web.UI.WebControls.FileUpload.FileContent
  - System.Web.UI.WebControls.FileUpload.FileName
  - System.Web.UI.WebControls.FileUpload.HasFile
  - System.Web.UI.WebControls.FileUpload.HasFiles
  - System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)
  - System.Web.UI.WebControls.FileUpload.PostedFile
  - System.Web.UI.WebControls.FileUpload.PostedFiles
  - System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.FileUpload.SaveAs(System.String)
  langs:
  - csharp
  name: FileUpload
  nameWithType: FileUpload
  fullName: System.Web.UI.WebControls.FileUpload
  type: Class
  summary: "Apresenta um controlo de caixa de texto e um bot√£o de procura que permitem aos utilizadores selecionar um ficheiro a carregar para o servidor."
  remarks: "In this topic:  \n  \n-   [Introduction](#introduction)  \n  \n-   [Saving Uploaded Files](#saving_uploaded_files)  \n  \n-   [Security Considerations](#security_considerations)  \n  \n-   [Memory Limitations](#memory_limitations)  \n  \n-   [Using the FileUpload Control with the UpdatePanel Control](#using_the_FileUpload_Control_with_the_UpdatePanel_control)  \n  \n-   [Declarative Syntax](#DeclarativeSyntax)  \n  \n<a name=\"introduction\"></a>   \n## Introduction  \n The FileUpload class displays a text box control and a browse button that enable users to select a file on the client and upload it to the Web server. The user specifies the file to upload by entering the full path of the file on the local computer (for example, **C:\\MyFiles\\TestFile.txt**) in the text box of the control. Alternately, the user can select the file by clicking the **Browse** button, and then locating it in the **Choose File** dialog box.  \n  \n Use the <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> property to get the name of a file on a client to upload by using the FileUpload control. The file name that this property returns does not include the path of the file on the client.  \n  \n The <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property gets a <xref:System.IO.Stream> object that points to a file to upload. Use this property to access the contents of the file as bytes. For example, you can use the <xref:System.IO.Stream> object that is returned by the <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property to read the contents of the file as bytes and store them in a byte array. Alternatively, you can use the <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> property to retrieve all the bytes in the file.  \n  \n The <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> property gets the underlying <xref:System.Web.HttpPostedFile> object for the file to upload. You can use this property to access additional properties on the file. The <xref:System.Web.HttpPostedFile.ContentLength%2A> property gets the length of the file. The <xref:System.Web.HttpPostedFile.ContentType%2A> property gets the MIME content type of the file. In addition, you can use the <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> property to access the <xref:System.Web.HttpPostedFile.FileName%2A> property, the <xref:System.Web.HttpPostedFile.InputStream%2A> property, and the <xref:System.Web.HttpPostedFile.SaveAs%2A> method. However, the same functionality is provided by the <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> property, the <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property, and the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method.  \n  \n<a name=\"saving_uploaded_files\"></a>   \n## Saving Uploaded Files  \n The FileUpload control does not automatically save a file to the server after the user selects the file to upload. You must explicitly provide a control or mechanism to allow the user to submit the specified file. For example, you can provide a button that the user clicks to upload the file. The code that you write to save the specified file should call the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method, which saves the contents of a file to a specified path on the server. Typically, the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called in an event-handling method for an event that raises a post back to the server. For example, if you provide a button to submit a file, you could include the code to save the file inside the event-handling method for the click event.  \n  \n Before calling the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method to save the file to the server, use the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> property to verify that the FileUpload control contains a file. If the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> returns `true`, call the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method. If it returns `false`, display a message to the user indicating that the control does not contain a file. Do not check the <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> property to determine whether a file to upload exists because, by default, this property contains 0 bytes. As a result, even when the FileUpload control is blank, the <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> property returns a non-null value.  \n  \n<a name=\"security_considerations\"></a>   \n## Security Considerations  \n When you call the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method, you must specify the full path of the directory in which to save the uploaded file. If you do not explicitly specify a path in your application code, an exception is thrown when a user attempts to upload a file. This behavior helps keep the files on the server secure by preventing users from being able to write to arbitrary locations in your application's directory structure, as well as preventing access to sensitive root directories.  \n  \n The <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method writes the uploaded file to the specified directory. Therefore, the ASP.NET application must have write access to the directory on the server. There are two ways that the application can get write access. You can explicitly grant write access to the account under which the application is running, in the directory in which the uploaded files will be saved. Alternatively, you can increase the level of trust that is granted to the ASP.NET application. To get write access to the executing directory for the application, the application must be granted the <xref:System.Web.AspNetHostingPermission> object with the trust level set to the <xref:System.Web.AspNetHostingPermissionLevel?displayProperty=fullName> value. Increasing the level of trust increases the application's access to resources on the server. Note that this is not a secure approach, because a malicious user who gains control of your application will also be able to run under this higher level of trust. It is a best practice to run an ASP.NET application in the context of a user with the minimum privileges that are required for the application to run. For more information about security in ASP.NET applications, see [Basic Security Practices for Web Applications](~/add/includes/ajax-current-ext-md.md) and [ASP.NET Trust Levels and Policy Files](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"memory_limitations\"></a>   \n## Memory Limitations  \n One way to guard against denial of service attacks is to limit the size of the files that can be uploaded by using the FileUpload control. You should set a size limit that is appropriate for the types of files that you expect to be uploaded. The default size limit is 4096 kilobytes (KB), or 4 megabytes (MB). You can allow larger files to be uploaded by setting the `maxRequestLength` attribute of the  element. To increase the maximum allowable file size for the entire application, set the `maxRequestLength` attribute in the Web.config file. To increase the maximum allowable file size for a specified page, set the `maxRequestLength` attribute inside the `location` element in Web.config. For an example, see [location Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5).  \n  \n When uploading large files, a user might also receive the following error message:  \n  \n `aspnet_wp.exe (PID: 1520) was recycled because memory consumption exceeded 460 MB (60 percent of available RAM).`  \n  \n If your users encounter this error message, increase the value of the `memoryLimit` attribute in the  of element the Web.config file for the application. The `memoryLimit` attribute specifies the maximum amount of memory that a worker process can use. If the worker process exceeds the `memoryLimit` amount, a new process is created to replace it, and all current requests are reassigned to the new process.  \n  \n To control whether the file to upload is temporarily stored in memory or on the server while the request is being processed, set the `requestLengthDiskThreshold` attribute of the  element. This attribute enables you to manage the size of the input stream buffer. The default is 256 bytes. The value that you specify should not exceed the value that you specify for the `maxRequestLength` attribute.  \n  \n<a name=\"using_the_FileUpload_Control_with_the_UpdatePanel_control\"></a>   \n## Using the FileUpload Control with the UpdatePanel Control  \n The FileUpload control is designed to be used only in postback scenarios and not in asynchronous postback scenarios during partial-page rendering. When you use a FileUpload control inside an <xref:System.Web.UI.UpdatePanel> control, the file must be uploaded by using a control that is a <xref:System.Web.UI.PostBackTrigger> object for the panel. <xref:System.Web.UI.UpdatePanel> controls are used to update selected regions of a page instead of updating the whole page with a postback. For more information, see [UpdatePanel Control Overview](~/add/includes/ajax-current-ext-md.md) and [Partial-Page Rendering Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"DeclarativeSyntax\"></a>   \n## Declarative Syntax  \n  \n```  \n<asp:FileUpload  \n¬†¬†¬†¬†AccessKey=\"string\"  \n¬†¬†¬†¬†BackColor=\"color name|#dddddd\"  \n¬†¬†¬†¬†BorderColor=\"color name|#dddddd\"  \n¬†¬†¬†¬†BorderStyle=\"NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  \n        Inset|Outset\"  \n¬†¬†¬†¬†BorderWidth=\"size\"  \n¬†¬†¬†¬†CssClass=\"string\"  \n¬†¬†¬†¬†Enabled=\"True|False\"  \n¬†¬†¬†¬†EnableTheming=\"True|False\"  \n¬†¬†¬†¬†EnableViewState=\"True|False\"  \n¬†¬†¬†¬†Font-Bold=\"True|False\"  \n¬†¬†¬†¬†Font-Italic=\"True|False\"  \n¬†¬†¬†¬†Font-Names=\"string\"  \n¬†¬†¬†¬†Font-Overline=\"True|False\"  \n¬†¬†¬†¬†Font-Size=\"string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  \n        Large|X-Large|XX-Large\"  \n¬†¬†¬†¬†Font-Strikeout=\"True|False\"  \n¬†¬†¬†¬†Font-Underline=\"True|False\"  \n¬†¬†¬†¬†ForeColor=\"color name|#dddddd\"  \n¬†¬†¬†¬†Height=\"size\"  \n¬†¬†¬†¬†ID=\"string\"  \n¬†¬†¬†¬†OnDataBinding=\"DataBinding event handler\"  \n¬†¬†¬†¬†OnDisposed=\"Disposed event handler\"  \n¬†¬†¬†¬†OnInit=\"Init event handler\"  \n¬†¬†¬†¬†OnLoad=\"Load event handler\"  \n¬†¬†¬†¬†OnPreRender=\"PreRender event handler\"  \n¬†¬†¬†¬†OnUnload=\"Unload event handler\"  \n¬†¬†¬†¬†runat=\"server\"  \n¬†¬†¬†¬†SkinID=\"string\"  \n¬†¬†¬†¬†Style=\"string\"  \n¬†¬†¬†¬†TabIndex=\"integer\"  \n¬†¬†¬†¬†ToolTip=\"string\"  \n¬†¬†¬†¬†Visible=\"True|False\"  \n¬†¬†¬†¬†Width=\"size\"  \n/>  \n```"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=191897).  \n  \n This section contains the following four examples:  \n  \n-   The first example demonstrates how to create a FileUpload control that saves files to a path that is specified in code.  \n  \n-   The second example demonstrates how to create a FileUpload control that saves files to a specified directory in the file system for the application.  \n  \n-   The third example demonstrates how to create a FileUpload control that saves files to a specified path and limits the size of the file that can be uploaded.  \n  \n-   The fourth example demonstrates how to create a FileUpload control that saves files to a specified path and allows only files that have the .doc or .xls file name extensions to be uploaded.  \n  \n> [!CAUTION]\n>  These examples demonstrate the basic syntax for the FileUpload control, but they do not demonstrate all the necessary error checking that should be completed before to saving the file. For a more complete example, see <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  \n  \n The following example demonstrates how to create a FileUpload control that saves files to a path that is specified in code. The <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called to save the file to the specified path on the server.  \n  \n [!code-vb[FileUploadClass1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_338_1.aspx)]\n [!code-cs[FileUploadClass1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_338_1.aspx)]  \n  \n The following example demonstrates how to create a FileUpload control that saves files to a specified directory in the file system for the application. The <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A?displayProperty=fullName> property is used to get the physical file system path of the root directory for the currently executing server application. The <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called to save the file to the specified path on the server.  \n  \n [!code-vb[FileUploadClass2#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_338_2.aspx)]\n [!code-cs[FileUploadClass2#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_338_2.aspx)]  \n  \n The following example demonstrates how to create a FileUpload control that saves files to a path that is specified in the code. The control limits the size of the file that can be uploaded to 5 MB. The <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> property is used to access the underlying <xref:System.Web.HttpPostedFile.ContentLength%2A> property and return the size of the file. If the size of the file to upload is less than 2 MB, the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called to save the file to the specified path on the server. In addition to checking for the maximum file size setting in your application code, you can set the `maxRequestLength` attribute of the  element to a maximum allowable size in the configuration file for your application.  \n  \n [!code-vb[FileUploadClass3#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_338_3.aspx)]\n [!code-cs[FileUploadClass3#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_338_3.aspx)]  \n  \n The following example demonstrates how to create a FileUpload control that saves files to a path that is specified in the code. This example allows only files that have the .doc or .xls file name extensions to be uploaded. The <xref:System.IO.Path.GetExtension%2A?displayProperty=fullName> method is called to return the extension of the file to upload. If the file has a .doc or .xls file name extension, the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called to save the file to the specified path on the server.  \n  \n [!code-vb[FileUploadClass4#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_338_4.aspx)]\n [!code-cs[FileUploadClass4#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_338_4.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Web.UI.ControlValueProperty("FileBytes")]

      [System.Web.UI.ValidationProperty("FileName")]

      public class FileUpload : System.Web.UI.WebControls.WebControl
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.WebControls.WebControl
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.Controls
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.CreateControlCollection
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.Focus
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnInit(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.Control.Visible
  - System.Web.UI.WebControls.WebControl.AccessKey
  - System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.Attributes
  - System.Web.UI.WebControls.WebControl.BackColor
  - System.Web.UI.WebControls.WebControl.BorderColor
  - System.Web.UI.WebControls.WebControl.BorderStyle
  - System.Web.UI.WebControls.WebControl.BorderWidth
  - System.Web.UI.WebControls.WebControl.ControlStyle
  - System.Web.UI.WebControls.WebControl.ControlStyleCreated
  - System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)
  - System.Web.UI.WebControls.WebControl.CreateControlStyle
  - System.Web.UI.WebControls.WebControl.CssClass
  - System.Web.UI.WebControls.WebControl.DisabledCssClass
  - System.Web.UI.WebControls.WebControl.Enabled
  - System.Web.UI.WebControls.WebControl.EnableTheming
  - System.Web.UI.WebControls.WebControl.Font
  - System.Web.UI.WebControls.WebControl.ForeColor
  - System.Web.UI.WebControls.WebControl.HasAttributes
  - System.Web.UI.WebControls.WebControl.Height
  - System.Web.UI.WebControls.WebControl.IsEnabled
  - System.Web.UI.WebControls.WebControl.LoadViewState(System.Object)
  - System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.RenderContents(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebControl.SaveViewState
  - System.Web.UI.WebControls.WebControl.SkinID
  - System.Web.UI.WebControls.WebControl.Style
  - System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)
  - System.Web.UI.WebControls.WebControl.TabIndex
  - System.Web.UI.WebControls.WebControl.TagKey
  - System.Web.UI.WebControls.WebControl.TagName
  - System.Web.UI.WebControls.WebControl.ToolTip
  - System.Web.UI.WebControls.WebControl.TrackViewState
  - System.Web.UI.WebControls.WebControl.Width
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: FileUpload()
  nameWithType: FileUpload.FileUpload()
  fullName: System.Web.UI.WebControls.FileUpload.FileUpload()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Inicializa uma nova inst√¢ncia do <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> classe."
  remarks: "Utilize o construtor de FileUpload para inicializar uma nova inst√¢ncia de <xref:System.Web.UI.WebControls.FileUpload>classe.</xref:System.Web.UI.WebControls.FileUpload> O <xref:System.Web.UI.WebControls.FileUpload>controlo n√£o guarda automaticamente um ficheiro para o servidor depois do utilizador seleciona o ficheiro a carregar.</xref:System.Web.UI.WebControls.FileUpload> Explicitamente tem de fornecer um controlo ou um mecanismo para permitir ao utilizador submeter o ficheiro especificado. Por exemplo, pode fornecer um bot√£o que o utilizador clica para carregar o ficheiro."
  example:
  - "The following example demonstrates how to initialize a new instance of the <xref:System.Web.UI.WebControls.FileUpload> class. Note that this example demonstrates the constructor syntax but does not add functionality to the control after it is created.  \n  \n This example is part of a larger example provided for the <xref:System.Web.UI.WebControls.FileUpload> class.  \n  \n [!code-vb[FileUploadCstr#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_212_1.aspx)]"
  syntax:
    content: public FileUpload ();
    parameters: []
  overload: System.Web.UI.WebControls.FileUpload.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)
  id: AddAttributesToRender(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: AddAttributesToRender(HtmlTextWriter)
  nameWithType: FileUpload.AddAttributesToRender(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.FileUpload.AddAttributesToRender(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Adiciona os atributos HTML e estilos de um <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> controlo ao compor para especificado <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;> </xref> objeto."
  remarks: "O m√©todo de AddAttributesToRender √© principalmente utilizado pelos programadores do controlo para introduzir os atributos adequados e estilos para o <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>fluxo de sa√≠da para um <xref:System.Web.UI.WebControls.FileUpload>controlo.</xref:System.Web.UI.WebControls.FileUpload> </xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> O m√©todo AddAttributesToRender substitui o <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=fullName>m√©todo.</xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=fullName>"
  syntax:
    content: protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "Um <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;> </xref> que representa o fluxo de sa√≠da para compor HTML conte√∫do no cliente."
  overload: System.Web.UI.WebControls.FileUpload.AddAttributesToRender*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.AllowMultiple
  id: AllowMultiple
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: AllowMultiple
  nameWithType: FileUpload.AllowMultiple
  fullName: System.Web.UI.WebControls.FileUpload.AllowMultiple
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obt√©m ou define um valor que especifica se m√∫ltiplos ficheiros podem ser seleccionados para carregamento."
  syntax:
    content: public virtual bool AllowMultiple { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se m√∫ltiplos ficheiros podem ser selecionados; caso contr√°rio, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.FileUpload.AllowMultiple*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.FileBytes
  id: FileBytes
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: FileBytes
  nameWithType: FileUpload.FileBytes
  fullName: System.Web.UI.WebControls.FileUpload.FileBytes
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obt√©m uma matriz de bytes num ficheiro que √© especificado, utilizando um <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> controlo."
  remarks: "O <xref:System.Web.UI.WebControls.FileUpload>controlo n√£o automaticamente ler o ficheiro do cliente.</xref:System.Web.UI.WebControls.FileUpload> Explicitamente tem de fornecer um controlo ou um mecanismo para permitir ao utilizador submeter o ficheiro especificado. Por exemplo, pode fornecer um bot√£o que o utilizador pode clicar para carregar o ficheiro. O c√≥digo de escrita para guardar o ficheiro especificado pode chamar a propriedade de FileBytes, que devolve os conte√∫dos do ficheiro.       Antes de chamar a propriedade FileBytes, deve utilizar o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>propriedade para verificar se o <xref:System.Web.UI.WebControls.FileUpload>controlo cont√©m um ficheiro a carregar.</xref:System.Web.UI.WebControls.FileUpload> </xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Se o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>devolve `true`, chame a propriedade FileBytes.</xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Se devolver `false`, apresenta uma mensagem ao utilizador a indicar que o controlo n√£o cont√©m um ficheiro. Se n√£o fornecer o c√≥digo de processamento de erros para verificar que existe um ficheiro, emite uma tentativa de guardar um ficheiro atribui um <xref:System.Web.HttpException>exce√ß√£o.</xref:System.Web.HttpException>"
  example:
  - "The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control. When the user clicks the **Upload file** button, the contents of the file are displayed as bytes in a text box on the page. This example uses the FileBytes property to upload the entire file.  \n  \n [!code-cs[FileUploadFileBytes#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_816_1.aspx)]\n [!code-vb[FileUploadFileBytes#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_816_1.aspx)]"
  syntax:
    content: public byte[] FileBytes { get; }
    return:
      type: System.Byte[]
      description: "A <xref:System.Byte>matriz que contenha o conte√∫do do ficheiro especificado.</xref:System.Byte>"
  overload: System.Web.UI.WebControls.FileUpload.FileBytes*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "N√£o foi lido todo o ficheiro."
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.FileContent
  id: FileContent
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: FileContent
  nameWithType: FileUpload.FileContent
  fullName: System.Web.UI.WebControls.FileUpload.FileContent
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obt√©m um <xref:System.IO.Stream>objeto que aponta para um ficheiro a carregar utilizando o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> controlo.</xref:System.IO.Stream>"
  remarks: "Obt√©m de propriedade FileContent um <xref:System.IO.Stream>objeto que aponta para um ficheiro a carregar utilizando o <xref:System.Web.UI.WebControls.FileUpload>controlo.</xref:System.Web.UI.WebControls.FileUpload> </xref:System.IO.Stream> Utilize a propriedade de FileContent para aceder ao conte√∫do do ficheiro. Por exemplo, pode utilizar o <xref:System.IO.Stream>objeto √© devolvido por esta propriedade para ler o conte√∫do do ficheiro como bytes e armazen√°-las numa matriz de bytes.</xref:System.IO.Stream>"
  example:
  - "The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control. The FileContent property is used to read the contents of the file into a byte array. When the user clicks the **Upload file** button, the contents of the file are displayed as bytes in a text box on the page.  \n  \n [!code-cs[FileUpload.FileContent#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_458_1.aspx)]\n [!code-vb[FileUpload.FileContent#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_458_1.aspx)]"
  syntax:
    content: public System.IO.Stream FileContent { get; }
    return:
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>que aponta para um ficheiro a carregar utilizando o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref>.</xref:System.IO.Stream>"
  overload: System.Web.UI.WebControls.FileUpload.FileContent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.FileName
  id: FileName
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: FileName
  nameWithType: FileUpload.FileName
  fullName: System.Web.UI.WebControls.FileUpload.FileName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obt√©m o nome de um ficheiro num cliente para carregar a utilizar o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> controlo."
  remarks: "Obt√©m o nome de um ficheiro num cliente para carregar a utilizar o <xref:System.Web.UI.WebControls.FileUpload>controlo.</xref:System.Web.UI.WebControls.FileUpload> O nome de ficheiro que devolve a propriedade de nome de ficheiro n√£o inclui o caminho do ficheiro no cliente."
  example:
  - "The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control that saves files to a path that is specified in code. The FileName property is used to get the name of the file to upload. The <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called to save the file to the specified path on the server, using the same name the file has on the client. Note that this example demonstrates the basic syntax for this control, but does not demonstrate all the necessary error checking that should be done before saving the file. For a more complete example, see <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  \n  \n [!code-vb[FileUploadClass1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_813_1.aspx)]\n [!code-cs[FileUploadClass1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_813_1.aspx)]"
  syntax:
    content: public string FileName { get; }
    return:
      type: System.String
      description: "Uma cadeia que especifica o nome de um ficheiro num cliente para carregar a utilizar o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref>."
  overload: System.Web.UI.WebControls.FileUpload.FileName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.HasFile
  id: HasFile
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: HasFile
  nameWithType: FileUpload.HasFile
  fullName: System.Web.UI.WebControls.FileUpload.HasFile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obt√©m um valor que indica se o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> controlo cont√©m um ficheiro."
  remarks: "A propriedade HasFile obt√©m um valor que indica se o <xref:System.Web.UI.WebControls.FileUpload>controlo cont√©m um ficheiro a carregar.</xref:System.Web.UI.WebControls.FileUpload> Utilize esta propriedade para verificar que existe um ficheiro para carregar antes de efetuar opera√ß√µes no ficheiro. Por exemplo, ao chamar antes de <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>m√©todo para guardar o ficheiro no disco, utilize a propriedade de HasFile para verificar se o ficheiro existe.</xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Se devolver HasFile `true`, chame o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>m√©todo.</xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> Se devolver `false`, apresenta uma mensagem ao utilizador a indicar que o controlo n√£o cont√©m um ficheiro."
  example:
  - "The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control that performs error checking. Before saving the file, the HasFile method is called to verify that the control contains a file to upload. In addition, the <xref:System.IO.File.Exists%2A?displayProperty=fullName> method is called to check whether a file with the same name already occurs in the path. If it does, the name of the file to upload is prefixed with an underscore character before the <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> method is called. This prevents the existing file from being overwritten.  \n  \n [!code-vb[FileUpload.SaveAs#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_287_1.aspx)]\n [!code-cs[FileUpload.SaveAs#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_287_1.aspx)]"
  syntax:
    content: public bool HasFile { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> cont√©m um ficheiro; caso contr√°rio, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.FileUpload.HasFile*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.HasFiles
  id: HasFiles
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: HasFiles
  nameWithType: FileUpload.HasFiles
  fullName: System.Web.UI.WebControls.FileUpload.HasFiles
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obt√©m um valor que indica se todos os ficheiros tiverem sido carregados."
  remarks: "Este m√©todo devolve tamb√©m `false` se √© carregado um ficheiro vazio (zero bytes)."
  syntax:
    content: public bool HasFiles { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se tiverem sido carregados todos os ficheiros caso contr√°rio, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.FileUpload.HasFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)
  id: OnPreRender(System.EventArgs)
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: OnPreRender(EventArgs)
  nameWithType: FileUpload.OnPreRender(EventArgs)
  fullName: System.Web.UI.WebControls.FileUpload.OnPreRender(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Gera o <xref href=&quot;System.Web.UI.Control.PreRender&quot;> </xref> evento para o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> controlo."
  remarks: "O m√©todo OnPreRender notifica o <xref:System.Web.UI.WebControls.FileUpload>controlo efetuar quaisquer passos de pr√©-composi√ß√£o necess√°rios antes de guardar estado de visualiza√ß√£o e o conte√∫do de composi√ß√£o.</xref:System.Web.UI.WebControls.FileUpload>"
  syntax:
    content: protected override void OnPreRender (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Um &lt;xref:System.EventArgs?displayProperty=fullName&gt; objeto que cont√©m os dados do evento."
  overload: System.Web.UI.WebControls.FileUpload.OnPreRender*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.PostedFile
  id: PostedFile
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: PostedFile
  nameWithType: FileUpload.PostedFile
  fullName: System.Web.UI.WebControls.FileUpload.PostedFile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obt√©m o subjacente <xref href=&quot;System.Web.HttpPostedFile&quot;> </xref> objeto para um ficheiro que √© carregado utilizando o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> controlo."
  remarks: "A propriedade PostedFile obt√©m subjacentes <xref:System.Web.HttpPostedFile>objeto para um ficheiro que √© carregado utilizando o <xref:System.Web.UI.WebControls.FileUpload>controlo.</xref:System.Web.UI.WebControls.FileUpload> </xref:System.Web.HttpPostedFile> Utilize esta propriedade para aceder √†s propriedades adicionais sobre o ficheiro carregado.       Pode utilizar o <xref:System.Web.HttpPostedFile.ContentLength%2A>propriedade para obter o comprimento do ficheiro.</xref:System.Web.HttpPostedFile.ContentLength%2A> Pode utilizar o <xref:System.Web.HttpPostedFile.ContentType%2A>tipo do ficheiro de conte√∫do de propriedade para obter o MIME.</xref:System.Web.HttpPostedFile.ContentType%2A> Al√©m disso, pode utilizar a propriedade PostedFile para aceder a <xref:System.Web.HttpPostedFile.FileName%2A>propriedade, o <xref:System.Web.HttpPostedFile.InputStream%2A>propriedade e o <xref:System.Web.HttpPostedFile.SaveAs%2A>m√©todo.</xref:System.Web.HttpPostedFile.SaveAs%2A> </xref:System.Web.HttpPostedFile.InputStream%2A> </xref:System.Web.HttpPostedFile.FileName%2A> No entanto, a mesma funcionalidade √© fornecida pelo <xref:System.Web.UI.WebControls.FileUpload.FileName%2A>propriedade, o <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>propriedade e o <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>m√©todo.</xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> </xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> </xref:System.Web.UI.WebControls.FileUpload.FileName%2A>"
  example:
  - "The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control. When the user clicks the **Upload file** button, the contents of the file are displayed as bytes in a text box on the page. This example uses the PostedFile property to access the <xref:System.Web.HttpPostedFile.ContentLength%2A?displayProperty=fullName> property. The <xref:System.Web.HttpPostedFile.ContentLength%2A> property is used to determine the length of the file before copying the file contents to a byte array.  \n  \n [!code-cs[FileUpload.FileContent#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_462_1.aspx)]\n [!code-vb[FileUpload.FileContent#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_462_1.aspx)]"
  syntax:
    content: public System.Web.HttpPostedFile PostedFile { get; }
    return:
      type: System.Web.HttpPostedFile
      description: "Um <xref href=&quot;System.Web.HttpPostedFile&quot;> </xref> para um ficheiro carregado utilizando o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref>."
  overload: System.Web.UI.WebControls.FileUpload.PostedFile*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.PostedFiles
  id: PostedFiles
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: PostedFiles
  nameWithType: FileUpload.PostedFiles
  fullName: System.Web.UI.WebControls.FileUpload.PostedFiles
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Obt√©m a cole√ß√£o de ficheiros carregados."
  syntax:
    content: public System.Collections.Generic.IList<System.Web.HttpPostedFile> PostedFiles { get; }
    return:
      type: System.Collections.Generic.IList{System.Web.HttpPostedFile}
      description: "A cole√ß√£o de ficheiros carregados."
  overload: System.Web.UI.WebControls.FileUpload.PostedFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)
  id: Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: Render(HtmlTextWriter)
  nameWithType: FileUpload.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.FileUpload.Render(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Envia o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> controlar conte√∫do especificado <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;> </xref> objeto, que escreve o conte√∫do a compor no cliente."
  remarks: "O m√©todo de composi√ß√£o envia o <xref:System.Web.UI.WebControls.FileUpload>Controlar conte√∫do especificado <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>objeto, que escreve o conte√∫do a compor no cliente.</xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> </xref:System.Web.UI.WebControls.FileUpload>"
  syntax:
    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "O <xref href=&quot;System.Web.UI.HtmlTextWriter&quot;> </xref> objeto que recebe o <xref href=&quot;System.Web.UI.WebControls.FileUpload&quot;> </xref> controlar conte√∫do."
  overload: System.Web.UI.WebControls.FileUpload.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.FileUpload.SaveAs(System.String)
  id: SaveAs(System.String)
  parent: System.Web.UI.WebControls.FileUpload
  langs:
  - csharp
  name: SaveAs(String)
  nameWithType: FileUpload.SaveAs(String)
  fullName: System.Web.UI.WebControls.FileUpload.SaveAs(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Guarda o conte√∫do de um ficheiro foi carregado num caminho especificado no servidor Web."
  remarks: "O m√©todo SaveAs guarda os conte√∫dos de um ficheiro foi carregado num caminho especificado no servidor Web.       O <xref:System.Web.UI.WebControls.FileUpload>controlo n√£o guarda automaticamente um ficheiro para o servidor depois do utilizador seleciona o ficheiro a carregar.</xref:System.Web.UI.WebControls.FileUpload> Explicitamente tem de fornecer um controlo ou um mecanismo para permitir ao utilizador submeter o ficheiro especificado. Por exemplo, pode fornecer um bot√£o que o utilizador clica para carregar o ficheiro. O c√≥digo de escrita para guardar o ficheiro especificado deve chamar o m√©todo SaveAs, que guarda os conte√∫dos de um ficheiro num caminho especificado no servidor. Normalmente, o m√©todo SaveAs est√° chamar um m√©todo de processamento de eventos para um evento que gera um pedido post para o servidor. Por exemplo, se fornecer um bot√£o para submeter um ficheiro, o c√≥digo para guardar o ficheiro no servidor, em seguida, foi inclu√≠do dentro do m√©todo de processamento de eventos para o evento de clique.       Quando chamar o m√©todo SaveAs, tem de especificar o caminho completo do diret√≥rio no servidor no qual guardou o ficheiro carregado. Se n√£o especificar explicitamente um caminho no c√≥digo da aplica√ß√£o, um <xref:System.Web.HttpException>√© emitida uma exce√ß√£o quando um utilizador se tentar carregar um ficheiro.</xref:System.Web.HttpException> Este comportamento ajuda a manter os ficheiros no servidor protegido, n√£o permitir que os utilizadores especificar um caminho para guardar os ficheiros que carregam.       Antes de chamar o m√©todo SaveAs, deve utilizar o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>propriedade para verificar se o <xref:System.Web.UI.WebControls.FileUpload>controlo cont√©m um ficheiro a carregar.</xref:System.Web.UI.WebControls.FileUpload> </xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Se o <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>devolve `true`, chame o m√©todo SaveAs.</xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> Se devolver `false`, apresenta uma mensagem ao utilizador a indicar que o controlo n√£o cont√©m um ficheiro. Se n√£o fornecer o c√≥digo de processamento de erros para verificar que existe um ficheiro, emite uma tentativa de guardar um ficheiro atribui um <xref:System.Web.HttpException>exce√ß√£o.</xref:System.Web.HttpException>       Para uma chamada para o SaveAs funcione, a aplica√ß√£o ASP.NET tem de ter acesso de escrita para o diret√≥rio no servidor. Existem duas formas que a aplica√ß√£o pode obter acesso de escrita. Explicitamente pode conceder acesso de escrita para a conta sob a qual a aplica√ß√£o est√° em execu√ß√£o, no diret√≥rio no qual os ficheiros carregados ser√£o guardados. Em alternativa, pode aumentar o n√≠vel de fidedignidade que √© concedido √† aplica√ß√£o ASP.NET. Para obter acesso de escrita ao diret√≥rio de execu√ß√£o para a aplica√ß√£o, a aplica√ß√£o tem de ser concedida a <xref:System.Web.AspNetHostingPermission>objeto com o n√≠vel de fidedignidade definido como o <xref:System.Web.AspNetHostingPermissionLevel?displayProperty=fullName>valor.</xref:System.Web.AspNetHostingPermissionLevel?displayProperty=fullName> </xref:System.Web.AspNetHostingPermission> Aumentar o n√≠vel de confian√ßa aumenta o acesso da aplica√ß√£o para recursos do servidor. Tenha em aten√ß√£o que n√£o se trata de uma abordagem segura, porque um utilizador mal intencionado obtiver o controlo da sua aplica√ß√£o ser√° tamb√©m poder√£o ser executadas sob este n√≠vel mais elevado de confian√ßa. √â uma melhor pr√°tica para executar uma aplica√ß√£o ASP.NET num contexto de um utilizador que tem os privil√©gios m√≠nimos necess√°rios para a aplica√ß√£o ser executada. Para obter mais informa√ß√µes sobre a seguran√ßa em aplica√ß√µes do ASP.NET, consulte [b√°sico pr√°ticas de seguran√ßa para aplica√ß√µes Web](~/add/includes/ajax-current-ext-md.md) e [n√≠veis de fidedignidade do ASP.NET e ficheiros de pol√≠tica](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to create a <xref:System.Web.UI.WebControls.FileUpload> control that performs error checking. Before the file is saved, the <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> method is called to verify that a file to upload exists. In addition, the <xref:System.IO.File.Exists%2A?displayProperty=fullName> method is called to check whether a file that has the same name already exists in the path. If it does, the name of the file to upload is prefixed with a number before the SaveAs method is called. This prevents the existing file from being overwritten.  \n  \n [!code-vb[FileUpload.SaveAs#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_81_1.aspx)]\n [!code-cs[FileUpload.SaveAs#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_81_1.aspx)]"
  syntax:
    content: public void SaveAs (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "Uma cadeia que especifica o caminho completo da localiza√ß√£o do servidor no qual guardou o ficheiro carregado."
  overload: System.Web.UI.WebControls.FileUpload.SaveAs*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code>filename</code>N√£o √© um caminho completo."
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebControl
  isExternal: false
  name: System.Web.UI.WebControls.WebControl
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.UI.WebControls.FileUpload.#ctor
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: FileUpload()
  nameWithType: FileUpload.FileUpload()
  fullName: System.Web.UI.WebControls.FileUpload.FileUpload()
- uid: System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: AddAttributesToRender(HtmlTextWriter)
  nameWithType: FileUpload.AddAttributesToRender(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.FileUpload.AddAttributesToRender(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.UI.WebControls.FileUpload.AllowMultiple
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: AllowMultiple
  nameWithType: FileUpload.AllowMultiple
  fullName: System.Web.UI.WebControls.FileUpload.AllowMultiple
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.FileUpload.FileBytes
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: FileBytes
  nameWithType: FileUpload.FileBytes
  fullName: System.Web.UI.WebControls.FileUpload.FileBytes
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.UI.WebControls.FileUpload.FileContent
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: FileContent
  nameWithType: FileUpload.FileContent
  fullName: System.Web.UI.WebControls.FileUpload.FileContent
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Web.UI.WebControls.FileUpload.FileName
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: FileName
  nameWithType: FileUpload.FileName
  fullName: System.Web.UI.WebControls.FileUpload.FileName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.FileUpload.HasFile
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: HasFile
  nameWithType: FileUpload.HasFile
  fullName: System.Web.UI.WebControls.FileUpload.HasFile
- uid: System.Web.UI.WebControls.FileUpload.HasFiles
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: HasFiles
  nameWithType: FileUpload.HasFiles
  fullName: System.Web.UI.WebControls.FileUpload.HasFiles
- uid: System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: OnPreRender(EventArgs)
  nameWithType: FileUpload.OnPreRender(EventArgs)
  fullName: System.Web.UI.WebControls.FileUpload.OnPreRender(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.FileUpload.PostedFile
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: PostedFile
  nameWithType: FileUpload.PostedFile
  fullName: System.Web.UI.WebControls.FileUpload.PostedFile
- uid: System.Web.HttpPostedFile
  parent: System.Web
  isExternal: false
  name: HttpPostedFile
  nameWithType: HttpPostedFile
  fullName: System.Web.HttpPostedFile
- uid: System.Web.UI.WebControls.FileUpload.PostedFiles
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: PostedFiles
  nameWithType: FileUpload.PostedFiles
  fullName: System.Web.UI.WebControls.FileUpload.PostedFiles
- uid: System.Collections.Generic.IList{System.Web.HttpPostedFile}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<HttpPostedFile>
  nameWithType: IList<HttpPostedFile>
  fullName: System.Collections.Generic.IList<System.Web.HttpPostedFile>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Web.HttpPostedFile>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.HttpPostedFile
    name: HttpPostedFile
    nameWithType: HttpPostedFile
    fullName: HttpPostedFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: Render(HtmlTextWriter)
  nameWithType: FileUpload.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.FileUpload.Render(HtmlTextWriter)
- uid: System.Web.UI.WebControls.FileUpload.SaveAs(System.String)
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: SaveAs(String)
  nameWithType: FileUpload.SaveAs(String)
  fullName: System.Web.UI.WebControls.FileUpload.SaveAs(String)
- uid: System.Web.UI.WebControls.FileUpload.#ctor*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: FileUpload
  nameWithType: FileUpload.FileUpload
- uid: System.Web.UI.WebControls.FileUpload.AddAttributesToRender*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: AddAttributesToRender
  nameWithType: FileUpload.AddAttributesToRender
- uid: System.Web.UI.WebControls.FileUpload.AllowMultiple*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: AllowMultiple
  nameWithType: FileUpload.AllowMultiple
- uid: System.Web.UI.WebControls.FileUpload.FileBytes*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: FileBytes
  nameWithType: FileUpload.FileBytes
- uid: System.Web.UI.WebControls.FileUpload.FileContent*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: FileContent
  nameWithType: FileUpload.FileContent
- uid: System.Web.UI.WebControls.FileUpload.FileName*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: FileName
  nameWithType: FileUpload.FileName
- uid: System.Web.UI.WebControls.FileUpload.HasFile*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: HasFile
  nameWithType: FileUpload.HasFile
- uid: System.Web.UI.WebControls.FileUpload.HasFiles*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: HasFiles
  nameWithType: FileUpload.HasFiles
- uid: System.Web.UI.WebControls.FileUpload.OnPreRender*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: OnPreRender
  nameWithType: FileUpload.OnPreRender
- uid: System.Web.UI.WebControls.FileUpload.PostedFile*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: PostedFile
  nameWithType: FileUpload.PostedFile
- uid: System.Web.UI.WebControls.FileUpload.PostedFiles*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: PostedFiles
  nameWithType: FileUpload.PostedFiles
- uid: System.Web.UI.WebControls.FileUpload.Render*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: Render
  nameWithType: FileUpload.Render
- uid: System.Web.UI.WebControls.FileUpload.SaveAs*
  parent: System.Web.UI.WebControls.FileUpload
  isExternal: false
  name: SaveAs
  nameWithType: FileUpload.SaveAs
