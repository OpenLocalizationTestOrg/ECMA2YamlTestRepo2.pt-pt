### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.PropertyValueCollection
  id: PropertyValueCollection
  children:
  - System.DirectoryServices.PropertyValueCollection.Add(System.Object)
  - System.DirectoryServices.PropertyValueCollection.AddRange(System.DirectoryServices.PropertyValueCollection)
  - System.DirectoryServices.PropertyValueCollection.AddRange(System.Object[])
  - System.DirectoryServices.PropertyValueCollection.Contains(System.Object)
  - System.DirectoryServices.PropertyValueCollection.CopyTo(System.Object[],System.Int32)
  - System.DirectoryServices.PropertyValueCollection.IndexOf(System.Object)
  - System.DirectoryServices.PropertyValueCollection.Insert(System.Int32,System.Object)
  - System.DirectoryServices.PropertyValueCollection.Item(System.Int32)
  - System.DirectoryServices.PropertyValueCollection.OnClearComplete
  - System.DirectoryServices.PropertyValueCollection.OnInsertComplete(System.Int32,System.Object)
  - System.DirectoryServices.PropertyValueCollection.OnRemoveComplete(System.Int32,System.Object)
  - System.DirectoryServices.PropertyValueCollection.OnSetComplete(System.Int32,System.Object,System.Object)
  - System.DirectoryServices.PropertyValueCollection.PropertyName
  - System.DirectoryServices.PropertyValueCollection.Remove(System.Object)
  - System.DirectoryServices.PropertyValueCollection.Value
  langs:
  - csharp
  name: PropertyValueCollection
  nameWithType: PropertyValueCollection
  fullName: System.DirectoryServices.PropertyValueCollection
  type: Class
  summary: "Contains the values of a <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref> property."
  syntax:
    content: 'public class PropertyValueCollection : System.Collections.CollectionBase'
  inheritance:
  - System.Object
  - System.Collections.CollectionBase
  implements: []
  inheritedMembers:
  - System.Collections.CollectionBase.Capacity
  - System.Collections.CollectionBase.Clear
  - System.Collections.CollectionBase.Count
  - System.Collections.CollectionBase.GetEnumerator
  - System.Collections.CollectionBase.InnerList
  - System.Collections.CollectionBase.List
  - System.Collections.CollectionBase.OnClear
  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnValidate(System.Object)
  - System.Collections.CollectionBase.RemoveAt(System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.Add(System.Object)
  id: Add(System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: Add(Object)
  nameWithType: PropertyValueCollection.Add(Object)
  fullName: System.DirectoryServices.PropertyValueCollection.Add(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Appends the specified <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> object to this collection."
  syntax:
    content: public int Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "The <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> object to append to this collection."
    return:
      type: System.Int32
      description: "The zero-based index of the <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> object that is appended to this collection."
  overload: System.DirectoryServices.PropertyValueCollection.Add*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "An error occurred during the call to the underlying interface."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The property value is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.AddRange(System.DirectoryServices.PropertyValueCollection)
  id: AddRange(System.DirectoryServices.PropertyValueCollection)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: AddRange(PropertyValueCollection)
  nameWithType: PropertyValueCollection.AddRange(PropertyValueCollection)
  fullName: System.DirectoryServices.PropertyValueCollection.AddRange(PropertyValueCollection)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Appends the contents of the <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> object to this collection."
  syntax:
    content: public void AddRange (System.DirectoryServices.PropertyValueCollection value);
    parameters:
    - id: value
      type: System.DirectoryServices.PropertyValueCollection
      description: "A <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> object that contains the objects to append to this collection."
  overload: System.DirectoryServices.PropertyValueCollection.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The property value is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.AddRange(System.Object[])
  id: AddRange(System.Object[])
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: AddRange(Object[])
  nameWithType: PropertyValueCollection.AddRange(Object[])
  fullName: System.DirectoryServices.PropertyValueCollection.AddRange(Object[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Appends the contents of the specified <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> object to this collection."
  syntax:
    content: public void AddRange (object[] value);
    parameters:
    - id: value
      type: System.Object[]
      description: "The <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> array that contains the objects to append to this collection."
  overload: System.DirectoryServices.PropertyValueCollection.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The property value is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: PropertyValueCollection.Contains(Object)
  fullName: System.DirectoryServices.PropertyValueCollection.Contains(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Determines whether the specified <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> object is in this collection."
  syntax:
    content: public bool Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "The <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> object to search for in this collection."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified property belongs to this collection; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.DirectoryServices.PropertyValueCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.CopyTo(System.Object[],System.Int32)
  id: CopyTo(System.Object[],System.Int32)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: CopyTo(Object[],Int32)
  nameWithType: PropertyValueCollection.CopyTo(Object[],Int32)
  fullName: System.DirectoryServices.PropertyValueCollection.CopyTo(Object[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Copies all <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> objects in this collection to the specified array, starting at the specified index in the target array."
  syntax:
    content: public void CopyTo (object[] array, int index);
    parameters:
    - id: array
      type: System.Object[]
      description: "The array of <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> objects that receives the elements of this collection."
    - id: index
      type: System.Int32
      description: "The zero-based index in `array` where this method starts copying this collection."
  overload: System.DirectoryServices.PropertyValueCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: IndexOf(Object)
  nameWithType: PropertyValueCollection.IndexOf(Object)
  fullName: System.DirectoryServices.PropertyValueCollection.IndexOf(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Retrieves the index of a specified property value in this collection."
  syntax:
    content: public int IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "The property value to find."
    return:
      type: System.Int32
      description: "The zero-based index of the specified property value. If the object is not found, the return value is -1."
  overload: System.DirectoryServices.PropertyValueCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: PropertyValueCollection.Insert(Int32,Object)
  fullName: System.DirectoryServices.PropertyValueCollection.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Inserts a property value into this collection at a specified index."
  syntax:
    content: public void Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index at which to insert the property value."
    - id: value
      type: System.Object
      description: "The property value to insert."
  overload: System.DirectoryServices.PropertyValueCollection.Insert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The property value is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "An error occurred during the call to the underlying interface."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "The index is less than 0 (zero) or greater than the size of the collection."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: PropertyValueCollection.Item(Int32)
  fullName: System.DirectoryServices.PropertyValueCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets the property value that is located at a specified index of this collection."
  remarks: "In C#, this property is the indexer for the <xref:System.DirectoryServices.PropertyValueCollection> class.       In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <xref:System.String>."
  syntax:
    content: public object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the property value."
    return:
      type: System.Object
      description: "The property value at the specified index."
  overload: System.DirectoryServices.PropertyValueCollection.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The property value is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "The index is less than zero (0) or greater than the size of the collection."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.OnClearComplete
  id: OnClearComplete
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: OnClearComplete()
  nameWithType: PropertyValueCollection.OnClearComplete()
  fullName: System.DirectoryServices.PropertyValueCollection.OnClearComplete()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Overrides the <xref:System.Collections.CollectionBase.OnClearComplete*> method."
  syntax:
    content: protected override void OnClearComplete ();
    parameters: []
  overload: System.DirectoryServices.PropertyValueCollection.OnClearComplete*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.OnInsertComplete(System.Int32,System.Object)
  id: OnInsertComplete(System.Int32,System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: OnInsertComplete(Int32,Object)
  nameWithType: PropertyValueCollection.OnInsertComplete(Int32,Object)
  fullName: System.DirectoryServices.PropertyValueCollection.OnInsertComplete(Int32,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Overrides the <xref:System.Collections.CollectionBase.OnInsertComplete*> method."
  syntax:
    content: protected override void OnInsertComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index at which to insert `value`."
    - id: value
      type: System.Object
      description: "The new value of the element at `index`."
  overload: System.DirectoryServices.PropertyValueCollection.OnInsertComplete*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.OnRemoveComplete(System.Int32,System.Object)
  id: OnRemoveComplete(System.Int32,System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: OnRemoveComplete(Int32,Object)
  nameWithType: PropertyValueCollection.OnRemoveComplete(Int32,Object)
  fullName: System.DirectoryServices.PropertyValueCollection.OnRemoveComplete(Int32,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Overrides the <xref:System.Collections.CollectionBase.OnRemoveComplete*> method."
  syntax:
    content: protected override void OnRemoveComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index at which value can be found."
    - id: value
      type: System.Object
      description: "The value of the element to remove from `index`."
  overload: System.DirectoryServices.PropertyValueCollection.OnRemoveComplete*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.OnSetComplete(System.Int32,System.Object,System.Object)
  id: OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: OnSetComplete(Int32,Object,Object)
  nameWithType: PropertyValueCollection.OnSetComplete(Int32,Object,Object)
  fullName: System.DirectoryServices.PropertyValueCollection.OnSetComplete(Int32,Object,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Overrides the &lt;xref:System.Collections.CollectionBase.OnSetComplete%2A?displayProperty=fullName&gt; method."
  syntax:
    content: protected override void OnSetComplete (int index, object oldValue, object newValue);
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index at which `oldValue` can be found."
    - id: oldValue
      type: System.Object
      description: "The value to replace with `newValue`."
    - id: newValue
      type: System.Object
      description: "The new value of the element at `index`."
  overload: System.DirectoryServices.PropertyValueCollection.OnSetComplete*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.PropertyName
  id: PropertyName
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: PropertyName
  nameWithType: PropertyValueCollection.PropertyName
  fullName: System.DirectoryServices.PropertyValueCollection.PropertyName
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets the property name for the attributes in the value collection."
  syntax:
    content: public string PropertyName { get; }
    return:
      type: System.String
      description: "A string that contains the name of the property with the values that are included in this <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref> object."
  overload: System.DirectoryServices.PropertyValueCollection.PropertyName*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: PropertyValueCollection.Remove(Object)
  fullName: System.DirectoryServices.PropertyValueCollection.Remove(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Removes a specified property value from this collection."
  remarks: "When working with a multi-valued string property value, the Remove method will successfully remove the correct item. However, identifying the correct items by name is difficult with a multi-valued DNWithString property value (as the DNWithString COM class, which is used to store the DNWithString items, has 2 string properties representing the item). The way to remove such items is to find the object in the collection (by looping thru all the items), then call the Remove function with the object&quot;s pointer that you just found.  This is illustrated in the example below."
  example:
  - "```c#  \n  \n// Bind to the AD object  \nDirectoryEntry myUser = new DirectoryEntry(\"LDAP://AdServer:389/CN=MyUsername,CN=Users,DC=contoso,DC=com\");  \n  \n// Get the attribute  \nPropertyValueCollection testAttribute = myUser.Properties[\"someAttribute\"];  \n  \n// Find the item in the collection that we want to delete  \nDNWithString dnwsItemToRemove = null;  \nforeach (DNWithString dnwsItem in testAttribute)  \n{  \n    if (dnwsItem.StringValue.Equals(\"SomeValue\"))  \n    {  \n        dnwsItemToRemove = dnwsItem;  \n        break;  \n    }  \n}  \n  \n// Delete it  \ntestAttribute.Remove(dnwsItemToRemove);  \n  \n// Store the data  \nmyUser.CommitChanges();  \n```"
  syntax:
    content: public void Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "The property value to remove."
  overload: System.DirectoryServices.PropertyValueCollection.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The property value is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "An error occurred during the call to the underlying interface."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyValueCollection.Value
  id: Value
  parent: System.DirectoryServices.PropertyValueCollection
  langs:
  - csharp
  name: Value
  nameWithType: PropertyValueCollection.Value
  fullName: System.DirectoryServices.PropertyValueCollection.Value
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Gets or sets the values of the collection."
  remarks: "To add multiple values, set this property to an array of the values."
  syntax:
    content: public object Value { get; set; }
    return:
      type: System.Object
      description: "If the collection is empty, the property value is a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic). If the collection contains one value, the property value is that value. If the collection contains multiple values, the property value equals a copy of an array of those values.       If setting this property, the value or values are added to the <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref>. Setting this property to a null reference (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>) clears the collection."
  overload: System.DirectoryServices.PropertyValueCollection.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.CollectionBase
- uid: System.Runtime.InteropServices.COMException
  isExternal: true
  name: System.Runtime.InteropServices.COMException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.DirectoryServices.PropertyValueCollection.Add(System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Add(Object)
  nameWithType: PropertyValueCollection.Add(Object)
  fullName: System.DirectoryServices.PropertyValueCollection.Add(Object)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.PropertyValueCollection.AddRange(System.DirectoryServices.PropertyValueCollection)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: AddRange(PropertyValueCollection)
  nameWithType: PropertyValueCollection.AddRange(PropertyValueCollection)
  fullName: System.DirectoryServices.PropertyValueCollection.AddRange(PropertyValueCollection)
- uid: System.DirectoryServices.PropertyValueCollection
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyValueCollection
  nameWithType: PropertyValueCollection
  fullName: System.DirectoryServices.PropertyValueCollection
- uid: System.DirectoryServices.PropertyValueCollection.AddRange(System.Object[])
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: AddRange(Object[])
  nameWithType: PropertyValueCollection.AddRange(Object[])
  fullName: System.DirectoryServices.PropertyValueCollection.AddRange(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.PropertyValueCollection.Contains(System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Contains(Object)
  nameWithType: PropertyValueCollection.Contains(Object)
  fullName: System.DirectoryServices.PropertyValueCollection.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.PropertyValueCollection.CopyTo(System.Object[],System.Int32)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: CopyTo(Object[],Int32)
  nameWithType: PropertyValueCollection.CopyTo(Object[],Int32)
  fullName: System.DirectoryServices.PropertyValueCollection.CopyTo(Object[],Int32)
- uid: System.DirectoryServices.PropertyValueCollection.IndexOf(System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: IndexOf(Object)
  nameWithType: PropertyValueCollection.IndexOf(Object)
  fullName: System.DirectoryServices.PropertyValueCollection.IndexOf(Object)
- uid: System.DirectoryServices.PropertyValueCollection.Insert(System.Int32,System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: PropertyValueCollection.Insert(Int32,Object)
  fullName: System.DirectoryServices.PropertyValueCollection.Insert(Int32,Object)
- uid: System.DirectoryServices.PropertyValueCollection.Item(System.Int32)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: PropertyValueCollection.Item(Int32)
  fullName: System.DirectoryServices.PropertyValueCollection.Item(Int32)
- uid: System.DirectoryServices.PropertyValueCollection.OnClearComplete
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: OnClearComplete()
  nameWithType: PropertyValueCollection.OnClearComplete()
  fullName: System.DirectoryServices.PropertyValueCollection.OnClearComplete()
- uid: System.DirectoryServices.PropertyValueCollection.OnInsertComplete(System.Int32,System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: OnInsertComplete(Int32,Object)
  nameWithType: PropertyValueCollection.OnInsertComplete(Int32,Object)
  fullName: System.DirectoryServices.PropertyValueCollection.OnInsertComplete(Int32,Object)
- uid: System.DirectoryServices.PropertyValueCollection.OnRemoveComplete(System.Int32,System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: OnRemoveComplete(Int32,Object)
  nameWithType: PropertyValueCollection.OnRemoveComplete(Int32,Object)
  fullName: System.DirectoryServices.PropertyValueCollection.OnRemoveComplete(Int32,Object)
- uid: System.DirectoryServices.PropertyValueCollection.OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: OnSetComplete(Int32,Object,Object)
  nameWithType: PropertyValueCollection.OnSetComplete(Int32,Object,Object)
  fullName: System.DirectoryServices.PropertyValueCollection.OnSetComplete(Int32,Object,Object)
- uid: System.DirectoryServices.PropertyValueCollection.PropertyName
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: PropertyName
  nameWithType: PropertyValueCollection.PropertyName
  fullName: System.DirectoryServices.PropertyValueCollection.PropertyName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.PropertyValueCollection.Remove(System.Object)
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Remove(Object)
  nameWithType: PropertyValueCollection.Remove(Object)
  fullName: System.DirectoryServices.PropertyValueCollection.Remove(Object)
- uid: System.DirectoryServices.PropertyValueCollection.Value
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Value
  nameWithType: PropertyValueCollection.Value
  fullName: System.DirectoryServices.PropertyValueCollection.Value
- uid: System.DirectoryServices.PropertyValueCollection.Add*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Add
  nameWithType: PropertyValueCollection.Add
- uid: System.DirectoryServices.PropertyValueCollection.AddRange*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: AddRange
  nameWithType: PropertyValueCollection.AddRange
- uid: System.DirectoryServices.PropertyValueCollection.Contains*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Contains
  nameWithType: PropertyValueCollection.Contains
- uid: System.DirectoryServices.PropertyValueCollection.CopyTo*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: CopyTo
  nameWithType: PropertyValueCollection.CopyTo
- uid: System.DirectoryServices.PropertyValueCollection.IndexOf*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: IndexOf
  nameWithType: PropertyValueCollection.IndexOf
- uid: System.DirectoryServices.PropertyValueCollection.Insert*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Insert
  nameWithType: PropertyValueCollection.Insert
- uid: System.DirectoryServices.PropertyValueCollection.Item*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Item
  nameWithType: PropertyValueCollection.Item
- uid: System.DirectoryServices.PropertyValueCollection.OnClearComplete*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: OnClearComplete
  nameWithType: PropertyValueCollection.OnClearComplete
- uid: System.DirectoryServices.PropertyValueCollection.OnInsertComplete*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: OnInsertComplete
  nameWithType: PropertyValueCollection.OnInsertComplete
- uid: System.DirectoryServices.PropertyValueCollection.OnRemoveComplete*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: OnRemoveComplete
  nameWithType: PropertyValueCollection.OnRemoveComplete
- uid: System.DirectoryServices.PropertyValueCollection.OnSetComplete*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: OnSetComplete
  nameWithType: PropertyValueCollection.OnSetComplete
- uid: System.DirectoryServices.PropertyValueCollection.PropertyName*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: PropertyName
  nameWithType: PropertyValueCollection.PropertyName
- uid: System.DirectoryServices.PropertyValueCollection.Remove*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Remove
  nameWithType: PropertyValueCollection.Remove
- uid: System.DirectoryServices.PropertyValueCollection.Value*
  parent: System.DirectoryServices.PropertyValueCollection
  isExternal: false
  name: Value
  nameWithType: PropertyValueCollection.Value
