### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter
  id: ControlPropertyNameConverter
  children:
  - System.Web.UI.WebControls.ControlPropertyNameConverter.#ctor
  - System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  - System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  - System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  langs:
  - csharp
  name: ControlPropertyNameConverter
  nameWithType: ControlPropertyNameConverter
  fullName: System.Web.UI.WebControls.ControlPropertyNameConverter
  type: Class
  summary: "Provides a type converter that retrieves a list of property names for the current control."
  remarks: "The ControlPropertyNameConverter class derives from the <xref:System.ComponentModel.StringConverter> class and provides a list of property names for display in a property grid control in design-time environments.      > [!CAUTION] >  You should never access a type converter directly. Instead, call the appropriate converter by using the <xref:System.ComponentModel.TypeDescriptor?displayProperty=fullName> class. For more information, see the examples in the <xref:System.ComponentModel.TypeConverter> base class."
  syntax:
    content: 'public class ControlPropertyNameConverter : System.ComponentModel.StringConverter'
  inheritance:
  - System.Object
  - System.ComponentModel.TypeConverter
  - System.ComponentModel.StringConverter
  implements: []
  inheritedMembers:
  - System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  - System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  - System.ComponentModel.TypeConverter.GetProperties(System.Object)
  - System.ComponentModel.TypeConverter.GetPropertiesSupported
  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValues
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported
  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.IsValid(System.Object)
  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  platform:
  - net462
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  langs:
  - csharp
  name: ControlPropertyNameConverter()
  nameWithType: ControlPropertyNameConverter.ControlPropertyNameConverter()
  fullName: System.Web.UI.WebControls.ControlPropertyNameConverter.ControlPropertyNameConverter()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.UI.WebControls.ControlPropertyNameConverter&quot;></xref> class."
  remarks: "This constructor is not intended to be called directly. You should never access a type converter directly. Instead, call the appropriate converter by using the <xref:System.ComponentModel.TypeDescriptor?displayProperty=fullName> class. For more information, see the examples in the <xref:System.ComponentModel.TypeConverter> base class."
  syntax:
    content: public ControlPropertyNameConverter ();
    parameters: []
  overload: System.Web.UI.WebControls.ControlPropertyNameConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  langs:
  - csharp
  name: GetStandardValues(ITypeDescriptorContext)
  nameWithType: ControlPropertyNameConverter.GetStandardValues(ITypeDescriptorContext)
  fullName: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValues(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Returns a collection of property names for the control within a designer that implements <xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;></xref> when provided with a format context."
  remarks: "The GetStandardValues method returns a <xref:System.ComponentModel.TypeConverter.StandardValuesCollection> collection that contains a set of strings representing the names of the current control&quot;s properties.       Use the `context` parameter to extract additional information about the design-time environment from which this converter is invoked. This parameter can be `null`, and properties on the context object can return `null`. If the `context` parameter is `null`, this method returns `null`."
  syntax:
    content: public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "An <xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;></xref> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.ComponentModel.TypeConverter.StandardValuesCollection
      description: "A <xref:System.ComponentModel.TypeConverter.StandardValuesCollection> that contains a set of strings representing property names for the current control. If the current control is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, an empty collection is returned. If the <code>context</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> is returned."
  overload: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValues*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  langs:
  - csharp
  name: GetStandardValuesExclusive(ITypeDescriptorContext)
  nameWithType: ControlPropertyNameConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
  fullName: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Returns a value that indicates whether the collection of standard values returned by the <xref:System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValues*> method is an exclusive list of possible values, using the specified context."
  remarks: "The GetStandardValuesExclusive method always returns `false` to indicate that the list of property values returned by the <xref:System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValues%2A> method is not an exclusive list of possible values.       Use the `context` parameter to extract additional information about the environment from which this converter is invoked. This parameter can be `null`, and properties on the context object can return `null`."
  syntax:
    content: public override bool GetStandardValuesExclusive (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "An <xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;></xref> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> in all cases, which indicates that the list is not exclusive."
  overload: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesExclusive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  langs:
  - csharp
  name: GetStandardValuesSupported(ITypeDescriptorContext)
  nameWithType: ControlPropertyNameConverter.GetStandardValuesSupported(ITypeDescriptorContext)
  fullName: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesSupported(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Returns a value that indicates whether this object supports a standard set of values that can be chosen from a list, using the specified context."
  remarks: "The GetStandardValuesSupported method returns a value that indicates whether this object supports a standard set of values.       The `context` parameter extracts additional information about the design-time environment from which this converter is invoked. This parameter can be `null`, and properties on the context object can return `null`. If the `context` parameter is `null`, this method returns `false`."
  syntax:
    content: public override bool GetStandardValuesSupported (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "An <xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;></xref> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <code>context</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesSupported*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.StringConverter
  isExternal: false
  name: System.ComponentModel.StringConverter
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.#ctor
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  isExternal: false
  name: ControlPropertyNameConverter()
  nameWithType: ControlPropertyNameConverter.ControlPropertyNameConverter()
  fullName: System.Web.UI.WebControls.ControlPropertyNameConverter.ControlPropertyNameConverter()
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  isExternal: false
  name: GetStandardValues(ITypeDescriptorContext)
  nameWithType: ControlPropertyNameConverter.GetStandardValues(ITypeDescriptorContext)
  fullName: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValues(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.StandardValuesCollection
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter+StandardValuesCollection
  nameWithType: TypeConverter+StandardValuesCollection
  fullName: System.ComponentModel.TypeConverter+StandardValuesCollection
- uid: System.ComponentModel.ITypeDescriptorContext
  parent: System.ComponentModel
  isExternal: false
  name: ITypeDescriptorContext
  nameWithType: ITypeDescriptorContext
  fullName: System.ComponentModel.ITypeDescriptorContext
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  isExternal: false
  name: GetStandardValuesExclusive(ITypeDescriptorContext)
  nameWithType: ControlPropertyNameConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
  fullName: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  isExternal: false
  name: GetStandardValuesSupported(ITypeDescriptorContext)
  nameWithType: ControlPropertyNameConverter.GetStandardValuesSupported(ITypeDescriptorContext)
  fullName: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesSupported(ITypeDescriptorContext)
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.#ctor*
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  isExternal: false
  name: ControlPropertyNameConverter
  nameWithType: ControlPropertyNameConverter.ControlPropertyNameConverter
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValues*
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  isExternal: false
  name: GetStandardValues
  nameWithType: ControlPropertyNameConverter.GetStandardValues
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesExclusive*
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  isExternal: false
  name: GetStandardValuesExclusive
  nameWithType: ControlPropertyNameConverter.GetStandardValuesExclusive
- uid: System.Web.UI.WebControls.ControlPropertyNameConverter.GetStandardValuesSupported*
  parent: System.Web.UI.WebControls.ControlPropertyNameConverter
  isExternal: false
  name: GetStandardValuesSupported
  nameWithType: ControlPropertyNameConverter.GetStandardValuesSupported
