### YamlMime:ManagedReference
items:
- uid: System.IO.Directory
  id: Directory
  children:
  - System.IO.Directory.CreateDirectory(System.String)
  - System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.Directory.Delete(System.String)
  - System.IO.Directory.Delete(System.String,System.Boolean)
  - System.IO.Directory.EnumerateDirectories(System.String)
  - System.IO.Directory.EnumerateDirectories(System.String,System.String)
  - System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.EnumerateFiles(System.String)
  - System.IO.Directory.EnumerateFiles(System.String,System.String)
  - System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.Exists(System.String)
  - System.IO.Directory.GetAccessControl(System.String)
  - System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  - System.IO.Directory.GetCreationTime(System.String)
  - System.IO.Directory.GetCreationTimeUtc(System.String)
  - System.IO.Directory.GetCurrentDirectory
  - System.IO.Directory.GetDirectories(System.String)
  - System.IO.Directory.GetDirectories(System.String,System.String)
  - System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetDirectoryRoot(System.String)
  - System.IO.Directory.GetFiles(System.String)
  - System.IO.Directory.GetFiles(System.String,System.String)
  - System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetFileSystemEntries(System.String)
  - System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  - System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetLastAccessTime(System.String)
  - System.IO.Directory.GetLastAccessTimeUtc(System.String)
  - System.IO.Directory.GetLastWriteTime(System.String)
  - System.IO.Directory.GetLastWriteTimeUtc(System.String)
  - System.IO.Directory.GetLogicalDrives
  - System.IO.Directory.GetParent(System.String)
  - System.IO.Directory.Move(System.String,System.String)
  - System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  - System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  - System.IO.Directory.SetCurrentDirectory(System.String)
  - System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  - System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  - System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  - System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  langs:
  - csharp
  name: Directory
  nameWithType: Directory
  fullName: System.IO.Directory
  type: Class
  summary: "Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.       To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the Directory class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \n  \n-   To create a directory, use one of the <xref:System.IO.Directory.CreateDirectory%2A> methods.  \n  \n-   To delete a directory, use one of the <xref:System.IO.Directory.Delete%2A> methods.  \n  \n-   To get or set the current directory for an app, use the <xref:System.IO.Directory.GetCurrentDirectory%2A> or <xref:System.IO.Directory.SetCurrentDirectory%2A> method.  \n  \n-   To manipulate <xref:System.DateTime> information related to the creation, access, and writing of a directory, use methods such as <xref:System.IO.Directory.SetLastAccessTime%2A> and <xref:System.IO.Directory.SetCreationTime%2A>.  \n  \n The static methods of the Directory class perform security checks on all methods. If you are going to reuse an object several times, consider using the corresponding instance method of <xref:System.IO.DirectoryInfo> instead, because the security check will not always be necessary.  \n  \n If you are performing only one directory-related action, it might be more efficient to use a static Directory method rather than a corresponding <xref:System.IO.DirectoryInfo> instance method. Most Directory methods require the path to the directory that you are manipulating.  \n  \n> [!NOTE]\n>  In members that accept a string `path` parameter, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space (\" c:\\temp\"), the path string isn't trimmed, so the path is considered malformed and an exception is raised. In addition, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception. Ensure that your paths are well-formed when using methods that accept a path string. For more information see <xref:System.IO.Path>.  \n  \n In members that accept a path, the path can refer to a file or a directory. You can use a full path, a relative path, or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n By default, full read/write access to new directories is granted to all users. However, the app must have the correct security to access existing directories.  \n  \n To demand permissions for a directory and all its subdirectories, end the path string with the directory separator character. (For example, \"C:\\Temp\\\\\" grants access to C:\\Temp\\ and all its subdirectories.) To demand permissions only for a specific directory, end the path string with a period. (For example, \"C:\\Temp\\\\.\" grants access only to C:\\Temp\\\\, not to its subdirectories.)  \n  \n In members that accept a `searchPattern` parameter, the search string can be any combination of literal characters and two wildcard characters; * and ?. This parameter does not recognize regular expressions. For more information, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%2CSystem.String%29> method or any other method that uses the `searchPattern` parameter.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).  \n  \n Directory and <xref:System.IO.DirectoryInfo> are not supported for use in [!INCLUDE[win8_appstore_long](~/add/includes/win8-appstore-long-md.md)] apps. For information about how to access files and folders in [!INCLUDE[win8_appstore_long](~/add/includes/win8-appstore-long-md.md)] apps, see [Accessing data and files (Windows Store apps)](http://msdn.microsoft.com/library/windows/apps/hh758319.aspx)."
  example:
  - "The following example shows how to retrieve all the text files from a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#10](~/add/codesnippet/csharp/t-system.io.directory_1.cs)]\n [!code-vb[System.IO.Directory#10](~/add/codesnippet/visualbasic/t-system.io.directory_1.vb)]  \n  \n The following example demonstrates how to use the <xref:System.IO.Directory.EnumerateFiles%2A> method to retrieve a collection of text files from a directory, and then use that collection in a query to find all the lines that contain \"Example\".  \n  \n [!code-cs[System.IO.Directory#11](~/add/codesnippet/csharp/t-system.io.directory_2.cs)]\n [!code-vb[System.IO.Directory#11](~/add/codesnippet/visualbasic/t-system.io.directory_2.vb)]  \n  \n The following example demonstrates how to move a directory and all its files to a new directory. The original directory no longer exists after it has been moved.  \n  \n [!code-vb[System.IO.Directory#14](~/add/codesnippet/visualbasic/t-system.io.directory_3.vb)]\n [!code-cs[System.IO.Directory#14](~/add/codesnippet/csharp/t-system.io.directory_3.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Directory
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Directory.CreateDirectory(System.String)
  id: CreateDirectory(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: CreateDirectory(String)
  nameWithType: Directory.CreateDirectory(String)
  fullName: System.IO.Directory.CreateDirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates all directories and subdirectories in the specified path unless they already exist."
  remarks: "Any and all directories specified in `path` are created, unless they already exist or unless some part of `path` is invalid. If the directory already exists, this method does not create a new directory, but it returns a <xref:System.IO.DirectoryInfo> object for the existing directory.  \n  \n The `path` parameter specifies a directory path, not a file path.  \n  \n Trailing spaces are removed from the end of the `path` parameter before creating the directory.  \n  \n You can create a directory on a remote computer, on a share that you have write access to. UNC paths are supported; for example, you can specify the following for `path`: `\\\\2009\\Archives\\December` in Visual Basic, and `\\\\\\\\2009\\\\Archives\\\\December` in C#.  \n  \n Creating a directory with only the colon character (:) is not supported, and will cause a `NotSupportedException` to be thrown."
  example:
  - "The following example creates and deletes the specified directory.  \n  \n [!code-cs[Dir_CreateDir#1](~/add/codesnippet/csharp/m-system.io.directory.cr_1.cs)]\n [!code-vb[Dir_CreateDir#1](~/add/codesnippet/visualbasic/m-system.io.directory.cr_1.vb)]\n [!code-cpp[Dir_CreateDir#1](~/add/codesnippet/cpp/m-system.io.directory.cr_1.cpp)]  \n  \n To create the directory C:\\Users\\User1\\Public\\Html when the current directory is C:\\Users\\User1, use any of the following calls to ensure that the backslash is interpreted properly.  \n  \n In Visual Basic:  \n  \n```  \nDirectory.CreateDirectory(\"Public\\Html\")   \n    Directory.CreateDirectory(\"\\Users\\User1\\Public\\Html\")   \n    Directory.CreateDirectory(\"c:\\Users\\User1\\Public\\Html\")  \n```  \n  \n In C#:  \n  \n```  \nDirectory.CreateDirectory(\"Public\\\\Html\");  \n    Directory.CreateDirectory(\"\\\\Users\\\\User1\\\\Public\\\\Html\");  \n    Directory.CreateDirectory(\"c:\\\\Users\\\\User1\\\\Public\\\\Html\");  \n```  \n  \n In C++:  \n  \n```  \nDirectory::CreateDirectory(\"Public\\\\Html\");  \n    Directory::CreateDirectory(\"\\\\Users\\\\User1\\\\Public\\\\Html\");  \n    Directory::CreateDirectory(\"c:\\\\Users\\\\User1\\\\Public\\\\Html\");  \n```"
  syntax:
    content: public static System.IO.DirectoryInfo CreateDirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "The directory to create."
    return:
      type: System.IO.DirectoryInfo
      description: "An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists."
  overload: System.IO.Directory.CreateDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The directory specified by <code>path</code> is a file.       -or-       The network name is not known."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.       -or-       <code>path</code> is prefixed with, or contains, only a colon character (:)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> contains a colon character (:) that is not part of a drive label (&quot;C:\\&quot;)."
  platform:
  - net462
- uid: System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  id: CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  langs:
  - csharp
  name: CreateDirectory(String,DirectorySecurity)
  nameWithType: Directory.CreateDirectory(String,DirectorySecurity)
  fullName: System.IO.Directory.CreateDirectory(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Creates all the directories in the specified path, unless the already exist, applying the specified Windows security."
  remarks: "Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.  \n  \n Any and all directories specified in the `path` parameter are created, unless they already exist or unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the directory already exists, this method does not create a new directory, but it returns a <xref:System.IO.DirectoryInfo> object for the existing directory.  \n  \n Trailing spaces are removed from the end of the `path` parameter before creating the directory.  \n  \n You can create a directory on a remote computer, on a share that you have write access to. UNC paths are supported; for example, you can specify the following for `path`: `\\\\2009\\Archives\\December` in Visual Basic, and `\\\\\\\\2009\\\\Archives\\\\December` in C#.  \n  \n Creating a directory with only the colon character (:) is not supported and causes a `NotSupportedException` to be thrown."
  example:
  - "The following example creates a new directory with access rules for two user accounts.  \n  \n [!code-cs[System.IO.Directory#15](~/add/codesnippet/csharp/52b6d5ea-0f1d-4395-a346-_1.cs)]\n [!code-vb[System.IO.Directory#15](~/add/codesnippet/visualbasic/52b6d5ea-0f1d-4395-a346-_1.vb)]"
  syntax:
    content: public static System.IO.DirectoryInfo CreateDirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "The directory to create."
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "The access control to apply to the directory."
    return:
      type: System.IO.DirectoryInfo
      description: "An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists."
  overload: System.IO.Directory.CreateDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The directory specified by <code>path</code> is a file.       -or-       The network name is not known."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the  <xref:System.IO.Path.GetInvalidPathChars*> method.       -or-       <code>path</code> is prefixed with, or contains, only a colon character (:)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code> contains a colon character (:) that is not part of a drive label (&quot;C:\\&quot;)."
  platform:
  - net462
- uid: System.IO.Directory.Delete(System.String)
  id: Delete(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Delete(String)
  nameWithType: Directory.Delete(String)
  fullName: System.IO.Directory.Delete(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Deletes an empty directory from a specified path."
  remarks: "This method behaves identically to <xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29> with `false` specified for the second parameter.       The `path` parameter may specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       Trailing spaces are removed from the end of the `path` parameter before deleting the directory.       This method throws an <xref:System.IO.IOException> if the directory specified in the `path` parameter contains files or subdirectories.       The `path` parameter is not case-sensitive.       In some cases, if you have the specified directory open in File Explorer, the Delete method may not be able to delete it."
  example:
  - "The following example shows how to create a new directory and subdirectory, and then delete only the subdirectory.  \n  \n [!code-vb[System.IO.Directory.Delete#1](~/add/codesnippet/visualbasic/m-system.io.directory.de_0_1.vb)]\n [!code-cs[System.IO.Directory.Delete#1](~/add/codesnippet/csharp/m-system.io.directory.de_0_1.cs)]"
  syntax:
    content: public static void Delete (string path);
    parameters:
    - id: path
      type: System.String
      description: "The name of the empty directory to remove. This directory must be writable and empty."
  overload: System.IO.Directory.Delete*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A file with the same name and location specified by <code>path</code> exists.       -or-       The directory is the application&quot;s current working directory.       -or-       The directory specified by <code>path</code> is not empty.       -or-       The directory is read-only or contains a read-only file.       -or-       The directory is being used by another process."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> does not exist or could not be found.       -or-       The specified path is invalid (for example, it is on an unmapped drive)."
  platform:
  - net462
- uid: System.IO.Directory.Delete(System.String,System.Boolean)
  id: Delete(System.String,System.Boolean)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Delete(String,Boolean)
  nameWithType: Directory.Delete(String,Boolean)
  fullName: System.IO.Directory.Delete(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Deletes the specified directory and, if indicated, any subdirectories and files in the directory."
  remarks: "The `path` parameter may specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       Trailing spaces are removed from the end of the `path` parameter before deleting the directory.       The `path` parameter is not case-sensitive.       If the `recursive` parameter is `true`, the user must have write permission for the current directory as well as for all subdirectories.       The behavior of this method differs slightly when deleting a directory that contains a reparse point, such as a symbolic link or a mount point. If the reparse point is a directory, such as a mount point, it is unmounted and the mount point is deleted. This method does not recurse through the reparse point. If the reparse point is a symbolic link to a file, the reparse point is deleted and not the target of the symbolic link.       In some cases, if you have the specified directory open in File Explorer, the Delete method may not be able to delete it."
  example:
  - "The following example shows how to create a new directory, subdirectory, and file in the subdirectory, and then recursively delete all the new items.  \n  \n [!code-cs[System.IO.Directory.Delete#2](~/add/codesnippet/csharp/m-system.io.directory.de_1_1.cs)]\n [!code-vb[System.IO.Directory.Delete#2](~/add/codesnippet/visualbasic/m-system.io.directory.de_1_1.vb)]"
  syntax:
    content: public static void Delete (string path, bool recursive);
    parameters:
    - id: path
      type: System.String
      description: "The name of the directory to remove."
    - id: recursive
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to remove directories, subdirectories, and files in `path`; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.Directory.Delete*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "A file with the same name and location specified by <code>path</code> exists.       -or-       The directory specified by <code>path</code> is read-only, or <code>recursive</code> is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> and <code>path</code> is not an empty directory.       -or-       The directory is the application&quot;s current working directory.       -or-       The directory contains a read-only file.       -or-       The directory is being used by another process."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> does not exist or could not be found.       -or-       The specified path is invalid (for example, it is on an unmapped drive)."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String)
  id: EnumerateDirectories(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String)
  nameWithType: Directory.EnumerateDirectories(String)
  fullName: System.IO.Directory.EnumerateDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an enumerable collection of directory names in a specified path."
  remarks: "You can specify relative or absolute path information in the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the `path` parameter. For example, if you provide a relative path in the `path` parameter, the returned directory names will contain a relative path.       The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example enumerates the top-level directories in a specified path.  \n  \n [!code-vb[System.IO.EnumDirs1#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_2_1.vb)]\n [!code-cs[System.IO.EnumDirs1#1](~/add/codesnippet/csharp/m-system.io.directory.en_2_1.cs)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "An enumerable collection of the full names (including paths) for the directories in the directory specified by <code>path</code>."
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid, such as referring to an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String)
  id: EnumerateDirectories(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String,String)
  nameWithType: Directory.EnumerateDirectories(String,String)
  fullName: System.IO.Directory.EnumerateDirectories(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an enumerable collection of directory names that match a search pattern in a specified path."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative or absolute path information in the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the `path` parameter. For example, if you provide a relative path in the `path` parameter, the returned directory names will contain a relative path.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example enumerates the top-level directories in a specified path that match a specified search pattern.  \n  \n [!code-cs[System.IO.EnumDirs2#1](~/add/codesnippet/csharp/m-system.io.directory.en_0_1.cs)]\n [!code-vb[System.IO.EnumDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_0_1.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of directories in `path`.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&quot;t support regular expressions."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "An enumerable collection of the full names (including paths) for the directories in the directory specified by <code>path</code> and that match the specified search pattern."
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid, such as referring to an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  id: EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String,String,SearchOption)
  nameWithType: Directory.EnumerateDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateDirectories(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Exactly one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative or absolute path information in the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the `path` parameter. For example, if you provide a relative path in the `path` parameter, the returned directory names will contain a relative path.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example enumerates directories in a specified path that match a specified search pattern. It uses the `searchOption` parameter to specify that all subdirectories should be included in the search.  \n  \n [!code-cs[System.IO.EnumDirs3#1](~/add/codesnippet/csharp/d54eb053-19f8-45e5-b70d-_1.cs)]\n [!code-vb[System.IO.EnumDirs3#1](~/add/codesnippet/visualbasic/d54eb053-19f8-45e5-b70d-_1.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of directories in `path`.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&quot;t support regular expressions."
    - id: searchOption
      type: System.IO.SearchOption
      description: "One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.       The default value is <xref href=&quot;System.IO.SearchOption&quot;></xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "An enumerable collection of the full names (including paths) for the directories in the directory specified by <code>path</code> and that match the specified search pattern and option."
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the  <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code> is not a valid <xref href=&quot;System.IO.SearchOption&quot;></xref> value."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid, such as referring to an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String)
  id: EnumerateFiles(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String)
  nameWithType: Directory.EnumerateFiles(String)
  fullName: System.IO.Directory.EnumerateFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an enumerable collection of file names in a specified path."
  remarks: "You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.       The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example shows how to retrieve all the files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#12](~/add/codesnippet/csharp/m-system.io.directory.en_3_1.cs)]\n [!code-vb[System.IO.Directory#12](~/add/codesnippet/visualbasic/m-system.io.directory.en_3_1.vb)]  \n  \n The following example enumerates the files in the specified directory, reads each line of the file, and displays the line if it contains the string \"Europe\".  \n  \n [!code-cs[System.IO.Directory.EnumFiles#1](~/add/codesnippet/csharp/m-system.io.directory.en_3_2.cs)]\n [!code-vb[System.IO.Directory.EnumFiles#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_3_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "An enumerable collection of the full names (including paths) for the files in the directory specified by <code>path</code>."
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid, such as referring to an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String)
  id: EnumerateFiles(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String,String)
  nameWithType: Directory.EnumerateFiles(String,String)
  fullName: System.IO.Directory.EnumerateFiles(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an enumerable collection of file names that match a search pattern in a specified path."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example shows how to retrieve all the text files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#10](~/add/codesnippet/csharp/m-system.io.directory.en_1_1.cs)]\n [!code-vb[System.IO.Directory#10](~/add/codesnippet/visualbasic/m-system.io.directory.en_1_1.vb)]  \n  \n The following example enumerates the files in the specified directory that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Europe\".  \n  \n [!code-cs[System.IO.Directory.EnumFiles2#1](~/add/codesnippet/csharp/m-system.io.directory.en_1_2.cs)]\n [!code-vb[System.IO.Directory.EnumFiles2#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_1_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of files in `path`.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&quot;t support regular expressions."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "An enumerable collection of the full names (including paths) for the files in the directory specified by <code>path</code> and that match the specified search pattern."
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid, such as referring to an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  id: EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String,String,SearchOption)
  nameWithType: Directory.EnumerateFiles(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFiles(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example shows how to retrieve all the text files in a directory and its subdirectories, and move them to a new directory. After the files are moved, they no longer exist in the original directories.  \n  \n [!code-cs[System.IO.Directory#13](~/add/codesnippet/csharp/5542867a-6e9d-46bd-b2ed-_1.cs)]\n [!code-vb[System.IO.Directory#13](~/add/codesnippet/visualbasic/5542867a-6e9d-46bd-b2ed-_1.vb)]  \n  \n The following example recursively enumerates all files that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Microsoft\".  \n  \n [!code-cs[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/csharp/5542867a-6e9d-46bd-b2ed-_2.cs)]\n [!code-vb[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/visualbasic/5542867a-6e9d-46bd-b2ed-_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of files in `path`.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&quot;t support regular expressions."
    - id: searchOption
      type: System.IO.SearchOption
      description: "One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.       The default value is <xref href=&quot;System.IO.SearchOption&quot;></xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "An enumerable collection of the full names (including paths) for the files in the directory specified by <code>path</code> and that match the specified search pattern and option."
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code> is not a valid <xref href=&quot;System.IO.SearchOption&quot;></xref> value."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid, such as referring to an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String)
  id: EnumerateFileSystemEntries(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String)
  nameWithType: Directory.EnumerateFileSystemEntries(String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an enumerable collection of file names and directory names in a specified path."
  remarks: "You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.       The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.       The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "An enumerable collection of file-system entries in the directory specified by <code>path</code>."
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid, such as referring to an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  id: EnumerateFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String,String)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an enumerable collection of file names and directory names that  match a search pattern in a specified path."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`..  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of file-system entries in `path`.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&quot;t support regular expressions."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "An enumerable collection of file-system entries in the directory specified by <code>path</code> and that match the specified search pattern."
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid, such as referring to an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  id: EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against file-system entries in `path`.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&quot;t support regular expressions."
    - id: searchOption
      type: System.IO.SearchOption
      description: "One of the enumeration values  that specifies whether the search operation should include only the current directory or should include all subdirectories.       The default value is <xref href=&quot;System.IO.SearchOption&quot;></xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "An enumerable collection of file-system entries in the directory specified by <code>path</code> and that match the specified search pattern and option."
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code> is not a valid <xref href=&quot;System.IO.SearchOption&quot;></xref> value."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid, such as referring to an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.Exists(System.String)
  id: Exists(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Exists(String)
  nameWithType: Directory.Exists(String)
  fullName: System.IO.Directory.Exists(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Determines whether the given path refers to an existing directory on disk."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory.       Trailing spaces are removed from the end of the `path` parameter before checking whether the directory exists.       The `path` parameter is not case-sensitive.       If you do not have at a minimum read-only permission to the directory, the Exists method will return `false`.       The Exists method returns `false` if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file."
  example:
  - "The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  \n  \n [!code-cpp[Recursive file finder#2](~/add/codesnippet/cpp/m-system.io.directory.ex_1.cpp)]\n [!code-cs[Recursive file finder#2](~/add/codesnippet/csharp/m-system.io.directory.ex_1.cs)]\n [!code-vb[Recursive file finder#2](~/add/codesnippet/visualbasic/m-system.io.directory.ex_1.vb)]"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path to test."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if <code>path</code> refers to an existing directory; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if the directory does not exist or an error occurs when trying to determine if the specified directory exists."
  overload: System.IO.Directory.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Directory.GetAccessControl(System.String)
  id: GetAccessControl(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetAccessControl(String)
  nameWithType: Directory.GetAccessControl(String)
  fullName: System.IO.Directory.GetAccessControl(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Gets a <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref> object that encapsulates the access control list (ACL) entries for a specified directory."
  remarks: "Use the GetAccessControl method to retrieve the access control list (ACL) entries for a directory.       An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).       In NTFS environments, <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights> are granted to the user if the user has <xref:System.Security.AccessControl.FileSystemRights> rights on the parent folder. To deny <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights>, deny <xref:System.Security.AccessControl.FileSystemRights> on the parent directory."
  example:
  - "The following example uses the GetAccessControl and the <xref:System.IO.Directory.SetAccessControl%2A> methods to add an access control list (ACL) entry and then remove an ACL entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.directory.ge_7_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.directory.ge_7_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_7_1.vb)]"
  syntax:
    content: public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path to a directory containing a <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref> object that describes the file&quot;s access control list (ACL) information."
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "An object that encapsulates the access control rules for the file described by the <code>path</code> parameter."
  overload: System.IO.Directory.GetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the directory."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows 2000 or later."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <xref href=&quot;System.SystemException&quot;></xref>."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <code>path</code> parameter specified a directory that is read-only.       -or-       This operation is not supported on the current platform.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  id: GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: Directory.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.Directory.GetAccessControl(String,AccessControlSections)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Gets a <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref> object that encapsulates the specified type of access control list (ACL) entries for a specified directory."
  remarks: "Use the GetAccessControl method to retrieve the access control list (ACL) entries for a directory.       An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).       In NTFS environments, <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights> are granted to the user if the user has <xref:System.Security.AccessControl.FileSystemRights> rights on the parent folder. To deny <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights>, deny <xref:System.Security.AccessControl.FileSystemRights> on the parent directory."
  syntax:
    content: public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: path
      type: System.String
      description: "The path to a directory containing a <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref> object that describes the file&quot;s access control list (ACL) information."
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "One of the <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;></xref> values that specifies the type of access control list (ACL) information to receive."
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "An object that encapsulates the access control rules for the file described by the <code>path</code> parameter."
  overload: System.IO.Directory.GetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the directory."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows 2000 or later."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "A system-level error occurred, such as the directory could not be found. The specific exception may be a subclass of <xref href=&quot;System.SystemException&quot;></xref>."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The <code>path</code> parameter specified a directory that is read-only.       -or-       This operation is not supported on the current platform.       -or-       The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.GetCreationTime(System.String)
  id: GetCreationTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCreationTime(String)
  nameWithType: Directory.GetCreationTime(String)
  fullName: System.IO.Directory.GetCreationTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Gets the creation date and time of a directory."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       This method is equivalent to <xref:System.IO.File.GetCreationTime%2A?displayProperty=fullName>.       If the directory described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example gets the creation time of the specified directory.  \n  \n [!code-cpp[Dir_GetCreation#1](~/add/codesnippet/cpp/m-system.io.directory.ge_1_1.cpp)]\n [!code-cs[Dir_GetCreation#1](~/add/codesnippet/csharp/m-system.io.directory.ge_1_1.cs)]\n [!code-vb[Dir_GetCreation#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_1_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path of the directory."
    return:
      type: System.DateTime
      description: "A structure that is set to the creation date and time for the specified directory. This value is expressed in local time."
  overload: System.IO.Directory.GetCreationTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  platform:
  - net462
- uid: System.IO.Directory.GetCreationTimeUtc(System.String)
  id: GetCreationTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCreationTimeUtc(String)
  nameWithType: Directory.GetCreationTimeUtc(String)
  fullName: System.IO.Directory.GetCreationTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       If the directory described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).       Use this method to get the creation time for a directory based on Coordinated Universal Time (UTC)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_11_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_11_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_11_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path of the directory."
    return:
      type: System.DateTime
      description: "A structure that is set to the creation date and time for the specified directory. This value is expressed in UTC time."
  overload: System.IO.Directory.GetCreationTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  platform:
  - net462
- uid: System.IO.Directory.GetCurrentDirectory
  id: GetCurrentDirectory
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCurrentDirectory()
  nameWithType: Directory.GetCurrentDirectory()
  fullName: System.IO.Directory.GetCurrentDirectory()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Gets the current working directory of the application."
  remarks: "The current directory is distinct from the original directory, which is the one from which the process was started.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the `GetCurrentDirectory` method.  \n  \n [!code-cs[Dir_GetCurDir#1](~/add/codesnippet/csharp/m-system.io.directory.ge_16_1.cs)]\n [!code-vb[Dir_GetCurDir#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_16_1.vb)]\n [!code-cpp[Dir_GetCurDir#1](~/add/codesnippet/cpp/m-system.io.directory.ge_16_1.cpp)]"
  syntax:
    content: public static string GetCurrentDirectory ();
    parameters: []
    return:
      type: System.String
      description: "A string that contains the path of the current working directory, and does not end with a backslash (\\\\)."
  overload: System.IO.Directory.GetCurrentDirectory*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The operating system is Windows CE, which does not have current directory functionality.       This method is available in the .NET Compact Framework, but is not currently supported."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String)
  nameWithType: Directory.GetDirectories(String)
  fullName: System.IO.Directory.GetDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the names of subdirectories (including their paths) in the specified directory."
  remarks: "This method is identical to <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29> with the asterisk (*) specified as the search pattern, so it returns all subdirectories.If you need to search subdirectories, use the <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> method, which enables you to specify a search of subdirectories with the `searchOption` parameter.       The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.       The `path` parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The names returned by this method are prefixed with the directory information provided in `path`.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  \n  \n [!code-cpp[Recursive file finder#1](~/add/codesnippet/cpp/m-system.io.directory.ge_13_1.cpp)]\n [!code-cs[Recursive file finder#1](~/add/codesnippet/csharp/m-system.io.directory.ge_13_1.cs)]\n [!code-vb[Recursive file finder#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_13_1.vb)]"
  syntax:
    content: public static string[] GetDirectories (string path);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    return:
      type: System.String[]
      description: "An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found."
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String,System.String)
  id: GetDirectories(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String,String)
  nameWithType: Directory.GetDirectories(String,String)
  fullName: System.IO.Directory.GetDirectories(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory."
  remarks: "This method returns all subdirectories directly under the specified directory that match the specified search pattern. If the specified directory has no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array. Only the top directory is searched. If you want to search the subdirectories as well, use the <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> method and specify <xref:System.IO.SearchOption> in the `searchOption` parameter.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n The `path` parameter can specify relative or absolute path information, and is not case-sensitive.  Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of directories in a path that begin with the specified letter.  \n  \n [!code-cpp[Dir_GetDirs2#1](~/add/codesnippet/cpp/m-system.io.directory.ge_12_1.cpp)]\n [!code-cs[Dir_GetDirs2#1](~/add/codesnippet/csharp/m-system.io.directory.ge_12_1.cs)]\n [!code-vb[Dir_GetDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_12_1.vb)]"
  syntax:
    content: public static string[] GetDirectories (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of subdirectories in `path`. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn&quot;t support regular expressions."
    return:
      type: System.String[]
      description: "An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found."
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <xref:System.IO.Path.GetInvalidPathChars*>.       -or-       <code>searchPattern</code> doesn&quot;t contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  id: GetDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String,String,SearchOption)
  nameWithType: Directory.GetDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.GetDirectories(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories."
  remarks: "The `path` parameter can specify relative or absolute path information, and is not case-sensitive. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of directories that begin with the specified letter in a path. Only the top-level directory is searched.  \n  \n [!code-vb[Dir_GetDirs2#2](~/add/codesnippet/visualbasic/15c0f479-3a12-4c2f-95ac-_1.vb)]\n [!code-cs[Dir_GetDirs2#2](~/add/codesnippet/csharp/15c0f479-3a12-4c2f-95ac-_1.cs)]"
  syntax:
    content: public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of subdirectories in `path`. This parameter can contain a combination of valid literal and wildcard characters (see Remarks), but doesn&quot;t support regular expressions."
    - id: searchOption
      type: System.IO.SearchOption
      description: "One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory."
    return:
      type: System.String[]
      description: "An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found."
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.       -or-       <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code> is not a valid <xref href=&quot;System.IO.SearchOption&quot;></xref> value."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectoryRoot(System.String)
  id: GetDirectoryRoot(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectoryRoot(String)
  nameWithType: Directory.GetDirectoryRoot(String)
  fullName: System.IO.Directory.GetDirectoryRoot(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the volume information, root information, or both for the specified path."
  remarks: "This method obtains the fully qualified path name of `path`, as returned by <xref:System.IO.Path.GetFullPath%2A>, and returns root directory information. The specified path is not required to exist.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates how to set the current directory and display the directory root.  \n  \n [!code-cpp[System.IO.DirectoryRoot#1](~/add/codesnippet/cpp/m-system.io.directory.ge_10_1.cpp)]\n [!code-cs[System.IO.DirectoryRoot#1](~/add/codesnippet/csharp/m-system.io.directory.ge_10_1.cs)]\n [!code-vb[System.IO.DirectoryRoot#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_10_1.vb)]"
  syntax:
    content: public static string GetDirectoryRoot (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path of a file or directory."
    return:
      type: System.String
      description: "A string that contains the volume information, root information, or both for the specified path."
  overload: System.IO.Directory.GetDirectoryRoot*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <xref:System.IO.Path.GetInvalidPathChars*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String)
  nameWithType: Directory.GetFiles(String)
  fullName: System.IO.Directory.GetFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the names of files (including their paths) in the specified directory."
  remarks: "The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.       The returned file names are appended to the supplied `path` parameter.       This method is identical to <xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29> with the asterisk (*) specified as the search pattern.       The `path` parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the GetFiles method to return file names from a user-specified location. The example is configured to catch all errors common to this method.  \n  \n [!code-cpp[Recursive file finder#1](~/add/codesnippet/cpp/m-system.io.directory.ge_0_1.cpp)]\n [!code-cs[Recursive file finder#1](~/add/codesnippet/csharp/m-system.io.directory.ge_0_1.cs)]\n [!code-vb[Recursive file finder#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_0_1.vb)]"
  syntax:
    content: public static string[] GetFiles (string path);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    return:
      type: System.String[]
      description: "An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found."
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name.       -or-       A network error has occurred."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is not found or is invalid (for example, it is on an unmapped drive)."
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String,System.String)
  id: GetFiles(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String,String)
  nameWithType: Directory.GetFiles(String,String)
  fullName: System.IO.Directory.GetFiles(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the names of files (including their paths) that match the specified search pattern in the specified directory."
  remarks: "The returned file names are appended to the supplied `path` parameter and the order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" returns \"longfilename.txt\" because the equivalent 8.3 file name format is \"LONGFI~1.TXT\".  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The `path` parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of files that begin with the specified letter.  \n  \n [!code-vb[Dir_GetFiles2#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_15_1.vb)]\n [!code-cs[Dir_GetFiles2#1](~/add/codesnippet/csharp/m-system.io.directory.ge_15_1.cs)]\n [!code-cpp[Dir_GetFiles2#1](~/add/codesnippet/cpp/m-system.io.directory.ge_15_1.cpp)]"
  syntax:
    content: public static string[] GetFiles (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of files in `path`.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&quot;t support regular expressions."
    return:
      type: System.String[]
      description: "An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found."
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name.       -or-       A network error has occurred."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <xref:System.IO.Path.GetInvalidPathChars*>.       -or-       <code>searchPattern</code> doesn&quot;t contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is not found or is invalid (for example, it is on an unmapped drive)."
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  id: GetFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String,String,SearchOption)
  nameWithType: Directory.GetFiles(String,String,SearchOption)
  fullName: System.IO.Directory.GetFiles(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories."
  remarks: "The returned file names are appended to the supplied  parameter `path` and the order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" returns \"longfilename.txt\" because the equivalent 8.3 file name format is \"LONGFI~1.TXT\".  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The file names include the full path.  \n  \n The `path` parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static string[] GetFiles (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of files in `path`.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&quot;t support regular expressions."
    - id: searchOption
      type: System.IO.SearchOption
      description: "One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory."
    return:
      type: System.String[]
      description: "An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found."
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <xref:System.IO.Path.GetInvalidPathChars*> method.       -or-       <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> or <code>searchpattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code> is not a valid <xref href=&quot;System.IO.SearchOption&quot;></xref> value."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is not found or is invalid (for example, it is on an unmapped drive)."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name.       -or-       A network error has occurred."
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String)
  id: GetFileSystemEntries(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String)
  nameWithType: Directory.GetFileSystemEntries(String)
  fullName: System.IO.Directory.GetFileSystemEntries(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the names of all files and subdirectories in a specified path."
  remarks: "The order of the returned file and directory names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.       The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.       This method is identical to <xref:System.IO.Directory.GetFileSystemEntries%2A> with the asterisk (*) specified as the search pattern.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetFileSystemEntries method to fill an array of strings with the names of all files and subdirectories in a user-specified location and prints each string in the array to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#1](~/add/codesnippet/csharp/m-system.io.directory.ge_4_1.cs)]\n [!code-vb[System.IO.Directory#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_4_1.vb)]\n [!code-cpp[System.IO.Directory#1](~/add/codesnippet/cpp/m-system.io.directory.ge_4_1.cpp)]"
  syntax:
    content: public static string[] GetFileSystemEntries (string path);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    return:
      type: System.String[]
      description: "An array of the names of files and subdirectories in the specified directory, or an empty array if no files or subdirectories are found."
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <xref:System.IO.Path.GetInvalidPathChars*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  id: GetFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String,String)
  nameWithType: Directory.GetFileSystemEntries(String,String)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an array of file names and directory names that that match a search pattern in a specified path."
  remarks: "The order of the returned file and directory names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetFileSystemEntries method to fill an array of strings with the names of all files matching a user-specified filter in a specific location and prints each string in the array to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#2](~/add/codesnippet/csharp/m-system.io.directory.ge_8_1.cs)]\n [!code-vb[System.IO.Directory#2](~/add/codesnippet/visualbasic/m-system.io.directory.ge_8_1.vb)]\n [!code-cpp[System.IO.Directory#2](~/add/codesnippet/cpp/m-system.io.directory.ge_8_1.cpp)]"
  syntax:
    content: public static string[] GetFileSystemEntries (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of file and directories in `path`.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&quot;t support regular expressions."
    return:
      type: System.String[]
      description: "An array of file names and directory names that match the specified search criteria, or an empty array if no files or directories are found."
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <xref:System.IO.Path.GetInvalidPathChars*> method.       -or-       <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path is invalid (for example, it is on an unmapped drive)."
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  id: GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.GetFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories."
  remarks: "The order of the returned file and directory names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method."
  syntax:
    content: public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "The relative or absolute path to the directory to search. This string is not case-sensitive."
    - id: searchPattern
      type: System.String
      description: "The search string to match against the names of files and directories in `path`.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn&quot;t support regular expressions."
    - id: searchOption
      type: System.IO.SearchOption
      description: "One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.       The default value is <xref href=&quot;System.IO.SearchOption&quot;></xref>."
    return:
      type: System.String[]
      description: "An array of file the file names and directory names that match the specified search criteria, or an empty array if no files or directories are found."
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code> is not a valid <xref href=&quot;System.IO.SearchOption&quot;></xref> value."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code> is invalid, such as referring to an unmapped drive."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code> is a file name."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or combined exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.GetLastAccessTime(System.String)
  id: GetLastAccessTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastAccessTime(String)
  nameWithType: Directory.GetLastAccessTime(String)
  fullName: System.IO.Directory.GetLastAccessTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the date and time the specified file or directory was last accessed."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       This method is identical to <xref:System.IO.File.GetLastAccessTime%2A?displayProperty=fullName>.       If the directory described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `GetLastAccessTime`.  \n  \n [!code-cpp[Dir_GetLastAccess#1](~/add/codesnippet/cpp/m-system.io.directory.ge_6_1.cpp)]\n [!code-vb[Dir_GetLastAccess#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_6_1.vb)]\n [!code-cs[Dir_GetLastAccess#1](~/add/codesnippet/csharp/m-system.io.directory.ge_6_1.cs)]"
  syntax:
    content: public static DateTime GetLastAccessTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to obtain access date and time information."
    return:
      type: System.DateTime
      description: "A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time."
  overload: System.IO.Directory.GetLastAccessTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <code>path</code> parameter is in an invalid format."
  platform:
  - net462
- uid: System.IO.Directory.GetLastAccessTimeUtc(System.String)
  id: GetLastAccessTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastAccessTimeUtc(String)
  nameWithType: Directory.GetLastAccessTimeUtc(String)
  fullName: System.IO.Directory.GetLastAccessTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       If the directory described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_9_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_9_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_9_1.vb)]"
  syntax:
    content: public static DateTime GetLastAccessTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to obtain access date and time information."
    return:
      type: System.DateTime
      description: "A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time."
  overload: System.IO.Directory.GetLastAccessTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <code>path</code> parameter is in an invalid format."
  platform:
  - net462
- uid: System.IO.Directory.GetLastWriteTime(System.String)
  id: GetLastWriteTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastWriteTime(String)
  nameWithType: Directory.GetLastWriteTime(String)
  fullName: System.IO.Directory.GetLastWriteTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the date and time the specified file or directory was last written to."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       If the directory described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `GetLastWriteTime`.  \n  \n [!code-cs[Dir_GetLastWrite#1](~/add/codesnippet/csharp/m-system.io.directory.ge_14_1.cs)]\n [!code-cpp[Dir_GetLastWrite#1](~/add/codesnippet/cpp/m-system.io.directory.ge_14_1.cpp)]\n [!code-vb[Dir_GetLastWrite#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_14_1.vb)]"
  syntax:
    content: public static DateTime GetLastWriteTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to obtain modification date and time information."
    return:
      type: System.DateTime
      description: "A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time."
  overload: System.IO.Directory.GetLastWriteTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  platform:
  - net462
- uid: System.IO.Directory.GetLastWriteTimeUtc(System.String)
  id: GetLastWriteTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastWriteTimeUtc(String)
  nameWithType: Directory.GetLastWriteTimeUtc(String)
  fullName: System.IO.Directory.GetLastWriteTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to."
  remarks: "> [!NOTE] >  This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.       If the directory described in the `path` parameter does not exist, this method returns 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_2_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_2_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_2_1.vb)]"
  syntax:
    content: public static DateTime GetLastWriteTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to obtain modification date and time information."
    return:
      type: System.DateTime
      description: "A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time."
  overload: System.IO.Directory.GetLastWriteTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  platform:
  - net462
- uid: System.IO.Directory.GetLogicalDrives
  id: GetLogicalDrives
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLogicalDrives()
  nameWithType: Directory.GetLogicalDrives()
  fullName: System.IO.Directory.GetLogicalDrives()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Retrieves the names of the logical drives on this computer in the form &quot;&lt;drive letter&gt;:\\&quot;."
  remarks: "GetLogicalDrives returns all of the accessible drives on a particular machine, including the floppy drive and any optical drives.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetLogicalDrives method to assign the name of each drive on the calling computer to an array of strings. Each member of this string array is then printed to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#3](~/add/codesnippet/csharp/m-system.io.directory.ge_3_1.cs)]\n [!code-vb[System.IO.Directory#3](~/add/codesnippet/visualbasic/m-system.io.directory.ge_3_1.vb)]\n [!code-cpp[System.IO.Directory#3](~/add/codesnippet/cpp/m-system.io.directory.ge_3_1.cpp)]"
  syntax:
    content: public static string[] GetLogicalDrives ();
    parameters: []
    return:
      type: System.String[]
      description: "The logical drives on this computer."
  overload: System.IO.Directory.GetLogicalDrives*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occured (for example, a disk error)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  platform:
  - net462
- uid: System.IO.Directory.GetParent(System.String)
  id: GetParent(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetParent(String)
  nameWithType: Directory.GetParent(String)
  fullName: System.IO.Directory.GetParent(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Retrieves the parent directory of the specified path, including both absolute and relative paths."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n Trailing spaces are removed from the end of the `path` parameter before getting the directory.  \n  \n The string returned by this method consists of all characters in the path up to, but not including, the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>. For example, passing the path \"C:\\Directory\\SubDirectory\\test.txt\" to GetParent returns \"C:\\Directory\\SubDirectory\". Passing \"C:\\Directory\\SubDirectory\" returns \"C:\\Directory\". However, passing \"C:\\Directory\\SubDirectory\\\\\" returns \"C:\\Directory\\SubDirectory\", because the ending directory separator is after \"SubDirectory\".  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the GetParent method to retrieve the parent directory of a user-specified location, \"path\". The value returned by the GetParent method is then printed to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#4](~/add/codesnippet/csharp/m-system.io.directory.ge_5_1.cs)]\n [!code-vb[System.IO.Directory#4](~/add/codesnippet/visualbasic/m-system.io.directory.ge_5_1.vb)]\n [!code-cpp[System.IO.Directory#4](~/add/codesnippet/cpp/m-system.io.directory.ge_5_1.cpp)]"
  syntax:
    content: public static System.IO.DirectoryInfo GetParent (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path for which to retrieve the parent directory."
    return:
      type: System.IO.DirectoryInfo
      description: "The parent directory, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> if <code>path</code> is the root directory, including the root of a UNC server or share name."
  overload: System.IO.Directory.GetParent*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The directory specified by <code>path</code> is read-only."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified path was not found."
  platform:
  - net462
- uid: System.IO.Directory.Move(System.String,System.String)
  id: Move(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Move(String,String)
  nameWithType: Directory.Move(String,String)
  fullName: System.IO.Directory.Move(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Moves a file or a directory and its contents to a new location."
  remarks: "This method creates a new directory with the name specified by `destDirName` and moves the contents of `sourceDirName` to the newly created destination directory. If you try to move a directory to a directory that already exists, an <xref:System.IO.IOException> will occur. For example, an exception will occur if you try to move c:\\mydir to c:\\public, and c:\\public already exists. Alternatively, you could specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, provided that \"mydir\" does not exist under \"c:\\\\\\public\", or specify a new directory name such as \"c:\\\\\\newdir\".  \n  \n The `sourceDirName` and `destDirName` arguments are permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n Trailing spaces are removed from the end of the path parameters before moving the directory.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to move a directory and all its files to a new directory. The original directory no longer exists after it has been moved.  \n  \n [!code-vb[System.IO.Directory#14](~/add/codesnippet/visualbasic/m-system.io.directory.mo_1.vb)]\n [!code-cs[System.IO.Directory#14](~/add/codesnippet/csharp/m-system.io.directory.mo_1.cs)]"
  syntax:
    content: public static void Move (string sourceDirName, string destDirName);
    parameters:
    - id: sourceDirName
      type: System.String
      description: "The path of the file or directory to move."
    - id: destDirName
      type: System.String
      description: "The path to the new location for `sourceDirName`. If `sourceDirName` is a file, then `destDirName` must also be a file name."
  overload: System.IO.Directory.Move*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An attempt was made to move a directory to a different volume.       -or-       <code>destDirName</code> already exists.       -or-       The <code>sourceDirName</code> and <code>destDirName</code> parameters refer to the same file or directory.       -or-       The directory or a file within it is being used by another process."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceDirName</code> or <code>destDirName</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirName</code> or <code>destDirName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The path specified by <code>sourceDirName</code> is invalid (for example, it is on an unmapped drive)."
  platform:
  - net462
- uid: System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  id: SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetAccessControl(String,DirectorySecurity)
  nameWithType: Directory.SetAccessControl(String,DirectorySecurity)
  fullName: System.IO.Directory.SetAccessControl(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Applies access control list (ACL) entries described by a <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref> object to the specified directory."
  remarks: "The SetAccessControl method applies access control list (ACL) entries to a file that represents the noninherited ACL list.      > [!CAUTION] >  The ACL specified for the `directorySecurity` parameter replaces the existing ACL for the directory. To add permissions for a new user, use the <xref:System.IO.Directory.GetAccessControl%2A> method to obtain the existing ACL and modify it.       An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file or directory. For more information, see [How to: Add or Remove Access Control List Entries](~/add/includes/ajax-current-ext-md.md).       The SetAccessControl method persists only <xref:System.Security.AccessControl.DirectorySecurity> objects that have been modified after object creation.  If a <xref:System.Security.AccessControl.DirectorySecurity> object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a <xref:System.Security.AccessControl.DirectorySecurity> object from one file and reapply the same object to another file.       To copy ACL information from one file to another:      1.  Use the <xref:System.IO.Directory.GetAccessControl%2A> method to retrieve the <xref:System.Security.AccessControl.DirectorySecurity> object from the source file.      2.  Create a new <xref:System.Security.AccessControl.DirectorySecurity> object for the destination file.      3.  Use the <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> method of the source <xref:System.Security.AccessControl.DirectorySecurity> object to retrieve the ACL information.      4.  Use the <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> or <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> method to copy the information retrieved in step 3 to the destination <xref:System.Security.AccessControl.DirectorySecurity> object.      5.  Set the destination <xref:System.Security.AccessControl.DirectorySecurity> object to the destination file using the SetAccessControl method.       In NTFS environments, <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights> are granted to the user if the user has <xref:System.Security.AccessControl.FileSystemRights> rights on the parent folder. To deny <xref:System.Security.AccessControl.FileSystemRights> and <xref:System.Security.AccessControl.FileSystemRights>, deny <xref:System.Security.AccessControl.FileSystemRights> on the parent directory."
  example:
  - "The following example uses the <xref:System.IO.Directory.GetAccessControl%2A> and the SetAccessControl methods to add an access control list (ACL) entry and then remove an ACL entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/57b88d80-60eb-4344-b644-_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/57b88d80-60eb-4344-b644-_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/57b88d80-60eb-4344-b644-_1.vb)]"
  syntax:
    content: public static void SetAccessControl (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "A directory to add or remove access control list (ACL) entries from."
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref> object that describes an ACL entry to apply to the directory described by the `path` parameter."
  overload: System.IO.Directory.SetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>directorySecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The directory could not be found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>path</code> was invalid."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The current process does not have access to the directory specified by <code>path</code>.       -or-       The current process does not have sufficient privilege to set the ACL entry."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows 2000 or later."
  platform:
  - net462
- uid: System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  id: SetCreationTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCreationTime(String,DateTime)
  nameWithType: Directory.SetCreationTime(String,DateTime)
  fullName: System.IO.Directory.SetCreationTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the creation date and time for the specified file or directory."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_4_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_4_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_4_1.vb)]"
  syntax:
    content: public static void SetCreationTime (string path, DateTime creationTime);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to set the creation date and time information."
    - id: creationTime
      type: System.DateTime
      description: "The date and time the file or directory was last written to. This value is expressed in local time."
  overload: System.IO.Directory.SetCreationTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code> specifies a value outside the range of dates or times permitted for this operation."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows NT or later."
  platform:
  - net462
- uid: System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  id: SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: Directory.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetCreationTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to set the creation date and time information."
    - id: creationTimeUtc
      type: System.DateTime
      description: "The date and time the directory or file was created. This value is expressed in local time."
  overload: System.IO.Directory.SetCreationTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code> specifies a value outside the range of dates or times permitted for this operation."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows NT or later."
  platform:
  - net462
- uid: System.IO.Directory.SetCurrentDirectory(System.String)
  id: SetCurrentDirectory(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCurrentDirectory(String)
  nameWithType: Directory.SetCurrentDirectory(String)
  fullName: System.IO.Directory.SetCurrentDirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the application&quot;s current working directory to the specified directory."
  remarks: "When the application terminates, the working directory is restored to its original location (the directory where the process was started).       The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       Trailing spaces are removed from the end of the `path` parameter before setting the directory.       The `path` parameter is not case-sensitive.       If you are setting the directory to a drive with removable media (for example, to &quot;A:&quot; for a floppy disk drive or &quot;E:&quot; for a CD-ROM drive), you can determine whether the drive is ready by using the <xref:System.IO.DriveInfo.IsReady%2A> property."
  example:
  - "The following example illustrates how to set the current directory and display the directory root.  \n  \n [!code-cpp[System.IO.DirectoryRoot#1](~/add/codesnippet/cpp/m-system.io.directory.se_2_1.cpp)]\n [!code-cs[System.IO.DirectoryRoot#1](~/add/codesnippet/csharp/m-system.io.directory.se_2_1.cs)]\n [!code-vb[System.IO.DirectoryRoot#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_2_1.vb)]"
  syntax:
    content: public static void SetCurrentDirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path to which the current working directory is set."
  overload: System.IO.Directory.SetCurrentDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "The caller does not have the required permission to access unmanaged code."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "The specified directory was not found."
  platform:
  - net462
- uid: System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  id: SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastAccessTime(String,DateTime)
  nameWithType: Directory.SetLastAccessTime(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the date and time the specified file or directory was last accessed."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `SetLastAccessTime`.  \n  \n [!code-cs[Dir_SetLastAccess#1](~/add/codesnippet/csharp/m-system.io.directory.se_1_1.cs)]\n [!code-cpp[Dir_SetLastAccess#1](~/add/codesnippet/cpp/m-system.io.directory.se_1_1.cpp)]\n [!code-vb[Dir_SetLastAccess#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_1_1.vb)]"
  syntax:
    content: public static void SetLastAccessTime (string path, DateTime lastAccessTime);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to set the access date and time information."
    - id: lastAccessTime
      type: System.DateTime
      description: "An object that contains the value to set for the access date and time of `path`. This value is expressed in local time."
  overload: System.IO.Directory.SetLastAccessTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows NT or later."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTime</code> specifies a value outside the range of dates or times permitted for this operation."
  platform:
  - net462
- uid: System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  id: SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_0_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_0_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_0_1.vb)]"
  syntax:
    content: public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "The file or directory for which to set the access date and time information."
    - id: lastAccessTimeUtc
      type: System.DateTime
      description: "An object that  contains the value to set for the access date and time of `path`. This value is expressed in UTC time."
  overload: System.IO.Directory.SetLastAccessTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows NT or later."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTimeUtc</code> specifies a value outside the range of dates or times permitted for this operation."
  platform:
  - net462
- uid: System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  id: SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastWriteTime(String,DateTime)
  nameWithType: Directory.SetLastWriteTime(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the date and time a directory was last written to."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `SetLastWriteTime`.  \n  \n [!code-cpp[Dir_SetLastWrite#1](~/add/codesnippet/cpp/m-system.io.directory.se_3_1.cpp)]\n [!code-cs[Dir_SetLastWrite#1](~/add/codesnippet/csharp/m-system.io.directory.se_3_1.cs)]\n [!code-vb[Dir_SetLastWrite#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_3_1.vb)]"
  syntax:
    content: public static void SetLastWriteTime (string path, DateTime lastWriteTime);
    parameters:
    - id: path
      type: System.String
      description: "The path of the directory."
    - id: lastWriteTime
      type: System.DateTime
      description: "The date and time the directory was last written to. This value is expressed in local time."
  overload: System.IO.Directory.SetLastWriteTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows NT or later."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTime</code> specifies a value outside the range of dates or times permitted for this operation."
  platform:
  - net462
- uid: System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  id: SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.       The `path` parameter is not case-sensitive.       For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_5_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_5_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_5_1.vb)]"
  syntax:
    content: public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "The path of the directory."
    - id: lastWriteTimeUtc
      type: System.DateTime
      description: "The date and time the directory was last written to. This value is expressed in UTC time."
  overload: System.IO.Directory.SetLastWriteTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified path was not found."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "The caller does not have the required permission."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The current operating system is not Windows NT or later."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTimeUtc</code> specifies a value outside the range of dates or times permitted for this operation."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.Directory.CreateDirectory(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory(String)
  nameWithType: Directory.CreateDirectory(String)
  fullName: System.IO.Directory.CreateDirectory(String)
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory(String,DirectorySecurity)
  nameWithType: Directory.CreateDirectory(String,DirectorySecurity)
  fullName: System.IO.Directory.CreateDirectory(String,DirectorySecurity)
- uid: System.Security.AccessControl.DirectorySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
- uid: System.IO.Directory.Delete(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Delete(String)
  nameWithType: Directory.Delete(String)
  fullName: System.IO.Directory.Delete(String)
- uid: System.IO.Directory.Delete(System.String,System.Boolean)
  parent: System.IO.Directory
  isExternal: false
  name: Delete(String,Boolean)
  nameWithType: Directory.Delete(String,Boolean)
  fullName: System.IO.Directory.Delete(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Directory.EnumerateDirectories(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String)
  nameWithType: Directory.EnumerateDirectories(String)
  fullName: System.IO.Directory.EnumerateDirectories(String)
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String,String)
  nameWithType: Directory.EnumerateDirectories(String,String)
  fullName: System.IO.Directory.EnumerateDirectories(String,String)
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String,String,SearchOption)
  nameWithType: Directory.EnumerateDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateDirectories(String,String,SearchOption)
- uid: System.IO.SearchOption
  parent: System.IO
  isExternal: false
  name: SearchOption
  nameWithType: SearchOption
  fullName: System.IO.SearchOption
- uid: System.IO.Directory.EnumerateFiles(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String)
  nameWithType: Directory.EnumerateFiles(String)
  fullName: System.IO.Directory.EnumerateFiles(String)
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String,String)
  nameWithType: Directory.EnumerateFiles(String,String)
  fullName: System.IO.Directory.EnumerateFiles(String,String)
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String,String,SearchOption)
  nameWithType: Directory.EnumerateFiles(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFiles(String,String,SearchOption)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String)
  nameWithType: Directory.EnumerateFileSystemEntries(String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String,String)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String,SearchOption)
- uid: System.IO.Directory.Exists(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Exists(String)
  nameWithType: Directory.Exists(String)
  fullName: System.IO.Directory.Exists(String)
- uid: System.IO.Directory.GetAccessControl(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl(String)
  nameWithType: Directory.GetAccessControl(String)
  fullName: System.IO.Directory.GetAccessControl(String)
- uid: System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: Directory.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.Directory.GetAccessControl(String,AccessControlSections)
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.IO.Directory.GetCreationTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTime(String)
  nameWithType: Directory.GetCreationTime(String)
  fullName: System.IO.Directory.GetCreationTime(String)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.Directory.GetCreationTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTimeUtc(String)
  nameWithType: Directory.GetCreationTimeUtc(String)
  fullName: System.IO.Directory.GetCreationTimeUtc(String)
- uid: System.IO.Directory.GetCurrentDirectory
  parent: System.IO.Directory
  isExternal: false
  name: GetCurrentDirectory()
  nameWithType: Directory.GetCurrentDirectory()
  fullName: System.IO.Directory.GetCurrentDirectory()
- uid: System.IO.Directory.GetDirectories(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String)
  nameWithType: Directory.GetDirectories(String)
  fullName: System.IO.Directory.GetDirectories(String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Directory.GetDirectories(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String,String)
  nameWithType: Directory.GetDirectories(String,String)
  fullName: System.IO.Directory.GetDirectories(String,String)
- uid: System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String,String,SearchOption)
  nameWithType: Directory.GetDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.GetDirectories(String,String,SearchOption)
- uid: System.IO.Directory.GetDirectoryRoot(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectoryRoot(String)
  nameWithType: Directory.GetDirectoryRoot(String)
  fullName: System.IO.Directory.GetDirectoryRoot(String)
- uid: System.IO.Directory.GetFiles(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String)
  nameWithType: Directory.GetFiles(String)
  fullName: System.IO.Directory.GetFiles(String)
- uid: System.IO.Directory.GetFiles(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String,String)
  nameWithType: Directory.GetFiles(String,String)
  fullName: System.IO.Directory.GetFiles(String,String)
- uid: System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String,String,SearchOption)
  nameWithType: Directory.GetFiles(String,String,SearchOption)
  fullName: System.IO.Directory.GetFiles(String,String,SearchOption)
- uid: System.IO.Directory.GetFileSystemEntries(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String)
  nameWithType: Directory.GetFileSystemEntries(String)
  fullName: System.IO.Directory.GetFileSystemEntries(String)
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String,String)
  nameWithType: Directory.GetFileSystemEntries(String,String)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String)
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.GetFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String,SearchOption)
- uid: System.IO.Directory.GetLastAccessTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTime(String)
  nameWithType: Directory.GetLastAccessTime(String)
  fullName: System.IO.Directory.GetLastAccessTime(String)
- uid: System.IO.Directory.GetLastAccessTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTimeUtc(String)
  nameWithType: Directory.GetLastAccessTimeUtc(String)
  fullName: System.IO.Directory.GetLastAccessTimeUtc(String)
- uid: System.IO.Directory.GetLastWriteTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTime(String)
  nameWithType: Directory.GetLastWriteTime(String)
  fullName: System.IO.Directory.GetLastWriteTime(String)
- uid: System.IO.Directory.GetLastWriteTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTimeUtc(String)
  nameWithType: Directory.GetLastWriteTimeUtc(String)
  fullName: System.IO.Directory.GetLastWriteTimeUtc(String)
- uid: System.IO.Directory.GetLogicalDrives
  parent: System.IO.Directory
  isExternal: false
  name: GetLogicalDrives()
  nameWithType: Directory.GetLogicalDrives()
  fullName: System.IO.Directory.GetLogicalDrives()
- uid: System.IO.Directory.GetParent(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetParent(String)
  nameWithType: Directory.GetParent(String)
  fullName: System.IO.Directory.GetParent(String)
- uid: System.IO.Directory.Move(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Move(String,String)
  nameWithType: Directory.Move(String,String)
  fullName: System.IO.Directory.Move(String,String)
- uid: System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  isExternal: false
  name: SetAccessControl(String,DirectorySecurity)
  nameWithType: Directory.SetAccessControl(String,DirectorySecurity)
  fullName: System.IO.Directory.SetAccessControl(String,DirectorySecurity)
- uid: System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTime(String,DateTime)
  nameWithType: Directory.SetCreationTime(String,DateTime)
  fullName: System.IO.Directory.SetCreationTime(String,DateTime)
- uid: System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: Directory.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetCreationTimeUtc(String,DateTime)
- uid: System.IO.Directory.SetCurrentDirectory(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: SetCurrentDirectory(String)
  nameWithType: Directory.SetCurrentDirectory(String)
  fullName: System.IO.Directory.SetCurrentDirectory(String)
- uid: System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTime(String,DateTime)
  nameWithType: Directory.SetLastAccessTime(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTime(String,DateTime)
- uid: System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTimeUtc(String,DateTime)
- uid: System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTime(String,DateTime)
  nameWithType: Directory.SetLastWriteTime(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTime(String,DateTime)
- uid: System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTimeUtc(String,DateTime)
- uid: System.IO.Directory.CreateDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory
  nameWithType: Directory.CreateDirectory
- uid: System.IO.Directory.Delete*
  parent: System.IO.Directory
  isExternal: false
  name: Delete
  nameWithType: Directory.Delete
- uid: System.IO.Directory.EnumerateDirectories*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories
  nameWithType: Directory.EnumerateDirectories
- uid: System.IO.Directory.EnumerateFiles*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles
  nameWithType: Directory.EnumerateFiles
- uid: System.IO.Directory.EnumerateFileSystemEntries*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries
  nameWithType: Directory.EnumerateFileSystemEntries
- uid: System.IO.Directory.Exists*
  parent: System.IO.Directory
  isExternal: false
  name: Exists
  nameWithType: Directory.Exists
- uid: System.IO.Directory.GetAccessControl*
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl
  nameWithType: Directory.GetAccessControl
- uid: System.IO.Directory.GetCreationTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTime
  nameWithType: Directory.GetCreationTime
- uid: System.IO.Directory.GetCreationTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTimeUtc
  nameWithType: Directory.GetCreationTimeUtc
- uid: System.IO.Directory.GetCurrentDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: GetCurrentDirectory
  nameWithType: Directory.GetCurrentDirectory
- uid: System.IO.Directory.GetDirectories*
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories
  nameWithType: Directory.GetDirectories
- uid: System.IO.Directory.GetDirectoryRoot*
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectoryRoot
  nameWithType: Directory.GetDirectoryRoot
- uid: System.IO.Directory.GetFiles*
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles
  nameWithType: Directory.GetFiles
- uid: System.IO.Directory.GetFileSystemEntries*
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries
  nameWithType: Directory.GetFileSystemEntries
- uid: System.IO.Directory.GetLastAccessTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTime
  nameWithType: Directory.GetLastAccessTime
- uid: System.IO.Directory.GetLastAccessTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTimeUtc
  nameWithType: Directory.GetLastAccessTimeUtc
- uid: System.IO.Directory.GetLastWriteTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTime
  nameWithType: Directory.GetLastWriteTime
- uid: System.IO.Directory.GetLastWriteTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTimeUtc
  nameWithType: Directory.GetLastWriteTimeUtc
- uid: System.IO.Directory.GetLogicalDrives*
  parent: System.IO.Directory
  isExternal: false
  name: GetLogicalDrives
  nameWithType: Directory.GetLogicalDrives
- uid: System.IO.Directory.GetParent*
  parent: System.IO.Directory
  isExternal: false
  name: GetParent
  nameWithType: Directory.GetParent
- uid: System.IO.Directory.Move*
  parent: System.IO.Directory
  isExternal: false
  name: Move
  nameWithType: Directory.Move
- uid: System.IO.Directory.SetAccessControl*
  parent: System.IO.Directory
  isExternal: false
  name: SetAccessControl
  nameWithType: Directory.SetAccessControl
- uid: System.IO.Directory.SetCreationTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTime
  nameWithType: Directory.SetCreationTime
- uid: System.IO.Directory.SetCreationTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTimeUtc
  nameWithType: Directory.SetCreationTimeUtc
- uid: System.IO.Directory.SetCurrentDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: SetCurrentDirectory
  nameWithType: Directory.SetCurrentDirectory
- uid: System.IO.Directory.SetLastAccessTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTime
  nameWithType: Directory.SetLastAccessTime
- uid: System.IO.Directory.SetLastAccessTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTimeUtc
  nameWithType: Directory.SetLastAccessTimeUtc
- uid: System.IO.Directory.SetLastWriteTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTime
  nameWithType: Directory.SetLastWriteTime
- uid: System.IO.Directory.SetLastWriteTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTimeUtc
  nameWithType: Directory.SetLastWriteTimeUtc
