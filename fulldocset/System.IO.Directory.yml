### YamlMime:ManagedReference
items:
- uid: System.IO.Directory
  id: Directory
  children:
  - System.IO.Directory.CreateDirectory(System.String)
  - System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.Directory.Delete(System.String)
  - System.IO.Directory.Delete(System.String,System.Boolean)
  - System.IO.Directory.EnumerateDirectories(System.String)
  - System.IO.Directory.EnumerateDirectories(System.String,System.String)
  - System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.EnumerateFiles(System.String)
  - System.IO.Directory.EnumerateFiles(System.String,System.String)
  - System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.Exists(System.String)
  - System.IO.Directory.GetAccessControl(System.String)
  - System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  - System.IO.Directory.GetCreationTime(System.String)
  - System.IO.Directory.GetCreationTimeUtc(System.String)
  - System.IO.Directory.GetCurrentDirectory
  - System.IO.Directory.GetDirectories(System.String)
  - System.IO.Directory.GetDirectories(System.String,System.String)
  - System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetDirectoryRoot(System.String)
  - System.IO.Directory.GetFiles(System.String)
  - System.IO.Directory.GetFiles(System.String,System.String)
  - System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetFileSystemEntries(System.String)
  - System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  - System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetLastAccessTime(System.String)
  - System.IO.Directory.GetLastAccessTimeUtc(System.String)
  - System.IO.Directory.GetLastWriteTime(System.String)
  - System.IO.Directory.GetLastWriteTimeUtc(System.String)
  - System.IO.Directory.GetLogicalDrives
  - System.IO.Directory.GetParent(System.String)
  - System.IO.Directory.Move(System.String,System.String)
  - System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  - System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  - System.IO.Directory.SetCurrentDirectory(System.String)
  - System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  - System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  - System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  - System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  langs:
  - csharp
  name: Directory
  nameWithType: Directory
  fullName: System.IO.Directory
  type: Class
  summary: "Expõe métodos estáticos para criar, mover e enumerar através de diretórios e subdiretórios. Esta classe não pode ser herdada.       Para procurar o código de origem do .NET Framework para este tipo, consulte o [referência origem](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the Directory class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \n  \n-   To create a directory, use one of the <xref:System.IO.Directory.CreateDirectory%2A> methods.  \n  \n-   To delete a directory, use one of the <xref:System.IO.Directory.Delete%2A> methods.  \n  \n-   To get or set the current directory for an app, use the <xref:System.IO.Directory.GetCurrentDirectory%2A> or <xref:System.IO.Directory.SetCurrentDirectory%2A> method.  \n  \n-   To manipulate <xref:System.DateTime> information related to the creation, access, and writing of a directory, use methods such as <xref:System.IO.Directory.SetLastAccessTime%2A> and <xref:System.IO.Directory.SetCreationTime%2A>.  \n  \n The static methods of the Directory class perform security checks on all methods. If you are going to reuse an object several times, consider using the corresponding instance method of <xref:System.IO.DirectoryInfo> instead, because the security check will not always be necessary.  \n  \n If you are performing only one directory-related action, it might be more efficient to use a static Directory method rather than a corresponding <xref:System.IO.DirectoryInfo> instance method. Most Directory methods require the path to the directory that you are manipulating.  \n  \n> [!NOTE]\n>  In members that accept a string `path` parameter, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space (\" c:\\temp\"), the path string isn't trimmed, so the path is considered malformed and an exception is raised. In addition, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception. Ensure that your paths are well-formed when using methods that accept a path string. For more information see <xref:System.IO.Path>.  \n  \n In members that accept a path, the path can refer to a file or a directory. You can use a full path, a relative path, or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n By default, full read/write access to new directories is granted to all users. However, the app must have the correct security to access existing directories.  \n  \n To demand permissions for a directory and all its subdirectories, end the path string with the directory separator character. (For example, \"C:\\Temp\\\\\" grants access to C:\\Temp\\ and all its subdirectories.) To demand permissions only for a specific directory, end the path string with a period. (For example, \"C:\\Temp\\\\.\" grants access only to C:\\Temp\\\\, not to its subdirectories.)  \n  \n In members that accept a `searchPattern` parameter, the search string can be any combination of literal characters and two wildcard characters; * and ?. This parameter does not recognize regular expressions. For more information, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%2CSystem.String%29> method or any other method that uses the `searchPattern` parameter.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).  \n  \n Directory and <xref:System.IO.DirectoryInfo> are not supported for use in [!INCLUDE[win8_appstore_long](~/add/includes/win8-appstore-long-md.md)] apps. For information about how to access files and folders in [!INCLUDE[win8_appstore_long](~/add/includes/win8-appstore-long-md.md)] apps, see [Accessing data and files (Windows Store apps)](http://msdn.microsoft.com/library/windows/apps/hh758319.aspx)."
  example:
  - "The following example shows how to retrieve all the text files from a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#10](~/add/codesnippet/csharp/t-system.io.directory_1.cs)]\n [!code-vb[System.IO.Directory#10](~/add/codesnippet/visualbasic/t-system.io.directory_1.vb)]  \n  \n The following example demonstrates how to use the <xref:System.IO.Directory.EnumerateFiles%2A> method to retrieve a collection of text files from a directory, and then use that collection in a query to find all the lines that contain \"Example\".  \n  \n [!code-cs[System.IO.Directory#11](~/add/codesnippet/csharp/t-system.io.directory_2.cs)]\n [!code-vb[System.IO.Directory#11](~/add/codesnippet/visualbasic/t-system.io.directory_2.vb)]  \n  \n The following example demonstrates how to move a directory and all its files to a new directory. The original directory no longer exists after it has been moved.  \n  \n [!code-vb[System.IO.Directory#14](~/add/codesnippet/visualbasic/t-system.io.directory_3.vb)]\n [!code-cs[System.IO.Directory#14](~/add/codesnippet/csharp/t-system.io.directory_3.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Directory
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Directory.CreateDirectory(System.String)
  id: CreateDirectory(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: CreateDirectory(String)
  nameWithType: Directory.CreateDirectory(String)
  fullName: System.IO.Directory.CreateDirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Cria todos os diretórios e subdiretórios no caminho especificado, a menos que estas já existem."
  remarks: "Any and all directories specified in `path` are created, unless they already exist or unless some part of `path` is invalid. If the directory already exists, this method does not create a new directory, but it returns a <xref:System.IO.DirectoryInfo> object for the existing directory.  \n  \n The `path` parameter specifies a directory path, not a file path.  \n  \n Trailing spaces are removed from the end of the `path` parameter before creating the directory.  \n  \n You can create a directory on a remote computer, on a share that you have write access to. UNC paths are supported; for example, you can specify the following for `path`: `\\\\2009\\Archives\\December` in Visual Basic, and `\\\\\\\\2009\\\\Archives\\\\December` in C#.  \n  \n Creating a directory with only the colon character (:) is not supported, and will cause a `NotSupportedException` to be thrown."
  example:
  - "The following example creates and deletes the specified directory.  \n  \n [!code-cs[Dir_CreateDir#1](~/add/codesnippet/csharp/m-system.io.directory.cr_1.cs)]\n [!code-vb[Dir_CreateDir#1](~/add/codesnippet/visualbasic/m-system.io.directory.cr_1.vb)]\n [!code-cpp[Dir_CreateDir#1](~/add/codesnippet/cpp/m-system.io.directory.cr_1.cpp)]  \n  \n To create the directory C:\\Users\\User1\\Public\\Html when the current directory is C:\\Users\\User1, use any of the following calls to ensure that the backslash is interpreted properly.  \n  \n In Visual Basic:  \n  \n```  \nDirectory.CreateDirectory(\"Public\\Html\")   \n    Directory.CreateDirectory(\"\\Users\\User1\\Public\\Html\")   \n    Directory.CreateDirectory(\"c:\\Users\\User1\\Public\\Html\")  \n```  \n  \n In C#:  \n  \n```  \nDirectory.CreateDirectory(\"Public\\\\Html\");  \n    Directory.CreateDirectory(\"\\\\Users\\\\User1\\\\Public\\\\Html\");  \n    Directory.CreateDirectory(\"c:\\\\Users\\\\User1\\\\Public\\\\Html\");  \n```  \n  \n In C++:  \n  \n```  \nDirectory::CreateDirectory(\"Public\\\\Html\");  \n    Directory::CreateDirectory(\"\\\\Users\\\\User1\\\\Public\\\\Html\");  \n    Directory::CreateDirectory(\"c:\\\\Users\\\\User1\\\\Public\\\\Html\");  \n```"
  syntax:
    content: public static System.IO.DirectoryInfo CreateDirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "O diretório a criar."
    return:
      type: System.IO.DirectoryInfo
      description: "Um objeto que representa o diretório no caminho especificado. Este objeto é devolvido independentemente se já existe um diretório no caminho especificado."
  overload: System.IO.Directory.CreateDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "O diretório especificado pelo <code> path </code> é um ficheiro.       - ou - o nome de rede não é conhecido."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método.       - ou - <code>path</code> é o prefixo ou contém apenas um caráter de dois pontos (:)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado é inválido (por exemplo, é numa unidade não mapeada)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>contém um caráter de dois pontos (:) que não faz parte de uma etiqueta de unidade (&quot;c:\\&quot;)."
  platform:
  - net462
- uid: System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  id: CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  langs:
  - csharp
  name: CreateDirectory(String,DirectorySecurity)
  nameWithType: Directory.CreateDirectory(String,DirectorySecurity)
  fullName: System.IO.Directory.CreateDirectory(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Cria todos os diretórios no caminho especificado, a menos que a já existir, aplicar a segurança do Windows especificada."
  remarks: "Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.  \n  \n Any and all directories specified in the `path` parameter are created, unless they already exist or unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the directory already exists, this method does not create a new directory, but it returns a <xref:System.IO.DirectoryInfo> object for the existing directory.  \n  \n Trailing spaces are removed from the end of the `path` parameter before creating the directory.  \n  \n You can create a directory on a remote computer, on a share that you have write access to. UNC paths are supported; for example, you can specify the following for `path`: `\\\\2009\\Archives\\December` in Visual Basic, and `\\\\\\\\2009\\\\Archives\\\\December` in C#.  \n  \n Creating a directory with only the colon character (:) is not supported and causes a `NotSupportedException` to be thrown."
  example:
  - "The following example creates a new directory with access rules for two user accounts.  \n  \n [!code-cs[System.IO.Directory#15](~/add/codesnippet/csharp/52b6d5ea-0f1d-4395-a346-_1.cs)]\n [!code-vb[System.IO.Directory#15](~/add/codesnippet/visualbasic/52b6d5ea-0f1d-4395-a346-_1.vb)]"
  syntax:
    content: public static System.IO.DirectoryInfo CreateDirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "O diretório a criar."
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "O controlo de acesso a aplicar ao diretório."
    return:
      type: System.IO.DirectoryInfo
      description: "Um objeto que representa o diretório no caminho especificado. Este objeto é devolvido independentemente se já existe um diretório no caminho especificado."
  overload: System.IO.Directory.CreateDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "O diretório especificado pelo <code> path </code> é um ficheiro.       - ou - o nome de rede não é conhecido."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método.       - ou - <code>path</code> é o prefixo ou contém apenas um caráter de dois pontos (:)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado é inválido (por exemplo, é numa unidade não mapeada)."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>contém um caráter de dois pontos (:) que não faz parte de uma etiqueta de unidade (&quot;c:\\&quot;)."
  platform:
  - net462
- uid: System.IO.Directory.Delete(System.String)
  id: Delete(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Delete(String)
  nameWithType: Directory.Delete(String)
  fullName: System.IO.Directory.Delete(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Elimina um diretório vazio num caminho especificado."
  remarks: "Este método comporta-se de forma idêntica ao <xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29>com `false` especificado para o segundo parâmetro.</xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29>       O `path` parâmetro pode especificar informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       Espaços à direita são removidos do fim do `path` parâmetro antes de eliminar o diretório.       Este método emite um <xref:System.IO.IOException>se o diretório especificado no `path` parâmetro contém ficheiros ou subdiretórios.</xref:System.IO.IOException>       O `path` parâmetro não é sensível.       Em alguns casos, se tiver o diretório especificado, abra o Explorador de ficheiros, o método Delete não poderá eliminá-la."
  example:
  - "The following example shows how to create a new directory and subdirectory, and then delete only the subdirectory.  \n  \n [!code-vb[System.IO.Directory.Delete#1](~/add/codesnippet/visualbasic/m-system.io.directory.de_0_1.vb)]\n [!code-cs[System.IO.Directory.Delete#1](~/add/codesnippet/csharp/m-system.io.directory.de_0_1.cs)]"
  syntax:
    content: public static void Delete (string path);
    parameters:
    - id: path
      type: System.String
      description: "O nome do diretório vazio para remover. Este diretório tem de ser gravável e vazio."
  overload: System.IO.Directory.Delete*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Um ficheiro com o mesmo nome e localização especificada pela <code> path </code> existe.       - ou - o diretório é o atual diretório de trabalho da aplicação.       - ou - o diretório especificado pelo <code> path </code> não está vazio.       - ou - o diretório é só de leitura ou contém um ficheiro só de leitura.       - ou - o diretório está a ser utilizado por outro processo."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>não existe ou não foi possível encontrar.       - ou - o caminho especificado é inválido (por exemplo, é numa unidade não mapeada)."
  platform:
  - net462
- uid: System.IO.Directory.Delete(System.String,System.Boolean)
  id: Delete(System.String,System.Boolean)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Delete(String,Boolean)
  nameWithType: Directory.Delete(String,Boolean)
  fullName: System.IO.Directory.Delete(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Elimina o diretório especificado e, se for indicado, quaisquer subdiretórios e ficheiros no diretório."
  remarks: "O `path` parâmetro pode especificar informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       Espaços à direita são removidos do fim do `path` parâmetro antes de eliminar o diretório.       O `path` parâmetro não é sensível.       Se o `recursive` parâmetro é `true`, o utilizador tem de ter permissão de escrita para o diretório atual, bem como para todos os seus subdiretórios.       O comportamento deste método é ligeiramente diferente ao eliminar um diretório que contém um ponto de reanálise, como uma ligação simbólica ou um ponto de montagem. Se o ponto de reanálise é um diretório, como um ponto de montagem, é desmontado e o ponto de montagem é eliminado. Este método não recurse através do ponto de reanálise. Se o ponto de reanálise é uma ligação simbólica para um ficheiro, o ponto de reanálise é eliminado e não o destino da ligação simbólica.       Em alguns casos, se tiver o diretório especificado, abra o Explorador de ficheiros, o método Delete não poderá eliminá-la."
  example:
  - "The following example shows how to create a new directory, subdirectory, and file in the subdirectory, and then recursively delete all the new items.  \n  \n [!code-cs[System.IO.Directory.Delete#2](~/add/codesnippet/csharp/m-system.io.directory.de_1_1.cs)]\n [!code-vb[System.IO.Directory.Delete#2](~/add/codesnippet/visualbasic/m-system.io.directory.de_1_1.vb)]"
  syntax:
    content: public static void Delete (string path, bool recursive);
    parameters:
    - id: path
      type: System.String
      description: "O nome do diretório a remover."
    - id: recursive
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>a remover diretórios, subdiretórios e ficheiros no `path`; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Directory.Delete*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Um ficheiro com o mesmo nome e localização especificada pela <code> path </code> existe.       - ou - o diretório especificado pelo <code> path </code> é só de leitura ou <code> recursive </code> é <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> e <code> path </code> não é um diretório vazio.       - ou - o diretório é o atual diretório de trabalho da aplicação.       - ou - o diretório contém um ficheiro só de leitura.       - ou - o diretório está a ser utilizado por outro processo."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>não existe ou não foi possível encontrar.       - ou - o caminho especificado é inválido (por exemplo, é numa unidade não mapeada)."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String)
  id: EnumerateDirectories(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String)
  nameWithType: Directory.EnumerateDirectories(String)
  fullName: System.IO.Directory.EnumerateDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma coleção enumeráveis de nomes de diretórios num caminho especificado."
  remarks: "Pode especificar informações de caminho relativo ou absoluto o `path` parâmetro. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual, que pode determinar, utilizando o <xref:System.IO.Directory.GetCurrentDirectory%2A>método.</xref:System.IO.Directory.GetCurrentDirectory%2A> Os nomes de diretório devolvido são adicionado o prefixo com o valor fornecido no `path` parâmetro. Por exemplo, se fornecer um caminho relativo a `path` parâmetro, os nomes de diretório devolvido irão conter um caminho relativo.       O <xref:System.IO.Directory.EnumerateDirectories%2A>e <xref:System.IO.Directory.GetDirectories%2A>métodos diferem da seguinte forma: ao utilizar <xref:System.IO.Directory.EnumerateDirectories%2A>, pode começar a enumerar a coleção de nomes antes de toda a coleção é devolvida; se utilizar <xref:System.IO.Directory.GetDirectories%2A>, tem de aguardar a matriz de nomes a ser devolvido antes de poder aceder a matriz de toda.</xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> </xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> Por conseguinte, quando estiver a trabalhar com muitos ficheiros e diretórios, <xref:System.IO.Directory.EnumerateDirectories%2A>pode ser mais eficiente.</xref:System.IO.Directory.EnumerateDirectories%2A>       A coleção devolvida não é colocadas em cache; cada chamada para o <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>na coleção de começarão a ser uma enumeração de novo.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>"
  example:
  - "The following example enumerates the top-level directories in a specified path.  \n  \n [!code-vb[System.IO.EnumDirs1#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_2_1.vb)]\n [!code-cs[System.IO.EnumDirs1#1](~/add/codesnippet/csharp/m-system.io.directory.en_2_1.cs)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Uma coleção enumeráveis dos nomes completos (incluindo caminhos) para os diretórios no diretório especificado pelo <code> path </code>."
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>é inválido, por exemplo, o que faz referência a uma unidade não mapeada."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o ficheiro nome ou combinado exceder o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String)
  id: EnumerateDirectories(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String,String)
  nameWithType: Directory.EnumerateDirectories(String,String)
  fullName: System.IO.Directory.EnumerateDirectories(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma coleção enumeráveis de nomes de diretório que correspondam a um padrão de pesquisa num caminho especificado."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative or absolute path information in the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the `path` parameter. For example, if you provide a relative path in the `path` parameter, the returned directory names will contain a relative path.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example enumerates the top-level directories in a specified path that match a specified search pattern.  \n  \n [!code-cs[System.IO.EnumDirs2#1](~/add/codesnippet/csharp/m-system.io.directory.en_0_1.cs)]\n [!code-vb[System.IO.EnumDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_0_1.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência de nomes de diretórios no `path`.  Este parâmetro pode conter uma combinação de caminho literal válido e um caráter universal (* e?) carateres (consulte observações), mas não suporta expressões regulares."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Uma coleção enumeráveis dos nomes completos (incluindo caminhos) para os diretórios no diretório especificado pelo <code> path </code> e que correspondam ao padrão de pesquisa especificada."
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>é inválido, por exemplo, o que faz referência a uma unidade não mapeada."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o ficheiro nome ou combinado exceder o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  id: EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String,String,SearchOption)
  nameWithType: Directory.EnumerateDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateDirectories(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma coleção enumeráveis de nomes de diretório que correspondam a um padrão de pesquisa num caminho especificado e, opcionalmente, procura subdiretórios."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Exactly one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative or absolute path information in the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the `path` parameter. For example, if you provide a relative path in the `path` parameter, the returned directory names will contain a relative path.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example enumerates directories in a specified path that match a specified search pattern. It uses the `searchOption` parameter to specify that all subdirectories should be included in the search.  \n  \n [!code-cs[System.IO.EnumDirs3#1](~/add/codesnippet/csharp/d54eb053-19f8-45e5-b70d-_1.cs)]\n [!code-vb[System.IO.EnumDirs3#1](~/add/codesnippet/visualbasic/d54eb053-19f8-45e5-b70d-_1.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência de nomes de diretórios no `path`.  Este parâmetro pode conter uma combinação de caminho literal válido e um caráter universal (* e?) carateres (consulte observações), mas não suporta expressões regulares."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Um dos valores da enumeração que especifica se a operação de pesquisa deve incluir apenas o diretório atual ou deve incluir todos os seus subdiretórios.       O valor predefinido é <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Uma coleção enumeráveis dos nomes completos (incluindo caminhos) para os diretórios no diretório especificado pelo <code> path </code> e que correspondam a opção e padrão de pesquisa especificada."
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the  <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Não é um <xref href=&quot;System.IO.SearchOption&quot;> </xref> valor."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>é inválido, por exemplo, o que faz referência a uma unidade não mapeada."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o ficheiro nome ou combinado exceder o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String)
  id: EnumerateFiles(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String)
  nameWithType: Directory.EnumerateFiles(String)
  fullName: System.IO.Directory.EnumerateFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma coleção enumeráveis de nomes de ficheiro num caminho especificado."
  remarks: "Pode especificar o caminho relativo de informações com o `path` parâmetro. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual, que pode determinar, utilizando o <xref:System.IO.Directory.GetCurrentDirectory%2A>método.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O <xref:System.IO.Directory.EnumerateFiles%2A>e <xref:System.IO.Directory.GetFiles%2A>métodos diferem da seguinte forma: ao utilizar <xref:System.IO.Directory.EnumerateFiles%2A>, pode começar a enumerar a coleção de nomes antes de toda a coleção é devolvida; se utilizar <xref:System.IO.Directory.GetFiles%2A>, tem de aguardar a matriz de nomes a ser devolvido antes de poder aceder a matriz de toda.</xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> </xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> Por conseguinte, quando estiver a trabalhar com muitos ficheiros e diretórios, <xref:System.IO.Directory.EnumerateFiles%2A>pode ser mais eficiente.</xref:System.IO.Directory.EnumerateFiles%2A>       A coleção devolvida não é colocadas em cache; cada chamada para o <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>na coleção de começarão a ser uma enumeração de novo.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>"
  example:
  - "The following example shows how to retrieve all the files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#12](~/add/codesnippet/csharp/m-system.io.directory.en_3_1.cs)]\n [!code-vb[System.IO.Directory#12](~/add/codesnippet/visualbasic/m-system.io.directory.en_3_1.vb)]  \n  \n The following example enumerates the files in the specified directory, reads each line of the file, and displays the line if it contains the string \"Europe\".  \n  \n [!code-cs[System.IO.Directory.EnumFiles#1](~/add/codesnippet/csharp/m-system.io.directory.en_3_2.cs)]\n [!code-vb[System.IO.Directory.EnumFiles#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_3_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Uma coleção enumeráveis dos nomes completos (incluindo caminhos) para os ficheiros no diretório especificado pelo <code> path </code>."
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>é inválido, por exemplo, o que faz referência a uma unidade não mapeada."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o ficheiro nome ou combinado exceder o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String)
  id: EnumerateFiles(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String,String)
  nameWithType: Directory.EnumerateFiles(String,String)
  fullName: System.IO.Directory.EnumerateFiles(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma coleção enumeráveis de nomes de ficheiro que correspondem a um padrão de pesquisa num caminho especificado."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example shows how to retrieve all the text files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#10](~/add/codesnippet/csharp/m-system.io.directory.en_1_1.cs)]\n [!code-vb[System.IO.Directory#10](~/add/codesnippet/visualbasic/m-system.io.directory.en_1_1.vb)]  \n  \n The following example enumerates the files in the specified directory that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Europe\".  \n  \n [!code-cs[System.IO.Directory.EnumFiles2#1](~/add/codesnippet/csharp/m-system.io.directory.en_1_2.cs)]\n [!code-vb[System.IO.Directory.EnumFiles2#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_1_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência de nomes de ficheiros na `path`.  Este parâmetro pode conter uma combinação de caminho literal válido e um caráter universal (* e?) carateres (consulte observações), mas não suporta expressões regulares."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Uma coleção enumeráveis dos nomes completos (incluindo caminhos) para os ficheiros no diretório especificado pelo <code> path </code> e que correspondam ao padrão de pesquisa especificada."
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>é inválido, por exemplo, o que faz referência a uma unidade não mapeada."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o ficheiro nome ou combinado exceder o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  id: EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String,String,SearchOption)
  nameWithType: Directory.EnumerateFiles(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFiles(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma coleção enumeráveis de nomes de ficheiro que correspondem a um padrão de pesquisa num caminho especificado e, opcionalmente, procura subdiretórios."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example shows how to retrieve all the text files in a directory and its subdirectories, and move them to a new directory. After the files are moved, they no longer exist in the original directories.  \n  \n [!code-cs[System.IO.Directory#13](~/add/codesnippet/csharp/5542867a-6e9d-46bd-b2ed-_1.cs)]\n [!code-vb[System.IO.Directory#13](~/add/codesnippet/visualbasic/5542867a-6e9d-46bd-b2ed-_1.vb)]  \n  \n The following example recursively enumerates all files that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Microsoft\".  \n  \n [!code-cs[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/csharp/5542867a-6e9d-46bd-b2ed-_2.cs)]\n [!code-vb[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/visualbasic/5542867a-6e9d-46bd-b2ed-_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência de nomes de ficheiros na `path`.  Este parâmetro pode conter uma combinação de caminho literal válido e um caráter universal (* e?) carateres (consulte observações), mas não suporta expressões regulares."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Um dos valores da enumeração que especifica se a operação de pesquisa deve incluir apenas o diretório atual ou deve incluir todos os seus subdiretórios.       O valor predefinido é <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Uma coleção enumeráveis dos nomes completos (incluindo caminhos) para os ficheiros no diretório especificado pelo <code> path </code> e que correspondam a opção e padrão de pesquisa especificada."
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Não é um <xref href=&quot;System.IO.SearchOption&quot;> </xref> valor."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>é inválido, por exemplo, o que faz referência a uma unidade não mapeada."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o ficheiro nome ou combinado exceder o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String)
  id: EnumerateFileSystemEntries(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String)
  nameWithType: Directory.EnumerateFileSystemEntries(String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma coleção enumeráveis de nomes de diretório e nomes de ficheiro num caminho especificado."
  remarks: "Pode especificar o caminho relativo de informações com o `path` parâmetro. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual, que pode determinar, utilizando o <xref:System.IO.Directory.GetCurrentDirectory%2A>método.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>e <xref:System.IO.Directory.GetFileSystemEntries%2A>métodos diferem da seguinte forma: ao utilizar <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, pode começar a enumerar a coleção de entradas antes de toda a coleção é devolvida; se utilizar <xref:System.IO.Directory.GetFileSystemEntries%2A>, tem de aguardar a matriz de entradas a ser devolvido antes de poder aceder a matriz de toda.</xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> </xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> Por conseguinte, quando estiver a trabalhar com muitos ficheiros e diretórios, <xref:System.IO.Directory.EnumerateFiles%2A>pode ser mais eficiente.</xref:System.IO.Directory.EnumerateFiles%2A>       A coleção devolvida não é colocadas em cache; cada chamada para o <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>na coleção de começarão a ser uma enumeração de novo.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Uma coleção enumeráveis de entradas de sistema de ficheiros no diretório especificado pelo <code> path </code>."
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>é inválido, por exemplo, o que faz referência a uma unidade não mapeada."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o ficheiro nome ou combinado exceder o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  id: EnumerateFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String,String)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma coleção enumeráveis de nomes de ficheiros e nomes de diretório que correspondam a um padrão de pesquisa num caminho especificado."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`..  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência de nomes de entradas de sistema de ficheiros no `path`.  Este parâmetro pode conter uma combinação de caminho literal válido e um caráter universal (* e?) carateres (consulte observações), mas não suporta expressões regulares."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Uma coleção enumeráveis de entradas de sistema de ficheiros no diretório especificado pelo <code> path </code> e que correspondam ao padrão de pesquisa especificada."
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>é inválido, por exemplo, o que faz referência a uma unidade não mapeada."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o ficheiro nome ou combinado exceder o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  id: EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma coleção enumeráveis de nomes de ficheiros e nomes de diretório que correspondam a um padrão de pesquisa num caminho especificado e, opcionalmente, procura subdiretórios."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência de entradas de sistema de ficheiros no `path`.  Este parâmetro pode conter uma combinação de caminho literal válido e um caráter universal (* e?) carateres (consulte observações), mas não suporta expressões regulares."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Um dos valores da enumeração que especifica se a operação de pesquisa deve incluir apenas o diretório atual ou deve incluir todos os seus subdiretórios.       O valor predefinido é <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Uma coleção enumeráveis de entradas de sistema de ficheiros no diretório especificado pelo <code> path </code> e que correspondam a opção e padrão de pesquisa especificada."
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Não é um <xref href=&quot;System.IO.SearchOption&quot;> </xref> valor."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>é inválido, por exemplo, o que faz referência a uma unidade não mapeada."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o ficheiro nome ou combinado exceder o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.Exists(System.String)
  id: Exists(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Exists(String)
  nameWithType: Directory.Exists(String)
  fullName: System.IO.Directory.Exists(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Determina se o caminho especificado refere-se a um diretório existente no disco."
  remarks: "O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual.       Espaços à direita são removidos do fim do `path` parâmetro antes de a verificar se o diretório existe.       O `path` parâmetro não é sensível.       Se não tiver a uma permissão mínima de só de leitura ao diretório, o método Exists devolverá `false`.       O método Exists devolve `false` se qualquer erro ocorrer ao tentar determinar se o ficheiro especificado existe. Isto pode ocorrer em situações em que as exceções, tais como a passagem de um nome de ficheiro com carateres inválidos ou demasiados carateres, um disco falhar ou em falta, ou se o autor da chamada não tem permissão para ler o ficheiro."
  example:
  - "The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  \n  \n [!code-cpp[Recursive file finder#2](~/add/codesnippet/cpp/m-system.io.directory.ex_1.cpp)]\n [!code-cs[Recursive file finder#2](~/add/codesnippet/csharp/m-system.io.directory.ex_1.cs)]\n [!code-vb[Recursive file finder#2](~/add/codesnippet/visualbasic/m-system.io.directory.ex_1.vb)]"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho para testar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> path </code> refere-se a um diretório existente; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se o diretório não existe ou se ocorrer um erro ao tentar determinar se o diretório especificado existe."
  overload: System.IO.Directory.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Directory.GetAccessControl(System.String)
  id: GetAccessControl(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetAccessControl(String)
  nameWithType: Directory.GetAccessControl(String)
  fullName: System.IO.Directory.GetAccessControl(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Obtém um <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objecto que encapsula as entradas de lista (ACL) de controlo de acesso para um diretório especificado."
  remarks: "Utilize o método GetAccessControl para obter as entradas de lista (ACL) de controlo de acesso para um diretório.       Uma ACL descreve indivíduos e/ou grupos de utilizadores que tenham ou não tem, direitos para as ações específicas do ficheiro ou diretório. Para obter mais informações, consulte [como: Adicionar ou remover entradas de lista de controlo de acesso](~/add/includes/ajax-current-ext-md.md).       Em ambientes de NTFS, <xref:System.Security.AccessControl.FileSystemRights>e <xref:System.Security.AccessControl.FileSystemRights>concedidas ao utilizador se o utilizador tiver <xref:System.Security.AccessControl.FileSystemRights>direitos na pasta principal.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> Para negar <xref:System.Security.AccessControl.FileSystemRights>e <xref:System.Security.AccessControl.FileSystemRights>, negar <xref:System.Security.AccessControl.FileSystemRights>no diretório principal.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights>"
  example:
  - "The following example uses the GetAccessControl and the <xref:System.IO.Directory.SetAccessControl%2A> methods to add an access control list (ACL) entry and then remove an ACL entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.directory.ge_7_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.directory.ge_7_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_7_1.vb)]"
  syntax:
    content: public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho para um diretório que contém um <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objeto que descreve informações de lista (ACL) de controlo de acesso do ficheiro."
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "Regras de um objecto que encapsula o controlo de acesso para o ficheiro descrito através de <code> path </code> parâmetro."
  overload: System.IO.Directory.GetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ocorreu um erro de e/s ao abrir o diretório."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operativo atual não é o Windows 2000 ou posterior."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Ocorreu um erro de ao nível do sistema, tais como não foi possível localizar o diretório. A exceção específica pode ser uma subclasse de <xref href=&quot;System.SystemException&quot;> </xref>."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O <code> path </code> parâmetro especificado um diretório é só de leitura.       - ou - esta operação não é suportada na plataforma atual.       - ou - o chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  id: GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: Directory.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.Directory.GetAccessControl(String,AccessControlSections)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Obtém um <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objecto que encapsula o tipo especificado de entradas de lista (ACL) de controlo de acesso para um diretório especificado."
  remarks: "Utilize o método GetAccessControl para obter as entradas de lista (ACL) de controlo de acesso para um diretório.       Uma ACL descreve indivíduos e/ou grupos de utilizadores que tenham ou não tem, direitos para as ações específicas do ficheiro ou diretório. Para obter mais informações, consulte [como: Adicionar ou remover entradas de lista de controlo de acesso](~/add/includes/ajax-current-ext-md.md).       Em ambientes de NTFS, <xref:System.Security.AccessControl.FileSystemRights>e <xref:System.Security.AccessControl.FileSystemRights>concedidas ao utilizador se o utilizador tiver <xref:System.Security.AccessControl.FileSystemRights>direitos na pasta principal.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> Para negar <xref:System.Security.AccessControl.FileSystemRights>e <xref:System.Security.AccessControl.FileSystemRights>, negar <xref:System.Security.AccessControl.FileSystemRights>no diretório principal.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights>"
  syntax:
    content: public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: path
      type: System.String
      description: "O caminho para um diretório que contém um <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objeto que descreve informações de lista (ACL) de controlo de acesso do ficheiro."
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "Um do <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> valores que especifica o tipo de acesso controlam informações de lista (ACL) para receber."
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "Regras de um objecto que encapsula o controlo de acesso para o ficheiro descrito através de <code> path </code> parâmetro."
  overload: System.IO.Directory.GetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ocorreu um erro de e/s ao abrir o diretório."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operativo atual não é o Windows 2000 ou posterior."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Ocorreu um erro de ao nível do sistema, tais como não foi possível localizar o diretório. A exceção específica pode ser uma subclasse de <xref href=&quot;System.SystemException&quot;> </xref>."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O <code> path </code> parâmetro especificado um diretório é só de leitura.       - ou - esta operação não é suportada na plataforma atual.       - ou - o chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.GetCreationTime(System.String)
  id: GetCreationTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCreationTime(String)
  nameWithType: Directory.GetCreationTime(String)
  fullName: System.IO.Directory.GetCreationTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Obtém a data de criação e a hora de um diretório."
  remarks: "> [!NOTE]> Este método pode devolver um valor de incorreta, porque utiliza as funções nativas cujos valores não podem ser atualizados continuamente pelo sistema operativo.       Este método é equivalente ao <xref:System.IO.File.GetCreationTime%2A?displayProperty=fullName>.</xref:System.IO.File.GetCreationTime%2A?displayProperty=fullName>       Se o diretório descrito a `path` parâmetro não existe, este método devolve 12:00, 1 de Janeiro de 1601 a.d. (E.C.) Hora Universal Coordenada (UTC), tendo em conta a hora local.       O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example gets the creation time of the specified directory.  \n  \n [!code-cpp[Dir_GetCreation#1](~/add/codesnippet/cpp/m-system.io.directory.ge_1_1.cpp)]\n [!code-cs[Dir_GetCreation#1](~/add/codesnippet/csharp/m-system.io.directory.ge_1_1.cs)]\n [!code-vb[Dir_GetCreation#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_1_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho do diretório."
    return:
      type: System.DateTime
      description: "Uma estrutura que está definida para a data de criação e a hora para o diretório especificado. Este valor é expresso em hora local."
  overload: System.IO.Directory.GetCreationTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  platform:
  - net462
- uid: System.IO.Directory.GetCreationTimeUtc(System.String)
  id: GetCreationTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCreationTimeUtc(String)
  nameWithType: Directory.GetCreationTimeUtc(String)
  fullName: System.IO.Directory.GetCreationTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Obtém a data de criação e a hora, no formato de hora Universal Coordenada (UTC), de um diretório."
  remarks: "> [!NOTE]> Este método pode devolver um valor de incorreta, porque utiliza as funções nativas cujos valores não podem ser atualizados continuamente pelo sistema operativo.       Se o diretório descrito a `path` parâmetro não existe, este método devolve 12:00, 1 de Janeiro de 1601 a.d. (E.C.) Hora de Universal Coordenada (UTC).       Utilize este método para obter a hora de criação de um diretório com base na hora Universal Coordenada (UTC)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_11_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_11_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_11_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho do diretório."
    return:
      type: System.DateTime
      description: "Uma estrutura que está definida para a data de criação e a hora para o diretório especificado. Este valor é expresso na hora UTC."
  overload: System.IO.Directory.GetCreationTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  platform:
  - net462
- uid: System.IO.Directory.GetCurrentDirectory
  id: GetCurrentDirectory
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCurrentDirectory()
  nameWithType: Directory.GetCurrentDirectory()
  fullName: System.IO.Directory.GetCurrentDirectory()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Obtém o atual diretório de trabalho da aplicação."
  remarks: "O diretório atual é diferente do diretório original, que é a partir do qual o processo foi iniciado.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the `GetCurrentDirectory` method.  \n  \n [!code-cs[Dir_GetCurDir#1](~/add/codesnippet/csharp/m-system.io.directory.ge_16_1.cs)]\n [!code-vb[Dir_GetCurDir#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_16_1.vb)]\n [!code-cpp[Dir_GetCurDir#1](~/add/codesnippet/cpp/m-system.io.directory.ge_16_1.cpp)]"
  syntax:
    content: public static string GetCurrentDirectory ();
    parameters: []
    return:
      type: System.String
      description: "Uma cadeia que contém o caminho do diretório de trabalho atual e não termina com uma barra invertida (\\\\)."
  overload: System.IO.Directory.GetCurrentDirectory*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O sistema operativo é o Windows CE, que não tem uma funcionalidade de diretório atual.       Este método está disponível no .NET Compact Framework, mas não é atualmente suportado."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String)
  nameWithType: Directory.GetDirectories(String)
  fullName: System.IO.Directory.GetDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve os nomes dos subdiretórios (incluindo os respetivos caminhos) no diretório especificado."
  remarks: "Este método é idêntico ao <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29>com o asterisco (*) especificado como o padrão de pesquisa, pelo que devolve todos os seus subdiretórios. Se precisar de procurar subdiretórios, utilize o <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29>método, o que permite-lhe especificar uma pesquisa de sub-diretórios com o `searchOption` parâmetro.</xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> </xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29>       O <xref:System.IO.Directory.EnumerateDirectories%2A>e <xref:System.IO.Directory.GetDirectories%2A>métodos diferem da seguinte forma: ao utilizar <xref:System.IO.Directory.EnumerateDirectories%2A>, pode começar a enumerar a coleção de nomes antes de toda a coleção é devolvida; se utilizar <xref:System.IO.Directory.GetDirectories%2A>, tem de aguardar a matriz de nomes a ser devolvido antes de poder aceder a matriz de toda.</xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> </xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> Por conseguinte, quando estiver a trabalhar com muitos ficheiros e diretórios, <xref:System.IO.Directory.EnumerateDirectories%2A>pode ser mais eficiente.</xref:System.IO.Directory.EnumerateDirectories%2A>       O `path` parâmetro pode especificar informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       Os nomes devolvidos por este método são adicionado o prefixo com as informações de diretório fornecidas no `path`.       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  \n  \n [!code-cpp[Recursive file finder#1](~/add/codesnippet/cpp/m-system.io.directory.ge_13_1.cpp)]\n [!code-cs[Recursive file finder#1](~/add/codesnippet/csharp/m-system.io.directory.ge_13_1.cs)]\n [!code-vb[Recursive file finder#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_13_1.vb)]"
  syntax:
    content: public static string[] GetDirectories (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    return:
      type: System.String[]
      description: "Uma matriz de nomes completos (incluindo caminhos) de subdiretórios no caminho especificado, ou uma matriz vazia se não existem diretórios forem encontrados."
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado é inválido (por exemplo, é numa unidade não mapeada)."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String,System.String)
  id: GetDirectories(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String,String)
  nameWithType: Directory.GetDirectories(String,String)
  fullName: System.IO.Directory.GetDirectories(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve os nomes dos subdiretórios (incluindo os respetivos caminhos) que correspondam ao padrão especificado procura no diretório especificado."
  remarks: "This method returns all subdirectories directly under the specified directory that match the specified search pattern. If the specified directory has no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array. Only the top directory is searched. If you want to search the subdirectories as well, use the <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> method and specify <xref:System.IO.SearchOption> in the `searchOption` parameter.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n The `path` parameter can specify relative or absolute path information, and is not case-sensitive.  Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of directories in a path that begin with the specified letter.  \n  \n [!code-cpp[Dir_GetDirs2#1](~/add/codesnippet/cpp/m-system.io.directory.ge_12_1.cpp)]\n [!code-cs[Dir_GetDirs2#1](~/add/codesnippet/csharp/m-system.io.directory.ge_12_1.cs)]\n [!code-vb[Dir_GetDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_12_1.vb)]"
  syntax:
    content: public static string[] GetDirectories (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência os nomes dos subdiretórios no `path`. Este parâmetro pode conter uma combinação de carateres válidas literal e de carácter universal (consulte observações), mas não suporta expressões regulares."
    return:
      type: System.String[]
      description: "Uma matriz de nomes completos (incluindo caminhos) de sub-diretórios que correspondam ao padrão procura no diretório especificado, ou uma matriz vazia se não existem diretórios forem encontrados."
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando <xref:System.IO.Path.GetInvalidPathChars*>.       - ou - <code>searchPattern</code> não contém um padrão válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado é inválido (por exemplo, é numa unidade não mapeada)."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  id: GetDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String,String,SearchOption)
  nameWithType: Directory.GetDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.GetDirectories(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve os nomes dos subdiretórios (incluindo os respetivos caminhos), que corresponde ao padrão especificado procura no diretório especificado e, opcionalmente, procura subdiretórios."
  remarks: "The `path` parameter can specify relative or absolute path information, and is not case-sensitive. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of directories that begin with the specified letter in a path. Only the top-level directory is searched.  \n  \n [!code-vb[Dir_GetDirs2#2](~/add/codesnippet/visualbasic/15c0f479-3a12-4c2f-95ac-_1.vb)]\n [!code-cs[Dir_GetDirs2#2](~/add/codesnippet/csharp/15c0f479-3a12-4c2f-95ac-_1.cs)]"
  syntax:
    content: public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência os nomes dos subdiretórios no `path`. Este parâmetro pode conter uma combinação de carateres válidas literal e de carácter universal (consulte observações), mas não suporta expressões regulares."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Um dos valores da enumeração que especifica se a operação de pesquisa deve incluir todos os seus subdiretórios ou apenas o diretório atual."
    return:
      type: System.String[]
      description: "Uma matriz de nomes completos (incluindo caminhos) de sub-diretórios que correspondam aos critérios especificados, ou uma matriz vazia se não existem diretórios forem encontrados."
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método.       - ou - <code>searchPattern</code> não contém um padrão válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Não é um <xref href=&quot;System.IO.SearchOption&quot;> </xref> valor."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado é inválido (por exemplo, é numa unidade não mapeada)."
  platform:
  - net462
- uid: System.IO.Directory.GetDirectoryRoot(System.String)
  id: GetDirectoryRoot(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectoryRoot(String)
  nameWithType: Directory.GetDirectoryRoot(String)
  fullName: System.IO.Directory.GetDirectoryRoot(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve as informações de volume, informações de raiz ou ambas para o caminho especificado."
  remarks: "Este método obtém o nome de caminho completamente qualificado do `path`, tal como devolvido pelo <xref:System.IO.Path.GetFullPath%2A>, e devolve informações de diretório de raiz.</xref:System.IO.Path.GetFullPath%2A> O caminho especificado não é necessário existir.       O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates how to set the current directory and display the directory root.  \n  \n [!code-cpp[System.IO.DirectoryRoot#1](~/add/codesnippet/cpp/m-system.io.directory.ge_10_1.cpp)]\n [!code-cs[System.IO.DirectoryRoot#1](~/add/codesnippet/csharp/m-system.io.directory.ge_10_1.cs)]\n [!code-vb[System.IO.DirectoryRoot#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_10_1.vb)]"
  syntax:
    content: public static string GetDirectoryRoot (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho de um ficheiro ou diretório."
    return:
      type: System.String
      description: "Uma cadeia que contém as informações de volume, informações de raiz ou ambas para o caminho especificado."
  overload: System.IO.Directory.GetDirectoryRoot*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com <xref:System.IO.Path.GetInvalidPathChars*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String)
  nameWithType: Directory.GetFiles(String)
  fullName: System.IO.Directory.GetFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve os nomes dos ficheiros (incluindo os respetivos caminhos) no diretório especificado."
  remarks: "O <xref:System.IO.Directory.EnumerateFiles%2A>e <xref:System.IO.Directory.GetFiles%2A>métodos diferem da seguinte forma: ao utilizar <xref:System.IO.Directory.EnumerateFiles%2A>, pode começar a enumerar a coleção de nomes antes de toda a coleção é devolvida; se utilizar <xref:System.IO.Directory.GetFiles%2A>, tem de aguardar a matriz de nomes a ser devolvido antes de poder aceder a matriz de toda.</xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> </xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> Por conseguinte, quando estiver a trabalhar com muitos ficheiros e diretórios, <xref:System.IO.Directory.EnumerateFiles%2A>pode ser mais eficiente.</xref:System.IO.Directory.EnumerateFiles%2A>       Os nomes de ficheiro devolvido são acrescentados para o fornecido `path` parâmetro.       Este método é idêntico ao <xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29>com o asterisco (*) especificado como o padrão de pesquisa.</xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29>       O `path` parâmetro pode especificar informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       Não é garantida a ordem dos nomes de ficheiro devolvido; Utilize o <xref:System.Array.Sort%2A>método se uma sequência de ordenação específico se for necessária.</xref:System.Array.Sort%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the GetFiles method to return file names from a user-specified location. The example is configured to catch all errors common to this method.  \n  \n [!code-cpp[Recursive file finder#1](~/add/codesnippet/cpp/m-system.io.directory.ge_0_1.cpp)]\n [!code-cs[Recursive file finder#1](~/add/codesnippet/csharp/m-system.io.directory.ge_0_1.cs)]\n [!code-vb[Recursive file finder#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_0_1.vb)]"
  syntax:
    content: public static string[] GetFiles (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    return:
      type: System.String[]
      description: "Uma matriz de nomes completos (incluindo caminhos) para os ficheiros no diretório especificado, ou uma matriz vazia se não existem ficheiros forem encontrados."
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro.       - ou - Ocorreu um erro de rede."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado não foi encontrado ou é inválido (por exemplo, é numa unidade não mapeada)."
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String,System.String)
  id: GetFiles(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String,String)
  nameWithType: Directory.GetFiles(String,String)
  fullName: System.IO.Directory.GetFiles(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve os nomes de ficheiros (incluindo os respetivos caminhos) que correspondam ao padrão especificado procura no diretório especificado."
  remarks: "The returned file names are appended to the supplied `path` parameter and the order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" returns \"longfilename.txt\" because the equivalent 8.3 file name format is \"LONGFI~1.TXT\".  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The `path` parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of files that begin with the specified letter.  \n  \n [!code-vb[Dir_GetFiles2#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_15_1.vb)]\n [!code-cs[Dir_GetFiles2#1](~/add/codesnippet/csharp/m-system.io.directory.ge_15_1.cs)]\n [!code-cpp[Dir_GetFiles2#1](~/add/codesnippet/cpp/m-system.io.directory.ge_15_1.cpp)]"
  syntax:
    content: public static string[] GetFiles (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência de nomes de ficheiros na `path`.  Este parâmetro pode conter uma combinação de caminho literal válido e um caráter universal (* e?) carateres (consulte observações), mas não suporta expressões regulares."
    return:
      type: System.String[]
      description: "Uma matriz de nomes completos (incluindo caminhos) para os ficheiros no diretório especificado que correspondam ao padrão de pesquisa especificado, ou uma matriz vazia se não existem ficheiros forem encontrados."
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro.       - ou - Ocorreu um erro de rede."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar caracteres inválidos, utilizando <xref:System.IO.Path.GetInvalidPathChars*>.       - ou - <code>searchPattern</code> não contém um padrão válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado não foi encontrado ou é inválido (por exemplo, é numa unidade não mapeada)."
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  id: GetFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String,String,SearchOption)
  nameWithType: Directory.GetFiles(String,String,SearchOption)
  fullName: System.IO.Directory.GetFiles(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve os nomes de ficheiros (incluindo os respetivos caminhos) que correspondam ao padrão especificado procura no diretório especificado, utilizando um valor para determinar se pretende pesquisar subdiretórios."
  remarks: "The returned file names are appended to the supplied  parameter `path` and the order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" returns \"longfilename.txt\" because the equivalent 8.3 file name format is \"LONGFI~1.TXT\".  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The file names include the full path.  \n  \n The `path` parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static string[] GetFiles (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência de nomes de ficheiros na `path`.  Este parâmetro pode conter uma combinação de caminho literal válido e um caráter universal (* e?) carateres (consulte observações), mas não suporta expressões regulares."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Um dos valores da enumeração que especifica se a operação de pesquisa deve incluir todos os seus subdiretórios ou apenas o diretório atual."
    return:
      type: System.String[]
      description: "Encontram-se uma matriz de nomes completos (incluindo caminhos) para os ficheiros no diretório especificado que corresponde ao padrão de pesquisa especificado e a opção ou uma matriz vazia se não existem ficheiros."
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método.       - ou - <code>searchPattern</code> não contém um padrão válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchpattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Não é um <xref href=&quot;System.IO.SearchOption&quot;> </xref> valor."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado não foi encontrado ou é inválido (por exemplo, é numa unidade não mapeada)."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro.       - ou - Ocorreu um erro de rede."
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String)
  id: GetFileSystemEntries(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String)
  nameWithType: Directory.GetFileSystemEntries(String)
  fullName: System.IO.Directory.GetFileSystemEntries(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve os nomes de todos os ficheiros e subdiretórios num caminho especificado."
  remarks: "Não é garantida a ordem dos ficheiros devolvido e nomes de diretório; Utilize o <xref:System.Array.Sort%2A>método se uma sequência de ordenação específico se for necessária.</xref:System.Array.Sort%2A>       O <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>e <xref:System.IO.Directory.GetFileSystemEntries%2A>métodos diferem da seguinte forma: ao utilizar <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, pode começar a enumerar a coleção de entradas antes de toda a coleção é devolvida; se utilizar <xref:System.IO.Directory.GetFileSystemEntries%2A>, tem de aguardar a matriz de entradas a ser devolvido antes de poder aceder a matriz de toda.</xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> </xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> Por conseguinte, quando estiver a trabalhar com muitos ficheiros e diretórios, <xref:System.IO.Directory.EnumerateFiles%2A>pode ser mais eficiente.</xref:System.IO.Directory.EnumerateFiles%2A>       Este método é idêntico ao <xref:System.IO.Directory.GetFileSystemEntries%2A>com o asterisco (*) especificado como o padrão de pesquisa.</xref:System.IO.Directory.GetFileSystemEntries%2A>       O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetFileSystemEntries method to fill an array of strings with the names of all files and subdirectories in a user-specified location and prints each string in the array to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#1](~/add/codesnippet/csharp/m-system.io.directory.ge_4_1.cs)]\n [!code-vb[System.IO.Directory#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_4_1.vb)]\n [!code-cpp[System.IO.Directory#1](~/add/codesnippet/cpp/m-system.io.directory.ge_4_1.cpp)]"
  syntax:
    content: public static string[] GetFileSystemEntries (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    return:
      type: System.String[]
      description: "Uma matriz de nomes de ficheiros e subdiretórios no diretório especificado, ou uma matriz vazia se não for encontrados nenhuma ficheiros ou subdiretórios."
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com <xref:System.IO.Path.GetInvalidPathChars*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado é inválido (por exemplo, é numa unidade não mapeada)."
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  id: GetFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String,String)
  nameWithType: Directory.GetFileSystemEntries(String,String)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma matriz de nomes de ficheiros e nomes de diretório que que correspondem a uma procura padrão num caminho especificado."
  remarks: "The order of the returned file and directory names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetFileSystemEntries method to fill an array of strings with the names of all files matching a user-specified filter in a specific location and prints each string in the array to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#2](~/add/codesnippet/csharp/m-system.io.directory.ge_8_1.cs)]\n [!code-vb[System.IO.Directory#2](~/add/codesnippet/visualbasic/m-system.io.directory.ge_8_1.vb)]\n [!code-cpp[System.IO.Directory#2](~/add/codesnippet/cpp/m-system.io.directory.ge_8_1.cpp)]"
  syntax:
    content: public static string[] GetFileSystemEntries (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência de nomes de ficheiros e diretórios no `path`.  Este parâmetro pode conter uma combinação de caminho literal válido e um caráter universal (* e?) carateres (consulte observações), mas não suporta expressões regulares."
    return:
      type: System.String[]
      description: "Uma matriz de nomes de ficheiros e nomes de diretório que correspondem aos critérios de pesquisa especificados, ou uma matriz vazia se não for encontrados nenhuma ficheiros ou diretórios."
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método.       - ou - <code>searchPattern</code> não contém um padrão válido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado é inválido (por exemplo, é numa unidade não mapeada)."
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  id: GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.GetFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve uma matriz de todos os nomes de ficheiros e nomes de diretório que correspondam a um padrão de pesquisa num caminho especificado e, opcionalmente, procura subdiretórios."
  remarks: "The order of the returned file and directory names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method."
  syntax:
    content: public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "O caminho relativo ou absoluto para o diretório para procurar. Esta cadeia não é sensível."
    - id: searchPattern
      type: System.String
      description: "A cadeia de procura para correspondência de nomes de ficheiros e diretórios nos `path`.  Este parâmetro pode conter uma combinação de caminho literal válido e um caráter universal (* e?) carateres (consulte observações), mas não suporta expressões regulares."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Um dos valores da enumeração que especifica se a operação de pesquisa deve incluir apenas o diretório atual ou deve incluir todos os seus subdiretórios.       O valor predefinido é <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.String[]
      description: "Uma matriz de ficheiros se encontram os nomes de ficheiro e os nomes de diretório que correspondem aos critérios de pesquisa especificados, ou uma matriz vazia se não existem ficheiros ou diretórios."
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>Não é um <xref href=&quot;System.IO.SearchOption&quot;> </xref> valor."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>é inválido, por exemplo, o que faz referência a uma unidade não mapeada."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>é um nome de ficheiro."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o ficheiro nome ou combinado exceder o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.GetLastAccessTime(System.String)
  id: GetLastAccessTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastAccessTime(String)
  nameWithType: Directory.GetLastAccessTime(String)
  fullName: System.IO.Directory.GetLastAccessTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve a data e hora especificadas ficheiro ou diretório foi acedida pela última vez."
  remarks: "> [!NOTE]> Este método pode devolver um valor de incorreta, porque utiliza as funções nativas cujos valores não podem ser atualizados continuamente pelo sistema operativo.       Este método é idêntico ao <xref:System.IO.File.GetLastAccessTime%2A?displayProperty=fullName>.</xref:System.IO.File.GetLastAccessTime%2A?displayProperty=fullName>       Se o diretório descrito a `path` parâmetro não existe, este método devolve 12:00, 1 de Janeiro de 1601 a.d. (E.C.) Hora Universal Coordenada (UTC), tendo em conta a hora local.       O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `GetLastAccessTime`.  \n  \n [!code-cpp[Dir_GetLastAccess#1](~/add/codesnippet/cpp/m-system.io.directory.ge_6_1.cpp)]\n [!code-vb[Dir_GetLastAccess#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_6_1.vb)]\n [!code-cs[Dir_GetLastAccess#1](~/add/codesnippet/csharp/m-system.io.directory.ge_6_1.cs)]"
  syntax:
    content: public static DateTime GetLastAccessTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "O ficheiro ou diretório no qual pretende obter acesso a informações de data e hora."
    return:
      type: System.DateTime
      description: "Uma estrutura que está definida para a data e hora de ficheiro especificado ou o diretório foi acedida pela última vez. Este valor é expresso em hora local."
  overload: System.IO.Directory.GetLastAccessTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <code> path </code> parâmetro está num formato inválido."
  platform:
  - net462
- uid: System.IO.Directory.GetLastAccessTimeUtc(System.String)
  id: GetLastAccessTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastAccessTimeUtc(String)
  nameWithType: Directory.GetLastAccessTimeUtc(String)
  fullName: System.IO.Directory.GetLastAccessTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve a data e hora, no formato de hora Universal Coordenada (UTC), que o ficheiro especificado ou diretório foi acedida pela última vez."
  remarks: "> [!NOTE]> Este método pode devolver um valor de incorreta, porque utiliza as funções nativas cujos valores não podem ser atualizados continuamente pelo sistema operativo.       Se o diretório descrito a `path` parâmetro não existe, este método devolve 12:00, 1 de Janeiro de 1601 a.d. (E.C.) Hora de Universal Coordenada (UTC).       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_9_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_9_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_9_1.vb)]"
  syntax:
    content: public static DateTime GetLastAccessTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "O ficheiro ou diretório no qual pretende obter acesso a informações de data e hora."
    return:
      type: System.DateTime
      description: "Uma estrutura que está definida para a data e hora de ficheiro especificado ou o diretório foi acedida pela última vez. Este valor é expresso na hora UTC."
  overload: System.IO.Directory.GetLastAccessTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "O <code> path </code> parâmetro está num formato inválido."
  platform:
  - net462
- uid: System.IO.Directory.GetLastWriteTime(System.String)
  id: GetLastWriteTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastWriteTime(String)
  nameWithType: Directory.GetLastWriteTime(String)
  fullName: System.IO.Directory.GetLastWriteTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve a data e hora especificadas ficheiro ou diretório pela última vez foi escrito."
  remarks: "> [!NOTE]> Este método pode devolver um valor de incorreta, porque utiliza as funções nativas cujos valores não podem ser atualizados continuamente pelo sistema operativo.       Se o diretório descrito a `path` parâmetro não existe, este método devolve 12:00, 1 de Janeiro de 1601 a.d. (E.C.) Hora Universal Coordenada (UTC), tendo em conta a hora local.       O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `GetLastWriteTime`.  \n  \n [!code-cs[Dir_GetLastWrite#1](~/add/codesnippet/csharp/m-system.io.directory.ge_14_1.cs)]\n [!code-cpp[Dir_GetLastWrite#1](~/add/codesnippet/cpp/m-system.io.directory.ge_14_1.cpp)]\n [!code-vb[Dir_GetLastWrite#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_14_1.vb)]"
  syntax:
    content: public static DateTime GetLastWriteTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "O ficheiro ou diretório no qual pretende obter informações de data e hora de modificação."
    return:
      type: System.DateTime
      description: "Uma estrutura que está definida para a data e hora do diretório ou ficheiro especificados pela última vez foi escrita. Este valor é expresso em hora local."
  overload: System.IO.Directory.GetLastWriteTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  platform:
  - net462
- uid: System.IO.Directory.GetLastWriteTimeUtc(System.String)
  id: GetLastWriteTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastWriteTimeUtc(String)
  nameWithType: Directory.GetLastWriteTimeUtc(String)
  fullName: System.IO.Directory.GetLastWriteTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Devolve a data e hora, no formato de hora Universal Coordenada (UTC), o ficheiro especificado ou o diretório última escrita."
  remarks: "> [!NOTE]> Este método pode devolver um valor de incorreta, porque utiliza as funções nativas cujos valores não podem ser atualizados continuamente pelo sistema operativo.       Se o diretório descrito a `path` parâmetro não existe, este método devolve 12:00, 1 de Janeiro de 1601 a.d. (E.C.) Hora de Universal Coordenada (UTC).       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_2_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_2_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_2_1.vb)]"
  syntax:
    content: public static DateTime GetLastWriteTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "O ficheiro ou diretório no qual pretende obter informações de data e hora de modificação."
    return:
      type: System.DateTime
      description: "Uma estrutura que está definida para a data e hora do diretório ou ficheiro especificados pela última vez foi escrita. Este valor é expresso na hora UTC."
  overload: System.IO.Directory.GetLastWriteTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  platform:
  - net462
- uid: System.IO.Directory.GetLogicalDrives
  id: GetLogicalDrives
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLogicalDrives()
  nameWithType: Directory.GetLogicalDrives()
  fullName: System.IO.Directory.GetLogicalDrives()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Obtém os nomes de unidades lógicas neste computador, no formato &quot;&lt;letra de unidade&gt;:\\&quot;."
  remarks: "GetLogicalDrives devolve todas as unidades acessíveis num computador específico, incluindo a unidade de disquetes e quaisquer unidades optical.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetLogicalDrives method to assign the name of each drive on the calling computer to an array of strings. Each member of this string array is then printed to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#3](~/add/codesnippet/csharp/m-system.io.directory.ge_3_1.cs)]\n [!code-vb[System.IO.Directory#3](~/add/codesnippet/visualbasic/m-system.io.directory.ge_3_1.vb)]\n [!code-cpp[System.IO.Directory#3](~/add/codesnippet/cpp/m-system.io.directory.ge_3_1.cpp)]"
  syntax:
    content: public static string[] GetLogicalDrives ();
    parameters: []
    return:
      type: System.String[]
      description: "As unidades lógicas neste computador."
  overload: System.IO.Directory.GetLogicalDrives*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ocorreu um erro de e/s (por exemplo, um erro no disco)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  platform:
  - net462
- uid: System.IO.Directory.GetParent(System.String)
  id: GetParent(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetParent(String)
  nameWithType: Directory.GetParent(String)
  fullName: System.IO.Directory.GetParent(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Obtém o diretório principal do caminho especificado, incluindo caminhos absolutos e relativos."
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n Trailing spaces are removed from the end of the `path` parameter before getting the directory.  \n  \n The string returned by this method consists of all characters in the path up to, but not including, the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>. For example, passing the path \"C:\\Directory\\SubDirectory\\test.txt\" to GetParent returns \"C:\\Directory\\SubDirectory\". Passing \"C:\\Directory\\SubDirectory\" returns \"C:\\Directory\". However, passing \"C:\\Directory\\SubDirectory\\\\\" returns \"C:\\Directory\\SubDirectory\", because the ending directory separator is after \"SubDirectory\".  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the GetParent method to retrieve the parent directory of a user-specified location, \"path\". The value returned by the GetParent method is then printed to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#4](~/add/codesnippet/csharp/m-system.io.directory.ge_5_1.cs)]\n [!code-vb[System.IO.Directory#4](~/add/codesnippet/visualbasic/m-system.io.directory.ge_5_1.vb)]\n [!code-cpp[System.IO.Directory#4](~/add/codesnippet/cpp/m-system.io.directory.ge_5_1.cpp)]"
  syntax:
    content: public static System.IO.DirectoryInfo GetParent (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho para o qual pretende obter o diretório principal."
    return:
      type: System.IO.DirectoryInfo
      description: "O diretório principal, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se <code> path </code> é o diretório de raiz, incluindo a raiz de um nome de servidor ou partilha UNC."
  overload: System.IO.Directory.GetParent*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "O diretório especificado pelo <code> path </code> é só de leitura."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado não foi encontrado."
  platform:
  - net462
- uid: System.IO.Directory.Move(System.String,System.String)
  id: Move(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Move(String,String)
  nameWithType: Directory.Move(String,String)
  fullName: System.IO.Directory.Move(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Move um ficheiro ou diretório e o respetivo conteúdo para uma nova localização."
  remarks: "This method creates a new directory with the name specified by `destDirName` and moves the contents of `sourceDirName` to the newly created destination directory. If you try to move a directory to a directory that already exists, an <xref:System.IO.IOException> will occur. For example, an exception will occur if you try to move c:\\mydir to c:\\public, and c:\\public already exists. Alternatively, you could specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, provided that \"mydir\" does not exist under \"c:\\\\\\public\", or specify a new directory name such as \"c:\\\\\\newdir\".  \n  \n The `sourceDirName` and `destDirName` arguments are permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n Trailing spaces are removed from the end of the path parameters before moving the directory.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to move a directory and all its files to a new directory. The original directory no longer exists after it has been moved.  \n  \n [!code-vb[System.IO.Directory#14](~/add/codesnippet/visualbasic/m-system.io.directory.mo_1.vb)]\n [!code-cs[System.IO.Directory#14](~/add/codesnippet/csharp/m-system.io.directory.mo_1.cs)]"
  syntax:
    content: public static void Move (string sourceDirName, string destDirName);
    parameters:
    - id: sourceDirName
      type: System.String
      description: "O caminho do ficheiro ou diretório mover."
    - id: destDirName
      type: System.String
      description: "O caminho para a nova localização para `sourceDirName`. Se `sourceDirName` é um ficheiro, em seguida, `destDirName` também tem de ser um nome de ficheiro."
  overload: System.IO.Directory.Move*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Foi efetuada uma tentativa de mover um diretório para um volume diferente.       - ou - <code> destDirName </code> já existe.       - ou - <code> sourceDirName </code> e <code> destDirName </code> Consulte parâmetros para o mesmo ficheiro ou diretório.       - ou - o directório ou um ficheiro dentro da mesma está a ser utilizado por outro processo."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceDirName</code>ou <code>destDirName</code> é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirName</code>or <code>destDirName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O caminho especificado por <code> sourceDirName </code> é inválido (por exemplo, é numa unidade não mapeada)."
  platform:
  - net462
- uid: System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  id: SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetAccessControl(String,DirectorySecurity)
  nameWithType: Directory.SetAccessControl(String,DirectorySecurity)
  fullName: System.IO.Directory.SetAccessControl(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Aplica-se entradas de lista (ACL) de controlo de acesso descritas através de um <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objeto para o diretório especificado."
  remarks: "O método SetAccessControl aplica-se entradas de lista (ACL) de controlo de acesso a um ficheiro que representa a lista ACL noninherited.      > [!CAUTION] > A ACL especificado para o `directorySecurity` parâmetro substitui a ACL existente para o diretório. Para adicionar permissões para um novo utilizador, utilize o <xref:System.IO.Directory.GetAccessControl%2A>método para obter a ACL existente e modificá-lo.</xref:System.IO.Directory.GetAccessControl%2A>       Uma ACL descreve indivíduos e/ou grupos de utilizadores que tenham ou não tem, direitos para as ações específicas do ficheiro ou diretório. Para obter mais informações, consulte [como: Adicionar ou remover entradas de lista de controlo de acesso](~/add/includes/ajax-current-ext-md.md).       O método SetAccessControl persistir apenas <xref:System.Security.AccessControl.DirectorySecurity>objetos que foram modificados após a criação do objeto.</xref:System.Security.AccessControl.DirectorySecurity>  Se um <xref:System.Security.AccessControl.DirectorySecurity>objeto não foi modificado, não será transferido para um ficheiro.</xref:System.Security.AccessControl.DirectorySecurity>  Por conseguinte, não é possível obter um <xref:System.Security.AccessControl.DirectorySecurity>de objeto de um ficheiro e volte a aplicar o mesmo objeto para outro ficheiro.</xref:System.Security.AccessControl.DirectorySecurity>       Para copiar as informações de ACL de um ficheiro para outro: 1.  Utilize o <xref:System.IO.Directory.GetAccessControl%2A>método para obter o <xref:System.Security.AccessControl.DirectorySecurity>objeto a partir do ficheiro de origem.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.IO.Directory.GetAccessControl%2A>      2.  Crie um novo <xref:System.Security.AccessControl.DirectorySecurity>objeto para o ficheiro de destino.</xref:System.Security.AccessControl.DirectorySecurity>      3.  Utilize o <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>ou <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>método da origem de <xref:System.Security.AccessControl.DirectorySecurity>objeto para obter as informações de ACL.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>      4.  Utilize o <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>ou <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>método para copiar as informações obtido no passo 3 para o destino <xref:System.Security.AccessControl.DirectorySecurity>objeto.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>      5.  Definir o destino <xref:System.Security.AccessControl.DirectorySecurity>objeto para o ficheiro de destino utilizando o método SetAccessControl.</xref:System.Security.AccessControl.DirectorySecurity>       Em ambientes de NTFS, <xref:System.Security.AccessControl.FileSystemRights>e <xref:System.Security.AccessControl.FileSystemRights>concedidas ao utilizador se o utilizador tiver <xref:System.Security.AccessControl.FileSystemRights>direitos na pasta principal.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> Para negar <xref:System.Security.AccessControl.FileSystemRights>e <xref:System.Security.AccessControl.FileSystemRights>, negar <xref:System.Security.AccessControl.FileSystemRights>no diretório principal.</xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights> </xref:System.Security.AccessControl.FileSystemRights>"
  example:
  - "The following example uses the <xref:System.IO.Directory.GetAccessControl%2A> and the SetAccessControl methods to add an access control list (ACL) entry and then remove an ACL entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/57b88d80-60eb-4344-b644-_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/57b88d80-60eb-4344-b644-_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/57b88d80-60eb-4344-b644-_1.vb)]"
  syntax:
    content: public static void SetAccessControl (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "Um diretório para adicionar ou remover entradas de lista (ACL) de controlo de acesso."
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> objeto que descreve uma entrada ACL para aplicar no diretório descrita através de `path` parâmetro."
  overload: System.IO.Directory.SetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>directorySecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Não foi possível encontrar o diretório."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O <code> path </code> era inválido."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O processo atual não tem acesso para o diretório especificado pelo <code> path </code>.       - ou - o processo atual não tem privilégios suficientes para definir a entrada de ACL."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operativo atual não é o Windows 2000 ou posterior."
  platform:
  - net462
- uid: System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  id: SetCreationTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCreationTime(String,DateTime)
  nameWithType: Directory.SetCreationTime(String,DateTime)
  fullName: System.IO.Directory.SetCreationTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Define a data de criação e a hora para o diretório ou ficheiro especificados."
  remarks: "O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_4_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_4_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_4_1.vb)]"
  syntax:
    content: public static void SetCreationTime (string path, DateTime creationTime);
    parameters:
    - id: path
      type: System.String
      description: "O ficheiro ou diretório no qual pretende definir as informações de data e hora de criação."
    - id: creationTime
      type: System.DateTime
      description: "A data e hora de ficheiro ou diretório foi escrito pela última vez. Este valor é expresso em hora local."
  overload: System.IO.Directory.SetCreationTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O caminho especificado não foi encontrado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code>Especifica um valor fora do intervalo de datas ou horas permitidas para esta operação."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operativo atual não é Windows NT ou posterior."
  platform:
  - net462
- uid: System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  id: SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: Directory.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetCreationTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Define a data de criação e a hora, no formato de hora Universal Coordenada (UTC), para o diretório ou ficheiro especificados."
  remarks: "O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "O ficheiro ou diretório no qual pretende definir as informações de data e hora de criação."
    - id: creationTimeUtc
      type: System.DateTime
      description: "A data e hora o diretório ou ficheiro foi criado. Este valor é expresso em hora local."
  overload: System.IO.Directory.SetCreationTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O caminho especificado não foi encontrado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code>Especifica um valor fora do intervalo de datas ou horas permitidas para esta operação."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operativo atual não é Windows NT ou posterior."
  platform:
  - net462
- uid: System.IO.Directory.SetCurrentDirectory(System.String)
  id: SetCurrentDirectory(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCurrentDirectory(String)
  nameWithType: Directory.SetCurrentDirectory(String)
  fullName: System.IO.Directory.SetCurrentDirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Define o atual diretório de trabalho da aplicação para o diretório especificado."
  remarks: "Quando termina a aplicação, o diretório de trabalho é restaurado para a localização original (o diretório onde o processo foi iniciado).       O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       Espaços à direita são removidos do fim do `path` parâmetro antes de definir o diretório.       O `path` parâmetro não é sensível.       Se estiver a definir o diretório para uma unidade com suportes de dados amovível, por exemplo, para (&quot;r:&quot; para uma unidade de disquetes) ou &quot;E&quot; para uma unidade de CD-ROM, pode determinar se a unidade está pronta, utilizando o <xref:System.IO.DriveInfo.IsReady%2A>propriedade.</xref:System.IO.DriveInfo.IsReady%2A>"
  example:
  - "The following example illustrates how to set the current directory and display the directory root.  \n  \n [!code-cpp[System.IO.DirectoryRoot#1](~/add/codesnippet/cpp/m-system.io.directory.se_2_1.cpp)]\n [!code-cs[System.IO.DirectoryRoot#1](~/add/codesnippet/csharp/m-system.io.directory.se_2_1.cs)]\n [!code-vb[System.IO.DirectoryRoot#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_2_1.vb)]"
  syntax:
    content: public static void SetCurrentDirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "O caminho para o qual o diretório de trabalho atual está definido."
  overload: System.IO.Directory.SetCurrentDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Ocorreu um erro de e/s."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "O chamador não tem a permissão necessária para aceder a código não gerido."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O caminho especificado não foi encontrado."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "O diretório especificado não foi encontrado."
  platform:
  - net462
- uid: System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  id: SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastAccessTime(String,DateTime)
  nameWithType: Directory.SetLastAccessTime(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Define a data e hora especificadas ficheiro ou diretório foi acedida pela última vez."
  remarks: "O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `SetLastAccessTime`.  \n  \n [!code-cs[Dir_SetLastAccess#1](~/add/codesnippet/csharp/m-system.io.directory.se_1_1.cs)]\n [!code-cpp[Dir_SetLastAccess#1](~/add/codesnippet/cpp/m-system.io.directory.se_1_1.cpp)]\n [!code-vb[Dir_SetLastAccess#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_1_1.vb)]"
  syntax:
    content: public static void SetLastAccessTime (string path, DateTime lastAccessTime);
    parameters:
    - id: path
      type: System.String
      description: "O ficheiro ou diretório no qual pretende definir as informações de data e hora de acesso."
    - id: lastAccessTime
      type: System.DateTime
      description: "Um objeto que contém o valor para definir a data de acesso e a hora de `path`. Este valor é expresso em hora local."
  overload: System.IO.Directory.SetLastAccessTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O caminho especificado não foi encontrado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operativo atual não é Windows NT ou posterior."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTime</code>Especifica um valor fora do intervalo de datas ou horas permitidas para esta operação."
  platform:
  - net462
- uid: System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  id: SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Define a data e hora, no formato de hora Universal Coordenada (UTC), que o ficheiro especificado ou diretório foi acedida pela última vez."
  remarks: "O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_0_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_0_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_0_1.vb)]"
  syntax:
    content: public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "O ficheiro ou diretório no qual pretende definir as informações de data e hora de acesso."
    - id: lastAccessTimeUtc
      type: System.DateTime
      description: "Um objeto que contém o valor para definir a data de acesso e a hora de `path`. Este valor é expresso na hora UTC."
  overload: System.IO.Directory.SetLastAccessTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O caminho especificado não foi encontrado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operativo atual não é Windows NT ou posterior."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTimeUtc</code>Especifica um valor fora do intervalo de datas ou horas permitidas para esta operação."
  platform:
  - net462
- uid: System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  id: SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastWriteTime(String,DateTime)
  nameWithType: Directory.SetLastWriteTime(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Define a data e hora de que um diretório foi escrito pela última vez."
  remarks: "O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use `SetLastWriteTime`.  \n  \n [!code-cpp[Dir_SetLastWrite#1](~/add/codesnippet/cpp/m-system.io.directory.se_3_1.cpp)]\n [!code-cs[Dir_SetLastWrite#1](~/add/codesnippet/csharp/m-system.io.directory.se_3_1.cs)]\n [!code-vb[Dir_SetLastWrite#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_3_1.vb)]"
  syntax:
    content: public static void SetLastWriteTime (string path, DateTime lastWriteTime);
    parameters:
    - id: path
      type: System.String
      description: "O caminho do diretório."
    - id: lastWriteTime
      type: System.DateTime
      description: "A data e hora o diretório pela última vez foi escrito. Este valor é expresso em hora local."
  overload: System.IO.Directory.SetLastWriteTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O caminho especificado não foi encontrado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operativo atual não é Windows NT ou posterior."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTime</code>Especifica um valor fora do intervalo de datas ou horas permitidas para esta operação."
  platform:
  - net462
- uid: System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  id: SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Define a data e hora, no formato de hora Universal Coordenada (UTC), um diretório foi escrita pela última vez."
  remarks: "O `path` parâmetro é permitido para especificar as informações de caminho relativo ou absoluto. Informações de caminho relativo são interpretadas como relativos ao diretório de trabalho atual. Para obter o atual diretório de trabalho, consulte <xref:System.IO.Directory.GetCurrentDirectory%2A>.</xref:System.IO.Directory.GetCurrentDirectory%2A>       O `path` parâmetro não é sensível.       Para obter uma lista de tarefas comuns de e/s, consulte [tarefas comuns de e/s](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_5_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_5_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_5_1.vb)]"
  syntax:
    content: public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "O caminho do diretório."
    - id: lastWriteTimeUtc
      type: System.DateTime
      description: "A data e hora o diretório pela última vez foi escrito. Este valor é expresso na hora UTC."
  overload: System.IO.Directory.SetLastWriteTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "O caminho especificado não foi encontrado."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>é uma cadeia de comprimento de zero, contém apenas espaços em branco ou contém um ou mais carateres inválidos. Pode consultar carateres inválidos com o <xref:System.IO.Path.GetInvalidPathChars*> método."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "O caminho especificado, o nome de ficheiro ou ambos excedem o comprimento máximo definido pelo sistema. Por exemplo, em plataformas com Windows, caminhos tem de ter menos de 248 carateres e nomes de ficheiros tem de ser inferior a 260 caracteres."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "O chamador não tem a permissão necessária."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "O sistema operativo atual não é Windows NT ou posterior."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTimeUtc</code>Especifica um valor fora do intervalo de datas ou horas permitidas para esta operação."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.Directory.CreateDirectory(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory(String)
  nameWithType: Directory.CreateDirectory(String)
  fullName: System.IO.Directory.CreateDirectory(String)
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory(String,DirectorySecurity)
  nameWithType: Directory.CreateDirectory(String,DirectorySecurity)
  fullName: System.IO.Directory.CreateDirectory(String,DirectorySecurity)
- uid: System.Security.AccessControl.DirectorySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
- uid: System.IO.Directory.Delete(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Delete(String)
  nameWithType: Directory.Delete(String)
  fullName: System.IO.Directory.Delete(String)
- uid: System.IO.Directory.Delete(System.String,System.Boolean)
  parent: System.IO.Directory
  isExternal: false
  name: Delete(String,Boolean)
  nameWithType: Directory.Delete(String,Boolean)
  fullName: System.IO.Directory.Delete(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Directory.EnumerateDirectories(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String)
  nameWithType: Directory.EnumerateDirectories(String)
  fullName: System.IO.Directory.EnumerateDirectories(String)
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String,String)
  nameWithType: Directory.EnumerateDirectories(String,String)
  fullName: System.IO.Directory.EnumerateDirectories(String,String)
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String,String,SearchOption)
  nameWithType: Directory.EnumerateDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateDirectories(String,String,SearchOption)
- uid: System.IO.SearchOption
  parent: System.IO
  isExternal: false
  name: SearchOption
  nameWithType: SearchOption
  fullName: System.IO.SearchOption
- uid: System.IO.Directory.EnumerateFiles(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String)
  nameWithType: Directory.EnumerateFiles(String)
  fullName: System.IO.Directory.EnumerateFiles(String)
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String,String)
  nameWithType: Directory.EnumerateFiles(String,String)
  fullName: System.IO.Directory.EnumerateFiles(String,String)
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String,String,SearchOption)
  nameWithType: Directory.EnumerateFiles(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFiles(String,String,SearchOption)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String)
  nameWithType: Directory.EnumerateFileSystemEntries(String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String,String)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String,SearchOption)
- uid: System.IO.Directory.Exists(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Exists(String)
  nameWithType: Directory.Exists(String)
  fullName: System.IO.Directory.Exists(String)
- uid: System.IO.Directory.GetAccessControl(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl(String)
  nameWithType: Directory.GetAccessControl(String)
  fullName: System.IO.Directory.GetAccessControl(String)
- uid: System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: Directory.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.Directory.GetAccessControl(String,AccessControlSections)
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.IO.Directory.GetCreationTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTime(String)
  nameWithType: Directory.GetCreationTime(String)
  fullName: System.IO.Directory.GetCreationTime(String)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.Directory.GetCreationTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTimeUtc(String)
  nameWithType: Directory.GetCreationTimeUtc(String)
  fullName: System.IO.Directory.GetCreationTimeUtc(String)
- uid: System.IO.Directory.GetCurrentDirectory
  parent: System.IO.Directory
  isExternal: false
  name: GetCurrentDirectory()
  nameWithType: Directory.GetCurrentDirectory()
  fullName: System.IO.Directory.GetCurrentDirectory()
- uid: System.IO.Directory.GetDirectories(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String)
  nameWithType: Directory.GetDirectories(String)
  fullName: System.IO.Directory.GetDirectories(String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Directory.GetDirectories(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String,String)
  nameWithType: Directory.GetDirectories(String,String)
  fullName: System.IO.Directory.GetDirectories(String,String)
- uid: System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String,String,SearchOption)
  nameWithType: Directory.GetDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.GetDirectories(String,String,SearchOption)
- uid: System.IO.Directory.GetDirectoryRoot(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectoryRoot(String)
  nameWithType: Directory.GetDirectoryRoot(String)
  fullName: System.IO.Directory.GetDirectoryRoot(String)
- uid: System.IO.Directory.GetFiles(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String)
  nameWithType: Directory.GetFiles(String)
  fullName: System.IO.Directory.GetFiles(String)
- uid: System.IO.Directory.GetFiles(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String,String)
  nameWithType: Directory.GetFiles(String,String)
  fullName: System.IO.Directory.GetFiles(String,String)
- uid: System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String,String,SearchOption)
  nameWithType: Directory.GetFiles(String,String,SearchOption)
  fullName: System.IO.Directory.GetFiles(String,String,SearchOption)
- uid: System.IO.Directory.GetFileSystemEntries(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String)
  nameWithType: Directory.GetFileSystemEntries(String)
  fullName: System.IO.Directory.GetFileSystemEntries(String)
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String,String)
  nameWithType: Directory.GetFileSystemEntries(String,String)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String)
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.GetFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String,SearchOption)
- uid: System.IO.Directory.GetLastAccessTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTime(String)
  nameWithType: Directory.GetLastAccessTime(String)
  fullName: System.IO.Directory.GetLastAccessTime(String)
- uid: System.IO.Directory.GetLastAccessTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTimeUtc(String)
  nameWithType: Directory.GetLastAccessTimeUtc(String)
  fullName: System.IO.Directory.GetLastAccessTimeUtc(String)
- uid: System.IO.Directory.GetLastWriteTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTime(String)
  nameWithType: Directory.GetLastWriteTime(String)
  fullName: System.IO.Directory.GetLastWriteTime(String)
- uid: System.IO.Directory.GetLastWriteTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTimeUtc(String)
  nameWithType: Directory.GetLastWriteTimeUtc(String)
  fullName: System.IO.Directory.GetLastWriteTimeUtc(String)
- uid: System.IO.Directory.GetLogicalDrives
  parent: System.IO.Directory
  isExternal: false
  name: GetLogicalDrives()
  nameWithType: Directory.GetLogicalDrives()
  fullName: System.IO.Directory.GetLogicalDrives()
- uid: System.IO.Directory.GetParent(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetParent(String)
  nameWithType: Directory.GetParent(String)
  fullName: System.IO.Directory.GetParent(String)
- uid: System.IO.Directory.Move(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Move(String,String)
  nameWithType: Directory.Move(String,String)
  fullName: System.IO.Directory.Move(String,String)
- uid: System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  isExternal: false
  name: SetAccessControl(String,DirectorySecurity)
  nameWithType: Directory.SetAccessControl(String,DirectorySecurity)
  fullName: System.IO.Directory.SetAccessControl(String,DirectorySecurity)
- uid: System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTime(String,DateTime)
  nameWithType: Directory.SetCreationTime(String,DateTime)
  fullName: System.IO.Directory.SetCreationTime(String,DateTime)
- uid: System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: Directory.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetCreationTimeUtc(String,DateTime)
- uid: System.IO.Directory.SetCurrentDirectory(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: SetCurrentDirectory(String)
  nameWithType: Directory.SetCurrentDirectory(String)
  fullName: System.IO.Directory.SetCurrentDirectory(String)
- uid: System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTime(String,DateTime)
  nameWithType: Directory.SetLastAccessTime(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTime(String,DateTime)
- uid: System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTimeUtc(String,DateTime)
- uid: System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTime(String,DateTime)
  nameWithType: Directory.SetLastWriteTime(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTime(String,DateTime)
- uid: System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTimeUtc(String,DateTime)
- uid: System.IO.Directory.CreateDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory
  nameWithType: Directory.CreateDirectory
- uid: System.IO.Directory.Delete*
  parent: System.IO.Directory
  isExternal: false
  name: Delete
  nameWithType: Directory.Delete
- uid: System.IO.Directory.EnumerateDirectories*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories
  nameWithType: Directory.EnumerateDirectories
- uid: System.IO.Directory.EnumerateFiles*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles
  nameWithType: Directory.EnumerateFiles
- uid: System.IO.Directory.EnumerateFileSystemEntries*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries
  nameWithType: Directory.EnumerateFileSystemEntries
- uid: System.IO.Directory.Exists*
  parent: System.IO.Directory
  isExternal: false
  name: Exists
  nameWithType: Directory.Exists
- uid: System.IO.Directory.GetAccessControl*
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl
  nameWithType: Directory.GetAccessControl
- uid: System.IO.Directory.GetCreationTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTime
  nameWithType: Directory.GetCreationTime
- uid: System.IO.Directory.GetCreationTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTimeUtc
  nameWithType: Directory.GetCreationTimeUtc
- uid: System.IO.Directory.GetCurrentDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: GetCurrentDirectory
  nameWithType: Directory.GetCurrentDirectory
- uid: System.IO.Directory.GetDirectories*
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories
  nameWithType: Directory.GetDirectories
- uid: System.IO.Directory.GetDirectoryRoot*
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectoryRoot
  nameWithType: Directory.GetDirectoryRoot
- uid: System.IO.Directory.GetFiles*
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles
  nameWithType: Directory.GetFiles
- uid: System.IO.Directory.GetFileSystemEntries*
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries
  nameWithType: Directory.GetFileSystemEntries
- uid: System.IO.Directory.GetLastAccessTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTime
  nameWithType: Directory.GetLastAccessTime
- uid: System.IO.Directory.GetLastAccessTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTimeUtc
  nameWithType: Directory.GetLastAccessTimeUtc
- uid: System.IO.Directory.GetLastWriteTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTime
  nameWithType: Directory.GetLastWriteTime
- uid: System.IO.Directory.GetLastWriteTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTimeUtc
  nameWithType: Directory.GetLastWriteTimeUtc
- uid: System.IO.Directory.GetLogicalDrives*
  parent: System.IO.Directory
  isExternal: false
  name: GetLogicalDrives
  nameWithType: Directory.GetLogicalDrives
- uid: System.IO.Directory.GetParent*
  parent: System.IO.Directory
  isExternal: false
  name: GetParent
  nameWithType: Directory.GetParent
- uid: System.IO.Directory.Move*
  parent: System.IO.Directory
  isExternal: false
  name: Move
  nameWithType: Directory.Move
- uid: System.IO.Directory.SetAccessControl*
  parent: System.IO.Directory
  isExternal: false
  name: SetAccessControl
  nameWithType: Directory.SetAccessControl
- uid: System.IO.Directory.SetCreationTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTime
  nameWithType: Directory.SetCreationTime
- uid: System.IO.Directory.SetCreationTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTimeUtc
  nameWithType: Directory.SetCreationTimeUtc
- uid: System.IO.Directory.SetCurrentDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: SetCurrentDirectory
  nameWithType: Directory.SetCurrentDirectory
- uid: System.IO.Directory.SetLastAccessTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTime
  nameWithType: Directory.SetLastAccessTime
- uid: System.IO.Directory.SetLastAccessTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTimeUtc
  nameWithType: Directory.SetLastAccessTimeUtc
- uid: System.IO.Directory.SetLastWriteTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTime
  nameWithType: Directory.SetLastWriteTime
- uid: System.IO.Directory.SetLastWriteTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTimeUtc
  nameWithType: Directory.SetLastWriteTimeUtc
