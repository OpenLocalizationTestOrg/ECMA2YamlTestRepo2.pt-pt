### YamlMime:ManagedReference
items:
- uid: System.Web.TraceContext
  id: TraceContext
  children:
  - System.Web.TraceContext.#ctor(System.Web.HttpContext)
  - System.Web.TraceContext.IsEnabled
  - System.Web.TraceContext.TraceFinished
  - System.Web.TraceContext.TraceMode
  - System.Web.TraceContext.Warn(System.String)
  - System.Web.TraceContext.Warn(System.String,System.String)
  - System.Web.TraceContext.Warn(System.String,System.String,System.Exception)
  - System.Web.TraceContext.Write(System.String)
  - System.Web.TraceContext.Write(System.String,System.String)
  - System.Web.TraceContext.Write(System.String,System.String,System.Exception)
  langs:
  - csharp
  name: TraceContext
  nameWithType: TraceContext
  fullName: System.Web.TraceContext
  type: Class
  summary: "Captures and presents execution details about a Web request. This class cannot be inherited."
  remarks: "You can use this class to append messages to specific trace categories. For example, if you are creating an instance of the <xref:System.Web.UI.WebControls.Calendar> class for your application, you might include the trace message &quot;Starting To Render&quot; in a rendering procedure, and &quot;Raising OnChange Event&quot; in an event handler procedure.       You can also use the TraceContext class to obtain a set of trace records at the end of request execution for custom processing. For more information, see [ASP.NET Tracing Overview](~/add/includes/ajax-current-ext-md.md).       To enable tracing, set the `Trace` attribute in the [@ Page](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directive or the <xref:System.Web.TraceContext.IsEnabled%2A> property to `true`. When tracing is enabled, in addition to showing user-provided trace content, the <xref:System.Web.UI.Page> class automatically includes performance data, control-tree structure information, and state management content for every request."
  syntax:
    content: public sealed class TraceContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.TraceContext.#ctor(System.Web.HttpContext)
  id: '#ctor(System.Web.HttpContext)'
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: TraceContext(HttpContext)
  nameWithType: TraceContext.TraceContext(HttpContext)
  fullName: System.Web.TraceContext.TraceContext(HttpContext)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.TraceContext&quot;></xref> class."
  syntax:
    content: public TraceContext (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "An <xref href=&quot;System.Web.HttpContext&quot;></xref> that contains information about the current Web request."
  overload: System.Web.TraceContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.IsEnabled
  id: IsEnabled
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: IsEnabled
  nameWithType: TraceContext.IsEnabled
  fullName: System.Web.TraceContext.IsEnabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Gets or sets a value indicating whether tracing is enabled for the current Web request."
  remarks: "Use this flag to check whether your page or application should output tracing information before it writes anything to the trace log.       The value of the IsEnabled property depends on the settings in the  subsection of the `system.web` configuration section and the value of the `trace` attribute of the  directive. The tracing option set in the page directive takes precedence over the option set in the configuration file. Setting the IsEnabled value programmatically takes precedence over both the page directive attribute and the configuration setting.      > [!NOTE] >  If you set the IsEnabled property to `true` for an entire application, you must explicitly set this property to `false` for any page in the application for which you do not want tracing information displayed."
  example:
  - "The following code example demonstrates how you can determine whether tracing is enabled for a page. The code iterates through the rows in a dataset, writing trace statements for each row in that dataset.  \n  \n [!code-cs[Classic TraceContext.IsEnabled Example#1](~/add/codesnippet/csharp/p-system.web.tracecontex_4_1.cs)]\n [!code-vb[Classic TraceContext.IsEnabled Example#1](~/add/codesnippet/visualbasic/p-system.web.tracecontex_4_1.vb)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if tracing is enabled; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.TraceContext.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.TraceFinished
  id: TraceFinished
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: TraceFinished
  nameWithType: TraceContext.TraceFinished
  fullName: System.Web.TraceContext.TraceFinished
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Raised by the <xref href=&quot;System.Web.TraceContext&quot;></xref> object to expose trace messages after all request information is gathered."
  remarks: "The TraceFinished event is raised during the `EndRequest` stage of HTTP request processing. It is raised by a <xref:System.Web.TraceContext> object after all request information is gathered, to expose the collection of <xref:System.Web.TraceContextRecord> messages to registered <xref:System.Web.TraceContextEventHandler> delegates."
  example:
  - "The following code example demonstrates how you can register a <xref:System.Web.TraceContextEventHandler> to handle the TraceFinished event. In this example, the delegate iterates through the trace messages and writes them to the response stream; however, you could write the same information to a database or a profiling tool consumer.  \n  \n [!code-cs[System.Web.Trace_3#1](~/add/codesnippet/csharp/e-system.web.tracecontex_1.aspx)]\n [!code-vb[System.Web.Trace_3#1](~/add/codesnippet/visualbasic/e-system.web.tracecontex_1.aspx)]"
  syntax:
    content: public event System.Web.TraceContextEventHandler TraceFinished;
    return:
      type: System.Web.TraceContextEventHandler
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.TraceMode
  id: TraceMode
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: TraceMode
  nameWithType: TraceContext.TraceMode
  fullName: System.Web.TraceContext.TraceMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Gets or sets the sorted order in which trace messages should be output to a requesting browser."
  remarks: "Trace messages can be sorted in the order they were processed, or alphabetically by user-defined category."
  example:
  - "The following code example demonstrates how you can sort a page's trace statements alphabetically by the categories that you have assigned to the statements.  \n  \n [!code-cs[Classic TraceContext.TraceMode Example#1](~/add/codesnippet/csharp/p-system.web.tracecontex_5_1.aspx)]\n [!code-vb[Classic TraceContext.TraceMode Example#1](~/add/codesnippet/visualbasic/p-system.web.tracecontex_5_1.aspx)]"
  syntax:
    content: public System.Web.TraceMode TraceMode { get; set; }
    return:
      type: System.Web.TraceMode
      description: "One of the <xref href=&quot;System.Web.TraceMode&quot;></xref> enumeration values. The default is the setting specified by the <xref uid=&quot;langword_csharp_traceMode&quot; name=&quot;traceMode&quot; href=&quot;&quot;></xref> attribute in the <xref uid=&quot;langword_csharp_trace&quot; name=&quot;trace&quot; href=&quot;&quot;></xref> section of a configuration file, whose default is <xref uid=&quot;langword_csharp_SortByTime&quot; name=&quot;SortByTime&quot; href=&quot;&quot;></xref>."
  overload: System.Web.TraceContext.TraceMode*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The selected value is not one of the <xref href=&quot;System.Web.TraceMode&quot;></xref> enumeration values."
  platform:
  - net462
- uid: System.Web.TraceContext.Warn(System.String)
  id: Warn(System.String)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Warn(String)
  nameWithType: TraceContext.Warn(String)
  fullName: System.Web.TraceContext.Warn(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Writes a trace message to the trace log. All warnings appear in the log as red text."
  remarks: "Every time the <xref:System.Web.TraceContext.Warn%2A> method is called, a <xref:System.Web.TraceContext> trace message is added to the <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> messages collection, which is accessible when you handle the <xref:System.Web.TraceContext.TraceFinished> event. The message is added with its <xref:System.Web.TraceContextRecord.IsWarning%2A> property set to `true` and its <xref:System.Web.TraceContextRecord.ErrorInfo%2A> property set to `null`."
  syntax:
    content: public void Warn (string message);
    parameters:
    - id: message
      type: System.String
      description: "The trace message to write to the log."
  overload: System.Web.TraceContext.Warn*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.Warn(System.String,System.String)
  id: Warn(System.String,System.String)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Warn(String,String)
  nameWithType: TraceContext.Warn(String,String)
  fullName: System.Web.TraceContext.Warn(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Writes trace information to the trace log, including any user-defined categories and trace messages. All warnings appear in the log as red text."
  remarks: "Every time the <xref:System.Web.TraceContext.Warn%2A> method is called, a <xref:System.Web.TraceContext> trace message is added to the <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> messages collection, which is accessible when you handle the <xref:System.Web.TraceContext.TraceFinished> event. The message is added with its <xref:System.Web.TraceContextRecord.IsWarning%2A> property set to `true` and its <xref:System.Web.TraceContextRecord.ErrorInfo%2A> property set to `null`."
  syntax:
    content: public void Warn (string category, string message);
    parameters:
    - id: category
      type: System.String
      description: "The trace category that receives the message."
    - id: message
      type: System.String
      description: "The trace message to write to the log."
  overload: System.Web.TraceContext.Warn*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.Warn(System.String,System.String,System.Exception)
  id: Warn(System.String,System.String,System.Exception)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Warn(String,String,Exception)
  nameWithType: TraceContext.Warn(String,String,Exception)
  fullName: System.Web.TraceContext.Warn(String,String,Exception)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Writes trace information to the trace log, including any user-defined categories, trace messages, and error information. All warnings appear in the log as red text."
  remarks: "Every time the <xref:System.Web.TraceContext.Warn%2A> method is called, a <xref:System.Web.TraceContext> trace message is added to the <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> messages collection, which is accessible when you handle the <xref:System.Web.TraceContext.TraceFinished> event. The message is added with its <xref:System.Web.TraceContextRecord.IsWarning%2A> property set to `true`, and the <xref:System.Web.TraceContextRecord.ErrorInfo%2A> property is set to the object passed by the `errorInfo` parameter."
  example:
  - "The following code example demonstrates how to call the <xref:System.Web.TraceContext.Write%2A> method to write an error trace message to the trace log. In this example, different exceptions are traced as errors and warnings. When the page throws an <xref:System.ArgumentException>, it writes a warning message using the <xref:System.Web.TraceContext.Warn%2A> method. When the page throws an <xref:System.InvalidOperationException>, it writes an error message using the <xref:System.Web.TraceContext.Write%2A> method.  \n  \n [!code-cs[System.Web.Trace_4#1](~/add/codesnippet/csharp/m-system.web.tracecontex_1_1.aspx)]\n [!code-vb[System.Web.Trace_4#1](~/add/codesnippet/visualbasic/m-system.web.tracecontex_1_1.aspx)]"
  syntax:
    content: public void Warn (string category, string message, Exception errorInfo);
    parameters:
    - id: category
      type: System.String
      description: "The trace category that receives the message."
    - id: message
      type: System.String
      description: "The trace message to write to the log."
    - id: errorInfo
      type: System.Exception
      description: "An <xref:System.Exception> that contains information about the error."
  overload: System.Web.TraceContext.Warn*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.Write(System.String)
  id: Write(System.String)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Write(String)
  nameWithType: TraceContext.Write(String)
  fullName: System.Web.TraceContext.Write(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Writes a trace message to the trace log."
  remarks: "Every time the <xref:System.Web.TraceContext.Write%2A> method is called, a <xref:System.Web.TraceContext> trace message is added to the <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> messages collection, which is accessible when you handle the <xref:System.Web.TraceContext.TraceFinished> event. The message is added with its <xref:System.Web.TraceContextRecord.IsWarning%2A> property set to `false` and its <xref:System.Web.TraceContextRecord.ErrorInfo%2A> property set to `null`."
  syntax:
    content: public void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "The trace message to write to the log."
  overload: System.Web.TraceContext.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: TraceContext.Write(String,String)
  fullName: System.Web.TraceContext.Write(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Writes trace information to the trace log, including a message and any user-defined categories."
  remarks: "Every time the <xref:System.Web.TraceContext.Write%2A> method is called, a <xref:System.Web.TraceContext> trace message is added to the <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> messages collection, which is accessible when you handle the <xref:System.Web.TraceContext.TraceFinished> event. The message is added with its <xref:System.Web.TraceContextRecord.IsWarning%2A> property set to `false` and its <xref:System.Web.TraceContextRecord.ErrorInfo%2A> property set to `null`."
  example:
  - "The following code example demonstrates how to call the Write method to write an error trace message to the trace log. In this example, the delegate iterates through the trace messages and writes them as an HTML table; however, you can write the same information to a database or a profiling tool consumer.  \n  \n [!code-cs[System.Web.Trace_5#1](~/add/codesnippet/csharp/m-system.web.tracecontex_0_1.aspx)]\n [!code-vb[System.Web.Trace_5#1](~/add/codesnippet/visualbasic/m-system.web.tracecontex_0_1.aspx)]"
  syntax:
    content: public void Write (string category, string message);
    parameters:
    - id: category
      type: System.String
      description: "The trace category that receives the message."
    - id: message
      type: System.String
      description: "The trace message to write to the log."
  overload: System.Web.TraceContext.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.Write(System.String,System.String,System.Exception)
  id: Write(System.String,System.String,System.Exception)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Write(String,String,Exception)
  nameWithType: TraceContext.Write(String,String,Exception)
  fullName: System.Web.TraceContext.Write(String,String,Exception)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Writes trace information to the trace log, including any user-defined categories, trace messages, and error information."
  remarks: "Every time the <xref:System.Web.TraceContext.Write%2A> method is called, a <xref:System.Web.TraceContext> trace message is added to the <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> messages collection, which is accessible when you handle the <xref:System.Web.TraceContext.TraceFinished> event. The message is added with its <xref:System.Web.TraceContextRecord.IsWarning%2A> property set to `false`, and the <xref:System.Web.TraceContextRecord.ErrorInfo%2A> property is set to the object passed by the `errorInfo` parameter."
  example:
  - "The following code example demonstrates how to call the Write method to write an error trace message to the trace log. In this example, different exceptions are traced as errors and warnings. When the page throws an <xref:System.ArgumentException>, it writes a warning message using the <xref:System.Web.TraceContext.Warn%2A> method. When the page throws an <xref:System.InvalidOperationException>, it writes an error message using the <xref:System.Web.TraceContext.Write%2A> method.  \n  \n [!code-cs[System.Web.Trace_4#1](~/add/codesnippet/csharp/m-system.web.tracecontex_2_1.aspx)]\n [!code-vb[System.Web.Trace_4#1](~/add/codesnippet/visualbasic/m-system.web.tracecontex_2_1.aspx)]"
  syntax:
    content: public void Write (string category, string message, Exception errorInfo);
    parameters:
    - id: category
      type: System.String
      description: "The trace category that receives the message."
    - id: message
      type: System.String
      description: "The trace message to write to the log."
    - id: errorInfo
      type: System.Exception
      description: "An <xref:System.Exception> that contains information about the error."
  overload: System.Web.TraceContext.Write*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Web.TraceContext.#ctor(System.Web.HttpContext)
  parent: System.Web.TraceContext
  isExternal: false
  name: TraceContext(HttpContext)
  nameWithType: TraceContext.TraceContext(HttpContext)
  fullName: System.Web.TraceContext.TraceContext(HttpContext)
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.TraceContext.IsEnabled
  parent: System.Web.TraceContext
  isExternal: false
  name: IsEnabled
  nameWithType: TraceContext.IsEnabled
  fullName: System.Web.TraceContext.IsEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.TraceContext.TraceFinished
  parent: System.Web.TraceContext
  isExternal: false
  name: TraceFinished
  nameWithType: TraceContext.TraceFinished
  fullName: System.Web.TraceContext.TraceFinished
- uid: System.Web.TraceContextEventHandler
  parent: System.Web
  isExternal: false
  name: TraceContextEventHandler
  nameWithType: TraceContextEventHandler
  fullName: System.Web.TraceContextEventHandler
- uid: System.Web.TraceContext.TraceMode
  parent: System.Web.TraceContext
  isExternal: false
  name: TraceMode
  nameWithType: TraceContext.TraceMode
  fullName: System.Web.TraceContext.TraceMode
- uid: System.Web.TraceMode
  parent: System.Web
  isExternal: false
  name: TraceMode
  nameWithType: TraceMode
  fullName: System.Web.TraceMode
- uid: System.Web.TraceContext.Warn(System.String)
  parent: System.Web.TraceContext
  isExternal: false
  name: Warn(String)
  nameWithType: TraceContext.Warn(String)
  fullName: System.Web.TraceContext.Warn(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.TraceContext.Warn(System.String,System.String)
  parent: System.Web.TraceContext
  isExternal: false
  name: Warn(String,String)
  nameWithType: TraceContext.Warn(String,String)
  fullName: System.Web.TraceContext.Warn(String,String)
- uid: System.Web.TraceContext.Warn(System.String,System.String,System.Exception)
  parent: System.Web.TraceContext
  isExternal: false
  name: Warn(String,String,Exception)
  nameWithType: TraceContext.Warn(String,String,Exception)
  fullName: System.Web.TraceContext.Warn(String,String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.TraceContext.Write(System.String)
  parent: System.Web.TraceContext
  isExternal: false
  name: Write(String)
  nameWithType: TraceContext.Write(String)
  fullName: System.Web.TraceContext.Write(String)
- uid: System.Web.TraceContext.Write(System.String,System.String)
  parent: System.Web.TraceContext
  isExternal: false
  name: Write(String,String)
  nameWithType: TraceContext.Write(String,String)
  fullName: System.Web.TraceContext.Write(String,String)
- uid: System.Web.TraceContext.Write(System.String,System.String,System.Exception)
  parent: System.Web.TraceContext
  isExternal: false
  name: Write(String,String,Exception)
  nameWithType: TraceContext.Write(String,String,Exception)
  fullName: System.Web.TraceContext.Write(String,String,Exception)
- uid: System.Web.TraceContext.#ctor*
  parent: System.Web.TraceContext
  isExternal: false
  name: TraceContext
  nameWithType: TraceContext.TraceContext
- uid: System.Web.TraceContext.IsEnabled*
  parent: System.Web.TraceContext
  isExternal: false
  name: IsEnabled
  nameWithType: TraceContext.IsEnabled
- uid: System.Web.TraceContext.TraceMode*
  parent: System.Web.TraceContext
  isExternal: false
  name: TraceMode
  nameWithType: TraceContext.TraceMode
- uid: System.Web.TraceContext.Warn*
  parent: System.Web.TraceContext
  isExternal: false
  name: Warn
  nameWithType: TraceContext.Warn
- uid: System.Web.TraceContext.Write*
  parent: System.Web.TraceContext
  isExternal: false
  name: Write
  nameWithType: TraceContext.Write
