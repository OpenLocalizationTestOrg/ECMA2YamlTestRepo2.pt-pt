### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  id: WorkflowPersistenceService
  children:
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)
  - System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)
  langs:
  - csharp
  name: WorkflowPersistenceService
  nameWithType: WorkflowPersistenceService
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  type: Class
  summary: "A classe base abstrata de persistência que todos os serviços são derivados."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]Quando ocorrem determinadas condições enquanto o fluxo de trabalho está em execução, o motor de execução do fluxo de trabalho mantém informações de estado sobre a instância de fluxo de trabalho. Persistência pode ocorrer, por exemplo, quando uma conclusão de transação Atómica, quando a instância de fluxo de trabalho fica inativa, quando o anfitrião chama <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName>na instância do fluxo de trabalho ou quando uma instância de fluxo de trabalho é terminada ou termina.</xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=fullName> Quando a semântica de motor de execução do fluxo de trabalho da sua organização ditarem que deve ocorrer a persistência, o motor de execução do fluxo de trabalho chama os métodos que são fornecidos por um serviço de persistência para guardar informações de estado sobre a instância de fluxo de trabalho. Da mesma forma, quando o motor de execução do fluxo de trabalho tem de restaurar uma instância de fluxo de trabalho persistente anterior, chama os métodos que são fornecidos pelo serviço de persistência carregar estas informações de estado. O motor de execução do fluxo de trabalho processa todos os semântica sobre quando efetuar a persistência. O serviço de persistência processa, na verdade, guardar e carregar as informações de estado do fluxo de trabalho de ou para um arquivo de dados.       Pode criar um serviço de persistência ao efetuar a derivação de uma classe da classe de WorkflowPersistenceService.  Pode adicionar o serviço de persistência para o motor de execução do fluxo de trabalho chamando <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>ou efetuando uma entrada adequada no ficheiro de configuração de aplicação.</xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> O <xref:System.Workflow.Runtime.WorkflowRuntime>apenas deve conter um serviço de persistência.</xref:System.Workflow.Runtime.WorkflowRuntime> Windows Workflow Foundation fornece o <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>classe, um serviço de persistência de out-of-box, o que pode utilizar como está ou expandir.</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>       O motor de execução do fluxo de trabalho tem semânticas para o bloqueio de informações de estado do fluxo de trabalho para utilização em ambientes onde os serviços de persistência que são executados nos diferentes processos podem ter acesso a um único arquivo de dados. A classe de WorkflowPersistenceService fornece a capacidade para suportar esta funcionalidade do motor de runtime do fluxo de trabalho, fornecendo um parâmetro para <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>que especifica se as informações de estado de uma instância de fluxo de trabalho devem ser desbloqueadas no arquivo de dados e fornecendo um método <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A>Desbloquear anteriormente bloqueado informações de estado do fluxo de trabalho.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> Num serviço de persistência que implementa o bloqueio de uma chamada para <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>deverá bloquear as informações de estado para uma instância de fluxo de trabalho.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>       O serviço de persistência deve acionar um <xref:System.Workflow.Runtime.Hosting.PersistenceException>se não conseguir guardar informações de estado ao seu arquivo de dados ou carregar informações de estado do seu arquivo de dados.</xref:System.Workflow.Runtime.Hosting.PersistenceException> O motor de execução do fluxo de trabalho espera este comportamento.       Um mecanismo de lotes é fornecido para serviços que utilizam um arquivo de durável para guardar informações de estado do fluxo de trabalho. É importante nestes casos, para manter a consistência entre o armazenamento durável que é utilizado pelo serviço de persistência e o estado interno do motor de runtime do fluxo de trabalho. Pode adicionar a funcionalidade definido pela <xref:System.Workflow.Runtime.IPendingWork>interface ao seu serviço e, em seguida, participar em lotes de transação de fluxo de trabalho fornecidas <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>adicionando as alterações para o arquivo de dados como itens de trabalho às <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> </xref:System.Workflow.Runtime.IPendingWork> O próprio arquivo durável deve implementar o <xref:System.Transactions.IEnlistmentNotification>interface, para que as informações de fluxo de trabalho não são continuadas incorretamente em caso de uma reversão de transação.</xref:System.Transactions.IEnlistmentNotification> Para obter mais informações, consulte <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A>ou <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A>"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public abstract class WorkflowPersistenceService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  inheritance:
  - System.Object
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  implements: []
  inheritedMembers:
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State
  - System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor
  id: '#ctor'
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: WorkflowPersistenceService()
  nameWithType: WorkflowPersistenceService.WorkflowPersistenceService()
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.WorkflowPersistenceService()
  type: Constructor
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada numa classe derivada, inicializa uma nova instância do <xref href=&quot;System.Workflow.Runtime.Hosting.WorkflowPersistenceService&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following example demonstrates creating an instance of the `SqlWorkflowPersistenceService` class (derived from `WorkflowPersistenceService`). This example is from the Nested Exception Handlers SDK sample, from the Program.cs class.  For more information, see the [Nested Exception Handlers Sample](http://msdn.microsoft.com/en-us/d1da0209-842b-41c8-9b7c-0cbaa1034265).  \n  \n [!code-cs[WF_Samples#161](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#161)]\n [!code-vb[WF_Samples#161](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#161)]"
  syntax:
    content: protected WorkflowPersistenceService ();
    parameters: []
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)
  id: GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: GetDefaultSerializedForm(Activity)
  nameWithType: WorkflowPersistenceService.GetDefaultSerializedForm(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Obtém o formato serializado predefinido a <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>."
  syntax:
    content: protected static byte[] GetDefaultSerializedForm (System.Workflow.ComponentModel.Activity activity);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "O <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> cujo formato serializado for solicitado."
    return:
      type: System.Byte[]
      description: "Formato predefinido serializados o <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)
  id: GetIsBlocked(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: GetIsBlocked(Activity)
  nameWithType: WorkflowPersistenceService.GetIsBlocked(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Indica se a determinada atividade está bloqueada."
  syntax:
    content: protected static bool GetIsBlocked (System.Workflow.ComponentModel.Activity rootActivity);
    parameters:
    - id: rootActivity
      type: System.Workflow.ComponentModel.Activity
      description: "A atividade raiz da instância do fluxo de trabalho."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a determinada atividade está bloqueada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)
  id: GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: GetSuspendOrTerminateInfo(Activity)
  nameWithType: WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Obtém a terminação ou suspenda as informações da atividade fornecida."
  syntax:
    content: protected static string GetSuspendOrTerminateInfo (System.Workflow.ComponentModel.Activity rootActivity);
    parameters:
    - id: rootActivity
      type: System.Workflow.ComponentModel.Activity
      description: "A atividade raiz da instância do fluxo de trabalho."
    return:
      type: System.String
      description: "A <xref:System.String>que contém a terminação ou suspender informações.</xref:System.String>"
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)
  id: GetWorkflowStatus(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: GetWorkflowStatus(Activity)
  nameWithType: WorkflowPersistenceService.GetWorkflowStatus(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Obtém o estado do fluxo de trabalho."
  syntax:
    content: protected static System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus (System.Workflow.ComponentModel.Activity rootActivity);
    parameters:
    - id: rootActivity
      type: System.Workflow.ComponentModel.Activity
      description: "A atividade raiz da instância do fluxo de trabalho."
    return:
      type: System.Workflow.Runtime.WorkflowStatus
      description: "A <xref href=&quot;System.Workflow.Runtime.WorkflowStatus&quot;> </xref> valor de enumeração que indica o estado do fluxo de trabalho."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)
  id: LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: LoadCompletedContextActivity(Guid,Activity)
  nameWithType: WorkflowPersistenceService.LoadCompletedContextActivity(Guid,Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(Guid,Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada numa classe derivada, carrega o âmbito concluído especificado para a memória."
  remarks: "O motor de execução do fluxo de trabalho utiliza LoadCompletedContextActivity para implementar a compensação. Tem de restaurar uma cópia idêntica do âmbito concluído. Para tal, tem de restaurar um <xref:System.IO.Stream>partir a representação do âmbito concluído nos dados de arquivo.</xref:System.IO.Stream> Em seguida, tem de passar esta <xref:System.IO.Stream>para um dos métodos sobrecarregados de <xref:System.Workflow.ComponentModel.Activity.Load%2A>para efetuar a anulação da serialização do âmbito.</xref:System.Workflow.ComponentModel.Activity.Load%2A> </xref:System.IO.Stream>       Se o serviço de persistência não é possível carregar o âmbito concluído do seu arquivo de dados, deve acionar um <xref:System.Workflow.Runtime.Hosting.PersistenceException>com uma mensagem adequada.</xref:System.Workflow.Runtime.Hosting.PersistenceException>"
  example:
  - "The following example demonstrates an implementation of the `LoadCompletedContextActivity` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#269](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#269)]\n [!code-vb[WF_Samples#269](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#269)]"
  syntax:
    content: protected abstract System.Workflow.ComponentModel.Activity LoadCompletedContextActivity (Guid scopeId, System.Workflow.ComponentModel.Activity outerActivity);
    parameters:
    - id: scopeId
      type: System.Guid
      description: "O <xref:System.Guid>do âmbito concluído.</xref:System.Guid>"
    - id: outerActivity
      type: System.Workflow.ComponentModel.Activity
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> que representa a atividade que encloses o âmbito concluído."
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> que representa o âmbito concluído."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)
  id: LoadWorkflowInstanceState(System.Guid)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: LoadWorkflowInstanceState(Guid)
  nameWithType: WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada numa classe derivada, carrega o estado da instância do fluxo de trabalho especificado para a memória."
  remarks: "Tem de restaurar uma cópia idêntica da atividade. Para tal, tem de restaurar um <xref:System.IO.Stream>partir a representação da instância do fluxo de trabalho no arquivo de dados; em seguida, tem de transmitir este <xref:System.IO.Stream>do sobrecarregado <xref:System.Workflow.ComponentModel.Activity.Load%2A>Estado de instância de métodos para anular a serialização do fluxo de trabalho.</xref:System.Workflow.ComponentModel.Activity.Load%2A> </xref:System.IO.Stream> </xref:System.IO.Stream> Se o serviço de persistência não é possível carregar o estado da instância de fluxo de trabalho a partir do seu arquivo de dados, deve acionar um <xref:System.Workflow.Runtime.Hosting.PersistenceException>com uma mensagem adequada.</xref:System.Workflow.Runtime.Hosting.PersistenceException>       O motor de execução do fluxo de trabalho implementa a semântica de bloqueio para restringir o acesso a um Estado de instância de fluxo de trabalho que é guardado num arquivo de dados. Isto pode ser acedido pelos serviços de persistência que são executados em vários processos. A semântica de bloqueio é concebida para impedir que os serviços de persistência que são executados em dois processos diferentes de carregar a mesma instância de fluxo de trabalho na memória ao mesmo tempo. Dependendo do tipo de ambiente que o serviço de persistência foi concebido para suportar, pode escolher se pretende suportam esta funcionalidade. Se optar por suportar a semântica de bloqueio de tempo de execução e se este estado de instância de fluxo de trabalho tiver sido anteriormente bloqueado por outro processo, deve acionar um <xref:System.Workflow.Runtime.WorkflowOwnershipException>.</xref:System.Workflow.Runtime.WorkflowOwnershipException> Caso contrário, deverá bloquear acesso para o estado da instância de fluxo de trabalho no arquivo de dados. O estado da instância de fluxo de trabalho pode ser desbloqueado por uma chamada para <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A>ou uma chamada para <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>com o parâmetro de desbloqueio definido como `true`.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> </xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A>"
  example:
  - "The following example demonstrates an implementation of the `LoadWorkflowInstanceState` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#266](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#266)]\n [!code-vb[WF_Samples#266](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#266)]"
  syntax:
    content: protected abstract System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState (Guid instanceId);
    parameters:
    - id: instanceId
      type: System.Guid
      description: "O <xref:System.Guid>da atividade raiz da instância do fluxo de trabalho.</xref:System.Guid>"
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> que representa a atividade raiz da instância do fluxo de trabalho."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)
  id: RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: RestoreFromDefaultSerializedForm(Byte[],Activity)
  nameWithType: WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[],Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[],Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Restaura o <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> do respetivo formato serializado."
  remarks: ''
  example:
  - "The following example demonstrates an implementation of the `RestoreFromDefaultSerializedForm` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#269](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#269)]\n [!code-vb[WF_Samples#269](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#269)]"
  syntax:
    content: protected static System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm (byte[] activityBytes, System.Workflow.ComponentModel.Activity outerActivity);
    parameters:
    - id: activityBytes
      type: System.Byte[]
      description: "O formato serializado <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>."
    - id: outerActivity
      type: System.Workflow.ComponentModel.Activity
      description: "Exterior <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>, que contém o <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> para restaurar."
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "O restauro <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)
  id: SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: SaveCompletedContextActivity(Activity)
  nameWithType: WorkflowPersistenceService.SaveCompletedContextActivity(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada numa classe derivada, guarda o âmbito concluído especificado para um arquivo de dados."
  remarks: "O motor de execução do fluxo de trabalho guarda o estado das atividades de âmbito concluído para implementar a compensação. Tem de chamar um do sobrecarregado <xref:System.Workflow.ComponentModel.Activity.Save%2A>métodos de serialização `activity` para um <xref:System.IO.Stream>; em seguida, pode optar por adicionalmente processar o <xref:System.IO.Stream>antes de escrever no arquivo de dados.</xref:System.IO.Stream> </xref:System.IO.Stream> </xref:System.Workflow.ComponentModel.Activity.Save%2A> No entanto, quando o motor de runtime do fluxo de trabalho chama <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>, tem de restaurar uma cópia idêntica da atividade.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>       Tem de ser capaz de associar o âmbito concluído a respetiva instância de fluxo de trabalho envolvente para marcar o âmbito como desnecessárias no arquivo de dados quando a instância de fluxo de trabalho conclusão ou é terminada. Por conseguinte, também deve guardar o <xref:System.Guid>da instância de fluxo de trabalho que está associada ao âmbito concluída; Isto pode ser obtido a partir o <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>propriedade do <xref:System.Workflow.Runtime.WorkflowInstance>associado `activity`.</xref:System.Workflow.Runtime.WorkflowInstance> </xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> </xref:System.Guid>       <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>assume a <xref:System.Guid>do âmbito concluído como parâmetro.</xref:System.Guid></xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> Por conseguinte, também tem de guardar o <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A>propriedade associada `activity`.</xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> Esta propriedade pode ser referenciada através de <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty>campo `activity`.</xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty>       Se estiver a implementar um serviço de persistência que utiliza um arquivo de durável, para manter a consistência com o estado interno do motor de runtime do fluxo de trabalho, deve participar na transação de fluxo de trabalho para diferir real de escrita para o arquivo de durável até que ponto consolidar um fluxo de trabalho de criação de batches. Para participar na criação de batches, adicione um item de trabalho para o <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>propriedade representa as alterações pendentes para a base de dados e implementa o <xref:System.Workflow.Runtime.IPendingWork>interface no seu serviço de persistência.</xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>       Se não é possível guardar o âmbito concluído para o arquivo de dados, deve acionar um <xref:System.Workflow.Runtime.Hosting.PersistenceException>com uma mensagem de erro apropriada.</xref:System.Workflow.Runtime.Hosting.PersistenceException>"
  example:
  - "The following example demonstrates an implementation of the `SaveCompletedContextActivity` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#268](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#268)]\n [!code-vb[WF_Samples#268](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#268)]"
  syntax:
    content: protected abstract void SaveCompletedContextActivity (System.Workflow.ComponentModel.Activity activity);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> que representa o âmbito concluído."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)
  id: SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: SaveWorkflowInstanceState(Activity,Boolean)
  nameWithType: WorkflowPersistenceService.SaveWorkflowInstanceState(Activity,Boolean)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(Activity,Boolean)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando implementada numa classe derivada, guarda o estado da instância de fluxo de trabalho para um arquivo de dados."
  remarks: "Tem de chamar um do sobrecarregado <xref:System.Workflow.ComponentModel.Activity.Save%2A>métodos de serialização `rootActivity` para <xref:System.IO.Stream>.</xref:System.IO.Stream> </xref:System.Workflow.ComponentModel.Activity.Save%2A> Em seguida, pode optar por adicionalmente processar o <xref:System.IO.Stream>antes de escrever no arquivo de dados.</xref:System.IO.Stream> No entanto, quando o motor de runtime do fluxo de trabalho chama <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>, tem de restaurar uma cópia idêntica da atividade raiz.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> Se não é possível guardar o estado da instância de fluxo de trabalho para o arquivo de dados, deve acionar um <xref:System.Workflow.Runtime.Hosting.PersistenceException>com uma mensagem de erro apropriada.</xref:System.Workflow.Runtime.Hosting.PersistenceException>       O motor de execução do fluxo de trabalho fornece semântica de bloqueio para restringir o acesso a um Estado de instância de fluxo de trabalho que é guardado no arquivo de dados. Isto pode ser acedido pelos serviços de persistência em execução em vários anfitriões e apontar para o mesmo arquivo de dados. A semântica de bloqueio é concebida para impedir que os serviços de persistência que são executados em dois tempos de execução do fluxo de trabalho diferente de carregar a mesma instância de fluxo de trabalho na memória ao mesmo tempo. Dependendo do tipo de ambiente de que serviço de persistência foi concebido para suportar, pode escolher se pretende suportam esta funcionalidade. Se optar por suportar a semântica de bloqueio de tempo de execução, em seguida, se um serviço de persistência tentar guardar o estado de instância de fluxo de trabalho que foi anteriormente bloqueado por outro serviço de persistência, deve acionar um <xref:System.Workflow.Runtime.WorkflowOwnershipException>.</xref:System.Workflow.Runtime.WorkflowOwnershipException> Se `unlock` é `true`, deve desbloquear o acesso para o estado da instância de fluxo de trabalho após o guardou.       <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>assume a <xref:System.Guid>da instância do fluxo de trabalho como parâmetro.</xref:System.Guid></xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> Por conseguinte, deve guardar esta <xref:System.Guid>.</xref:System.Guid> Também pode utilizar este <xref:System.Guid>para associar a instância de fluxo de trabalho com os Estados guardados dos respetivos âmbitos concluídos.</xref:System.Guid> Deve fazer isto, porque tem de ser capaz de marcar estes âmbitos concluídos conforme desnecessárias quando a instância de fluxo de trabalho for concluída.       O motor de tempo de execução do fluxo de trabalho chama SaveWorkflowInstanceState uma hora final quando a instância de fluxo de trabalho é concluída ou terminada. Por conseguinte, se <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A>é igual ao <xref:System.Workflow.Runtime.WorkflowStatus>ou <xref:System.Workflow.Runtime.WorkflowStatus>, pode eliminar em segurança a instância de fluxo de trabalho e todos os respetivos âmbitos concluídos associados do seu arquivo de dados.</xref:System.Workflow.Runtime.WorkflowStatus> </xref:System.Workflow.Runtime.WorkflowStatus> </xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> Em alternativa, pode subscrever o <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>ou <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>eventos para determinar quando é seguro eliminar registos associados com a instância de fluxo de trabalho.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> </xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> Se é realmente eliminar os registos do seu arquivo de dados depende da sua implementação.       Se implementar um serviço de persistência que utiliza um arquivo de durável, em seguida, para manter a consistência com o estado interno do motor de runtime do fluxo de trabalho, deve participar na transação de fluxo de trabalho para diferir real de escrita para o arquivo de durável até que ponto consolidar um fluxo de trabalho de criação de batches. Para participar na criação de batches, adicione um item de trabalho que representa as alterações pendentes para o arquivo durável para o <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>propriedade e implemente o <xref:System.Workflow.Runtime.IPendingWork>interface no seu serviço de persistência.</xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>"
  example:
  - "The following example demonstrates an implementation of the `SaveWorkflowInstanceState` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#264](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#264)]\n [!code-vb[WF_Samples#264](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#264)]"
  syntax:
    content: protected abstract void SaveWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity, bool unlock);
    parameters:
    - id: rootActivity
      type: System.Workflow.ComponentModel.Activity
      description: "A atividade raiz da instância do fluxo de trabalho."
    - id: unlock
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se a instância de fluxo de trabalho não deve ser bloqueada; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se a instância de fluxo de trabalho deve ser bloqueada."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)
  id: UnloadOnIdle(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: UnloadOnIdle(Activity)
  nameWithType: WorkflowPersistenceService.UnloadOnIdle(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Determina se deve ser descarregado um fluxo de trabalho quando inativo."
  remarks: ''
  example:
  - "The following example demonstrates an implementation of the `UnloadOnIdle` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#270](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#270)]\n [!code-vb[WF_Samples#270](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#270)]"
  syntax:
    content: protected abstract bool UnloadOnIdle (System.Workflow.ComponentModel.Activity activity);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Um <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> que representa o âmbito concluído."
    return:
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, o motor de execução do fluxo de trabalho efetua a descarga de fluxo de trabalho especificado quando torna-se inativo."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)
  id: UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  langs:
  - csharp
  name: UnlockWorkflowInstanceState(Activity)
  nameWithType: WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime.Hosting
  summary: "Quando substituí-lo de uma classe derivada, desbloqueia o estado da instância de fluxo de trabalho."
  remarks: "Este método é abstracto, pelo que não contém uma implementação predefinida bloquear e desbloquear.       Ao implementar um serviço de persistência personalizado, se pretender implementar um esquema de bloqueio terá de substituir este método e fornecer um mecanismo de desbloquear bloqueio no <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>método baseado no valor do parâmetro de desbloqueio.</xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>"
  example:
  - "The following example demonstrates an implementation of the `UnlockWorkflowInstanceState` method. This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file. For more information, see [Custom Persistence Service Sample](http://msdn.microsoft.com/en-us/869dfadf-5298-4551-bc80-f4cf7918729d).  \n  \n [!code-cs[WF_Samples#267](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#267)]\n [!code-vb[WF_Samples#267](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#267)]"
  syntax:
    content: protected abstract void UnlockWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity);
    parameters:
    - id: rootActivity
      type: System.Workflow.ComponentModel.Activity
      description: "A atividade raiz da instância do fluxo de trabalho."
  overload: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
  isExternal: false
  name: System.Workflow.Runtime.Hosting.WorkflowRuntimeService
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: WorkflowPersistenceService()
  nameWithType: WorkflowPersistenceService.WorkflowPersistenceService()
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.WorkflowPersistenceService()
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetDefaultSerializedForm(Activity)
  nameWithType: WorkflowPersistenceService.GetDefaultSerializedForm(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(Activity)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetIsBlocked(Activity)
  nameWithType: WorkflowPersistenceService.GetIsBlocked(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(Activity)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetSuspendOrTerminateInfo(Activity)
  nameWithType: WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(Activity)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetWorkflowStatus(Activity)
  nameWithType: WorkflowPersistenceService.GetWorkflowStatus(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(Activity)
- uid: System.Workflow.Runtime.WorkflowStatus
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowStatus
  nameWithType: WorkflowStatus
  fullName: System.Workflow.Runtime.WorkflowStatus
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: LoadCompletedContextActivity(Guid,Activity)
  nameWithType: WorkflowPersistenceService.LoadCompletedContextActivity(Guid,Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(Guid,Activity)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: LoadWorkflowInstanceState(Guid)
  nameWithType: WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(Guid)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: RestoreFromDefaultSerializedForm(Byte[],Activity)
  nameWithType: WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[],Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(Byte[],Activity)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: SaveCompletedContextActivity(Activity)
  nameWithType: WorkflowPersistenceService.SaveCompletedContextActivity(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(Activity)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: SaveWorkflowInstanceState(Activity,Boolean)
  nameWithType: WorkflowPersistenceService.SaveWorkflowInstanceState(Activity,Boolean)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(Activity,Boolean)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: UnloadOnIdle(Activity)
  nameWithType: WorkflowPersistenceService.UnloadOnIdle(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(Activity)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: UnlockWorkflowInstanceState(Activity)
  nameWithType: WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)
  fullName: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(Activity)
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: WorkflowPersistenceService
  nameWithType: WorkflowPersistenceService.WorkflowPersistenceService
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetDefaultSerializedForm
  nameWithType: WorkflowPersistenceService.GetDefaultSerializedForm
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetIsBlocked
  nameWithType: WorkflowPersistenceService.GetIsBlocked
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetSuspendOrTerminateInfo
  nameWithType: WorkflowPersistenceService.GetSuspendOrTerminateInfo
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: GetWorkflowStatus
  nameWithType: WorkflowPersistenceService.GetWorkflowStatus
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: LoadCompletedContextActivity
  nameWithType: WorkflowPersistenceService.LoadCompletedContextActivity
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: LoadWorkflowInstanceState
  nameWithType: WorkflowPersistenceService.LoadWorkflowInstanceState
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: RestoreFromDefaultSerializedForm
  nameWithType: WorkflowPersistenceService.RestoreFromDefaultSerializedForm
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: SaveCompletedContextActivity
  nameWithType: WorkflowPersistenceService.SaveCompletedContextActivity
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: SaveWorkflowInstanceState
  nameWithType: WorkflowPersistenceService.SaveWorkflowInstanceState
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: UnloadOnIdle
  nameWithType: WorkflowPersistenceService.UnloadOnIdle
- uid: System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState*
  parent: System.Workflow.Runtime.Hosting.WorkflowPersistenceService
  isExternal: false
  name: UnlockWorkflowInstanceState
  nameWithType: WorkflowPersistenceService.UnlockWorkflowInstanceState
