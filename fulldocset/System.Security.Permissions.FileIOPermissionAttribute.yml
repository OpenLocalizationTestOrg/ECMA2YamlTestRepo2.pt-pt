### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.FileIOPermissionAttribute
  id: FileIOPermissionAttribute
  children:
  - System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.FileIOPermissionAttribute.All
  - System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  - System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  - System.Security.Permissions.FileIOPermissionAttribute.Append
  - System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  - System.Security.Permissions.FileIOPermissionAttribute.CreatePermission
  - System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  - System.Security.Permissions.FileIOPermissionAttribute.Read
  - System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  - System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  - System.Security.Permissions.FileIOPermissionAttribute.Write
  langs:
  - csharp
  name: FileIOPermissionAttribute
  nameWithType: FileIOPermissionAttribute
  fullName: System.Security.Permissions.FileIOPermissionAttribute
  type: Class
  summary: "Allows security actions for <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref> to be applied to code using declarative security. This class cannot be inherited."
  remarks: "Files and directories are specified using absolute paths. When accessing files, a security check is performed when the file is created or opened. The security check is not done again unless the file is closed and reopened. Checking permissions when the file is first accessed minimizes the impact of the security check on application performance because opening a file happens only once, while reading and writing can happen multiple times.  \n  \n The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \n  \n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \n  \n> [!CAUTION]\n>  `Unrestricted` <xref:System.Security.Permissions.FileIOPermission> grants permission for all paths within a file system, including multiple pathnames that can be used to access a single given file. To <xref:System.Security.CodeAccessPermission.Deny%2A> access to a file, you must `Deny` all possible paths to the file. For example, if \\\\\\server\\share is mapped to the network drive X, to `Deny` access to \\\\\\server\\share\\file, you must `Deny` \\\\\\server\\share\\file, X:\\file and any other path that you can use to access the file."
  example:
  - "The following code example demonstrates how to request <xref:System.Security.Permissions.FileIOPermission> by using the FileIOPermissionAttribute class, indicating the only permission that is to be granted to the code.  \n  \n [!code-cpp[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/cpp/t-system.security.permis_3_1.cpp)]\n [!code-vb[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_3_1.vb)]\n [!code-cs[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/csharp/t-system.security.permis_3_1.cs)]  \n  \n The following example shows how to demand that the calling code has unrestricted <xref:System.Security.Permissions.FileIOPermission>. You typically make demands in managed libraries (DLLs) to help protect methods or classes from potentially harmful code.  \n  \n [!code-cpp[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/cpp/t-system.security.permis_3_2.cpp)]\n [!code-vb[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/visualbasic/t-system.security.permis_3_2.vb)]\n [!code-cs[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/csharp/t-system.security.permis_3_2.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class FileIOPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: FileIOPermissionAttribute(SecurityAction)
  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Permissions.FileIOPermissionAttribute&quot;></xref> class with the specified <xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref>."
  remarks: ''
  example:
  - "The following code example creates several instances of the <xref:System.Security.Permissions.FileIOPermissionAttribute> class to set varying levels of file I/O permissions.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/cpp/b53c5cc8-9649-49f3-9193-_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/csharp/b53c5cc8-9649-49f3-9193-_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/visualbasic/b53c5cc8-9649-49f3-9193-_1.vb)]"
  syntax:
    content: public FileIOPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "One of the <xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref> values."
  overload: System.Security.Permissions.FileIOPermissionAttribute.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>action</code> parameter is not a valid <xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.All
  id: All
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: All
  nameWithType: FileIOPermissionAttribute.All
  fullName: System.Security.Permissions.FileIOPermissionAttribute.All
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets full access for the file or directory that is specified by the string value."
  remarks: "This property sets access for a single file or directory. Use additional attributes to specify additional files and directories."
  example:
  - "The following code example sets the All property to grant full access to the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/cpp/p-system.security.permis_24_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/csharp/p-system.security.permis_24_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/visualbasic/p-system.security.permis_24_1.vb)]"
  syntax:
    content: public string All { get; set; }
    return:
      type: System.String
      description: "The absolute path of the file or directory for full access."
  overload: System.Security.Permissions.FileIOPermissionAttribute.All*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The get method is not supported for this property."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  id: AllFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: AllFiles
  nameWithType: FileIOPermissionAttribute.AllFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the permitted access to all files."
  remarks: "This property gets or sets the permitted access to all files on the local computer and network drives.       An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be determined by using a bitwise `AND` operation."
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "A bitwise combination of the <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref> values that represents the permissions for all files. The default is <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>."
  overload: System.Security.Permissions.FileIOPermissionAttribute.AllFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  id: AllLocalFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: AllLocalFiles
  nameWithType: FileIOPermissionAttribute.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the permitted access to all local files."
  remarks: "Local files are files contained on the local computer. Any files that are not accessed through a network drive are local files.       An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be determined by using a bitwise `AND` operation."
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "A bitwise combination of the <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref> values that represents the permissions for all local files. The default is <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>."
  overload: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.Append
  id: Append
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: Append
  nameWithType: FileIOPermissionAttribute.Append
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Append
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets append access for the file or directory that is specified by the string value."
  remarks: "This property sets access for a single file or directory. Use additional attributes to specify additional files and directories."
  example:
  - "The following code example sets the Append property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/cpp/p-system.security.permis_6_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/csharp/p-system.security.permis_6_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/visualbasic/p-system.security.permis_6_1.vb)]"
  syntax:
    content: public string Append { get; set; }
    return:
      type: System.String
      description: "The absolute path of the file or directory for append access."
  overload: System.Security.Permissions.FileIOPermissionAttribute.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  id: ChangeAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: ChangeAccessControl
  nameWithType: FileIOPermissionAttribute.ChangeAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the file or directory in which access control information can be changed."
  remarks: "This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.      > [!IMPORTANT] >  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change an ACL is an important permission and should be granted with caution."
  syntax:
    content: public string ChangeAccessControl { get; set; }
    return:
      type: System.String
      description: "The absolute path of the file or directory in which access control information can be changed."
  overload: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: FileIOPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Creates and returns a new <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>."
  remarks: "This method should be called only by the security system, never by application code.       At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref> that corresponds to this attribute."
  overload: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The path information for a file or directory for which access is to be secured contains invalid characters or wildcard specifiers."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  id: PathDiscovery
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: PathDiscovery
  nameWithType: FileIOPermissionAttribute.PathDiscovery
  fullName: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the file or directory to which to grant path discovery."
  remarks: "Path discovery controls access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.  \n  \n> [!NOTE]\n>  For performance reasons, PathDiscovery should be granted only to directories, not to files. For example, PathDiscovery permission should be granted to paths such as C:\\test and C:\\test\\\\, not to files such as C:\\test\\example.txt.  \n  \n This property sets access for a single file or directory. Use additional attributes to specify additional files and directories."
  example:
  - "The following code example sets the PathDiscovery property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/cpp/p-system.security.permis_31_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/csharp/p-system.security.permis_31_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/visualbasic/p-system.security.permis_31_1.vb)]"
  syntax:
    content: public string PathDiscovery { get; set; }
    return:
      type: System.String
      description: "The absolute path of the file or directory."
  overload: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.Read
  id: Read
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: Read
  nameWithType: FileIOPermissionAttribute.Read
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Read
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets read access for the file or directory specified by the string value."
  remarks: "This property sets access for a single file or directory. Use additional attributes to specify additional files and directories."
  example:
  - "The following example sets the Read property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/cpp/p-system.security.permis_20_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/csharp/p-system.security.permis_20_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/visualbasic/p-system.security.permis_20_1.vb)]"
  syntax:
    content: public string Read { get; set; }
    return:
      type: System.String
      description: "The absolute path of the file or directory for read access."
  overload: System.Security.Permissions.FileIOPermissionAttribute.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  id: ViewAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: ViewAccessControl
  nameWithType: FileIOPermissionAttribute.ViewAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the file or directory in which access control information can be viewed."
  remarks: "This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.      > [!IMPORTANT] >  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to view an ACL is an important permission and should be granted with caution."
  syntax:
    content: public string ViewAccessControl { get; set; }
    return:
      type: System.String
      description: "The absolute path of the file or directory in which access control information can be viewed."
  overload: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  id: ViewAndModify
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: ViewAndModify
  nameWithType: FileIOPermissionAttribute.ViewAndModify
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets the file or directory in which file data can be viewed and modified."
  remarks: "This property sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A>, and <xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A> properties for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories. The access rights are for file data only; they do not include the access control properties <xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A> and <xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A>.      > [!NOTE] >  The `get` accessor is provided for C# compiler compatibility. The C# compiler requires attribute properties to be read/write."
  syntax:
    content: public string ViewAndModify { get; set; }
    return:
      type: System.String
      description: "The absolute path of the file or directory in which file data can be viewed and modified."
  overload: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref> accessor is called. The accessor is provided only for C# compiler compatibility."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.Write
  id: Write
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: Write
  nameWithType: FileIOPermissionAttribute.Write
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Write
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Gets or sets write access for the file or directory specified by the string value."
  remarks: "This property sets access for a single file or directory. Use additional attributes to specify additional files and directories."
  example:
  - "The following example sets the Write property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/cpp/p-system.security.permis_18_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/csharp/p-system.security.permis_18_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/visualbasic/p-system.security.permis_18_1.vb)]"
  syntax:
    content: public string Write { get; set; }
    return:
      type: System.String
      description: "The absolute path of the file or directory for write access."
  overload: System.Security.Permissions.FileIOPermissionAttribute.Write*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: FileIOPermissionAttribute(SecurityAction)
  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.FileIOPermissionAttribute.All
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: All
  nameWithType: FileIOPermissionAttribute.All
  fullName: System.Security.Permissions.FileIOPermissionAttribute.All
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermissionAttribute.AllFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermissionAttribute.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermissionAttribute.Append
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Append
  nameWithType: FileIOPermissionAttribute.Append
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Append
- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ChangeAccessControl
  nameWithType: FileIOPermissionAttribute.ChangeAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: FileIOPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: PathDiscovery
  nameWithType: FileIOPermissionAttribute.PathDiscovery
  fullName: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
- uid: System.Security.Permissions.FileIOPermissionAttribute.Read
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Read
  nameWithType: FileIOPermissionAttribute.Read
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Read
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAccessControl
  nameWithType: FileIOPermissionAttribute.ViewAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAndModify
  nameWithType: FileIOPermissionAttribute.ViewAndModify
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
- uid: System.Security.Permissions.FileIOPermissionAttribute.Write
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Write
  nameWithType: FileIOPermissionAttribute.Write
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Write
- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: FileIOPermissionAttribute
  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute
- uid: System.Security.Permissions.FileIOPermissionAttribute.All*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: All
  nameWithType: FileIOPermissionAttribute.All
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermissionAttribute.AllFiles
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermissionAttribute.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermissionAttribute.Append*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Append
  nameWithType: FileIOPermissionAttribute.Append
- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ChangeAccessControl
  nameWithType: FileIOPermissionAttribute.ChangeAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: FileIOPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: PathDiscovery
  nameWithType: FileIOPermissionAttribute.PathDiscovery
- uid: System.Security.Permissions.FileIOPermissionAttribute.Read*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Read
  nameWithType: FileIOPermissionAttribute.Read
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAccessControl
  nameWithType: FileIOPermissionAttribute.ViewAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAndModify
  nameWithType: FileIOPermissionAttribute.ViewAndModify
- uid: System.Security.Permissions.FileIOPermissionAttribute.Write*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Write
  nameWithType: FileIOPermissionAttribute.Write
