### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.HostFileChangeMonitor
  id: HostFileChangeMonitor
  children:
  - System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})
  - System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)
  - System.Runtime.Caching.HostFileChangeMonitor.FilePaths
  - System.Runtime.Caching.HostFileChangeMonitor.LastModified
  - System.Runtime.Caching.HostFileChangeMonitor.UniqueId
  langs:
  - csharp
  name: HostFileChangeMonitor
  nameWithType: HostFileChangeMonitor
  fullName: System.Runtime.Caching.HostFileChangeMonitor
  type: Class
  summary: "Monitoriza os diretórios e caminhos de ficheiro e notifica a cache de alterações para os itens monitorizados. Esta classe não pode ser herdada."
  remarks: "A classe de HostFileChangeMonitor é uma implementação concreta do <xref:System.Runtime.Caching.FileChangeMonitor>tipo.</xref:System.Runtime.Caching.FileChangeMonitor> Esta classe está selada, por isso não pode ser expandido. Esta classe é útil se pretender utilizar uma implementação de cache existente e para monitorizar os ficheiros e diretórios para que as alterações.       Para cada caminho de diretório ou ficheiro especificados, a classe de HostFileChangeMonitor aciona uma notificação de alteração se qualquer uma das seguintes alterações:-o nome do ficheiro monitorizado ou alterações de diretório.      -O ficheiro especificado ou diretório não existe no momento, o monitor foi criado, mas foi criado mais tarde. Por outras palavras, um ficheiro ou diretório foi criado no âmbito dos itens monitorizados.      -O tamanho de um ficheiro monitorizado alterado.      -O conteúdo de um ficheiro monitorizado, ou o conteúdo de um diretório monitorizado alterado.      -A lista de controlo de acesso (ACL) do ficheiro ou diretório foi alterada.      -O monitorizado ficheiro ou diretório foi eliminado.       Se ocorrerem demasiadas alterações para o ficheiro monitorizado ou diretório, ao mesmo tempo, a instância de HostFileChangeMonitor pode perder controlar das alterações específicas. Neste cenário, a classe de HostFileChangeMonitor aciona uma notificação de alteração. Este cenário é mais provável ocorrer quando a instância de HostFileChangeMonitor monitoriza um diretório e de demasiadas alterações ocorrem no âmbito da estrutura de diretórios num curto período de tempo.       Porque o propósito da classe HostFileChangeMonitor é apenas assinalar que algo mudou entre o conjunto de ficheiros monitorizados e diretórios, não é considerado importante que não são capturados detalhes sobre uma alteração específica. O objetivo da classe HostFileChangeMonitor consiste em fornecer a notificação de Estado alterado para que uma entrada de cache (ou entradas) podem ser expulso. Uma vez que a classe de HostFileChangeMonitor indicam exatamente o que foi alterado, capacidade excedida de registo de alterações interno é irrelevantes.       Quando fornecer caminhos para uma instância de HostFileChangeMonitor, os caminhos de ficheiro e diretório tem de ser caminhos completos para o diretório ou ficheiro. Caminhos relativos e os carateres universais no caminhos não são permitidos.       Quando a classe de HostFileChangeMonitor é utilizada numa aplicação ASP.NET, a identidade do Windows que é utilizada para aceder aos itens monitorizados é a identidade de aplicação para a aplicação ASP.NET. Por outras palavras, a identidade da aplicação será um dos seguintes:-a identidade do processo.      -A identidade de aplicação configurado.      -As credenciais UNC se a aplicação é executada a partir de uma partilha UNC.       Quando a classe de HostFileChangeMonitor é utilizada numa aplicação não ASP.NET, o <xref:System.IO.FileSystemWatcher>classe é utilizada internamente para monitorizar os ficheiros.</xref:System.IO.FileSystemWatcher> Como resultado, a qualquer lista de controlo de acesso (ACL) aplica-se a um ficheiro monitorizado ou diretório é aplicada à identidade do Windows do thread atual.      > [!NOTE] > Os chamadores tem de ter o nível adequado de permissões de segurança (ACs) de acesso de código e tem de ter permissões NTFS para monitorizados todos os diretórios e os caminhos."
  example:
  - "The following example creates a cache item that uses a HostFileChangeMonitor object to monitor the state of the source data (which is a file) on the file system. The cache entry is defined using a <xref:System.Runtime.Caching.CacheItemPolicy> object to provide eviction and expiration details for the cache entry.  \n  \n [!code-cs[CachingASPNetApplications#1](~/add/codesnippet/csharp/t-system.runtime.caching_2_1.cs)]\n [!code-vb[CachingASPNetApplications#1](~/add/codesnippet/visualbasic/t-system.runtime.caching_2_1.vb)]"
  syntax:
    content: 'public sealed class HostFileChangeMonitor : System.Runtime.Caching.FileChangeMonitor'
  inheritance:
  - System.Object
  - System.Runtime.Caching.ChangeMonitor
  - System.Runtime.Caching.FileChangeMonitor
  implements: []
  inheritedMembers:
  - System.Runtime.Caching.ChangeMonitor.Dispose
  - System.Runtime.Caching.ChangeMonitor.HasChanged
  - System.Runtime.Caching.ChangeMonitor.InitializationComplete
  - System.Runtime.Caching.ChangeMonitor.IsDisposed
  - System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  - System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  platform:
  - net462
- uid: System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})
  id: '#ctor(System.Collections.Generic.IList{System.String})'
  parent: System.Runtime.Caching.HostFileChangeMonitor
  langs:
  - csharp
  name: HostFileChangeMonitor(IList<String>)
  nameWithType: HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)
  fullName: System.Runtime.Caching.HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)
  type: Constructor
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Runtime.Caching.HostFileChangeMonitor&quot;> </xref> classe."
  remarks: "Chamadas para o construtor de HostFileChangeMonitor tem de fornecer um valor não nulo para o `filePaths` parâmetro. No mínimo, o construtor valida a coleção de caminhos que é transmitida para a mesma e, em seguida, inicia a monitorização para os caminhos.      > [!NOTE] > Construtor efetua só cadeia a validação do nome do caminho. Não canonizar caminhos ou validar se os caminhos existem."
  syntax:
    content: public HostFileChangeMonitor (System.Collections.Generic.IList<string> filePaths);
    parameters:
    - id: filePaths
      type: System.Collections.Generic.IList{System.String}
      description: "Uma lista que contém um ou mais caminhos de diretório ou ficheiro para monitorizar."
  overload: System.Runtime.Caching.HostFileChangeMonitor.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>filePaths</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>filePaths</code>contém zero itens.       - ou - um caminho de <code>filePaths</code> lista é <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ou uma cadeia vazia."
  platform:
  - net462
- uid: System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Runtime.Caching.HostFileChangeMonitor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HostFileChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.HostFileChangeMonitor.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "A adicionar."
  overload: System.Runtime.Caching.HostFileChangeMonitor.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.HostFileChangeMonitor.FilePaths
  id: FilePaths
  parent: System.Runtime.Caching.HostFileChangeMonitor
  langs:
  - csharp
  name: FilePaths
  nameWithType: HostFileChangeMonitor.FilePaths
  fullName: System.Runtime.Caching.HostFileChangeMonitor.FilePaths
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém a coleção de diretórios e caminhos de ficheiro que foi transmitido para o &lt;xref:System.Runtime.Caching.HostFileChangeMonitor.%23ctor%2A&gt; construtor."
  syntax:
    content: public override System.Collections.ObjectModel.ReadOnlyCollection<string> FilePaths { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "Uma coleção de diretórios e caminhos de ficheiro."
  overload: System.Runtime.Caching.HostFileChangeMonitor.FilePaths*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.HostFileChangeMonitor.LastModified
  id: LastModified
  parent: System.Runtime.Caching.HostFileChangeMonitor
  langs:
  - csharp
  name: LastModified
  nameWithType: HostFileChangeMonitor.LastModified
  fullName: System.Runtime.Caching.HostFileChangeMonitor.LastModified
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém um valor só de leitura que indica a hora da última escrita de um ficheiro monitorizado ou caminho."
  remarks: "Se um monitor de alteração do ficheiro está a monitorizar vários ficheiros ou caminhos, esta propriedade devolve a hora mais recente de escrita no conjunto de todos os ficheiros e caminhos."
  syntax:
    content: public override DateTimeOffset LastModified { get; }
    return:
      type: System.DateTimeOffset
      description: "A última hora de um ficheiro monitorizado ou caminho de escrita."
  overload: System.Runtime.Caching.HostFileChangeMonitor.LastModified*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.HostFileChangeMonitor.UniqueId
  id: UniqueId
  parent: System.Runtime.Caching.HostFileChangeMonitor
  langs:
  - csharp
  name: UniqueId
  nameWithType: HostFileChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.HostFileChangeMonitor.UniqueId
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Obtém um identificador para o <xref href=&quot;System.Runtime.Caching.HostFileChangeMonitor&quot;> </xref> instância com base no conjunto de diretórios monitorizados e caminhos de ficheiro."
  remarks: "A cadeia de que forma o valor da propriedade UniqueId construída a partir das seguintes partes:-um caminho de ficheiro ou diretório.      -As mais recentes escrita hora em hora UTC, medido como ticks mas representada como uma cadeia hexadecimal.      -O tamanho de ficheiro, representado como uma cadeia hexadecimal.       Se um monitor de alteração de ficheiro está a monitorizar vários caminhos, as informações devolvidas por esta propriedade são concatenadas numa cadeia única para todos os caminhos de ficheiros e diretórios monitorizados."
  syntax:
    content: public override string UniqueId { get; }
    return:
      type: System.String
      description: "Um identificador para o monitor de alteração."
  overload: System.Runtime.Caching.HostFileChangeMonitor.UniqueId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.Caching.FileChangeMonitor
  isExternal: false
  name: System.Runtime.Caching.FileChangeMonitor
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: HostFileChangeMonitor(IList<String>)
  nameWithType: HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)
  fullName: System.Runtime.Caching.HostFileChangeMonitor.HostFileChangeMonitor(IList<String>)
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HostFileChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.HostFileChangeMonitor.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Caching.HostFileChangeMonitor.FilePaths
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: FilePaths
  nameWithType: HostFileChangeMonitor.FilePaths
  fullName: System.Runtime.Caching.HostFileChangeMonitor.FilePaths
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<String>
  nameWithType: ReadOnlyCollection<String>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Caching.HostFileChangeMonitor.LastModified
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: LastModified
  nameWithType: HostFileChangeMonitor.LastModified
  fullName: System.Runtime.Caching.HostFileChangeMonitor.LastModified
- uid: System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Runtime.Caching.HostFileChangeMonitor.UniqueId
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: HostFileChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.HostFileChangeMonitor.UniqueId
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Caching.HostFileChangeMonitor.#ctor*
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: HostFileChangeMonitor
  nameWithType: HostFileChangeMonitor.HostFileChangeMonitor
- uid: System.Runtime.Caching.HostFileChangeMonitor.Dispose*
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: Dispose
  nameWithType: HostFileChangeMonitor.Dispose
- uid: System.Runtime.Caching.HostFileChangeMonitor.FilePaths*
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: FilePaths
  nameWithType: HostFileChangeMonitor.FilePaths
- uid: System.Runtime.Caching.HostFileChangeMonitor.LastModified*
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: LastModified
  nameWithType: HostFileChangeMonitor.LastModified
- uid: System.Runtime.Caching.HostFileChangeMonitor.UniqueId*
  parent: System.Runtime.Caching.HostFileChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: HostFileChangeMonitor.UniqueId
