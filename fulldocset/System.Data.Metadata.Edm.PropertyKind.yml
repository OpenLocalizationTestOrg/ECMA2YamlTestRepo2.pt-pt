### YamlMime:ManagedReference
items:
- uid: System.Data.Metadata.Edm.PropertyKind
  id: PropertyKind
  children:
  - System.Data.Metadata.Edm.PropertyKind.Extended
  - System.Data.Metadata.Edm.PropertyKind.System
  langs:
  - csharp
  name: PropertyKind
  nameWithType: PropertyKind
  fullName: System.Data.Metadata.Edm.PropertyKind
  type: Enum
  summary: "Specifies the kinds of item attributes in the conceptual model."
  remarks: "For more information, see [Extended Property (CSDL)](http://msdn.microsoft.com/en-us/697e2fb1-8977-4aa6-a1ef-236950e91fd1)."
  example:
  - "The following code sample demonstrates how to get a metadata workspace from the connection and then use that metadata workspace to retrieve information about the extended properties in the specified data model. Note that the metadata workspace is a runtime service component that provides support for retrieving metadata.  \n  \n The code sample uses a <xref:System.Data.Metadata.Edm.DataSpace> to specify the model. The <xref:System.Data.Metadata.Edm.DataSpace> represents the default name for the conceptual model. The code sample uses the AdventureWorks Model that is provided in the [AdventureWorks Model (EDM)](http://msdn.microsoft.com/en-us/da87d29e-8c89-4310-bbac-5cbd062930a7)topic. For an example of the application config file, see [AdventureWorks Object Model in Applications (EDM)](http://msdn.microsoft.com/en-us/84c01270-90ba-467b-ad24-df10c1ca8f45).  \n  \n```c#  \nusing System;  \nusing System.Data;  \nusing System.Data.EntityClient;  \nusing System.Collections.ObjectModel;  \nusing System.Data.Metadata.Edm;  \n  \nclass UsePropertyKindExample  \n{  \n   static void Main(string[] args)  \n   {  \n     try  \n     {  \n       // Establish a connection to the underlying data provider by   \n       // using the connection string specified in the config file.  \n       using (EntityConnection connection =  \n           new EntityConnection(\"Name=AdventureworksContext\"))  \n       {  \n          // Open the connection.  \n          connection.Open();  \n  \n          // Access the metadata workspace.  \n          MetadataWorkspace workspace =   \n             connection.GetMetadataWorkspace();  \n  \n          // Display the extended properties in the conceptual model.  \n          DisplayProperties(workspace, DataSpace.CSpace);  \n       }  \n     }  \n     catch (MetadataException exceptionMetadata)  \n     {  \n         Console.WriteLine(\"MetadataException: {0}\",  \n                         exceptionMetadata.Message);  \n     }  \n     catch (System.Data.MappingException exceptionMapping)  \n     {  \n         Console.WriteLine(\"MappingException: {0}\",  \n                          exceptionMapping.Message);  \n     }  \n   }  \n  \n   public static void DisplayProperties(  \n        MetadataWorkspace workspace, DataSpace model)  \n   {  \n      // Get a collection of the entity containers.  \n      ReadOnlyCollection<EntityContainer> containers =  \n          workspace.GetItems<EntityContainer>(model);  \n  \n      // Iterate through the collection to get each entity container.  \n      foreach (EntityContainer container in containers)  \n      {  \n          // Display the extended properties for the entity container.  \n          DisplayExtendedProperties(container);  \n  \n          // Iterate through the collection to get each entity set.  \n          foreach (EntitySetBase baseSet in container.BaseEntitySets)  \n          {  \n              // Check whether this instance is an EntitySet.  \n              if (baseSet is EntitySet)  \n              {  \n                 // Display the extended properties for the entity set.  \n                 DisplayExtendedProperties(baseSet);  \n              }  \n          }  \n      }  \n  \n      // Get a collection of the entity types.  \n      ReadOnlyCollection<EntityType> entities =   \n             workspace.GetItems<EntityType>(model);  \n  \n      // Iterate through the collection to get each entity type.  \n      foreach (EntityType entity in entities)  \n      {  \n         // Display the extended properties for the entity type.  \n         DisplayExtendedProperties(entity);  \n      }  \n   }  \n  \n   private static void DisplayExtendedProperties(MetadataItem item)  \n   {  \n     foreach (MetadataProperty property in item.MetadataProperties)  \n     {  \n         if (property.PropertyKind == PropertyKind.Extended)  \n           Console.WriteLine(string.Format(\"\\t{0}\\t{1}\\t{2}\",   \n             item.GetType().Name, property.Name, property.Value));  \n     }  \n   }  \n}  \n```"
  syntax:
    content: public enum PropertyKind
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Data.Metadata.Edm.PropertyKind.Extended
  id: Extended
  parent: System.Data.Metadata.Edm.PropertyKind
  langs:
  - csharp
  name: Extended
  nameWithType: PropertyKind.Extended
  fullName: System.Data.Metadata.Edm.PropertyKind.Extended
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Metadata.Edm
  summary: "An enumeration member indicating that an item attribute is `Extended`."
  syntax:
    content: Extended
    return:
      type: System.Data.Metadata.Edm.PropertyKind
      description: "To be added."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Metadata.Edm.PropertyKind.System
  id: System
  parent: System.Data.Metadata.Edm.PropertyKind
  langs:
  - csharp
  name: System
  nameWithType: PropertyKind.System
  fullName: System.Data.Metadata.Edm.PropertyKind.System
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Metadata.Edm
  summary: "An enumeration member indicating that an item attribute is `System`."
  syntax:
    content: System
    return:
      type: System.Data.Metadata.Edm.PropertyKind
      description: "To be added."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Data.Metadata.Edm.PropertyKind.Extended
  parent: System.Data.Metadata.Edm.PropertyKind
  isExternal: false
  name: Extended
  nameWithType: PropertyKind.Extended
  fullName: System.Data.Metadata.Edm.PropertyKind.Extended
- uid: System.Data.Metadata.Edm.PropertyKind
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: PropertyKind
  nameWithType: PropertyKind
  fullName: System.Data.Metadata.Edm.PropertyKind
- uid: System.Data.Metadata.Edm.PropertyKind.System
  parent: System.Data.Metadata.Edm.PropertyKind
  isExternal: false
  name: System
  nameWithType: PropertyKind.System
  fullName: System.Data.Metadata.Edm.PropertyKind.System
