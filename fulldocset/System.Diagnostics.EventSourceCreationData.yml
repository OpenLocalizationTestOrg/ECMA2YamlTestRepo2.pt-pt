### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventSourceCreationData
  id: EventSourceCreationData
  children:
  - System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  - System.Diagnostics.EventSourceCreationData.CategoryCount
  - System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  - System.Diagnostics.EventSourceCreationData.LogName
  - System.Diagnostics.EventSourceCreationData.MachineName
  - System.Diagnostics.EventSourceCreationData.MessageResourceFile
  - System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  - System.Diagnostics.EventSourceCreationData.Source
  langs:
  - csharp
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData
  fullName: System.Diagnostics.EventSourceCreationData
  type: Class
  summary: "Representa as definições de configuração utilizadas para criar uma origem de registo de eventos no computador local ou remoto."
  remarks: "Utilize a classe de EventSourceCreationData para configurar uma nova origem de escrita de localizadas entradas para um registo de eventos. Não é necessário utilizar esta classe para ler a partir de um registo de eventos.       Esta classe define as definições de configuração para uma nova origem de evento e o respetivo registo de eventos associado. O registo de eventos associado pode estar no computador local ou num computador remoto. Para criar uma nova origem para um registo de eventos novo ou existente no computador local, defina o <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>e <xref:System.Diagnostics.EventSourceCreationData.Source%2A>Propriedades de um EventSourceCreationData e a chamada de <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>método.</xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> </xref:System.Diagnostics.EventSourceCreationData.Source%2A> </xref:System.Diagnostics.EventSourceCreationData.LogName%2A> Este método cria a origem do evento que especificar na <xref:System.Diagnostics.EventSourceCreationData.Source%2A>propriedade e regista-o para o registo de eventos especificado na <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>.</xref:System.Diagnostics.EventSourceCreationData.LogName%2A> </xref:System.Diagnostics.EventSourceCreationData.Source%2A> Este comportamento é semelhante ao utilizar a <xref:System.Diagnostics.EventLogInstaller>classe de registar uma origem de evento para um registo de eventos.</xref:System.Diagnostics.EventLogInstaller>       Utilize o <xref:System.Diagnostics.EventLog.WriteEvent%2A>e <xref:System.Diagnostics.EventLog.WriteEntry%2A>métodos para escrever eventos de um registo de eventos.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> Tem de especificar uma origem de evento para escrever eventos; tem de criar e configurar a origem do evento antes de escrever a entrada primeiro com a origem.       Crie a nova origem de evento durante a instalação da aplicação. Isto permite que o tempo para o sistema operativo atualizar a lista de origens de eventos registados e as respetivas configurações. Se o sistema operativo não tem de atualizar a lista de origens de eventos e a tentativa de escrever um evento com a nova origem, que a operação de escrita irá falhar. Pode configurar uma nova origem utilizando um <xref:System.Diagnostics.EventLogInstaller>, ou utilizando o <xref:System.Diagnostics.EventLog.CreateEventSource%2A>método.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Tem de ter direitos administrativos no computador para criar uma nova origem de evento.       Pode criar uma origem de evento para um registo de eventos existente ou um novo registo de eventos. Quando cria uma nova origem para um novo registo de eventos, o sistema regista a origem para esse registo, mas o registo não é criado até que a primeira entrada é escrita.       Cada origem só pode escrever um registo de eventos numa altura; No entanto, a aplicação pode utilizar várias origens para escrever vários registos de eventos. Por exemplo, a aplicação poderá ter várias origens configuradas para diferentes registos de eventos ou ficheiros de recursos diferentes.       Para alterar os detalhes da configuração de uma origem existente, tem de eliminar a origem e, em seguida, crie-a com a nova configuração. Se outras aplicações ou componentes utilizam a origem existente, crie uma nova origem com a configuração atualizada, em vez de eliminar a origem existente.       Pode registar a origem do evento com recursos localizados para as cadeias de categoria e mensagem de evento. A aplicação pode escrever entradas de registo de eventos utilizando identificadores de recursos, em vez de especificar a cadeia real. O Visualizador de eventos utiliza o identificador de recurso para localizar e apresentar a cadeia correspondente a partir do ficheiro de recurso localizado com base nas definições de idioma atual. Pode registar um ficheiro separado para as categorias de evento, mensagens e as cadeias de inserção de parâmetro ou, pode registar o mesmo ficheiro de recursos para todos os três tipos de cadeias. Utilize o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>e <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>as propriedades para configurar a origem de escrever localizadas entradas de registo de eventos.</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Se a aplicação escreve valores de cadeia diretamente o registo de eventos, não terá de definir estas propriedades.       A origem tem de ser configurada para escrever entradas localizadas ou de escrita diretas cadeias. O <xref:System.Diagnostics.EventLog.WriteEntry%2A>método escreve a cadeia fornecida diretamente o registo de eventos; não utilize um ficheiro de recursos de mensagem localizável.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilize o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método para escrever eventos utilizando um ficheiro de recursos localizados da mensagem.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se a sua aplicação escreve entradas utilizando identificadores de recursos e valores de cadeia, tem de registar duas origens separadas. Por exemplo, configurar uma origem com ficheiros de recursos e, em seguida, utilize essa origem no <xref:System.Diagnostics.EventLog.WriteEvent%2A>método escrever entradas utilizando identificadores de recursos para o registo de eventos.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Em seguida, criar uma origem diferente sem ficheiros de recursos e utilize essa origem no <xref:System.Diagnostics.EventLog.WriteEntry%2A>método escrever cadeias diretamente o registo de eventos com que a origem.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. The code example verifies that the source does not conflict with an existing event source, and then creates the new event source for the specified event log.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_7_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_7_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_7_1.cs)]"
  syntax:
    content: public class EventSourceCreationData
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: EventSourceCreationData(String,String)
  nameWithType: EventSourceCreationData.EventSourceCreationData(String,String)
  fullName: System.Diagnostics.EventSourceCreationData.EventSourceCreationData(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Diagnostics.EventSourceCreationData&quot;> </xref> classe com um nome de origem e de registo de eventos de evento especificado."
  remarks: "Escrever entradas de registo de eventos, que primeiro tem de criar uma origem de evento para o registo de eventos. Para registar uma nova origem, inicializar um <xref:System.Diagnostics.EventSourceCreationData>instância, configure as propriedades de instância para a sua aplicação e a chamada de <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>método.</xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> </xref:System.Diagnostics.EventSourceCreationData> Depois da origem é registada, pode escrever entradas de origem, utilizando o <xref:System.Diagnostics.EventLog.WriteEvent%2A>ou <xref:System.Diagnostics.EventLog.WriteEntry%2A>métodos.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A>       Pode registar a origem do evento com recursos localizados para as cadeias de categoria e mensagem de evento. A aplicação pode escrever entradas de registo de eventos utilizando identificadores de recursos, em vez de especificar a cadeia real. O Visualizador de eventos utiliza o identificador de recurso para localizar e apresentar a cadeia correspondente a partir do ficheiro de recurso localizado com base nas definições de idioma atual. Pode registar um ficheiro separado para as categorias de evento, mensagens e as cadeias de inserção de parâmetro ou, pode registar o mesmo ficheiro de recursos para todos os três tipos de cadeias. Utilize o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>e <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>as propriedades para configurar a origem de escrever localizadas entradas de registo de eventos.</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Se a aplicação escreve valores de cadeia diretamente o registo de eventos, não terá de definir estas propriedades.       A origem tem de ser configurada para escrever entradas localizadas ou de escrita diretas cadeias. Se a sua aplicação escreve entradas utilizando identificadores de recursos e valores de cadeia, tem de registar duas origens separadas. Por exemplo, configurar uma origem com ficheiros de recursos e, em seguida, utilize essa origem no <xref:System.Diagnostics.EventLog.WriteEvent%2A>método escrever entradas utilizando identificadores de recursos para o registo de eventos.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Em seguida, criar uma origem diferente sem ficheiros de recursos e utilize essa origem no <xref:System.Diagnostics.EventLog.WriteEntry%2A>método de escrever as cadeias diretamente para o registo de eventos.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       A tabela seguinte mostra os valores de propriedade inicial para uma <xref:System.Diagnostics.EventSourceCreationData>.</xref:System.Diagnostics.EventSourceCreationData>      | Propriedade | Valor inicial |   |--------------|-------------------|   | <xref:System.Diagnostics.EventSourceCreationData.Source%2A>| O `source` parâmetro. |   | <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>| O `logName` parâmetro. |   | <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>| O computador local (&quot;.&quot;). |   | <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>| Zero |   | <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>| `null` (`Nothing` no Visual Basic). |   | <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>| `null` (`Nothing` no Visual Basic). |   | <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>| `null` (`Nothing` in Visual Basic).|</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A></xref:System.Diagnostics.EventSourceCreationData.MachineName%2A></xref:System.Diagnostics.EventSourceCreationData.LogName%2A></xref:System.Diagnostics.EventSourceCreationData.Source%2A>"
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/80a35863-8201-4059-9f79-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/80a35863-8201-4059-9f79-_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/80a35863-8201-4059-9f79-_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventSourceCreationData (string source, string logName);
    parameters:
    - id: source
      type: System.String
      description: "O nome para registar com o registo de eventos como uma origem de entradas."
    - id: logName
      type: System.String
      description: "O nome do registo a que são escritas entradas da origem."
  overload: System.Diagnostics.EventSourceCreationData.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount
  id: CategoryCount
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
  fullName: System.Diagnostics.EventSourceCreationData.CategoryCount
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o número de categorias no ficheiro de recursos de categoria."
  remarks: "Utilize o CategoryCount e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>localizadas de propriedades para escrever eventos com cadeias de categoria.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> O Visualizador de eventos apresenta a categoria para uma entrada de evento se fornecer uma categoria quando escreve o evento. Categorias de registo de eventos são definidas pela aplicação cadeias que ajudam a filtrar eventos ou fornecem mais informações sobre o evento. Por exemplo, a aplicação pode definir categorias separadas para diferentes componentes ou operações diferentes.       Categorias de evento são opcionais; Se a sua aplicação utilizar categorias, não defina a CategoryCount e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>Propriedades.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>       Para obter detalhes sobre Definir mensagens de eventos e a criação de ficheiros de recursos de eventos, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK de plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_2_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_2_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryCount { get; set; }
    return:
      type: System.Int32
      description: "O número de categorias no ficheiro de recursos de categoria. O valor predefinido é zero."
  overload: System.Diagnostics.EventSourceCreationData.CategoryCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "A propriedade está definida para um valor negativo ou para um valor maior do que &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  id: CategoryResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o caminho do ficheiro de recursos que contém as cadeias de categoria para a origem."
  remarks: "Utilize o <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>e propriedades de CategoryResourceFile ao escrever eventos com localizado cadeias de categoria.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> O Visualizador de eventos apresenta a categoria para uma entrada de evento se fornecer uma categoria quando escreve o evento. Categorias de registo de eventos são definidas pela aplicação cadeias que ajudam a filtrar eventos ou fornecem mais informações sobre o evento. Por exemplo, a aplicação pode definir categorias separadas para diferentes componentes ou operações diferentes.       Categorias de evento são opcionais; Se a sua aplicação utilizar categorias, não defina a <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>e propriedades de CategoryResourceFile.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>       Para obter detalhes sobre Definir mensagens de eventos e a criação de ficheiros de recursos de eventos, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK de plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_10_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_10_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_10_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string CategoryResourceFile { get; set; }
    return:
      type: System.String
      description: "O caminho do ficheiro de recursos de categoria. A predefinição é uma cadeia vazia (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.CategoryResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.LogName
  id: LogName
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: LogName
  nameWithType: EventSourceCreationData.LogName
  fullName: System.Diagnostics.EventSourceCreationData.LogName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nome do registo de eventos para o qual a origem escreve entradas."
  remarks: "Use the LogName property to identify the event log that your application writes entries to using the new source. The event log can be a new log or an existing log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log. If you do not explicitly set the LogName property, the event log defaults to the Application log.  \n  \n> [!NOTE]\n>  The Security log is read-only.  \n  \n To target an existing log for the new source, set the LogName property to the existing event log name. To create a new event log for the source, you must set the LogName property. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'. The first 8 characters of the event log name must be different from the first 8 characters of existing names of event logs on the specified computer.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the LogName property with the \".evt\" file name extension."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_19_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_19_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_19_1.cs)]"
  syntax:
    content: public string LogName { get; set; }
    return:
      type: System.String
      description: "O nome do registo de eventos. Isto pode ser aplicações, sistema ou um nome de registo personalizado. O valor predefinido é &quot;Aplicação&quot;."
  overload: System.Diagnostics.EventSourceCreationData.LogName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.MachineName
  id: MachineName
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
  fullName: System.Diagnostics.EventSourceCreationData.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nome do computador em que pretende registar a origem de evento."
  remarks: "O valor de MachineName não pode ser uma cadeia vazia. Se o nome do computador não for explicitamente definido, assume como o computador local (&quot;.&quot;).       Ao registar uma origem num computador remoto, tem de ter direitos administrativos no mesmo computador para escrever os valores de registo com permissões suficientes."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_21_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_21_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_21_1.cs)]"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "O nome do sistema em que pretende registar a origem de evento. A predefinição é o computador local (&quot;.&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "O nome do computador é inválido."
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  id: MessageResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o caminho do ficheiro de recursos de mensagem que contém mensagem de cadeias para a origem de formatação."
  remarks: "Utilize a propriedade MessageResourceFile para configurar uma origem de registo de eventos para escrever as mensagens de evento localizada. Mensagens de evento são definidas pela aplicação cadeias que descrevem o evento para o utilizador.       A aplicação pode escrever entradas de registo de eventos utilizando identificadores de recursos. Um identificador de recurso indexa uma mensagem localizada no MessageResourceFile. O Visualizador de eventos utiliza o identificador de recurso para localizar e apresentar a cadeia correspondente a partir do ficheiro de recursos localizados da mensagem com base nas definições de idioma atual.       A origem do evento tem de ser configurada para escrever entradas localizadas ou de escrita diretas cadeias. Utilize o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método escrever localizadas entradas para uma origem configurado com um ficheiro de recursos de mensagens.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se a sua aplicação escreve diretamente as cadeias de mensagem de evento, em vez de utilizar um identificador de recurso num ficheiro de recurso localizado, não defina a propriedade MessageResourceFile.       Para obter detalhes sobre Definir mensagens de eventos e a criação de ficheiros de recursos de eventos, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK de plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_3_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_3_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_3_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string MessageResourceFile { get; set; }
    return:
      type: System.String
      description: "O caminho do ficheiro de recursos de mensagens. A predefinição é uma cadeia vazia (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.MessageResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  id: ParameterResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o caminho do ficheiro de recursos que contém as cadeias de parâmetro de mensagem para a origem."
  remarks: "Utilize a propriedade ParameterResourceFile para configurar uma origem de registo de eventos para escrever as mensagens de evento localizada com cadeias de parâmetro inseridas. Cada mensagem de evento localizada especificada no <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>propriedade pode conter os marcadores de posição para cadeias de inserção.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> Estes marcadores de posição são utilizados para especificar a posição e o identificador de recurso para uma cadeia de independente de idioma na mensagem de evento. O Visualizador de eventos preenche nos marcadores de posição utilizando as cadeias do ParameterResourceFile correspondentes e formata a mensagem do registo de eventos para a entrada de evento localizada.       Por exemplo, a secção seguinte de um ficheiro de texto de mensagem define uma cadeia com um marcador de posição do parâmetro: ```      MessageId = 1501   Severity = Success   Facility = Application   SymbolicName = COMPONENT_STARTING   Language=English   Component %%6050 is starting.   .   ``` do ficheiro de recurso do parâmetro, a cadeia de inserção tem de ser definida com o identificador de recurso correspondente para o marcador de posição, como mostrado abaixo: ```   MessageId = 6050   Severity = Success   Facility = Application   SymbolicName = COMPONENT_NAME_MSGID   Language=English   TRIGGER.EXE   .   ``` a origem do evento tem de ser configurada para escrever entradas localizadas ou de escrita diretas cadeias. Utilize o <xref:System.Diagnostics.EventLog.WriteEvent%2A>método escrever localizadas entradas para uma origem configurado com um ficheiro de recursos de mensagens.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se a sua aplicação escreve cadeias de mensagem de evento diretamente o registo de eventos, ou se o <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>propriedade contém mensagens de marcadores de posição de inserção de parâmetro, não defina a propriedade ParameterResourceFile.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>       Para obter detalhes sobre Definir mensagens de eventos e a criação de ficheiros de recursos de eventos, consulte o tópico &quot;Mensagem compilador&quot; na documentação do SDK de plataforma em [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_31_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_31_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_31_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string ParameterResourceFile { get; set; }
    return:
      type: System.String
      description: "O caminho do ficheiro de recurso do parâmetro. A predefinição é uma cadeia vazia (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.ParameterResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.Source
  id: Source
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: Source
  nameWithType: EventSourceCreationData.Source
  fullName: System.Diagnostics.EventSourceCreationData.Source
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Obtém ou define o nome para registar com o registo de eventos como uma origem de evento."
  remarks: "O nome de origem é, muitas vezes, o nome da aplicação ou o nome de um componente dentro de uma aplicação de grande. O <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>método utiliza a origem, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>Propriedades para criar os valores de registo no computador de destino para a nova origem e o respetivo registo de evento associado</xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> e</xref:System.Diagnostics.EventSourceCreationData.LogName%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> Um novo nome de origem não pode corresponder a um nome de origem existente ou um nome de registo de eventos existente no computador de destino.       Depois dos valores de registo para a origem são criados, a aplicação pode utilizar a origem de escrever entradas de registo de eventos configurado.       Cada origem só pode escrever um registo de eventos numa altura; No entanto, a aplicação pode utilizar várias origens para escrever vários registos de eventos. Por exemplo, a aplicação poderá necessitar de várias origens configuradas para diferentes registos de eventos ou ficheiros de recursos diferentes."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_13_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_13_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_13_1.cs)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "O nome para registar com o registo de eventos como uma origem de entradas. A predefinição é uma cadeia vazia (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.Source*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: EventSourceCreationData(String,String)
  nameWithType: EventSourceCreationData.EventSourceCreationData(String,String)
  fullName: System.Diagnostics.EventSourceCreationData.EventSourceCreationData(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
  fullName: System.Diagnostics.EventSourceCreationData.CategoryCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
- uid: System.Diagnostics.EventSourceCreationData.LogName
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: LogName
  nameWithType: EventSourceCreationData.LogName
  fullName: System.Diagnostics.EventSourceCreationData.LogName
- uid: System.Diagnostics.EventSourceCreationData.MachineName
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
  fullName: System.Diagnostics.EventSourceCreationData.MachineName
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.MessageResourceFile
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
- uid: System.Diagnostics.EventSourceCreationData.Source
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: Source
  nameWithType: EventSourceCreationData.Source
  fullName: System.Diagnostics.EventSourceCreationData.Source
- uid: System.Diagnostics.EventSourceCreationData.#ctor*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData.EventSourceCreationData
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
- uid: System.Diagnostics.EventSourceCreationData.LogName*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: LogName
  nameWithType: EventSourceCreationData.LogName
- uid: System.Diagnostics.EventSourceCreationData.MachineName*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
- uid: System.Diagnostics.EventSourceCreationData.Source*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: Source
  nameWithType: EventSourceCreationData.Source
