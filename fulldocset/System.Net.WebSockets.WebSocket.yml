### YamlMime:ManagedReference
items:
- uid: System.Net.WebSockets.WebSocket
  id: WebSocket
  children:
  - System.Net.WebSockets.WebSocket.#ctor
  - System.Net.WebSockets.WebSocket.Abort
  - System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseStatus
  - System.Net.WebSockets.WebSocket.CloseStatusDescription
  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  - System.Net.WebSockets.WebSocket.Dispose
  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  - System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.RegisterPrefixes
  - System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.State
  - System.Net.WebSockets.WebSocket.SubProtocol
  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  langs:
  - csharp
  name: WebSocket
  nameWithType: WebSocket
  fullName: System.Net.WebSockets.WebSocket
  type: Class
  summary: "A classe de WebSocket permite que aplicações enviar e receber dados, uma vez concluída a atualização de WebSocket."
  remarks: "Algumas das classes no <xref:System.Net.WebSockets>espaço de nomes são suportados no Windows 7, Windows Vista SP2 e Windows Server 2008.</xref:System.Net.WebSockets> No entanto, as implementações de cliente e servidor WebSockets públicas só são suportadas no Windows 8 e Windows Server 2012. As classes e os elementos de classe no <xref:System.Net.WebSockets>espaço de nomes que são suportados no Windows 7, Windows Vista SP2 e Windows Server 2008 são as classes abstratas.</xref:System.Net.WebSockets> Isto permite que um programador de aplicações herdar e expandir estas classes abstratas com uma implementação do cliente WebSockets real."
  syntax:
    content: 'public abstract class WebSocket : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.#ctor
  id: '#ctor'
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: WebSocket()
  nameWithType: WebSocket.WebSocket()
  fullName: System.Net.WebSockets.WebSocket.WebSocket()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Cria uma instância do <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> classe."
  syntax:
    content: protected WebSocket ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.Abort
  id: Abort
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: Abort()
  nameWithType: WebSocket.Abort()
  fullName: System.Net.WebSockets.WebSocket.Abort()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Interrompe a ligação de WebSocket e cancela quaisquer operações de e/s pendentes."
  syntax:
    content: public abstract void Abort ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Fecha a ligação de WebSocket como uma operação assíncrona utilizando o handshake de fecho definido no [especificação de protocolo de WebSocket](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) secção 7."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task>objeto será concluída após o WebSocket foi fechado.</xref:System.Threading.Tasks.Task>       Este método fecha a ligação de WebSocket utilizando o handshake de fecho definido no [especificação de protocolo de WebSocket](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06) secção 7."
  syntax:
    content: public abstract System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "Indica a razão para fechar a ligação de WebSocket."
    - id: statusDescription
      type: System.String
      description: "Especifica uma explicação legível humana relativamente a razão pela qual a ligação está fechada."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "O token que pode ser utilizado para propagar a notificação que operações deverá ser canceladas."
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>       O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.WebSockets.WebSocket.CloseAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Inicia ou concluir o handshake de fecho definido no [especificação de protocolo de WebSocket secção 7](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06)."
  remarks: "Não irá impedir que esta operação. O devolvido <xref:System.Threading.Tasks.Task>objeto será concluída depois do resultado no WebSocket foi fechado.</xref:System.Threading.Tasks.Task>"
  syntax:
    content: public abstract System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "Indica a razão para fechar a ligação de WebSocket."
    - id: statusDescription
      type: System.String
      description: "Permite que aplicações especificar uma explicação legível humana relativamente a razão pela qual a ligação está fechada."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "O token que pode ser utilizado para propagar a notificação que operações deverá ser canceladas."
    return:
      type: System.Threading.Tasks.Task
      description: "Devolve <xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>       O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.WebSockets.WebSocket.CloseOutputAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseStatus
  id: CloseStatus
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
  fullName: System.Net.WebSockets.WebSocket.CloseStatus
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Indica o motivo por que motivo o ponto final remoto iniciou o handshake de fecho."
  remarks: "Se o handshake de fecho ainda não foi iniciado, é devolvido WebSocketCloseStatus.None."
  syntax:
    content: public abstract Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketCloseStatus&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.CloseStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Permite que o ponto final remoto descrever o motivo por que razão a ligação foi fechada."
  syntax:
    content: public abstract string CloseStatusDescription { get; }
    return:
      type: System.String
      description: "Devolve <xref:System.String>.</xref:System.String>"
  overload: System.Net.WebSockets.WebSocket.CloseStatusDescription*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  id: CreateClientBuffer(System.Int32,System.Int32)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateClientBuffer(Int32,Int32)
  nameWithType: WebSocket.CreateClientBuffer(Int32,Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateClientBuffer(Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Criar cliente memórias intermédias para utilizar com esta <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> instância."
  syntax:
    content: public static ArraySegment<byte> CreateClientBuffer (int receiveBufferSize, int sendBufferSize);
    parameters:
    - id: receiveBufferSize
      type: System.Int32
      description: "O tamanho, em bytes, do cliente receber da memória intermédia."
    - id: sendBufferSize
      type: System.Int32
      description: "O tamanho, em bytes, da memória intermédia de envio."
    return:
      type: System.ArraySegment{System.Byte}
      description: "Devolve &lt;xref:System.ArraySegment%601&gt;.       Uma matriz com as memórias intermédias de cliente."
  overload: System.Net.WebSockets.WebSocket.CreateClientBuffer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  id: CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  nameWithType: WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  fullName: System.Net.WebSockets.WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Esta API suporta a infraestrutura do .NET Framework e não se destina a ser utilizado diretamente a partir do seu código.       Permite que os chamadores criar uma classe de WebSocket do lado de cliente que irá utilizar o WSPC para fins de pacotes."
  syntax:
    content: public static System.Net.WebSockets.WebSocket CreateClientWebSocket (System.IO.Stream innerStream, string subProtocol, int receiveBufferSize, int sendBufferSize, TimeSpan keepAliveInterval, bool useZeroMaskingKey, ArraySegment<byte> internalBuffer);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A ligação para ser utilizada para operações de e/s."
    - id: subProtocol
      type: System.String
      description: "O subprotocolo aceite pelo cliente."
    - id: receiveBufferSize
      type: System.Int32
      description: "O tamanho em bytes de WebSocket cliente receber a memória intermédia."
    - id: sendBufferSize
      type: System.Int32
      description: "O tamanho em bytes do cliente WebSocket enviar memória intermédia."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "Determina como regularmente uma moldura é enviada através da ligação como uma ligação keep-alive. Aplica-se apenas quando a ligação está inativa."
    - id: useZeroMaskingKey
      type: System.Boolean
      description: "Indica se uma chave aleatória ou uma chave estática (apenas com zeros) deve ser utilizada para o WebSocket máscara."
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "Será utilizado como a memória intermédia interna no WPC. O tamanho tem de ser, pelo menos, `2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit)`."
    return:
      type: System.Net.WebSockets.WebSocket
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocket&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.CreateClientWebSocket*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  id: CreateServerBuffer(System.Int32)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateServerBuffer(Int32)
  nameWithType: WebSocket.CreateServerBuffer(Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateServerBuffer(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Cria uma memória intermédia de servidor de WebSocket."
  syntax:
    content: public static ArraySegment<byte> CreateServerBuffer (int receiveBufferSize);
    parameters:
    - id: receiveBufferSize
      type: System.Int32
      description: "O tamanho, em bytes, da memória intermédia pretendida."
    return:
      type: System.ArraySegment{System.Byte}
      description: "Devolve &lt;xref:System.ArraySegment%601&gt;."
  overload: System.Net.WebSockets.WebSocket.CreateServerBuffer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  id: DefaultKeepAliveInterval
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
  fullName: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Obtém o WebSocket protocolo ligação keep-alive intervalo predefinido em milissegundos."
  syntax:
    content: public static TimeSpan DefaultKeepAliveInterval { get; }
    return:
      type: System.TimeSpan
      description: "Devolve <xref:System.TimeSpan>.</xref:System.TimeSpan>       O WebSocket protocolo ligação keep-alive intervalo predefinido em milissegundos. O valor para este intervalo típico é 30 segundos."
  overload: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.Dispose
  id: Dispose
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: Dispose()
  nameWithType: WebSocket.Dispose()
  fullName: System.Net.WebSockets.WebSocket.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Utilizado para limpar os recursos não geridos para ASP.NET e implementações personalizada alojadas."
  syntax:
    content: public abstract void Dispose ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  id: IsApplicationTargeting45
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: IsApplicationTargeting45()
  nameWithType: WebSocket.IsApplicationTargeting45()
  fullName: System.Net.WebSockets.WebSocket.IsApplicationTargeting45()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Devolve um valor que indica se se destina a instância de WebSocket [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]."
  syntax:
    content: public static bool IsApplicationTargeting45 ();
    parameters: []
    return:
      type: System.Boolean
      description: "Devolve <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> está direcionado para [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]; caso contrário <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.WebSockets.WebSocket.IsApplicationTargeting45*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  id: IsStateTerminal(System.Net.WebSockets.WebSocketState)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: IsStateTerminal(WebSocketState)
  nameWithType: WebSocket.IsStateTerminal(WebSocketState)
  fullName: System.Net.WebSockets.WebSocket.IsStateTerminal(WebSocketState)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Devolve um valor que indica se o estado da instância WebSocket está fechado ou abortado."
  syntax:
    content: protected static bool IsStateTerminal (System.Net.WebSockets.WebSocketState state);
    parameters:
    - id: state
      type: System.Net.WebSockets.WebSocketState
      description: "O estado atual do WebSocket."
    return:
      type: System.Boolean
      description: "Devolve <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> está fechado ou abortada; caso contrário <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.WebSockets.WebSocket.IsStateTerminal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Recebe dados a partir de <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> ligação no modo assíncrono."
  remarks: "Não irá impedir que esta operação. Devolvido <xref:System.Threading.Tasks.Task%601>objeto será concluída após os dados foram recebidos no <xref:System.Net.WebSockets.WebSocket>.</xref:System.Net.WebSockets.WebSocket> </xref:System.Threading.Tasks.Task%601>       Recebem exatamente um envio e um é suportado em cada <xref:System.Net.WebSockets.WebSocket>objeto em paralelo.</xref:System.Net.WebSockets.WebSocket>"
  syntax:
    content: public abstract System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "Referencia a memória intermédia de aplicação que é a localização de armazenamento para os dados recebidos."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Propaga a notificação que operações deverá ser canceladas."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "Devolve &lt;xref:System.Threading.Tasks.Task%601&gt;.       O objeto de tarefa que representa a operação assíncrona. O &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; propriedade do objeto de tarefa devolve um <xref:System.Byte>matriz que contém os dados recebidos.</xref:System.Byte>"
  overload: System.Net.WebSockets.WebSocket.ReceiveAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes
  id: RegisterPrefixes
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: RegisterPrefixes()
  nameWithType: WebSocket.RegisterPrefixes()
  fullName: System.Net.WebSockets.WebSocket.RegisterPrefixes()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Esta API suporta a infraestrutura do .NET Framework e não se destina a ser utilizado diretamente a partir do seu código. Permite que os chamadores registar os prefixos para pedidos de WebSocket (ws e wss)."
  syntax:
    content: public static void RegisterPrefixes ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.RegisterPrefixes*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Envia dados através de <xref href=&quot;System.Net.WebSockets.WebSocket&quot;> </xref> ligação no modo assíncrono."
  remarks: "Não irá impedir que esta operação. Devolvido <xref:System.Threading.Tasks.Task>objeto irá concluir depois de enviados os dados no <xref:System.Net.WebSockets.WebSocket>.</xref:System.Net.WebSockets.WebSocket> </xref:System.Threading.Tasks.Task>       Recebem exatamente um envio e um é suportado em cada <xref:System.Net.WebSockets.WebSocket>objeto em paralelo.</xref:System.Net.WebSockets.WebSocket>"
  syntax:
    content: public abstract System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "A memória intermédia para ser enviado através da ligação."
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "Indica se a aplicação está a enviar uma mensagem de texto ou binário."
    - id: endOfMessage
      type: System.Boolean
      description: "Indica se os dados na &quot;memória intermédia&quot; são a última parte de uma mensagem."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "O token que se propaga a notificação que operações deverá ser canceladas."
    return:
      type: System.Threading.Tasks.Task
      description: "O objeto de tarefa que representa a operação assíncrona."
  overload: System.Net.WebSockets.WebSocket.SendAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.State
  id: State
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: State
  nameWithType: WebSocket.State
  fullName: System.Net.WebSockets.WebSocket.State
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Devolve o estado atual da ligação de WebSocket."
  syntax:
    content: public abstract System.Net.WebSockets.WebSocketState State { get; }
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketState&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.State*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.SubProtocol
  id: SubProtocol
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
  fullName: System.Net.WebSockets.WebSocket.SubProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "O subprotocolo foi negociado durante o handshake de abertura."
  syntax:
    content: public abstract string SubProtocol { get; }
    return:
      type: System.String
      description: "Devolve <xref:System.String>.</xref:System.String>"
  overload: System.Net.WebSockets.WebSocket.SubProtocol*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  id: ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: ThrowOnInvalidState(WebSocketState,WebSocketState[])
  nameWithType: WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  fullName: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Verifica se a ligação está num estado esperado."
  syntax:
    content: protected static void ThrowOnInvalidState (System.Net.WebSockets.WebSocketState state, System.Net.WebSockets.WebSocketState[] validStates);
    parameters:
    - id: state
      type: System.Net.WebSockets.WebSocketState
      description: "O estado atual do WebSocket testado face à lista de Estados válidos."
    - id: validStates
      type: System.Net.WebSockets.WebSocketState[]
      description: "Lista de Estados de ligação válido."
  overload: System.Net.WebSockets.WebSocket.ThrowOnInvalidState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.WebSockets.WebSocket.#ctor
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: WebSocket()
  nameWithType: WebSocket.WebSocket()
  fullName: System.Net.WebSockets.WebSocket.WebSocket()
- uid: System.Net.WebSockets.WebSocket.Abort
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Abort()
  nameWithType: WebSocket.Abort()
  fullName: System.Net.WebSockets.WebSocket.Abort()
- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  nameWithType: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Net.WebSockets.WebSocket.CloseStatus
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
  fullName: System.Net.WebSockets.WebSocket.CloseStatus
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  isExternal: true
  name: Nullable<WebSocketCloseStatus>
  nameWithType: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: WebSocketCloseStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientBuffer(Int32,Int32)
  nameWithType: WebSocket.CreateClientBuffer(Int32,Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateClientBuffer(Int32,Int32)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  nameWithType: WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  fullName: System.Net.WebSockets.WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
- uid: System.Net.WebSockets.WebSocket
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocket
  nameWithType: WebSocket
  fullName: System.Net.WebSockets.WebSocket
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateServerBuffer(Int32)
  nameWithType: WebSocket.CreateServerBuffer(Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateServerBuffer(Int32)
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
  fullName: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
- uid: System.Net.WebSockets.WebSocket.Dispose
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Dispose()
  nameWithType: WebSocket.Dispose()
  fullName: System.Net.WebSockets.WebSocket.Dispose()
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsApplicationTargeting45()
  nameWithType: WebSocket.IsApplicationTargeting45()
  fullName: System.Net.WebSockets.WebSocket.IsApplicationTargeting45()
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsStateTerminal(WebSocketState)
  nameWithType: WebSocket.IsStateTerminal(WebSocketState)
  fullName: System.Net.WebSockets.WebSocket.IsStateTerminal(WebSocketState)
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<WebSocketReceiveResult>
  nameWithType: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: WebSocketReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: RegisterPrefixes()
  nameWithType: WebSocket.RegisterPrefixes()
  fullName: System.Net.WebSockets.WebSocket.RegisterPrefixes()
- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  nameWithType: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Net.WebSockets.WebSocket.State
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: State
  nameWithType: WebSocket.State
  fullName: System.Net.WebSockets.WebSocket.State
- uid: System.Net.WebSockets.WebSocket.SubProtocol
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
  fullName: System.Net.WebSockets.WebSocket.SubProtocol
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ThrowOnInvalidState(WebSocketState,WebSocketState[])
  nameWithType: WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  fullName: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
- uid: System.Net.WebSockets.WebSocketState[]
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState[]
  spec.csharp:
  - uid: System.Net.WebSockets.WebSocketState
    name: WebSocketState
    nameWithType: WebSocketState
    fullName: WebSocketState[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.WebSockets.WebSocket.#ctor*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: WebSocket
  nameWithType: WebSocket.WebSocket
- uid: System.Net.WebSockets.WebSocket.Abort*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Abort
  nameWithType: WebSocket.Abort
- uid: System.Net.WebSockets.WebSocket.CloseAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseAsync
  nameWithType: WebSocket.CloseAsync
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseOutputAsync
  nameWithType: WebSocket.CloseOutputAsync
- uid: System.Net.WebSockets.WebSocket.CloseStatus*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientBuffer
  nameWithType: WebSocket.CreateClientBuffer
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientWebSocket
  nameWithType: WebSocket.CreateClientWebSocket
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateServerBuffer
  nameWithType: WebSocket.CreateServerBuffer
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
- uid: System.Net.WebSockets.WebSocket.Dispose*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Dispose
  nameWithType: WebSocket.Dispose
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsApplicationTargeting45
  nameWithType: WebSocket.IsApplicationTargeting45
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsStateTerminal
  nameWithType: WebSocket.IsStateTerminal
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ReceiveAsync
  nameWithType: WebSocket.ReceiveAsync
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: RegisterPrefixes
  nameWithType: WebSocket.RegisterPrefixes
- uid: System.Net.WebSockets.WebSocket.SendAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SendAsync
  nameWithType: WebSocket.SendAsync
- uid: System.Net.WebSockets.WebSocket.State*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: State
  nameWithType: WebSocket.State
- uid: System.Net.WebSockets.WebSocket.SubProtocol*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ThrowOnInvalidState
  nameWithType: WebSocket.ThrowOnInvalidState
