### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.GenericAce
  id: GenericAce
  children:
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.BinaryLength
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.GetHashCode
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.PropagationFlags
  langs:
  - csharp
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
  type: Class
  summary: "Representa uma entrada de controlo de acesso (ACE) e é a classe base para todas as outras classes ACE."
  remarks: "Um ACE contém um cabeçalho ACE e um blob binário. O cabeçalho contém informações sobre o tipo de ACE, vários sinalizadores e o tamanho do blob binário."
  syntax:
    content: public abstract class GenericAce
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AceFlags
  id: AceFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AceFlags
  nameWithType: GenericAce.AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém ou define o <xref href=&quot;System.Security.AccessControl.AceFlags&quot;> </xref> associada a este <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto."
  remarks: "Um <xref:System.Security.AccessControl.AceFlags>contém sinalizadores que especificam informações sobre a herança, a propagação de herança de objeto e auditoria condições para uma entrada de controlo de acesso (ACE).</xref:System.Security.AccessControl.AceFlags>"
  syntax:
    content: public System.Security.AccessControl.AceFlags AceFlags { get; set; }
    return:
      type: System.Security.AccessControl.AceFlags
      description: "O <xref href=&quot;System.Security.AccessControl.AceFlags&quot;> </xref> associada a este <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto."
  overload: System.Security.AccessControl.GenericAce.AceFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AceType
  id: AceType
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AceType
  nameWithType: GenericAce.AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém o tipo desta entrada de controlo de acesso (ACE)."
  syntax:
    content: public System.Security.AccessControl.AceType AceType { get; }
    return:
      type: System.Security.AccessControl.AceType
      description: "O tipo deste ACE."
  overload: System.Security.AccessControl.GenericAce.AceType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  id: AuditFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém as informações de auditoria associadas com esta entrada de controlo de acesso (ACE)."
  syntax:
    content: public System.Security.AccessControl.AuditFlags AuditFlags { get; }
    return:
      type: System.Security.AccessControl.AuditFlags
      description: "As informações de auditoria associadas com esta entrada de controlo de acesso (ACE)."
  overload: System.Security.AccessControl.GenericAce.AuditFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém o comprimento, em bytes, da representação binária do atual <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto. Este comprimento deve ser utilizado antes da ACL de empacotamento de referências para uma matriz de binária com a <xref:System.Security.AccessControl.GenericAce.GetBinaryForm*>método.</xref:System.Security.AccessControl.GenericAce.GetBinaryForm*>"
  syntax:
    content: public abstract int BinaryLength { get; }
    return:
      type: System.Int32
      description: "O comprimento, em bytes, da representação binária do atual <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto."
  overload: System.Security.AccessControl.GenericAce.BinaryLength*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.Copy
  id: Copy
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: Copy()
  nameWithType: GenericAce.Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cria uma cópia profunda desta entrada de controlo de acesso (ACE)."
  syntax:
    content: public System.Security.AccessControl.GenericAce Copy ();
    parameters: []
    return:
      type: System.Security.AccessControl.GenericAce
      description: "O <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto que este método cria."
  overload: System.Security.AccessControl.GenericAce.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  id: CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: CreateFromBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cria um <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto dos dados binários especificados."
  syntax:
    content: public static System.Security.AccessControl.GenericAce CreateFromBinaryForm (byte[] binaryForm, int offset);
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "Os dados binários a partir do qual criar o novo <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto."
    - id: offset
      type: System.Int32
      description: "O desvio no qual pretende começar unmarshaling."
    return:
      type: System.Security.AccessControl.GenericAce
      description: "O <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto este método cria."
  overload: System.Security.AccessControl.GenericAce.CreateFromBinaryForm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: GenericAce.Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Determina se especificado <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto é igual a atual <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto."
  syntax:
    content: public override sealed bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "O <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto para comparar a atual <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se especificado <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto é igual a atual <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.GenericAce.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: GetBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Marshals o conteúdo a <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto para o início da matriz de bytes especificada no desvio especificado."
  syntax:
    content: public abstract void GetBinaryForm (byte[] binaryForm, int offset);
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "A matriz de bytes em que o conteúdo a <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> é empacotar as referências."
    - id: offset
      type: System.Int32
      description: "O desvio no qual pretende iniciar o empacotamento de referências."
  overload: System.Security.AccessControl.GenericAce.GetBinaryForm*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>é negativo ou demasiado elevado para permitir todo o <xref href=&quot;System.Security.AccessControl.GenericAcl&quot;> </xref> para ser copiado para o <code>array</code>."
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  id: GetHashCode
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: GenericAce.GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Funciona como uma função de hash para o <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> classe. O método GetHashCode é adequado para utilização em estruturas de algoritmos e os dados, como uma tabela hash de hash."
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código hash para o atual <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto."
  overload: System.Security.AccessControl.GenericAce.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  id: InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém os sinalizadores que especificam as propriedades de herança desta entrada de controlo de acesso (ACE)."
  syntax:
    content: public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get; }
    return:
      type: System.Security.AccessControl.InheritanceFlags
      description: "Sinalizadores que especificam as propriedades de herança deste ACE."
  overload: System.Security.AccessControl.GenericAce.InheritanceFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.IsInherited
  id: IsInherited
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: IsInherited
  nameWithType: GenericAce.IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém um valor booleano que especifica se esta entrada de controlo de acesso (ACE) é herdada ou é explicitamente definido."
  syntax:
    content: public bool IsInherited { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta ACE é herdada; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.GenericAce.IsInherited*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  id: op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: op_Equality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Determina se especificado <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objetos são considerados iguais."
  syntax:
    content: public static bool op_Equality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);
    parameters:
    - id: left
      type: System.Security.AccessControl.GenericAce
      description: "O primeiro <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto para comparar."
    - id: right
      type: System.Security.AccessControl.GenericAce
      description: "O segundo <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> para comparar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os dois <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objetos são igual; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.GenericAce.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  id: op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: op_Inequality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Determina se especificado <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objetos são considerados unequal."
  syntax:
    content: public static bool op_Inequality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);
    parameters:
    - id: left
      type: System.Security.AccessControl.GenericAce
      description: "O primeiro <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objeto para comparar."
    - id: right
      type: System.Security.AccessControl.GenericAce
      description: "O segundo <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> para comparar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se os dois <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> objetos são unequal; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.GenericAce.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  id: PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Obtém os sinalizadores que especificam as propriedades de propagação de herança desta entrada de controlo de acesso (ACE)."
  syntax:
    content: public System.Security.AccessControl.PropagationFlags PropagationFlags { get; }
    return:
      type: System.Security.AccessControl.PropagationFlags
      description: "Sinalizadores que especificam as propriedades de propagação de herança deste ACE."
  overload: System.Security.AccessControl.GenericAce.PropagationFlags*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  nameWithType: GenericAce.AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
- uid: System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  nameWithType: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  nameWithType: GenericAce.AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
- uid: System.Security.AccessControl.AceType
  parent: System.Security.AccessControl
  isExternal: false
  name: AceType
  nameWithType: AceType
  fullName: System.Security.AccessControl.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy()
  nameWithType: GenericAce.Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: CreateFromBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Equals(Object)
  nameWithType: GenericAce.Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode()
  nameWithType: GenericAce.GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  nameWithType: GenericAce.IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Equality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)
- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Inequality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.AceFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  nameWithType: GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  nameWithType: GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.BinaryLength*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.Copy*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy
  nameWithType: GenericAce.Copy
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: CreateFromBinaryForm
  nameWithType: GenericAce.CreateFromBinaryForm
- uid: System.Security.AccessControl.GenericAce.Equals*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Equals
  nameWithType: GenericAce.Equals
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetBinaryForm
  nameWithType: GenericAce.GetBinaryForm
- uid: System.Security.AccessControl.GenericAce.GetHashCode*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode
  nameWithType: GenericAce.GetHashCode
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  nameWithType: GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.op_Equality*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Equality
  nameWithType: GenericAce.op_Equality
- uid: System.Security.AccessControl.GenericAce.op_Inequality*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Inequality
  nameWithType: GenericAce.op_Inequality
- uid: System.Security.AccessControl.GenericAce.PropagationFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
