### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.GenericAce
  id: GenericAce
  children:
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.BinaryLength
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.GetHashCode
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.PropagationFlags
  langs:
  - csharp
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
  type: Class
  summary: "Represents an Access Control Entry (ACE), and is the base class for all other ACE classes."
  remarks: "An ACE contains both an ACE header and a binary blob. The header contains information about the type of the ACE, various flags, and the size of the binary blob."
  syntax:
    content: public abstract class GenericAce
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AceFlags
  id: AceFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AceFlags
  nameWithType: GenericAce.AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Gets or sets the <xref href=&quot;System.Security.AccessControl.AceFlags&quot;></xref> associated with this <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object."
  remarks: "An <xref:System.Security.AccessControl.AceFlags> object contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for an Access Control Entry (ACE)."
  syntax:
    content: public System.Security.AccessControl.AceFlags AceFlags { get; set; }
    return:
      type: System.Security.AccessControl.AceFlags
      description: "The <xref href=&quot;System.Security.AccessControl.AceFlags&quot;></xref> associated with this <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object."
  overload: System.Security.AccessControl.GenericAce.AceFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AceType
  id: AceType
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AceType
  nameWithType: GenericAce.AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Gets the type of this Access Control Entry (ACE)."
  syntax:
    content: public System.Security.AccessControl.AceType AceType { get; }
    return:
      type: System.Security.AccessControl.AceType
      description: "The type of this ACE."
  overload: System.Security.AccessControl.GenericAce.AceType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  id: AuditFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Gets the audit information associated with this Access Control Entry (ACE)."
  syntax:
    content: public System.Security.AccessControl.AuditFlags AuditFlags { get; }
    return:
      type: System.Security.AccessControl.AuditFlags
      description: "The audit information associated with this Access Control Entry (ACE)."
  overload: System.Security.AccessControl.GenericAce.AuditFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Gets the length, in bytes, of the binary representation of the current <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref:System.Security.AccessControl.GenericAce.GetBinaryForm*> method."
  syntax:
    content: public abstract int BinaryLength { get; }
    return:
      type: System.Int32
      description: "The length, in bytes, of the binary representation of the current <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object."
  overload: System.Security.AccessControl.GenericAce.BinaryLength*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.Copy
  id: Copy
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: Copy()
  nameWithType: GenericAce.Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Creates a deep copy of this Access Control Entry (ACE)."
  syntax:
    content: public System.Security.AccessControl.GenericAce Copy ();
    parameters: []
    return:
      type: System.Security.AccessControl.GenericAce
      description: "The <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object that this method creates."
  overload: System.Security.AccessControl.GenericAce.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  id: CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: CreateFromBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Creates a <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object from the specified binary data."
  syntax:
    content: public static System.Security.AccessControl.GenericAce CreateFromBinaryForm (byte[] binaryForm, int offset);
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "The binary data from which to create the new <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object."
    - id: offset
      type: System.Int32
      description: "The offset at which to begin unmarshaling."
    return:
      type: System.Security.AccessControl.GenericAce
      description: "The <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object this method creates."
  overload: System.Security.AccessControl.GenericAce.CreateFromBinaryForm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: GenericAce.Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Determines whether the specified <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object is equal to the current <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object."
  syntax:
    content: public override sealed bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "The <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object to compare to the current <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the specified <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object is equal to the current <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.AccessControl.GenericAce.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: GetBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Marshals the contents of the <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object into the specified byte array beginning at the specified offset."
  syntax:
    content: public abstract void GetBinaryForm (byte[] binaryForm, int offset);
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "The byte array into which the contents of the <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> is marshaled."
    - id: offset
      type: System.Int32
      description: "The offset at which to start marshaling."
  overload: System.Security.AccessControl.GenericAce.GetBinaryForm*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is negative or too high to allow the entire <xref href=&quot;System.Security.AccessControl.GenericAcl&quot;></xref> to be copied into <code>array</code>."
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  id: GetHashCode
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: GenericAce.GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Serves as a hash function for the <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> class. The  GetHashCode method is suitable for use in hashing algorithms and data structures like a hash table."
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "A hash code for the current <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object."
  overload: System.Security.AccessControl.GenericAce.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  id: InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Gets flags that specify the inheritance properties of this Access Control Entry (ACE)."
  syntax:
    content: public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get; }
    return:
      type: System.Security.AccessControl.InheritanceFlags
      description: "Flags that specify the inheritance properties of this ACE."
  overload: System.Security.AccessControl.GenericAce.InheritanceFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.IsInherited
  id: IsInherited
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: IsInherited
  nameWithType: GenericAce.IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Gets a Boolean value that specifies whether this Access Control Entry (ACE) is inherited or is set explicitly."
  syntax:
    content: public bool IsInherited { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if this ACE is inherited; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.AccessControl.GenericAce.IsInherited*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  id: op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: op_Equality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Determines whether the specified <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> objects are considered equal."
  syntax:
    content: public static bool op_Equality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);
    parameters:
    - id: left
      type: System.Security.AccessControl.GenericAce
      description: "The first <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object to compare."
    - id: right
      type: System.Security.AccessControl.GenericAce
      description: "The second <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the two <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> objects are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.AccessControl.GenericAce.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  id: op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: op_Inequality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Determines whether the specified <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> objects are considered unequal."
  syntax:
    content: public static bool op_Inequality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);
    parameters:
    - id: left
      type: System.Security.AccessControl.GenericAce
      description: "The first <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> object to compare."
    - id: right
      type: System.Security.AccessControl.GenericAce
      description: "The second <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> to compare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the two <xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref> objects are unequal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.AccessControl.GenericAce.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  id: PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Gets flags that specify the inheritance propagation properties of this Access Control Entry (ACE)."
  syntax:
    content: public System.Security.AccessControl.PropagationFlags PropagationFlags { get; }
    return:
      type: System.Security.AccessControl.PropagationFlags
      description: "Flags that specify the inheritance propagation properties of this ACE."
  overload: System.Security.AccessControl.GenericAce.PropagationFlags*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  nameWithType: GenericAce.AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
- uid: System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  nameWithType: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  nameWithType: GenericAce.AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
- uid: System.Security.AccessControl.AceType
  parent: System.Security.AccessControl
  isExternal: false
  name: AceType
  nameWithType: AceType
  fullName: System.Security.AccessControl.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy()
  nameWithType: GenericAce.Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: CreateFromBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Equals(Object)
  nameWithType: GenericAce.Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode()
  nameWithType: GenericAce.GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  nameWithType: GenericAce.IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Equality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)
- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Inequality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.AceFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  nameWithType: GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  nameWithType: GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.BinaryLength*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.Copy*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy
  nameWithType: GenericAce.Copy
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: CreateFromBinaryForm
  nameWithType: GenericAce.CreateFromBinaryForm
- uid: System.Security.AccessControl.GenericAce.Equals*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Equals
  nameWithType: GenericAce.Equals
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetBinaryForm
  nameWithType: GenericAce.GetBinaryForm
- uid: System.Security.AccessControl.GenericAce.GetHashCode*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode
  nameWithType: GenericAce.GetHashCode
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  nameWithType: GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.op_Equality*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Equality
  nameWithType: GenericAce.op_Equality
- uid: System.Security.AccessControl.GenericAce.op_Inequality*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Inequality
  nameWithType: GenericAce.op_Inequality
- uid: System.Security.AccessControl.GenericAce.PropagationFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
