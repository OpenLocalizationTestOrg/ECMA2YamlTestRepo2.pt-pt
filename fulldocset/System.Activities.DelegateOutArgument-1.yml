### YamlMime:ManagedReference
items:
- uid: System.Activities.DelegateOutArgument`1
  id: DelegateOutArgument`1
  children:
  - System.Activities.DelegateOutArgument`1.#ctor
  - System.Activities.DelegateOutArgument`1.#ctor(System.String)
  - System.Activities.DelegateOutArgument`1.Get(System.Activities.ActivityContext)
  - System.Activities.DelegateOutArgument`1.GetLocation(System.Activities.ActivityContext)
  - System.Activities.DelegateOutArgument`1.Set(System.Activities.ActivityContext,`0)
  - System.Activities.DelegateOutArgument`1.TypeCore
  langs:
  - csharp
  name: DelegateOutArgument<T>
  nameWithType: DelegateOutArgument<T>
  fullName: System.Activities.DelegateOutArgument<T>
  type: Class
  syntax:
    content: 'public sealed class DelegateOutArgument<T> : System.Activities.DelegateOutArgument'
    typeParameters:
    - id: T
      description: "To be added."
  inheritance:
  - System.Object
  - System.Activities.LocationReference
  - System.Activities.DelegateArgument
  - System.Activities.DelegateOutArgument
  implements: []
  inheritedMembers:
  - System.Activities.DelegateArgument.Direction
  - System.Activities.DelegateArgument.Name
  - System.Activities.DelegateArgument.NameCore
  - System.Activities.LocationReference.Type
  platform:
  - net462
- uid: System.Activities.DelegateOutArgument`1.#ctor
  id: '#ctor'
  parent: System.Activities.DelegateOutArgument`1
  langs:
  - csharp
  name: DelegateOutArgument()
  nameWithType: DelegateOutArgument<T>.DelegateOutArgument()
  fullName: System.Activities.DelegateOutArgument<T>.DelegateOutArgument()
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public DelegateOutArgument ();
    parameters: []
  overload: System.Activities.DelegateOutArgument`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.DelegateOutArgument`1.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Activities.DelegateOutArgument`1
  langs:
  - csharp
  name: DelegateOutArgument(String)
  nameWithType: DelegateOutArgument<T>.DelegateOutArgument(String)
  fullName: System.Activities.DelegateOutArgument<T>.DelegateOutArgument(String)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public DelegateOutArgument (string name);
    parameters:
    - id: name
      type: System.String
      description: "To be added."
  overload: System.Activities.DelegateOutArgument`1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.DelegateOutArgument`1.Get(System.Activities.ActivityContext)
  id: Get(System.Activities.ActivityContext)
  parent: System.Activities.DelegateOutArgument`1
  langs:
  - csharp
  name: Get(ActivityContext)
  nameWithType: DelegateOutArgument<T>.Get(ActivityContext)
  fullName: System.Activities.DelegateOutArgument<T>.Get(ActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public T Get (System.Activities.ActivityContext context);
    parameters:
    - id: context
      type: System.Activities.ActivityContext
      description: "To be added."
    return:
      type: T
      description: "To be added."
  overload: System.Activities.DelegateOutArgument`1.Get*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.DelegateOutArgument`1.GetLocation(System.Activities.ActivityContext)
  id: GetLocation(System.Activities.ActivityContext)
  parent: System.Activities.DelegateOutArgument`1
  langs:
  - csharp
  name: GetLocation(ActivityContext)
  nameWithType: DelegateOutArgument<T>.GetLocation(ActivityContext)
  fullName: System.Activities.DelegateOutArgument<T>.GetLocation(ActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public System.Activities.Location<T> GetLocation (System.Activities.ActivityContext context);
    parameters:
    - id: context
      type: System.Activities.ActivityContext
      description: "To be added."
    return:
      type: System.Activities.Location`1
      description: "To be added."
  overload: System.Activities.DelegateOutArgument`1.GetLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.DelegateOutArgument`1.Set(System.Activities.ActivityContext,`0)
  id: Set(System.Activities.ActivityContext,`0)
  parent: System.Activities.DelegateOutArgument`1
  langs:
  - csharp
  name: Set(ActivityContext,T)
  nameWithType: DelegateOutArgument<T>.Set(ActivityContext,T)
  fullName: System.Activities.DelegateOutArgument<T>.Set(ActivityContext,T)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public void Set (System.Activities.ActivityContext context, T value);
    parameters:
    - id: context
      type: System.Activities.ActivityContext
      description: "To be added."
    - id: value
      type: T
      description: "To be added."
  overload: System.Activities.DelegateOutArgument`1.Set*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.DelegateOutArgument`1.TypeCore
  id: TypeCore
  parent: System.Activities.DelegateOutArgument`1
  langs:
  - csharp
  name: TypeCore
  nameWithType: DelegateOutArgument<T>.TypeCore
  fullName: System.Activities.DelegateOutArgument<T>.TypeCore
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: protected override Type TypeCore { get; }
    return:
      type: System.Type
      description: "To be added."
  overload: System.Activities.DelegateOutArgument`1.TypeCore*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.DelegateOutArgument
  isExternal: false
  name: System.Activities.DelegateOutArgument
- uid: System.Activities.DelegateOutArgument`1.#ctor
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: DelegateOutArgument()
  nameWithType: DelegateOutArgument<T>.DelegateOutArgument()
  fullName: System.Activities.DelegateOutArgument<T>.DelegateOutArgument()
- uid: System.Activities.DelegateOutArgument`1.#ctor(System.String)
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: DelegateOutArgument(String)
  nameWithType: DelegateOutArgument<T>.DelegateOutArgument(String)
  fullName: System.Activities.DelegateOutArgument<T>.DelegateOutArgument(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activities.DelegateOutArgument`1.Get(System.Activities.ActivityContext)
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: Get(ActivityContext)
  nameWithType: DelegateOutArgument<T>.Get(ActivityContext)
  fullName: System.Activities.DelegateOutArgument<T>.Get(ActivityContext)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Activities.ActivityContext
  parent: System.Activities
  isExternal: false
  name: ActivityContext
  nameWithType: ActivityContext
  fullName: System.Activities.ActivityContext
- uid: System.Activities.DelegateOutArgument`1.GetLocation(System.Activities.ActivityContext)
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: GetLocation(ActivityContext)
  nameWithType: DelegateOutArgument<T>.GetLocation(ActivityContext)
  fullName: System.Activities.DelegateOutArgument<T>.GetLocation(ActivityContext)
- uid: System.Activities.Location`1
  parent: System.Activities
  isExternal: false
  name: Location<T>
  nameWithType: Location<T>
  fullName: System.Activities.Location<T>
- uid: System.Activities.DelegateOutArgument`1.Set(System.Activities.ActivityContext,`0)
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: Set(ActivityContext,T)
  nameWithType: DelegateOutArgument<T>.Set(ActivityContext,T)
  fullName: System.Activities.DelegateOutArgument<T>.Set(ActivityContext,T)
- uid: System.Activities.DelegateOutArgument`1.TypeCore
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: TypeCore
  nameWithType: DelegateOutArgument<T>.TypeCore
  fullName: System.Activities.DelegateOutArgument<T>.TypeCore
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Activities.DelegateOutArgument`1.#ctor*
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: DelegateOutArgument<T>
  nameWithType: DelegateOutArgument<T>.DelegateOutArgument<T>
- uid: System.Activities.DelegateOutArgument`1.Get*
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: Get
  nameWithType: DelegateOutArgument<T>.Get
- uid: System.Activities.DelegateOutArgument`1.GetLocation*
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: GetLocation
  nameWithType: DelegateOutArgument<T>.GetLocation
- uid: System.Activities.DelegateOutArgument`1.Set*
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: Set
  nameWithType: DelegateOutArgument<T>.Set
- uid: System.Activities.DelegateOutArgument`1.TypeCore*
  parent: System.Activities.DelegateOutArgument`1
  isExternal: false
  name: TypeCore
  nameWithType: DelegateOutArgument<T>.TypeCore
