### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Scope
  id: Scope
  children:
  - System.IdentityModel.Scope.#ctor
  - System.IdentityModel.Scope.#ctor(System.String)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Scope.AppliesToAddress
  - System.IdentityModel.Scope.EncryptingCredentials
  - System.IdentityModel.Scope.Properties
  - System.IdentityModel.Scope.ReplyToAddress
  - System.IdentityModel.Scope.SigningCredentials
  - System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  - System.IdentityModel.Scope.TokenEncryptionRequired
  langs:
  - csharp
  name: Scope
  nameWithType: Scope
  fullName: System.IdentityModel.Scope
  type: Class
  summary: "Represents the configuration for the token issuance request."
  remarks: "The Scope class encapsulates information about the relying party (RP) associated with a security token request (RST). This information is used by implementations of the <xref:System.IdentityModel.SecurityTokenService> class (STS) in the token issuance pipeline to return a response (RSTR) to a security token request (RST).       Scope objects contain information about the address of the RP, the encrypting and signing credentials to be used with the issued security token, and whether the token itself or symmetric keys issued with the token should be encrypted. By default, both the token and symmetric keys are encrypted. You can extend the Scope class to carry additional information about the request, such as token types accepted by the RP, default token lifetime, maximum token lifetime, algorithm suites used by the RP, and so on; however, the information encapsulated in this class should not vary for individual requests.       The token issuance pipeline is implemented in the <xref:System.IdentityModel.SecurityTokenService.Issue%2A> method and this method invokes the <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> method to get the configuration for the RST. You must implement a <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> method in your custom STS and return a Scope object appropriate for the RP and your STS implementation."
  syntax:
    content: public class Scope
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope()
  nameWithType: Scope.Scope()
  fullName: System.IdentityModel.Scope.Scope()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Scope&quot;></xref> class."
  remarks: "The following table shows the initial property values for the new <xref:System.IdentityModel.Scope> instance.      |Property|Value.|   |--------------|------------|   |<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|`null` .|   |<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|   |<xref:System.IdentityModel.Scope.Properties%2A>|An empty dictionary.|   |<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|   |<xref:System.IdentityModel.Scope.SigningCredentials%2A>|`null`.|   |<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|   |<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|"
  syntax:
    content: public Scope ();
    parameters: []
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String)
  nameWithType: Scope.Scope(String)
  fullName: System.IdentityModel.Scope.Scope(String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Scope&quot;></xref> class with the specified appliesTo address."
  remarks: "The following table shows the initial property values for the new <xref:System.IdentityModel.Scope> instance.      |Property|Value.|   |--------------|------------|   |<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|The value of the `appliesToAddress` parameter.|   |<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|   |<xref:System.IdentityModel.Scope.Properties%2A>|An empty dictionary.|   |<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|   |<xref:System.IdentityModel.Scope.SigningCredentials%2A>|`null`.|   |<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|   |<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|"
  syntax:
    content: public Scope (string appliesToAddress);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "The appliesTo address of the relying party. This is typically a URI."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,EncryptingCredentials)
  nameWithType: Scope.Scope(String,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Scope&quot;></xref> class with the specified appliesTo address and encrypting credentials."
  remarks: "The following table shows the initial property values for the new <xref:System.IdentityModel.Scope> instance.      |Property|Value.|   |--------------|------------|   |<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|The value of the `appliesToAddress` parameter.|   |<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|   |<xref:System.IdentityModel.Scope.Properties%2A>|An empty dictionary.|   |<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|   |<xref:System.IdentityModel.Scope.SigningCredentials%2A>|The value of the `signingCredentials` parameter.|   |<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|   |<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "The appliesTo address of the relying party. This is typically a URI."
    - id: encryptingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The encrypting credentials for the relying party."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,SigningCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Scope&quot;></xref> class with the specified appliesTo address and signing credentials."
  remarks: "The following table shows the initial property values for the new <xref:System.IdentityModel.Scope> instance.      |Property|Value.|   |--------------|------------|   |<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|The value of the `appliesToAddress` parameter.|   |<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|   |<xref:System.IdentityModel.Scope.Properties%2A>|An empty dictionary.|   |<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|   |<xref:System.IdentityModel.Scope.SigningCredentials%2A>|The value of the `signingCredentials` parameter.|   |<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|   |<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.SigningCredentials signingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "The appliesTo address of the relying party. This is typically a URI."
    - id: signingCredentials
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "The signing credentials for the relying party."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,SigningCredentials,EncryptingCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Initializes a new instance of the <xref href=&quot;System.IdentityModel.Scope&quot;></xref> class with the specified appliesTo address, signing credentials, and encrypting credentials."
  remarks: "The following table shows the initial property values for the new <xref:System.IdentityModel.Scope> instance.      |Property|Value|   |--------------|-----------|   |<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|The value of the `appliesToAddress` parameter.|   |<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|The value of the `encryptingCredentials` parameter.|   |<xref:System.IdentityModel.Scope.Properties%2A>|An empty dictionary.|   |<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|   |<xref:System.IdentityModel.Scope.SigningCredentials%2A>|The value of the `signingCredentials` parameter.|   |<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|   |<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.SigningCredentials signingCredentials, System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "The appliesTo address of the relying party. This is typically a URI."
    - id: signingCredentials
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "The signing credentials for the relying party."
    - id: encryptingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The encrypting credentials for the relying party."
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.AppliesToAddress
  id: AppliesToAddress
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
  fullName: System.IdentityModel.Scope.AppliesToAddress
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Gets or sets the appliesTo address of the relying party."
  syntax:
    content: public virtual string AppliesToAddress { get; set; }
    return:
      type: System.String
      description: "The appliesTo address of the relying party. This is typically a URI."
  overload: System.IdentityModel.Scope.AppliesToAddress*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.EncryptingCredentials
  id: EncryptingCredentials
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
  fullName: System.IdentityModel.Scope.EncryptingCredentials
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Gets or sets the encrypting credentials for the relying party."
  remarks: "If the <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A> property is `true`, the credentials are used to encrypt issued security tokens. If the <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A> property is `true`, the credentials are used to encrypt symmetric keys issued with security tokens."
  syntax:
    content: public virtual System.IdentityModel.Tokens.EncryptingCredentials EncryptingCredentials { get; set; }
    return:
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "The encrypting credentials to be used for the relying party."
  overload: System.IdentityModel.Scope.EncryptingCredentials*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.Properties
  id: Properties
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Properties
  nameWithType: Scope.Properties
  fullName: System.IdentityModel.Scope.Properties
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Gets the properties bag to extend the object."
  syntax:
    content: public virtual System.Collections.Generic.Dictionary<string,object> Properties { get; }
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: "The properties bag."
  overload: System.IdentityModel.Scope.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.ReplyToAddress
  id: ReplyToAddress
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
  fullName: System.IdentityModel.Scope.ReplyToAddress
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Gets or sets the replyTo address of the relying party."
  syntax:
    content: public virtual string ReplyToAddress { get; set; }
    return:
      type: System.String
      description: "The replyTo address of the relying party. This is typically a URI."
  overload: System.IdentityModel.Scope.ReplyToAddress*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.SigningCredentials
  id: SigningCredentials
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
  fullName: System.IdentityModel.Scope.SigningCredentials
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Gets or sets the signing credentials for the relying party."
  syntax:
    content: public virtual System.IdentityModel.Tokens.SigningCredentials SigningCredentials { get; set; }
    return:
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "The signing credentials to be used for the relying party."
  overload: System.IdentityModel.Scope.SigningCredentials*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  id: SymmetricKeyEncryptionRequired
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
  fullName: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Gets or sets a value that indicates whether issued symmetric keys must be encrypted."
  remarks: "If the SymmetricKeyEncryptionRequired property is `true`, symmetric keys are encrypted using the credentials in the <xref:System.IdentityModel.Scope.EncryptingCredentials%2A> property."
  syntax:
    content: public virtual bool SymmetricKeyEncryptionRequired { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if symmetric keys must be encrypted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.TokenEncryptionRequired
  id: TokenEncryptionRequired
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
  fullName: System.IdentityModel.Scope.TokenEncryptionRequired
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Gets or sets a value that indicates whether issued security tokens must be encrypted."
  remarks: "If the TokenEncryptionRequired property is `true`, security tokens are encrypted using the credentials in the <xref:System.IdentityModel.Scope.EncryptingCredentials%2A> property."
  syntax:
    content: public virtual bool TokenEncryptionRequired { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if security tokens must be encrypted; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Scope.TokenEncryptionRequired*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Scope.#ctor
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope()
  nameWithType: Scope.Scope()
  fullName: System.IdentityModel.Scope.Scope()
- uid: System.IdentityModel.Scope.#ctor(System.String)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String)
  nameWithType: Scope.Scope(String)
  fullName: System.IdentityModel.Scope.Scope(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,EncryptingCredentials)
  nameWithType: Scope.Scope(String,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,EncryptingCredentials)
- uid: System.IdentityModel.Tokens.EncryptingCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: EncryptingCredentials
  nameWithType: EncryptingCredentials
  fullName: System.IdentityModel.Tokens.EncryptingCredentials
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,SigningCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials)
- uid: System.IdentityModel.Tokens.SigningCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SigningCredentials
  nameWithType: SigningCredentials
  fullName: System.IdentityModel.Tokens.SigningCredentials
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,SigningCredentials,EncryptingCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials,EncryptingCredentials)
- uid: System.IdentityModel.Scope.AppliesToAddress
  parent: System.IdentityModel.Scope
  isExternal: false
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
  fullName: System.IdentityModel.Scope.AppliesToAddress
- uid: System.IdentityModel.Scope.EncryptingCredentials
  parent: System.IdentityModel.Scope
  isExternal: false
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
  fullName: System.IdentityModel.Scope.EncryptingCredentials
- uid: System.IdentityModel.Scope.Properties
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Properties
  nameWithType: Scope.Properties
  fullName: System.IdentityModel.Scope.Properties
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<String,Object>
  nameWithType: Dictionary<String,Object>
  fullName: System.Collections.Generic.Dictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Scope.ReplyToAddress
  parent: System.IdentityModel.Scope
  isExternal: false
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
  fullName: System.IdentityModel.Scope.ReplyToAddress
- uid: System.IdentityModel.Scope.SigningCredentials
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
  fullName: System.IdentityModel.Scope.SigningCredentials
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
  fullName: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Scope.TokenEncryptionRequired
  parent: System.IdentityModel.Scope
  isExternal: false
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
  fullName: System.IdentityModel.Scope.TokenEncryptionRequired
- uid: System.IdentityModel.Scope.#ctor*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope
  nameWithType: Scope.Scope
- uid: System.IdentityModel.Scope.AppliesToAddress*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
- uid: System.IdentityModel.Scope.EncryptingCredentials*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
- uid: System.IdentityModel.Scope.Properties*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Properties
  nameWithType: Scope.Properties
- uid: System.IdentityModel.Scope.ReplyToAddress*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
- uid: System.IdentityModel.Scope.SigningCredentials*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
- uid: System.IdentityModel.Scope.TokenEncryptionRequired*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
