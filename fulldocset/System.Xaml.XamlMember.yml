### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlMember
  id: XamlMember
  children:
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.DeclaringType
  - System.Xaml.XamlMember.DeferringLoader
  - System.Xaml.XamlMember.DependsOn
  - System.Xaml.XamlMember.Equals(System.Object)
  - System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  - System.Xaml.XamlMember.GetHashCode
  - System.Xaml.XamlMember.GetXamlNamespaces
  - System.Xaml.XamlMember.Invoker
  - System.Xaml.XamlMember.IsAmbient
  - System.Xaml.XamlMember.IsAttachable
  - System.Xaml.XamlMember.IsDirective
  - System.Xaml.XamlMember.IsEvent
  - System.Xaml.XamlMember.IsNameValid
  - System.Xaml.XamlMember.IsReadOnly
  - System.Xaml.XamlMember.IsReadPublic
  - System.Xaml.XamlMember.IsUnknown
  - System.Xaml.XamlMember.IsWriteOnly
  - System.Xaml.XamlMember.IsWritePublic
  - System.Xaml.XamlMember.LookupCustomAttributeProvider
  - System.Xaml.XamlMember.LookupDeferringLoader
  - System.Xaml.XamlMember.LookupDependsOn
  - System.Xaml.XamlMember.LookupInvoker
  - System.Xaml.XamlMember.LookupIsAmbient
  - System.Xaml.XamlMember.LookupIsEvent
  - System.Xaml.XamlMember.LookupIsReadOnly
  - System.Xaml.XamlMember.LookupIsReadPublic
  - System.Xaml.XamlMember.LookupIsUnknown
  - System.Xaml.XamlMember.LookupIsWriteOnly
  - System.Xaml.XamlMember.LookupIsWritePublic
  - System.Xaml.XamlMember.LookupTargetType
  - System.Xaml.XamlMember.LookupType
  - System.Xaml.XamlMember.LookupTypeConverter
  - System.Xaml.XamlMember.LookupUnderlyingGetter
  - System.Xaml.XamlMember.LookupUnderlyingMember
  - System.Xaml.XamlMember.LookupUnderlyingSetter
  - System.Xaml.XamlMember.LookupValueSerializer
  - System.Xaml.XamlMember.Name
  - System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.PreferredXamlNamespace
  - System.Xaml.XamlMember.SerializationVisibility
  - System.Xaml.XamlMember.TargetType
  - System.Xaml.XamlMember.ToString
  - System.Xaml.XamlMember.Type
  - System.Xaml.XamlMember.TypeConverter
  - System.Xaml.XamlMember.UnderlyingMember
  - System.Xaml.XamlMember.ValueSerializer
  langs:
  - csharp
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
  type: Class
  summary: "Fornece o identificador de sistema de tipo XAML para membros dos tipos XAML. O identificador é utilizado por leitores XAML e escritores XAML durante o processamento de nós de membro (quando o leitor XAML está posicionado num <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>) e também para a lógica de sistema de tipo XAML geral."
  remarks: "XamlMember pode utilizar as metodologias de três para devolver informações sobre a um membro XAML: standard common language runtime (CLR) reflexão; sinalizadores de APIs que bits de utilização otimizada uma técnica de reflexão só de referência chamar interno; ou chamar virtual para substituições do `Lookup*` API fornecida pelo possíveis XamlMember subclasses. Para a maioria das utilizações de APIs de serviços do .NET Framework XAML e a API de XamlMember, utilize o contexto de esquema XAML predefinido. O contexto do esquema XAML predefinido para o .NET Framework XAML Services utiliza a fazer uma cópia para o sistema de tipo CLR. Isto permite que os leitores XAML e escritores XAML a trabalhar com qualquer tipo ou membro que é definido no ou, caso contrário, disponível para, o CLR e respetivos técnicas de reflexão.      ## APIs de pesquisa * e XamlMember XamlMember de Classes derivadas define vários membros virtuais que derivadas classes podem substituir. Estes membros têm nomes que inicie sempre com a cadeia `Lookup`. O resto da API referências, em seguida, o propriedade name que influencia o método virtual. Por exemplo, uma classe derivada de XamlMember poderão substituir <xref:System.Xaml.XamlMember.LookupTargetType%2A>a influenciar a que a propriedade definida por base <xref:System.Xaml.XamlMember.TargetType%2A>devolve uma classe derivada.</xref:System.Xaml.XamlMember.TargetType%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A> Pode prever valores de retorno para propriedades no XamlMember ou existente derivam classes ao ler a documentação para o relevante `Lookup*` métodos.       O objetivo de `Lookup*` métodos consiste em fornecer uma técnica de extensão de sistema de tipo XAML que incorpora a classe base XamlMember. Ao efetuar a derivação de XamlMember e substituir a `Lookup` membros virtuais, pode definir o conceito de membro XAML para um esquema XAML num sistema de tipo XAML sem a ser vinculada às especificações de um sistema de tipo de cópia de segurança ou tecnologia. Pode também utilizar um contexto de esquema XAML fornecido neste esquema e ainda devolvem os resultados que pretende.       Por exemplo, considere a propriedade XamlMember <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A> Esta propriedade informa os chamadores que operações como a utilizar um <xref:System.Xaml.XamlWriter>para serialização pode escrever um valor para este membro de um objeto de destino.</xref:System.Xaml.XamlWriter> Numa implementação predefinida, a determinação de se o membro é gravável é efetuada utilizando técnicas de reflexão em relação a cópia de segurança CLR <xref:System.Type>e os seus membros (o <xref:System.Reflection.MemberInfo>).</xref:System.Reflection.MemberInfo> </xref:System.Type> Por conseguinte, por predefinição, o sistema de tipo XAML depende do sistema de tipo CLR. No entanto, pode remover esta dependência para o XAML tipo sistema relatórios de <xref:System.Xaml.XamlMember.IsWritePublic%2A>através da substituição da API <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> </xref:System.Xaml.XamlMember.IsWritePublic%2A> Dentro da sua substituição, pode utilizar outros determinations, tais como metadados que é específica para a sua tecnologia, uma tabela de referência principal que está otimizada para um vocabulário XAML fixo ou de uma variedade de outras estratégias para determinar se um membro XAML é gravável no seu vocabulário XAML.      ## Construir XamlMember sem XAML esquema contexto mais construtores de XamlMember requerem um <xref:System.Xaml.XamlSchemaContext>como parte da sua inicialização.</xref:System.Xaml.XamlSchemaContext> O <xref:System.Xaml.XamlSchemaContext>também é necessário para muitos interno <xref:System.Xaml.XamlSchemaContext>operações, tais como obtenção de informações que são reencaminhadas do tipo de cópia de segurança.</xref:System.Xaml.XamlSchemaContext> </xref:System.Xaml.XamlSchemaContext> Quando estiver a trabalhar com a API de XamlMember, normalmente, tem um <xref:System.Xaml.XamlSchemaContext>que está disponível a partir de uma construção surrounding como <xref:System.Xaml.XamlWriter>.</xref:System.Xaml.XamlWriter> </xref:System.Xaml.XamlSchemaContext> Neste caso, pode passar o <xref:System.Xaml.XamlSchemaContext>através de referência para todos os XAML tipo chamadas de sistema que necessitam de um contexto do esquema XAML.</xref:System.Xaml.XamlSchemaContext>       Um construtor específico <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>, não necessita de um <xref:System.Xaml.XamlSchemaContext>.</xref:System.Xaml.XamlSchemaContext> </xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> No entanto, um XamlMember que é criado com o <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>assinatura devolve `true` para <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>       Para um caminho de carga que envolve <xref:System.Xaml.XamlObjectWriter>, esse membro não pode ser escrito para um gráfico de objeto.</xref:System.Xaml.XamlObjectWriter> Utilizando a implementação de serviços do .NET Framework XAML, a <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>chamar gera um <xref:System.Xaml.XamlObjectWriterException>quando o XamlMember relevante relatórios `true` para <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       Não deve construir um XamlMember que tem um valor de `true` para <xref:System.Xaml.XamlMember.IsUnknown%2A>, a menos que a implementação pode processar as exceções de <xref:System.Xaml.XamlObjectWriter>, ou tiver outras formas de ajustar o <xref:System.Xaml.XamlObjectWriter>comportamento.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> Por exemplo, um ou mais dos seguintes podem ser true da sua implementação:-contexto do esquema de XAML a está disponível mais tarde.      -Utilize um padrão de invocador de membro.      -Deliberadamente substituir <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>num escritor XAML personalizado.</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: 'public class XamlMember : IEquatable<System.Xaml.XamlMember>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Xaml.XamlMember>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> classe com o sistema de tipos CLR <xref:System.Reflection.EventInfo>e um <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>.</xref:System.Reflection.EventInfo>"
  remarks: "Utilize este construtor se o membro representa um evento (propriedade de ponto de ligação de processador de eventos)."
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "O sistema de tipo CLR <xref:System.Reflection.EventInfo>que representa o membro de evento.</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualificam o membro."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> classe utilizando o sistema de tipos CLR <xref:System.Reflection.PropertyInfo>e um <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>.</xref:System.Reflection.PropertyInfo>"
  remarks: "Utilize este construtor se o membro representa uma propriedade (e especificamente não é uma ligação de processador de eventos)."
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "O sistema de tipo CLR <xref:System.Reflection.PropertyInfo>que representa o membro de propriedade.</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualificam o membro."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> classe utilizando o sistema de tipos CLR <xref:System.Reflection.EventInfo>e um <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>, incluindo <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> informações.</xref:System.Reflection.EventInfo>"
  remarks: "Utilize este construtor se o membro representa um evento (ou uma propriedade de ponto de ligação de processador de eventos)."
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "O sistema de tipo CLR <xref:System.Reflection.EventInfo>que representa o membro de evento.</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualificam o membro."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> chama de implementação que processa reflection de tempo de execução contra o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> classe utilizando reflexão <xref:System.Reflection.PropertyInfo>e um <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>, incluindo <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> informações.</xref:System.Reflection.PropertyInfo>"
  remarks: "Utilize este construtor apenas se o membro representa uma propriedade e se não se trata de uma ligação de processador de eventos."
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "O sistema de tipo CLR <xref:System.Reflection.PropertyInfo>que representa o membro de propriedade.</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualificam o membro."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> chama de implementação que processa a invocação de tempo de execução contra o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> de classe para um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que representa um evento anexável."
  remarks: "Utilize este construtor se o membro representa um membro de evento anexável."
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "O nome da cadeia do evento anexável."
    - id: adder
      type: System.Reflection.MethodInfo
      description: "O sistema de tipo CLR <xref:System.Reflection.MethodInfo>para o processador <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref> método do membro anexável da cópia de implementação.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualificam o membro."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  id: '#ctor(System.String,System.Xaml.XamlType,System.Boolean)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> classe utilizando um nome de cadeia e declarar <xref href=&quot;System.Xaml.XamlType&quot;> </xref> informações. A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que foi construído com esta assinatura tem limitações significativas; Consulte observações."
  remarks: "A <xref:System.Xaml.XamlMember>que está construída com XamlMember assinatura devolve `true` para <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember>       Para um caminho de carga que envolve <xref:System.Xaml.XamlObjectWriter>, esse membro não pode ser escrito para um gráfico de objeto.</xref:System.Xaml.XamlObjectWriter> Utilizando a implementação de serviços de XAML do .NET Framework, o <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>chamar gera um <xref:System.Xaml.XamlObjectWriterException>quando o relevante <xref:System.Xaml.XamlMember>relatórios `true` para <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       Não deve construir um <xref:System.Xaml.XamlMember>com <xref:System.Xaml.XamlMember.IsUnknown%2A> `true` , a menos que a implementação pode processar as exceções de <xref:System.Xaml.XamlObjectWriter>, ou tiver outras formas de ajustar o <xref:System.Xaml.XamlObjectWriter>comportamento.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> Por exemplo, um ou mais dos seguintes podem ser true da sua implementação:-contexto do esquema de XAML a está disponível mais tarde.      -Utilize um padrão de invocador de membro.      -Deliberadamente substituir <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>num escritor XAML personalizado.</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);
    parameters:
    - id: name
      type: System.String
      description: "O nome da cadeia do membro."
    - id: declaringType
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> informações para o tipo declarativo."
    - id: isAttachable
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para indicar que o membro anexável; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>or <code>declaringType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> de classe para um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que representa uma propriedade anexável."
  remarks: "Utilize este construtor se o membro representa uma propriedade anexável."
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "O nome da cadeia da propriedade anexável."
    - id: getter
      type: System.Reflection.MethodInfo
      description: "O sistema de tipo CLR <xref:System.Reflection.MethodInfo>para o <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessor do membro anexável da cópia de implementação.</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "O sistema de tipo CLR <xref:System.Reflection.MethodInfo>para o <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessor do membro anexável da cópia de implementação.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualificam o membro."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> de classe para um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que representa um evento anexável, incluindo <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> informações."
  remarks: "Utilize este construtor se o membro representa um membro de evento anexável."
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "O nome da cadeia do evento anexável."
    - id: adder
      type: System.Reflection.MethodInfo
      description: "O sistema de tipo CLR <xref:System.Reflection.MethodInfo>para o processador <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref> método do membro anexável da cópia de implementação.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualificam o membro."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> chama de implementação que processa a invocação de tempo de execução contra o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Inicializa uma nova instância do <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> de classe para um <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que representa uma propriedade anexável, incluindo <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> informações."
  remarks: "Utilize este construtor se o membro representa um membro de propriedade anexável."
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "O nome da cadeia da propriedade anexável."
    - id: getter
      type: System.Reflection.MethodInfo
      description: "O sistema de tipo CLR <xref:System.Reflection.MethodInfo>para o <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessor do membro anexável da cópia de implementação.</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "O sistema de tipo CLR <xref:System.Reflection.MethodInfo>para o <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessor do membro anexável da cópia de implementação.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "O <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> contexto que qualificam o membro."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> chama de implementação que processa a invocação de tempo de execução contra o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeclaringType
  id: DeclaringType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> para o tipo que declara o membro que está associado a este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Este valor é normalmente definida durante a inicialização e, normalmente, não é `null`.      > [!IMPORTANT] > DeclaringType informações podem ser transmitidas pelo construtores para a inicialização. Ao chamar diretamente em construtores de base, inicialização para <xref:System.Xaml.XamlMember>derivada classes podem omitir alguns das verificações de valor, que são efetuadas na classe base.</xref:System.Xaml.XamlMember> Por conseguinte, a inicialização derivada pode alterar as informações de relação comunicado de membro de tipo de membro XAML, para que este já não alinha de uma forma esperada com as informações do sistema de tipo da respetiva declaração de CLR subjacente. Para qualquer verificações de segurança críticas de declarar as informações de tipo, utilize o tipo CLR subjacente."
  syntax:
    content: public System.Xaml.XamlType DeclaringType { get; }
    return:
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> para o tipo que declara o membro que está associado a este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.DeclaringType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeferringLoader
  id: DeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; objeto, que é utilizado para o carregamento deferido de XAML declarado objetos."
  remarks: "Chamar DeferringLoader invoca <xref:System.Xaml.XamlMember.LookupDeferringLoader%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> Este comportamento ocorre em casos onde a lógica de reflexão interno inicial não já definiu as informações."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> DeferringLoader { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> restrição na genérica."
  overload: System.Xaml.XamlMember.DeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DependsOn
  id: DependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém uma lista dos <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos. Estes relatórios membros onde as relações de dependência de ordem de inicialização existem relativo isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Chamar DependsOn invoca <xref:System.Xaml.XamlMember.LookupDependsOn%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupDependsOn%2A> Este comportamento ocorre em casos onde a lógica de reflexão interno inicial não já definiu as informações.       O `DependsOn` padrão pode ser aplicado para cenários de modelos de objeto deliberadamente contradizer tal regra XAML geral. A regra XAML geral é que os membros de um tipo que não são transmitidos como texto de inicialização (ou por um método de fábrica no XAML 2009) tem de ser capazes de ser atribuída por qualquer ordem. Ao aplicar um `DependsOn` padrão para um membro, pode instruir escritores XAML sempre processar o membro referenciado antes deste membro. Pode aplicar este padrão em situações em que o valor do membro atual requer contexto ou outras informações que estão disponíveis apenas depois do outro membro está definido.       O `DependsOn` padrão deve ser aplicada judiciously e reservado para cenários de propriedade onde serve um objetivo da arquitetura. Grande número de dependências tem o potencial de atrasar o processamento de XAML. Além disso, é possível produzir dependências circulares, caso em que o comportamento de processamento de XAML não está definido.       Exemplo `DependsOn` cenários do WPF incluem algumas propriedades no <xref:System.Windows.Controls.ControlTemplate>e <xref:System.Windows.DataTemplate>, no <xref:System.Windows.Trigger>e em <xref:System.Windows.Setter>.</xref:System.Windows.Setter> </xref:System.Windows.Trigger> </xref:System.Windows.DataTemplate> </xref:System.Windows.Controls.ControlTemplate>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlMember> DependsOn { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "Uma lista de <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos."
  overload: System.Xaml.XamlMember.DependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Indica se o objeto atual é igual a outro objeto."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "O objeto para a comparação com este objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o objeto atual for igual do <code> obj </code> parâmetro; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  id: Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Indica se o objeto atual é igual a outro objeto do mesmo tipo."
  syntax:
    content: public bool Equals (System.Xaml.XamlMember other);
    parameters:
    - id: other
      type: System.Xaml.XamlMember
      description: "Um objeto para a comparação com este objeto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o objeto atual for igual do <code> other </code> parâmetro; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetHashCode
  id: GetHashCode
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve o código hash para este objeto."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Um código hash de número inteiro."
  overload: System.Xaml.XamlMember.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  id: GetXamlNamespaces
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve uma lista de espaços de nomes XAML onde este membro XAML pode existir."
  remarks: "A implementação predefinida devolve o <xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>resultado do <xref:System.Xaml.XamlMember.DeclaringType%2A>que está associado este <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.DeclaringType%2A> de chamada</xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Collections.Generic.IList<string> GetXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "Uma lista de identificadores de espaço de nomes XAML como cadeias."
  overload: System.Xaml.XamlMember.GetXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Invoker
  id: Invoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> implementação que está associada este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "O `Invoker` padrão é uma técnica de extensão do sistema de tipo XAML avançada. O `Invoker` padrão fornece uma forma para inserir o comportamento de mapeamento de tipo de esquema diferentes, enquanto ainda utilizando as definições do sistema de tipo XAML dos serviços de XAML do .NET Framework.       Se um <xref:System.Xaml.XamlMember.LookupInvoker%2A>Substituir devolve `null`, ou se a implementação predefinida devolve `null` porque não tem <xref:System.Xaml.XamlMember.UnderlyingMember%2A>este <xref:System.Xaml.XamlMember>a propriedade de invocador devolve <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupInvoker%2A>       <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>é a predefinição.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> Isto é verdadeiro na maioria das operações que utilizam serviços XAML do .NET Framework e o contexto de esquema predefinido XAML e onde nenhum específicos substituir `Invoker` padrões são transmitidos para a construção de entidades de sistema de tipo XAML.       Chamar invocador invoca <xref:System.Xaml.XamlMember.LookupInvoker%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupInvoker%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "O <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> implementação que está associada este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.Invoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAmbient
  id: IsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é reportada como uma propriedade de ambiente."
  remarks: "Chamar IsAmbient invoca <xref:System.Xaml.XamlMember.LookupIsAmbient%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupIsAmbient%2A> Este comportamento ocorre em implementações em que a lógica de reflexão interno inicial não já definiu as informações.       Verificar a existência de propriedades de ambiente são, normalmente, parte da lógica de processamento de XAML para se certificar de que os objetos e os valores que se baseiam na utilização de ambiente de qualificação de tipo podem a funcionar corretamente. As APIs de serviços de XAML do .NET Framework e o contexto de esquema predefinido XAML povoa este valor com base na atribuição com <xref:System.Windows.Markup.AmbientAttribute>.</xref:System.Windows.Markup.AmbientAttribute> A implementação predefinida do <xref:System.Xaml.XamlMember.LookupIsAmbient%2A>utiliza este existente <xref:System.Windows.Markup.AmbientAttribute>técnica e devolve `true` se <xref:System.Windows.Markup.AmbientAttribute>existe numa declaração de membro.</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute> </xref:System.Xaml.XamlMember.LookupIsAmbient%2A>       <xref:System.Windows.Markup.AmbientAttribute>encontra-se em membros de vários tipos WPF, que incluem <xref:System.Windows.Application>, <xref:System.Windows.Setter>e <xref:System.Windows.Style>.</xref:System.Windows.Style> </xref:System.Windows.Setter> </xref:System.Windows.Application></xref:System.Windows.Markup.AmbientAttribute> É também possível encontrá-lo no <xref:System.Windows.ResourceDictionary>tipo, que connotes que qualquer membro que utiliza o <xref:System.Windows.ResourceDictionary>como o respetivo tipo deve ser considerado ambiente mesmo que o membro não está atribuído especificamente.</xref:System.Windows.ResourceDictionary> </xref:System.Windows.ResourceDictionary>"
  syntax:
    content: public bool IsAmbient { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é comunicado como uma propriedade de ambiente; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAttachable
  id: IsAttachable
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é um membro anexável."
  remarks: "O valor de IsAttachable foi inicializado com base no construtor de que foi utilizado para construir uma <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember>"
  syntax:
    content: public bool IsAttachable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é um membro anexável; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsAttachable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsDirective
  id: IsDirective
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é uma diretiva XAML."
  remarks: "O valor de IsDirective foi inicializado com base no construtor de que foi utilizado para construir uma <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember> A base de <xref:System.Xaml.XamlMember>construtores inicializar para que seja IsDirective `false`.</xref:System.Xaml.XamlMember> No entanto, o <xref:System.Xaml.XamlDirective>classe (um <xref:System.Xaml.XamlMember>classe derivada) inicializa para que seja IsDirective `true`.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlDirective>       Se quiser relatar IsDirective como `true` para os chamadores de uma classe de esquema XAML personalizada para os membros XAML, certifique-se de que deriva de <xref:System.Xaml.XamlDirective>uma vez que é a única forma de ativar a esse comportamento.</xref:System.Xaml.XamlDirective>"
  syntax:
    content: public bool IsDirective { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é um XAML directiva; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsDirective*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsEvent
  id: IsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro de eventos."
  remarks: "Chamar IsEvent invoca <xref:System.Xaml.XamlMember.LookupIsEvent%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupIsEvent%2A>"
  syntax:
    content: public bool IsEvent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um evento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsNameValid
  id: IsNameValid
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é inicializado com um <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> cadeia como respetivo <xref:System.Xaml.XamlMember.Name*>.</xref:System.Xaml.XamlMember.Name*>"
  syntax:
    content: public bool IsNameValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é inicializado com um <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> cadeia; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsNameValid*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadOnly
  id: IsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro só de leitura."
  remarks: "Chamar IsReadOnly invoca <xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro só de leitura; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadPublic
  id: IsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro com um público possível chamar EndRead <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessor."
  remarks: "O IsReadPublic valor verifica se o <xref:System.Xaml.XamlMember.DeclaringType%2A>é público.</xref:System.Xaml.XamlMember.DeclaringType%2A> Se <xref:System.Xaml.XamlMember.DeclaringType%2A>é nonpublic, o `get` acessor não é possível chamar EndRead uma forma prática e devolve IsReadPublic `false`.</xref:System.Xaml.XamlMember.DeclaringType%2A>       Chamar IsReadPublic invoca <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>      > [!IMPORTANT] > O <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>método é virtual e, por conseguinte, pode ser substituído.</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> A substituição tem o potencial de alterar (forma maliciosa ou caso contrário) as informações de acesso comunicado de membro XAML, para que o já não alinha de uma forma esperada com as informações de acesso do sistema de tipo da respetiva declaração de CLR subjacente. Para qualquer verificações de segurança críticas dos níveis de acesso, utilize o tipo CLR subjacente."
  syntax:
    content: public bool IsReadPublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um público possível chamar EndRead <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessor; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsUnknown
  id: IsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se o membro não é resolvível pelo sistema de segurança que é utilizado para a resolução do tipo e o membro."
  remarks: "A <xref:System.Xaml.XamlMember>que foi construído com o <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>assinatura devolve `true` para IsUnknown.</xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> </xref:System.Xaml.XamlMember>       Para um caminho de carga que envolve <xref:System.Xaml.XamlObjectWriter>, um <xref:System.Xaml.XamlMember>com `true` para IsUnknown não pode ser escrito para um gráfico de objeto.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriter> Em implementações predefinidas no .NET Framework XAML serviços APIs, o <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>chamar gera um <xref:System.Xaml.XamlObjectWriterException>quando o relevante <xref:System.Xaml.XamlMember>relatórios `true` para IsUnknown.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       Não deve construir um <xref:System.Xaml.XamlMember>que tem um valor de `true` para IsUnknown, a menos que a implementação pode processar as exceções de <xref:System.Xaml.XamlObjectWriter>, ou tiver outras formas de ajustar o <xref:System.Xaml.XamlObjectWriter>comportamento.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember>       Chamar IsUnknown invoca <xref:System.Xaml.XamlMember.LookupIsUnknown%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupIsUnknown%2A>"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o membro não é resolvível; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se o membro é resolvível."
  overload: System.Xaml.XamlMember.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWriteOnly
  id: IsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro só de escrita."
  remarks: "Chamar IsWriteOnly invoca <xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>"
  syntax:
    content: public bool IsWriteOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro só de escrita; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWritePublic
  id: IsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um valor que indica se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro que tem um público possível chamar EndRead <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessor."
  remarks: "O valor de IsWritePublic considera se o <xref:System.Xaml.XamlMember.DeclaringType%2A>é público como parte da determinação.</xref:System.Xaml.XamlMember.DeclaringType%2A> Se <xref:System.Xaml.XamlMember.DeclaringType%2A>é nonpublic, o `set` acessor não é possível chamar EndRead uma forma prática e devolve IsWritePublic `false`.</xref:System.Xaml.XamlMember.DeclaringType%2A>       Chamar IsWritePublic invoca <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>      > [!IMPORTANT] > O <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>método é virtual e, por conseguinte, pode ser substituído.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> A substituição tem o potencial de alterar (forma maliciosa ou caso contrário) as informações de acesso comunicado de membro XAML, para que o já não alinha de uma forma esperada com as informações de acesso do sistema de tipo da respetiva declaração de CLR subjacente. Para qualquer verificações de segurança críticas dos níveis de acesso, utilize o tipo CLR subjacente."
  syntax:
    content: public bool IsWritePublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um público possível chamar EndRead <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessor; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  id: LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Quando implementada numa classe derivada, devolve uma <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> implementação."
  remarks: "Substitua este método para fornecer a reflexão interno com uma maneira de obter valores de atributo CLR. Na ausência de uma substituição, o refletor interno utiliza a lógica de reflexão do CLR típica, tais como chamadas para <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>.</xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>       Devolve a implementação predefinida `null`."
  syntax:
    content: protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();
    parameters: []
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "Um <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> implementação."
  overload: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  id: LookupDeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; objeto, que é utilizado para o carregamento deferido de XAML declarado objetos."
  remarks: "Este método é invocado quando um autor da chamada obtém um valor entre o <xref:System.Xaml.XamlMember.DeferringLoader%2A>propriedade.</xref:System.Xaml.XamlMember.DeferringLoader%2A> Substituir este método se pretender <xref:System.Xaml.XamlMember.DeferringLoader%2A>para devolver um valor que difere do valor que está ativado por reflexão interno de predefinido, e se também está a fornecer personalizada <xref:System.Xaml.Schema.XamlMemberInvoker>informações.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DeferringLoader%2A>       A implementação predefinida devolve um objeto o lendo <xref:System.Windows.Markup.XamlDeferLoadAttribute>ou utilizando um <xref:System.Xaml.XamlDeferringLoader>do tipo declarativo.</xref:System.Xaml.XamlDeferringLoader> </xref:System.Windows.Markup.XamlDeferLoadAttribute> Se nem o objeto está disponível, este método pode devolver `null`."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; que tenha um <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> restrição na genérica."
  overload: System.Xaml.XamlMember.LookupDeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDependsOn
  id: LookupDependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve uma lista de <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos. Os membros onde as relações de dependência de ordem de inicialização existem relativo isto de relatórios de itens na lista <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Este método é invocado quando um autor da chamada obtém um valor entre o <xref:System.Xaml.XamlMember.DependsOn%2A>propriedade.</xref:System.Xaml.XamlMember.DependsOn%2A> Substituir este método se pretender <xref:System.Xaml.XamlMember.DependsOn%2A>para devolver um valor que difere do valor que está ativado por reflexão interno de predefinido, e se também está a fornecer personalizada <xref:System.Xaml.Schema.XamlMemberInvoker>informações.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DependsOn%2A>       As implementações de leitor e escritor do WPF XAML atributo neste caso com <xref:System.Windows.Markup.DependsOnAttribute>.</xref:System.Windows.Markup.DependsOnAttribute> A implementação predefinida utiliza este existente <xref:System.Windows.Markup.DependsOnAttribute>técnica.</xref:System.Windows.Markup.DependsOnAttribute>       Substituir este método se não estiver a utilizar <xref:System.Windows.Markup.DependsOnAttribute>para este objetivo e pretende substituir esse técnica para indicar a ordem de processamento de propriedade com a seus próprios técnica.</xref:System.Windows.Markup.DependsOnAttribute> Se não pretender suportar uma ordem de processamento de propriedade, pode utilizar a implementação predefinida porque devolve não existem resultados, que é adequado.       A lista é só de leitura."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlMember> LookupDependsOn ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "Uma lista de <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos."
  overload: System.Xaml.XamlMember.LookupDependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupInvoker
  id: LookupInvoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve um <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> que está associado este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Este método é invocado por chamadas para <xref:System.Xaml.XamlMember.Invoker%2A>.</xref:System.Xaml.XamlMember.Invoker%2A>       A implementação predefinida não requer que um <xref:System.Xaml.XamlMember>construída utilizando um dos construtores que transmita um inicial <xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember> No entanto, uma <xref:System.Xaml.XamlMember.UnderlyingMember%2A>valor tem de existir para o <xref:System.Xaml.XamlMember>; caso contrário, devolve a implementação predefinida `null`.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Substituir este método se também derivar <xref:System.Xaml.Schema.XamlMemberInvoker>e pretende devolver a classe derivada.</xref:System.Xaml.Schema.XamlMemberInvoker> Se regressar `null`, <xref:System.Xaml.XamlMember.Invoker%2A>devolve <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>para os chamadores.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember.Invoker%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "The <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref> information for this <xref href=&quot;System.Xaml.XamlMember&quot;></xref>; or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlMember.LookupInvoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsAmbient
  id: LookupIsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve se isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> é reportada como uma propriedade de ambiente."
  remarks: "Este método é invocado por chamadas internas que verifique a existência de informações de propriedade do ambiente XAML. Comportamento de propriedade de ambiente é tida em consideração no comportamento de API público de leitores XAML e escritores XAML. As chamadas internas que referenciam LookupIsAmbient normalmente fazem parte da lógica de processamento de XAML para se certificar de que os objetos e os valores que se baseiam na utilização de ambiente de qualificação de tipo podem a funcionar corretamente. A implementação de serviços de XAML do .NET Framework predefinida utiliza attributing para obter estas informações de reflexão através de cópia de tipos CLR. Especificamente, a implementação predefinida verifica a existência de <xref:System.Windows.Markup.AmbientAttribute>e devolve `true` para LookupIsAmbient se <xref:System.Windows.Markup.AmbientAttribute>existe numa definição de membro.</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute>       Substituir este método se não estiver a utilizar <xref:System.Windows.Markup.AmbientAttribute>para este objetivo e pretende substituir esse técnica para indicar o ambiente XAML propriedades com a seus próprios técnica.</xref:System.Windows.Markup.AmbientAttribute>       APIs de exemplo do WPF esse atributo com <xref:System.Windows.Markup.AmbientAttribute>são <xref:System.Windows.Trigger.Property%2A?displayProperty=fullName>e <xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName>.</xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName> </xref:System.Windows.Trigger.Property%2A?displayProperty=fullName> </xref:System.Windows.Markup.AmbientAttribute>"
  syntax:
    content: protected virtual bool LookupIsAmbient ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para reportar este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> como uma propriedade de ambiente; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsEvent
  id: LookupIsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve se isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um evento."
  remarks: "As verificações de implementação predefinido se <xref:System.Xaml.XamlMember.UnderlyingMember%2A>é do tipo <xref:System.Reflection.EventInfo>e se estiver, devolve `true`.</xref:System.Reflection.EventInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.IsEvent%2A>.</xref:System.Xaml.XamlMember.IsEvent%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados que podem ser interpretado para determinar o XAML tipo representações de sistema numa base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsEvent ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para relatar que este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um evento; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  id: LookupIsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve se isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa uma propriedade só de leitura pretendida."
  remarks: "Devolve a implementação predefinida `true` se <xref:System.Xaml.XamlMember.UnderlyingMember%2A>existe, mas um público `set` acessor não existe para a mesma, conforme determinado pela reflexão interno.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.IsReadOnly%2A>.</xref:System.Xaml.XamlMember.IsReadOnly%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados que podem ser interpretado para determinar o XAML tipo representações de sistema numa base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>para reportar este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> como uma propriedade só de leitura pretendida; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  id: LookupIsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve se isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa uma propriedade que tenha um público <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessor."
  remarks: "A implementação predefinida devolve resultados com base no reflexão interno ou de negação de <xref:System.Xaml.XamlMember.IsWriteOnly%2A>, processamento por essa ordem.</xref:System.Xaml.XamlMember.IsWriteOnly%2A>       LookupIsReadPublic devolve se o próprio membro é público; Devolve `true` para um membro público num nonpublic o tipo declarativo. Utilize <xref:System.Xaml.XamlMember.IsReadPublic%2A>em vez disso, se pretender também considerar a visibilidade do tipo declarativo.</xref:System.Xaml.XamlMember.IsReadPublic%2A>       Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.IsReadPublic%2A>.</xref:System.Xaml.XamlMember.IsReadPublic%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember>      > [!IMPORTANT] > LookupIsReadPublic o método é virtual e, por conseguinte, pode ser substituído. A substituição tem o potencial de alterar (forma maliciosa ou caso contrário) as informações de acesso comunicado de membro XAML, para que o já não alinha de uma forma esperada com as informações de acesso do sistema de tipo da respetiva declaração de CLR subjacente. Para qualquer verificações de segurança críticas dos níveis de acesso, utilize o tipo CLR subjacente."
  syntax:
    content: protected virtual bool LookupIsReadPublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa uma propriedade que tenha um público <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessor; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsUnknown
  id: LookupIsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve se isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro que não é resolvível pelo sistema de segurança que é utilizado para a resolução do tipo e o membro."
  remarks: "Este método pode ser invocado quando existe um chamador obtém um valor de <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> A implementação predefinida devolve resultados com base em qualquer um dos reflexão interna ou a verificar para um `null` valor <xref:System.Xaml.XamlMember.UnderlyingMember%2A>, processamento por essa ordem.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsUnknown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro não é resolvível; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  id: LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve se isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro que tem um público <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessor mas não um público <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessor."
  remarks: "Devolve a implementação predefinida `true` se um <xref:System.Xaml.XamlMember.UnderlyingMember%2A>existe que tenha um público `set` acessor e um nonpublic `get` acessor, conforme determinado pela reflexão interno.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.IsWriteOnly%2A>.</xref:System.Xaml.XamlMember.IsWriteOnly%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsWriteOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro só de escrita; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  id: LookupIsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve se isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro que tem um público <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessor."
  remarks: "A implementação predefinida devolve resultados com base em reflexão interno ou de negação de <xref:System.Xaml.XamlMember.IsReadOnly%2A>, processamento por essa ordem.</xref:System.Xaml.XamlMember.IsReadOnly%2A>       Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember>      > [!IMPORTANT] > LookupIsWritePublic o método é virtual e, por conseguinte, pode ser substituído. A substituição tem o potencial de alterar (forma maliciosa ou caso contrário) as informações de acesso comunicado de membro XAML, para que o já não alinha de uma forma esperada com as informações de acesso do sistema de tipo da respetiva declaração de CLR subjacente. Para qualquer verificações de segurança críticas dos níveis de acesso, utilize o tipo CLR subjacente."
  syntax:
    content: protected virtual bool LookupIsWritePublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esta <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> representa um membro gravável; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTargetType
  id: LookupTargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo onde o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> pode existir."
  remarks: "A implementação predefinida distingue entre membros anexável e não anexável. Para os membros não anexável, LookupTargetType devolve sempre <xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> Para membros anexável, LookupTargetType devolve um resultado em examinar o <xref:System.Xaml.XamlMember.UnderlyingMember%2A>tipo de parâmetro de acessor e interpreta que o tipo com base no contexto do esquema XAML.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.TargetType%2A>.</xref:System.Xaml.XamlMember.TargetType%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupTargetType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "O tipo de onde o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> pode existir. Consulte observações."
  overload: System.Xaml.XamlMember.LookupTargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupType
  id: LookupType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo que seja utilizado pelo membro. Consulte observações."
  remarks: "Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.Type%2A>.</xref:System.Xaml.XamlMember.Type%2A> Substituir este método se pretender <xref:System.Xaml.XamlMember.Type%2A>para devolver um valor que difere do valor que está ativado por reflexão interno de predefinido, e se também está a fornecer personalizada <xref:System.Xaml.Schema.XamlMemberInvoker>informações.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.Type%2A>       A implementação predefinida utiliza os caminhos de código diferentes e significados conceptuais para o devolvido <xref:System.Xaml.XamlType>que baseia-se no se isto <xref:System.Xaml.XamlMember>representa uma propriedade, o método ou o evento.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlType>      -Para uma propriedade, o devolvido <xref:System.Xaml.XamlType>é o tipo que define a propriedade ou é devolvido pela propriedade.</xref:System.Xaml.XamlType>      -Para um evento, o devolvido <xref:System.Xaml.XamlType>é o tipo de processador de eventos obrigatório (um delegado numa implementação de CLR).</xref:System.Xaml.XamlType>      -Para um método, <xref:System.Xaml.XamlType>é o tipo de retorno.</xref:System.Xaml.XamlType>       Em cada caso, o contexto do esquema XAML é utilizado para avaliar o tipo XAML do tipo de sistema subjacente.       Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.Type%2A>.</xref:System.Xaml.XamlMember.Type%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo que seja utilizado pelo membro. Consulte observações."
  overload: System.Xaml.XamlMember.LookupType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTypeConverter
  id: LookupTypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve uma implementação de conversor de tipo que está associada este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "A implementação predefinida utiliza a seguinte lógica e a ordem de processamento: - se attributing existir ao nível do membro (<xref:System.ComponentModel.TypeConverterAttribute>), as informações de atributo são utilizadas para receber uma chamada para <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>contra o contexto do esquema XAML.</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.ComponentModel.TypeConverterAttribute>      -Se <xref:System.Xaml.XamlMember.Type%2A>for válido, é devolvido um conversor de tipos que estão associado com o tipo.</xref:System.Xaml.XamlMember.Type%2A>      -Se o membro de um evento, é devolvido um conversor de tipos de evento específicos.       Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.TypeConverter%2A>.</xref:System.Xaml.XamlMember.TypeConverter%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; instância com <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> restrição; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupTypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  id: LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve um <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessor que está associado este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "A implementação predefinida interpreta o <xref:System.Xaml.XamlMember.UnderlyingMember%2A>propriedade como <xref:System.Reflection.PropertyInfo>e devolve o valor de <xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName>(com o parâmetro definido como `true`), o que significa que o método devolvido pode ser nonpublic.</xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> Este comportamento pode resultar em `null` para determinados casos. incluindo casos em que nenhum acessor associado existe ou o membro não é uma propriedade.       Este método é invocado quando um autor da chamada obtém um valor da <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>propriedade de um <xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker> associados</xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember> Certifique-se implementar LookupUnderlyingGetter, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, e <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>para que devolvem resultados correlacionados.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "O <xref:System.Reflection.MethodInfo>para associada <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> acessor; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingGetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  id: LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve um sistema de tipo CLR <xref:System.Reflection.MemberInfo>que está associado este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>.</xref:System.Reflection.MemberInfo>"
  remarks: "A implementação predefinida devolve as informações de membro subjacente, o que se baseia na construção. Se o <xref:System.Reflection.MemberInfo>objecto é construído com uma assinatura que não fornecem informações suficientes para definir o membro subjacente, este método devolve `null`.</xref:System.Reflection.MemberInfo>       Se um membro subjacente foi definido durante a construção, não deve tem de chamar este método.       Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.UnderlyingMember%2A>.</xref:System.Xaml.XamlMember.UnderlyingMember%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember> Certifique-se de que implementa <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, e LookupUnderlyingMember para que todos eles devolvem resultados correlacionado.</xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();
    parameters: []
    return:
      type: System.Reflection.MemberInfo
      description: "Um sistema de tipo CLR <xref:System.Reflection.MemberInfo>objeto que está associado a este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MemberInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  id: LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve um <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessor que está associado este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "A implementação predefinida interpreta <xref:System.Xaml.XamlMember.UnderlyingMember%2A>como <xref:System.Reflection.PropertyInfo>e devolve o valor de <xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName>(com o parâmetro definido como `true`), o que significa que o método devolvido pode ser nonpublic.</xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> Isto pode resultar em `null` para determinados casos, incluindo casos em que não existe nenhum desse acessor ou o membro não é uma propriedade.       Este método é invocado quando existe um chamador obtém um valor de <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>num <xref:System.Xaml.Schema.XamlMemberInvoker>associado. Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember> </xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A> Certifique-se de que implementa <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, LookupUnderlyingSetter, e <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>para que devolvem resultados correlacionados.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "O <xref:System.Reflection.MethodInfo>para associada <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> acessor; ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingSetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupValueSerializer
  id: LookupValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve uma implementação de serializador de valor que está associada este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "A implementação predefinida utiliza a seguinte lógica e a ordem de processamento: - se attributing existir ao nível do membro (<xref:System.Windows.Markup.ValueSerializerAttribute>), as informações de atributo são utilizadas para receber uma chamada para <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>contra o contexto do esquema XAML.</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.Windows.Markup.ValueSerializerAttribute>      -Se <xref:System.Xaml.XamlMember.Type%2A>for válido, é devolvido um conversor de valor que estão associado com o tipo.</xref:System.Xaml.XamlMember.Type%2A>      -Se as condições anteriores não se aplicam, `null` é devolvido.       Este método é invocado quando um autor da chamada obtém um valor de <xref:System.Xaml.XamlMember.ValueSerializer%2A>.</xref:System.Xaml.XamlMember.ValueSerializer%2A> Substituir este método se pretender uniform resultados do relatório para um todo <xref:System.Xaml.XamlMember>derivados de classe, ou se tiver especializada metadados disponíveis para determinar isto numa base por caso.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; instância com <xref:System.Windows.Markup.ValueSerializer>restrição, ou <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.LookupValueSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Name
  id: Name
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> nome cadeia que declara isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Este valor é sempre definido durante a construção. Os construtores que são implementados por <xref:System.Xaml.XamlMember>normalmente acione uma excepção se não for especificado um nome de inicial; por conseguinte, não espere esta propriedade seja `null` ou uma cadeia vazia, se estiver a utilizar implementações predefinidas do .NET Framework XAML serviços.</xref:System.Xaml.XamlMember>       [A gramática XamlName](~/add/includes/ajax-current-ext-md.md) e regras de nomenclatura para o tipo CLR e os membros não são um intersect exato. É possível declarar um nome de membro que é válido em CLR mas não é válido em XAML de nomenclatura. Deve evitar esta situação se possível."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "O <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> nome cadeia que declara isto <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Determina se dois especificadas <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos têm o mesmo valor."
  syntax:
    content: public static bool op_Equality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o valor de <code> xamlMember1 </code> é igual ao valor de <code> xamlMember2 </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Determina se dois especificadas <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> objetos têm valores diferentes."
  syntax:
    content: public static bool op_Inequality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se o valor de <code> xamlMember1 </code> difere do valor <code> xamlMember2 </code>; caso contrário, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  id: PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o espaço de nomes XAML único URI que identifique o espaço de nomes XAML principal para este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "A propriedade PreferredXamlNamespace fornece o mesmo valor que chamar <xref:System.Xaml.XamlMember.GetXamlNamespaces%2A>e, em seguida, obter a cadeia de valor primeiro da lista devolvida.</xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> O espaço de nomes XAML preferencial deve ser utilizado quando escrever o membro anterior para texto ou outras representações que manter informações de espaço de nomes XAML."
  syntax:
    content: public string PreferredXamlNamespace { get; }
    return:
      type: System.String
      description: "O identificador para o espaço de nomes XAML principal para este <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>, como uma cadeia."
  overload: System.Xaml.XamlMember.PreferredXamlNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.SerializationVisibility
  id: SerializationVisibility
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref> valor que indica a forma como um designer visual deve processar o membro."
  syntax:
    content: public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }
    return:
      type: System.ComponentModel.DesignerSerializationVisibility
      description: "Um valor da <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref> enumeração. A predefinição é <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref>."
  overload: System.Xaml.XamlMember.SerializationVisibility*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TargetType
  id: TargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo onde o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> pode existir."
  remarks: "O valor devolvido é diferente de membros anexável e não anexável. Para os membros não anexável, TargetType devolve <xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> Para membros anexável, <xref:System.Xaml.XamlMember.LookupTargetType%2A>devolve um resultado com base nesta lógica: - se de reflexão não é possível resolver uma cópia de segurança (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`), este método devolve uma interna constante que representa um tipo de objeto genérico.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A>      -Se a condição anterior não é aplicável, <xref:System.Xaml.XamlMember.LookupTargetType%2A>é chamado.</xref:System.Xaml.XamlMember.LookupTargetType%2A> A implementação predefinida devolve um <xref:System.Xaml.XamlType>que baseia-se no examinar os métodos que implementam o `get` e `set` acessores.</xref:System.Xaml.XamlType> Uma classe pode substituir <xref:System.Xaml.XamlMember.LookupTargetType%2A>utilizar um comportamento diferente, tal como outros metadados de formulários que pode comunicar tipos de destino para membros anexável.</xref:System.Xaml.XamlMember.LookupTargetType%2A>"
  syntax:
    content: public System.Xaml.XamlType TargetType { get; }
    return:
      type: System.Xaml.XamlType
      description: "O tipo de onde o <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> pode existir. Consulte observações."
  overload: System.Xaml.XamlMember.TargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ToString
  id: ToString
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Devolve uma representação de cadeia deste <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Esta implementação devolve <xref:System.Xaml.XamlMember.Name%2A>.</xref:System.Xaml.XamlMember.Name%2A>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Uma representação de cadeia deste <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Type
  id: Type
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo que seja utilizado pelo membro."
  remarks: "Tipo de chamar invoca <xref:System.Xaml.XamlMember.LookupType%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupType%2A> Isto ocorre quando a lógica de reflexão interno inicial não já tenha configurado as informações.       O comportamento predefinido (sem <xref:System.Xaml.XamlMember.LookupType%2A>substituir), o devolvido <xref:System.Xaml.XamlType>pode ter diferentes significados conceptuais.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember.LookupType%2A> Aplica-se de que significado depende de se isto <xref:System.Xaml.XamlMember>representa uma propriedade, um método ou um evento, tal como mostra o seguinte lista: - para uma propriedade, o devolvido <xref:System.Xaml.XamlType>é o tipo que define a propriedade ou é devolvido pela propriedade.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember>      -Para um evento, o devolvido <xref:System.Xaml.XamlType>é o tipo de processador de eventos obrigatório (um delegado numa implementação de CLR).</xref:System.Xaml.XamlType>      -Para um método, <xref:System.Xaml.XamlType>é o tipo de retorno deste método, o que poderá ser `null`.</xref:System.Xaml.XamlType>       Em cada caso, o contexto do esquema XAML é utilizado para avaliar o tipo XAML do tipo de cópia de segurança."
  syntax:
    content: public System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "O <xref href=&quot;System.Xaml.XamlType&quot;> </xref> do tipo que seja utilizado pelo membro. Consulte observações."
  overload: System.Xaml.XamlMember.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TypeConverter
  id: TypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; objeto, que pode ser utilizado para a construção de conversão do tipo de XAML declarado objetos."
  remarks: "Chamar TypeConverter invoca <xref:System.Xaml.XamlMember.LookupTypeConverter%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupTypeConverter%2A> Este comportamento ocorre quando a lógica de reflexão interno inicial não já tenha configurado as informações.       As implementações que devolvem um valor de propriedade não nulo para TypeConverter não são necessariamente um trabalho <xref:System.ComponentModel.TypeConverter>.</xref:System.ComponentModel.TypeConverter> Segue-se uma lista de possíveis valores de retorno não nulo para TypeConverter e estes valores representar:-o valor de retorno relatórios um conversor de tipos que é atribuído especificamente para esse membro ou mais, geralmente, o tipo de destino do conversor. Este comportamento é normalmente que a maioria dos sistemas de tipo XAML e processadores XAML procurarem para instanciar um conversor de tipos e invocar os respetivos métodos.      -O valor de retorno relatórios um conversor de valor incorporado. Estes conversores existem para determinadas operações internas que são executadas por um escritor XAML. Em particular, estes conversores de valor incorporado converter os valores de cadeia de atributo não processados para as primitivas de idioma ao nível XAML. Para a implementação de serviços do .NET Framework XAML, estes conversões de tipo incorporado frequentemente reencaminhá-los para um conversor de tipos que está definido na assemblagem de sistema. Por exemplo, uma conversão para um <xref:System.Int32>tem de valor incorporado reencaminhado conversão e por isso, as <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A>referências de valor <xref:System.ComponentModel.Int32Converter>.</xref:System.ComponentModel.Int32Converter> </xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> </xref:System.Int32>      -O valor de retorno relatórios caso especial de um modelo de objeto; ou seja, o <xref:System.Xaml.XamlMember>tem um <xref:System.Xaml.XamlMember.Type%2A>valor de <xref:System.Object>.</xref:System.Object> </xref:System.Xaml.XamlMember.Type%2A> </xref:System.Xaml.XamlMember> Neste caso, o <xref:System.Xaml.Schema.XamlValueConverter%601>relatórios que o <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName>é {`Object}`.</xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName> </xref:System.Xaml.Schema.XamlValueConverter%601> No entanto, <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>é `null` porque nenhum tipo real ou a instância está disponível para efetuar esta conversão.</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> Em vez disso, o comportamento do modelo de objeto não é possível determinar até que o tempo de execução, quando o tempo de execução a tecnologia específica determina o processamento do gráfico de objeto.       Se pode aceder a um trabalho <xref:System.ComponentModel.TypeConverter>de <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>, pode invocar respectivos métodos de conversão.</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> </xref:System.ComponentModel.TypeConverter> No entanto, vários métodos de conversão baseiam-se no contexto de serviço. Se não tiver o mesmo contexto de serviço disponível que espera que o conversor de tipos para a respetiva função típica de escrita de objetos de gráficos de objetos, os métodos de conversor podem acionar as exceções."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; valor, com um <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> restrição na genérica. Consulte observações."
  overload: System.Xaml.XamlMember.TypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.UnderlyingMember
  id: UnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém o sistema de tipo CLR <xref:System.Reflection.MemberInfo>que está disponível para um membro que é criado pelo <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.MethodInfo>, ou <xref:System.Reflection.EventInfo>.</xref:System.Reflection.EventInfo> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.PropertyInfo> </xref:System.Reflection.MemberInfo>"
  remarks: "Chamar UnderlyingMember invoca <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>"
  syntax:
    content: public System.Reflection.MemberInfo UnderlyingMember { get; }
    return:
      type: System.Reflection.MemberInfo
      description: "O sistema de tipos CLR <xref:System.Reflection.MemberInfo>informações, como a conversão de parâmetros do construtor inicial.</xref:System.Reflection.MemberInfo> A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> que foi construído com o &lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt; assinatura devolve <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.UnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ValueSerializer
  id: ValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Obtém um &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; objeto, que é utilizado para a serialização do valor de XAML declarado objetos."
  remarks: "Chamar ValueSerializer invoca <xref:System.Xaml.XamlMember.LookupValueSerializer%2A>ou uma substituição específica deste método.</xref:System.Xaml.XamlMember.LookupValueSerializer%2A> Este comportamento ocorre quando a lógica de reflexão interno inicial não já tenha configurado as informações.       Nem todos os casos que devolvem um valor de propriedade não nulo para ValueSerializer são necessariamente um trabalho <xref:System.Windows.Markup.ValueSerializer>.</xref:System.Windows.Markup.ValueSerializer> Consulte observações em <xref:System.Xaml.XamlMember.TypeConverter%2A>; as mesmas considerações de aplicam a ValueSerializer.</xref:System.Xaml.XamlMember.TypeConverter%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; com <xref:System.Windows.Markup.ValueSerializer>restrição na genérica.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.ValueSerializer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.Schema.XamlMemberInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlMemberInvoker
  nameWithType: XamlMemberInvoker
  fullName: System.Xaml.Schema.XamlMemberInvoker
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.DeclaringType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
- uid: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<XamlDeferringLoader>
  nameWithType: XamlValueConverter<XamlDeferringLoader>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Xaml.XamlDeferringLoader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlDeferringLoader
    name: XamlDeferringLoader
    nameWithType: XamlDeferringLoader
    fullName: XamlDeferringLoader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.DependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
- uid: System.Collections.Generic.IList{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<XamlMember>
  nameWithType: IList<XamlMember>
  fullName: System.Collections.Generic.IList<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Equals(System.Object)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlMember.GetHashCode
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Invoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
- uid: System.Xaml.XamlMember.LookupDependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
- uid: System.Xaml.XamlMember.LookupInvoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
- uid: System.Xaml.XamlMember.LookupIsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
- uid: System.Xaml.XamlMember.LookupIsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
- uid: System.Xaml.XamlMember.LookupIsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
- uid: System.Xaml.XamlMember.LookupTargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
- uid: System.Xaml.XamlMember.LookupType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
- uid: System.Xaml.XamlMember.LookupTypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
- uid: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TypeConverter>
  nameWithType: XamlValueConverter<TypeConverter>
  fullName: System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.ComponentModel.TypeConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.TypeConverter
    name: TypeConverter
    nameWithType: TypeConverter
    fullName: TypeConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
- uid: System.Xaml.XamlMember.LookupValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
- uid: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<ValueSerializer>
  nameWithType: XamlValueConverter<ValueSerializer>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Windows.Markup.ValueSerializer>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.ValueSerializer
    name: ValueSerializer
    nameWithType: ValueSerializer
    fullName: ValueSerializer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Name
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
- uid: System.ComponentModel.DesignerSerializationVisibility
  parent: System.ComponentModel
  isExternal: false
  name: DesignerSerializationVisibility
  nameWithType: DesignerSerializationVisibility
  fullName: System.ComponentModel.DesignerSerializationVisibility
- uid: System.Xaml.XamlMember.TargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
- uid: System.Xaml.XamlMember.Type
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
- uid: System.Xaml.XamlMember.#ctor*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember.XamlMember
- uid: System.Xaml.XamlMember.DeclaringType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
- uid: System.Xaml.XamlMember.DependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
- uid: System.Xaml.XamlMember.Equals*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals
  nameWithType: XamlMember.Equals
- uid: System.Xaml.XamlMember.GetHashCode*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode
  nameWithType: XamlMember.GetHashCode
- uid: System.Xaml.XamlMember.GetXamlNamespaces*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces
  nameWithType: XamlMember.GetXamlNamespaces
- uid: System.Xaml.XamlMember.Invoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider
  nameWithType: XamlMember.LookupCustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader
  nameWithType: XamlMember.LookupDeferringLoader
- uid: System.Xaml.XamlMember.LookupDependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn
  nameWithType: XamlMember.LookupDependsOn
- uid: System.Xaml.XamlMember.LookupInvoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker
  nameWithType: XamlMember.LookupInvoker
- uid: System.Xaml.XamlMember.LookupIsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient
  nameWithType: XamlMember.LookupIsAmbient
- uid: System.Xaml.XamlMember.LookupIsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent
  nameWithType: XamlMember.LookupIsEvent
- uid: System.Xaml.XamlMember.LookupIsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly
  nameWithType: XamlMember.LookupIsReadOnly
- uid: System.Xaml.XamlMember.LookupIsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic
  nameWithType: XamlMember.LookupIsReadPublic
- uid: System.Xaml.XamlMember.LookupIsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown
  nameWithType: XamlMember.LookupIsUnknown
- uid: System.Xaml.XamlMember.LookupIsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly
  nameWithType: XamlMember.LookupIsWriteOnly
- uid: System.Xaml.XamlMember.LookupIsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic
  nameWithType: XamlMember.LookupIsWritePublic
- uid: System.Xaml.XamlMember.LookupTargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType
  nameWithType: XamlMember.LookupTargetType
- uid: System.Xaml.XamlMember.LookupType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType
  nameWithType: XamlMember.LookupType
- uid: System.Xaml.XamlMember.LookupTypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter
  nameWithType: XamlMember.LookupTypeConverter
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter
  nameWithType: XamlMember.LookupUnderlyingGetter
- uid: System.Xaml.XamlMember.LookupUnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember
  nameWithType: XamlMember.LookupUnderlyingMember
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter
  nameWithType: XamlMember.LookupUnderlyingSetter
- uid: System.Xaml.XamlMember.LookupValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer
  nameWithType: XamlMember.LookupValueSerializer
- uid: System.Xaml.XamlMember.Name*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality
  nameWithType: XamlMember.op_Equality
- uid: System.Xaml.XamlMember.op_Inequality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality
  nameWithType: XamlMember.op_Inequality
- uid: System.Xaml.XamlMember.PreferredXamlNamespace*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
- uid: System.Xaml.XamlMember.TargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString
  nameWithType: XamlMember.ToString
- uid: System.Xaml.XamlMember.Type*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
