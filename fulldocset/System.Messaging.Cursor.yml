### YamlMime:ManagedReference
items:
- uid: System.Messaging.Cursor
  id: Cursor
  children:
  - System.Messaging.Cursor.Close
  - System.Messaging.Cursor.Dispose
  langs:
  - csharp
  name: Cursor
  nameWithType: Cursor
  fullName: System.Messaging.Cursor
  type: Class
  summary: "Um Cursor é utilizado para manter uma localização específica num <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> ao ler as mensagens da fila."
  remarks: "Para obter um cursor para um <xref:System.Messaging.MessageQueue>, chame o <xref:System.Messaging.MessageQueue.CreateCursor%2A>método para essa fila.</xref:System.Messaging.MessageQueue.CreateCursor%2A> </xref:System.Messaging.MessageQueue>       Um Cursor é utilizado com esses métodos como <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29>e <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29>quando precisa de ler mensagens que não tenham o princípio da fila.</xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> </xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> Isto inclui mensagens de leitura, de forma síncrona ou assíncrona. Os cursores não precisam de ser utilizado para ler a primeira mensagem numa fila.       Ao ler as mensagens dentro de uma transação, a colocação de mensagens em fila não reverter movimento do cursor se a transação foi abortada. Por exemplo, suponha que não há uma fila com duas mensagens, A1 e A2. Se remover mensagem A1 enquanto numa transação, a colocação de mensagens em fila move o cursor para a mensagem A2. No entanto, se a transação foi abortada por qualquer motivo, permanece indo mensagem A2 mensagem que a1 é inserido novamente a fila, mas o cursor.       Para fechar o cursor, chame <xref:System.Messaging.Cursor.Close%2A>.</xref:System.Messaging.Cursor.Close%2A>"
  syntax:
    content: 'public sealed class Cursor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.Cursor.Close
  id: Close
  parent: System.Messaging.Cursor
  langs:
  - csharp
  name: Close()
  nameWithType: Cursor.Close()
  fullName: System.Messaging.Cursor.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Fecha o cursor, permitindo a colocação de mensagens em fila libertar os recursos associados."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.Cursor.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Cursor.Dispose
  id: Dispose
  parent: System.Messaging.Cursor
  langs:
  - csharp
  name: Dispose()
  nameWithType: Cursor.Dispose()
  fullName: System.Messaging.Cursor.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Versões de todos os recursos utilizados pelo <xref href=&quot;System.Messaging.Cursor&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.Cursor.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Messaging.Cursor.Close
  parent: System.Messaging.Cursor
  isExternal: false
  name: Close()
  nameWithType: Cursor.Close()
  fullName: System.Messaging.Cursor.Close()
- uid: System.Messaging.Cursor.Dispose
  parent: System.Messaging.Cursor
  isExternal: false
  name: Dispose()
  nameWithType: Cursor.Dispose()
  fullName: System.Messaging.Cursor.Dispose()
- uid: System.Messaging.Cursor.Close*
  parent: System.Messaging.Cursor
  isExternal: false
  name: Close
  nameWithType: Cursor.Close
- uid: System.Messaging.Cursor.Dispose*
  parent: System.Messaging.Cursor
  isExternal: false
  name: Dispose
  nameWithType: Cursor.Dispose
